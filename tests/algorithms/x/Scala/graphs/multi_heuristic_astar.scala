// Generated by Mochi v0.10.59 on 2025-08-07 11:25:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Pos(var x: BigInt, var y: BigInt)

case class PQNode(var pos: Pos, var pri: Double)

case class PQPopResult(var pq: ArrayBuffer[PQNode], var node: PQNode)

def pos_equal(a: Pos, b: Pos): Boolean = {
  return (a.asInstanceOf[Pos].x == b.asInstanceOf[Pos].x && a.asInstanceOf[Pos].y == b.asInstanceOf[Pos].y).asInstanceOf[Boolean]
}

def pos_key(p: Pos): String = {
  return String.valueOf(p.asInstanceOf[Pos].x) + "," + String.valueOf(p.asInstanceOf[Pos].y)
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def consistent_heuristic(p: Pos, goal: Pos): Double = {
  val dx: Double = (p.asInstanceOf[Pos].x - goal.x).toString.toDouble
  val dy: Double = (p.asInstanceOf[Pos].y - goal.y).toString.toDouble
  return sqrtApprox(dx * dx + dy * dy)
}

def iabs(x: BigInt): BigInt = {
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

def heuristic_1(p: Pos, goal: Pos): Double = {
  return (iabs(p.asInstanceOf[Pos].x - goal.x) + iabs(p.asInstanceOf[Pos].y - goal.y)).toString.toDouble
}

def heuristic_2(p: Pos, goal: Pos): Double = {
  val h: Double = consistent_heuristic(p, goal)
  return h / t.toString.toDouble
}

def heuristic(i: BigInt, p: Pos, goal: Pos): Double = {
  if (i == BigInt(0)) {
    return consistent_heuristic(p, goal)
  }
  if (i == BigInt(1)) {
    return heuristic_1(p, goal)
  }
  return heuristic_2(p, goal)
}

def key_fn(start: Pos, i: BigInt, goal: Pos, g_func: scala.collection.mutable.Map[String,Double]): Double = {
  val g: Double = g_func.getOrElse(pos_key(start).toString, 0.0).asInstanceOf[Double]
  return g + W1 * heuristic(i, start, goal)
}

def valid(p: Pos): Boolean = {
  if ((p.asInstanceOf[Pos].x < BigInt(0) || p.asInstanceOf[Pos].x > n - BigInt(1)).asInstanceOf[Boolean]) {
    return false
  }
  if ((p.asInstanceOf[Pos].y < BigInt(0) || p.asInstanceOf[Pos].y > n - BigInt(1)).asInstanceOf[Boolean]) {
    return false
  }
  return true
}

def in_blocks(p: Pos): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((blocks).size)) {
    if (pos_equal(blocks((i.toInt).toInt), p)) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def pq_put(_pq: ArrayBuffer[PQNode], node: Pos, pri: Double): ArrayBuffer[PQNode] = {
  var pq: ArrayBuffer[PQNode] = _pq
  var updated: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((pq).size)) {
    if (pos_equal(pq((i.toInt).toInt).pos, node)) {
      if (pri < pq((i.toInt).toInt).pri) {
        pq((i).toInt) = PQNode(node, pri)
      }
      updated = true
    }
    i = i + BigInt(1)
  }
  if (!updated) {
    pq = pq :+ PQNode(node, pri)
  }
  return pq
}

def pq_minkey(pq: ArrayBuffer[PQNode]): Double = {
  if (BigInt((pq).size) == BigInt(0)) {
    return INF
  }
  var first: PQNode = pq((BigInt(0).toInt).toInt)
  var m: Double = first.asInstanceOf[PQNode].pri
  var i: BigInt = BigInt(1)
  while (i < BigInt((pq).size)) {
    var item: PQNode = pq((i.toInt).toInt)
    if (item.asInstanceOf[PQNode].pri < m) {
      m = item.asInstanceOf[PQNode].pri
    }
    i = i + BigInt(1)
  }
  return m
}

def pq_pop_min(pq: ArrayBuffer[PQNode]): PQPopResult = {
  var best: PQNode = pq((BigInt(0).toInt).toInt)
  var idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(1)
  while (i < BigInt((pq).size)) {
    if (pq((i.toInt).toInt).pri < best.asInstanceOf[PQNode].pri) {
      best = pq((i.toInt).toInt)
      idx = i
    }
    i = i + BigInt(1)
  }
  var new_pq: ArrayBuffer[PQNode] = ArrayBuffer[PQNode]()
  i = BigInt(0)
  while (i < BigInt((pq).size)) {
    if (i != idx) {
      new_pq = new_pq :+ pq((i.toInt).toInt)
    }
    i = i + BigInt(1)
  }
  return PQPopResult(new_pq, best)
}

def pq_remove(pq: ArrayBuffer[PQNode], node: Pos): ArrayBuffer[PQNode] = {
  var new_pq: ArrayBuffer[PQNode] = ArrayBuffer[PQNode]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((pq).size)) {
    if (!pos_equal(pq((i.toInt).toInt).pos, node)) {
      new_pq = new_pq :+ pq((i.toInt).toInt)
    }
    i = i + BigInt(1)
  }
  return new_pq
}

def reconstruct(back_pointer: scala.collection.mutable.Map[String,Pos], goal: Pos, start: Pos): ArrayBuffer[Pos] = {
  var path: ArrayBuffer[Pos] = ArrayBuffer[Pos]()
  var current: Pos = goal
  var key: String = pos_key(current)
  path = path :+ current
  while (!pos_equal(current, start)) {
    current = back_pointer.getOrElse(key.toString, null).asInstanceOf[Pos]
    key = pos_key(current)
    path = path :+ current
  }
  var rev: ArrayBuffer[Pos] = ArrayBuffer[Pos]()
  var i: BigInt = BigInt((path).size) - BigInt(1)
  while (i >= BigInt(0)) {
    rev = rev :+ path((i.toInt).toInt)
    i = i - BigInt(1)
  }
  return rev
}

def neighbours(p: Pos): ArrayBuffer[Pos] = {
  val left: Pos = Pos(p.asInstanceOf[Pos].x - BigInt(1), p.asInstanceOf[Pos].y)
  val right: Pos = Pos(p.asInstanceOf[Pos].x + BigInt(1), p.asInstanceOf[Pos].y)
  val up: Pos = Pos(p.asInstanceOf[Pos].x, p.asInstanceOf[Pos].y + BigInt(1))
  val down: Pos = Pos(p.asInstanceOf[Pos].x, p.asInstanceOf[Pos].y - BigInt(1))
  return ArrayBuffer(left, right, up, down)
}

def multi_a_star(start: Pos, goal: Pos, n_heuristic: BigInt): Any = {
  var g_function: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  var back_pointer: scala.collection.mutable.Map[String,Pos] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Pos]]
  var visited: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  var open_list: ArrayBuffer[ArrayBuffer[PQNode]] = ArrayBuffer[ArrayBuffer[PQNode]]()
  g_function.update(pos_key(start), 0.0)
  g_function.update(pos_key(goal), INF)
  back_pointer.update(pos_key(start), Pos(-BigInt(1), -BigInt(1)))
  back_pointer.update(pos_key(goal), Pos(-BigInt(1), -BigInt(1)))
  visited.update(pos_key(start), true)
  var i: BigInt = BigInt(0)
  while (i < n_heuristic) {
    open_list = open_list :+ ArrayBuffer[PQNode]()
    val pri: Double = key_fn(start, i, goal, g_function)
    open_list((i).toInt) = pq_put(open_list((i.toInt).toInt), start, pri)
    i = i + BigInt(1)
  }
  val _br10 = new Breaks
  val _ct10 = new Breaks
  _br10.breakable {
    while (pq_minkey(open_list((BigInt(0).toInt).toInt)) < INF) {
      _ct10.breakable {
        var chosen: BigInt = BigInt(0)
        i = BigInt(1)
        val _br11 = new Breaks
        _br11.breakable {
          while (i < n_heuristic) {
            if (pq_minkey(open_list((i.toInt).toInt)) <= W2 * pq_minkey(open_list((BigInt(0).toInt).toInt))) {
              chosen = i
              _br11.break()
            }
            i = i + BigInt(1)
          }
        }
        if (chosen != BigInt(0)) {
          t = t + BigInt(1)
        }
        var pair: PQPopResult = pq_pop_min(open_list((chosen.toInt).toInt))
        open_list((chosen).toInt) = pair.asInstanceOf[PQPopResult].pq
        val current: PQNode = pair.asInstanceOf[PQPopResult].node
        i = BigInt(0)
        while (i < n_heuristic) {
          if (i != chosen) {
            open_list((i).toInt) = pq_remove(open_list((i.toInt).toInt), current.asInstanceOf[PQNode].pos)
          }
          i = i + BigInt(1)
        }
        val ckey: String = pos_key(current.asInstanceOf[PQNode].pos)
        if ((visited.contains(ckey)).asInstanceOf[Boolean]) {
          _ct10.break()
        }
        visited.update(ckey, true)
        if (pos_equal(current.asInstanceOf[PQNode].pos, goal)) {
          val path: ArrayBuffer[Pos] = reconstruct(back_pointer, goal, start)
          var j: BigInt = BigInt(0)
          while (j < BigInt((path).size)) {
            val p: Pos = path((j.toInt).toInt)
            println("(" + String.valueOf(p.asInstanceOf[Pos].x) + "," + String.valueOf(p.asInstanceOf[Pos].y) + ")")
            j = j + BigInt(1)
          }
          return
        }
        val neighs: ArrayBuffer[Pos] = neighbours(current.asInstanceOf[PQNode].pos)
        var k: BigInt = BigInt(0)
        while (k < BigInt((neighs).size)) {
          val nb: Pos = neighs((k.toInt).toInt)
          if ((valid(nb) && in_blocks(nb) == false).asInstanceOf[Boolean]) {
            val nkey: String = pos_key(nb)
            val tentative: Double = g_function.getOrElse(ckey.toString, 0.0).asInstanceOf[Double] + 1.0
            if ((!(g_function.contains(nkey)).asInstanceOf[Boolean] || tentative < g_function.getOrElse(nkey.toString, 0.0).asInstanceOf[Double]).asInstanceOf[Boolean]) {
              g_function.update(nkey, tentative)
              back_pointer.update(nkey, current.asInstanceOf[PQNode].pos)
              i = BigInt(0)
              while (i < n_heuristic) {
                val pri2: Double = tentative + W1 * heuristic(i, nb, goal)
                open_list((i).toInt) = pq_put(open_list((i.toInt).toInt), nb, pri2)
                i = i + BigInt(1)
              }
            }
          }
          k = k + BigInt(1)
        }
      }
    }
  }
  println("No path found to goal")
  return null
}

val W1: Double = 1.0

val W2: Double = 1.0

val n: BigInt = BigInt(20)

val n_heuristic: BigInt = BigInt(3)

val INF: Double = 1000000000.0

var t: BigInt = BigInt(1)

val blocks: ArrayBuffer[Pos] = ArrayBuffer(Pos(BigInt(0), BigInt(1)), Pos(BigInt(1), BigInt(1)), Pos(BigInt(2), BigInt(1)), Pos(BigInt(3), BigInt(1)), Pos(BigInt(4), BigInt(1)), Pos(BigInt(5), BigInt(1)), Pos(BigInt(6), BigInt(1)), Pos(BigInt(7), BigInt(1)), Pos(BigInt(8), BigInt(1)), Pos(BigInt(9), BigInt(1)), Pos(BigInt(10), BigInt(1)), Pos(BigInt(11), BigInt(1)), Pos(BigInt(12), BigInt(1)), Pos(BigInt(13), BigInt(1)), Pos(BigInt(14), BigInt(1)), Pos(BigInt(15), BigInt(1)), Pos(BigInt(16), BigInt(1)), Pos(BigInt(17), BigInt(1)), Pos(BigInt(18), BigInt(1)), Pos(BigInt(19), BigInt(1)))

val start: Pos = Pos(BigInt(0), BigInt(0))

val goal: Pos = Pos(n - BigInt(1), n - BigInt(1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    multi_a_star(start, goal, n_heuristic)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
