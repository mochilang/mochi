// Generated by Mochi v0.10.59 on 2025-08-07 11:16:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Edge(var destination_vertex: BigInt, var weight: BigInt)

case class AdjacencyList(var graph: ArrayBuffer[ArrayBuffer[Edge]], var size: BigInt)

def new_adjacency_list(size: BigInt): AdjacencyList = {
  var g: ArrayBuffer[ArrayBuffer[Edge]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < size) {
    g = g :+ ArrayBuffer()
    i = i + 1
  }
  return AdjacencyList(g, size)
}

def add_edge(al: AdjacencyList, from_vertex: BigInt, to_vertex: BigInt, weight: BigInt): Any = {
  if (!(weight == 0 || weight == 1).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Edge weight must be either 0 or 1."))
  }
  if ((to_vertex < 0 || to_vertex >= al.asInstanceOf[AdjacencyList].size).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Vertex indexes must be in [0; size)."))
  }
  var g: ArrayBuffer[ArrayBuffer[Edge]] = al.asInstanceOf[AdjacencyList].graph
  val edges: ArrayBuffer[Edge] = g((from_vertex.toInt).toInt)
  g((from_vertex).toInt) = edges :+ Edge(to_vertex, weight)
  al.asInstanceOf[AdjacencyList].graph = g
}

def push_front(q: ArrayBuffer[BigInt], v: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer(v)
  var i: BigInt = 0
  while (i < BigInt((q).size)) {
    res = res :+ q((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def pop_front(q: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 1
  while (i < BigInt((q).size)) {
    res = res :+ q((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def front(q: ArrayBuffer[BigInt]): BigInt = {
  return q((0.toInt).toInt)
}

def get_shortest_path(al: AdjacencyList, start_vertex: BigInt, finish_vertex: BigInt): BigInt = {
  var queue: ArrayBuffer[BigInt] = ArrayBuffer(start_vertex)
  var distances: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < al.asInstanceOf[AdjacencyList].size) {
    distances = distances :+ BigInt((-1).toString.toDouble.toInt)
    i = i + 1
  }
  distances((start_vertex).toInt) = 0
  val _ct4 = new Breaks
  while (BigInt((queue).size) > 0) {
    _ct4.breakable {
      val current_vertex: BigInt = front(queue)
      queue = pop_front(queue)
      val current_distance: BigInt = distances((current_vertex.toInt).toInt)
      var edges: ArrayBuffer[Edge] = al.asInstanceOf[AdjacencyList].graph((current_vertex.toInt).toInt)
      var j: BigInt = 0
      val _ct5 = new Breaks
      while (j < BigInt((edges).size)) {
        _ct5.breakable {
          val edge: Edge = edges((j.toInt).toInt)
          val new_distance: BigInt = current_distance + edge.asInstanceOf[Edge].weight
          val dest: BigInt = edge.asInstanceOf[Edge].destination_vertex
          val dest_distance: BigInt = distances((dest.toInt).toInt)
          if ((dest_distance >= 0 && new_distance >= dest_distance).asInstanceOf[Boolean]) {
            j = j + 1
            _ct5.break()
          }
          distances((dest).toInt) = new_distance
          if (edge.asInstanceOf[Edge].weight == 0) {
            queue = push_front(queue, dest)
          } else {
            queue = queue :+ dest
          }
          j = j + 1
        }
      }
    }
  }
  val result: BigInt = distances((finish_vertex.toInt).toInt)
  if (result < 0) {
    throw new RuntimeException(String.valueOf("No path from start_vertex to finish_vertex."))
  }
  return result
}

val g: AdjacencyList = new_adjacency_list(11)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    add_edge(g, 0, 1, 0)
    add_edge(g, 0, 3, 1)
    add_edge(g, 1, 2, 0)
    add_edge(g, 2, 3, 0)
    add_edge(g, 4, 2, 1)
    add_edge(g, 4, 5, 1)
    add_edge(g, 4, 6, 1)
    add_edge(g, 5, 9, 0)
    add_edge(g, 6, 7, 1)
    add_edge(g, 7, 8, 1)
    add_edge(g, 8, 10, 1)
    add_edge(g, 9, 7, 0)
    add_edge(g, 9, 10, 1)
    println(String.valueOf(get_shortest_path(g, 0, 3)))
    println(String.valueOf(get_shortest_path(g, 4, 10)))
    println(String.valueOf(get_shortest_path(g, 4, 8)))
    println(String.valueOf(get_shortest_path(g, 0, 1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
