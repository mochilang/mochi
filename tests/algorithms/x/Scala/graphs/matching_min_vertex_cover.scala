// Generated by Mochi v0.10.66 on 2025-08-15 15:25:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def contains(xs: ArrayBuffer[BigInt], v: BigInt): Boolean = {
  for (x <- xs) {
    if (x == v) {
      return true
    }
  }
  return false
}

def get_edges(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var n: BigInt = BigInt((graph).size)
  var edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  for (i <- (BigInt(0)).toInt until (n).toInt) {
    for (j <- graph.getOrElse(i, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]) {
      edges = (edges :+ ArrayBuffer(BigInt(i.toString.toDouble.toInt), BigInt(j.toString.toDouble.toInt)))
    }
  }
  return edges
}

def matching_min_vertex_cover(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var chosen: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var edges: ArrayBuffer[ArrayBuffer[BigInt]] = get_edges(graph)
  while (BigInt((edges).size) > BigInt(0)) {
    var idx: BigInt = BigInt((edges).size) - BigInt(1)
    var e: ArrayBuffer[BigInt] = edges.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    edges = edges.slice((BigInt(0)).toInt, (idx).toInt)
    var u: BigInt = e.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    var v: BigInt = e.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
    if (!(chosen.contains(u))) {
      chosen = (chosen :+ u)
    }
    if (!(chosen.contains(v))) {
      chosen = (chosen :+ v)
    }
    var filtered: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
    for (edge <- edges) {
      var a: BigInt = edge.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      var b: BigInt = edge.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
      if ((((a != u && b != u).asInstanceOf[Boolean] && a != v).asInstanceOf[Boolean] && b != v)) {
        filtered = (filtered :+ edge)
      }
    }
    edges = filtered
  }
  return chosen
}

var graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(3))), BigInt(1) -> (ArrayBuffer(BigInt(0), BigInt(3))), BigInt(2) -> (ArrayBuffer(BigInt(0), BigInt(3), BigInt(4))), BigInt(3) -> (ArrayBuffer(BigInt(0), BigInt(1), BigInt(2))), BigInt(4) -> (ArrayBuffer(BigInt(2), BigInt(3))))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var cover: ArrayBuffer[BigInt] = matching_min_vertex_cover(graph)
    println(_str(_str(cover)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
