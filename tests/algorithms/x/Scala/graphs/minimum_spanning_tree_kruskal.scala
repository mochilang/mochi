// Generated by Mochi v0.10.66 on 2025-08-15 10:36:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def sort_edges(edges: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var es: ArrayBuffer[ArrayBuffer[BigInt]] = edges
  var i: BigInt = BigInt(0)
  while (i < BigInt((es).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((es).size) - i - BigInt(1)) {
      if (es.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0)) > es.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))) {
        var temp: ArrayBuffer[BigInt] = es.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
        es((j).toInt) = es.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
        es((j + BigInt(1)).toInt) = temp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return es
}

def find_parent(parent: ArrayBuffer[BigInt], i: BigInt): BigInt = {
  if (parent.lift((i.toInt).toInt).getOrElse(BigInt(0)) != i) {
    parent((i).toInt) = find_parent(parent, parent.lift((i.toInt).toInt).getOrElse(BigInt(0)))
  }
  return parent.lift((i.toInt).toInt).getOrElse(BigInt(0))
}

def kruskal(num_nodes: BigInt, edges: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var es: ArrayBuffer[ArrayBuffer[BigInt]] = sort_edges(edges)
  var parent: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < num_nodes) {
    parent = (parent :+ i)
    i = i + BigInt(1)
  }
  var mst: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((es).size)) {
    var e: ArrayBuffer[BigInt] = es.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var pa: BigInt = find_parent(parent, e.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
    var pb: BigInt = find_parent(parent, e.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)))
    if (pa != pb) {
      mst = (mst :+ e)
      parent((pa).toInt) = pb
    }
    idx = idx + BigInt(1)
  }
  return mst
}

def edges_to_string(es: ArrayBuffer[ArrayBuffer[BigInt]]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((es).size)) {
    var e: ArrayBuffer[BigInt] = es.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    s = s + "(" + _str(e.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) + ", " + _str(e.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))) + ", " + _str(e.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))) + ")"
    if (i < BigInt((es).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

var edges1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(5)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(1)))

var edges2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(5)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(2), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(3), BigInt(2)))

var edges3: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(5)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(2), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(3), BigInt(2)), ArrayBuffer(BigInt(2), BigInt(1), BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(edges_to_string(kruskal(BigInt(4), edges1)))
    println(edges_to_string(kruskal(BigInt(4), edges2)))
    println(edges_to_string(kruskal(BigInt(4), edges3)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
