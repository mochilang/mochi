// Generated by Mochi v0.10.59 on 2025-08-07 11:22:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def minimum_distance(distances: ArrayBuffer[BigInt], visited: ArrayBuffer[Boolean]): BigInt = {
  var minimum: BigInt = BigInt(10000000)
  var min_index: BigInt = BigInt(0)
  var vertex: BigInt = BigInt(0)
  while (vertex < BigInt((distances).size)) {
    if ((distances((vertex.toInt).toInt) < minimum && visited((vertex.toInt).toInt) == false).asInstanceOf[Boolean]) {
      minimum = distances((vertex.toInt).toInt)
      min_index = vertex
    }
    vertex = vertex + BigInt(1)
  }
  return min_index
}

def dijkstra(graph: ArrayBuffer[ArrayBuffer[BigInt]], source: BigInt): ArrayBuffer[BigInt] = {
  val vertices: BigInt = BigInt((graph).size)
  var distances: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < vertices) {
    distances = distances :+ BigInt(10000000)
    i = i + BigInt(1)
  }
  distances((source).toInt) = BigInt(0)
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  i = BigInt(0)
  while (i < vertices) {
    visited = visited :+ false
    i = i + BigInt(1)
  }
  var count: BigInt = BigInt(0)
  while (count < vertices) {
    val u: BigInt = minimum_distance(distances, visited)
    visited((u).toInt) = true
    var v: BigInt = BigInt(0)
    while (v < vertices) {
      if (((graph((u.toInt).toInt)((v.toInt).toInt) > BigInt(0) && visited((v.toInt).toInt) == false).asInstanceOf[Boolean] && distances((v.toInt).toInt) > distances((u.toInt).toInt) + graph((u.toInt).toInt)((v.toInt).toInt)).asInstanceOf[Boolean]) {
        distances((v).toInt) = distances((u.toInt).toInt) + graph((u.toInt).toInt)((v.toInt).toInt)
      }
      v = v + BigInt(1)
    }
    count = count + BigInt(1)
  }
  return distances
}

def print_solution(distances: ArrayBuffer[BigInt]): Any = {
  println("Vertex \t Distance from Source")
  var v: BigInt = BigInt(0)
  while (v < BigInt((distances).size)) {
    println(String.valueOf(v) + "\t\t" + String.valueOf(distances((v.toInt).toInt)))
    v = v + BigInt(1)
  }
}

val graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(4), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(8), BigInt(0)), ArrayBuffer(BigInt(4), BigInt(0), BigInt(8), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(11), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(8), BigInt(0), BigInt(7), BigInt(0), BigInt(4), BigInt(0), BigInt(0), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(7), BigInt(0), BigInt(9), BigInt(14), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(9), BigInt(0), BigInt(10), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(4), BigInt(14), BigInt(10), BigInt(0), BigInt(2), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(2), BigInt(0), BigInt(1), BigInt(6)), ArrayBuffer(BigInt(8), BigInt(11), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(7)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(2), BigInt(0), BigInt(0), BigInt(0), BigInt(6), BigInt(7), BigInt(0)))

val distances: ArrayBuffer[BigInt] = dijkstra(graph, BigInt(0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_solution(distances)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
