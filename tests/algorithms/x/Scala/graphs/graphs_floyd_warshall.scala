// Generated by Mochi v0.10.66 on 2025-08-15 10:34:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def floyd_warshall(graph: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var v: BigInt = BigInt((graph).size)
  var dist: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < v) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < v) {
      row = (row :+ graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    dist = (dist :+ row)
    i = i + BigInt(1)
  }
  var k: BigInt = BigInt(0)
  while (k < v) {
    i = BigInt(0)
    while (i < v) {
      var j: BigInt = BigInt(0)
      while (j < v) {
        if (((dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) < INF && dist.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) < INF).asInstanceOf[Boolean] && dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) + dist.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) < dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))) {
          dist((i).toInt)((j).toInt) = dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) + dist.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        }
        j = j + BigInt(1)
      }
      i = i + BigInt(1)
    }
    k = k + BigInt(1)
  }
  return dist
}

def print_dist(dist: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  println("\nThe shortest path matrix using Floyd Warshall algorithm\n")
  var i: BigInt = BigInt(0)
  while (i < BigInt((dist).size)) {
    var j: BigInt = BigInt(0)
    var line: String = ""
    while (j < BigInt((dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      if (dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) >= INF / 2.0) {
        line = line + "INF\t"
      } else {
        line = line + _str(BigInt((dist.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)).toString.toDouble.toInt)) + "\t"
      }
      j = j + BigInt(1)
    }
    println(line)
    i = i + BigInt(1)
  }
}

var INF: Double = 1000000000.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var graph: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 5.0, INF, 10.0), ArrayBuffer(INF, 0.0, 3.0, INF), ArrayBuffer(INF, INF, 0.0, 1.0), ArrayBuffer(INF, INF, INF, 0.0))
    var result: ArrayBuffer[ArrayBuffer[Double]] = floyd_warshall(graph)
    print_dist(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
