// Generated by Mochi v0.10.59 on 2025-08-07 11:21:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def depth_first_search(graph: ArrayBuffer[ArrayBuffer[BigInt]], vertex: BigInt, visited: ArrayBuffer[Boolean], rec_stk: ArrayBuffer[Boolean]): Boolean = {
  visited((vertex).toInt) = true
  rec_stk((vertex).toInt) = true
  for (node <- graph((vertex.toInt).toInt)) {
    if (!visited((node.toInt).toInt)) {
      if (depth_first_search(graph, node, visited, rec_stk)) {
        return true
      }
    } else {
      if (rec_stk((node.toInt).toInt)) {
        return true
      }
    }
  }
  rec_stk((vertex).toInt) = false
  return false
}

def check_cycle(graph: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  val n: BigInt = BigInt((graph).size)
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var rec_stk: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    visited = visited :+ false
    rec_stk = rec_stk :+ false
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    if (!visited((i.toInt).toInt)) {
      if (depth_first_search(graph, i, visited, rec_stk)) {
        return true
      }
    }
    i = i + BigInt(1)
  }
  return false
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

val g1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer[BigInt](), ArrayBuffer(BigInt(0), BigInt(3)), ArrayBuffer(BigInt(0), BigInt(4)), ArrayBuffer(BigInt(5)), ArrayBuffer(BigInt(5)), ArrayBuffer[BigInt]())

val g2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer(BigInt(2)), ArrayBuffer(BigInt(0), BigInt(3)), ArrayBuffer(BigInt(3)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(check_cycle(g1))
    print_bool(check_cycle(g2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
