// Generated by Mochi v0.10.59 on 2025-08-07 11:14:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SearchResult(var path: ArrayBuffer[ArrayBuffer[BigInt]], var action: ArrayBuffer[ArrayBuffer[BigInt]])

def iabs(x: BigInt): BigInt = {
  if (x < 0) {
    return -x
  }
  return x
}

def search(grid: ArrayBuffer[ArrayBuffer[BigInt]], init: ArrayBuffer[BigInt], goal: ArrayBuffer[BigInt], cost: BigInt, heuristic: ArrayBuffer[ArrayBuffer[BigInt]]): SearchResult = {
  var closed: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var r: BigInt = 0
  while (r < BigInt((grid).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var c: BigInt = 0
    while (c < BigInt((grid((0.toInt).toInt)).size)) {
      row = row :+ BigInt(0)
      c = c + 1
    }
    closed = closed :+ row
    r = r + 1
  }
  closed((init((0.toInt).toInt)).toInt)((init((1.toInt).toInt)).toInt) = 1
  var action: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  r = 0
  while (r < BigInt((grid).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var c: BigInt = 0
    while (c < BigInt((grid((0.toInt).toInt)).size)) {
      row = row :+ BigInt(0)
      c = c + 1
    }
    action = action :+ row
    r = r + 1
  }
  var x: BigInt = init((0.toInt).toInt)
  var y: BigInt = init((1.toInt).toInt)
  var g: BigInt = 0
  var f: BigInt = g + heuristic((x.toInt).toInt)((y.toInt).toInt)
  var cell: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(f, g, x, y))
  var found: Boolean = false
  var resign: Boolean = false
  while (!found && !resign) {
    if (BigInt((cell).size) == 0) {
      throw new RuntimeException(String.valueOf("Algorithm is unable to find solution"))
    } else {
      var best_i: BigInt = 0
      var best_f: BigInt = cell((0.toInt).toInt)((0.toInt).toInt)
      var i: BigInt = 1
      while (i < BigInt((cell).size)) {
        if (cell((i.toInt).toInt)((0.toInt).toInt) < best_f) {
          best_f = cell((i.toInt).toInt)((0.toInt).toInt)
          best_i = i
        }
        i = i + 1
      }
      val next_cell: ArrayBuffer[BigInt] = cell((best_i.toInt).toInt)
      var new_cell: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
      i = 0
      while (i < BigInt((cell).size)) {
        if (i != best_i) {
          new_cell = new_cell :+ cell((i.toInt).toInt)
        }
        i = i + 1
      }
      cell = new_cell
      x = next_cell((2.toInt).toInt)
      y = next_cell((3.toInt).toInt)
      g = next_cell((1.toInt).toInt)
      if ((x == goal((0.toInt).toInt) && y == goal((1.toInt).toInt)).asInstanceOf[Boolean]) {
        found = true
      } else {
        var d: BigInt = 0
        while (d < BigInt((DIRECTIONS).size)) {
          val x2: BigInt = x + DIRECTIONS((d.toInt).toInt)((0.toInt).toInt)
          val y2: BigInt = y + DIRECTIONS((d.toInt).toInt)((1.toInt).toInt)
          if ((((((x2 >= 0 && x2 < BigInt((grid).size)).asInstanceOf[Boolean] && y2 >= 0).asInstanceOf[Boolean] && y2 < BigInt((grid((0.toInt).toInt)).size)).asInstanceOf[Boolean] && closed((x2.toInt).toInt)((y2.toInt).toInt) == 0).asInstanceOf[Boolean] && grid((x2.toInt).toInt)((y2.toInt).toInt) == 0).asInstanceOf[Boolean]) {
            val g2: BigInt = g + cost
            val f2: BigInt = g2 + heuristic((x2.toInt).toInt)((y2.toInt).toInt)
            cell = cell :+ ArrayBuffer(BigInt(f2.toString.toDouble.toInt), BigInt(g2.toString.toDouble.toInt), BigInt(x2.toString.toDouble.toInt), BigInt(y2.toString.toDouble.toInt))
            closed((x2).toInt)((y2).toInt) = 1
            action((x2).toInt)((y2).toInt) = d
          }
          d = d + 1
        }
      }
    }
  }
  var invpath: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  x = goal((0.toInt).toInt)
  y = goal((1.toInt).toInt)
  invpath = invpath :+ ArrayBuffer(BigInt(x.toString.toDouble.toInt), BigInt(y.toString.toDouble.toInt))
  while (x != init((0.toInt).toInt) || y != init((1.toInt).toInt)) {
    val dir: BigInt = action((x.toInt).toInt)((y.toInt).toInt)
    val x2: BigInt = x - DIRECTIONS((dir.toInt).toInt)((0.toInt).toInt)
    val y2: BigInt = y - DIRECTIONS((dir.toInt).toInt)((1.toInt).toInt)
    x = x2
    y = y2
    invpath = invpath :+ ArrayBuffer(BigInt(x.toString.toDouble.toInt), BigInt(y.toString.toDouble.toInt))
  }
  var path: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var idx: BigInt = BigInt((invpath).size) - 1
  while (idx >= 0) {
    path = path :+ invpath((idx.toInt).toInt)
    idx = idx - 1
  }
  return SearchResult(path, action)
}

def main(): Any = {
  val grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0, 0, 0, 0), ArrayBuffer(0, 1, 0, 0, 0, 0), ArrayBuffer(0, 1, 0, 0, 0, 0), ArrayBuffer(0, 1, 0, 0, 1, 0), ArrayBuffer(0, 0, 0, 0, 1, 0))
  val init: ArrayBuffer[BigInt] = ArrayBuffer(0, 0)
  val goal: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((grid).size) - 1, BigInt((grid((0.toInt).toInt)).size) - 1)
  val cost: BigInt = 1
  var heuristic: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((grid).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((grid((0.toInt).toInt)).size)) {
      val h: BigInt = iabs(i - goal((0.toInt).toInt)) + iabs(j - goal((1.toInt).toInt))
      if (grid((i.toInt).toInt)((j.toInt).toInt) == 1) {
        row = row :+ BigInt(99)
      } else {
        row = row :+ h
      }
      j = j + 1
    }
    heuristic = heuristic :+ row
    i = i + 1
  }
  val result: SearchResult = search(grid, init, goal, cost, heuristic)
  println("ACTION MAP")
  var rr: BigInt = 0
  while (rr < BigInt((result.asInstanceOf[SearchResult].action).size)) {
    println(result.asInstanceOf[SearchResult].action((rr.toInt).toInt))
    rr = rr + 1
  }
  var p: BigInt = 0
  while (p < BigInt((result.asInstanceOf[SearchResult].path).size)) {
    println(result.asInstanceOf[SearchResult].path((p.toInt).toInt))
    p = p + 1
  }
}

val DIRECTIONS: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(-1, 0), ArrayBuffer(0, -1), ArrayBuffer(1, 0), ArrayBuffer(0, 1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
