// Generated by Mochi v0.10.64 on 2025-08-13 16:22:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SearchResult(var path: ArrayBuffer[ArrayBuffer[BigInt]], var action: ArrayBuffer[ArrayBuffer[BigInt]])

def iabs(x: BigInt): BigInt = {
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

def search(grid: ArrayBuffer[ArrayBuffer[BigInt]], init: ArrayBuffer[BigInt], goal: ArrayBuffer[BigInt], cost: BigInt, heuristic: ArrayBuffer[ArrayBuffer[BigInt]]): SearchResult = {
  var closed: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var r: BigInt = BigInt(0)
  while (r < BigInt((grid).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var c: BigInt = BigInt(0)
    while (c < BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      row = row += (BigInt(0))
      c = c + BigInt(1)
    }
    closed = closed += (row)
    r = r + BigInt(1)
  }
  closed((init.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))).toInt)((init.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).toInt) = BigInt(1)
  var action: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  r = BigInt(0)
  while (r < BigInt((grid).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var c: BigInt = BigInt(0)
    while (c < BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      row = row += (BigInt(0))
      c = c + BigInt(1)
    }
    action = action += (row)
    r = r + BigInt(1)
  }
  var x: BigInt = init.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var y: BigInt = init.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
  var g: BigInt = BigInt(0)
  var f: BigInt = g + heuristic.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y.toInt).toInt).getOrElse(BigInt(0))
  var cell: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(f, g, x, y))
  var found: Boolean = false
  var resign: Boolean = false
  while (!found && !resign) {
    if (BigInt((cell).size) == BigInt(0)) {
      throw new RuntimeException(String.valueOf("Algorithm is unable to find solution"))
    } else {
      var best_i: BigInt = BigInt(0)
      var best_f: BigInt = cell.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      var i: BigInt = BigInt(1)
      while (i < BigInt((cell).size)) {
        if (cell.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) < best_f) {
          best_f = cell.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
          best_i = i
        }
        i = i + BigInt(1)
      }
      val next_cell: ArrayBuffer[BigInt] = cell.lift((best_i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var new_cell: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
      i = BigInt(0)
      while (i < BigInt((cell).size)) {
        if (i != best_i) {
          new_cell = new_cell += (cell.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
        }
        i = i + BigInt(1)
      }
      cell = new_cell
      x = next_cell.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))
      y = next_cell.lift((BigInt(3).toInt).toInt).getOrElse(BigInt(0))
      g = next_cell.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
      if ((x == goal.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) && y == goal.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).asInstanceOf[Boolean]) {
        found = true
      } else {
        var d: BigInt = BigInt(0)
        while (d < BigInt((DIRECTIONS).size)) {
          val x2: BigInt = x + DIRECTIONS.lift((d.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
          val y2: BigInt = y + DIRECTIONS.lift((d.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
          if ((((((x2 >= BigInt(0) && x2 < BigInt((grid).size)).asInstanceOf[Boolean] && y2 >= BigInt(0)).asInstanceOf[Boolean] && y2 < BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)).asInstanceOf[Boolean] && closed.lift((x2.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y2.toInt).toInt).getOrElse(BigInt(0)) == BigInt(0)).asInstanceOf[Boolean] && grid.lift((x2.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y2.toInt).toInt).getOrElse(BigInt(0)) == BigInt(0)).asInstanceOf[Boolean]) {
            val g2: BigInt = g + cost
            val f2: BigInt = g2 + heuristic.lift((x2.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y2.toInt).toInt).getOrElse(BigInt(0))
            cell = cell += (ArrayBuffer(BigInt(f2.toString.toDouble.toInt), BigInt(g2.toString.toDouble.toInt), BigInt(x2.toString.toDouble.toInt), BigInt(y2.toString.toDouble.toInt)))
            closed((x2).toInt)((y2).toInt) = BigInt(1)
            action((x2).toInt)((y2).toInt) = d
          }
          d = d + BigInt(1)
        }
      }
    }
  }
  var invpath: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  x = goal.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  y = goal.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
  invpath = invpath += (ArrayBuffer(BigInt(x.toString.toDouble.toInt), BigInt(y.toString.toDouble.toInt)))
  while (x != init.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) || y != init.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))) {
    val dir: BigInt = action.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y.toInt).toInt).getOrElse(BigInt(0))
    val x2: BigInt = x - DIRECTIONS.lift((dir.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    val y2: BigInt = y - DIRECTIONS.lift((dir.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
    x = x2
    y = y2
    invpath = invpath += (ArrayBuffer(BigInt(x.toString.toDouble.toInt), BigInt(y.toString.toDouble.toInt)))
  }
  var path: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var idx: BigInt = BigInt((invpath).size) - BigInt(1)
  while (idx >= BigInt(0)) {
    path = path += (invpath.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    idx = idx - BigInt(1)
  }
  return SearchResult(path, action)
}

def main(): Any = {
  val grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0)))
  val init: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0))
  val goal: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((grid).size) - BigInt(1), BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1))
  val cost: BigInt = BigInt(1)
  var heuristic: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((grid).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      val h: BigInt = iabs(i - goal.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) + iabs(j - goal.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)))
      if (grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
        row = row += (BigInt(99))
      } else {
        row = row += (h)
      }
      j = j + BigInt(1)
    }
    heuristic = heuristic += (row)
    i = i + BigInt(1)
  }
  val result: SearchResult = search(grid, init, goal, cost, heuristic)
  println("ACTION MAP")
  var rr: BigInt = BigInt(0)
  while (rr < BigInt((result.asInstanceOf[SearchResult].action).size)) {
    println(result.asInstanceOf[SearchResult].action.lift((rr.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    rr = rr + BigInt(1)
  }
  var p: BigInt = BigInt(0)
  while (p < BigInt((result.asInstanceOf[SearchResult].path).size)) {
    println(result.asInstanceOf[SearchResult].path.lift((p.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    p = p + BigInt(1)
  }
}

val DIRECTIONS: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(-BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), -BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
