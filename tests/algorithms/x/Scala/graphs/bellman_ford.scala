// Generated by Mochi v0.10.59 on 2025-08-07 11:14:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Edge(var src: BigInt, var dst: BigInt, var weight: BigInt)

def list_to_string(arr: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    s = s + String.valueOf(arr((i.toInt).toInt))
    if (i < BigInt((arr).size) - 1) {
      s = s + ", "
    }
    i = i + 1
  }
  return s + "]"
}

def check_negative_cycle(graph: ArrayBuffer[Edge], distance: ArrayBuffer[Double], edge_count: BigInt): Boolean = {
  var j: BigInt = 0
  while (j < edge_count) {
    val e: Edge = graph((j.toInt).toInt)
    val u: BigInt = e.asInstanceOf[Edge].src
    val v: BigInt = e.asInstanceOf[Edge].dst
    val w: Double = (e.asInstanceOf[Edge].weight).toString.toDouble
    if ((distance((u.toInt).toInt) < INF && distance((u.toInt).toInt) + w < distance((v.toInt).toInt)).asInstanceOf[Boolean]) {
      return true
    }
    j = j + 1
  }
  return false
}

def bellman_ford(graph: ArrayBuffer[Edge], vertex_count: BigInt, edge_count: BigInt, src: BigInt): ArrayBuffer[Double] = {
  var distance: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < vertex_count) {
    distance = distance :+ INF
    i = i + 1
  }
  distance((src).toInt) = 0.0
  var k: BigInt = 0
  while (k < vertex_count - 1) {
    var j: BigInt = 0
    while (j < edge_count) {
      val e: Edge = graph((j.toInt).toInt)
      val u: BigInt = e.asInstanceOf[Edge].src
      val v: BigInt = e.asInstanceOf[Edge].dst
      val w: Double = (e.asInstanceOf[Edge].weight).toString.toDouble
      if ((distance((u.toInt).toInt) < INF && distance((u.toInt).toInt) + w < distance((v.toInt).toInt)).asInstanceOf[Boolean]) {
        distance((v).toInt) = distance((u.toInt).toInt) + w
      }
      j = j + 1
    }
    k = k + 1
  }
  if (check_negative_cycle(graph, distance, edge_count)) {
    throw new RuntimeException(String.valueOf("Negative cycle found"))
  }
  return distance
}

val INF: Double = 1000000000.0

val edges: ArrayBuffer[Edge] = ArrayBuffer(Edge(2, 1, -10), Edge(3, 2, 3), Edge(0, 3, 5), Edge(0, 1, 4))

val distances: ArrayBuffer[Double] = bellman_ford(edges, 4, BigInt((edges).size), 0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(list_to_string(distances))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
