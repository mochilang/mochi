// Generated by Mochi v0.10.66 on 2025-08-15 15:25:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Edge(var u: BigInt, var v: BigInt, var w: BigInt)

case class Graph(var edges: ArrayBuffer[Edge], var num_nodes: BigInt)

case class DS(var parent: ArrayBuffer[BigInt], var rank: ArrayBuffer[BigInt])

case class FindResult(var ds: DS, var root: BigInt)

def new_graph(): Graph = {
  return Graph(ArrayBuffer(), BigInt(0))
}

def add_edge(g: Graph, u: BigInt, v: BigInt, w: BigInt): Graph = {
  var es: ArrayBuffer[Edge] = g.asInstanceOf[Graph].edges
  es = (es :+ Edge(u, v, w))
  var n: BigInt = g.asInstanceOf[Graph].num_nodes
  if (u > n) {
    n = u
  }
  if (v > n) {
    n = v
  }
  return Graph(es, n)
}

def make_ds(n: BigInt): DS = {
  var parent: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var rank: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    parent = (parent :+ i)
    rank = (rank :+ BigInt(0))
    i = i + BigInt(1)
  }
  return DS(parent, rank)
}

def find_set(ds: DS, x: BigInt): FindResult = {
  if (ds.asInstanceOf[DS].parent.lift((x.toInt).toInt).getOrElse(BigInt(0)) == x) {
    return FindResult(ds, x)
  }
  var res: FindResult = find_set(ds, ds.asInstanceOf[DS].parent.lift((x.toInt).toInt).getOrElse(BigInt(0)))
  var p: ArrayBuffer[BigInt] = res.asInstanceOf[FindResult].ds.asInstanceOf[DS].parent
  p((x).toInt) = res.asInstanceOf[FindResult].root
  return FindResult(DS(p, res.asInstanceOf[FindResult].ds.asInstanceOf[DS].rank), res.asInstanceOf[FindResult].root)
}

def union_set(ds: DS, x: BigInt, y: BigInt): DS = {
  var fx: FindResult = find_set(ds, x)
  var ds1: DS = fx.asInstanceOf[FindResult].ds
  var x_root: BigInt = fx.asInstanceOf[FindResult].root
  var fy: FindResult = find_set(ds1, y)
  var ds2: DS = fy.asInstanceOf[FindResult].ds
  var y_root: BigInt = fy.asInstanceOf[FindResult].root
  if (x_root == y_root) {
    return ds2
  }
  var p: ArrayBuffer[BigInt] = ds2.asInstanceOf[DS].parent
  var r: ArrayBuffer[BigInt] = ds2.asInstanceOf[DS].rank
  if (r.lift((x_root.toInt).toInt).getOrElse(BigInt(0)) > r.lift((y_root.toInt).toInt).getOrElse(BigInt(0))) {
    p((y_root).toInt) = x_root
  } else {
    p((x_root).toInt) = y_root
    if (r.lift((x_root.toInt).toInt).getOrElse(BigInt(0)) == r.lift((y_root.toInt).toInt).getOrElse(BigInt(0))) {
      r((y_root).toInt) = r.lift((y_root.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
    }
  }
  return DS(p, r)
}

def sort_edges(edges: ArrayBuffer[Edge]): ArrayBuffer[Edge] = {
  var arr: ArrayBuffer[Edge] = edges
  var i: BigInt = BigInt(1)
  val _br1 = new Breaks
  _br1.breakable {
    while (i < BigInt((arr).size)) {
      var key: Edge = arr.lift((i.toInt).toInt).getOrElse(null)
      var j: BigInt = i - BigInt(1)
      val _br2 = new Breaks
      _br2.breakable {
        while (j >= BigInt(0)) {
          var temp: Edge = arr.lift((j.toInt).toInt).getOrElse(null)
          if ((temp.asInstanceOf[Edge].w > key.asInstanceOf[Edge].w || (temp.asInstanceOf[Edge].w == key.asInstanceOf[Edge].w && (temp.asInstanceOf[Edge].u > key.asInstanceOf[Edge].u || (temp.asInstanceOf[Edge].u == key.asInstanceOf[Edge].u && temp.asInstanceOf[Edge].v > key.asInstanceOf[Edge].v).asInstanceOf[Boolean]).asInstanceOf[Boolean]).asInstanceOf[Boolean])) {
            arr((j + BigInt(1)).toInt) = temp
            j = j - BigInt(1)
          } else {
            _br2.break()
          }
        }
      }
      arr((j + BigInt(1)).toInt) = key
      i = i + BigInt(1)
    }
  }
  return arr
}

def kruskal(g: Graph): Graph = {
  var edges: ArrayBuffer[Edge] = sort_edges(g.asInstanceOf[Graph].edges)
  var ds: DS = make_ds(g.asInstanceOf[Graph].num_nodes)
  var mst_edges: ArrayBuffer[Edge] = ArrayBuffer[Edge]()
  var i: BigInt = BigInt(0)
  var added: BigInt = BigInt(0)
  while (added < g.asInstanceOf[Graph].num_nodes - BigInt(1) && i < BigInt((edges).size)) {
    var e: Edge = edges.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
    var fu: FindResult = find_set(ds, e.asInstanceOf[Edge].u)
    ds = fu.asInstanceOf[FindResult].ds
    var ru: BigInt = fu.asInstanceOf[FindResult].root
    var fv: FindResult = find_set(ds, e.asInstanceOf[Edge].v)
    ds = fv.asInstanceOf[FindResult].ds
    var rv: BigInt = fv.asInstanceOf[FindResult].root
    if (ru != rv) {
      mst_edges = (mst_edges :+ e)
      added = added + BigInt(1)
      ds = union_set(ds, ru, rv)
    }
  }
  return Graph(mst_edges, g.asInstanceOf[Graph].num_nodes)
}

def print_mst(g: Graph): Any = {
  var es: ArrayBuffer[Edge] = sort_edges(g.asInstanceOf[Graph].edges)
  for (e <- es) {
    println(_str(_str(e.asInstanceOf[Edge].u) + "-" + _str(e.asInstanceOf[Edge].v) + ":" + _str(e.asInstanceOf[Edge].w)))
  }
}

def main(): Any = {
  var g: Graph = new_graph()
  g = add_edge(g, BigInt(1), BigInt(2), BigInt(1))
  g = add_edge(g, BigInt(2), BigInt(3), BigInt(2))
  g = add_edge(g, BigInt(3), BigInt(4), BigInt(1))
  g = add_edge(g, BigInt(3), BigInt(5), BigInt(100))
  g = add_edge(g, BigInt(4), BigInt(5), BigInt(5))
  var mst: Graph = kruskal(g)
  print_mst(mst)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
