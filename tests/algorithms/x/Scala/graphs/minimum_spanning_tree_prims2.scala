// Generated by Mochi v0.10.66 on 2025-08-15 10:18:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class QueueNode(var node: String, var weight: BigInt)

case class MSTResult(var dist: scala.collection.mutable.Map[String,BigInt], var parent: scala.collection.mutable.Map[String,String])

def prims_algo(graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]]): MSTResult = {
  var INF: BigInt = BigInt(2147483647)
  var dist: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var parent: scala.collection.mutable.Map[String,String] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,String]]
  var queue: ArrayBuffer[QueueNode] = ArrayBuffer[QueueNode]()
  for (node <- graph.keys) {
    dist.update(node, INF)
    parent.update(node, "")
    queue = (queue :+ QueueNode(node, INF))
  }
  if (BigInt((queue).size) == BigInt(0)) {
    return MSTResult(dist, parent)
  }
  var min_idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(1)
  while (i < BigInt((queue).size)) {
    if (queue.lift((i.toInt).toInt).getOrElse(null).weight < queue.lift((min_idx.toInt).toInt).getOrElse(null).weight) {
      min_idx = i
    }
    i = i + BigInt(1)
  }
  var start_node: QueueNode = queue.lift((min_idx.toInt).toInt).getOrElse(null)
  var start: String = start_node.asInstanceOf[QueueNode].node
  var new_q: ArrayBuffer[QueueNode] = ArrayBuffer[QueueNode]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((queue).size)) {
    if (j != min_idx) {
      new_q = (new_q :+ queue.lift((j.toInt).toInt).getOrElse(null))
    }
    j = j + BigInt(1)
  }
  queue = new_q
  dist.update(start, BigInt(0))
  val _br3 = new Breaks
  _br3.breakable {
    for (neighbour <- graph.getOrElse(start.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].keys) {
      var w: BigInt = graph.getOrElse(start.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].getOrElse(neighbour.toString, BigInt(0)).asInstanceOf[BigInt]
      if (dist.getOrElse(neighbour.toString, BigInt(0)).asInstanceOf[BigInt] > dist.getOrElse(start.toString, BigInt(0)).asInstanceOf[BigInt] + w) {
        dist.update(neighbour, dist.getOrElse(start.toString, BigInt(0)).asInstanceOf[BigInt] + w)
        parent.update(neighbour, start)
        var k: BigInt = BigInt(0)
        val _br4 = new Breaks
        _br4.breakable {
          while (k < BigInt((queue).size)) {
            if (queue.lift((k.toInt).toInt).getOrElse(null).node == neighbour) {
              queue.lift((k).toInt).getOrElse(null).weight = dist.getOrElse(neighbour.toString, BigInt(0)).asInstanceOf[BigInt]
              _br4.break()
            }
            k = k + BigInt(1)
          }
        }
      }
    }
  }
  val _br5 = new Breaks
  _br5.breakable {
    while (BigInt((queue).size) > BigInt(0)) {
      var best_idx: BigInt = BigInt(0)
      var p: BigInt = BigInt(1)
      while (p < BigInt((queue).size)) {
        if (queue.lift((p.toInt).toInt).getOrElse(null).weight < queue.lift((best_idx.toInt).toInt).getOrElse(null).weight) {
          best_idx = p
        }
        p = p + BigInt(1)
      }
      var node_entry: QueueNode = queue.lift((best_idx.toInt).toInt).getOrElse(null)
      var node: String = node_entry.asInstanceOf[QueueNode].node
      var tmp: ArrayBuffer[QueueNode] = ArrayBuffer[QueueNode]()
      var q: BigInt = BigInt(0)
      while (q < BigInt((queue).size)) {
        if (q != best_idx) {
          tmp = (tmp :+ queue.lift((q.toInt).toInt).getOrElse(null))
        }
        q = q + BigInt(1)
      }
      queue = tmp
      val _br8 = new Breaks
      _br8.breakable {
        for (neighbour <- graph.getOrElse(node.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].keys) {
          var w: BigInt = graph.getOrElse(node.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].getOrElse(neighbour.toString, BigInt(0)).asInstanceOf[BigInt]
          if (dist.getOrElse(neighbour.toString, BigInt(0)).asInstanceOf[BigInt] > dist.getOrElse(node.toString, BigInt(0)).asInstanceOf[BigInt] + w) {
            dist.update(neighbour, dist.getOrElse(node.toString, BigInt(0)).asInstanceOf[BigInt] + w)
            parent.update(neighbour, node)
            var r: BigInt = BigInt(0)
            val _br9 = new Breaks
            _br9.breakable {
              while (r < BigInt((queue).size)) {
                if (queue.lift((r.toInt).toInt).getOrElse(null).node == neighbour) {
                  queue.lift((r).toInt).getOrElse(null).weight = dist.getOrElse(neighbour.toString, BigInt(0)).asInstanceOf[BigInt]
                  _br9.break()
                }
                r = r + BigInt(1)
              }
            }
          }
        }
      }
    }
  }
  return MSTResult(dist, parent)
}

def iabs(x: BigInt): BigInt = {
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

var graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    graph.update("a", scala.collection.mutable.Map("b" -> (BigInt(3)), "c" -> (BigInt(15))))
    graph.update("b", scala.collection.mutable.Map("a" -> (BigInt(3)), "c" -> (BigInt(10)), "d" -> (BigInt(100))))
    graph.update("c", scala.collection.mutable.Map("a" -> (BigInt(15)), "b" -> (BigInt(10)), "d" -> (BigInt(5))))
    graph.update("d", scala.collection.mutable.Map("b" -> (BigInt(100)), "c" -> (BigInt(5))))
    var res: MSTResult = prims_algo(graph)
    var dist: scala.collection.mutable.Map[String,BigInt] = res.dist
    println(_str(iabs(dist.getOrElse("a", BigInt(0)).asInstanceOf[BigInt] - dist.getOrElse("b", BigInt(0)).asInstanceOf[BigInt])))
    println(_str(iabs(dist.getOrElse("d", BigInt(0)).asInstanceOf[BigInt] - dist.getOrElse("b", BigInt(0)).asInstanceOf[BigInt])))
    println(_str(iabs(dist.getOrElse("a", BigInt(0)).asInstanceOf[BigInt] - dist.getOrElse("c", BigInt(0)).asInstanceOf[BigInt])))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
