// Generated by Mochi v0.10.66 on 2025-08-15 15:24:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Pair(var a: String, var b: String)

def rand_int(n: BigInt): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed % n
}

def contains(list: ArrayBuffer[String], value: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((list).size)) {
    if (list.lift((i.toInt).toInt).getOrElse("") == value) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def remove_all(list: ArrayBuffer[String], value: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((list).size)) {
    if (list.lift((i.toInt).toInt).getOrElse("") != value) {
      res = (res :+ list.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return res
}

def partition_graph(graph: scala.collection.mutable.Map[String,ArrayBuffer[String]]): ArrayBuffer[Pair] = {
  var contracted: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (node <- ArrayBuffer(graph.keys.toSeq.sorted: _*)) {
    contracted.update(node, ArrayBuffer(node))
  }
  var graph_copy: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (node <- ArrayBuffer(graph.keys.toSeq.sorted: _*)) {
    var lst: ArrayBuffer[String] = ArrayBuffer[String]()
    var neigh: ArrayBuffer[String] = graph.getOrElse(node.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var i: BigInt = BigInt(0)
    while (i < BigInt((neigh).size)) {
      lst = (lst :+ neigh.lift((i.toInt).toInt).getOrElse(""))
      i = i + BigInt(1)
    }
    graph_copy.update(node, lst)
  }
  var nodes: ArrayBuffer[String] = ArrayBuffer(graph_copy.keys.toSeq.sorted: _*)
  while (BigInt((nodes).size) > BigInt(2)) {
    var u: Any = nodes.lift(((rand_int(BigInt((nodes).size))).toInt).toInt).getOrElse(null)
    var u_neighbors: ArrayBuffer[String] = graph_copy.getOrElse(u.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var v: String = u_neighbors.lift(((rand_int(BigInt((u_neighbors).size))).toInt).toInt).getOrElse("")
    var uv: String = u + v
    var uv_neighbors: ArrayBuffer[String] = ArrayBuffer[String]()
    var i: BigInt = BigInt(0)
    while (i < BigInt((graph_copy.getOrElse(u.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]).size)) {
      var n: String = graph_copy.getOrElse(u.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]].lift((i.toInt).toInt).getOrElse("")
      if (((n != u && n != v).asInstanceOf[Boolean] && uv_neighbors.contains(n) == false)) {
        uv_neighbors = (uv_neighbors :+ n)
      }
      i = i + BigInt(1)
    }
    i = BigInt(0)
    while (i < BigInt((graph_copy.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]).size)) {
      var n: String = graph_copy.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]].lift((i.toInt).toInt).getOrElse("")
      if (((n != u && n != v).asInstanceOf[Boolean] && uv_neighbors.contains(n) == false)) {
        uv_neighbors = (uv_neighbors :+ n)
      }
      i = i + BigInt(1)
    }
    graph_copy.update(uv, uv_neighbors)
    var k: BigInt = BigInt(0)
    while (k < BigInt((uv_neighbors).size)) {
      var nb: String = uv_neighbors.lift((k.toInt).toInt).getOrElse("")
      graph_copy.update(nb, (graph_copy.getOrElse(nb.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ uv))
      graph_copy.update(nb, remove_all(graph_copy.getOrElse(nb.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]], u.toString))
      graph_copy.update(nb, remove_all(graph_copy.getOrElse(nb.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]], v))
      k = k + BigInt(1)
    }
    var group: ArrayBuffer[String] = ArrayBuffer[String]()
    i = BigInt(0)
    while (i < BigInt((contracted.getOrElse(u.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]).size)) {
      group = (group :+ contracted.getOrElse(u.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]].lift((i.toInt).toInt).getOrElse(""))
      i = i + BigInt(1)
    }
    i = BigInt(0)
    while (i < BigInt((contracted.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]).size)) {
      var `val`: String = contracted.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]].lift((i.toInt).toInt).getOrElse("")
      if (group.contains(`val`) == false) {
        group = (group :+ `val`)
      }
      i = i + BigInt(1)
    }
    contracted.update(uv, group)
    nodes = remove_all(nodes.asInstanceOf[ArrayBuffer[String]], u.toString)
    nodes = remove_all(nodes, v)
    nodes = (nodes :+ uv)
  }
  var groups: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((nodes).size)) {
    var n: Any = nodes.lift((j.toInt).toInt).getOrElse(null)
    groups = (groups :+ contracted.getOrElse(n.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
    j = j + BigInt(1)
  }
  var groupA: ArrayBuffer[String] = groups.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[String]())
  var groupB: ArrayBuffer[String] = groups.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[String]())
  var cut: ArrayBuffer[Pair] = ArrayBuffer[Pair]()
  j = BigInt(0)
  while (j < BigInt((groupA).size)) {
    var node: String = groupA.lift((j.toInt).toInt).getOrElse("")
    var neigh: ArrayBuffer[String] = graph.getOrElse(node.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var l: BigInt = BigInt(0)
    while (l < BigInt((neigh).size)) {
      var nb: String = neigh.lift((l.toInt).toInt).getOrElse("")
      if ((groupB.contains(nb))) {
        cut = (cut :+ Pair(node, nb))
      }
      l = l + BigInt(1)
    }
    j = j + BigInt(1)
  }
  return cut
}

def cut_to_string(cut: ArrayBuffer[Pair]): String = {
  var s: String = "{"
  var i: BigInt = BigInt(0)
  while (i < BigInt((cut).size)) {
    var p: Pair = cut.lift((i.toInt).toInt).getOrElse(null)
    s = s + "(" + p.asInstanceOf[Pair].a + ", " + p.asInstanceOf[Pair].b + ")"
    if (i < BigInt((cut).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "}"
  return s
}

var seed: BigInt = BigInt(1)

var TEST_GRAPH: scala.collection.mutable.Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("1" -> (ArrayBuffer("2", "3", "4", "5")), "2" -> (ArrayBuffer("1", "3", "4", "5")), "3" -> (ArrayBuffer("1", "2", "4", "5", "10")), "4" -> (ArrayBuffer("1", "2", "3", "5", "6")), "5" -> (ArrayBuffer("1", "2", "3", "4", "7")), "6" -> (ArrayBuffer("7", "8", "9", "10", "4")), "7" -> (ArrayBuffer("6", "8", "9", "10", "5")), "8" -> (ArrayBuffer("6", "7", "9", "10")), "9" -> (ArrayBuffer("6", "7", "8", "10")), "10" -> (ArrayBuffer("6", "7", "8", "9", "3")))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: ArrayBuffer[Pair] = partition_graph(TEST_GRAPH)
    println(_str(cut_to_string(result)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
