// Generated by Mochi v0.10.59 on 2025-08-07 11:23:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class GraphAdjacencyList(var adj_list: scala.collection.mutable.Map[String,ArrayBuffer[String]], var directed: Boolean)

def make_graph(directed: Boolean): GraphAdjacencyList = {
  var m: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  return GraphAdjacencyList(m, directed)
}

def contains_vertex(m: scala.collection.mutable.Map[String,ArrayBuffer[String]], v: String): Boolean = {
  return (m.contains(v)).asInstanceOf[Boolean]
}

def add_edge(g: GraphAdjacencyList, s: String, d: String): GraphAdjacencyList = {
  var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]] = g.asInstanceOf[GraphAdjacencyList].adj_list
  if (!g.asInstanceOf[GraphAdjacencyList].directed) {
    if ((contains_vertex(adj, s) && contains_vertex(adj, d)).asInstanceOf[Boolean]) {
      adj.update(s, adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ d)
      adj.update(d, adj.getOrElse(d.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ s)
    } else {
      if (contains_vertex(adj, s)) {
        adj.update(s, adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ d)
        adj.update(d, ArrayBuffer(s))
      } else {
        if (contains_vertex(adj, d)) {
          adj.update(d, adj.getOrElse(d.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ s)
          adj.update(s, ArrayBuffer(d))
        } else {
          adj.update(s, ArrayBuffer(d))
          adj.update(d, ArrayBuffer(s))
        }
      }
    }
  } else {
    if ((contains_vertex(adj, s) && contains_vertex(adj, d)).asInstanceOf[Boolean]) {
      adj.update(s, adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ d)
    } else {
      if (contains_vertex(adj, s)) {
        adj.update(s, adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ d)
        adj.update(d, ArrayBuffer())
      } else {
        if (contains_vertex(adj, d)) {
          adj.update(s, ArrayBuffer(d))
        } else {
          adj.update(s, ArrayBuffer(d))
          adj.update(d, ArrayBuffer())
        }
      }
    }
  }
  g.asInstanceOf[GraphAdjacencyList].adj_list = adj
  return g
}

def graph_to_string(g: GraphAdjacencyList): String = {
  return String.valueOf(g.asInstanceOf[GraphAdjacencyList].adj_list)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var d_graph: GraphAdjacencyList = make_graph(true)
    d_graph = add_edge(d_graph, String.valueOf(BigInt(0)), String.valueOf(BigInt(1)))
    println(graph_to_string(d_graph))
    d_graph = add_edge(d_graph, String.valueOf(BigInt(1)), String.valueOf(BigInt(2)))
    d_graph = add_edge(d_graph, String.valueOf(BigInt(1)), String.valueOf(BigInt(4)))
    d_graph = add_edge(d_graph, String.valueOf(BigInt(1)), String.valueOf(BigInt(5)))
    println(graph_to_string(d_graph))
    d_graph = add_edge(d_graph, String.valueOf(BigInt(2)), String.valueOf(BigInt(0)))
    d_graph = add_edge(d_graph, String.valueOf(BigInt(2)), String.valueOf(BigInt(6)))
    d_graph = add_edge(d_graph, String.valueOf(BigInt(2)), String.valueOf(BigInt(7)))
    println(graph_to_string(d_graph))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
