// Generated by Mochi v0.10.66 on 2025-08-15 10:38:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def random(): Double = {
  return 1.0 * (rand()).toString.toDouble / 2147483648.0
}

def complete_graph(vertices_number: BigInt): scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = {
  var graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  var i: BigInt = BigInt(0)
  while (i < vertices_number) {
    var neighbors: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < vertices_number) {
      if (j != i) {
        neighbors = (neighbors :+ j)
      }
      j = j + BigInt(1)
    }
    graph.update(i, neighbors)
    i = i + BigInt(1)
  }
  return graph
}

def random_graph(vertices_number: BigInt, probability: Double, directed: Boolean): scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = {
  var graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  var i: BigInt = BigInt(0)
  while (i < vertices_number) {
    graph.update(i, ArrayBuffer())
    i = i + BigInt(1)
  }
  if (probability >= 1.0) {
    return complete_graph(vertices_number)
  }
  if (probability <= 0.0) {
    return graph
  }
  i = BigInt(0)
  while (i < vertices_number) {
    var j: BigInt = i + BigInt(1)
    while (j < vertices_number) {
      if (random() < probability) {
        graph.update(i, (graph.getOrElse(i, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]] :+ j))
        if (!directed) {
          graph.update(j, (graph.getOrElse(j, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]] :+ i))
        }
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return graph
}

def main(): Any = {
  seed = BigInt(1)
  var g1: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = random_graph(BigInt(4), 0.5, false)
  println(_str(g1))
  seed = BigInt(1)
  var g2: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = random_graph(BigInt(4), 0.5, true)
  println(_str(g2))
}

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
