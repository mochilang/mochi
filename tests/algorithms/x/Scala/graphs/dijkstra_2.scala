// Generated by Mochi v0.10.59 on 2025-08-07 11:21:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def print_dist(dist: ArrayBuffer[Double]): Any = {
  println("Vertex Distance")
  var i: BigInt = BigInt(0)
  while (i < BigInt((dist).size)) {
    if (dist((i.toInt).toInt) >= INF) {
      println((List(i, "\tINF")).mkString(" "))
    } else {
      println((List(i, "\t", BigInt((dist((i.toInt).toInt)).toString.toDouble.toInt))).mkString(" "))
    }
    i = i + BigInt(1)
  }
}

def min_dist(mdist: ArrayBuffer[Double], vset: ArrayBuffer[Boolean]): BigInt = {
  var min_val: Double = INF
  var min_ind: BigInt = -BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt((mdist).size)) {
    if ((!vset((i.toInt).toInt) && mdist((i.toInt).toInt) < min_val).asInstanceOf[Boolean]) {
      min_val = mdist((i.toInt).toInt)
      min_ind = i
    }
    i = i + BigInt(1)
  }
  return min_ind
}

def dijkstra(graph: ArrayBuffer[ArrayBuffer[Double]], src: BigInt): ArrayBuffer[Double] = {
  val v: BigInt = BigInt((graph).size)
  var mdist: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var vset: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < v) {
    mdist = mdist :+ INF
    vset = vset :+ false
    i = i + BigInt(1)
  }
  mdist((src).toInt) = 0.0
  var count: BigInt = BigInt(0)
  while (count < v - BigInt(1)) {
    val u: BigInt = min_dist(mdist, vset)
    vset((u).toInt) = true
    i = BigInt(0)
    while (i < v) {
      val alt: Double = mdist((u.toInt).toInt) + graph((u.toInt).toInt)((i.toInt).toInt)
      if (((!vset((i.toInt).toInt) && graph((u.toInt).toInt)((i.toInt).toInt) < INF).asInstanceOf[Boolean] && alt < mdist((i.toInt).toInt)).asInstanceOf[Boolean]) {
        mdist((i).toInt) = alt
      }
      i = i + BigInt(1)
    }
    count = count + BigInt(1)
  }
  return mdist
}

def main(): Any = {
  val graph: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 10.0, INF, INF, 5.0), ArrayBuffer(INF, 0.0, 1.0, INF, 2.0), ArrayBuffer(INF, INF, 0.0, 4.0, INF), ArrayBuffer(INF, INF, 6.0, 0.0, INF), ArrayBuffer(INF, 3.0, 9.0, 2.0, 0.0))
  val dist: ArrayBuffer[Double] = dijkstra(graph, BigInt(0))
  print_dist(dist)
}

val INF: Double = 1000000000.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
