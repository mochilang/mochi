// Generated by Mochi v0.10.66 on 2025-08-15 15:26:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def dfs(u: BigInt, graph: ArrayBuffer[ArrayBuffer[BigInt]], visit: ArrayBuffer[Boolean], _stack: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var stack: ArrayBuffer[BigInt] = _stack
  if (visit.lift((u.toInt).toInt).getOrElse(false)) {
    return stack
  }
  visit((u).toInt) = true
  for (v <- graph.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
    stack = dfs(v, graph, visit, stack)
  }
  stack = (stack :+ u)
  return stack
}

def dfs2(u: BigInt, reversed_graph: ArrayBuffer[ArrayBuffer[BigInt]], visit: ArrayBuffer[Boolean], _component: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var component: ArrayBuffer[BigInt] = _component
  if (visit.lift((u.toInt).toInt).getOrElse(false)) {
    return component
  }
  visit((u).toInt) = true
  component = (component :+ u)
  for (v <- reversed_graph.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
    component = dfs2(v, reversed_graph, visit, component)
  }
  return component
}

def kosaraju(graph: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var n: BigInt = BigInt((graph).size)
  var reversed_graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    reversed_graph = (reversed_graph :+ ArrayBuffer[BigInt]())
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    for (v <- graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
      reversed_graph((v).toInt) = (reversed_graph.lift((v.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) :+ i)
    }
    i = i + BigInt(1)
  }
  var visit: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  i = BigInt(0)
  while (i < n) {
    visit = (visit :+ false)
    i = i + BigInt(1)
  }
  var stack: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < n) {
    if (visit.lift((i.toInt).toInt).getOrElse(false) == false) {
      stack = dfs(i, graph, visit, stack)
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    visit((i).toInt) = false
    i = i + BigInt(1)
  }
  var scc: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var idx: BigInt = BigInt((stack).size) - BigInt(1)
  while (idx >= BigInt(0)) {
    var node: BigInt = stack.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    if (visit.lift((node.toInt).toInt).getOrElse(false) == false) {
      var component: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      component = dfs2(node, reversed_graph, visit, component)
      scc = (scc :+ component)
    }
    idx = idx - BigInt(1)
  }
  return scc
}

def main(): Any = {
  var graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1)), ArrayBuffer(BigInt(2)), ArrayBuffer(BigInt(0), BigInt(3)), ArrayBuffer(BigInt(4)), ArrayBuffer[BigInt]())
  var comps: ArrayBuffer[ArrayBuffer[BigInt]] = kosaraju(graph)
  var i: BigInt = BigInt(0)
  while (i < BigInt((comps).size)) {
    println(_str(comps.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())))
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
