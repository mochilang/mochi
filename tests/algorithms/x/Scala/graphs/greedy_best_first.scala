// Generated by Mochi v0.10.59 on 2025-08-07 11:23:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Pos(var y: BigInt, var x: BigInt)

case class Node(var pos_x: BigInt, var pos_y: BigInt, var goal_x: BigInt, var goal_y: BigInt, var g_cost: BigInt, var f_cost: BigInt, var path: ArrayBuffer[Pos])

def abs(x: BigInt): BigInt = {
  if (x < BigInt(0)) {
    return BigInt(0) - x
  }
  return x
}

def manhattan(x1: BigInt, y1: BigInt, x2: BigInt, y2: BigInt): BigInt = {
  return (x1 - x2).abs + (y1 - y2).abs
}

def clone_path(p: ArrayBuffer[Pos]): ArrayBuffer[Pos] = {
  var res: ArrayBuffer[Pos] = ArrayBuffer[Pos]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((p).size)) {
    res = res :+ p((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return res
}

def make_node(pos_x: BigInt, pos_y: BigInt, goal_x: BigInt, goal_y: BigInt, g_cost: BigInt, path: ArrayBuffer[Pos]): Node = {
  val f: BigInt = manhattan(pos_x, pos_y, goal_x, goal_y)
  return Node(pos_x, pos_y, goal_x, goal_y, g_cost, f, path)
}

def node_equal(a: Node, b: Node): Boolean = {
  return (a.asInstanceOf[Node].pos_x == b.asInstanceOf[Node].pos_x && a.asInstanceOf[Node].pos_y == b.asInstanceOf[Node].pos_y).asInstanceOf[Boolean]
}

def contains(nodes: ArrayBuffer[Node], node: Node): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((nodes).size)) {
    if (node_equal(nodes((i.toInt).toInt), node)) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def sort_nodes(nodes: ArrayBuffer[Node]): ArrayBuffer[Node] = {
  var arr: ArrayBuffer[Node] = nodes
  var i: BigInt = BigInt(1)
  val _br2 = new Breaks
  _br2.breakable {
    while (i < BigInt((arr).size)) {
      val key_node: Node = arr((i.toInt).toInt)
      var j: BigInt = i - BigInt(1)
      val _br3 = new Breaks
      _br3.breakable {
        while (j >= BigInt(0)) {
          val temp: Node = arr((j.toInt).toInt)
          if (temp.asInstanceOf[Node].f_cost > key_node.asInstanceOf[Node].f_cost) {
            arr((j + BigInt(1)).toInt) = temp
            j = j - BigInt(1)
          } else {
            _br3.break()
          }
        }
      }
      arr((j + BigInt(1)).toInt) = key_node
      i = i + BigInt(1)
    }
  }
  return arr
}

def get_successors(grid: ArrayBuffer[ArrayBuffer[BigInt]], parent: Node, target: Pos): ArrayBuffer[Node] = {
  var res: ArrayBuffer[Node] = ArrayBuffer[Node]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((delta).size)) {
    val d: Pos = delta((i.toInt).toInt)
    val pos_x: BigInt = parent.asInstanceOf[Node].pos_x + d.asInstanceOf[Pos].x
    val pos_y: BigInt = parent.asInstanceOf[Node].pos_y + d.asInstanceOf[Pos].y
    if (((((pos_x >= BigInt(0) && pos_x < BigInt((grid((BigInt(0).toInt).toInt)).size)).asInstanceOf[Boolean] && pos_y >= BigInt(0)).asInstanceOf[Boolean] && pos_y < BigInt((grid).size)).asInstanceOf[Boolean] && grid((pos_y.toInt).toInt)((pos_x.toInt).toInt) == BigInt(0)).asInstanceOf[Boolean]) {
      var new_path: ArrayBuffer[Pos] = clone_path(parent.asInstanceOf[Node].path)
      new_path = new_path :+ Pos(pos_y, pos_x)
      res = res :+ make_node(pos_x, pos_y, target.asInstanceOf[Pos].x, target.asInstanceOf[Pos].y, parent.asInstanceOf[Node].g_cost + BigInt(1), new_path)
    }
    i = i + BigInt(1)
  }
  return res
}

def greedy_best_first(grid: ArrayBuffer[ArrayBuffer[BigInt]], init: Pos, goal: Pos): ArrayBuffer[Pos] = {
  val start_path: ArrayBuffer[Pos] = ArrayBuffer(init)
  val start: Node = make_node(init.asInstanceOf[Pos].x, init.asInstanceOf[Pos].y, goal.asInstanceOf[Pos].x, goal.asInstanceOf[Pos].y, BigInt(0), start_path)
  var open_nodes: ArrayBuffer[Node] = ArrayBuffer(start)
  var closed_nodes: ArrayBuffer[Node] = ArrayBuffer[Node]()
  while (BigInt((open_nodes).size) > BigInt(0)) {
    open_nodes = sort_nodes(open_nodes)
    val current: Node = open_nodes((BigInt(0).toInt).toInt)
    var new_open: ArrayBuffer[Node] = ArrayBuffer[Node]()
    var idx: BigInt = BigInt(1)
    while (idx < BigInt((open_nodes).size)) {
      new_open = new_open :+ open_nodes((idx.toInt).toInt)
      idx = idx + BigInt(1)
    }
    open_nodes = new_open
    if ((current.asInstanceOf[Node].pos_x == goal.asInstanceOf[Pos].x && current.asInstanceOf[Node].pos_y == goal.asInstanceOf[Pos].y).asInstanceOf[Boolean]) {
      return current.asInstanceOf[Node].path
    }
    closed_nodes = closed_nodes :+ current
    val successors: ArrayBuffer[Node] = get_successors(grid, current, goal)
    var i: BigInt = BigInt(0)
    while (i < BigInt((successors).size)) {
      val child: Node = successors((i.toInt).toInt)
      if ((!(closed_nodes.contains(child)).asInstanceOf[Boolean] && !(open_nodes.contains(child)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        open_nodes = open_nodes :+ child
      }
      i = i + BigInt(1)
    }
  }
  val r: ArrayBuffer[Pos] = ArrayBuffer(init)
  return r
}

def print_grid(grid: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((grid).size)) {
    println(String.valueOf(grid((i.toInt).toInt)))
    i = i + BigInt(1)
  }
}

def main(): Any = {
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((TEST_GRIDS).size)) {
    println("==grid-" + String.valueOf(idx + BigInt(1)) + "==")
    var grid: ArrayBuffer[ArrayBuffer[BigInt]] = TEST_GRIDS((idx.toInt).toInt)
    val init: Pos = Pos(BigInt(0), BigInt(0))
    val goal: Pos = Pos(BigInt((grid).size) - BigInt(1), BigInt((grid((BigInt(0).toInt).toInt)).size) - BigInt(1))
    print_grid(grid)
    println("------")
    val path: ArrayBuffer[Pos] = greedy_best_first(grid, init, goal)
    var j: BigInt = BigInt(0)
    while (j < BigInt((path).size)) {
      val p: Pos = path((j.toInt).toInt)
      grid((p.asInstanceOf[Pos].y).toInt)((p.asInstanceOf[Pos].x).toInt) = BigInt(2)
      j = j + BigInt(1)
    }
    print_grid(grid)
    idx = idx + BigInt(1)
  }
}

val delta: ArrayBuffer[Pos] = ArrayBuffer(Pos(-BigInt(1), BigInt(0)), Pos(BigInt(0), -BigInt(1)), Pos(BigInt(1), BigInt(0)), Pos(BigInt(0), BigInt(1)))

val TEST_GRIDS: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0))), ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0))), ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0))))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
