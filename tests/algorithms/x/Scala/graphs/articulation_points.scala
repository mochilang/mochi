// Generated by Mochi v0.10.59 on 2025-08-07 11:14:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def dfs_skip(graph: ArrayBuffer[ArrayBuffer[BigInt]], visited: ArrayBuffer[Boolean], skip: BigInt, at: BigInt): BigInt = {
  visited((at).toInt) = true
  var count: BigInt = 1
  val _ct0 = new Breaks
  for (to <- graph((at.toInt).toInt)) {
    _ct0.breakable {
      if (to == skip) {
        _ct0.break()
      }
      if (visited((to.toInt).toInt) == false) {
        count = count + dfs_skip(graph, visited, skip, to)
      }
    }
  }
  return count
}

def articulation_points(graph: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((graph).size)
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var v: BigInt = 0
  while (v < n) {
    var visited: ArrayBuffer[Boolean] = ArrayBuffer()
    var i: BigInt = 0
    while (i < n) {
      visited = visited :+ false
      i = i + 1
    }
    var start: BigInt = 0
    while (start == v && start < n) {
      start = start + 1
    }
    val reach: BigInt = dfs_skip(graph, visited, v, start)
    if (reach < n - 1) {
      result = result :+ v
      println(v)
    }
    v = v + 1
  }
  return result
}

def main(): Any = {
  val graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 2), ArrayBuffer(0, 2), ArrayBuffer(0, 1, 3, 5), ArrayBuffer(2, 4), ArrayBuffer(3), ArrayBuffer(2, 6, 8), ArrayBuffer(5, 7), ArrayBuffer(6, 8), ArrayBuffer(5, 7))
  articulation_points(graph)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
