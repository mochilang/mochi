// Generated by Mochi v0.10.59 on 2025-08-07 11:15:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def join(xs: ArrayBuffer[String]): String = {
  var s: String = ""
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    s = s + xs((i.toInt).toInt)
    i = i + 1
  }
  return s
}

def breadth_first_search(graph: scala.collection.mutable.Map[String,ArrayBuffer[String]], start: String): ArrayBuffer[String] = {
  var explored: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  explored.update(start, true)
  var result: ArrayBuffer[String] = ArrayBuffer(start)
  var queue: ArrayBuffer[String] = ArrayBuffer(start)
  while (BigInt((queue).size) > 0) {
    val v: String = queue((0.toInt).toInt)
    queue = queue.slice((1).toInt, (BigInt((queue).size)).toInt)
    val children: ArrayBuffer[String] = graph.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var i: BigInt = 0
    while (i < BigInt((children).size)) {
      val w: String = children((i.toInt).toInt)
      if (!(explored.contains(w)).asInstanceOf[Boolean]) {
        explored.update(w, true)
        result = result :+ w
        queue = queue :+ w
      }
      i = i + 1
    }
  }
  return result
}

def breadth_first_search_with_deque(graph: scala.collection.mutable.Map[String,ArrayBuffer[String]], start: String): ArrayBuffer[String] = {
  var visited: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  visited.update(start, true)
  var result: ArrayBuffer[String] = ArrayBuffer(start)
  var queue: ArrayBuffer[String] = ArrayBuffer(start)
  var head: BigInt = 0
  while (head < BigInt((queue).size)) {
    val v: String = queue((head.toInt).toInt)
    head = head + 1
    val children: ArrayBuffer[String] = graph.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var i: BigInt = 0
    while (i < BigInt((children).size)) {
      val child: String = children((i.toInt).toInt)
      if (!(visited.contains(child)).asInstanceOf[Boolean]) {
        visited.update(child, true)
        result = result :+ child
        queue = queue :+ child
      }
      i = i + 1
    }
  }
  return result
}

val G: scala.collection.mutable.Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("A" -> (ArrayBuffer("B", "C")), "B" -> (ArrayBuffer("A", "D", "E")), "C" -> (ArrayBuffer("A", "F")), "D" -> (ArrayBuffer("B")), "E" -> (ArrayBuffer("B", "F")), "F" -> (ArrayBuffer("C", "E")))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(join(breadth_first_search(G, "A")))
    println(join(breadth_first_search_with_deque(G, "A")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
