// Generated by Mochi v0.10.59 on 2025-08-07 11:21:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def dfs(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], vert: BigInt, visited: ArrayBuffer[Boolean]): ArrayBuffer[BigInt] = {
  visited((vert).toInt) = true
  var connected_verts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (neighbour <- graph.getOrElse(vert, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]) {
    if (!visited((neighbour.toInt).toInt)) {
      connected_verts = (connected_verts ++ dfs(graph, neighbour, visited)).asInstanceOf[ArrayBuffer[BigInt]]
    }
  }
  return (ArrayBuffer(vert) ++ connected_verts).asInstanceOf[ArrayBuffer[BigInt]]
}

def connected_components(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val graph_size: BigInt = BigInt((graph).size)
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  for (_ <- (BigInt(0)).toInt until (graph_size).toInt) {
    visited = visited :+ false
  }
  var components_list: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  for (i <- (BigInt(0)).toInt until (graph_size).toInt) {
    if (!visited((i.toInt).toInt)) {
      val component: ArrayBuffer[BigInt] = dfs(graph, BigInt(i.toString.toDouble.toInt), visited)
      components_list = components_list :+ component
    }
  }
  return components_list
}

val test_graph_1: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(2))), BigInt(1) -> (ArrayBuffer(BigInt(0), BigInt(3))), BigInt(2) -> (ArrayBuffer(BigInt(0))), BigInt(3) -> (ArrayBuffer(BigInt(1))), BigInt(4) -> (ArrayBuffer(BigInt(5), BigInt(6))), BigInt(5) -> (ArrayBuffer(BigInt(4), BigInt(6))), BigInt(6) -> (ArrayBuffer(BigInt(4), BigInt(5))))

val test_graph_2: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(2), BigInt(3))), BigInt(1) -> (ArrayBuffer(BigInt(0), BigInt(3))), BigInt(2) -> (ArrayBuffer(BigInt(0))), BigInt(3) -> (ArrayBuffer(BigInt(0), BigInt(1))), BigInt(4) -> (ArrayBuffer()), BigInt(5) -> (ArrayBuffer()))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(connected_components(test_graph_1)))
    println(String.valueOf(connected_components(test_graph_2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
