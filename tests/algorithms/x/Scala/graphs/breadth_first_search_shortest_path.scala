// Generated by Mochi v0.10.59 on 2025-08-07 11:16:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Graph(var graph: scala.collection.mutable.Map[String,ArrayBuffer[String]], var parent: scala.collection.mutable.Map[String,String], var source: String)

def newGraph(g: scala.collection.mutable.Map[String,ArrayBuffer[String]], s: String): Graph = {
  return Graph(g, scala.collection.mutable.Map(), s)
}

def breath_first_search(g: Graph): Graph = {
  var parent: scala.collection.mutable.Map[String,String] = g.parent
  parent.update(g.source, g.source)
  var queue: ArrayBuffer[String] = ArrayBuffer((g.source).toString)
  var idx: BigInt = 0
  while (idx < BigInt((queue).size)) {
    val vertex: String = queue((idx.toInt).toInt)
    for (adj <- g.graph.getOrElse(vertex.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]) {
      if (!(parent.contains(adj)).asInstanceOf[Boolean]) {
        parent.update(adj, vertex)
        queue = queue :+ adj
      }
    }
    idx = idx + 1
  }
  g.parent = parent
  return g
}

def shortest_path(g: Graph, target: String): String = {
  if (target == g.source) {
    return g.source
  }
  if (!(g.parent.contains(target)).asInstanceOf[Boolean]) {
    return "No path from vertex: " + g.source + " to vertex: " + target
  }
  val p: String = g.parent.getOrElse(target.toString, "").asInstanceOf[String]
  return shortest_path(g, p) + "->" + target
}

val graph: scala.collection.mutable.Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("A" -> (ArrayBuffer("B", "C", "E")), "B" -> (ArrayBuffer("A", "D", "E")), "C" -> (ArrayBuffer("A", "F", "G")), "D" -> (ArrayBuffer("B")), "E" -> (ArrayBuffer("A", "B", "D")), "F" -> (ArrayBuffer("C")), "G" -> (ArrayBuffer("C")))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var g: Graph = newGraph(graph, "G")
    g = breath_first_search(g)
    println(shortest_path(g, "D"))
    println(shortest_path(g, "G"))
    println(shortest_path(g, "Foo"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
