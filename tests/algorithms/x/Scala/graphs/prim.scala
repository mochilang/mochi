// Generated by Mochi v0.10.59 on 2025-08-07 11:25:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def connect(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]], a: BigInt, b: BigInt, w: BigInt): scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]] = {
  val u: BigInt = a - BigInt(1)
  val v: BigInt = b - BigInt(1)
  var g: scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]] = graph
  g.update(u, g.getOrElse(u, ArrayBuffer[ArrayBuffer[BigInt]]()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]] :+ ArrayBuffer(BigInt(v.toString.toDouble.toInt), BigInt(w.toString.toDouble.toInt)))
  g.update(v, g.getOrElse(v, ArrayBuffer[ArrayBuffer[BigInt]]()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]] :+ ArrayBuffer(BigInt(u.toString.toDouble.toInt), BigInt(w.toString.toDouble.toInt)))
  return g
}

def in_list(arr: ArrayBuffer[BigInt], x: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    if (arr((i.toInt).toInt) == x) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def prim(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]], s: BigInt, n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var dist: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  var parent: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  dist.update(s, BigInt(0))
  parent.update(s, -BigInt(1))
  var known: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var keys: ArrayBuffer[BigInt] = ArrayBuffer(s)
  while (BigInt((known).size) < n) {
    var mini: BigInt = INF
    var u: BigInt = -BigInt(1)
    var i: BigInt = BigInt(0)
    while (i < BigInt((keys).size)) {
      val k: BigInt = keys((i.toInt).toInt)
      val d: BigInt = dist.getOrElse(k, null).asInstanceOf[BigInt]
      if ((!in_list(known, k) && d < mini).asInstanceOf[Boolean]) {
        mini = d
        u = k
      }
      i = i + BigInt(1)
    }
    known = known :+ u
    for (e <- graph.getOrElse(u, ArrayBuffer[ArrayBuffer[BigInt]]()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]) {
      val v: BigInt = e((BigInt(0).toInt).toInt)
      val w: BigInt = e((BigInt(1).toInt).toInt)
      if (!in_list(keys, v)) {
        keys = keys :+ v
      }
      val cur: BigInt = (if (dist.contains(v)) dist.getOrElse(v, null).asInstanceOf[BigInt] else INF)
      if ((!in_list(known, v) && w < cur).asInstanceOf[Boolean]) {
        dist.update(v, w)
        parent.update(v, u)
      }
    }
  }
  var edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((keys).size)) {
    val v: BigInt = keys((j.toInt).toInt)
    if (v != s) {
      edges = edges :+ ArrayBuffer(v + BigInt(1), parent.getOrElse(v, null).asInstanceOf[BigInt] + BigInt(1))
    }
    j = j + BigInt(1)
  }
  return edges
}

def sort_heap(h: ArrayBuffer[BigInt], dist: scala.collection.mutable.Map[BigInt,BigInt]): ArrayBuffer[BigInt] = {
  var a: ArrayBuffer[BigInt] = h
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((a).size) - i - BigInt(1)) {
      val dj: BigInt = (if (dist.contains(a((j.toInt).toInt))) dist.getOrElse(a((j.toInt).toInt), null).asInstanceOf[BigInt] else INF)
      val dj1: BigInt = (if (dist.contains(a(((j + BigInt(1)).toInt).toInt))) dist.getOrElse(a(((j + BigInt(1)).toInt).toInt), null).asInstanceOf[BigInt] else INF)
      if (dj > dj1) {
        val t: BigInt = a((j.toInt).toInt)
        a((j).toInt) = a(((j + BigInt(1)).toInt).toInt)
        a((j + BigInt(1)).toInt) = t
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return a
}

def prim_heap(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]], s: BigInt, n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var dist: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  var parent: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  dist.update(s, BigInt(0))
  parent.update(s, -BigInt(1))
  var h: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    h = h :+ i
    i = i + BigInt(1)
  }
  h = sort_heap(h, dist)
  var known: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (BigInt((h).size) > BigInt(0)) {
    val u: BigInt = h((BigInt(0).toInt).toInt)
    h = h.slice((BigInt(1)).toInt, (BigInt((h).size)).toInt)
    known = known :+ u
    for (e <- graph.getOrElse(u, ArrayBuffer[ArrayBuffer[BigInt]]()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]) {
      val v: BigInt = e((BigInt(0).toInt).toInt)
      val w: BigInt = e((BigInt(1).toInt).toInt)
      val cur: BigInt = (if (dist.contains(v)) dist.getOrElse(v, null).asInstanceOf[BigInt] else INF)
      if ((!in_list(known, v) && w < cur).asInstanceOf[Boolean]) {
        dist.update(v, w)
        parent.update(v, u)
      }
    }
    h = sort_heap(h, dist)
  }
  var edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var j: BigInt = BigInt(0)
  while (j < n) {
    if (j != s) {
      edges = edges :+ ArrayBuffer(j + BigInt(1), parent.getOrElse(j, null).asInstanceOf[BigInt] + BigInt(1))
    }
    j = j + BigInt(1)
  }
  return edges
}

def print_edges(edges: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((edges).size)) {
    val e: ArrayBuffer[BigInt] = edges((i.toInt).toInt)
    println("(" + String.valueOf(e((BigInt(0).toInt).toInt)) + ", " + String.valueOf(e((BigInt(1).toInt).toInt)) + ")")
    i = i + BigInt(1)
  }
}

def test_vector(): Any = {
  val x: BigInt = BigInt(5)
  var G: scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[ArrayBuffer[BigInt]]]]
  var i: BigInt = BigInt(0)
  while (i < x) {
    G.update(i, ArrayBuffer())
    i = i + BigInt(1)
  }
  G = connect(G, BigInt(1), BigInt(2), BigInt(15))
  G = connect(G, BigInt(1), BigInt(3), BigInt(12))
  G = connect(G, BigInt(2), BigInt(4), BigInt(13))
  G = connect(G, BigInt(2), BigInt(5), BigInt(5))
  G = connect(G, BigInt(3), BigInt(2), BigInt(6))
  G = connect(G, BigInt(3), BigInt(4), BigInt(6))
  val mst: ArrayBuffer[ArrayBuffer[BigInt]] = prim(G, BigInt(0), x)
  print_edges(mst)
  val mst_heap: ArrayBuffer[ArrayBuffer[BigInt]] = prim_heap(G, BigInt(0), x)
  print_edges(mst_heap)
}

val INF: BigInt = BigInt(1000000000)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    test_vector()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
