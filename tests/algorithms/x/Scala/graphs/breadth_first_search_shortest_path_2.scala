// Generated by Mochi v0.10.65 on 2025-08-14 16:26:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(xs: ArrayBuffer[String], x: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == x) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def contains_key(m: scala.collection.mutable.Map[String,ArrayBuffer[String]], key: String): Boolean = {
  for (k <- m.keys) {
    if (k == key) {
      return true
    }
  }
  return false
}

def bfs_shortest_path(graph: scala.collection.mutable.Map[String,ArrayBuffer[String]], start: String, goal: String): ArrayBuffer[String] = {
  var explored: ArrayBuffer[String] = ArrayBuffer[String]()
  var queue: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer(start))
  if (start == goal) {
    return ArrayBuffer(start)
  }
  while (BigInt((queue).size) > BigInt(0)) {
    val path: ArrayBuffer[String] = queue.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[String]())
    queue = queue.slice((BigInt(1)).toInt, (BigInt((queue).size)).toInt)
    val node: String = path.lift(((BigInt((path).size) - BigInt(1)).toInt).toInt).getOrElse("")
    if (!(explored.contains(node))) {
      val neighbours: ArrayBuffer[String] = graph.getOrElse(node.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
      var i: BigInt = BigInt(0)
      while (i < BigInt((neighbours).size)) {
        val neighbour: String = neighbours.lift((i.toInt).toInt).getOrElse("")
        var new_path: ArrayBuffer[String] = path
        new_path = new_path += (neighbour)
        queue = queue += (new_path)
        if (neighbour == goal) {
          return new_path
        }
        i = i + BigInt(1)
      }
      explored = explored += (node)
    }
  }
  return ArrayBuffer[String]()
}

def bfs_shortest_path_distance(graph: scala.collection.mutable.Map[String,ArrayBuffer[String]], start: String, target: String): BigInt = {
  if ((contains_key(graph, start) == false || contains_key(graph, target) == false)) {
    return -BigInt(1)
  }
  if (start == target) {
    return BigInt(0)
  }
  var queue: ArrayBuffer[String] = ArrayBuffer(start)
  var visited: ArrayBuffer[String] = ArrayBuffer(start)
  var dist: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  dist.update(start, BigInt(0))
  dist.update(target, -BigInt(1))
  while (BigInt((queue).size) > BigInt(0)) {
    val node: String = queue.lift((BigInt(0).toInt).toInt).getOrElse("")
    queue = queue.slice((BigInt(1)).toInt, (BigInt((queue).size)).toInt)
    if (node == target) {
      if ((dist.getOrElse(target.toString, BigInt(0)).asInstanceOf[BigInt] == -BigInt(1) || dist.getOrElse(node.toString, BigInt(0)).asInstanceOf[BigInt] < dist.getOrElse(target.toString, BigInt(0)).asInstanceOf[BigInt])) {
        dist.update(target, dist.getOrElse(node.toString, BigInt(0)).asInstanceOf[BigInt])
      }
    }
    val adj: ArrayBuffer[String] = graph.getOrElse(node.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var i: BigInt = BigInt(0)
    while (i < BigInt((adj).size)) {
      val next: String = adj.lift((i.toInt).toInt).getOrElse("")
      if (!(visited.contains(next))) {
        visited = visited += (next)
        queue = queue += (next)
        dist.update(next, dist.getOrElse(node.toString, BigInt(0)).asInstanceOf[BigInt] + BigInt(1))
      }
      i = i + BigInt(1)
    }
  }
  return dist.getOrElse(target.toString, BigInt(0)).asInstanceOf[BigInt]
}

val demo_graph: scala.collection.mutable.Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("A" -> (ArrayBuffer("B", "C", "E")), "B" -> (ArrayBuffer("A", "D", "E")), "C" -> (ArrayBuffer("A", "F", "G")), "D" -> (ArrayBuffer("B")), "E" -> (ArrayBuffer("A", "B", "D")), "F" -> (ArrayBuffer("C")), "G" -> (ArrayBuffer("C")))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
