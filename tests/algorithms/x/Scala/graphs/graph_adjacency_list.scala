// Generated by Mochi v0.10.66 on 2025-08-15 15:22:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Graph(var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]], var directed: Boolean)

def create_graph(vertices: ArrayBuffer[String], edges: ArrayBuffer[ArrayBuffer[String]], directed: Boolean): Graph = {
  var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (v <- vertices) {
    adj.update(v, ArrayBuffer())
  }
  for (e <- edges) {
    var s: String = e.lift((BigInt(0).toInt).toInt).getOrElse("")
    var d: String = e.lift((BigInt(1).toInt).toInt).getOrElse("")
    if (!(adj.contains(s))) {
      adj.update(s, ArrayBuffer())
    }
    if (!(adj.contains(d))) {
      adj.update(d, ArrayBuffer())
    }
    adj.update(s, (adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ d))
    if (!directed) {
      adj.update(d, (adj.getOrElse(d.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]] :+ s))
    }
  }
  return Graph(adj, directed)
}

def add_vertex(graph: Graph, v: String): Graph = {
  if ((graph.asInstanceOf[Graph].adj.contains(v))) {
    throw new RuntimeException(String.valueOf("vertex exists"))
  }
  var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (k <- graph.asInstanceOf[Graph].adj.keys) {
    adj.update(k, graph.asInstanceOf[Graph].adj.getOrElse(k.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
  }
  adj.update(v, ArrayBuffer())
  return Graph(adj, graph.asInstanceOf[Graph].directed)
}

def remove_from_list(lst: ArrayBuffer[String], value: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (lst.lift((i.toInt).toInt).getOrElse("") != value) {
      res = (res :+ lst.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return res
}

def remove_key(m: scala.collection.mutable.Map[String,ArrayBuffer[String]], key: String): scala.collection.mutable.Map[String,ArrayBuffer[String]] = {
  var res: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (k <- m.keys) {
    if (k != key) {
      res.update(k, m.getOrElse(k.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
    }
  }
  return res
}

def add_edge(graph: Graph, s: String, d: String): Graph = {
  if ((!(graph.asInstanceOf[Graph].adj.contains(s)) || !(graph.asInstanceOf[Graph].adj.contains(d)))) {
    throw new RuntimeException(String.valueOf("vertex missing"))
  }
  if (contains_edge(graph, s, d)) {
    throw new RuntimeException(String.valueOf("edge exists"))
  }
  var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (k <- graph.asInstanceOf[Graph].adj.keys) {
    adj.update(k, graph.asInstanceOf[Graph].adj.getOrElse(k.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
  }
  var list_s: ArrayBuffer[String] = adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
  list_s = (list_s :+ d)
  adj.update(s, list_s)
  if (!graph.asInstanceOf[Graph].directed) {
    var list_d: ArrayBuffer[String] = adj.getOrElse(d.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    list_d = (list_d :+ s)
    adj.update(d, list_d)
  }
  return Graph(adj, graph.asInstanceOf[Graph].directed)
}

def remove_edge(graph: Graph, s: String, d: String): Graph = {
  if ((!(graph.asInstanceOf[Graph].adj.contains(s)) || !(graph.asInstanceOf[Graph].adj.contains(d)))) {
    throw new RuntimeException(String.valueOf("vertex missing"))
  }
  if (!contains_edge(graph, s, d)) {
    throw new RuntimeException(String.valueOf("edge missing"))
  }
  var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (k <- graph.asInstanceOf[Graph].adj.keys) {
    adj.update(k, graph.asInstanceOf[Graph].adj.getOrElse(k.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
  }
  adj.update(s, remove_from_list(adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]], d))
  if (!graph.asInstanceOf[Graph].directed) {
    adj.update(d, remove_from_list(adj.getOrElse(d.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]], s))
  }
  return Graph(adj, graph.asInstanceOf[Graph].directed)
}

def remove_vertex(graph: Graph, v: String): Graph = {
  if (!(graph.asInstanceOf[Graph].adj.contains(v))) {
    throw new RuntimeException(String.valueOf("vertex missing"))
  }
  var adj: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  for (k <- graph.asInstanceOf[Graph].adj.keys) {
    if (k != v) {
      adj.update(k, remove_from_list(graph.asInstanceOf[Graph].adj.getOrElse(k.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]], v))
    }
  }
  return Graph(adj, graph.asInstanceOf[Graph].directed)
}

def contains_vertex(graph: Graph, v: String): Boolean = {
  return (graph.asInstanceOf[Graph].adj.contains(v)).asInstanceOf[Boolean]
}

def contains_edge(graph: Graph, s: String, d: String): Boolean = {
  if ((!(graph.asInstanceOf[Graph].adj.contains(s)) || !(graph.asInstanceOf[Graph].adj.contains(d)))) {
    throw new RuntimeException(String.valueOf("vertex missing"))
  }
  for (x <- graph.asInstanceOf[Graph].adj.getOrElse(s.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]) {
    if (x == d) {
      return true
    }
  }
  return false
}

def clear_graph(graph: Graph): Graph = {
  return Graph(scala.collection.mutable.Map(), graph.asInstanceOf[Graph].directed)
}

def to_string(graph: Graph): String = {
  return (_str(graph.asInstanceOf[Graph].adj)).toString
}

def main(): Any = {
  var vertices: ArrayBuffer[String] = ArrayBuffer("1", "2", "3", "4")
  var edges: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("1", "2"), ArrayBuffer("2", "3"), ArrayBuffer("3", "4"))
  var g: Graph = create_graph(vertices, edges, false)
  println(_str(to_string(g)))
  g = add_vertex(g, "5")
  g = add_edge(g, "4", "5")
  println(_str(_str(contains_edge(g, "4", "5"))))
  g = remove_edge(g, "1", "2")
  g = remove_vertex(g, "3")
  println(_str(to_string(g)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
