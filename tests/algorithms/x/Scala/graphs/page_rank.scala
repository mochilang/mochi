// Generated by Mochi v0.10.66 on 2025-08-15 15:26:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Node(var name: String, var inbound: ArrayBuffer[String], var outbound: ArrayBuffer[String])

def node_to_string(n: Node): String = {
  return "<node=" + n.asInstanceOf[Node].name + " inbound=" + n.asInstanceOf[Node].inbound + " outbound=" + n.asInstanceOf[Node].outbound + ">"
}

def page_rank(nodes: ArrayBuffer[Node], limit: BigInt, d: Double): scala.collection.mutable.Map[String,Double] = {
  var ranks: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  for (n <- nodes) {
    ranks.update(n.asInstanceOf[Node].name, 1.0)
  }
  var outbounds: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  for (n <- nodes) {
    outbounds.update(n.asInstanceOf[Node].name, 1.0 * (BigInt((n.asInstanceOf[Node].outbound).size)).toDouble)
  }
  var i: BigInt = BigInt(0)
  while (i < limit) {
    println(_str("======= Iteration " + _str(i + BigInt(1)) + " ======="))
    for (n <- nodes) {
      var sum_val: Double = 0.0
      for (ib <- n.asInstanceOf[Node].inbound) {
        sum_val = sum_val + ranks.getOrElse(ib.toString, 0.0).asInstanceOf[Double] / outbounds.getOrElse(ib.toString, 0.0).asInstanceOf[Double]
      }
      ranks.update(n.asInstanceOf[Node].name, 1.0 - d + d * sum_val)
    }
    println(_str(ranks))
    i = i + BigInt(1)
  }
  return ranks
}

var names: ArrayBuffer[String] = ArrayBuffer("A", "B", "C")

var graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(0)))

var nodes: ArrayBuffer[Node] = ArrayBuffer[Node]()

var ri: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    for (name <- names) {
      nodes = (nodes :+ Node(name, ArrayBuffer(), ArrayBuffer()))
    }
    while (ri < BigInt((graph).size)) {
      var row: ArrayBuffer[BigInt] = graph.lift((ri.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var ci: BigInt = BigInt(0)
      while (ci < BigInt((row).size)) {
        if (row.lift((ci.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
          var n_in: Node = nodes.lift((ci.toInt).toInt).getOrElse(null)
          n_in.asInstanceOf[Node].inbound = (n_in.asInstanceOf[Node].inbound :+ names.lift((ri.toInt).toInt).getOrElse(""))
          nodes((ci).toInt) = n_in
          var n_out: Node = nodes.lift((ri.toInt).toInt).getOrElse(null)
          n_out.asInstanceOf[Node].outbound = (n_out.asInstanceOf[Node].outbound :+ names.lift((ci.toInt).toInt).getOrElse(""))
          nodes((ri).toInt) = n_out
        }
        ci = ci + BigInt(1)
      }
      ri = ri + BigInt(1)
    }
    println(_str("======= Nodes ======="))
    for (n <- nodes) {
      println(_str(n))
    }
    page_rank(nodes, BigInt(3), 0.85)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
