// Generated by Mochi v0.10.59 on 2025-08-07 11:24:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Edge(var u: BigInt, var v: BigInt, var w: BigInt)

case class UF(var parent: ArrayBuffer[BigInt], var rank: ArrayBuffer[BigInt])

case class FindRes(var root: BigInt, var uf: UF)

def uf_make(n: BigInt): UF = {
  var p: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var r: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    p = p :+ i
    r = r :+ BigInt(0)
    i = i + BigInt(1)
  }
  return UF(p, r)
}

def uf_find(uf: UF, x: BigInt): FindRes = {
  var p: ArrayBuffer[BigInt] = uf.asInstanceOf[UF].parent
  if (p((x.toInt).toInt) != x) {
    val res: FindRes = uf_find(UF(p, uf.asInstanceOf[UF].rank), p((x.toInt).toInt))
    p = res.asInstanceOf[FindRes].uf.asInstanceOf[UF].parent
    p((x).toInt) = res.asInstanceOf[FindRes].root
    return FindRes(res.asInstanceOf[FindRes].root, UF(p, res.asInstanceOf[FindRes].uf.asInstanceOf[UF].rank))
  }
  return FindRes(x, uf)
}

def uf_union(uf: UF, x: BigInt, y: BigInt): UF = {
  val fr1: FindRes = uf_find(uf, x)
  var uf1: UF = fr1.asInstanceOf[FindRes].uf
  val root1: BigInt = fr1.asInstanceOf[FindRes].root
  val fr2: FindRes = uf_find(uf1, y)
  uf1 = fr2.asInstanceOf[FindRes].uf
  val root2: BigInt = fr2.asInstanceOf[FindRes].root
  if (root1 == root2) {
    return uf1
  }
  var p: ArrayBuffer[BigInt] = uf1.asInstanceOf[UF].parent
  var r: ArrayBuffer[BigInt] = uf1.asInstanceOf[UF].rank
  if (r((root1.toInt).toInt) > r((root2.toInt).toInt)) {
    p((root2).toInt) = root1
  } else {
    if (r((root1.toInt).toInt) < r((root2.toInt).toInt)) {
      p((root1).toInt) = root2
    } else {
      p((root2).toInt) = root1
      r((root1).toInt) = r((root1.toInt).toInt) + BigInt(1)
    }
  }
  return UF(p, r)
}

def boruvka(n: BigInt, edges: ArrayBuffer[Edge]): ArrayBuffer[Edge] = {
  var uf: UF = uf_make(n)
  var num_components: BigInt = n
  var mst: ArrayBuffer[Edge] = ArrayBuffer[Edge]()
  while (num_components > BigInt(1)) {
    var cheap: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var i: BigInt = BigInt(0)
    while (i < n) {
      cheap = cheap :+ BigInt((-BigInt(1)).toString.toDouble.toInt)
      i = i + BigInt(1)
    }
    var idx: BigInt = BigInt(0)
    while (idx < BigInt((edges).size)) {
      val e: Edge = edges((idx.toInt).toInt)
      val fr1: FindRes = uf_find(uf, e.asInstanceOf[Edge].u)
      uf = fr1.asInstanceOf[FindRes].uf
      val set1: BigInt = fr1.asInstanceOf[FindRes].root
      val fr2: FindRes = uf_find(uf, e.asInstanceOf[Edge].v)
      uf = fr2.asInstanceOf[FindRes].uf
      val set2: BigInt = fr2.asInstanceOf[FindRes].root
      if (set1 != set2) {
        if ((cheap((set1.toInt).toInt) == BigInt(0) - BigInt(1) || edges((cheap((set1.toInt).toInt).toInt).toInt).w > e.asInstanceOf[Edge].w).asInstanceOf[Boolean]) {
          cheap((set1).toInt) = idx
        }
        if ((cheap((set2.toInt).toInt) == BigInt(0) - BigInt(1) || edges((cheap((set2.toInt).toInt).toInt).toInt).w > e.asInstanceOf[Edge].w).asInstanceOf[Boolean]) {
          cheap((set2).toInt) = idx
        }
      }
      idx = idx + BigInt(1)
    }
    var v: BigInt = BigInt(0)
    while (v < n) {
      val idxe: BigInt = cheap((v.toInt).toInt)
      if (idxe != BigInt(0) - BigInt(1)) {
        val e: Edge = edges((idxe.toInt).toInt)
        val fr1: FindRes = uf_find(uf, e.asInstanceOf[Edge].u)
        uf = fr1.asInstanceOf[FindRes].uf
        val set1: BigInt = fr1.asInstanceOf[FindRes].root
        val fr2: FindRes = uf_find(uf, e.asInstanceOf[Edge].v)
        uf = fr2.asInstanceOf[FindRes].uf
        val set2: BigInt = fr2.asInstanceOf[FindRes].root
        if (set1 != set2) {
          mst = mst :+ e
          uf = uf_union(uf, set1, set2)
          num_components = num_components - BigInt(1)
        }
      }
      v = v + BigInt(1)
    }
  }
  return mst
}

def main(): Any = {
  val edges: ArrayBuffer[Edge] = ArrayBuffer(Edge(BigInt(0), BigInt(1), BigInt(1)), Edge(BigInt(0), BigInt(2), BigInt(2)), Edge(BigInt(2), BigInt(3), BigInt(3)))
  val mst: ArrayBuffer[Edge] = boruvka(BigInt(4), edges)
  for (e <- mst) {
    println(String.valueOf(e.asInstanceOf[Edge].u) + " - " + String.valueOf(e.asInstanceOf[Edge].v) + " : " + String.valueOf(e.asInstanceOf[Edge].w))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
