// Generated by Mochi v0.10.66 on 2025-08-15 10:36:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Edge(var u: BigInt, var v: BigInt, var w: BigInt)

case class UF(var parent: ArrayBuffer[BigInt], var rank: ArrayBuffer[BigInt])

case class FindRes(var root: BigInt, var uf: UF)

def uf_make(n: BigInt): UF = {
  var p: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var r: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    p = (p :+ i)
    r = (r :+ BigInt(0))
    i = i + BigInt(1)
  }
  return UF(p, r)
}

def uf_find(uf: UF, x: BigInt): FindRes = {
  var p: ArrayBuffer[BigInt] = uf.asInstanceOf[UF].parent
  if (p.lift((x.toInt).toInt).getOrElse(BigInt(0)) != x) {
    var res: FindRes = uf_find(UF(p, uf.asInstanceOf[UF].rank), p.lift((x.toInt).toInt).getOrElse(BigInt(0)))
    p = res.asInstanceOf[FindRes].uf.asInstanceOf[UF].parent
    p((x).toInt) = res.asInstanceOf[FindRes].root
    return FindRes(res.asInstanceOf[FindRes].root, UF(p, res.asInstanceOf[FindRes].uf.asInstanceOf[UF].rank))
  }
  return FindRes(x, uf)
}

def uf_union(uf: UF, x: BigInt, y: BigInt): UF = {
  var fr1: FindRes = uf_find(uf, x)
  var uf1: UF = fr1.asInstanceOf[FindRes].uf
  var root1: BigInt = fr1.asInstanceOf[FindRes].root
  var fr2: FindRes = uf_find(uf1, y)
  uf1 = fr2.asInstanceOf[FindRes].uf
  var root2: BigInt = fr2.asInstanceOf[FindRes].root
  if (root1 == root2) {
    return uf1
  }
  var p: ArrayBuffer[BigInt] = uf1.asInstanceOf[UF].parent
  var r: ArrayBuffer[BigInt] = uf1.asInstanceOf[UF].rank
  if (r.lift((root1.toInt).toInt).getOrElse(BigInt(0)) > r.lift((root2.toInt).toInt).getOrElse(BigInt(0))) {
    p((root2).toInt) = root1
  } else {
    if (r.lift((root1.toInt).toInt).getOrElse(BigInt(0)) < r.lift((root2.toInt).toInt).getOrElse(BigInt(0))) {
      p((root1).toInt) = root2
    } else {
      p((root2).toInt) = root1
      r((root1).toInt) = r.lift((root1.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
    }
  }
  return UF(p, r)
}

def boruvka(n: BigInt, edges: ArrayBuffer[Edge]): ArrayBuffer[Edge] = {
  var uf: UF = uf_make(n)
  var num_components: BigInt = n
  var mst: ArrayBuffer[Edge] = ArrayBuffer[Edge]()
  while (num_components > BigInt(1)) {
    var cheap: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var i: BigInt = BigInt(0)
    while (i < n) {
      cheap = (cheap :+ BigInt(-1))
      i = i + BigInt(1)
    }
    var idx: BigInt = BigInt(0)
    while (idx < BigInt((edges).size)) {
      var e: Edge = edges.lift((idx.toInt).toInt).getOrElse(null)
      var fr1: FindRes = uf_find(uf, e.asInstanceOf[Edge].u)
      uf = fr1.asInstanceOf[FindRes].uf
      var set1: BigInt = fr1.asInstanceOf[FindRes].root
      var fr2: FindRes = uf_find(uf, e.asInstanceOf[Edge].v)
      uf = fr2.asInstanceOf[FindRes].uf
      var set2: BigInt = fr2.asInstanceOf[FindRes].root
      if (set1 != set2) {
        if ((cheap.lift((set1.toInt).toInt).getOrElse(BigInt(0)) == BigInt(-1) || edges.lift((cheap.lift((set1.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(null).w > e.asInstanceOf[Edge].w)) {
          cheap((set1).toInt) = idx
        }
        if ((cheap.lift((set2.toInt).toInt).getOrElse(BigInt(0)) == BigInt(-1) || edges.lift((cheap.lift((set2.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(null).w > e.asInstanceOf[Edge].w)) {
          cheap((set2).toInt) = idx
        }
      }
      idx = idx + BigInt(1)
    }
    var v: BigInt = BigInt(0)
    while (v < n) {
      var idxe: BigInt = cheap.lift((v.toInt).toInt).getOrElse(BigInt(0))
      if (idxe != BigInt(-1)) {
        var e: Edge = edges.lift((idxe.toInt).toInt).getOrElse(null)
        var fr1: FindRes = uf_find(uf, e.asInstanceOf[Edge].u)
        uf = fr1.asInstanceOf[FindRes].uf
        var set1: BigInt = fr1.asInstanceOf[FindRes].root
        var fr2: FindRes = uf_find(uf, e.asInstanceOf[Edge].v)
        uf = fr2.asInstanceOf[FindRes].uf
        var set2: BigInt = fr2.asInstanceOf[FindRes].root
        if (set1 != set2) {
          mst = (mst :+ e)
          uf = uf_union(uf, set1, set2)
          num_components = num_components - BigInt(1)
        }
      }
      v = v + BigInt(1)
    }
  }
  return mst
}

def main(): Any = {
  var edges: ArrayBuffer[Edge] = ArrayBuffer(Edge(BigInt(0), BigInt(1), BigInt(1)), Edge(BigInt(0), BigInt(2), BigInt(2)), Edge(BigInt(2), BigInt(3), BigInt(3)))
  var mst: ArrayBuffer[Edge] = boruvka(BigInt(4), edges)
  for (e <- mst) {
    println(_str(e.asInstanceOf[Edge].u) + " - " + _str(e.asInstanceOf[Edge].v) + " : " + _str(e.asInstanceOf[Edge].w))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
