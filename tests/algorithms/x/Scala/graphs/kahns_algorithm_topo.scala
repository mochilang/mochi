// Generated by Mochi v0.10.59 on 2025-08-07 11:24:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def topological_sort(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var indegree: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph).size)) {
    indegree = indegree :+ BigInt(0)
    i = i + BigInt(1)
  }
  for (edges <- graph.values.toList) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((edges).size)) {
      val v: BigInt = edges((j.toInt).toInt)
      indegree((v).toInt) = indegree((v.toInt).toInt) + BigInt(1)
      j = j + BigInt(1)
    }
  }
  var queue: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((indegree).size)) {
    if (indegree((i.toInt).toInt) == BigInt(0)) {
      queue = queue :+ i
    }
    i = i + BigInt(1)
  }
  var order: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var head: BigInt = BigInt(0)
  var processed: BigInt = BigInt(0)
  while (head < BigInt((queue).size)) {
    val v: BigInt = queue((head.toInt).toInt)
    head = head + BigInt(1)
    processed = processed + BigInt(1)
    order = order :+ v
    val neighbors: ArrayBuffer[BigInt] = graph.getOrElse(v, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    var k: BigInt = BigInt(0)
    while (k < BigInt((neighbors).size)) {
      val nb: BigInt = neighbors((k.toInt).toInt)
      indegree((nb).toInt) = indegree((nb.toInt).toInt) - BigInt(1)
      if (indegree((nb.toInt).toInt) == BigInt(0)) {
        queue = queue :+ nb
      }
      k = k + BigInt(1)
    }
  }
  if (processed != BigInt((graph).size)) {
    return null.asInstanceOf[ArrayBuffer[BigInt]]
  }
  return order
}

def main(): Any = {
  val graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(2))), BigInt(1) -> (ArrayBuffer(BigInt(3))), BigInt(2) -> (ArrayBuffer(BigInt(3))), BigInt(3) -> (ArrayBuffer(BigInt(4), BigInt(5))), BigInt(4) -> (ArrayBuffer()), BigInt(5) -> (ArrayBuffer()))
  println(topological_sort(graph))
  val cyclic: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1))), BigInt(1) -> (ArrayBuffer(BigInt(2))), BigInt(2) -> (ArrayBuffer(BigInt(0))))
  println(topological_sort(cyclic))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
