// Generated by Mochi v0.10.66 on 2025-08-15 10:35:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def remove_value(lst: ArrayBuffer[BigInt], `val`: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (lst.lift((i.toInt).toInt).getOrElse(BigInt(0)) != `val`) {
      res = (res :+ lst.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    }
    i = i + BigInt(1)
  }
  return res
}

def greedy_min_vertex_cover(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var g: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = graph
  var cover: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  val _br1 = new Breaks
  _br1.breakable {
    while (true) {
      var max_v: BigInt = BigInt(0)
      var max_deg: BigInt = BigInt(0)
      for (v <- g.keys) {
        var key: BigInt = BigInt(v.toString.toDouble.toInt)
        var deg: BigInt = BigInt((g.getOrElse(key, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]).size)
        if (deg > max_deg) {
          max_deg = deg
          max_v = key
        }
      }
      if (max_deg == BigInt(0)) {
        _br1.break()
      }
      cover = (cover :+ max_v)
      var neighbors: ArrayBuffer[BigInt] = g.getOrElse(max_v, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
      var i: BigInt = BigInt(0)
      while (i < BigInt((neighbors).size)) {
        var n: BigInt = neighbors.lift((i.toInt).toInt).getOrElse(BigInt(0))
        g.update(n, remove_value(g.getOrElse(n, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]], max_v))
        i = i + BigInt(1)
      }
      g.update(max_v, ArrayBuffer())
    }
  }
  return cover
}

var graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(3))), BigInt(1) -> (ArrayBuffer(BigInt(0), BigInt(3))), BigInt(2) -> (ArrayBuffer(BigInt(0), BigInt(3), BigInt(4))), BigInt(3) -> (ArrayBuffer(BigInt(0), BigInt(1), BigInt(2))), BigInt(4) -> (ArrayBuffer(BigInt(2), BigInt(3))))).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(greedy_min_vertex_cover(graph))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
