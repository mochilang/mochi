// Generated by Mochi v0.10.66 on 2025-08-15 10:35:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class LanczosResult(var t: ArrayBuffer[ArrayBuffer[Double]], var q: ArrayBuffer[ArrayBuffer[Double]])

case class EigenResult(var values: ArrayBuffer[Double], var vectors: ArrayBuffer[ArrayBuffer[Double]])

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def random(): Double = {
  return 1.0 * (rand()).toString.toDouble / 2147483648.0
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def absf(x: Double): Double = {
  return (if (x < 0.0) -x else x)
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var s: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    s = s + a.lift((i.toInt).toInt).getOrElse(0.0) * b.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return s
}

def vector_scale(v: ArrayBuffer[Double], s: Double): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((v).size)) {
    res = (res :+ v.lift((i.toInt).toInt).getOrElse(0.0) * s)
    i = i + BigInt(1)
  }
  return res
}

def vector_sub(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    res = (res :+ a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return res
}

def vector_add(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    res = (res :+ a.lift((i.toInt).toInt).getOrElse(0.0) + b.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return res
}

def zeros_matrix(r: BigInt, c: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var m: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < r) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < c) {
      row = (row :+ 0.0)
      j = j + BigInt(1)
    }
    m = (m :+ row)
    i = i + BigInt(1)
  }
  return m
}

def column(m: ArrayBuffer[ArrayBuffer[Double]], idx: BigInt): ArrayBuffer[Double] = {
  var col: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((m).size)) {
    col = (col :+ m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((idx.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return col
}

def validate_adjacency_list(graph: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      var v: BigInt = graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
      if ((v < BigInt(0) || v >= BigInt((graph).size))) {
        throw new RuntimeException(String.valueOf("Invalid neighbor"))
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
}

def multiply_matrix_vector(graph: ArrayBuffer[ArrayBuffer[BigInt]], vector: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var n: BigInt = BigInt((graph).size)
  if (BigInt((vector).size) != n) {
    throw new RuntimeException(String.valueOf("Vector length must match number of nodes"))
  }
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var sum: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < BigInt((graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      var nb: BigInt = graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
      sum = sum + vector.lift((nb.toInt).toInt).getOrElse(0.0)
      j = j + BigInt(1)
    }
    result = (result :+ sum)
    i = i + BigInt(1)
  }
  return result
}

def lanczos_iteration(graph: ArrayBuffer[ArrayBuffer[BigInt]], k: BigInt): LanczosResult = {
  var n: BigInt = BigInt((graph).size)
  if ((k < BigInt(1) || k > n)) {
    throw new RuntimeException(String.valueOf("invalid number of eigenvectors"))
  }
  var q: ArrayBuffer[ArrayBuffer[Double]] = zeros_matrix(n, k)
  var t: ArrayBuffer[ArrayBuffer[Double]] = zeros_matrix(k, k)
  var v: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    v = (v :+ random())
    i = i + BigInt(1)
  }
  var ss: Double = 0.0
  i = BigInt(0)
  while (i < n) {
    ss = ss + v.lift((i.toInt).toInt).getOrElse(0.0) * v.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  var vnorm: Double = sqrtApprox(ss)
  i = BigInt(0)
  while (i < n) {
    q((i).toInt)((BigInt(0)).toInt) = v.lift((i.toInt).toInt).getOrElse(0.0) / vnorm
    i = i + BigInt(1)
  }
  var beta: Double = 0.0
  var j: BigInt = BigInt(0)
  while (j < k) {
    var w: ArrayBuffer[Double] = multiply_matrix_vector(graph, column(q, j))
    if (j > BigInt(0)) {
      w = vector_sub(w, vector_scale(column(q, j - BigInt(1)), beta))
    }
    var alpha: Double = dot(column(q, j), w)
    w = vector_sub(w, vector_scale(column(q, j), alpha))
    var ss2: Double = 0.0
    var p: BigInt = BigInt(0)
    while (p < n) {
      ss2 = ss2 + w.lift((p.toInt).toInt).getOrElse(0.0) * w.lift((p.toInt).toInt).getOrElse(0.0)
      p = p + BigInt(1)
    }
    beta = sqrtApprox(ss2)
    t((j).toInt)((j).toInt) = alpha
    if (j < k - BigInt(1)) {
      t((j).toInt)((j + BigInt(1)).toInt) = beta
      t((j + BigInt(1)).toInt)((j).toInt) = beta
      if (beta > 0.0000000001) {
        var wnorm: ArrayBuffer[Double] = vector_scale(w, 1.0 / beta)
        var r: BigInt = BigInt(0)
        while (r < n) {
          q((r).toInt)((j + BigInt(1)).toInt) = wnorm.lift((r.toInt).toInt).getOrElse(0.0)
          r = r + BigInt(1)
        }
      }
    }
    j = j + BigInt(1)
  }
  return LanczosResult(t, q)
}

def jacobi_eigen(a_in: ArrayBuffer[ArrayBuffer[Double]], max_iter: BigInt): EigenResult = {
  var n: BigInt = BigInt((a_in).size)
  var a: ArrayBuffer[ArrayBuffer[Double]] = a_in
  var v: ArrayBuffer[ArrayBuffer[Double]] = zeros_matrix(n, n)
  var i: BigInt = BigInt(0)
  while (i < n) {
    v((i).toInt)((i).toInt) = 1.0
    i = i + BigInt(1)
  }
  var iter: BigInt = BigInt(0)
  val _br19 = new Breaks
  _br19.breakable {
    while (iter < max_iter) {
      var p: BigInt = BigInt(0)
      var q: BigInt = BigInt(1)
      var max: Double = absf(a.lift((p.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((q.toInt).toInt).getOrElse(0.0))
      i = BigInt(0)
      while (i < n) {
        var j: BigInt = i + BigInt(1)
        while (j < n) {
          var `val`: Double = absf(a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
          if (`val` > max) {
            max = `val`
            p = i
            q = j
          }
          j = j + BigInt(1)
        }
        i = i + BigInt(1)
      }
      if (max < 0.00000001) {
        _br19.break()
      }
      var app: Double = a.lift((p.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((p.toInt).toInt).getOrElse(0.0)
      var aqq: Double = a.lift((q.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((q.toInt).toInt).getOrElse(0.0)
      var apq: Double = a.lift((p.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((q.toInt).toInt).getOrElse(0.0)
      var theta: Double = (aqq - app) / (2.0 * apq)
      var t: Double = 1.0 / (absf(theta) + sqrtApprox(theta * theta + 1.0))
      if (theta < 0.0) {
        t = -t
      }
      var c: Double = 1.0 / sqrtApprox(1.0 + t * t)
      var s: Double = t * c
      var tau: Double = s / (1.0 + c)
      a((p).toInt)((p).toInt) = app - t * apq
      a((q).toInt)((q).toInt) = aqq + t * apq
      a((p).toInt)((q).toInt) = 0.0
      a((q).toInt)((p).toInt) = 0.0
      var k: BigInt = BigInt(0)
      while (k < n) {
        if ((k != p && k != q)) {
          var akp: Double = a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((p.toInt).toInt).getOrElse(0.0)
          var akq: Double = a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((q.toInt).toInt).getOrElse(0.0)
          a((k).toInt)((p).toInt) = akp - s * (akq + tau * akp)
          a((p).toInt)((k).toInt) = a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((p.toInt).toInt).getOrElse(0.0)
          a((k).toInt)((q).toInt) = akq + s * (akp - tau * akq)
          a((q).toInt)((k).toInt) = a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((q.toInt).toInt).getOrElse(0.0)
        }
        k = k + BigInt(1)
      }
      k = BigInt(0)
      while (k < n) {
        var vkp: Double = v.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((p.toInt).toInt).getOrElse(0.0)
        var vkq: Double = v.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((q.toInt).toInt).getOrElse(0.0)
        v((k).toInt)((p).toInt) = vkp - s * (vkq + tau * vkp)
        v((k).toInt)((q).toInt) = vkq + s * (vkp - tau * vkq)
        k = k + BigInt(1)
      }
      iter = iter + BigInt(1)
    }
  }
  var eigenvalues: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < n) {
    eigenvalues = (eigenvalues :+ a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return EigenResult(eigenvalues, v)
}

def matmul(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var rows: BigInt = BigInt((a).size)
  var cols: BigInt = BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var inner: BigInt = BigInt((b).size)
  var m: ArrayBuffer[ArrayBuffer[Double]] = zeros_matrix(rows, cols)
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var j: BigInt = BigInt(0)
    while (j < cols) {
      var s: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < inner) {
        s = s + a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) * b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      m((i).toInt)((j).toInt) = s
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return m
}

def sort_eigenpairs(vals: ArrayBuffer[Double], vecs: ArrayBuffer[ArrayBuffer[Double]]): EigenResult = {
  var n: BigInt = BigInt((vals).size)
  var values: ArrayBuffer[Double] = vals
  var vectors: ArrayBuffer[ArrayBuffer[Double]] = vecs
  var i: BigInt = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1)) {
      if (values.lift((j.toInt).toInt).getOrElse(0.0) < values.lift(((j + BigInt(1)).toInt).toInt).getOrElse(0.0)) {
        var tmp: Double = values.lift((j.toInt).toInt).getOrElse(0.0)
        values((j).toInt) = values.lift(((j + BigInt(1)).toInt).toInt).getOrElse(0.0)
        values((j + BigInt(1)).toInt) = tmp
        var r: BigInt = BigInt(0)
        while (r < BigInt((vectors).size)) {
          var tv: Double = vectors.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
          vectors((r).toInt)((j).toInt) = vectors.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift(((j + BigInt(1)).toInt).toInt).getOrElse(0.0)
          vectors((r).toInt)((j + BigInt(1)).toInt) = tv
          r = r + BigInt(1)
        }
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return EigenResult(values, vectors)
}

def find_lanczos_eigenvectors(graph: ArrayBuffer[ArrayBuffer[BigInt]], k: BigInt): EigenResult = {
  validate_adjacency_list(graph)
  var res: LanczosResult = lanczos_iteration(graph, k)
  var eig: EigenResult = jacobi_eigen(res.asInstanceOf[LanczosResult].t, BigInt(50))
  var sorted: EigenResult = sort_eigenpairs(eig.asInstanceOf[EigenResult].values, eig.asInstanceOf[EigenResult].vectors)
  var final_vectors: ArrayBuffer[ArrayBuffer[Double]] = matmul(res.asInstanceOf[LanczosResult].q, sorted.asInstanceOf[EigenResult].vectors)
  return EigenResult(sorted.asInstanceOf[EigenResult].values, final_vectors)
}

def list_to_string(arr: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    s = s + _str(arr.lift((i.toInt).toInt).getOrElse(0.0))
    if (i < BigInt((arr).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  return s + "]"
}

def matrix_to_string(m: ArrayBuffer[ArrayBuffer[Double]]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((m).size)) {
    s = s + list_to_string(m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
    if (i < BigInt((m).size) - BigInt(1)) {
      s = s + "; "
    }
    i = i + BigInt(1)
  }
  return s + "]"
}

var seed: BigInt = BigInt(123456789)

var graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: EigenResult = find_lanczos_eigenvectors(graph, BigInt(2))
    println(list_to_string(result.values))
    println(matrix_to_string(result.vectors))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
