// Generated by Mochi v0.10.66 on 2025-08-15 10:33:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def index_of(xs: ArrayBuffer[BigInt], x: BigInt): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) == x) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def remove_item(xs: ArrayBuffer[BigInt], x: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var removed: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if ((!removed && xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) == x)) {
      removed = true
    } else {
      res = (res :+ xs.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    }
    i = i + BigInt(1)
  }
  return res
}

def stable_matching(donor_pref: ArrayBuffer[ArrayBuffer[BigInt]], recipient_pref: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  if (BigInt((donor_pref).size) != BigInt((recipient_pref).size)) {
    throw new RuntimeException(String.valueOf("unequal groups"))
  }
  var n: BigInt = BigInt((donor_pref).size)
  var unmatched: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    unmatched = (unmatched :+ i)
    i = i + BigInt(1)
  }
  var donor_record: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < n) {
    donor_record = (donor_record :+ BigInt((-BigInt(1)).toString.toDouble.toInt))
    i = i + BigInt(1)
  }
  var rec_record: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < n) {
    rec_record = (rec_record :+ BigInt((-BigInt(1)).toString.toDouble.toInt))
    i = i + BigInt(1)
  }
  var num_donations: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < n) {
    num_donations = (num_donations :+ BigInt(0))
    i = i + BigInt(1)
  }
  while (BigInt((unmatched).size) > BigInt(0)) {
    var donor: BigInt = unmatched.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    var donor_preference: ArrayBuffer[BigInt] = donor_pref.lift((donor.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var recipient: BigInt = donor_preference.lift((num_donations.lift((donor.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(BigInt(0))
    num_donations((donor).toInt) = num_donations.lift((donor.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
    var rec_preference: ArrayBuffer[BigInt] = recipient_pref.lift((recipient.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var prev_donor: BigInt = rec_record.lift((recipient.toInt).toInt).getOrElse(BigInt(0))
    if (prev_donor != BigInt(-1)) {
      var prev_index: BigInt = index_of(rec_preference, prev_donor)
      var new_index: BigInt = index_of(rec_preference, donor)
      if (prev_index > new_index) {
        rec_record((recipient).toInt) = donor
        donor_record((donor).toInt) = recipient
        unmatched = (unmatched :+ prev_donor)
        unmatched = remove_item(unmatched, donor)
      }
    } else {
      rec_record((recipient).toInt) = donor
      donor_record((donor).toInt) = recipient
      unmatched = remove_item(unmatched, donor)
    }
  }
  return donor_record
}

var donor_pref: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(3), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(2), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(0), BigInt(3), BigInt(1), BigInt(2)))

var recipient_pref: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(3), BigInt(1), BigInt(2), BigInt(0)), ArrayBuffer(BigInt(3), BigInt(1), BigInt(0), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(3), BigInt(1), BigInt(2)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(3), BigInt(2)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(stable_matching(donor_pref, recipient_pref)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
