// Generated by Mochi v0.10.59 on 2025-08-07 11:24:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def fill_row(current_row: ArrayBuffer[BigInt], row_above: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  current_row((BigInt(0)).toInt) = current_row((BigInt(0).toInt).toInt) + row_above((BigInt(0).toInt).toInt)
  var cell_n: BigInt = BigInt(1)
  while (cell_n < BigInt((current_row).size)) {
    val left: BigInt = current_row(((cell_n - BigInt(1)).toInt).toInt)
    val up: BigInt = row_above((cell_n.toInt).toInt)
    if (left < up) {
      current_row((cell_n).toInt) = current_row((cell_n.toInt).toInt) + left
    } else {
      current_row((cell_n).toInt) = current_row((cell_n.toInt).toInt) + up
    }
    cell_n = cell_n + BigInt(1)
  }
  return current_row
}

def min_path_sum(grid: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  if ((BigInt((grid).size) == BigInt(0) || BigInt((grid((BigInt(0).toInt).toInt)).size) == BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("The grid does not contain the appropriate information"))
  }
  var cell_n: BigInt = BigInt(1)
  while (cell_n < BigInt((grid((BigInt(0).toInt).toInt)).size)) {
    grid((BigInt(0)).toInt)((cell_n).toInt) = grid((BigInt(0).toInt).toInt)((cell_n.toInt).toInt) + grid((BigInt(0).toInt).toInt)(((cell_n - BigInt(1)).toInt).toInt)
    cell_n = cell_n + BigInt(1)
  }
  var row_above: ArrayBuffer[BigInt] = grid((BigInt(0).toInt).toInt)
  var row_n: BigInt = BigInt(1)
  while (row_n < BigInt((grid).size)) {
    val current_row: ArrayBuffer[BigInt] = grid((row_n.toInt).toInt)
    grid((row_n).toInt) = fill_row(current_row, row_above)
    row_above = grid((row_n.toInt).toInt)
    row_n = row_n + BigInt(1)
  }
  return grid(((BigInt((grid).size) - BigInt(1)).toInt).toInt)(((BigInt((grid((BigInt(0).toInt).toInt)).size) - BigInt(1)).toInt).toInt)
}

val grid1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(5), BigInt(1)), ArrayBuffer(BigInt(4), BigInt(2), BigInt(1)))

val grid2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(0), BigInt(5), BigInt(6), BigInt(7)), ArrayBuffer(BigInt(8), BigInt(9), BigInt(0), BigInt(4), BigInt(2)), ArrayBuffer(BigInt(4), BigInt(4), BigInt(4), BigInt(5), BigInt(1)), ArrayBuffer(BigInt(9), BigInt(6), BigInt(3), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(8), BigInt(4), BigInt(3), BigInt(2), BigInt(7)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(min_path_sum(grid1)))
    println(String.valueOf(min_path_sum(grid2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
