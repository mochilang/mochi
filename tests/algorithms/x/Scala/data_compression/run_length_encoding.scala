// Generated by Mochi v0.10.59 on 2025-08-06 22:18:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def run_length_encode(text: String): String = {
  if (BigInt((text).size) == 0) {
    return ""
  }
  var encoded: String = ""
  var count: BigInt = 1
  var i: BigInt = 0
  while (i < BigInt((text).size)) {
    if ((i + 1 < BigInt((text).size) && text.slice((i.toInt).toInt, (i.toInt).toInt + 1) == text.slice(((i + 1).toInt).toInt, ((i + 1).toInt).toInt + 1)).asInstanceOf[Boolean]) {
      count = count + 1
    } else {
      encoded = encoded + text.slice((i.toInt).toInt, (i.toInt).toInt + 1) + String.valueOf(count)
      count = 1
    }
    i = i + 1
  }
  return encoded
}

def run_length_decode(encoded: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((encoded).size)) {
    val ch = encoded.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i + 1
    var num_str: String = ""
    while ((i < BigInt((encoded).size) && (encoded.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString.charAt(0) >= '0').asInstanceOf[Boolean] && (encoded.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString.charAt(0) <= '9') {
      num_str = num_str + encoded.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      i = i + 1
    }
    val count: BigInt = num_str.toInt
    var j: BigInt = 0
    while (j < count) {
      res = res + ch
      j = j + 1
    }
  }
  return res
}

val example1: String = "AAAABBBCCDAA"

val encoded1: String = run_length_encode(example1)

val example2: String = "A"

val encoded2: String = run_length_encode(example2)

val example3: String = "AAADDDDDDFFFCCCAAVVVV"

val encoded3: String = run_length_encode(example3)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encoded1)
    println(run_length_decode(encoded1))
    println(encoded2)
    println(run_length_decode(encoded2))
    println(encoded3)
    println(run_length_decode(encoded3))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
