// Generated by Mochi v0.10.71 on 2025-08-24 15:50:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

sealed trait Huffman
case class Leaf(var symbol: String, var freq: BigInt) extends Huffman
case class Node(var freq: BigInt, var left: Huffman, var right: Huffman) extends Huffman


def get_freq(n: Huffman): BigInt = {
  return BigInt((n match { case Leaf(_, f) => f case Node(f, _, _) => f }).toString.toDouble.toInt)
}

def sort_nodes(nodes: ArrayBuffer[Huffman]): ArrayBuffer[Huffman] = {
  var arr: ArrayBuffer[Huffman] = nodes
  var i: BigInt = BigInt(1)
  while (i < BigInt((arr).size)) {
    var key: Huffman = arr.lift((i.toInt).toInt).getOrElse(null)
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && get_freq(arr.lift((j.toInt).toInt).getOrElse(null)) > get_freq(key)) {
      arr((j + BigInt(1)).toInt) = arr.lift((j.toInt).toInt).getOrElse(null)
      j = j - BigInt(1)
    }
    arr((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return arr
}

def rest(nodes: ArrayBuffer[Huffman]): ArrayBuffer[Huffman] = {
  var res: ArrayBuffer[Huffman] = ArrayBuffer[Huffman]()
  var i: BigInt = BigInt(1)
  while (i < BigInt((nodes).size)) {
    res = (res :+ (nodes.lift((i.toInt).toInt).getOrElse(null)))
    i = i + BigInt(1)
  }
  return res
}

def count_freq(text: String): ArrayBuffer[Huffman] = {
  var chars: ArrayBuffer[String] = ArrayBuffer[String]()
  var freqs: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  val _br3 = new Breaks
  _br3.breakable {
    while (i < BigInt((text).size)) {
      var c: String = text.slice((i).toInt, (i + BigInt(1)).toInt)
      var j: BigInt = BigInt(0)
      var found: Boolean = false
      val _br4 = new Breaks
      _br4.breakable {
        while (j < BigInt((chars).size)) {
          if (chars.lift((j.toInt).toInt).getOrElse("") == c) {
            freqs((j).toInt) = freqs.lift((j.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
            found = true
            _br4.break()
          }
          j = j + BigInt(1)
        }
      }
      if (!found) {
        chars = (chars :+ (c))
        freqs = (freqs :+ (BigInt(1)))
      }
      i = i + BigInt(1)
    }
  }
  var leaves: ArrayBuffer[Huffman] = ArrayBuffer[Huffman]()
  var k: BigInt = BigInt(0)
  while (k < BigInt((chars).size)) {
    leaves = (leaves :+ ((Leaf(chars.lift((k.toInt).toInt).getOrElse(""), freqs.lift((k.toInt).toInt).getOrElse(BigInt(0)))).asInstanceOf[Huffman]))
    k = k + BigInt(1)
  }
  return sort_nodes(leaves)
}

def build_tree(nodes: ArrayBuffer[Huffman]): Huffman = {
  var arr: ArrayBuffer[Huffman] = nodes
  while (BigInt((arr).size) > BigInt(1)) {
    var left: Huffman = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
    arr = rest(arr)
    var right: Huffman = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
    arr = rest(arr)
    var node: Node = Node(get_freq(left) + get_freq(right), left, right)
    arr = (arr :+ (node.asInstanceOf[Huffman]))
    arr = sort_nodes(arr)
  }
  return arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
}

def concat_pairs(a: ArrayBuffer[ArrayBuffer[String]], b: ArrayBuffer[ArrayBuffer[String]]): ArrayBuffer[ArrayBuffer[String]] = {
  var res: ArrayBuffer[ArrayBuffer[String]] = a
  var i: BigInt = BigInt(0)
  while (i < BigInt((b).size)) {
    res = (res :+ (b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[String]())))
    i = i + BigInt(1)
  }
  return res
}

def collect_codes(tree: Huffman, prefix: String): ArrayBuffer[ArrayBuffer[String]] = {
  return (tree match { case Leaf(s, _) => ArrayBuffer(ArrayBuffer(s, prefix)) case Node(_, l, r) => concat_pairs(collect_codes(l.asInstanceOf[Huffman], prefix + "0"), collect_codes(r.asInstanceOf[Huffman], prefix + "1")) }).asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
}

def find_code(pairs: ArrayBuffer[ArrayBuffer[String]], ch: String): String = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((pairs).size)) {
    if (pairs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[String]()).lift((BigInt(0).toInt).toInt).getOrElse("") == ch) {
      return pairs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[String]()).lift((BigInt(1).toInt).toInt).getOrElse("")
    }
    i = i + BigInt(1)
  }
  return ""
}

def huffman_encode(text: String): String = {
  if (text == "") {
    return ""
  }
  var leaves: ArrayBuffer[Huffman] = count_freq(text)
  var tree: Huffman = build_tree(leaves)
  var codes: ArrayBuffer[ArrayBuffer[String]] = collect_codes(tree, "")
  var encoded: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((text).size)) {
    var c: String = text.slice((i).toInt, (i + BigInt(1)).toInt)
    encoded = encoded + find_code(codes, c) + " "
    i = i + BigInt(1)
  }
  return encoded
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(huffman_encode("beep boop beer!")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
