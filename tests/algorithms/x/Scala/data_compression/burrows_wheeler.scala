// Generated by Mochi v0.10.59 on 2025-08-06 22:31:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class BWTResult(var bwt_string: String, var idx_original_string: BigInt)

def all_rotations(s: String): ArrayBuffer[String] = {
  val n: BigInt = BigInt((s).length)
  var rotations: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    val rotation: String = s.slice((i).toInt, (n).toInt) + s.slice((0).toInt, (i).toInt)
    rotations = rotations :+ rotation
    i = i + 1
  }
  return rotations
}

def sort_strings(arr: ArrayBuffer[String]): ArrayBuffer[String] = {
  val n: BigInt = BigInt((arr).size)
  var i: BigInt = 1
  while (i < n) {
    var key: String = arr((i.toInt).toInt)
    var j: BigInt = i - 1
    while (j >= 0 && arr((j.toInt).toInt) > key) {
      arr((j + 1).toInt) = arr((j.toInt).toInt)
      j = j - 1
    }
    arr((j + 1).toInt) = key
    i = i + 1
  }
  return arr
}

def join_strings(arr: ArrayBuffer[String]): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    res = res + arr((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def bwt_transform(s: String): BWTResult = {
  if (s == "") {
    throw new RuntimeException(String.valueOf("input string must not be empty"))
  }
  var rotations: ArrayBuffer[String] = all_rotations(s)
  rotations = sort_strings(rotations)
  var last_col: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((rotations).size)) {
    val word: String = rotations((i.toInt).toInt)
    last_col = last_col :+ word.slice((BigInt((word).size) - 1).toInt, (BigInt((word).size)).toInt)
    i = i + 1
  }
  val bwt_string: String = join_strings(last_col)
  val idx: BigInt = index_of(rotations, s)
  return BWTResult(bwt_string, idx)
}

def index_of(arr: ArrayBuffer[String], target: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    if (arr((i.toInt).toInt) == target) {
      return i
    }
    i = i + 1
  }
  return -1
}

def reverse_bwt(bwt_string: String, idx_original_string: BigInt): String = {
  if (bwt_string == "") {
    throw new RuntimeException(String.valueOf("bwt string must not be empty"))
  }
  val n: BigInt = BigInt((bwt_string).size)
  if ((idx_original_string < 0 || idx_original_string >= n).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  var ordered_rotations: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    ordered_rotations = ordered_rotations :+ ""
    i = i + 1
  }
  var iter: BigInt = 0
  while (iter < n) {
    var j: BigInt = 0
    while (j < n) {
      val ch: String = bwt_string.slice((j).toInt, (j + 1).toInt)
      ordered_rotations((j).toInt) = ch + ordered_rotations((j.toInt).toInt)
      j = j + 1
    }
    ordered_rotations = sort_strings(ordered_rotations)
    iter = iter + 1
  }
  return ordered_rotations((idx_original_string.toInt).toInt)
}

val s: String = "^BANANA"

val result: BWTResult = bwt_transform(s)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(result.bwt_string)
    println(result.idx_original_string)
    println(reverse_bwt(result.bwt_string, result.idx_original_string))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
