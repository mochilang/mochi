// Generated by Mochi v0.10.59 on 2025-08-06 22:18:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_binary(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  var num: BigInt = n
  var res: String = ""
  while (num > 0) {
    val bit: BigInt = num % 2
    res = String.valueOf(bit) + res
    num = num / 2
  }
  return res
}

def contains_key_int(m: scala.collection.mutable.Map[String,BigInt], key: String): Boolean = {
  for (k <- m.keys.toSeq.sorted) {
    if (k == key) {
      return true
    }
  }
  return false
}

def lzw_compress(bits: String): String = {
  var dict: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var current: String = ""
  var result: String = ""
  var index: BigInt = 2
  var i: BigInt = 0
  while (i < BigInt((bits).size)) {
    val ch = bits.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val candidate: String = current + ch
    if (contains_key_int(dict, candidate)) {
      current = candidate
    } else {
      result = result + to_binary(dict.getOrElse(current.toString, null).asInstanceOf[BigInt])
      dict.update(candidate, index)
      index = index + 1
      current = ch
    }
    i = i + 1
  }
  if (current != "") {
    result = result + to_binary(dict.getOrElse(current.toString, null).asInstanceOf[BigInt])
  }
  return result
}

val data: String = "01001100100111"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(lzw_compress(data))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
