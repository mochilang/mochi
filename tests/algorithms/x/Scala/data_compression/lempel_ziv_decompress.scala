// Generated by Mochi v0.10.59 on 2025-08-06 22:18:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def list_contains(xs: ArrayBuffer[String], v: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == v) {
      return true
    }
    i = i + 1
  }
  return false
}

def is_power_of_two(n: BigInt): Boolean = {
  if (n < 1) {
    return false
  }
  var x: BigInt = n
  while (x > 1) {
    if (x % 2 != 0) {
      return false
    }
    x = x / 2
  }
  return true
}

def bin_string(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  var res: String = ""
  var x: BigInt = n
  while (x > 0) {
    val bit: BigInt = x % 2
    res = String.valueOf(bit) + res
    x = x / 2
  }
  return res
}

def decompress_data(data_bits: String): String = {
  var lexicon: scala.collection.mutable.Map[String,String] = (scala.collection.mutable.Map("0" -> ("0"), "1" -> ("1"))).asInstanceOf[scala.collection.mutable.Map[String,String]]
  var keys: ArrayBuffer[String] = ArrayBuffer("0", "1")
  var result: String = ""
  var curr_string: String = ""
  var index: BigInt = 2
  var i: BigInt = 0
  val _ct3 = new Breaks
  while (i < BigInt((data_bits).size)) {
    _ct3.breakable {
      curr_string = curr_string + data_bits.slice((i).toInt, (i + 1).toInt)
      if (!list_contains(keys, curr_string)) {
        i = i + 1
        _ct3.break()
      }
      val last_match_id: String = lexicon.getOrElse(curr_string.toString, "").asInstanceOf[String]
      result = result + last_match_id
      lexicon.update(curr_string, last_match_id + "0")
      if (is_power_of_two(index)) {
        var new_lex: scala.collection.mutable.Map[String,String] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,String]]
        var new_keys: ArrayBuffer[String] = ArrayBuffer()
        var j: BigInt = 0
        while (j < BigInt((keys).size)) {
          val curr_key: String = keys((j.toInt).toInt)
          new_lex.update("0" + curr_key, lexicon.getOrElse(curr_key.toString, "").asInstanceOf[String])
          new_keys = new_keys :+ "0" + curr_key
          j = j + 1
        }
        lexicon = new_lex
        keys = new_keys
      }
      val new_key: String = bin_string(index)
      lexicon.update(new_key, last_match_id + "1")
      keys = keys :+ new_key
      index = index + 1
      curr_string = ""
      i = i + 1
    }
  }
  return result
}

val sample: String = "1011001"

val decompressed: String = decompress_data(sample)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(decompressed)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
