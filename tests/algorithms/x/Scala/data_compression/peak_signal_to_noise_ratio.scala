// Generated by Mochi v0.10.59 on 2025-08-06 22:18:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = 0
  while (i < 10) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def ln(x: Double): Double = {
  val t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = 1
  while (n <= 19) {
    sum = sum + term / n.toString.toDouble
    term = term * t * t
    n = n + 2
  }
  return 2.0 * sum
}

def log10(x: Double): Double = {
  return ln(x) / ln(10.0)
}

def peak_signal_to_noise_ratio(original: ArrayBuffer[ArrayBuffer[BigInt]], contrast: ArrayBuffer[ArrayBuffer[BigInt]]): Double = {
  var mse: Double = 0.0
  var i: BigInt = 0
  while (i < BigInt((original).size)) {
    var j: BigInt = 0
    while (j < BigInt((original((i.toInt).toInt)).size)) {
      val diff: Double = (original((i.toInt).toInt)((j.toInt).toInt) - contrast((i.toInt).toInt)((j.toInt).toInt)).toString.toDouble
      mse = mse + diff * diff
      j = j + 1
    }
    i = i + 1
  }
  val size: Double = (BigInt((original).size) * BigInt((original((0.toInt).toInt)).size)).toString.toDouble
  mse = mse / size
  if (mse == 0.0) {
    return 100.0
  }
  val PIXEL_MAX: Double = 255.0
  return 20.0 * log10(PIXEL_MAX / sqrtApprox(mse))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
