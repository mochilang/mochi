// Generated by Mochi v0.10.64 on 2025-08-12 09:35:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

sealed trait Item
case class Int_(var value: BigInt) extends Item
case class Str(var value: String) extends Item


def from_int(x: BigInt): Item = {
  return (Int_(x)).asInstanceOf[Item]
}

def from_string(s: String): Item = {
  return (Str(s)).asInstanceOf[Item]
}

def item_to_string(it: Item): String = {
  return (it match { case Int_(v) => _str(v) case Str(s) => s }).toString
}

def alternative_list_arrange(first: ArrayBuffer[Item], second: ArrayBuffer[Item]): ArrayBuffer[Item] = {
  val len1: BigInt = BigInt((first).size)
  val len2: BigInt = BigInt((second).size)
  val abs_len: BigInt = (if (len1 > len2) len1 else len2)
  var result: ArrayBuffer[Item] = ArrayBuffer[Item]()
  var i: BigInt = BigInt(0)
  while (i < abs_len) {
    if (i < len1) {
      result = result :+ (first.lift((i.toInt).toInt).getOrElse(null))
    }
    if (i < len2) {
      result = result :+ (second.lift((i.toInt).toInt).getOrElse(null))
    }
    i = i + BigInt(1)
  }
  return result
}

def list_to_string(xs: ArrayBuffer[Item]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    s = s + item_to_string(xs.lift((i.toInt).toInt).getOrElse(null))
    if (i < BigInt((xs).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

val example1: ArrayBuffer[Any] = alternative_list_arrange(ArrayBuffer((from_int(BigInt(1))).asInstanceOf[Item], (from_int(BigInt(2))).asInstanceOf[Item], (from_int(BigInt(3))).asInstanceOf[Item], (from_int(BigInt(4))).asInstanceOf[Item], (from_int(BigInt(5))).asInstanceOf[Item]), ArrayBuffer((from_string("A")).asInstanceOf[Item], (from_string("B")).asInstanceOf[Item], (from_string("C")).asInstanceOf[Item]))

val example2: ArrayBuffer[Any] = alternative_list_arrange(ArrayBuffer((from_string("A")).asInstanceOf[Item], (from_string("B")).asInstanceOf[Item], (from_string("C")).asInstanceOf[Item]), ArrayBuffer((from_int(BigInt(1))).asInstanceOf[Item], (from_int(BigInt(2))).asInstanceOf[Item], (from_int(BigInt(3))).asInstanceOf[Item], (from_int(BigInt(4))).asInstanceOf[Item], (from_int(BigInt(5))).asInstanceOf[Item]))

val example3: ArrayBuffer[Any] = alternative_list_arrange(ArrayBuffer((from_string("X")).asInstanceOf[Item], (from_string("Y")).asInstanceOf[Item], (from_string("Z")).asInstanceOf[Item]), ArrayBuffer((from_int(BigInt(9))).asInstanceOf[Item], (from_int(BigInt(8))).asInstanceOf[Item], (from_int(BigInt(7))).asInstanceOf[Item], (from_int(BigInt(6))).asInstanceOf[Item]))

val example4: ArrayBuffer[Any] = alternative_list_arrange(ArrayBuffer((from_int(BigInt(1))).asInstanceOf[Item], (from_int(BigInt(2))).asInstanceOf[Item], (from_int(BigInt(3))).asInstanceOf[Item], (from_int(BigInt(4))).asInstanceOf[Item], (from_int(BigInt(5))).asInstanceOf[Item]), (ArrayBuffer[Item]()).asInstanceOf[ArrayBuffer[Item]])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(list_to_string(example1.asInstanceOf[ArrayBuffer[Item]]))
    println(list_to_string(example2.asInstanceOf[ArrayBuffer[Item]]))
    println(list_to_string(example3.asInstanceOf[ArrayBuffer[Item]]))
    println(list_to_string(example4.asInstanceOf[ArrayBuffer[Item]]))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
