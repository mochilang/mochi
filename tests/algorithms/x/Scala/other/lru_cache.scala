// Generated by Mochi v0.10.61 on 2025-08-08 17:21:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Node(var key: BigInt, var value: BigInt, var prev: BigInt, var next: BigInt)

case class DoubleLinkedList(var nodes: ArrayBuffer[Node], var head: BigInt, var tail: BigInt)

case class LRUCache(var list: DoubleLinkedList, var capacity: BigInt, var num_keys: BigInt, var hits: BigInt, var misses: BigInt, var cache: scala.collection.mutable.Map[String,BigInt])

case class GetResult(var cache: LRUCache, var value: BigInt, var ok: Boolean)

def new_list(): DoubleLinkedList = {
  var nodes: ArrayBuffer[Node] = ArrayBuffer[Node]()
  val head: Node = Node(BigInt(0), BigInt(0), BigInt(0) - BigInt(1), BigInt(1))
  val tail: Node = Node(BigInt(0), BigInt(0), BigInt(0), BigInt(0) - BigInt(1))
  nodes = nodes :+ (head)
  nodes = nodes :+ (tail)
  return DoubleLinkedList(nodes, BigInt(0), BigInt(1))
}

def dll_add(lst: DoubleLinkedList, idx: BigInt): DoubleLinkedList = {
  var nodes: ArrayBuffer[Node] = lst.asInstanceOf[DoubleLinkedList].nodes
  val tail_idx: BigInt = lst.asInstanceOf[DoubleLinkedList].tail
  var tail_node: Node = nodes((tail_idx.toInt).toInt)
  val prev_idx: BigInt = tail_node.asInstanceOf[Node].prev
  var node: Node = nodes((idx.toInt).toInt)
  node.asInstanceOf[Node].prev = prev_idx
  node.asInstanceOf[Node].next = tail_idx
  nodes((idx).toInt) = node
  var prev_node: Node = nodes((prev_idx.toInt).toInt)
  prev_node.asInstanceOf[Node].next = idx
  nodes((prev_idx).toInt) = prev_node
  tail_node.asInstanceOf[Node].prev = idx
  nodes((tail_idx).toInt) = tail_node
  lst.asInstanceOf[DoubleLinkedList].nodes = nodes
  return lst
}

def dll_remove(lst: DoubleLinkedList, idx: BigInt): DoubleLinkedList = {
  var nodes: ArrayBuffer[Node] = lst.asInstanceOf[DoubleLinkedList].nodes
  var node: Node = nodes((idx.toInt).toInt)
  val prev_idx: BigInt = node.asInstanceOf[Node].prev
  val next_idx: BigInt = node.asInstanceOf[Node].next
  if ((prev_idx == BigInt(0) - BigInt(1) || next_idx == BigInt(0) - BigInt(1)).asInstanceOf[Boolean]) {
    return lst
  }
  var prev_node: Node = nodes((prev_idx.toInt).toInt)
  prev_node.asInstanceOf[Node].next = next_idx
  nodes((prev_idx).toInt) = prev_node
  var next_node: Node = nodes((next_idx.toInt).toInt)
  next_node.asInstanceOf[Node].prev = prev_idx
  nodes((next_idx).toInt) = next_node
  node.asInstanceOf[Node].prev = BigInt(0) - BigInt(1)
  node.asInstanceOf[Node].next = BigInt(0) - BigInt(1)
  nodes((idx).toInt) = node
  lst.asInstanceOf[DoubleLinkedList].nodes = nodes
  return lst
}

def new_cache(cap: BigInt): LRUCache = {
  var empty_map: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  return LRUCache(new_list(), cap, BigInt(0), BigInt(0), BigInt(0), empty_map)
}

def lru_get(c: LRUCache, key: BigInt): GetResult = {
  var cache: LRUCache = c
  val key_str = _str(key)
  if ((cache.cache.contains(key_str)).asInstanceOf[Boolean]) {
    val idx: BigInt = cache.cache.getOrElse(key_str.toString, null).asInstanceOf[BigInt]
    if (idx != BigInt(0) - BigInt(1)) {
      cache.asInstanceOf[LRUCache].hits = cache.asInstanceOf[LRUCache].hits + BigInt(1)
      val node: Node = cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes((idx.toInt).toInt)
      val value: BigInt = node.value
      cache.asInstanceOf[LRUCache].list = dll_remove(cache.asInstanceOf[LRUCache].list, idx)
      cache.asInstanceOf[LRUCache].list = dll_add(cache.asInstanceOf[LRUCache].list, idx)
      return GetResult(cache, value, true)
    }
  }
  cache.asInstanceOf[LRUCache].misses = cache.asInstanceOf[LRUCache].misses + BigInt(1)
  return GetResult(cache, BigInt(0), false)
}

def lru_put(c: LRUCache, key: BigInt, value: BigInt): LRUCache = {
  var cache: LRUCache = c
  val key_str = _str(key)
  if (!(cache.cache.contains(key_str)).asInstanceOf[Boolean]) {
    if (cache.asInstanceOf[LRUCache].num_keys >= cache.asInstanceOf[LRUCache].capacity) {
      val head_node: Node = cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes((cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].head.toInt).toInt)
      val first_idx: BigInt = head_node.asInstanceOf[Node].next
      val first_node: Node = cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes((first_idx.toInt).toInt)
      val old_key: BigInt = first_node.asInstanceOf[Node].key
      cache.asInstanceOf[LRUCache].list = dll_remove(cache.asInstanceOf[LRUCache].list, first_idx)
      var mdel: scala.collection.mutable.Map[String,BigInt] = cache.cache
      mdel.update(_str(old_key), BigInt(0) - BigInt(1))
      cache.cache = mdel
      cache.asInstanceOf[LRUCache].num_keys = cache.asInstanceOf[LRUCache].num_keys - BigInt(1)
    }
    var nodes: ArrayBuffer[Node] = cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes
    val new_node: Node = Node(key, value, BigInt(0) - BigInt(1), BigInt(0) - BigInt(1))
    nodes = nodes :+ (new_node)
    val idx: BigInt = BigInt((nodes).size) - BigInt(1)
    cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes = nodes
    cache.asInstanceOf[LRUCache].list = dll_add(cache.asInstanceOf[LRUCache].list, idx)
    var m: scala.collection.mutable.Map[String,BigInt] = cache.cache
    m.update(key_str, idx)
    cache.cache = m
    cache.asInstanceOf[LRUCache].num_keys = cache.asInstanceOf[LRUCache].num_keys + BigInt(1)
  } else {
    var m: scala.collection.mutable.Map[String,BigInt] = cache.cache
    val idx: BigInt = m.getOrElse(key_str.toString, null).asInstanceOf[BigInt]
    var nodes: ArrayBuffer[Node] = cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes
    var node: Node = nodes((idx.toInt).toInt)
    node.value = value
    nodes((idx).toInt) = node
    cache.asInstanceOf[LRUCache].list.asInstanceOf[DoubleLinkedList].nodes = nodes
    cache.asInstanceOf[LRUCache].list = dll_remove(cache.asInstanceOf[LRUCache].list, idx)
    cache.asInstanceOf[LRUCache].list = dll_add(cache.asInstanceOf[LRUCache].list, idx)
    cache.cache = m
  }
  return cache
}

def cache_info(cache: LRUCache): String = {
  return "CacheInfo(hits=" + _str(cache.asInstanceOf[LRUCache].hits) + ", misses=" + _str(cache.asInstanceOf[LRUCache].misses) + ", capacity=" + _str(cache.asInstanceOf[LRUCache].capacity) + ", current size=" + _str(cache.asInstanceOf[LRUCache].num_keys) + ")"
}

def print_result(res: GetResult): Any = {
  if (res.asInstanceOf[GetResult].ok) {
    println(_str(res.value))
  } else {
    println("None")
  }
}

def main(): Any = {
  var cache: LRUCache = new_cache(BigInt(2))
  cache = lru_put(cache, BigInt(1), BigInt(1))
  cache = lru_put(cache, BigInt(2), BigInt(2))
  var r1: GetResult = lru_get(cache, BigInt(1))
  cache = r1.cache
  print_result(r1)
  cache = lru_put(cache, BigInt(3), BigInt(3))
  var r2: GetResult = lru_get(cache, BigInt(2))
  cache = r2.cache
  print_result(r2)
  cache = lru_put(cache, BigInt(4), BigInt(4))
  var r3: GetResult = lru_get(cache, BigInt(1))
  cache = r3.cache
  print_result(r3)
  var r4: GetResult = lru_get(cache, BigInt(3))
  cache = r4.cache
  print_result(r4)
  var r5: GetResult = lru_get(cache, BigInt(4))
  cache = r5.cache
  print_result(r5)
  println(cache_info(cache))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
