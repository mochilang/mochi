// Generated by Mochi v0.10.61 on 2025-08-08 17:21:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def index_of(xs: ArrayBuffer[BigInt], x: BigInt): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt(0) - BigInt(1)
}

def majority_vote(votes: ArrayBuffer[BigInt], votes_needed_to_win: BigInt): ArrayBuffer[BigInt] = {
  if (votes_needed_to_win < BigInt(2)) {
    return ArrayBuffer[BigInt]()
  }
  var candidates: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((votes).size)) {
    val v: BigInt = votes((i.toInt).toInt)
    val idx: BigInt = index_of(candidates, v)
    if (idx != BigInt(0) - BigInt(1)) {
      counts((idx).toInt) = counts((idx.toInt).toInt) + BigInt(1)
    } else {
      if (BigInt((candidates).size) < votes_needed_to_win - BigInt(1)) {
        candidates = candidates :+ (v)
        counts = counts :+ (BigInt(1))
      } else {
        var j: BigInt = BigInt(0)
        while (j < BigInt((counts).size)) {
          counts((j).toInt) = counts((j.toInt).toInt) - BigInt(1)
          j = j + BigInt(1)
        }
        var new_candidates: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
        var new_counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
        j = BigInt(0)
        while (j < BigInt((candidates).size)) {
          if (counts((j.toInt).toInt) > BigInt(0)) {
            new_candidates = new_candidates :+ (candidates((j.toInt).toInt))
            new_counts = new_counts :+ (counts((j.toInt).toInt))
          }
          j = j + BigInt(1)
        }
        candidates = new_candidates
        counts = new_counts
      }
    }
    i = i + BigInt(1)
  }
  var final_counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((candidates).size)) {
    final_counts = final_counts :+ (BigInt(0))
    j = j + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((votes).size)) {
    val v: BigInt = votes((i.toInt).toInt)
    val idx: BigInt = index_of(candidates, v)
    if (idx != BigInt(0) - BigInt(1)) {
      final_counts((idx).toInt) = final_counts((idx.toInt).toInt) + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  j = BigInt(0)
  while (j < BigInt((candidates).size)) {
    if (final_counts((j.toInt).toInt) * votes_needed_to_win > BigInt((votes).size)) {
      result = result :+ (candidates((j.toInt).toInt))
    }
    j = j + BigInt(1)
  }
  return result
}

def main(): Any = {
  val votes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(2), BigInt(3), BigInt(1), BigInt(3), BigInt(2))
  println(_str(majority_vote(votes, BigInt(3))))
  println(_str(majority_vote(votes, BigInt(2))))
  println(_str(majority_vote(votes, BigInt(4))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
