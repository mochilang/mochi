// Generated by Mochi v0.10.64 on 2025-08-12 14:34:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Clause(var literals: scala.collection.mutable.Map[String,BigInt], var names: ArrayBuffer[String])

case class EvalResult(var value: BigInt, var clause: Clause)

case class Formula(var clauses: ArrayBuffer[Clause])

case class DPLLResult(var sat: Boolean, var model: scala.collection.mutable.Map[String,BigInt])

def new_clause(lits: ArrayBuffer[String]): Clause = {
  var m: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var names: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((lits).size)) {
    val lit: String = lits.lift((i.toInt).toInt).getOrElse("")
    m.update(lit, BigInt(-1))
    names = names :+ (lit)
    i = i + BigInt(1)
  }
  return Clause(m, names)
}

def assign_clause(c: Clause, model: scala.collection.mutable.Map[String,BigInt]): Clause = {
  var lits: scala.collection.mutable.Map[String,BigInt] = c.asInstanceOf[Clause].literals
  var i: BigInt = BigInt(0)
  while (i < BigInt((c.asInstanceOf[Clause].names).size)) {
    val lit: String = c.asInstanceOf[Clause].names.lift((i.toInt).toInt).getOrElse("")
    val symbol: String = lit.slice((BigInt(0)).toInt, (BigInt(2)).toInt)
    if ((model.contains(symbol)).asInstanceOf[Boolean]) {
      var value: BigInt = model.getOrElse(symbol.toString, BigInt(0)).asInstanceOf[BigInt]
      if ((lit.slice((BigInt((lit).size) - BigInt(1)).toInt, (BigInt((lit).size)).toInt) == "'" && value != BigInt(-1)).asInstanceOf[Boolean]) {
        value = BigInt(1) - value
      }
      lits.update(lit, value)
    }
    i = i + BigInt(1)
  }
  c.asInstanceOf[Clause].literals = lits
  return c
}

def evaluate_clause(_c: Clause, model: scala.collection.mutable.Map[String,BigInt]): EvalResult = {
  var c: Clause = _c
  var i: BigInt = BigInt(0)
  while (i < BigInt((c.asInstanceOf[Clause].names).size)) {
    val lit: String = c.asInstanceOf[Clause].names.lift((i.toInt).toInt).getOrElse("")
    val sym: String = (if (lit.slice((BigInt((lit).size) - BigInt(1)).toInt, (BigInt((lit).size)).toInt) == "'") lit.slice((BigInt(0)).toInt, (BigInt(2)).toInt) else lit + "'")
    if ((c.asInstanceOf[Clause].literals.contains(sym)).asInstanceOf[Boolean]) {
      return EvalResult(BigInt(1), c)
    }
    i = i + BigInt(1)
  }
  c = assign_clause(c, model)
  i = BigInt(0)
  while (i < BigInt((c.asInstanceOf[Clause].names).size)) {
    val lit: String = c.asInstanceOf[Clause].names.lift((i.toInt).toInt).getOrElse("")
    val value: BigInt = c.asInstanceOf[Clause].literals.getOrElse(lit.toString, BigInt(0)).asInstanceOf[BigInt]
    if (value == BigInt(1)) {
      return EvalResult(BigInt(1), c)
    }
    if (value == BigInt(-1)) {
      return EvalResult(BigInt(-1), c)
    }
    i = i + BigInt(1)
  }
  var any_true: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((c.asInstanceOf[Clause].names).size)) {
    val lit: String = c.asInstanceOf[Clause].names.lift((i.toInt).toInt).getOrElse("")
    if (c.asInstanceOf[Clause].literals.getOrElse(lit.toString, BigInt(0)).asInstanceOf[BigInt] == BigInt(1)) {
      any_true = BigInt(1)
    }
    i = i + BigInt(1)
  }
  return EvalResult(any_true, c)
}

def new_formula(cs: ArrayBuffer[Clause]): Formula = {
  return Formula(cs)
}

def remove_symbol(symbols: ArrayBuffer[String], s: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((symbols).size)) {
    if (symbols.lift((i.toInt).toInt).getOrElse("") != s) {
      res = res :+ (symbols.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return res
}

def dpll_algorithm(clauses: ArrayBuffer[Clause], symbols: ArrayBuffer[String], model: scala.collection.mutable.Map[String,BigInt]): DPLLResult = {
  var all_true: Boolean = true
  var i: BigInt = BigInt(0)
  while (i < BigInt((clauses).size)) {
    val ev: EvalResult = evaluate_clause(clauses.lift((i.toInt).toInt).getOrElse(null), model)
    clauses((i).toInt) = ev.asInstanceOf[EvalResult].clause
    if (ev.asInstanceOf[EvalResult].value == BigInt(0)) {
      return DPLLResult(false, scala.collection.mutable.Map())
    } else {
      if (ev.asInstanceOf[EvalResult].value == BigInt(-1)) {
        all_true = false
      }
    }
    i = i + BigInt(1)
  }
  if (all_true) {
    return DPLLResult(true, model)
  }
  val p: String = symbols.lift((BigInt(0).toInt).toInt).getOrElse("")
  val rest: ArrayBuffer[String] = remove_symbol(symbols, p)
  var tmp1: scala.collection.mutable.Map[String,BigInt] = model
  var tmp2: scala.collection.mutable.Map[String,BigInt] = model
  tmp1.update(p, BigInt(1))
  tmp2.update(p, BigInt(0))
  val res1: DPLLResult = dpll_algorithm(clauses, rest, tmp1)
  if (res1.asInstanceOf[DPLLResult].sat) {
    return res1
  }
  return dpll_algorithm(clauses, rest, tmp2)
}

def str_clause(c: Clause): String = {
  var line: String = "{"
  var first: Boolean = true
  var i: BigInt = BigInt(0)
  while (i < BigInt((c.asInstanceOf[Clause].names).size)) {
    val lit: String = c.asInstanceOf[Clause].names.lift((i.toInt).toInt).getOrElse("")
    if (first) {
      first = false
    } else {
      line = line + " , "
    }
    line = line + lit
    i = i + BigInt(1)
  }
  line = line + "}"
  return line
}

def str_formula(f: Formula): String = {
  var line: String = "{"
  var i: BigInt = BigInt(0)
  while (i < BigInt((f.asInstanceOf[Formula].clauses).size)) {
    line = line + str_clause(f.asInstanceOf[Formula].clauses.lift((i.toInt).toInt).getOrElse(null))
    if (i < BigInt((f.asInstanceOf[Formula].clauses).size) - BigInt(1)) {
      line = line + " , "
    }
    i = i + BigInt(1)
  }
  line = line + "}"
  return line
}

val clause1: Clause = new_clause(ArrayBuffer("A4", "A3", "A5'", "A1", "A3'"))

val clause2: Clause = new_clause(ArrayBuffer("A4"))

val formula: Formula = new_formula(ArrayBuffer(clause1, clause2))

val formula_str: String = str_formula(formula)

val clauses: ArrayBuffer[Clause] = ArrayBuffer(clause1, clause2)

val symbols: ArrayBuffer[String] = ArrayBuffer("A4", "A3", "A5", "A1")

var model: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]

val result: DPLLResult = dpll_algorithm(clauses, symbols, model)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    if (result.sat) {
      println("The formula " + formula_str + " is satisfiable.")
    } else {
      println("The formula " + formula_str + " is not satisfiable.")
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
