// Generated by Mochi v0.10.64 on 2025-08-12 14:38:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def apply_table(inp: String, table: ArrayBuffer[BigInt]): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((table).size)) {
    var idx: BigInt = table.lift((i.toInt).toInt).getOrElse(BigInt(0)) - BigInt(1)
    if (idx < BigInt(0)) {
      idx = BigInt((inp).size) - BigInt(1)
    }
    res = res + inp.slice((idx).toInt, (idx + BigInt(1)).toInt)
    i = i + BigInt(1)
  }
  return res
}

def left_shift(data: String): String = {
  return data.slice((BigInt(1)).toInt, (BigInt((data).size)).toInt) + data.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
}

def xor(a: String, b: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size) && i < BigInt((b).size)) {
    if (a.slice((i).toInt, (i + BigInt(1)).toInt) == b.slice((i).toInt, (i + BigInt(1)).toInt)) {
      res = res + "0"
    } else {
      res = res + "1"
    }
    i = i + BigInt(1)
  }
  return res
}

def int_to_binary(n: BigInt): String = {
  if (n == BigInt(0)) {
    return "0"
  }
  var res: String = ""
  var num: BigInt = n
  while (num > BigInt(0)) {
    res = _str(num % BigInt(2)) + res
    num = num / BigInt(2)
  }
  return res
}

def pad_left(s: String, width: BigInt): String = {
  var res: String = s
  while (BigInt((res).size) < width) {
    res = "0" + res
  }
  return res
}

def bin_to_int(s: String): BigInt = {
  var result: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val digit: BigInt = BigInt((s.slice((i).toInt, (i + BigInt(1)).toInt)))
    result = result * BigInt(2) + digit
    i = i + BigInt(1)
  }
  return result
}

def apply_sbox(s: ArrayBuffer[ArrayBuffer[BigInt]], data: String): String = {
  val row_bits: String = data.slice((BigInt(0)).toInt, (BigInt(1)).toInt) + data.slice((BigInt((data).size) - BigInt(1)).toInt, (BigInt((data).size)).toInt)
  val col_bits: String = data.slice((BigInt(1)).toInt, (BigInt(3)).toInt)
  val row: BigInt = bin_to_int(row_bits)
  val col: BigInt = bin_to_int(col_bits)
  val `val`: BigInt = s.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0))
  val out: String = int_to_binary(`val`)
  return out
}

def f(expansion: ArrayBuffer[BigInt], s0: ArrayBuffer[ArrayBuffer[BigInt]], s1: ArrayBuffer[ArrayBuffer[BigInt]], key: String, message: String): String = {
  val left: String = message.slice((BigInt(0)).toInt, (BigInt(4)).toInt)
  val right: String = message.slice((BigInt(4)).toInt, (BigInt(8)).toInt)
  var temp: String = apply_table(right, expansion)
  temp = xor(temp, key)
  var left_bin_str: String = apply_sbox(s0, temp.slice((BigInt(0)).toInt, (BigInt(4)).toInt))
  var right_bin_str: String = apply_sbox(s1, temp.slice((BigInt(4)).toInt, (BigInt(8)).toInt))
  left_bin_str = pad_left(left_bin_str, BigInt(2))
  right_bin_str = pad_left(right_bin_str, BigInt(2))
  temp = apply_table(left_bin_str + right_bin_str, p4_table)
  temp = xor(left, temp)
  return temp + right
}

val p4_table: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(4), BigInt(3), BigInt(1))

val key: String = "1010000010"

val message: String = "11010111"

val p8_table: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(6), BigInt(3), BigInt(7), BigInt(4), BigInt(8), BigInt(5), BigInt(10), BigInt(9))

val p10_table: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(5), BigInt(2), BigInt(7), BigInt(4), BigInt(10), BigInt(1), BigInt(9), BigInt(8), BigInt(6))

val IP: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(6), BigInt(3), BigInt(1), BigInt(4), BigInt(8), BigInt(5), BigInt(7))

val IP_inv: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(1), BigInt(3), BigInt(5), BigInt(7), BigInt(2), BigInt(8), BigInt(6))

val expansion: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(1), BigInt(2), BigInt(3), BigInt(2), BigInt(3), BigInt(4), BigInt(1))

val s0: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(0), BigInt(3), BigInt(2)), ArrayBuffer(BigInt(3), BigInt(2), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(2), BigInt(1), BigInt(3)), ArrayBuffer(BigInt(3), BigInt(1), BigInt(3), BigInt(2)))

val s1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(2), BigInt(0), BigInt(1), BigInt(3)), ArrayBuffer(BigInt(3), BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(2), BigInt(1), BigInt(0), BigInt(3)))

var temp: String = apply_table(key, p10_table)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var left: String = temp.slice((BigInt(0)).toInt, (BigInt(5)).toInt)
    var right: String = temp.slice((BigInt(5)).toInt, (BigInt(10)).toInt)
    left = left_shift(left)
    right = left_shift(right)
    val key1: String = apply_table(left + right, p8_table)
    left = left_shift(left)
    right = left_shift(right)
    left = left_shift(left)
    right = left_shift(right)
    val key2: String = apply_table(left + right, p8_table)
    temp = apply_table(message, IP)
    temp = f(expansion, s0, s1, key1, temp)
    temp = temp.slice((BigInt(4)).toInt, (BigInt(8)).toInt) + temp.slice((BigInt(0)).toInt, (BigInt(4)).toInt)
    temp = f(expansion, s0, s1, key2, temp)
    val CT: String = apply_table(temp, IP_inv)
    println("Cipher text is: " + CT)
    temp = apply_table(CT, IP)
    temp = f(expansion, s0, s1, key2, temp)
    temp = temp.slice((BigInt(4)).toInt, (BigInt(8)).toInt) + temp.slice((BigInt(0)).toInt, (BigInt(4)).toInt)
    temp = f(expansion, s0, s1, key1, temp)
    val PT: String = apply_table(temp, IP_inv)
    println("Plain text after decypting is: " + PT)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
