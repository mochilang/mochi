// Generated by Mochi v0.10.64 on 2025-08-12 09:24:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def subarray(xs: ArrayBuffer[BigInt], start: BigInt, end: BigInt): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = start
  while (k < end) {
    result = result :+ (xs.lift((k.toInt).toInt).getOrElse(BigInt(0)))
    k = k + BigInt(1)
  }
  return result
}

def merge(left_half: ArrayBuffer[BigInt], right_half: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (i < BigInt((left_half).size) && j < BigInt((right_half).size)) {
    if (left_half.lift((i.toInt).toInt).getOrElse(BigInt(0)) < right_half.lift((j.toInt).toInt).getOrElse(BigInt(0))) {
      result = result :+ (left_half.lift((i.toInt).toInt).getOrElse(BigInt(0)))
      i = i + BigInt(1)
    } else {
      result = result :+ (right_half.lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
  }
  while (i < BigInt((left_half).size)) {
    result = result :+ (left_half.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  while (j < BigInt((right_half).size)) {
    result = result :+ (right_half.lift((j.toInt).toInt).getOrElse(BigInt(0)))
    j = j + BigInt(1)
  }
  return result
}

def merge_sort(array: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((array).size) <= BigInt(1)) {
    return array
  }
  val middle: BigInt = BigInt((array).size) / BigInt(2)
  val left_half: ArrayBuffer[BigInt] = subarray(array, BigInt(0), middle)
  val right_half: ArrayBuffer[BigInt] = subarray(array, middle, BigInt((array).size))
  val sorted_left: ArrayBuffer[BigInt] = merge_sort(left_half)
  val sorted_right: ArrayBuffer[BigInt] = merge_sort(right_half)
  return merge(sorted_left, sorted_right)
}

def h_index(citations: ArrayBuffer[BigInt]): BigInt = {
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((citations).size)) {
    if (citations.lift((idx.toInt).toInt).getOrElse(BigInt(0)) < BigInt(0)) {
      throw new RuntimeException(String.valueOf("The citations should be a list of non negative integers."))
    }
    idx = idx + BigInt(1)
  }
  val sorted: ArrayBuffer[BigInt] = merge_sort(citations)
  val n: BigInt = BigInt((sorted).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    if (sorted.lift(((n - BigInt(1) - i).toInt).toInt).getOrElse(BigInt(0)) <= i) {
      return i
    }
    i = i + BigInt(1)
  }
  return n
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(h_index(ArrayBuffer(BigInt(3), BigInt(0), BigInt(6), BigInt(1), BigInt(5)))))
    println(_str(h_index(ArrayBuffer(BigInt(1), BigInt(3), BigInt(1)))))
    println(_str(h_index(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
