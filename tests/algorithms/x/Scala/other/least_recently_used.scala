// Generated by Mochi v0.10.64 on 2025-08-12 14:37:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class LRUCache(var max_capacity: BigInt, var store: ArrayBuffer[String])

def new_cache(n: BigInt): LRUCache = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n should be an integer greater than 0."))
  }
  val cap: BigInt = (if (n == BigInt(0)) BigInt(2147483647) else n)
  return LRUCache(cap, ArrayBuffer[String]())
}

def remove_element(xs: ArrayBuffer[String], x: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var removed: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    val v: String = xs.lift((i.toInt).toInt).getOrElse("")
    if ((removed == false && v == x).asInstanceOf[Boolean]) {
      removed = true
    } else {
      res = (res ++ ArrayBuffer(v)).asInstanceOf[ArrayBuffer[String]]
    }
    i = i + BigInt(1)
  }
  return res
}

def refer(cache: LRUCache, x: String): LRUCache = {
  var store: ArrayBuffer[String] = cache.asInstanceOf[LRUCache].store
  var exists: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((store).size)) {
    if (store.lift((i.toInt).toInt).getOrElse("") == x) {
      exists = true
    }
    i = i + BigInt(1)
  }
  if (exists) {
    store = remove_element(store, x)
  } else {
    if (BigInt((store).size) == cache.asInstanceOf[LRUCache].max_capacity) {
      var new_store: ArrayBuffer[String] = ArrayBuffer[String]()
      var j: BigInt = BigInt(0)
      while (j < BigInt((store).size) - BigInt(1)) {
        new_store = (new_store ++ ArrayBuffer(store.lift((j.toInt).toInt).getOrElse(""))).asInstanceOf[ArrayBuffer[String]]
        j = j + BigInt(1)
      }
      store = new_store
    }
  }
  store = (ArrayBuffer(x) ++ store).asInstanceOf[ArrayBuffer[String]]
  return LRUCache(cache.asInstanceOf[LRUCache].max_capacity, store)
}

def display(cache: LRUCache): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((cache.asInstanceOf[LRUCache].store).size)) {
    println(cache.asInstanceOf[LRUCache].store.lift((i.toInt).toInt).getOrElse(""))
    i = i + BigInt(1)
  }
}

def repr_item(s: String): String = {
  var all_digits: Boolean = true
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((ch.charAt(BigInt(0).toInt) < '0' || ch.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      all_digits = false
    }
    i = i + BigInt(1)
  }
  if (all_digits) {
    return s
  }
  return "'" + s + "'"
}

def cache_repr(cache: LRUCache): String = {
  var res: String = "LRUCache(" + _str(cache.asInstanceOf[LRUCache].max_capacity) + ") => ["
  var i: BigInt = BigInt(0)
  while (i < BigInt((cache.asInstanceOf[LRUCache].store).size)) {
    res = res + repr_item(cache.asInstanceOf[LRUCache].store.lift((i.toInt).toInt).getOrElse(""))
    if (i < BigInt((cache.asInstanceOf[LRUCache].store).size) - BigInt(1)) {
      res = res + ", "
    }
    i = i + BigInt(1)
  }
  res = res + "]"
  return res
}

var lru: LRUCache = new_cache(BigInt(4))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    lru = refer(lru, "A")
    lru = refer(lru, "2")
    lru = refer(lru, "3")
    lru = refer(lru, "A")
    lru = refer(lru, "4")
    lru = refer(lru, "5")
    var r: String = cache_repr(lru)
    println(r)
    if (r != "LRUCache(4) => [5, 4, 'A', 3]") {
      throw new RuntimeException(String.valueOf("Assertion error"))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
