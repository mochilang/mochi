// Generated by Mochi v0.10.73 on 2025-08-25 23:53:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

private def _div(a: BigInt, b: BigInt): BigInt = {
  var q = a / b
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) q -= 1
  q
}

private def _mod(a: BigInt, b: BigInt): BigInt = {
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) r += b
  r
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def rand(): BigInt = {
  seed = BigInt((_mod(seed * BigInt(1103515245) + BigInt(12345), BigInt("2147483648"))).toString.toDouble.toInt)
  return BigInt((_div(seed, BigInt(65536))).toString.toDouble.toInt)
}

def randint(a: BigInt, b: BigInt): BigInt = {
  val r: BigInt = rand()
  return a + _mod(r, b - a + BigInt(1))
}

def fisher_yates_shuffle_int(data: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = data
  var i: BigInt = BigInt(0)
  while (i < BigInt((res).size)) {
    val a: BigInt = randint(BigInt(0), BigInt((res).size) - BigInt(1))
    val b: BigInt = randint(BigInt(0), BigInt((res).size) - BigInt(1))
    val temp: BigInt = res.lift((a.toInt).toInt).getOrElse(BigInt(0))
    res((a).toInt) = res.lift((b.toInt).toInt).getOrElse(BigInt(0))
    res((b).toInt) = temp
    i = i + BigInt(1)
  }
  return res
}

def fisher_yates_shuffle_str(data: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = data
  var i: BigInt = BigInt(0)
  while (i < BigInt((res).size)) {
    val a: BigInt = randint(BigInt(0), BigInt((res).size) - BigInt(1))
    val b: BigInt = randint(BigInt(0), BigInt((res).size) - BigInt(1))
    val temp: String = res.lift((a.toInt).toInt).getOrElse("")
    res((a).toInt) = res.lift((b.toInt).toInt).getOrElse("")
    res((b).toInt) = temp
    i = i + BigInt(1)
  }
  return res
}

var seed: BigInt = BigInt(1)

val integers: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5), BigInt(6), BigInt(7))

val strings: ArrayBuffer[String] = ArrayBuffer("python", "says", "hello", "!")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str("Fisher-Yates Shuffle:"))
    println(_str("List " + _str(integers) + " " + _str(strings)))
    println(_str("FY Shuffle " + _str(fisher_yates_shuffle_int(integers)) + " " + _str(fisher_yates_shuffle_str(strings))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
