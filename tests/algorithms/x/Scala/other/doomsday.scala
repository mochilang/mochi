// Generated by Mochi v0.10.61 on 2025-08-08 17:19:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_week_day(year: BigInt, month: BigInt, day: BigInt): String = {
  if (year < BigInt(100)) {
    throw new RuntimeException(String.valueOf("year should be in YYYY format"))
  }
  if ((month < BigInt(1) || month > BigInt(12)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("month should be between 1 to 12"))
  }
  if ((day < BigInt(1) || day > BigInt(31)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("day should be between 1 to 31"))
  }
  val century: BigInt = year / BigInt(100)
  val century_anchor: BigInt = (BigInt(5) * (century % BigInt(4)) + BigInt(2)) % BigInt(7)
  val centurian: BigInt = year % BigInt(100)
  val centurian_m: BigInt = centurian % BigInt(12)
  val dooms_day: BigInt = (centurian / BigInt(12) + centurian_m + centurian_m / BigInt(4) + century_anchor) % BigInt(7)
  val day_anchor: BigInt = (if (year % BigInt(4) != BigInt(0) || (centurian == BigInt(0) && year % BigInt(400) != BigInt(0)).asInstanceOf[Boolean]) DOOMSDAY_NOT_LEAP(((month - BigInt(1)).toInt).toInt) else DOOMSDAY_LEAP(((month - BigInt(1)).toInt).toInt))
  var week_day: BigInt = (dooms_day + day - day_anchor) % BigInt(7)
  if (week_day < BigInt(0)) {
    week_day = week_day + BigInt(7)
  }
  return WEEK_DAY_NAMES.getOrElse(week_day, "").asInstanceOf[String]
}

val DOOMSDAY_LEAP: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(1), BigInt(7), BigInt(4), BigInt(2), BigInt(6), BigInt(4), BigInt(1), BigInt(5), BigInt(3), BigInt(7), BigInt(5))

val DOOMSDAY_NOT_LEAP: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(7), BigInt(7), BigInt(4), BigInt(2), BigInt(6), BigInt(4), BigInt(1), BigInt(5), BigInt(3), BigInt(7), BigInt(5))

val WEEK_DAY_NAMES: scala.collection.mutable.Map[BigInt,String] = scala.collection.mutable.Map(BigInt(0) -> ("Sunday"), BigInt(1) -> ("Monday"), BigInt(2) -> ("Tuesday"), BigInt(3) -> ("Wednesday"), BigInt(4) -> ("Thursday"), BigInt(5) -> ("Friday"), BigInt(6) -> ("Saturday"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(get_week_day(BigInt(2020), BigInt(10), BigInt(24)))
    println(get_week_day(BigInt(2017), BigInt(10), BigInt(24)))
    println(get_week_day(BigInt(2019), BigInt(5), BigInt(3)))
    println(get_week_day(BigInt(1970), BigInt(9), BigInt(16)))
    println(get_week_day(BigInt(1870), BigInt(8), BigInt(13)))
    println(get_week_day(BigInt(2040), BigInt(3), BigInt(14)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
