// Generated by Mochi v0.10.69 on 2025-08-19 16:43:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class WordSearch(var words: ArrayBuffer[String], var width: BigInt, var height: BigInt, var board: ArrayBuffer[ArrayBuffer[String]])

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def rand_range(max: BigInt): BigInt = {
  return rand() % max
}

def shuffle(list_int: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt((list_int).size) - BigInt(1)
  while (i > BigInt(0)) {
    var j: BigInt = rand_range(i + BigInt(1))
    var tmp: BigInt = list_int.lift((i.toInt).toInt).getOrElse(BigInt(0))
    list_int((i).toInt) = list_int.lift((j.toInt).toInt).getOrElse(BigInt(0))
    list_int((j).toInt) = tmp
    i = i - BigInt(1)
  }
  return list_int
}

def rand_letter(): String = {
  var letters: String = "abcdefghijklmnopqrstuvwxyz"
  var i: BigInt = rand_range(BigInt(26))
  return letters.slice((i).toInt, (i + BigInt(1)).toInt)
}

def make_word_search(words: ArrayBuffer[String], width: BigInt, height: BigInt): WordSearch = {
  var board: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var r: BigInt = BigInt(0)
  while (r < height) {
    var row: ArrayBuffer[String] = ArrayBuffer[String]()
    var c: BigInt = BigInt(0)
    while (c < width) {
      row = (row :+ (""))
      c = c + BigInt(1)
    }
    board = (board :+ (row))
    r = r + BigInt(1)
  }
  return WordSearch(words, width, height, board)
}

def insert_dir(ws: WordSearch, word: String, dr: BigInt, dc: BigInt, rows: ArrayBuffer[BigInt], cols: ArrayBuffer[BigInt]): Boolean = {
  var word_len: BigInt = BigInt((word).size)
  var ri: BigInt = BigInt(0)
  val _br3 = new Breaks
  val _ct3 = new Breaks
  _br3.breakable {
    while (ri < BigInt((rows).size)) {
      _ct3.breakable {
        var row: BigInt = rows.lift((ri.toInt).toInt).getOrElse(BigInt(0))
        var ci: BigInt = BigInt(0)
        val _br4 = new Breaks
        val _ct4 = new Breaks
        _br4.breakable {
          while (ci < BigInt((cols).size)) {
            _ct4.breakable {
              var col: BigInt = cols.lift((ci.toInt).toInt).getOrElse(BigInt(0))
              var end_r: BigInt = row + dr * (word_len - BigInt(1))
              var end_c: BigInt = col + dc * (word_len - BigInt(1))
              if ((((end_r < BigInt(0) || end_r >= ws.asInstanceOf[WordSearch].height).asInstanceOf[Boolean] || end_c < BigInt(0)).asInstanceOf[Boolean] || end_c >= ws.asInstanceOf[WordSearch].width)) {
                ci = ci + BigInt(1)
                _ct4.break()
              }
              var k: BigInt = BigInt(0)
              var ok: Boolean = true
              val _br5 = new Breaks
              _br5.breakable {
                while (k < word_len) {
                  var rr: BigInt = row + dr * k
                  var cc: BigInt = col + dc * k
                  if (ws.asInstanceOf[WordSearch].board.lift((rr.toInt).toInt).getOrElse(ArrayBuffer[String]()).lift((cc.toInt).toInt).getOrElse("") != "") {
                    ok = false
                    _br5.break()
                  }
                  k = k + BigInt(1)
                }
              }
              if (ok) {
                k = BigInt(0)
                while (k < word_len) {
                  var rr2: BigInt = row + dr * k
                  var cc2: BigInt = col + dc * k
                  var row_list: ArrayBuffer[String] = ws.asInstanceOf[WordSearch].board.lift((rr2.toInt).toInt).getOrElse(ArrayBuffer[String]())
                  row_list((cc2).toInt) = word.slice((k).toInt, (k + BigInt(1)).toInt)
                  k = k + BigInt(1)
                }
                return true
              }
              ci = ci + BigInt(1)
            }
          }
        }
        ri = ri + BigInt(1)
      }
    }
  }
  return false
}

def generate_board(ws: WordSearch): Any = {
  var dirs_r: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(-1), BigInt(-1), BigInt(0), BigInt(1), BigInt(1), BigInt(1), BigInt(0), BigInt(-1))
  var dirs_c: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(1), BigInt(1), BigInt(0), BigInt(-1), BigInt(-1), BigInt(-1))
  var i: BigInt = BigInt(0)
  while (i < BigInt((ws.asInstanceOf[WordSearch].words).size)) {
    var word: String = ws.asInstanceOf[WordSearch].words.lift((i.toInt).toInt).getOrElse("")
    var rows: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var r: BigInt = BigInt(0)
    while (r < ws.asInstanceOf[WordSearch].height) {
      rows = (rows :+ (r))
      r = r + BigInt(1)
    }
    var cols: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var c: BigInt = BigInt(0)
    while (c < ws.asInstanceOf[WordSearch].width) {
      cols = (cols :+ (c))
      c = c + BigInt(1)
    }
    rows = shuffle(rows)
    cols = shuffle(cols)
    var d: BigInt = rand_range(BigInt(8))
    insert_dir(ws, word, dirs_r.lift((d.toInt).toInt).getOrElse(BigInt(0)), dirs_c.lift((d.toInt).toInt).getOrElse(BigInt(0)), rows, cols)
    i = i + BigInt(1)
  }
}

def visualise(ws: WordSearch, add_fake_chars: Boolean): String = {
  var result: String = ""
  var r: BigInt = BigInt(0)
  while (r < ws.asInstanceOf[WordSearch].height) {
    var c: BigInt = BigInt(0)
    while (c < ws.asInstanceOf[WordSearch].width) {
      var ch: String = ws.asInstanceOf[WordSearch].board.lift((r.toInt).toInt).getOrElse(ArrayBuffer[String]()).lift((c.toInt).toInt).getOrElse("")
      if (ch == "") {
        if (add_fake_chars) {
          ch = rand_letter()
        } else {
          ch = "#"
        }
      }
      result = result + ch + " "
      c = c + BigInt(1)
    }
    result = result + "\n"
    r = r + BigInt(1)
  }
  return result
}

def main(): Any = {
  var words: ArrayBuffer[String] = ArrayBuffer("cat", "dog", "snake", "fish")
  var ws: WordSearch = make_word_search(words, BigInt(10), BigInt(10))
  generate_board(ws)
  println(_str(visualise(ws, true)))
}

var seed: BigInt = BigInt(123456789)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
