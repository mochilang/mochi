// Generated by Mochi v0.10.61 on 2025-08-08 17:20:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Entry(var key: BigInt, var `val`: BigInt, var freq: BigInt, var order: BigInt)

case class LFUCache(var entries: ArrayBuffer[Entry], var capacity: BigInt, var hits: BigInt, var miss: BigInt, var tick: BigInt)

case class GetResult(var cache: LFUCache, var value: BigInt, var ok: Boolean)

def lfu_new(cap: BigInt): LFUCache = {
  return LFUCache(ArrayBuffer(), cap, BigInt(0), BigInt(0), BigInt(0))
}

def find_entry(entries: ArrayBuffer[Entry], key: BigInt): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((entries).size)) {
    val e: Entry = entries((i.toInt).toInt)
    if (e.asInstanceOf[Entry].key == key) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt(0) - BigInt(1)
}

def lfu_get(cache: LFUCache, key: BigInt): GetResult = {
  val idx: BigInt = find_entry(cache.asInstanceOf[LFUCache].entries, key)
  if (idx == BigInt(0) - BigInt(1)) {
    val new_cache: LFUCache = LFUCache(cache.asInstanceOf[LFUCache].entries, cache.asInstanceOf[LFUCache].capacity, cache.asInstanceOf[LFUCache].hits, cache.asInstanceOf[LFUCache].miss + BigInt(1), cache.asInstanceOf[LFUCache].tick)
    return GetResult(new_cache, BigInt(0), false)
  }
  var entries: ArrayBuffer[Entry] = cache.asInstanceOf[LFUCache].entries
  var e: Entry = entries((idx.toInt).toInt)
  e.asInstanceOf[Entry].freq = e.asInstanceOf[Entry].freq + BigInt(1)
  val new_tick: BigInt = cache.asInstanceOf[LFUCache].tick + BigInt(1)
  e.asInstanceOf[Entry].order = new_tick
  entries((idx).toInt) = e
  val new_cache: LFUCache = LFUCache(entries, cache.asInstanceOf[LFUCache].capacity, cache.asInstanceOf[LFUCache].hits + BigInt(1), cache.asInstanceOf[LFUCache].miss, new_tick)
  return GetResult(new_cache, e.asInstanceOf[Entry].`val`, true)
}

def remove_lfu(entries: ArrayBuffer[Entry]): ArrayBuffer[Entry] = {
  if (BigInt((entries).size) == BigInt(0)) {
    return entries
  }
  var min_idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(1)
  while (i < BigInt((entries).size)) {
    val e: Entry = entries((i.toInt).toInt)
    val m: Entry = entries((min_idx.toInt).toInt)
    if ((e.asInstanceOf[Entry].freq < m.asInstanceOf[Entry].freq || (e.asInstanceOf[Entry].freq == m.asInstanceOf[Entry].freq && e.asInstanceOf[Entry].order < m.asInstanceOf[Entry].order).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      min_idx = i
    }
    i = i + BigInt(1)
  }
  var res: ArrayBuffer[Entry] = ArrayBuffer[Entry]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((entries).size)) {
    if (j != min_idx) {
      res = res :+ (entries((j.toInt).toInt))
    }
    j = j + BigInt(1)
  }
  return res
}

def lfu_put(cache: LFUCache, key: BigInt, value: BigInt): LFUCache = {
  var entries: ArrayBuffer[Entry] = cache.asInstanceOf[LFUCache].entries
  val idx: BigInt = find_entry(entries, key)
  if (idx != BigInt(0) - BigInt(1)) {
    var e: Entry = entries((idx.toInt).toInt)
    e.asInstanceOf[Entry].`val` = value
    e.asInstanceOf[Entry].freq = e.asInstanceOf[Entry].freq + BigInt(1)
    val new_tick: BigInt = cache.asInstanceOf[LFUCache].tick + BigInt(1)
    e.asInstanceOf[Entry].order = new_tick
    entries((idx).toInt) = e
    return LFUCache(entries, cache.asInstanceOf[LFUCache].capacity, cache.asInstanceOf[LFUCache].hits, cache.asInstanceOf[LFUCache].miss, new_tick)
  }
  if (BigInt((entries).size) >= cache.asInstanceOf[LFUCache].capacity) {
    entries = remove_lfu(entries)
  }
  val new_tick: BigInt = cache.asInstanceOf[LFUCache].tick + BigInt(1)
  val new_entry: Entry = Entry(key, value, BigInt(1), new_tick)
  entries = entries :+ (new_entry)
  return LFUCache(entries, cache.asInstanceOf[LFUCache].capacity, cache.asInstanceOf[LFUCache].hits, cache.asInstanceOf[LFUCache].miss, new_tick)
}

def cache_info(cache: LFUCache): String = {
  return "CacheInfo(hits=" + _str(cache.asInstanceOf[LFUCache].hits) + ", misses=" + _str(cache.asInstanceOf[LFUCache].miss) + ", capacity=" + _str(cache.asInstanceOf[LFUCache].capacity) + ", current_size=" + _str(BigInt((cache.asInstanceOf[LFUCache].entries).size)) + ")"
}

def main(): Any = {
  var cache: LFUCache = lfu_new(BigInt(2))
  cache = lfu_put(cache, BigInt(1), BigInt(1))
  cache = lfu_put(cache, BigInt(2), BigInt(2))
  var r: GetResult = lfu_get(cache, BigInt(1))
  cache = r.asInstanceOf[GetResult].cache
  if (r.asInstanceOf[GetResult].ok) {
    println(_str(r.asInstanceOf[GetResult].value))
  } else {
    println("None")
  }
  cache = lfu_put(cache, BigInt(3), BigInt(3))
  r = lfu_get(cache, BigInt(2))
  cache = r.asInstanceOf[GetResult].cache
  if (r.asInstanceOf[GetResult].ok) {
    println(_str(r.asInstanceOf[GetResult].value))
  } else {
    println("None")
  }
  cache = lfu_put(cache, BigInt(4), BigInt(4))
  r = lfu_get(cache, BigInt(1))
  cache = r.asInstanceOf[GetResult].cache
  if (r.asInstanceOf[GetResult].ok) {
    println(_str(r.asInstanceOf[GetResult].value))
  } else {
    println("None")
  }
  r = lfu_get(cache, BigInt(3))
  cache = r.asInstanceOf[GetResult].cache
  if (r.asInstanceOf[GetResult].ok) {
    println(_str(r.asInstanceOf[GetResult].value))
  } else {
    println("None")
  }
  r = lfu_get(cache, BigInt(4))
  cache = r.asInstanceOf[GetResult].cache
  if (r.asInstanceOf[GetResult].ok) {
    println(_str(r.asInstanceOf[GetResult].value))
  } else {
    println("None")
  }
  println(cache_info(cache))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
