// Generated by Mochi v0.10.62 on 2025-08-09 10:38:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def get_data(source_data: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var data_lists: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((source_data).size)) {
    val row: ArrayBuffer[Double] = source_data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    var j: BigInt = BigInt(0)
    while (j < BigInt((row).size)) {
      if (BigInt((data_lists).size) < j + BigInt(1)) {
        var empty: ArrayBuffer[Double] = ArrayBuffer[Double]()
        data_lists = data_lists :+ (empty)
      }
      data_lists((j).toInt) = data_lists.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()) :+ (row.lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return data_lists
}

def calculate_each_score(data_lists: ArrayBuffer[ArrayBuffer[Double]], weights: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[Double]] = {
  var score_lists: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((data_lists).size)) {
    val dlist: ArrayBuffer[Double] = data_lists.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    val weight: BigInt = weights.lift((i.toInt).toInt).getOrElse(null)
    var mind: Double = dlist.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
    var maxd: Double = dlist.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
    var j: BigInt = BigInt(1)
    while (j < BigInt((dlist).size)) {
      val `val`: Double = dlist.lift((j.toInt).toInt).getOrElse(0.0)
      if (`val` < mind) {
        mind = `val`
      }
      if (`val` > maxd) {
        maxd = `val`
      }
      j = j + BigInt(1)
    }
    var score: ArrayBuffer[Double] = ArrayBuffer[Double]()
    j = BigInt(0)
    if (weight == BigInt(0)) {
      while (j < BigInt((dlist).size)) {
        val item: Double = dlist.lift((j.toInt).toInt).getOrElse(0.0)
        if (maxd - mind == 0.0) {
          score = score :+ (1.0)
        } else {
          score = score :+ (1.0 - (item - mind) / (maxd - mind))
        }
        j = j + BigInt(1)
      }
    } else {
      while (j < BigInt((dlist).size)) {
        val item: Double = dlist.lift((j.toInt).toInt).getOrElse(0.0)
        if (maxd - mind == 0.0) {
          score = score :+ (0.0)
        } else {
          score = score :+ ((item - mind) / (maxd - mind))
        }
        j = j + BigInt(1)
      }
    }
    score_lists = score_lists :+ (score)
    i = i + BigInt(1)
  }
  return score_lists
}

def generate_final_scores(score_lists: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Double] = {
  val count: BigInt = BigInt((score_lists.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var final_scores: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < count) {
    final_scores = final_scores :+ (0.0)
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((score_lists).size)) {
    val slist: ArrayBuffer[Double] = score_lists.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    var j: BigInt = BigInt(0)
    while (j < BigInt((slist).size)) {
      final_scores((j).toInt) = final_scores.lift((j.toInt).toInt).getOrElse(0.0) + slist.lift((j.toInt).toInt).getOrElse(0.0)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return final_scores
}

def procentual_proximity(source_data: ArrayBuffer[ArrayBuffer[Double]], weights: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[Double]] = {
  val data_lists: ArrayBuffer[ArrayBuffer[Double]] = get_data(source_data)
  val score_lists: ArrayBuffer[ArrayBuffer[Double]] = calculate_each_score(data_lists, weights)
  val final_scores: ArrayBuffer[Double] = generate_final_scores(score_lists)
  var i: BigInt = BigInt(0)
  while (i < BigInt((final_scores).size)) {
    source_data((i).toInt) = source_data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()) :+ (final_scores.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return source_data
}

var vehicles: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()

var weights: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    vehicles = vehicles :+ (ArrayBuffer(20.0, 60.0, 2012.0))
    vehicles = vehicles :+ (ArrayBuffer(23.0, 90.0, 2015.0))
    vehicles = vehicles :+ (ArrayBuffer(22.0, 50.0, 2011.0))
    val result: ArrayBuffer[ArrayBuffer[Double]] = procentual_proximity(vehicles, weights)
    println(_str(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
