// Generated by Mochi v0.10.62 on 2025-08-09 10:38:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def slice_without_last(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size) - BigInt(1)) {
    res = res :+ (xs.lift((i.toInt).toInt).getOrElse(""))
    i = i + BigInt(1)
  }
  return res
}

def is_balanced(s: String): Boolean = {
  var stack: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val symbol: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((OPEN_TO_CLOSED.contains(symbol)).asInstanceOf[Boolean]) {
      stack = stack :+ (symbol)
    } else {
      if (((symbol == ")" || symbol == "]").asInstanceOf[Boolean] || symbol == "}").asInstanceOf[Boolean]) {
        if (BigInt((stack).size) == BigInt(0)) {
          return false
        }
        val top: String = stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("")
        if (OPEN_TO_CLOSED.getOrElse(top.toString, "").asInstanceOf[String] != symbol) {
          return false
        }
        stack = slice_without_last(stack)
      }
    }
    i = i + BigInt(1)
  }
  return BigInt((stack).size) == BigInt(0)
}

def main(): Any = {
  println(is_balanced(""))
  println(is_balanced("()"))
  println(is_balanced("[]"))
  println(is_balanced("{}"))
  println(is_balanced("()[]{}"))
  println(is_balanced("(())"))
  println(is_balanced("[["))
  println(is_balanced("([{}])"))
  println(is_balanced("(()[)]"))
  println(is_balanced("([)]"))
  println(is_balanced("[[()]]"))
  println(is_balanced("(()(()))"))
  println(is_balanced("]"))
  println(is_balanced("Life is a bowl of cherries."))
  println(is_balanced("Life is a bowl of che{}ies."))
  println(is_balanced("Life is a bowl of che}{ies."))
}

val OPEN_TO_CLOSED: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("(" -> (")"), "[" -> ("]"), "{" -> ("}"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
