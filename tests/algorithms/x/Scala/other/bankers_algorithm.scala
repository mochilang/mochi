// Generated by Mochi v0.10.64 on 2025-08-12 14:34:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class State(var claim: ArrayBuffer[BigInt], var alloc: ArrayBuffer[ArrayBuffer[BigInt]], var max: ArrayBuffer[ArrayBuffer[BigInt]])

def processes_resource_summation(alloc: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  val resources: BigInt = BigInt((alloc.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var sums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < resources) {
    var total: BigInt = BigInt(0)
    var j: BigInt = BigInt(0)
    while (j < BigInt((alloc).size)) {
      total = total + alloc.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
      j = j + BigInt(1)
    }
    sums = sums :+ (total)
    i = i + BigInt(1)
  }
  return sums
}

def available_resources(claim: ArrayBuffer[BigInt], alloc_sum: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var avail: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((claim).size)) {
    avail = avail :+ (claim.lift((i.toInt).toInt).getOrElse(BigInt(0)) - alloc_sum.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  return avail
}

def need(max: ArrayBuffer[ArrayBuffer[BigInt]], alloc: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var needs: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((max).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((max.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      row = row :+ (max.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)) - alloc.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
    needs = needs :+ (row)
    i = i + BigInt(1)
  }
  return needs
}

def pretty_print(claim: ArrayBuffer[BigInt], alloc: ArrayBuffer[ArrayBuffer[BigInt]], max: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  println("         Allocated Resource Table")
  var i: BigInt = BigInt(0)
  while (i < BigInt((alloc).size)) {
    var row: ArrayBuffer[BigInt] = alloc.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var line: String = "P" + _str(i + BigInt(1)) + "       "
    var j: BigInt = BigInt(0)
    while (j < BigInt((row).size)) {
      line = line + _str(row.lift((j.toInt).toInt).getOrElse(BigInt(0)))
      if (j < BigInt((row).size) - BigInt(1)) {
        line = line + "        "
      }
      j = j + BigInt(1)
    }
    println(line)
    println("")
    i = i + BigInt(1)
  }
  println("         System Resource Table")
  i = BigInt(0)
  while (i < BigInt((max).size)) {
    var row: ArrayBuffer[BigInt] = max.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var line: String = "P" + _str(i + BigInt(1)) + "       "
    var j: BigInt = BigInt(0)
    while (j < BigInt((row).size)) {
      line = line + _str(row.lift((j.toInt).toInt).getOrElse(BigInt(0)))
      if (j < BigInt((row).size) - BigInt(1)) {
        line = line + "        "
      }
      j = j + BigInt(1)
    }
    println(line)
    println("")
    i = i + BigInt(1)
  }
  var usage: String = ""
  i = BigInt(0)
  while (i < BigInt((claim).size)) {
    if (i > BigInt(0)) {
      usage = usage + " "
    }
    usage = usage + _str(claim.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  var alloc_sum: ArrayBuffer[BigInt] = processes_resource_summation(alloc)
  var avail: ArrayBuffer[BigInt] = available_resources(claim, alloc_sum)
  var avail_str: String = ""
  i = BigInt(0)
  while (i < BigInt((avail).size)) {
    if (i > BigInt(0)) {
      avail_str = avail_str + " "
    }
    avail_str = avail_str + _str(avail.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  println("Current Usage by Active Processes: " + usage)
  println("Initial Available Resources:       " + avail_str)
}

def bankers_algorithm(claim: ArrayBuffer[BigInt], alloc: ArrayBuffer[ArrayBuffer[BigInt]], max: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var need_list: ArrayBuffer[ArrayBuffer[BigInt]] = need(max, alloc)
  var alloc_sum: ArrayBuffer[BigInt] = processes_resource_summation(alloc)
  var avail: ArrayBuffer[BigInt] = available_resources(claim, alloc_sum)
  println("__________________________________________________")
  println("")
  var finished: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((need_list).size)) {
    finished = finished :+ (false)
    i = i + BigInt(1)
  }
  var remaining: BigInt = BigInt((need_list).size)
  val _br12 = new Breaks
  _br12.breakable {
    while (remaining > BigInt(0)) {
      var safe: Boolean = false
      var p: BigInt = BigInt(0)
      val _br13 = new Breaks
      _br13.breakable {
        while (p < BigInt((need_list).size)) {
          if (!finished.lift((p.toInt).toInt).getOrElse(false)) {
            var exec: Boolean = true
            var r: BigInt = BigInt(0)
            val _br14 = new Breaks
            _br14.breakable {
              while (r < BigInt((avail).size)) {
                if (need_list.lift((p.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((r.toInt).toInt).getOrElse(BigInt(0)) > avail.lift((r.toInt).toInt).getOrElse(BigInt(0))) {
                  exec = false
                  _br14.break()
                }
                r = r + BigInt(1)
              }
            }
            if (exec) {
              safe = true
              println("Process " + _str(p + BigInt(1)) + " is executing.")
              r = BigInt(0)
              while (r < BigInt((avail).size)) {
                avail((r).toInt) = avail.lift((r.toInt).toInt).getOrElse(BigInt(0)) + alloc.lift((p.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((r.toInt).toInt).getOrElse(BigInt(0))
                r = r + BigInt(1)
              }
              var avail_str: String = ""
              r = BigInt(0)
              while (r < BigInt((avail).size)) {
                if (r > BigInt(0)) {
                  avail_str = avail_str + " "
                }
                avail_str = avail_str + _str(avail.lift((r.toInt).toInt).getOrElse(BigInt(0)))
                r = r + BigInt(1)
              }
              println("Updated available resource stack for processes: " + avail_str)
              println("The process is in a safe state.")
              println("")
              finished((p).toInt) = true
              remaining = remaining - BigInt(1)
            }
          }
          p = p + BigInt(1)
        }
      }
      if (!safe) {
        println("System in unsafe state. Aborting...")
        println("")
        _br12.break()
      }
    }
  }
}

var claim_vector: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(8), BigInt(5), BigInt(9), BigInt(7))

var allocated_resources_table: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2), BigInt(0), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(1)), ArrayBuffer(BigInt(4), BigInt(0), BigInt(0), BigInt(3)), ArrayBuffer(BigInt(0), BigInt(2), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(3), BigInt(0)))

var maximum_claim_table: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(3), BigInt(2), BigInt(1), BigInt(4)), ArrayBuffer(BigInt(0), BigInt(2), BigInt(5), BigInt(2)), ArrayBuffer(BigInt(5), BigInt(1), BigInt(0), BigInt(5)), ArrayBuffer(BigInt(1), BigInt(5), BigInt(3), BigInt(0)), ArrayBuffer(BigInt(3), BigInt(0), BigInt(3), BigInt(3)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    pretty_print(claim_vector, allocated_resources_table, maximum_claim_table)
    bankers_algorithm(claim_vector, allocated_resources_table, maximum_claim_table)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
