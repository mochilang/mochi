// Generated by Mochi v0.10.64 on 2025-08-12 14:34:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class EasterDate(var month: BigInt, var day: BigInt)

def gauss_easter(year: BigInt): EasterDate = {
  val metonic_cycle: BigInt = year % BigInt(19)
  val julian_leap_year: BigInt = year % BigInt(4)
  val non_leap_year: BigInt = year % BigInt(7)
  val leap_day_inhibits: BigInt = year / BigInt(100)
  val lunar_orbit_correction: BigInt = (BigInt(13) + BigInt(8) * leap_day_inhibits) / BigInt(25)
  val leap_day_reinstall_number: Double = leap_day_inhibits.toString.toDouble / 4.0
  val secular_moon_shift: Double = (15.0 - lunar_orbit_correction.toString.toDouble + leap_day_inhibits.toString.toDouble - leap_day_reinstall_number) % 30.0
  val century_starting_point: Double = (4.0 + leap_day_inhibits.toString.toDouble - leap_day_reinstall_number) % 7.0
  val days_to_add: Double = (19.0 * metonic_cycle.toString.toDouble + secular_moon_shift) % 30.0
  val days_from_phm_to_sunday: Double = (2.0 * julian_leap_year.toString.toDouble + 4.0 * non_leap_year.toString.toDouble + 6.0 * days_to_add + century_starting_point) % 7.0
  if ((days_to_add == 29.0 && days_from_phm_to_sunday == 6.0).asInstanceOf[Boolean]) {
    return EasterDate(BigInt(4), BigInt(19))
  }
  if ((days_to_add == 28.0 && days_from_phm_to_sunday == 6.0).asInstanceOf[Boolean]) {
    return EasterDate(BigInt(4), BigInt(18))
  }
  val offset: BigInt = BigInt((days_to_add + days_from_phm_to_sunday).toString.toDouble.toInt)
  val total: BigInt = BigInt(22) + offset
  if (total > BigInt(31)) {
    return EasterDate(BigInt(4), total - BigInt(31))
  }
  return EasterDate(BigInt(3), total)
}

def format_date(year: BigInt, d: EasterDate): String = {
  val month: String = (if (d.asInstanceOf[EasterDate].month < BigInt(10)) "0" + _str(d.asInstanceOf[EasterDate].month) else _str(d.asInstanceOf[EasterDate].month))
  val day: String = (if (d.asInstanceOf[EasterDate].day < BigInt(10)) "0" + _str(d.asInstanceOf[EasterDate].day) else _str(d.asInstanceOf[EasterDate].day))
  return _str(year) + "-" + month + "-" + day
}

val years: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1994), BigInt(2000), BigInt(2010), BigInt(2021), BigInt(2023), BigInt(2032), BigInt(2100))

var i: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i < BigInt((years).size)) {
      val y: BigInt = years.lift((i.toInt).toInt).getOrElse(BigInt(0))
      val e: EasterDate = gauss_easter(y)
      println("Easter in " + _str(y) + " is " + format_date(y, e))
      i = i + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
