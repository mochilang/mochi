// Generated by Mochi v0.10.64 on 2025-08-12 14:35:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Thing(var name: String, var value: Double, var weight: Double)

case class GreedyResult(var items: ArrayBuffer[Thing], var total_value: Double)

def get_value(t: Thing): Double = {
  return t.asInstanceOf[Thing].value
}

def get_weight(t: Thing): Double = {
  return t.asInstanceOf[Thing].weight
}

def get_name(t: Thing): String = {
  return t.asInstanceOf[Thing].name
}

def value_weight(t: Thing): Double = {
  return t.asInstanceOf[Thing].value / t.asInstanceOf[Thing].weight
}

def build_menu(names: ArrayBuffer[String], values: ArrayBuffer[Double], weights: ArrayBuffer[Double]): ArrayBuffer[Thing] = {
  var menu: ArrayBuffer[Thing] = ArrayBuffer[Thing]()
  var i: BigInt = BigInt(0)
  while ((i < BigInt((values).size) && i < BigInt((names).size)).asInstanceOf[Boolean] && i < BigInt((weights).size)) {
    menu = menu :+ (Thing(names.lift((i.toInt).toInt).getOrElse(""), values.lift((i.toInt).toInt).getOrElse(0.0), weights.lift((i.toInt).toInt).getOrElse(0.0)))
    i = i + BigInt(1)
  }
  return menu
}

def sort_desc(items: ArrayBuffer[Thing], key_func: (Thing) => Double): ArrayBuffer[Thing] = {
  var arr: ArrayBuffer[Thing] = ArrayBuffer[Thing]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((items).size)) {
    arr = arr :+ (items.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt(1)
  while (j < BigInt((arr).size)) {
    val key_item: Thing = arr.lift((j.toInt).toInt).getOrElse(null)
    val key_val: Double = key_func(key_item)
    var k: BigInt = j - BigInt(1)
    while (k >= BigInt(0) && key_func(arr.lift((k.toInt).toInt).getOrElse(null)) < key_val) {
      arr((k + BigInt(1)).toInt) = arr.lift((k.toInt).toInt).getOrElse(null)
      k = k - BigInt(1)
    }
    arr((k + BigInt(1)).toInt) = key_item
    j = j + BigInt(1)
  }
  return arr
}

def greedy(items: ArrayBuffer[Thing], max_cost: Double, key_func: (Thing) => Double): GreedyResult = {
  val items_copy: ArrayBuffer[Thing] = sort_desc(items, key_func)
  var result: ArrayBuffer[Thing] = ArrayBuffer[Thing]()
  var total_value: Double = 0.0
  var total_cost: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((items_copy).size)) {
    val it: Thing = items_copy.lift((i.toInt).toInt).getOrElse(null)
    val w: Double = get_weight(it)
    if (total_cost + w <= max_cost) {
      result = result :+ (it)
      total_cost = total_cost + w
      total_value = total_value + get_value(it)
    }
    i = i + BigInt(1)
  }
  return GreedyResult(result, total_value)
}

def thing_to_string(t: Thing): String = {
  return "Thing(" + t.asInstanceOf[Thing].name + ", " + _str(t.asInstanceOf[Thing].value) + ", " + _str(t.asInstanceOf[Thing].weight) + ")"
}

def list_to_string(ts: ArrayBuffer[Thing]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((ts).size)) {
    s = s + thing_to_string(ts.lift((i.toInt).toInt).getOrElse(null))
    if (i < BigInt((ts).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

val food: ArrayBuffer[String] = ArrayBuffer("Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk")

val value: ArrayBuffer[Double] = ArrayBuffer(80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0)

val weight: ArrayBuffer[Double] = ArrayBuffer(40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0)

val foods: ArrayBuffer[Thing] = build_menu(food, value, weight)

val res: GreedyResult = greedy(foods, 500.0, (get_value _).asInstanceOf[(Thing) => Double])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(list_to_string(foods))
    println(list_to_string(res.items))
    println(_str(res.total_value))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
