// Generated by Mochi v0.10.62 on 2025-08-09 10:38:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class NumberContainer(var numbermap: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], var indexmap: scala.collection.mutable.Map[BigInt,BigInt])

def remove_at(xs: ArrayBuffer[BigInt], idx: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    }
    i = i + BigInt(1)
  }
  return res
}

def insert_at(xs: ArrayBuffer[BigInt], idx: BigInt, `val`: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ (`val`)
    }
    res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  if (idx == BigInt((xs).size)) {
    res = res :+ (`val`)
  }
  return res
}

def binary_search_delete(array: ArrayBuffer[BigInt], item: BigInt): ArrayBuffer[BigInt] = {
  var low: BigInt = BigInt(0)
  var high: BigInt = BigInt((array).size) - BigInt(1)
  var arr: ArrayBuffer[BigInt] = array
  while (low <= high) {
    val mid: BigInt = (low + high) / BigInt(2)
    if (arr.lift((mid.toInt).toInt).getOrElse(null) == item) {
      arr = remove_at(arr, mid)
      return arr
    } else {
      if (arr.lift((mid.toInt).toInt).getOrElse(null) < item) {
        low = mid + BigInt(1)
      } else {
        high = mid - BigInt(1)
      }
    }
  }
  println("ValueError: Either the item is not in the array or the array was unsorted")
  return arr
}

def binary_search_insert(array: ArrayBuffer[BigInt], index: BigInt): ArrayBuffer[BigInt] = {
  var low: BigInt = BigInt(0)
  var high: BigInt = BigInt((array).size) - BigInt(1)
  var arr: ArrayBuffer[BigInt] = array
  while (low <= high) {
    val mid: BigInt = (low + high) / BigInt(2)
    if (arr.lift((mid.toInt).toInt).getOrElse(null) == index) {
      arr = insert_at(arr, mid + BigInt(1), index)
      return arr
    } else {
      if (arr.lift((mid.toInt).toInt).getOrElse(null) < index) {
        low = mid + BigInt(1)
      } else {
        high = mid - BigInt(1)
      }
    }
  }
  arr = insert_at(arr, low, index)
  return arr
}

def change(cont: NumberContainer, idx: BigInt, num: BigInt): NumberContainer = {
  var numbermap: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = cont.numbermap
  var indexmap: scala.collection.mutable.Map[BigInt,BigInt] = cont.indexmap
  if ((indexmap.contains(idx)).asInstanceOf[Boolean]) {
    val old: BigInt = indexmap.getOrElse(idx, null).asInstanceOf[BigInt]
    val indexes: ArrayBuffer[BigInt] = numbermap.getOrElse(old, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    if (BigInt((indexes).size) == BigInt(1)) {
      numbermap.update(old, ArrayBuffer())
    } else {
      numbermap.update(old, binary_search_delete(indexes, idx))
    }
  }
  indexmap.update(idx, num)
  if ((numbermap.contains(num)).asInstanceOf[Boolean]) {
    numbermap.update(num, binary_search_insert(numbermap.getOrElse(num, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]], idx))
  } else {
    numbermap.update(num, ArrayBuffer(idx))
  }
  return NumberContainer(numbermap, indexmap)
}

def find(cont: NumberContainer, num: BigInt): BigInt = {
  val numbermap: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = cont.numbermap
  if ((numbermap.contains(num)).asInstanceOf[Boolean]) {
    val arr: ArrayBuffer[BigInt] = numbermap.getOrElse(num, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    if (BigInt((arr).size) > BigInt(0)) {
      return arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
    }
  }
  return -BigInt(1)
}

var nm: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]

var im: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]

var cont: NumberContainer = NumberContainer(nm, im)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(find(cont, BigInt(10)))
    cont = change(cont, BigInt(0), BigInt(10))
    println(find(cont, BigInt(10)))
    cont = change(cont, BigInt(0), BigInt(20))
    println(find(cont, BigInt(10)))
    println(find(cont, BigInt(20)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
