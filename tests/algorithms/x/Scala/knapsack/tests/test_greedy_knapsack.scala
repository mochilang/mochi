// Generated by Mochi v0.10.59 on 2025-08-07 12:40:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class CalcResult(var ok: Boolean, var value: Double, var error: String)

def calc_profit(profit: ArrayBuffer[BigInt], weight: ArrayBuffer[BigInt], max_weight: BigInt): CalcResult = {
  if (BigInt((profit).size) != BigInt((weight).size)) {
    return CalcResult(false, 0.0, "The length of profit and weight must be same.")
  }
  if (max_weight <= BigInt(0)) {
    return CalcResult(false, 0.0, "max_weight must greater than zero.")
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((profit).size)) {
    if (profit((i.toInt).toInt) < BigInt(0)) {
      return CalcResult(false, 0.0, "Profit can not be negative.")
    }
    if (weight((i.toInt).toInt) < BigInt(0)) {
      return CalcResult(false, 0.0, "Weight can not be negative.")
    }
    i = i + BigInt(1)
  }
  var used: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((profit).size)) {
    used = used :+ false
    j = j + BigInt(1)
  }
  var limit: BigInt = BigInt(0)
  var gain: Double = 0.0
  val _br2 = new Breaks
  _br2.breakable {
    while (limit < max_weight) {
      var max_ratio: Double = -1.0
      var idx: BigInt = BigInt(0) - BigInt(1)
      var k: BigInt = BigInt(0)
      while (k < BigInt((profit).size)) {
        if (!used((k.toInt).toInt)) {
          val ratio: Double = (profit((k.toInt).toInt)).toString.toDouble / (weight((k.toInt).toInt)).toString.toDouble
          if (ratio > max_ratio) {
            max_ratio = ratio
            idx = k
          }
        }
        k = k + BigInt(1)
      }
      if (idx == BigInt(0) - BigInt(1)) {
        _br2.break()
      }
      used((idx).toInt) = true
      if (max_weight - limit >= weight((idx.toInt).toInt)) {
        limit = limit + weight((idx.toInt).toInt)
        gain = gain + (profit((idx.toInt).toInt)).toString.toDouble
      } else {
        gain = gain + (max_weight - limit).toString.toDouble / (weight((idx.toInt).toInt)).toString.toDouble * (profit((idx.toInt).toInt)).toString.toDouble
        _br2.break()
      }
    }
  }
  return CalcResult(true, gain, "")
}

def test_sorted(): Boolean = {
  val profit: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(40), BigInt(50), BigInt(60))
  val weight: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(4), BigInt(6), BigInt(8), BigInt(10), BigInt(12))
  val res: CalcResult = calc_profit(profit, weight, BigInt(100))
  return (res.asInstanceOf[CalcResult].ok && res.asInstanceOf[CalcResult].value == 210.0).asInstanceOf[Boolean]
}

def test_negative_max_weight(): Boolean = {
  val profit: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(40), BigInt(50), BigInt(60))
  val weight: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(4), BigInt(6), BigInt(8), BigInt(10), BigInt(12))
  val res: CalcResult = calc_profit(profit, weight, -BigInt(15))
  return (!res.asInstanceOf[CalcResult].ok && res.asInstanceOf[CalcResult].error == "max_weight must greater than zero.").asInstanceOf[Boolean]
}

def test_negative_profit_value(): Boolean = {
  val profit: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), -BigInt(20), BigInt(30), BigInt(40), BigInt(50), BigInt(60))
  val weight: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(4), BigInt(6), BigInt(8), BigInt(10), BigInt(12))
  val res: CalcResult = calc_profit(profit, weight, BigInt(15))
  return (!res.asInstanceOf[CalcResult].ok && res.asInstanceOf[CalcResult].error == "Profit can not be negative.").asInstanceOf[Boolean]
}

def test_negative_weight_value(): Boolean = {
  val profit: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(40), BigInt(50), BigInt(60))
  val weight: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), -BigInt(4), BigInt(6), -BigInt(8), BigInt(10), BigInt(12))
  val res: CalcResult = calc_profit(profit, weight, BigInt(15))
  return (!res.asInstanceOf[CalcResult].ok && res.asInstanceOf[CalcResult].error == "Weight can not be negative.").asInstanceOf[Boolean]
}

def test_null_max_weight(): Boolean = {
  val profit: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(40), BigInt(50), BigInt(60))
  val weight: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(4), BigInt(6), BigInt(8), BigInt(10), BigInt(12))
  val res: CalcResult = calc_profit(profit, weight, BigInt(0))
  return (!res.asInstanceOf[CalcResult].ok && res.asInstanceOf[CalcResult].error == "max_weight must greater than zero.").asInstanceOf[Boolean]
}

def test_unequal_list_length(): Boolean = {
  val profit: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(40), BigInt(50))
  val weight: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(4), BigInt(6), BigInt(8), BigInt(10), BigInt(12))
  val res: CalcResult = calc_profit(profit, weight, BigInt(100))
  return (!res.asInstanceOf[CalcResult].ok && res.asInstanceOf[CalcResult].error == "The length of profit and weight must be same.").asInstanceOf[Boolean]
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(test_sorted())
    println(test_negative_max_weight())
    println(test_negative_profit_value())
    println(test_negative_weight_value())
    println(test_null_max_weight())
    println(test_unequal_list_length())
    println(true)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
