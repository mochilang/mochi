// Generated by Mochi v0.10.59 on 2025-08-07 12:40:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def knapsack(capacity: BigInt, weights: ArrayBuffer[BigInt], values: ArrayBuffer[BigInt], counter: BigInt): BigInt = {
  if ((counter == BigInt(0) || capacity == BigInt(0)).asInstanceOf[Boolean]) {
    return BigInt(0)
  }
  if (weights(((counter - BigInt(1)).toInt).toInt) > capacity) {
    return knapsack(capacity, weights, values, counter - BigInt(1))
  }
  val left_capacity: BigInt = capacity - weights(((counter - BigInt(1)).toInt).toInt)
  val include_val: BigInt = values(((counter - BigInt(1)).toInt).toInt) + knapsack(left_capacity, weights, values, counter - BigInt(1))
  val exclude_val: BigInt = knapsack(capacity, weights, values, counter - BigInt(1))
  if (include_val > exclude_val) {
    return include_val
  }
  return exclude_val
}

def test_base_case(): Boolean = {
  val cap: BigInt = BigInt(0)
  val `val`: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))
  val w: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))
  val c: BigInt = BigInt((`val`).size)
  if (knapsack(cap, w, `val`, c) != BigInt(0)) {
    return false
  }
  val val2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(60))
  val w2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10))
  val c2: BigInt = BigInt((val2).size)
  return knapsack(cap, w2, val2, c2) == BigInt(0)
}

def test_easy_case(): Boolean = {
  val cap: BigInt = BigInt(3)
  val `val`: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(3))
  val w: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(2), BigInt(1))
  val c: BigInt = BigInt((`val`).size)
  return knapsack(cap, w, `val`, c) == BigInt(5)
}

def test_knapsack(): Boolean = {
  val cap: BigInt = BigInt(50)
  val `val`: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(60), BigInt(100), BigInt(120))
  val w: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30))
  val c: BigInt = BigInt((`val`).size)
  return knapsack(cap, w, `val`, c) == BigInt(220)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(test_base_case())
    println(test_easy_case())
    println(test_knapsack())
    println(true)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
