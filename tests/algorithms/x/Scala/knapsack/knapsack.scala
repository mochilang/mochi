// Generated by Mochi v0.10.63 on 2025-08-12 08:53:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def knapsack(capacity: BigInt, weights: ArrayBuffer[BigInt], values: ArrayBuffer[BigInt], counter: BigInt): BigInt = {
  if ((counter == BigInt(0) || capacity == BigInt(0)).asInstanceOf[Boolean]) {
    return BigInt(0)
  }
  if (weights.lift(((counter - BigInt(1)).toInt).toInt).getOrElse(BigInt(0)) > capacity) {
    return knapsack(capacity, weights, values, counter - BigInt(1))
  } else {
    var left_capacity: BigInt = capacity - weights.lift(((counter - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
    var new_value_included: BigInt = values.lift(((counter - BigInt(1)).toInt).toInt).getOrElse(BigInt(0)) + knapsack(left_capacity, weights, values, counter - BigInt(1))
    var without_new_value: BigInt = knapsack(capacity, weights, values, counter - BigInt(1))
    if (new_value_included > without_new_value) {
      return new_value_included
    } else {
      return without_new_value
    }
  }
  return BigInt(0)
}

def main(): Any = {
  var weights: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(30))
  var values: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(60), BigInt(100), BigInt(120))
  var cap: BigInt = BigInt(50)
  var count: BigInt = BigInt((values).size)
  var result: BigInt = knapsack(cap, weights, values, count)
  println(_str(result))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
