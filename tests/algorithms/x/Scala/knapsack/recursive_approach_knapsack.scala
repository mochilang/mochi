// Generated by Mochi v0.10.59 on 2025-08-07 12:40:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def knapsack(weights: ArrayBuffer[BigInt], values: ArrayBuffer[BigInt], number_of_items: BigInt, max_weight: BigInt, index: BigInt): BigInt = {
  if (index == number_of_items) {
    return BigInt(0)
  }
  val ans1: BigInt = knapsack(weights, values, number_of_items, max_weight, index + BigInt(1))
  var ans2: BigInt = BigInt(0)
  if (weights((index.toInt).toInt) <= max_weight) {
    ans2 = values((index.toInt).toInt) + knapsack(weights, values, number_of_items, max_weight - weights((index.toInt).toInt), index + BigInt(1))
  }
  if (ans1 > ans2) {
    return ans1
  }
  return ans2
}

def main(): Any = {
  val w1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(4), BigInt(5))
  val v1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5), BigInt(4), BigInt(8), BigInt(6))
  val r1: BigInt = knapsack(w1, v1, BigInt(4), BigInt(5), BigInt(0))
  println(String.valueOf(r1))
  val w2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(4), BigInt(5))
  val v2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(9), BigInt(8))
  val r2: BigInt = knapsack(w2, v2, BigInt(3), BigInt(25), BigInt(0))
  println(String.valueOf(r2))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
