// Generated by Mochi v0.10.66 on 2025-08-15 15:31:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => d.toString
  case other => String.valueOf(other)
}

def calc_profit(profit: ArrayBuffer[BigInt], weight: ArrayBuffer[BigInt], max_weight: BigInt): Double = {
  if (BigInt((profit).size) != BigInt((weight).size)) {
    throw new RuntimeException(String.valueOf("The length of profit and weight must be same."))
  }
  if (max_weight <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("max_weight must greater than zero."))
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((profit).size)) {
    if (profit.lift((i.toInt).toInt).getOrElse(BigInt(0)) < BigInt(0)) {
      throw new RuntimeException(String.valueOf("Profit can not be negative."))
    }
    if (weight.lift((i.toInt).toInt).getOrElse(BigInt(0)) < BigInt(0)) {
      throw new RuntimeException(String.valueOf("Weight can not be negative."))
    }
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((profit).size)
  var used: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var j: BigInt = BigInt(0)
  while (j < n) {
    used = (used :+ false)
    j = j + BigInt(1)
  }
  var limit: BigInt = BigInt(0)
  var gain: Double = 0.0
  var count: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (limit < max_weight && count < n) {
      var maxRatio: Double = -1.0
      var maxIndex: BigInt = -BigInt(1)
      var k: BigInt = BigInt(0)
      while (k < n) {
        if (!used.lift((k.toInt).toInt).getOrElse(false)) {
          var ratio: Double = (profit.lift((k.toInt).toInt).getOrElse(BigInt(0))).toDouble / (weight.lift((k.toInt).toInt).getOrElse(BigInt(0))).toDouble
          if (ratio > maxRatio) {
            maxRatio = ratio
            maxIndex = k
          }
        }
        k = k + BigInt(1)
      }
      if (maxIndex < BigInt(0)) {
        _br2.break()
      }
      used((maxIndex).toInt) = true
      if (max_weight - limit >= weight.lift((maxIndex.toInt).toInt).getOrElse(BigInt(0))) {
        limit = limit + weight.lift((maxIndex.toInt).toInt).getOrElse(BigInt(0))
        gain = gain + (profit.lift((maxIndex.toInt).toInt).getOrElse(BigInt(0))).toDouble
      } else {
        gain = gain + (max_weight - limit).toString.toDouble / (weight.lift((maxIndex.toInt).toInt).getOrElse(BigInt(0))).toDouble * (profit.lift((maxIndex.toInt).toInt).getOrElse(BigInt(0))).toDouble
        _br2.break()
      }
      count = count + BigInt(1)
    }
  }
  return gain
}

def main(): Any = {
  println(_str(calc_profit(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(5)), BigInt(15))))
  println(_str(calc_profit(ArrayBuffer(BigInt(10), BigInt(9), BigInt(8)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(5)), BigInt(25))))
  println(_str(calc_profit(ArrayBuffer(BigInt(10), BigInt(9), BigInt(8)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(5)), BigInt(5))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
