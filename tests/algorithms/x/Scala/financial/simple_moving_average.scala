// Generated by Mochi v0.10.59 on 2025-08-07 11:12:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SMAValue(var value: Double, var ok: Boolean)

def simple_moving_average(data: ArrayBuffer[Double], window_size: BigInt): ArrayBuffer[SMAValue] = {
  if (window_size < 1) {
    throw new RuntimeException(String.valueOf("Window size must be a positive integer"))
  }
  var result: ArrayBuffer[SMAValue] = ArrayBuffer()
  var window_sum: Double = 0.0
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    window_sum = window_sum + data((i.toInt).toInt)
    if (i >= window_size) {
      window_sum = window_sum - data(((i - window_size).toInt).toInt)
    }
    if (i >= window_size - 1) {
      val avg: Double = window_sum / window_size.toString.toDouble
      result = result :+ SMAValue(avg, true)
    } else {
      result = result :+ SMAValue(0.0, false)
    }
    i = i + 1
  }
  return result
}

val data: ArrayBuffer[Double] = ArrayBuffer(10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0)

val window_size: BigInt = 3

val sma_values: ArrayBuffer[SMAValue] = simple_moving_average(data, window_size)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var idx: BigInt = 0
    while (idx < BigInt((sma_values).size)) {
      val item: SMAValue = sma_values((idx.toInt).toInt)
      if (item.asInstanceOf[SMAValue].ok) {
        println("Day " + String.valueOf(idx + 1) + ": " + String.valueOf(item.asInstanceOf[SMAValue].value))
      } else {
        println("Day " + String.valueOf(idx + 1) + ": Not enough data for SMA")
      }
      idx = idx + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
