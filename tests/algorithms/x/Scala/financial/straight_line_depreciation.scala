// Generated by Mochi v0.10.59 on 2025-08-07 11:12:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def straight_line_depreciation(useful_years: BigInt, purchase_value: Double, residual_value: Double): ArrayBuffer[Double] = {
  if (useful_years < 1) {
    throw new RuntimeException(String.valueOf("Useful years cannot be less than 1"))
  }
  if (purchase_value < 0.0) {
    throw new RuntimeException(String.valueOf("Purchase value cannot be less than zero"))
  }
  if (purchase_value < residual_value) {
    throw new RuntimeException(String.valueOf("Purchase value cannot be less than residual value"))
  }
  val depreciable_cost: Double = purchase_value - residual_value
  val annual_expense: Double = depreciable_cost / (1.0 * useful_years.toString.toDouble)
  var expenses: ArrayBuffer[Double] = ArrayBuffer()
  var accumulated: Double = 0.0
  var period: BigInt = 0
  while (period < useful_years) {
    if (period != useful_years - 1) {
      accumulated = accumulated + annual_expense
      expenses = expenses :+ annual_expense
    } else {
      val end_year_expense: Double = depreciable_cost - accumulated
      expenses = expenses :+ end_year_expense
    }
    period = period + 1
  }
  return expenses
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(straight_line_depreciation(10, 1100.0, 100.0)))
    println(String.valueOf(straight_line_depreciation(6, 1250.0, 50.0)))
    println(String.valueOf(straight_line_depreciation(4, 1001.0, 0.0)))
    println(String.valueOf(straight_line_depreciation(11, 380.0, 50.0)))
    println(String.valueOf(straight_line_depreciation(1, 4985.0, 100.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
