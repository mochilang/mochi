// Generated by Mochi v0.10.64 on 2025-08-13 16:19:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => d.toString
  case other => String.valueOf(other)
}

def exponential_moving_average(stock_prices: ArrayBuffer[Double], window_size: BigInt): ArrayBuffer[Double] = {
  if (window_size <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("window_size must be > 0"))
  }
  val alpha: Double = 2.0 / (1.0 + window_size.toDouble)
  var moving_average: Double = 0.0
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((stock_prices).size)) {
    val price: Double = stock_prices.lift((i.toInt).toInt).getOrElse(0.0)
    if (i <= window_size) {
      if (i == BigInt(0)) {
        moving_average = price
      } else {
        moving_average = (moving_average + price) * 0.5
      }
    } else {
      moving_average = alpha * price + (1.0 - alpha) * moving_average
    }
    result = result += (moving_average)
    i = i + BigInt(1)
  }
  return result
}

val stock_prices: ArrayBuffer[Double] = ArrayBuffer(2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0)

val window_size: BigInt = BigInt(3)

val result: ArrayBuffer[Double] = exponential_moving_average(stock_prices, window_size)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
