// Generated by Mochi v0.10.64 on 2025-08-13 16:19:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => d.toString
  case other => String.valueOf(other)
}

def powf(base: Double, exponent: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exponent) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def round2(value: Double): Double = {
  if (value >= 0.0) {
    val scaled: BigInt = BigInt((value * 100.0 + 0.5).toInt)
    return scaled.toString.toDouble / 100.0
  }
  val scaled: BigInt = BigInt((value * 100.0 - 0.5).toInt)
  return scaled.toString.toDouble / 100.0
}

def present_value(discount_rate: Double, cash_flows: ArrayBuffer[Double]): Double = {
  if (discount_rate < 0.0) {
    throw new RuntimeException(String.valueOf("Discount rate cannot be negative"))
  }
  if (BigInt((cash_flows).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Cash flows list cannot be empty"))
  }
  var pv: Double = 0.0
  var i: BigInt = BigInt(0)
  val factor: Double = 1.0 + discount_rate
  while (i < BigInt((cash_flows).size)) {
    val cf: Double = cash_flows.lift((i.toInt).toInt).getOrElse(0.0)
    pv = pv + cf / powf(factor, i)
    i = i + BigInt(1)
  }
  return round2(pv)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(present_value(0.13, ArrayBuffer(10.0, 20.7, -293.0, 297.0))))
    println(_str(present_value(0.07, ArrayBuffer(-109129.39, 30923.23, 15098.93, 29734.0, 39.0))))
    println(_str(present_value(0.07, ArrayBuffer(109129.39, 30923.23, 15098.93, 29734.0, 39.0))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
