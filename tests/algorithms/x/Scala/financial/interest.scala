// Generated by Mochi v0.10.59 on 2025-08-07 11:12:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def panic(msg: String): Any = {
  println(msg)
}

def powf(base: Double, exp: Double): Double = {
  var result: Double = 1.0
  var i: BigInt = 0
  while (i < BigInt(exp.toString.toDouble.toInt)) {
    result = result * base
    i = i + 1
  }
  return result
}

def simple_interest(principal: Double, daily_rate: Double, days: Double): Double = {
  if (days <= 0.0) {
    throw new RuntimeException(String.valueOf("days_between_payments must be > 0"))
    return 0.0
  }
  if (daily_rate < 0.0) {
    throw new RuntimeException(String.valueOf("daily_interest_rate must be >= 0"))
    return 0.0
  }
  if (principal <= 0.0) {
    throw new RuntimeException(String.valueOf("principal must be > 0"))
    return 0.0
  }
  return principal * daily_rate * days
}

def compound_interest(principal: Double, nominal_rate: Double, periods: Double): Double = {
  if (periods <= 0.0) {
    throw new RuntimeException(String.valueOf("number_of_compounding_periods must be > 0"))
    return 0.0
  }
  if (nominal_rate < 0.0) {
    throw new RuntimeException(String.valueOf("nominal_annual_interest_rate_percentage must be >= 0"))
    return 0.0
  }
  if (principal <= 0.0) {
    throw new RuntimeException(String.valueOf("principal must be > 0"))
    return 0.0
  }
  return principal * (powf(1.0 + nominal_rate, periods) - 1.0)
}

def apr_interest(principal: Double, apr: Double, years: Double): Double = {
  if (years <= 0.0) {
    throw new RuntimeException(String.valueOf("number_of_years must be > 0"))
    return 0.0
  }
  if (apr < 0.0) {
    throw new RuntimeException(String.valueOf("nominal_annual_percentage_rate must be >= 0"))
    return 0.0
  }
  if (principal <= 0.0) {
    throw new RuntimeException(String.valueOf("principal must be > 0"))
    return 0.0
  }
  return compound_interest(principal, apr / 365.0, years * 365.0)
}

def main(): Any = {
  println(String.valueOf(simple_interest(18000.0, 0.06, 3.0)))
  println(String.valueOf(simple_interest(0.5, 0.06, 3.0)))
  println(String.valueOf(simple_interest(18000.0, 0.01, 10.0)))
  println(String.valueOf(compound_interest(10000.0, 0.05, 3.0)))
  println(String.valueOf(compound_interest(10000.0, 0.05, 1.0)))
  println(String.valueOf(apr_interest(10000.0, 0.05, 3.0)))
  println(String.valueOf(apr_interest(10000.0, 0.05, 1.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
