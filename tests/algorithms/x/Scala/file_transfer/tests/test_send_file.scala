// Generated by Mochi v0.10.59 on 2025-08-07 11:11:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class ConnMock(var recv_called: BigInt, var send_called: BigInt, var close_called: BigInt)

case class SocketMock(var bind_called: BigInt, var listen_called: BigInt, var accept_called: BigInt, var shutdown_called: BigInt, var close_called: BigInt, var conn: ConnMock)

case class FileMock(var read_called: BigInt, var data: ArrayBuffer[BigInt])

def make_conn_mock(): ConnMock = {
  return ConnMock(0, 0, 0)
}

def conn_recv(conn: ConnMock, size: BigInt): BigInt = {
  conn.asInstanceOf[ConnMock].recv_called = conn.asInstanceOf[ConnMock].recv_called + 1
  return 0
}

def conn_send(conn: ConnMock, data: BigInt): Any = {
  conn.asInstanceOf[ConnMock].send_called = conn.asInstanceOf[ConnMock].send_called + 1
}

def conn_close(conn: ConnMock): Any = {
  conn.close_called = conn.close_called + 1
}

def make_socket_mock(conn: ConnMock): SocketMock = {
  return SocketMock(0, 0, 0, 0, 0, conn)
}

def socket_bind(sock: SocketMock): Any = {
  sock.asInstanceOf[SocketMock].bind_called = sock.asInstanceOf[SocketMock].bind_called + 1
}

def socket_listen(sock: SocketMock): Any = {
  sock.asInstanceOf[SocketMock].listen_called = sock.asInstanceOf[SocketMock].listen_called + 1
}

def socket_accept(sock: SocketMock): ConnMock = {
  sock.asInstanceOf[SocketMock].accept_called = sock.asInstanceOf[SocketMock].accept_called + 1
  return sock.asInstanceOf[SocketMock].conn
}

def socket_shutdown(sock: SocketMock): Any = {
  sock.asInstanceOf[SocketMock].shutdown_called = sock.asInstanceOf[SocketMock].shutdown_called + 1
}

def socket_close(sock: SocketMock): Any = {
  sock.close_called = sock.close_called + 1
}

def make_file_mock(values: ArrayBuffer[BigInt]): FileMock = {
  return FileMock(0, values)
}

def file_read(f: FileMock, size: BigInt): BigInt = {
  if (f.asInstanceOf[FileMock].read_called < BigInt((f.asInstanceOf[FileMock].data).size)) {
    val value: BigInt = f.asInstanceOf[FileMock].data((f.asInstanceOf[FileMock].read_called.toInt).toInt)
    f.asInstanceOf[FileMock].read_called = f.asInstanceOf[FileMock].read_called + 1
    return value
  }
  f.asInstanceOf[FileMock].read_called = f.asInstanceOf[FileMock].read_called + 1
  return 0
}

def file_open(): FileMock = {
  return make_file_mock(ArrayBuffer(1, 0))
}

def send_file(sock: SocketMock, f: FileMock): Any = {
  socket_bind(sock)
  socket_listen(sock)
  val conn: ConnMock = socket_accept(sock)
  val _: BigInt = conn_recv(conn, 1024)
  var data: BigInt = file_read(f, 1024)
  while (data != 0) {
    conn_send(conn, data)
    data = file_read(f, 1024)
  }
  conn_close(conn)
  socket_shutdown(sock)
  socket_close(sock)
}

def test_send_file_running_as_expected(): String = {
  val conn: ConnMock = make_conn_mock()
  val sock: SocketMock = make_socket_mock(conn)
  val f: FileMock = file_open()
  send_file(sock, f)
  if (((((((((sock.asInstanceOf[SocketMock].bind_called == 1 && sock.asInstanceOf[SocketMock].listen_called == 1).asInstanceOf[Boolean] && sock.asInstanceOf[SocketMock].accept_called == 1).asInstanceOf[Boolean] && conn.asInstanceOf[ConnMock].recv_called == 1).asInstanceOf[Boolean] && f.asInstanceOf[FileMock].read_called >= 1).asInstanceOf[Boolean] && conn.asInstanceOf[ConnMock].send_called == 1).asInstanceOf[Boolean] && conn.close_called == 1).asInstanceOf[Boolean] && sock.asInstanceOf[SocketMock].shutdown_called == 1).asInstanceOf[Boolean] && sock.close_called == 1).asInstanceOf[Boolean]) {
    return "pass"
  }
  return "fail"
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(test_send_file_running_as_expected())
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
