// Generated by Mochi v0.10.59 on 2025-08-06 20:50:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = (if (a < 0) -a else a)
  var y: BigInt = (if (b < 0) -b else b)
  while (y != 0) {
    val t: BigInt = x % y
    x = y
    y = t
  }
  return x
}

def extended_gcd(a: BigInt, b: BigInt): ArrayBuffer[BigInt] = {
  if (b == 0) {
    return ArrayBuffer(a, 1, 0)
  }
  val res: ArrayBuffer[BigInt] = extended_gcd(b, a % b)
  val d: BigInt = res((0.toInt).toInt)
  val p: BigInt = res((1.toInt).toInt)
  val q: BigInt = res((2.toInt).toInt)
  val x: BigInt = q
  val y: BigInt = p - q * (a / b)
  return ArrayBuffer(d, x, y)
}

def diophantine(a: BigInt, b: BigInt, c: BigInt): ArrayBuffer[BigInt] = {
  val d: BigInt = gcd(a, b)
  if (c % d != 0) {
    throw new RuntimeException(String.valueOf("No solution"))
  }
  val eg: ArrayBuffer[BigInt] = extended_gcd(a, b)
  val r: BigInt = c / d
  val x: BigInt = eg((1.toInt).toInt) * r
  val y: BigInt = eg((2.toInt).toInt) * r
  return ArrayBuffer(x, y)
}

def diophantine_all_soln(a: BigInt, b: BigInt, c: BigInt, n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val base: ArrayBuffer[BigInt] = diophantine(a, b, c)
  val x0: BigInt = base((0.toInt).toInt)
  val y0: BigInt = base((1.toInt).toInt)
  val d: BigInt = gcd(a, b)
  val p: BigInt = a / d
  val q: BigInt = b / d
  var sols: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    val x: BigInt = x0 + i * q
    val y: BigInt = y0 - i * p
    sols = sols :+ ArrayBuffer(BigInt(x.toString.toDouble.toInt), BigInt(y.toString.toDouble.toInt))
    i = i + 1
  }
  return sols
}

val s1: ArrayBuffer[BigInt] = diophantine(10, 6, 14)

val sols: ArrayBuffer[ArrayBuffer[BigInt]] = diophantine_all_soln(10, 6, 14, 4)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(s1))
    var j: BigInt = 0
    while (j < BigInt((sols).size)) {
      println(String.valueOf(sols((j.toInt).toInt)))
      j = j + 1
    }
    println(String.valueOf(diophantine(391, 299, BigInt((-69).toString.toDouble.toInt))))
    println(String.valueOf(extended_gcd(10, 6)))
    println(String.valueOf(extended_gcd(7, 5)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
