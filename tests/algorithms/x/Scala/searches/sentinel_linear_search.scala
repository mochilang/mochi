// Generated by Mochi v0.10.63 on 2025-08-11 16:32:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def remove_last(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size) - BigInt(1)) {
    res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return res
}

def sentinel_linear_search(sequence: ArrayBuffer[BigInt], target: BigInt): BigInt = {
  var seq: ArrayBuffer[BigInt] = sequence
  seq = seq :+ (target)
  var index: BigInt = BigInt(0)
  while (seq.lift((index.toInt).toInt).getOrElse(null) != target) {
    index = index + BigInt(1)
  }
  seq = remove_last(seq)
  if (index == BigInt((seq).size)) {
    return -BigInt(1)
  }
  return index
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(sentinel_linear_search(ArrayBuffer(BigInt(0), BigInt(5), BigInt(7), BigInt(10), BigInt(15)), BigInt(0))))
    println(_str(sentinel_linear_search(ArrayBuffer(BigInt(0), BigInt(5), BigInt(7), BigInt(10), BigInt(15)), BigInt(15))))
    println(_str(sentinel_linear_search(ArrayBuffer(BigInt(0), BigInt(5), BigInt(7), BigInt(10), BigInt(15)), BigInt(5))))
    println(_str(sentinel_linear_search(ArrayBuffer(BigInt(0), BigInt(5), BigInt(7), BigInt(10), BigInt(15)), BigInt(6))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
