// Generated by Mochi v0.10.63 on 2025-08-11 16:32:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def lin_search(left: BigInt, right: BigInt, array: ArrayBuffer[BigInt], target: BigInt): BigInt = {
  var i: BigInt = left
  while (i < right) {
    if (array.lift((i.toInt).toInt).getOrElse(null) == target) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def ite_ternary_search(array: ArrayBuffer[BigInt], target: BigInt): BigInt = {
  var left: BigInt = BigInt(0)
  var right: BigInt = BigInt((array).size) - BigInt(1)
  while (left <= right) {
    if (right - left < precision) {
      val idx: BigInt = lin_search(left, right + BigInt(1), array, target)
      return idx
    }
    val one_third: BigInt = left + (right - left) / BigInt(3)
    val two_third: BigInt = right - (right - left) / BigInt(3)
    if (array.lift((one_third.toInt).toInt).getOrElse(null) == target) {
      return one_third
    }
    if (array.lift((two_third.toInt).toInt).getOrElse(null) == target) {
      return two_third
    }
    if (target < array.lift((one_third.toInt).toInt).getOrElse(null)) {
      right = one_third - BigInt(1)
    } else {
      if (array.lift((two_third.toInt).toInt).getOrElse(null) < target) {
        left = two_third + BigInt(1)
      } else {
        left = one_third + BigInt(1)
        right = two_third - BigInt(1)
      }
    }
  }
  return -BigInt(1)
}

def rec_ternary_search(left: BigInt, right: BigInt, array: ArrayBuffer[BigInt], target: BigInt): BigInt = {
  if (left <= right) {
    if (right - left < precision) {
      val idx: BigInt = lin_search(left, right + BigInt(1), array, target)
      return idx
    }
    val one_third: BigInt = left + (right - left) / BigInt(3)
    val two_third: BigInt = right - (right - left) / BigInt(3)
    if (array.lift((one_third.toInt).toInt).getOrElse(null) == target) {
      return one_third
    }
    if (array.lift((two_third.toInt).toInt).getOrElse(null) == target) {
      return two_third
    }
    if (target < array.lift((one_third.toInt).toInt).getOrElse(null)) {
      return rec_ternary_search(left, one_third - BigInt(1), array, target)
    }
    if (array.lift((two_third.toInt).toInt).getOrElse(null) < target) {
      return rec_ternary_search(two_third + BigInt(1), right, array, target)
    }
    return rec_ternary_search(one_third + BigInt(1), two_third - BigInt(1), array, target)
  }
  return -BigInt(1)
}

def main(): Any = {
  val test_list: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(8), BigInt(13), BigInt(17), BigInt(19), BigInt(32), BigInt(42))
  println(_str(ite_ternary_search(test_list, BigInt(3))))
  println(_str(ite_ternary_search(test_list, BigInt(13))))
  println(_str(rec_ternary_search(BigInt(0), BigInt((test_list).size) - BigInt(1), test_list, BigInt(3))))
  println(_str(rec_ternary_search(BigInt(0), BigInt((test_list).size) - BigInt(1), test_list, BigInt(13))))
}

val precision: BigInt = BigInt(10)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
