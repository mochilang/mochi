// Generated by Mochi v0.10.63 on 2025-08-11 16:32:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class SearchProblem(var x: Double, var y: Double, var step: Double, var f: (Double, Double) => Double)

def score(sp: SearchProblem): Double = {
  return (sp.asInstanceOf[SearchProblem].f(sp.asInstanceOf[SearchProblem].x, sp.asInstanceOf[SearchProblem].y)).toString.toDouble
}

def neighbors(sp: SearchProblem): ArrayBuffer[SearchProblem] = {
  val s: Double = sp.asInstanceOf[SearchProblem].step
  return ArrayBuffer(SearchProblem(sp.asInstanceOf[SearchProblem].x - s, sp.asInstanceOf[SearchProblem].y - s, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x - s, sp.asInstanceOf[SearchProblem].y, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x - s, sp.asInstanceOf[SearchProblem].y + s, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x, sp.asInstanceOf[SearchProblem].y - s, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x, sp.asInstanceOf[SearchProblem].y + s, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x + s, sp.asInstanceOf[SearchProblem].y - s, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x + s, sp.asInstanceOf[SearchProblem].y, s, sp.asInstanceOf[SearchProblem].f), SearchProblem(sp.asInstanceOf[SearchProblem].x + s, sp.asInstanceOf[SearchProblem].y + s, s, sp.asInstanceOf[SearchProblem].f))
}

def equal_state(a: SearchProblem, b: SearchProblem): Boolean = {
  return (a.asInstanceOf[SearchProblem].x == b.asInstanceOf[SearchProblem].x && a.asInstanceOf[SearchProblem].y == b.asInstanceOf[SearchProblem].y).asInstanceOf[Boolean]
}

def contains_state(lst: ArrayBuffer[SearchProblem], sp: SearchProblem): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (equal_state(lst.lift((i.toInt).toInt).getOrElse(null), sp)) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def hill_climbing(sp: SearchProblem, find_max: Boolean, max_x: Double, min_x: Double, max_y: Double, min_y: Double, max_iter: BigInt): SearchProblem = {
  var current: SearchProblem = sp
  var visited: ArrayBuffer[SearchProblem] = ArrayBuffer[SearchProblem]()
  var iterations: BigInt = BigInt(0)
  var solution_found: Boolean = false
  val _ct1 = new Breaks
  while (solution_found == false && iterations < max_iter) {
    _ct1.breakable {
      visited = visited :+ (current)
      iterations = iterations + BigInt(1)
      val current_score: Double = score(current)
      val neighs: ArrayBuffer[SearchProblem] = neighbors(current)
      var max_change: Double = -1000000000000000000.0
      var min_change: Double = 1000000000000000000.0
      var next: SearchProblem = current
      var improved: Boolean = false
      var i: BigInt = BigInt(0)
      val _ct2 = new Breaks
      while (i < BigInt((neighs).size)) {
        _ct2.breakable {
          val n: SearchProblem = neighs.lift((i.toInt).toInt).getOrElse(null)
          i = i + BigInt(1)
          if (contains_state(visited, n)) {
            _ct2.break()
          }
          if ((((n.asInstanceOf[SearchProblem].x > max_x || n.asInstanceOf[SearchProblem].x < min_x).asInstanceOf[Boolean] || n.asInstanceOf[SearchProblem].y > max_y).asInstanceOf[Boolean] || n.asInstanceOf[SearchProblem].y < min_y).asInstanceOf[Boolean]) {
            _ct2.break()
          }
          val change: Double = score(n) - current_score
          if (find_max) {
            if ((change > max_change && change > 0.0).asInstanceOf[Boolean]) {
              max_change = change
              next = n
              improved = true
            }
          } else {
            if ((change < min_change && change < 0.0).asInstanceOf[Boolean]) {
              min_change = change
              next = n
              improved = true
            }
          }
        }
      }
      if (improved) {
        current = next
      } else {
        solution_found = true
      }
    }
  }
  return current
}

def test_f1(x: Double, y: Double): Double = {
  return x * x + y * y
}

def main(): Any = {
  val prob1: SearchProblem = SearchProblem(3.0, 4.0, 1.0, test_f1 _)
  val local_min1: SearchProblem = hill_climbing(prob1, false, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, BigInt(10000))
  println(_str(BigInt((score(local_min1)).toString.head.asDigit)))
  val prob2: SearchProblem = SearchProblem(12.0, 47.0, 1.0, test_f1 _)
  val local_min2: SearchProblem = hill_climbing(prob2, false, 100.0, 5.0, 50.0, -5.0, BigInt(10000))
  println(_str(BigInt((score(local_min2)).toString.head.asDigit)))
  val prob3: SearchProblem = SearchProblem(3.0, 4.0, 1.0, test_f1 _)
  val local_max: SearchProblem = hill_climbing(prob3, true, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, BigInt(1000))
  println(_str(BigInt((score(local_max)).toString.head.asDigit)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
