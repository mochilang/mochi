// Generated by Mochi v0.10.63 on 2025-08-11 16:32:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def partition(data: ArrayBuffer[BigInt], pivot: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var less: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var equal: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var greater: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (i <- (BigInt(0)).toInt until (BigInt((data).size)).toInt) {
    val v: BigInt = data.lift((i.toInt).toInt).getOrElse(null)
    if (v < pivot) {
      less = less :+ (v)
    } else {
      if (v > pivot) {
        greater = greater :+ (v)
      } else {
        equal = equal :+ (v)
      }
    }
  }
  return ArrayBuffer(less, equal, greater)
}

def quick_select(items: ArrayBuffer[BigInt], index: BigInt): BigInt = {
  if ((index < BigInt(0) || index >= BigInt((items).size)).asInstanceOf[Boolean]) {
    return -BigInt(1)
  }
  val pivot: BigInt = items.lift(((BigInt((items).size) / BigInt(2)).toInt).toInt).getOrElse(null)
  val parts: ArrayBuffer[ArrayBuffer[BigInt]] = partition(items, pivot)
  val smaller: ArrayBuffer[BigInt] = parts.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  val equal: ArrayBuffer[BigInt] = parts.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  val larger: ArrayBuffer[BigInt] = parts.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  val count: BigInt = BigInt((equal).size)
  val m: BigInt = BigInt((smaller).size)
  if ((m <= index && index < m + count).asInstanceOf[Boolean]) {
    return pivot
  } else {
    if (index < m) {
      return quick_select(smaller, index)
    } else {
      return quick_select(larger, index - (m + count))
    }
  }
  return null
}

def median(items: ArrayBuffer[BigInt]): Double = {
  val n: BigInt = BigInt((items).size)
  val mid: BigInt = n / BigInt(2)
  if (n % BigInt(2) != BigInt(0)) {
    return 1.0 * (quick_select(items, mid)).toString.toDouble
  } else {
    val low: BigInt = quick_select(items, mid - BigInt(1))
    val high: BigInt = quick_select(items, mid)
    return 1.0 * (low + high).toString.toDouble / 2.0
  }
  return 0.0
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(quick_select(ArrayBuffer(BigInt(2), BigInt(4), BigInt(5), BigInt(7), BigInt(899), BigInt(54), BigInt(32)), BigInt(5))))
    println(_str(quick_select(ArrayBuffer(BigInt(2), BigInt(4), BigInt(5), BigInt(7), BigInt(899), BigInt(54), BigInt(32)), BigInt(1))))
    println(_str(quick_select(ArrayBuffer(BigInt(5), BigInt(4), BigInt(3), BigInt(2)), BigInt(2))))
    println(_str(quick_select(ArrayBuffer(BigInt(3), BigInt(5), BigInt(7), BigInt(10), BigInt(2), BigInt(12)), BigInt(3))))
    println(_str(median(ArrayBuffer(BigInt(3), BigInt(2), BigInt(2), BigInt(9), BigInt(9)))))
    println(_str(median(ArrayBuffer(BigInt(2), BigInt(2), BigInt(9), BigInt(9), BigInt(9), BigInt(3)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
