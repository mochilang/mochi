// Generated by Mochi v0.10.63 on 2025-08-11 16:32:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def fibonacci(k: BigInt): BigInt = {
  if (k < BigInt(0)) {
    throw new RuntimeException(String.valueOf("k must be >= 0"))
  }
  var a: BigInt = BigInt(0)
  var b: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < k) {
    val tmp: BigInt = a + b
    a = b
    b = tmp
    i = i + BigInt(1)
  }
  return a
}

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  } else {
    return b
  }
  return null
}

def fibonacci_search(arr: ArrayBuffer[BigInt], `val`: BigInt): BigInt = {
  val n: BigInt = BigInt((arr).size)
  var m: BigInt = BigInt(0)
  while (fibonacci(m) < n) {
    m = m + BigInt(1)
  }
  var offset: BigInt = BigInt(0)
  while (m > BigInt(0)) {
    val i: BigInt = min_int(offset + fibonacci(m - BigInt(1)), n - BigInt(1))
    val item: BigInt = arr.lift((i.toInt).toInt).getOrElse(null)
    if (item == `val`) {
      return i
    } else {
      if (`val` < item) {
        m = m - BigInt(1)
      } else {
        offset = offset + fibonacci(m - BigInt(1))
        m = m - BigInt(2)
      }
    }
  }
  return -BigInt(1)
}

val example1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(5), BigInt(6), BigInt(7))

val example2: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(18), BigInt(2))

val example3: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(5), BigInt(10), BigInt(15), BigInt(20), BigInt(25), BigInt(30))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(fibonacci_search(example1, BigInt(4))))
    println(_str(fibonacci_search(example1, -BigInt(10))))
    println(_str(fibonacci_search(example2, -BigInt(18))))
    println(_str(fibonacci_search(example3, BigInt(15))))
    println(_str(fibonacci_search(example3, BigInt(17))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
