// Generated by Mochi v0.10.63 on 2025-08-11 16:32:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def binary_search(arr: ArrayBuffer[BigInt], item: BigInt): Boolean = {
  var low: BigInt = BigInt(0)
  var high: BigInt = BigInt((arr).size) - BigInt(1)
  while (low <= high) {
    val mid: BigInt = (low + high) / BigInt(2)
    val `val`: BigInt = arr.lift((mid.toInt).toInt).getOrElse(null)
    if (`val` == item) {
      return true
    }
    if (item < `val`) {
      high = mid - BigInt(1)
    } else {
      low = mid + BigInt(1)
    }
  }
  return false
}

var arr1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(8), BigInt(13), BigInt(17), BigInt(19), BigInt(32), BigInt(42))

var arr2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(4), BigInt(5), BigInt(6), BigInt(7))

var arr3: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(18), BigInt(2))

var arr4: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5))

var arr5: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(binary_search(arr1, BigInt(3)))
    println(binary_search(arr1, BigInt(13)))
    println(binary_search(arr2, BigInt(4)))
    println(binary_search(arr2, -BigInt(10)))
    println(binary_search(arr3, -BigInt(18)))
    println(binary_search(arr4, BigInt(5)))
    println(binary_search(arr5, BigInt(1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
