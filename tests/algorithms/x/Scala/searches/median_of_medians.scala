// Generated by Mochi v0.10.63 on 2025-08-11 16:32:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def set_at_int(xs: ArrayBuffer[BigInt], idx: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ (value)
    } else {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    }
    i = i + BigInt(1)
  }
  return res
}

def sort_int(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = xs
  var i: BigInt = BigInt(1)
  while (i < BigInt((res).size)) {
    val key: BigInt = res.lift((i.toInt).toInt).getOrElse(null)
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && res.lift((j.toInt).toInt).getOrElse(null) > key) {
      res = set_at_int(res, j + BigInt(1), res.lift((j.toInt).toInt).getOrElse(null))
      j = j - BigInt(1)
    }
    res = set_at_int(res, j + BigInt(1), key)
    i = i + BigInt(1)
  }
  return res
}

def median_of_five(arr: ArrayBuffer[BigInt]): BigInt = {
  val sorted: ArrayBuffer[BigInt] = sort_int(arr)
  return sorted.lift(((BigInt((sorted).size) / BigInt(2)).toInt).toInt).getOrElse(null)
}

def median_of_medians(arr: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((arr).size) <= BigInt(5)) {
    return median_of_five(arr)
  }
  var medians: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    if (i + BigInt(5) <= BigInt((arr).size)) {
      medians = medians :+ (median_of_five(arr.slice((i).toInt, (i + BigInt(5)).toInt)))
    } else {
      medians = medians :+ (median_of_five(arr.slice((i).toInt, (BigInt((arr).size)).toInt)))
    }
    i = i + BigInt(5)
  }
  return median_of_medians(medians)
}

def quick_select(arr: ArrayBuffer[BigInt], target: BigInt): BigInt = {
  if (target > BigInt((arr).size)) {
    return -BigInt(1)
  }
  val x: BigInt = median_of_medians(arr)
  var left: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var right: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var check: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    if (arr.lift((i.toInt).toInt).getOrElse(null) < x) {
      left = left :+ (arr.lift((i.toInt).toInt).getOrElse(null))
    } else {
      if (arr.lift((i.toInt).toInt).getOrElse(null) > x) {
        right = right :+ (arr.lift((i.toInt).toInt).getOrElse(null))
      } else {
        if (arr.lift((i.toInt).toInt).getOrElse(null) == x) {
          if (!check) {
            check = true
          } else {
            right = right :+ (arr.lift((i.toInt).toInt).getOrElse(null))
          }
        } else {
          right = right :+ (arr.lift((i.toInt).toInt).getOrElse(null))
        }
      }
    }
    i = i + BigInt(1)
  }
  val rank_x: BigInt = BigInt((left).size) + BigInt(1)
  var answer: BigInt = BigInt(0)
  if (rank_x == target) {
    answer = x
  } else {
    if (rank_x > target) {
      answer = quick_select(left, target)
    } else {
      answer = quick_select(right, target - rank_x)
    }
  }
  return answer
}

def main(): Any = {
  println(_str(median_of_five(ArrayBuffer(BigInt(5), BigInt(4), BigInt(3), BigInt(2)))))
  println(_str(quick_select(ArrayBuffer(BigInt(2), BigInt(4), BigInt(5), BigInt(7), BigInt(899), BigInt(54), BigInt(32)), BigInt(5))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
