// Generated by Mochi v0.10.63 on 2025-08-11 16:32:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def int_sqrt(n: BigInt): BigInt = {
  var x: BigInt = BigInt(0)
  while ((x + BigInt(1)) * (x + BigInt(1)) <= n) {
    x = x + BigInt(1)
  }
  return x
}

def jump_search(arr: ArrayBuffer[BigInt], item: BigInt): BigInt = {
  val arr_size: BigInt = BigInt((arr).size)
  val block_size: BigInt = int_sqrt(arr_size)
  var prev: BigInt = BigInt(0)
  var step: BigInt = block_size
  while (step < arr_size && arr.lift(((step - BigInt(1)).toInt).toInt).getOrElse(null) < item) {
    prev = step
    step = step + block_size
    if (prev >= arr_size) {
      return -BigInt(1)
    }
  }
  while (prev < arr_size && arr.lift((prev.toInt).toInt).getOrElse(null) < item) {
    prev = prev + BigInt(1)
    if (prev == step) {
      return -BigInt(1)
    }
  }
  if ((prev < arr_size && arr.lift((prev.toInt).toInt).getOrElse(null) == item).asInstanceOf[Boolean]) {
    return prev
  }
  return -BigInt(1)
}

def main(): Any = {
  println(_str(jump_search(ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5)), BigInt(3))))
  println(_str(jump_search(ArrayBuffer(BigInt((-BigInt(5)).toString.head.asDigit), BigInt((-BigInt(2)).toString.head.asDigit), BigInt((-BigInt(1)).toString.head.asDigit)), -BigInt(1))))
  println(_str(jump_search(ArrayBuffer(BigInt(0), BigInt(5), BigInt(10), BigInt(20)), BigInt(8))))
  println(_str(jump_search(ArrayBuffer(BigInt(0), BigInt(1), BigInt(1), BigInt(2), BigInt(3), BigInt(5), BigInt(8), BigInt(13), BigInt(21), BigInt(34), BigInt(55), BigInt(89), BigInt(144), BigInt(233), BigInt(377), BigInt(610)), BigInt(55))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
