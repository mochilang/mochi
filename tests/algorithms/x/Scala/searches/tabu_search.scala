// Generated by Mochi v0.10.63 on 2025-08-11 16:32:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Solution(var path: ArrayBuffer[String], var cost: BigInt)

case class Swap(var a: String, var b: String)

def path_cost(path: ArrayBuffer[String], graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]]): BigInt = {
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((path).size) - BigInt(1)) {
    val u: String = path.lift((i.toInt).toInt).getOrElse("")
    val v: String = path.lift(((i + BigInt(1)).toInt).toInt).getOrElse("")
    total = total + graph.getOrElse(u.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].getOrElse(v.toString, null).asInstanceOf[BigInt]
    i = i + BigInt(1)
  }
  return total
}

def generate_first_solution(graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]], start: String): Solution = {
  var path: ArrayBuffer[String] = ArrayBuffer[String]()
  var visiting: String = start
  var total: BigInt = BigInt(0)
  val _br1 = new Breaks
  _br1.breakable {
    while (BigInt((path).size) < BigInt((graph).size)) {
      path = path :+ (visiting)
      var best_node: String = ""
      var best_cost: BigInt = BigInt(1000000)
      for (n <- graph.getOrElse(visiting.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].keys) {
        if ((!(path.contains(n)).asInstanceOf[Boolean] && graph.getOrElse(visiting.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].getOrElse(n.toString, null).asInstanceOf[BigInt] < best_cost).asInstanceOf[Boolean]) {
          best_cost = graph.getOrElse(visiting.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].getOrElse(n.toString, null).asInstanceOf[BigInt]
          best_node = n
        }
      }
      if (best_node == "") {
        _br1.break()
      }
      total = total + best_cost
      visiting = best_node
    }
  }
  path = path :+ (start)
  total = total + graph.getOrElse(visiting.toString, null).asInstanceOf[scala.collection.mutable.Map[String,BigInt]].getOrElse(start.toString, null).asInstanceOf[BigInt]
  return Solution(path, total)
}

def copy_path(path: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((path).size)) {
    res = res :+ (path.lift((i.toInt).toInt).getOrElse(""))
    i = i + BigInt(1)
  }
  return res
}

def find_neighborhood(sol: Solution, graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]]): ArrayBuffer[Solution] = {
  var neighbors: ArrayBuffer[Solution] = ArrayBuffer[Solution]()
  var i: BigInt = BigInt(1)
  while (i < BigInt((sol.asInstanceOf[Solution].path).size) - BigInt(1)) {
    var j: BigInt = BigInt(1)
    while (j < BigInt((sol.asInstanceOf[Solution].path).size) - BigInt(1)) {
      if (i != j) {
        var new_path: ArrayBuffer[String] = copy_path(sol.asInstanceOf[Solution].path)
        val tmp: String = new_path.lift((i.toInt).toInt).getOrElse("")
        new_path((i).toInt) = new_path.lift((j.toInt).toInt).getOrElse("")
        new_path((j).toInt) = tmp
        val cost: BigInt = path_cost(new_path, graph)
        neighbors = neighbors :+ (Solution(new_path, cost))
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return neighbors
}

def find_swap(a: ArrayBuffer[String], b: ArrayBuffer[String]): Swap = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a.lift((i.toInt).toInt).getOrElse("") != b.lift((i.toInt).toInt).getOrElse("")) {
      return Swap(a.lift((i.toInt).toInt).getOrElse(""), b.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return Swap("", "")
}

def tabu_search(first: Solution, graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]], iters: BigInt, size: BigInt): Solution = {
  var solution: Solution = first
  var best: Solution = first
  var tabu: ArrayBuffer[Swap] = ArrayBuffer[Swap]()
  var count: BigInt = BigInt(0)
  val _br7 = new Breaks
  _br7.breakable {
    while (count < iters) {
      val neighborhood: ArrayBuffer[Solution] = find_neighborhood(solution, graph)
      if (BigInt((neighborhood).size) == BigInt(0)) {
        _br7.break()
      }
      var best_neighbor: Solution = neighborhood.lift((BigInt(0).toInt).toInt).getOrElse(null)
      var best_move: Swap = find_swap(solution.asInstanceOf[Solution].path, best_neighbor.asInstanceOf[Solution].path)
      var i: BigInt = BigInt(1)
      while (i < BigInt((neighborhood).size)) {
        val cand: Solution = neighborhood.lift((i.toInt).toInt).getOrElse(null)
        val move: Swap = find_swap(solution.asInstanceOf[Solution].path, cand.asInstanceOf[Solution].path)
        var forbidden: Boolean = false
        var t: BigInt = BigInt(0)
        while (t < BigInt((tabu).size)) {
          if (((tabu.lift((t.toInt).toInt).getOrElse(null).a == move.asInstanceOf[Swap].a && tabu.lift((t.toInt).toInt).getOrElse(null).b == move.asInstanceOf[Swap].b).asInstanceOf[Boolean] || (tabu.lift((t.toInt).toInt).getOrElse(null).a == move.asInstanceOf[Swap].b && tabu.lift((t.toInt).toInt).getOrElse(null).b == move.asInstanceOf[Swap].a).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            forbidden = true
          }
          t = t + BigInt(1)
        }
        if ((forbidden == false && cand.asInstanceOf[Solution].cost < best_neighbor.asInstanceOf[Solution].cost).asInstanceOf[Boolean]) {
          best_neighbor = cand
          best_move = move
        }
        i = i + BigInt(1)
      }
      solution = best_neighbor
      tabu = tabu :+ (best_move)
      if (BigInt((tabu).size) > size) {
        var new_tab: ArrayBuffer[Swap] = ArrayBuffer[Swap]()
        var j: BigInt = BigInt(1)
        while (j < BigInt((tabu).size)) {
          new_tab = new_tab :+ (tabu.lift((j.toInt).toInt).getOrElse(null))
          j = j + BigInt(1)
        }
        tabu = new_tab
      }
      if (solution.asInstanceOf[Solution].cost < best.cost) {
        best = solution
      }
      count = count + BigInt(1)
    }
  }
  return best
}

val graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]] = scala.collection.mutable.Map("a" -> (scala.collection.mutable.Map("b" -> (BigInt(20)), "c" -> (BigInt(18)), "d" -> (BigInt(22)), "e" -> (BigInt(26)))), "b" -> (scala.collection.mutable.Map("a" -> (BigInt(20)), "c" -> (BigInt(10)), "d" -> (BigInt(11)), "e" -> (BigInt(12)))), "c" -> (scala.collection.mutable.Map("a" -> (BigInt(18)), "b" -> (BigInt(10)), "d" -> (BigInt(23)), "e" -> (BigInt(24)))), "d" -> (scala.collection.mutable.Map("a" -> (BigInt(22)), "b" -> (BigInt(11)), "c" -> (BigInt(23)), "e" -> (BigInt(40)))), "e" -> (scala.collection.mutable.Map("a" -> (BigInt(26)), "b" -> (BigInt(12)), "c" -> (BigInt(24)), "d" -> (BigInt(40)))))

val first: Solution = generate_first_solution(graph, "a")

val best: Solution = tabu_search(first, graph, BigInt(4), BigInt(3))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(best.path))
    println(_str(best.cost))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
