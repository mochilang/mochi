// Generated by Mochi v0.10.63 on 2025-08-11 16:32:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def interpolation_search(arr: ArrayBuffer[BigInt], item: BigInt): BigInt = {
  var left: BigInt = BigInt(0)
  var right: BigInt = BigInt((arr).size) - BigInt(1)
  while (left <= right) {
    if (arr.lift((left.toInt).toInt).getOrElse(null) == arr.lift((right.toInt).toInt).getOrElse(null)) {
      if (arr.lift((left.toInt).toInt).getOrElse(null) == item) {
        return left
      }
      return -BigInt(1)
    }
    val point: BigInt = left + (item - arr.lift((left.toInt).toInt).getOrElse(null)) * (right - left) / (arr.lift((right.toInt).toInt).getOrElse(null) - arr.lift((left.toInt).toInt).getOrElse(null))
    if ((point < BigInt(0) || point >= BigInt((arr).size)).asInstanceOf[Boolean]) {
      return -BigInt(1)
    }
    val current: BigInt = arr.lift((point.toInt).toInt).getOrElse(null)
    if (current == item) {
      return point
    }
    if (point < left) {
      right = left
      left = point
    } else {
      if (point > right) {
        left = right
        right = point
      } else {
        if (item < current) {
          right = point - BigInt(1)
        } else {
          left = point + BigInt(1)
        }
      }
    }
  }
  return -BigInt(1)
}

def interpolation_search_recursive(arr: ArrayBuffer[BigInt], item: BigInt, left: BigInt, right: BigInt): BigInt = {
  if (left > right) {
    return -BigInt(1)
  }
  if (arr.lift((left.toInt).toInt).getOrElse(null) == arr.lift((right.toInt).toInt).getOrElse(null)) {
    if (arr.lift((left.toInt).toInt).getOrElse(null) == item) {
      return left
    }
    return -BigInt(1)
  }
  val point: BigInt = left + (item - arr.lift((left.toInt).toInt).getOrElse(null)) * (right - left) / (arr.lift((right.toInt).toInt).getOrElse(null) - arr.lift((left.toInt).toInt).getOrElse(null))
  if ((point < BigInt(0) || point >= BigInt((arr).size)).asInstanceOf[Boolean]) {
    return -BigInt(1)
  }
  if (arr.lift((point.toInt).toInt).getOrElse(null) == item) {
    return point
  }
  if (point < left) {
    return interpolation_search_recursive(arr, item, point, left)
  }
  if (point > right) {
    return interpolation_search_recursive(arr, item, right, left)
  }
  if (arr.lift((point.toInt).toInt).getOrElse(null) > item) {
    return interpolation_search_recursive(arr, item, left, point - BigInt(1))
  }
  return interpolation_search_recursive(arr, item, point + BigInt(1), right)
}

def interpolation_search_by_recursion(arr: ArrayBuffer[BigInt], item: BigInt): BigInt = {
  return interpolation_search_recursive(arr, item, BigInt(0), BigInt((arr).size) - BigInt(1))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(interpolation_search(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5)), BigInt(2))))
    println(_str(interpolation_search(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5)), BigInt(6))))
    println(_str(interpolation_search_by_recursion(ArrayBuffer(BigInt(0), BigInt(5), BigInt(7), BigInt(10), BigInt(15)), BigInt(5))))
    println(_str(interpolation_search_by_recursion(ArrayBuffer(BigInt(0), BigInt(5), BigInt(7), BigInt(10), BigInt(15)), BigInt(100))))
    println(_str(interpolation_search_by_recursion(ArrayBuffer(BigInt(5), BigInt(5), BigInt(5), BigInt(5), BigInt(5)), BigInt(3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
