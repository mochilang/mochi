// Generated by Mochi v0.10.59 on 2025-08-06 20:47:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def repeat_char(ch: String, count: BigInt): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < count) {
    res = res + ch
    i = i + 1
  }
  return res
}

def abs_int(n: BigInt): BigInt = {
  if (n < 0) {
    return BigInt((-n).toString.toDouble.toInt)
  }
  return n
}

def pow2(exp: BigInt): BigInt = {
  var res: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    res = res * 2
    i = i + 1
  }
  return res
}

def to_binary_no_prefix(n: BigInt): String = {
  var v: BigInt = n
  if (v < 0) {
    v = -v
  }
  if (v == 0) {
    return "0"
  }
  var res: String = ""
  while (BigInt(v.toString.toDouble.toInt) > 0) {
    res = String.valueOf(BigInt(v.toString.toDouble.toInt) % 2) + res
    v = BigInt(v.toString.toDouble.toInt) / 2
  }
  return res
}

def logical_left_shift(number: BigInt, shift_amount: BigInt): String = {
  if ((number < 0 || shift_amount < 0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("both inputs must be positive integers"))
  }
  val binary_number: String = "0b" + to_binary_no_prefix(number)
  return binary_number + repeat_char("0", shift_amount)
}

def logical_right_shift(number: BigInt, shift_amount: BigInt): String = {
  if ((number < 0 || shift_amount < 0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("both inputs must be positive integers"))
  }
  val binary_number: String = to_binary_no_prefix(number)
  if (shift_amount >= BigInt((binary_number).size)) {
    return "0b0"
  }
  val shifted: String = binary_number.slice((0).toInt, (BigInt((binary_number).size) - shift_amount).toInt)
  return "0b" + shifted
}

def arithmetic_right_shift(number: BigInt, shift_amount: BigInt): String = {
  var binary_number: String = ""
  if (number >= 0) {
    binary_number = "0" + to_binary_no_prefix(number)
  } else {
    val length: BigInt = BigInt((to_binary_no_prefix(BigInt((-number).toString.toDouble.toInt))).size)
    val intermediate: BigInt = abs_int(number) - pow2(length)
    val bin_repr: String = to_binary_no_prefix(intermediate)
    binary_number = "1" + repeat_char("0", length - BigInt((bin_repr).size)) + bin_repr
  }
  if (shift_amount >= BigInt((binary_number).size)) {
    val sign: String = binary_number.slice((0).toInt, (1).toInt)
    return "0b" + repeat_char(sign, BigInt((binary_number).size))
  }
  val sign: String = binary_number.slice((0).toInt, (1).toInt)
  val shifted: String = binary_number.slice((0).toInt, (BigInt((binary_number).size) - shift_amount).toInt)
  return "0b" + repeat_char(sign, shift_amount) + shifted
}

def main(): Any = {
  println(logical_left_shift(17, 2))
  println(logical_right_shift(1983, 4))
  println(arithmetic_right_shift(BigInt((-17).toString.toDouble.toInt), 2))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
