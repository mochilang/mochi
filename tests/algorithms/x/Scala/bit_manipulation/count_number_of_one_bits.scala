// Generated by Mochi v0.10.59 on 2025-08-06 20:48:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bit_and(a: BigInt, b: BigInt): BigInt = {
  var ua: BigInt = a
  var ub: BigInt = b
  var res: BigInt = 0
  var bit: BigInt = 1
  while (ua > 0 || ub > 0) {
    if ((ua % 2 == 1 && ub % 2 == 1).asInstanceOf[Boolean]) {
      res = res + bit
    }
    ua = ua / 2.toInt
    ub = ub / 2.toInt
    bit = bit * 2
  }
  return res
}

def count_bits_kernighan(n: BigInt): BigInt = {
  if (n < 0) {
    throw new RuntimeException(String.valueOf("the value of input must not be negative"))
  }
  var num: BigInt = n
  var result: BigInt = 0
  while (num != 0) {
    num = bit_and(num, num - 1)
    result = result + 1
  }
  return result
}

def count_bits_modulo(n: BigInt): BigInt = {
  if (n < 0) {
    throw new RuntimeException(String.valueOf("the value of input must not be negative"))
  }
  var num: BigInt = n
  var result: BigInt = 0
  while (num != 0) {
    if (num % 2 == 1) {
      result = result + 1
    }
    num = num / 2.toInt
  }
  return result
}

def main(): Any = {
  val numbers: ArrayBuffer[BigInt] = ArrayBuffer(25, 37, 21, 58, 0, 256)
  var i: BigInt = 0
  while (i < BigInt((numbers).size)) {
    println(String.valueOf(count_bits_kernighan(numbers((i.toInt).toInt))))
    i = i + 1
  }
  i = 0
  while (i < BigInt((numbers).size)) {
    println(String.valueOf(count_bits_modulo(numbers((i.toInt).toInt))))
    i = i + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
