// Generated by Mochi v0.10.59 on 2025-08-06 20:47:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def repeat_char(ch: String, times: BigInt): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < times) {
    res = res + ch
    i = i + 1
  }
  return res
}

def to_binary(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  var res: String = ""
  var v: BigInt = n
  while (v > 0) {
    res = String.valueOf(v % 2) + res
    v = v / 2
  }
  return res
}

def pow2(exp: BigInt): BigInt = {
  var res: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    res = res * 2
    i = i + 1
  }
  return res
}

def twos_complement(number: BigInt): String = {
  if (number > 0) {
    throw new RuntimeException(String.valueOf("input must be a negative integer"))
  }
  if (number == 0) {
    return "0b0"
  }
  val abs_number = (if (number < 0) -number else number)
  val binary_number_length: BigInt = BigInt((to_binary(abs_number)).size)
  val complement_value: BigInt = pow2(binary_number_length) - abs_number
  val complement_binary: String = to_binary(complement_value)
  val padding: String = repeat_char("0", binary_number_length - BigInt((complement_binary).size))
  val twos_complement_number: String = "1" + padding + complement_binary
  return "0b" + twos_complement_number
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(twos_complement(0))
    println(twos_complement(BigInt((-1).toString.toDouble.toInt)))
    println(twos_complement(BigInt((-5).toString.toDouble.toInt)))
    println(twos_complement(BigInt((-17).toString.toDouble.toInt)))
    println(twos_complement(BigInt((-207).toString.toDouble.toInt)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
