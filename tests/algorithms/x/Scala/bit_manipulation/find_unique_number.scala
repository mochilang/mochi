// Generated by Mochi v0.10.59 on 2025-08-06 20:48:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bit_xor(a: BigInt, b: BigInt): BigInt = {
  var ua: BigInt = a
  var ub: BigInt = b
  var res: BigInt = 0
  var bit: BigInt = 1
  while (ua > 0 || ub > 0) {
    val abit: BigInt = ua % 2
    val bbit: BigInt = ub % 2
    if (((abit == 1 && bbit == 0).asInstanceOf[Boolean] || (abit == 0 && bbit == 1).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      res = res + bit
    }
    ua = ua / 2.toInt
    ub = ub / 2.toInt
    bit = bit * 2
  }
  return res
}

def find_unique_number(arr: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((arr).size) == 0) {
    throw new RuntimeException(String.valueOf("input list must not be empty"))
  }
  var result: BigInt = 0
  for (num <- arr) {
    result = bit_xor(result, num)
  }
  return result
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(find_unique_number(ArrayBuffer(1, 1, 2, 2, 3))))
    println(String.valueOf(find_unique_number(ArrayBuffer(4, 5, 4, 6, 6))))
    println(String.valueOf(find_unique_number(ArrayBuffer(7))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
