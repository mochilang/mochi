// Generated by Mochi v0.10.59 on 2025-08-06 21:23:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pad_left_num(n: BigInt): String = {
  var s: String = String.valueOf(n)
  while (BigInt((s).size) < 5) {
    s = " " + s
  }
  return s
}

def to_binary(n: BigInt): String = {
  var sign: String = ""
  var num: BigInt = n
  if (num < 0) {
    sign = "-"
    num = 0 - num
  }
  var bits: String = ""
  while (num > 0) {
    bits = String.valueOf(num % 2) + bits
    num = (num - num % 2) / 2
  }
  if (bits == "") {
    bits = "0"
  }
  val min_width: BigInt = 8
  while (BigInt((bits).size) < min_width - BigInt((sign).size)) {
    bits = "0" + bits
  }
  return sign + bits
}

def show_bits(before: BigInt, after: BigInt): String = {
  return pad_left_num(before) + ": " + to_binary(before) + "\n" + pad_left_num(after) + ": " + to_binary(after)
}

def lshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = 0
  while (i < k) {
    result = result * 2
    i = i + 1
  }
  return result
}

def rshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = 0
  while (i < k) {
    result = (result - result % 2) / 2
    i = i + 1
  }
  return result
}

def swap_odd_even_bits(num: BigInt): BigInt = {
  var n: BigInt = num
  if (n < 0) {
    n = n + BigInt("4294967296")
  }
  var result: BigInt = 0
  var i: BigInt = 0
  while (i < 32) {
    val bit1: BigInt = rshift(n, i) % 2
    val bit2: BigInt = rshift(n, i + 1) % 2
    result = result + lshift(bit1, i + 1) + lshift(bit2, i)
    i = i + 2
  }
  return result
}

def main(): Any = {
  var nums: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((-1).toString.toDouble.toInt), 0, 1, 2, 3, 4, 23, 24)
  var i: BigInt = 0
  while (i < BigInt((nums).size)) {
    val n: BigInt = nums((i.toInt).toInt)
    println(show_bits(n, swap_odd_even_bits(n)))
    println("")
    i = i + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
