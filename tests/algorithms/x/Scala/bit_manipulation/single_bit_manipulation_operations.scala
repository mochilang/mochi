// Generated by Mochi v0.10.59 on 2025-08-06 21:23:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow2(exp: BigInt): BigInt = {
  var result: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    result = result * 2
    i = i + 1
  }
  return result
}

def is_bit_set(number: BigInt, position: BigInt): Boolean = {
  val shifted: BigInt = number / pow2(position)
  val remainder: BigInt = shifted % 2
  return remainder == 1
}

def set_bit(number: BigInt, position: BigInt): BigInt = {
  if (is_bit_set(number, position)) {
    return number
  }
  return number + pow2(position)
}

def clear_bit(number: BigInt, position: BigInt): BigInt = {
  if (is_bit_set(number, position)) {
    return number - pow2(position)
  }
  return number
}

def flip_bit(number: BigInt, position: BigInt): BigInt = {
  if (is_bit_set(number, position)) {
    return number - pow2(position)
  }
  return number + pow2(position)
}

def get_bit(number: BigInt, position: BigInt): BigInt = {
  if (is_bit_set(number, position)) {
    return 1
  }
  return 0
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(set_bit(13, 1)))
    println(String.valueOf(clear_bit(18, 1)))
    println(String.valueOf(flip_bit(5, 1)))
    println(String.valueOf(is_bit_set(10, 3)))
    println(String.valueOf(get_bit(10, 1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
