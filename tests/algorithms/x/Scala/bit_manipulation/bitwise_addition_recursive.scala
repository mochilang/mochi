// Generated by Mochi v0.10.59 on 2025-08-06 20:48:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bitwise_xor(a: BigInt, b: BigInt): BigInt = {
  var result: BigInt = 0
  var bit: BigInt = 1
  var x: BigInt = a
  var y: BigInt = b
  while (x > 0 || y > 0) {
    val ax: BigInt = x % 2
    val by: BigInt = y % 2
    if ((ax + by) % 2 == 1) {
      result = result + bit
    }
    x = x / 2
    y = y / 2
    bit = bit * 2
  }
  return result
}

def bitwise_and(a: BigInt, b: BigInt): BigInt = {
  var result: BigInt = 0
  var bit: BigInt = 1
  var x: BigInt = a
  var y: BigInt = b
  while (x > 0 && y > 0) {
    if ((x % 2 == 1 && y % 2 == 1).asInstanceOf[Boolean]) {
      result = result + bit
    }
    x = x / 2
    y = y / 2
    bit = bit * 2
  }
  return result
}

def bitwise_addition_recursive(number: BigInt, other_number: BigInt): BigInt = {
  if ((number < 0 || other_number < 0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Both arguments MUST be non-negative!"))
  }
  val bitwise_sum: BigInt = bitwise_xor(number, other_number)
  val carry: BigInt = bitwise_and(number, other_number)
  if (carry == 0) {
    return bitwise_sum
  }
  return bitwise_addition_recursive(bitwise_sum, carry * 2)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(bitwise_addition_recursive(4, 5)))
    println(String.valueOf(bitwise_addition_recursive(8, 9)))
    println(String.valueOf(bitwise_addition_recursive(0, 4)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
