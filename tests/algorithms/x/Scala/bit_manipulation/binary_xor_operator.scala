// Generated by Mochi v0.10.59 on 2025-08-06 20:47:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def int_to_binary(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  var res: String = ""
  var num: BigInt = n
  while (num > 0) {
    res = String.valueOf(num % 2) + res
    num = num / 2
  }
  return res
}

def pad_left(s: String, width: BigInt): String = {
  var res: String = s
  while (BigInt((res).size) < width) {
    res = "0" + res
  }
  return res
}

def binary_xor(a: BigInt, b: BigInt): String = {
  if ((a < 0 || b < 0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("the value of both inputs must be positive"))
  }
  val a_bin: String = int_to_binary(a)
  val b_bin: String = int_to_binary(b)
  val max_len: BigInt = (if (BigInt((a_bin).size) > BigInt((b_bin).size)) BigInt((a_bin).size) else BigInt((b_bin).size))
  val a_pad: String = pad_left(a_bin, max_len)
  val b_pad: String = pad_left(b_bin, max_len)
  var i: BigInt = 0
  var result: String = ""
  while (i < max_len) {
    if (a_pad.slice((i.toInt).toInt, (i.toInt).toInt + 1) != b_pad.slice((i.toInt).toInt, (i.toInt).toInt + 1)) {
      result = result + "1"
    } else {
      result = result + "0"
    }
    i = i + 1
  }
  return "0b" + result
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(binary_xor(25, 32))
    println(binary_xor(37, 50))
    println(binary_xor(21, 30))
    println(binary_xor(58, 73))
    println(binary_xor(0, 255))
    println(binary_xor(256, 256))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
