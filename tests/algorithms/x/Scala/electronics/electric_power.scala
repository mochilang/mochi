// Generated by Mochi v0.10.59 on 2025-08-07 08:50:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Result(var name: String, var value: Double)

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var i: BigInt = 0
  while (i < n) {
    p = p * 10.0
    i = i + 1
  }
  return p
}

def round_to(x: Double, n: BigInt): Double = {
  val m: Double = pow10(n)
  return Math.floor(x * m + 0.5) / m
}

def electric_power(voltage: Double, current: Double, power: Double): Result = {
  var zeros: BigInt = 0
  if (voltage == 0.0) {
    zeros = zeros + 1
  }
  if (current == 0.0) {
    zeros = zeros + 1
  }
  if (power == 0.0) {
    zeros = zeros + 1
  }
  if (zeros != 1) {
    throw new RuntimeException(String.valueOf("Exactly one argument must be 0"))
  } else {
    if (power < 0.0) {
      throw new RuntimeException(String.valueOf("Power cannot be negative in any electrical/electronics system"))
    } else {
      if (voltage == 0.0) {
        return Result("voltage", power / current)
      } else {
        if (current == 0.0) {
          return Result("current", power / voltage)
        } else {
          if (power == 0.0) {
            val p: Double = absf(voltage * current)
            return Result("power", round_to(p, 2))
          } else {
            throw new RuntimeException(String.valueOf("Unhandled case"))
          }
        }
      }
    }
  }
  return null
}

def str_result(r: Result): String = {
  return "Result(name='" + r.asInstanceOf[Result].name + "', value=" + String.valueOf(r.asInstanceOf[Result].value) + ")"
}

val r1: Result = electric_power(0.0, 2.0, 5.0)

val r2: Result = electric_power(2.0, 2.0, 0.0)

val r3: Result = electric_power(-2.0, 3.0, 0.0)

val r4: Result = electric_power(2.2, 2.2, 0.0)

val r5: Result = electric_power(2.0, 0.0, 6.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(str_result(r1))
    println(str_result(r2))
    println(str_result(r3))
    println(str_result(r4))
    println(str_result(r5))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
