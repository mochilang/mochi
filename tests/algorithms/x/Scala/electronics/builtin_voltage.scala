// Generated by Mochi v0.10.59 on 2025-08-07 11:10:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow10(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = 0
  while (i < n) {
    result = result * 10.0
    i = i + 1
  }
  return result
}

def ln_series(x: Double): Double = {
  val t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = 1
  while (n <= 19) {
    sum = sum + term / n.toString.toDouble
    term = term * t * t
    n = n + 2
  }
  return 2.0 * sum
}

def ln(x: Double): Double = {
  var y: Double = x
  var k: BigInt = 0
  while (y >= 10.0) {
    y = y / 10.0
    k = k + 1
  }
  while (y < 1.0) {
    y = y * 10.0
    k = k - 1
  }
  return ln_series(y) + k.toString.toDouble * ln_series(10.0)
}

def builtin_voltage(donor_conc: Double, acceptor_conc: Double, intrinsic_conc: Double): Double = {
  if (donor_conc <= 0.0) {
    throw new RuntimeException(String.valueOf("Donor concentration should be positive"))
  }
  if (acceptor_conc <= 0.0) {
    throw new RuntimeException(String.valueOf("Acceptor concentration should be positive"))
  }
  if (intrinsic_conc <= 0.0) {
    throw new RuntimeException(String.valueOf("Intrinsic concentration should be positive"))
  }
  if (donor_conc <= intrinsic_conc) {
    throw new RuntimeException(String.valueOf("Donor concentration should be greater than intrinsic concentration"))
  }
  if (acceptor_conc <= intrinsic_conc) {
    throw new RuntimeException(String.valueOf("Acceptor concentration should be greater than intrinsic concentration"))
  }
  return BOLTZMANN * TEMPERATURE * ln(donor_conc * acceptor_conc / (intrinsic_conc * intrinsic_conc)) / ELECTRON_VOLT
}

val BOLTZMANN: Double = 1.380649 / pow10(23)

val ELECTRON_VOLT: Double = 1.602176634 / pow10(19)

val TEMPERATURE: Double = 300.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(builtin_voltage(pow10(17), pow10(17), pow10(10))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
