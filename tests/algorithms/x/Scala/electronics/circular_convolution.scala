// Generated by Mochi v0.10.59 on 2025-08-07 11:10:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble).toString.toDouble > x) {
    i = i - 1
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var i: BigInt = 0
  while (i < n) {
    p = p * 10.0
    i = i + 1
  }
  return p
}

def roundn(x: Double, n: BigInt): Double = {
  val m: Double = pow10(n)
  return Math.floor(x * m + 0.5) / m
}

def pad(signal: ArrayBuffer[Double], target: BigInt): ArrayBuffer[Double] = {
  var s: ArrayBuffer[Double] = signal
  while (BigInt((s).size) < target) {
    s = s :+ 0.0
  }
  return s
}

def circular_convolution(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val n1: BigInt = BigInt((a).size)
  val n2: BigInt = BigInt((b).size)
  val n: BigInt = (if (n1 > n2) n1 else n2)
  var x: ArrayBuffer[Double] = pad(a, n)
  var y: ArrayBuffer[Double] = pad(b, n)
  var res: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var sum: Double = 0.0
    var k: BigInt = 0
    while (k < n) {
      val j: BigInt = (i - k) % n
      val idx: BigInt = (if (j < 0) j + n else j)
      sum = sum + x((k.toInt).toInt) * y((idx.toInt).toInt)
      k = k + 1
    }
    res = res :+ roundn(sum, 2)
    i = i + 1
  }
  return res
}

val example1: ArrayBuffer[Double] = circular_convolution(ArrayBuffer(2.0, 1.0, 2.0, (-1.0).toString.toDouble), ArrayBuffer(1.0, 2.0, 3.0, 4.0))

val example2: ArrayBuffer[Double] = circular_convolution(ArrayBuffer(0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6), ArrayBuffer(0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5))

val example3: ArrayBuffer[Double] = circular_convolution(ArrayBuffer((-1.0).toString.toDouble, 1.0, 2.0, (-2.0).toString.toDouble), ArrayBuffer(0.5, 1.0, (-1.0).toString.toDouble, 2.0, 0.75))

val example4: ArrayBuffer[Double] = circular_convolution(ArrayBuffer(1.0, (-1.0).toString.toDouble, 2.0, 3.0, (-1.0).toString.toDouble), ArrayBuffer(1.0, 2.0, 3.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(example1))
    println(String.valueOf(example2))
    println(String.valueOf(example3))
    println(String.valueOf(example4))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
