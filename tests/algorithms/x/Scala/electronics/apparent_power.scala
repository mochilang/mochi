// Generated by Mochi v0.10.59 on 2025-08-07 10:23:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def to_radians(deg: Double): Double = {
  return deg * PI / 180.0
}

def sin_taylor(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble
    val k2: Double = k1 + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def cos_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble - 1.0
    val k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def rect(mag: Double, angle: Double): ArrayBuffer[Double] = {
  val c: Double = cos_taylor(angle)
  val s: Double = sin_taylor(angle)
  return ArrayBuffer(mag * c, mag * s)
}

def multiply(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  return ArrayBuffer(a((0.toInt).toInt) * b((0.toInt).toInt) - a((1.toInt).toInt) * b((1.toInt).toInt), a((0.toInt).toInt) * b((1.toInt).toInt) + a((1.toInt).toInt) * b((0.toInt).toInt))
}

def apparent_power(voltage: Double, current: Double, voltage_angle: Double, current_angle: Double): ArrayBuffer[Double] = {
  val vrad: Double = to_radians(voltage_angle)
  val irad: Double = to_radians(current_angle)
  val vrect: ArrayBuffer[Double] = rect(voltage, vrad)
  val irect: ArrayBuffer[Double] = rect(current, irad)
  val result: ArrayBuffer[Double] = multiply(vrect, irect)
  return result
}

def approx_equal(a: ArrayBuffer[Double], b: ArrayBuffer[Double], eps: Double): Boolean = {
  return (Math.abs(a((0.toInt).toInt) - b((0.toInt).toInt)) < eps && Math.abs(a((1.toInt).toInt) - b((1.toInt).toInt)) < eps).asInstanceOf[Boolean]
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
