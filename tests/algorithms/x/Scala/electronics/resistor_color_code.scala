// Generated by Mochi v0.10.59 on 2025-08-07 11:11:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(list: ArrayBuffer[String], value: String): Boolean = {
  for (c <- list) {
    if (c == value) {
      return true
    }
  }
  return false
}

def get_significant_digits(colors: ArrayBuffer[String]): BigInt = {
  var digit: BigInt = 0
  for (color <- colors) {
    if (!(significant_figures_color_values.contains(color)).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf(color + " is not a valid color for significant figure bands"))
    }
    digit = digit * 10 + significant_figures_color_values.getOrElse(color.toString, null).asInstanceOf[BigInt]
  }
  return digit
}

def get_multiplier(color: String): Double = {
  if (!(multiplier_color_values.contains(color)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf(color + " is not a valid color for multiplier band"))
  }
  return multiplier_color_values.getOrElse(color.toString, 0.0).asInstanceOf[Double]
}

def get_tolerance(color: String): Double = {
  if (!(tolerance_color_values.contains(color)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf(color + " is not a valid color for tolerance band"))
  }
  return tolerance_color_values.getOrElse(color.toString, 0.0).asInstanceOf[Double]
}

def get_temperature_coeffecient(color: String): BigInt = {
  if (!(temperature_coeffecient_color_values.contains(color)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf(color + " is not a valid color for temperature coeffecient band"))
  }
  return temperature_coeffecient_color_values.getOrElse(color.toString, null).asInstanceOf[BigInt]
}

def get_band_type_count(total: BigInt, typ: String): BigInt = {
  if (total == 3) {
    if (typ == "significant") {
      return 2
    }
    if (typ == "multiplier") {
      return 1
    }
    throw new RuntimeException(String.valueOf(typ + " is not valid for a 3 band resistor"))
  } else {
    if (total == 4) {
      if (typ == "significant") {
        return 2
      }
      if (typ == "multiplier") {
        return 1
      }
      if (typ == "tolerance") {
        return 1
      }
      throw new RuntimeException(String.valueOf(typ + " is not valid for a 4 band resistor"))
    } else {
      if (total == 5) {
        if (typ == "significant") {
          return 3
        }
        if (typ == "multiplier") {
          return 1
        }
        if (typ == "tolerance") {
          return 1
        }
        throw new RuntimeException(String.valueOf(typ + " is not valid for a 5 band resistor"))
      } else {
        if (total == 6) {
          if (typ == "significant") {
            return 3
          }
          if (typ == "multiplier") {
            return 1
          }
          if (typ == "tolerance") {
            return 1
          }
          if (typ == "temp_coeffecient") {
            return 1
          }
          throw new RuntimeException(String.valueOf(typ + " is not valid for a 6 band resistor"))
        } else {
          throw new RuntimeException(String.valueOf(String.valueOf(total) + " is not a valid number of bands"))
        }
      }
    }
  }
  return null
}

def check_validity(number_of_bands: BigInt, colors: ArrayBuffer[String]): Boolean = {
  if ((number_of_bands < 3 || number_of_bands > 6).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid number of bands. Resistor bands must be 3 to 6"))
  }
  if (number_of_bands != BigInt((colors).size)) {
    throw new RuntimeException(String.valueOf("Expecting " + String.valueOf(number_of_bands) + " colors, provided " + String.valueOf(BigInt((colors).size)) + " colors"))
  }
  for (color <- colors) {
    if (!(valid_colors.contains(color)).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf(color + " is not a valid color"))
    }
  }
  return true
}

def calculate_resistance(number_of_bands: BigInt, color_code_list: ArrayBuffer[String]): String = {
  check_validity(number_of_bands, color_code_list)
  val sig_count: BigInt = get_band_type_count(number_of_bands, "significant")
  val significant_colors: ArrayBuffer[String] = color_code_list.slice((0).toInt, (sig_count).toInt)
  val significant_digits: BigInt = get_significant_digits(significant_colors)
  val multiplier_color: String = color_code_list((sig_count.toInt).toInt)
  val multiplier: Double = get_multiplier(multiplier_color)
  var tolerance: Double = 20.0
  if (number_of_bands >= 4) {
    val tolerance_color: String = color_code_list(((sig_count + 1).toInt).toInt)
    tolerance = get_tolerance(tolerance_color)
  }
  var temp_coeff: BigInt = 0
  if (number_of_bands == 6) {
    val temp_color: String = color_code_list(((sig_count + 2).toInt).toInt)
    temp_coeff = get_temperature_coeffecient(temp_color)
  }
  val resistance_value: Double = multiplier * significant_digits.toString.toDouble
  var resistance_str: String = String.valueOf(resistance_value)
  if (resistance_value == BigInt(resistance_value.toString.toDouble.toInt)) {
    resistance_str = String.valueOf(BigInt(resistance_value.toString.toDouble.toInt))
  }
  var answer: String = resistance_str + "\u03a9 \u00b1" + String.valueOf(tolerance) + "% "
  if (temp_coeff != 0) {
    answer = answer + String.valueOf(temp_coeff) + " ppm/K"
  }
  return answer
}

val valid_colors: ArrayBuffer[String] = ArrayBuffer("Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver")

val significant_figures_color_values: Map[String,BigInt] = scala.collection.mutable.Map("Black" -> (BigInt(0)), "Brown" -> (BigInt(1)), "Red" -> (BigInt(2)), "Orange" -> (BigInt(3)), "Yellow" -> (BigInt(4)), "Green" -> (BigInt(5)), "Blue" -> (BigInt(6)), "Violet" -> (BigInt(7)), "Grey" -> (BigInt(8)), "White" -> (BigInt(9)))

val multiplier_color_values: Map[String,Double] = scala.collection.mutable.Map("Black" -> (1.0), "Brown" -> (10.0), "Red" -> (100.0), "Orange" -> (1000.0), "Yellow" -> (10000.0), "Green" -> (100000.0), "Blue" -> (1000000.0), "Violet" -> (10000000.0), "Grey" -> (100000000.0), "White" -> (1000000000.0), "Gold" -> (0.1), "Silver" -> (0.01))

val tolerance_color_values: Map[String,Double] = scala.collection.mutable.Map("Brown" -> (1.0), "Red" -> (2.0), "Orange" -> (0.05), "Yellow" -> (0.02), "Green" -> (0.5), "Blue" -> (0.25), "Violet" -> (0.1), "Grey" -> (0.01), "Gold" -> (5.0), "Silver" -> (10.0))

val temperature_coeffecient_color_values: Map[String,BigInt] = scala.collection.mutable.Map("Black" -> (BigInt(250)), "Brown" -> (BigInt(100)), "Red" -> (BigInt(50)), "Orange" -> (BigInt(15)), "Yellow" -> (BigInt(25)), "Green" -> (BigInt(20)), "Blue" -> (BigInt(10)), "Violet" -> (BigInt(5)), "Grey" -> (BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
