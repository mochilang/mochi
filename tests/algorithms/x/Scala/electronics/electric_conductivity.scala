// Generated by Mochi v0.10.59 on 2025-08-07 11:10:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Result(var kind: String, var value: Double)

def electric_conductivity(conductivity: Double, electron_conc: Double, mobility: Double): Result = {
  var zero_count: BigInt = 0
  if (conductivity == 0.0) {
    zero_count = zero_count + 1
  }
  if (electron_conc == 0.0) {
    zero_count = zero_count + 1
  }
  if (mobility == 0.0) {
    zero_count = zero_count + 1
  }
  if (zero_count != 1) {
    throw new RuntimeException(String.valueOf("You cannot supply more or less than 2 values"))
  }
  if (conductivity < 0.0) {
    throw new RuntimeException(String.valueOf("Conductivity cannot be negative"))
  }
  if (electron_conc < 0.0) {
    throw new RuntimeException(String.valueOf("Electron concentration cannot be negative"))
  }
  if (mobility < 0.0) {
    throw new RuntimeException(String.valueOf("mobility cannot be negative"))
  }
  if (conductivity == 0.0) {
    return Result("conductivity", mobility * electron_conc * ELECTRON_CHARGE)
  }
  if (electron_conc == 0.0) {
    return Result("electron_conc", conductivity / (mobility * ELECTRON_CHARGE))
  }
  return Result("mobility", conductivity / (electron_conc * ELECTRON_CHARGE))
}

val ELECTRON_CHARGE: Double = 0.00000000000000000016021

val r1: Result = electric_conductivity(25.0, 100.0, 0.0)

val r2: Result = electric_conductivity(0.0, 1600.0, 200.0)

val r3: Result = electric_conductivity(1000.0, 0.0, 1200.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(r1.kind + " " + String.valueOf(r1.value))
    println(r2.kind + " " + String.valueOf(r2.value))
    println(r3.kind + " " + String.valueOf(r3.value))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
