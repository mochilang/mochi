// Generated by Mochi v0.10.64 on 2025-08-13 16:16:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def expApprox(x: Double): Double = {
  var y: Double = x
  var is_neg: Boolean = false
  if (x < 0.0) {
    is_neg = true
    y = -x
  }
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(30)) {
    term = term * y / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  if (is_neg) {
    return 1.0 / sum
  }
  return sum
}

def round3(x: Double): Double = {
  var scaled: Double = x * 1000.0
  if (scaled >= 0.0) {
    scaled = scaled + 0.5
  } else {
    scaled = scaled - 0.5
  }
  val scaled_int: BigInt = BigInt(scaled.toString.toDouble.toInt)
  return scaled_int.toString.toDouble / 1000.0
}

def charging_capacitor(source_voltage: Double, resistance: Double, capacitance: Double, time_sec: Double): Double = {
  if (source_voltage <= 0.0) {
    throw new RuntimeException(String.valueOf("Source voltage must be positive."))
  }
  if (resistance <= 0.0) {
    throw new RuntimeException(String.valueOf("Resistance must be positive."))
  }
  if (capacitance <= 0.0) {
    throw new RuntimeException(String.valueOf("Capacitance must be positive."))
  }
  val exponent: Double = -time_sec / (resistance * capacitance)
  val voltage: Double = source_voltage * (1.0 - expApprox(exponent))
  return round3(voltage)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(charging_capacitor(0.2, 0.9, 8.4, 0.5))
    println(charging_capacitor(2.2, 3.5, 2.4, 9.0))
    println(charging_capacitor(15.0, 200.0, 20.0, 2.0))
    println(charging_capacitor(20.0, 2000.0, 0.0003, 4.0))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
