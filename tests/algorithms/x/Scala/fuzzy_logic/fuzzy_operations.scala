// Generated by Mochi v0.10.64 on 2025-08-13 16:21:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => d.toString
  case other => String.valueOf(other)
}

case class FuzzySet(var name: String, var left_boundary: Double, var peak: Double, var right_boundary: Double)

def stringify(fs: FuzzySet): String = {
  return fs.asInstanceOf[FuzzySet].name + ": [" + _str(fs.asInstanceOf[FuzzySet].left_boundary) + ", " + _str(fs.asInstanceOf[FuzzySet].peak) + ", " + _str(fs.asInstanceOf[FuzzySet].right_boundary) + "]"
}

def max2(a: Double, b: Double): Double = {
  if (a > b) {
    return a
  }
  return b
}

def min2(a: Double, b: Double): Double = {
  if (a < b) {
    return a
  }
  return b
}

def complement(fs: FuzzySet): FuzzySet = {
  return FuzzySet("\u00ac" + fs.asInstanceOf[FuzzySet].name, 1.0 - fs.asInstanceOf[FuzzySet].right_boundary, 1.0 - fs.asInstanceOf[FuzzySet].left_boundary, 1.0 - fs.asInstanceOf[FuzzySet].peak)
}

def intersection(a: FuzzySet, b: FuzzySet): FuzzySet = {
  return FuzzySet(a.asInstanceOf[FuzzySet].name + " \u2229 " + b.asInstanceOf[FuzzySet].name, max2(a.asInstanceOf[FuzzySet].left_boundary, b.asInstanceOf[FuzzySet].left_boundary), min2(a.asInstanceOf[FuzzySet].right_boundary, b.asInstanceOf[FuzzySet].right_boundary), (a.asInstanceOf[FuzzySet].peak + b.asInstanceOf[FuzzySet].peak) / 2.0)
}

def union(a: FuzzySet, b: FuzzySet): FuzzySet = {
  return FuzzySet(a.asInstanceOf[FuzzySet].name + " U " + b.asInstanceOf[FuzzySet].name, min2(a.asInstanceOf[FuzzySet].left_boundary, b.asInstanceOf[FuzzySet].left_boundary), max2(a.asInstanceOf[FuzzySet].right_boundary, b.asInstanceOf[FuzzySet].right_boundary), (a.asInstanceOf[FuzzySet].peak + b.asInstanceOf[FuzzySet].peak) / 2.0)
}

def membership(fs: FuzzySet, x: Double): Double = {
  if ((x <= fs.asInstanceOf[FuzzySet].left_boundary || x >= fs.asInstanceOf[FuzzySet].right_boundary).asInstanceOf[Boolean]) {
    return 0.0
  }
  if ((fs.asInstanceOf[FuzzySet].left_boundary < x && x <= fs.asInstanceOf[FuzzySet].peak).asInstanceOf[Boolean]) {
    return (x - fs.asInstanceOf[FuzzySet].left_boundary) / (fs.asInstanceOf[FuzzySet].peak - fs.asInstanceOf[FuzzySet].left_boundary)
  }
  if ((fs.asInstanceOf[FuzzySet].peak < x && x < fs.asInstanceOf[FuzzySet].right_boundary).asInstanceOf[Boolean]) {
    return (fs.asInstanceOf[FuzzySet].right_boundary - x) / (fs.asInstanceOf[FuzzySet].right_boundary - fs.asInstanceOf[FuzzySet].peak)
  }
  return 0.0
}

val sheru: FuzzySet = FuzzySet("Sheru", 0.4, 1.0, 0.6)

val siya: FuzzySet = FuzzySet("Siya", 0.5, 1.0, 0.7)

val sheru_comp: FuzzySet = complement(sheru)

val inter: FuzzySet = intersection(siya, sheru)

val uni: FuzzySet = union(siya, sheru)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(stringify(sheru))
    println(stringify(siya))
    println(stringify(sheru_comp))
    println(stringify(inter))
    println("Sheru membership 0.5: " + _str(membership(sheru, 0.5)))
    println("Sheru membership 0.6: " + _str(membership(sheru, 0.6)))
    println(stringify(uni))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
