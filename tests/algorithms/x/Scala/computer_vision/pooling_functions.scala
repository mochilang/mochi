// Generated by Mochi v0.10.59 on 2025-08-06 22:14:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def maxpooling(arr: ArrayBuffer[ArrayBuffer[BigInt]], size: BigInt, stride: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((arr).size)
  if ((n == 0 || BigInt((arr((0.toInt).toInt)).size) != n).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("The input array is not a square matrix"))
  }
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i + size <= n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j + size <= n) {
      var max_val: BigInt = arr((i.toInt).toInt)((j.toInt).toInt)
      var r: BigInt = i
      while (r < i + size) {
        var c: BigInt = j
        while (c < j + size) {
          val `val`: BigInt = arr((r.toInt).toInt)((c.toInt).toInt)
          if (`val` > max_val) {
            max_val = `val`
          }
          c = c + 1
        }
        r = r + 1
      }
      row = row :+ max_val
      j = j + stride
    }
    result = result :+ row
    i = i + stride
  }
  return result
}

def avgpooling(arr: ArrayBuffer[ArrayBuffer[BigInt]], size: BigInt, stride: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((arr).size)
  if ((n == 0 || BigInt((arr((0.toInt).toInt)).size) != n).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("The input array is not a square matrix"))
  }
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i + size <= n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j + size <= n) {
      var sum: BigInt = 0
      var r: BigInt = i
      while (r < i + size) {
        var c: BigInt = j
        while (c < j + size) {
          sum = sum + arr((r.toInt).toInt)((c.toInt).toInt)
          c = c + 1
        }
        r = r + 1
      }
      row = row :+ sum / (size * size)
      j = j + stride
    }
    result = result :+ row
    i = i + stride
  }
  return result
}

def print_matrix(mat: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = 0
    while (j < BigInt((mat((i.toInt).toInt)).size)) {
      line = line + String.valueOf(mat((i.toInt).toInt)((j.toInt).toInt))
      if (j < BigInt((mat((i.toInt).toInt)).size) - 1) {
        line = line + " "
      }
      j = j + 1
    }
    println(line)
    i = i + 1
  }
}

def main(): Any = {
  val arr1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 2, 3, 4), ArrayBuffer(5, 6, 7, 8), ArrayBuffer(9, 10, 11, 12), ArrayBuffer(13, 14, 15, 16))
  val arr2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(147, 180, 122), ArrayBuffer(241, 76, 32), ArrayBuffer(126, 13, 157))
  print_matrix(maxpooling(arr1, 2, 2))
  print_matrix(maxpooling(arr2, 2, 1))
  print_matrix(avgpooling(arr1, 2, 2))
  print_matrix(avgpooling(arr2, 2, 1))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
