// Generated by Mochi v0.10.59 on 2025-08-06 22:13:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_int(n: BigInt): BigInt = {
  if (n < 0) {
    return -n
  }
  return n
}

def sqrt(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = 0
  while (i < 10) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def ln(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  val e: Double = 2.718281828
  var n: BigInt = 0
  var y: Double = x
  while (y >= e) {
    y = y / e
    n = n + 1
  }
  while (y <= 1.0 / e) {
    y = y * e
    n = n - 1
  }
  y = y - 1.0
  var term: Double = y
  var result: Double = 0.0
  var k: BigInt = 1
  while (k <= 20) {
    if (k % 2 == 1) {
      result = result + term / (1.0 * k.toString.toDouble)
    } else {
      result = result - term / (1.0 * k.toString.toDouble)
    }
    term = term * y
    k = k + 1
  }
  return result + 1.0 * n.toString.toDouble
}

def matrix_concurrency(image: ArrayBuffer[ArrayBuffer[BigInt]], coord: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[Double]] = {
  val offset_x: BigInt = coord((0.toInt).toInt)
  val offset_y: BigInt = coord((1.toInt).toInt)
  var max_val: BigInt = 0
  for (r <- (0).toInt until (BigInt((image).size)).toInt) {
    for (c <- (0).toInt until (BigInt((image((r.toInt).toInt)).size)).toInt) {
      if (image((r.toInt).toInt)((c.toInt).toInt) > max_val) {
        max_val = image((r.toInt).toInt)((c.toInt).toInt)
      }
    }
  }
  val size: BigInt = max_val + 1
  var matrix: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  for (i <- (0).toInt until (size).toInt) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    for (j <- (0).toInt until (size).toInt) {
      row = row :+ 0.0
    }
    matrix = matrix :+ row
  }
  for (x <- (1).toInt until (BigInt((image).size) - 1).toInt) {
    for (y <- (1).toInt until (BigInt((image((x.toInt).toInt)).size) - 1).toInt) {
      val base: BigInt = image((x.toInt).toInt)((y.toInt).toInt)
      val offset: BigInt = image(((x + offset_x).toInt).toInt)(((y + offset_y).toInt).toInt)
      matrix((base).toInt)((offset).toInt) = matrix((base.toInt).toInt)((offset.toInt).toInt) + 1.0
    }
  }
  var total: Double = 0.0
  for (i <- (0).toInt until (size).toInt) {
    for (j <- (0).toInt until (size).toInt) {
      total = total + matrix((i.toInt).toInt)((j.toInt).toInt)
    }
  }
  if (total == 0.0) {
    return matrix
  }
  for (i <- (0).toInt until (size).toInt) {
    for (j <- (0).toInt until (size).toInt) {
      matrix((i).toInt)((j).toInt) = matrix((i.toInt).toInt)((j.toInt).toInt) / total
    }
  }
  return matrix
}

def haralick_descriptors(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Double] = {
  val rows: BigInt = BigInt((matrix).size)
  val cols: BigInt = BigInt((matrix((0.toInt).toInt)).size)
  var maximum_prob: Double = 0.0
  var correlation: Double = 0.0
  var energy: Double = 0.0
  var contrast: Double = 0.0
  var dissimilarity: Double = 0.0
  var inverse_difference: Double = 0.0
  var homogeneity: Double = 0.0
  var entropy: Double = 0.0
  var i: BigInt = 0
  while (i < rows) {
    var j: BigInt = 0
    while (j < cols) {
      val `val`: Double = matrix((i.toInt).toInt)((j.toInt).toInt)
      if (`val` > maximum_prob) {
        maximum_prob = `val`
      }
      correlation = correlation + 1.0 * i.toString.toDouble * j.toString.toDouble * `val`
      energy = energy + `val` * `val`
      val diff: BigInt = i - j
      val adiff: BigInt = abs_int(diff)
      contrast = contrast + `val` * (1.0 * diff.toString.toDouble * diff.toString.toDouble)
      dissimilarity = dissimilarity + `val` * (1.0 * adiff.toString.toDouble)
      inverse_difference = inverse_difference + `val` / (1.0 + 1.0 * adiff.toString.toDouble)
      homogeneity = homogeneity + `val` / (1.0 + 1.0 * diff.toString.toDouble * diff.toString.toDouble)
      if (`val` > 0.0) {
        entropy = entropy - `val` * ln(`val`)
      }
      j = j + 1
    }
    i = i + 1
  }
  return ArrayBuffer(maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy)
}

val image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0), ArrayBuffer(1, 0, 1), ArrayBuffer(0, 1, 0))

val glcm: ArrayBuffer[ArrayBuffer[Double]] = matrix_concurrency(image, ArrayBuffer(0, 1))

val descriptors: ArrayBuffer[Double] = haralick_descriptors(glcm)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var idx: BigInt = 0
    while (idx < BigInt((descriptors).size)) {
      println(String.valueOf(descriptors((idx.toInt).toInt)))
      idx = idx + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
