// Generated by Mochi v0.10.59 on 2025-08-06 22:01:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def conv2d(image: ArrayBuffer[ArrayBuffer[Double]], kernel: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((image).size)
  val cols: BigInt = BigInt((image((0.toInt).toInt)).size)
  val k: BigInt = BigInt((kernel).size)
  var output: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= rows - k) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= cols - k) {
      var sum: Double = 0.0
      var ki: BigInt = 0
      while (ki < k) {
        var kj: BigInt = 0
        while (kj < k) {
          sum = sum + image(((i + ki).toInt).toInt)(((j + kj).toInt).toInt) * kernel((ki.toInt).toInt)((kj.toInt).toInt)
          kj = kj + 1
        }
        ki = ki + 1
      }
      row = row :+ sum
      j = j + 1
    }
    output = output :+ row
    i = i + 1
  }
  return output
}

def relu_matrix(m: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var out: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  for (row <- m) {
    var new_row: ArrayBuffer[Double] = ArrayBuffer()
    for (v <- row) {
      if (v > 0.0) {
        new_row = new_row :+ v
      } else {
        new_row = new_row :+ 0.0
      }
    }
    out = out :+ new_row
  }
  return out
}

def max_pool2x2(m: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((m).size)
  val cols: BigInt = BigInt((m((0.toInt).toInt)).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < rows) {
    var new_row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < cols) {
      var max_val: Double = m((i.toInt).toInt)((j.toInt).toInt)
      if (m((i.toInt).toInt)(((j + 1).toInt).toInt) > max_val) {
        max_val = m((i.toInt).toInt)(((j + 1).toInt).toInt)
      }
      if (m(((i + 1).toInt).toInt)((j.toInt).toInt) > max_val) {
        max_val = m(((i + 1).toInt).toInt)((j.toInt).toInt)
      }
      if (m(((i + 1).toInt).toInt)(((j + 1).toInt).toInt) > max_val) {
        max_val = m(((i + 1).toInt).toInt)(((j + 1).toInt).toInt)
      }
      new_row = new_row :+ max_val
      j = j + 2
    }
    out = out :+ new_row
    i = i + 2
  }
  return out
}

def flatten(m: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer()
  for (row <- m) {
    for (v <- row) {
      res = res :+ v
    }
  }
  return res
}

def dense(inputs: ArrayBuffer[Double], weights: ArrayBuffer[Double], bias: Double): Double = {
  var s: Double = bias
  var i: BigInt = 0
  while (i < BigInt((inputs).size)) {
    s = s + inputs((i.toInt).toInt) * weights((i.toInt).toInt)
    i = i + 1
  }
  return s
}

def exp_approx(x: Double): Double = {
  var sum: Double = 1.0
  var term: Double = 1.0
  var i: BigInt = 1
  while (i <= 10) {
    term = term * x / i.toString.toDouble
    sum = sum + term
    i = i + 1
  }
  return sum
}

def sigmoid(x: Double): Double = {
  return 1.0 / (1.0 + exp_approx(-x))
}

val image: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 1.0, 1.0, 0.0, 0.0, 0.0), ArrayBuffer(0.0, 1.0, 1.0, 0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 1.0, 1.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 1.0, 1.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0, 0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))

val kernel: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 0.0, -1.0), ArrayBuffer(1.0, 0.0, -1.0), ArrayBuffer(1.0, 0.0, -1.0))

val conv: ArrayBuffer[ArrayBuffer[Double]] = conv2d(image, kernel)

val activated: ArrayBuffer[ArrayBuffer[Double]] = relu_matrix(conv)

val pooled: ArrayBuffer[ArrayBuffer[Double]] = max_pool2x2(activated)

val flat: ArrayBuffer[Double] = flatten(pooled)

val weights: ArrayBuffer[Double] = ArrayBuffer(0.5, -0.4, 0.3, 0.1)

val bias: Double = 0.0

val output: Double = dense(flat, weights, bias)

val probability: Double = sigmoid(output)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    if (probability >= 0.5) {
      println("Abnormality detected")
    } else {
      println("Normal")
    }
    println("Probability:")
    println(probability)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
