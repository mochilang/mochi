// Generated by Mochi v0.10.59 on 2025-08-06 22:13:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def zeros(h: BigInt, w: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var m: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var y: BigInt = 0
  while (y < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var x: BigInt = 0
    while (x < w) {
      row = row :+ 0.0
      x = x + 1
    }
    m = m :+ row
    y = y + 1
  }
  return m
}

def gradient(img: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = {
  val h: BigInt = BigInt((img).size)
  val w: BigInt = BigInt((img((0.toInt).toInt)).size)
  var dx: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var dy: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = 1
  while (y < h - 1) {
    var x: BigInt = 1
    while (x < w - 1) {
      dx((y).toInt)((x).toInt) = (img((y.toInt).toInt)(((x + 1).toInt).toInt)).toString.toDouble - (img((y.toInt).toInt)(((x - 1).toInt).toInt)).toString.toDouble
      dy((y).toInt)((x).toInt) = (img(((y + 1).toInt).toInt)((x.toInt).toInt)).toString.toDouble - (img(((y - 1).toInt).toInt)((x.toInt).toInt)).toString.toDouble
      x = x + 1
    }
    y = y + 1
  }
  return (ArrayBuffer(dx.asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]], dy.asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]])).asInstanceOf[ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]]]
}

def harris(img: ArrayBuffer[ArrayBuffer[BigInt]], k: Double, window: BigInt, thresh: Double): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val h: BigInt = BigInt((img).size)
  val w: BigInt = BigInt((img((0.toInt).toInt)).size)
  val grads: ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = gradient(img)
  val dx: ArrayBuffer[ArrayBuffer[Double]] = grads((0.toInt).toInt)
  val dy: ArrayBuffer[ArrayBuffer[Double]] = grads((1.toInt).toInt)
  var ixx: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var iyy: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var ixy: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = 0
  while (y < h) {
    var x: BigInt = 0
    while (x < w) {
      val gx: Double = dx((y.toInt).toInt)((x.toInt).toInt)
      val gy: Double = dy((y.toInt).toInt)((x.toInt).toInt)
      ixx((y).toInt)((x).toInt) = gx * gx
      iyy((y).toInt)((x).toInt) = gy * gy
      ixy((y).toInt)((x).toInt) = gx * gy
      x = x + 1
    }
    y = y + 1
  }
  val offset: BigInt = window / 2
  var corners: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  y = offset
  while (y < h - offset) {
    var x: BigInt = offset
    while (x < w - offset) {
      var wxx: Double = 0.0
      var wyy: Double = 0.0
      var wxy: Double = 0.0
      var yy: BigInt = y - offset
      while (yy <= y + offset) {
        var xx: BigInt = x - offset
        while (xx <= x + offset) {
          wxx = wxx + ixx((yy.toInt).toInt)((xx.toInt).toInt)
          wyy = wyy + iyy((yy.toInt).toInt)((xx.toInt).toInt)
          wxy = wxy + ixy((yy.toInt).toInt)((xx.toInt).toInt)
          xx = xx + 1
        }
        yy = yy + 1
      }
      val det: Double = wxx * wyy - wxy * wxy
      val trace: Double = wxx + wyy
      val r: Double = det - k * (trace * trace)
      if (r > thresh) {
        corners = corners :+ (ArrayBuffer(BigInt(x.toString.toDouble.toInt), BigInt(y.toString.toDouble.toInt))).asInstanceOf[ArrayBuffer[BigInt]]
      }
      x = x + 1
    }
    y = y + 1
  }
  return corners
}

val img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 1, 1, 1, 1), ArrayBuffer(1, 255, 255, 255, 1), ArrayBuffer(1, 255, 0, 255, 1), ArrayBuffer(1, 255, 255, 255, 1), ArrayBuffer(1, 1, 1, 1, 1))

val corners: ArrayBuffer[ArrayBuffer[BigInt]] = harris(img, 0.04, 3, 10000000000.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(corners)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
