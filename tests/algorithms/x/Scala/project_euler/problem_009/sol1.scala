// Generated by Mochi v0.10.62 on 2025-08-09 16:39:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def solution(): BigInt = {
  var a: BigInt = BigInt(0)
  while (a < BigInt(300)) {
    var b: BigInt = a + BigInt(1)
    while (b < BigInt(400)) {
      var c: BigInt = b + BigInt(1)
      while (c < BigInt(500)) {
        if ((a + b + c == BigInt(1000) && a * a + b * b == c * c).asInstanceOf[Boolean]) {
          return a * b * c
        }
        c = c + BigInt(1)
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return -BigInt(1)
}

def solution_fast(): BigInt = {
  var a: BigInt = BigInt(0)
  while (a < BigInt(300)) {
    var b: BigInt = BigInt(0)
    while (b < BigInt(400)) {
      val c: BigInt = BigInt(1000) - a - b
      if (((a < b && b < c).asInstanceOf[Boolean] && a * a + b * b == c * c).asInstanceOf[Boolean]) {
        return a * b * c
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return -BigInt(1)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(solution_fast()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
