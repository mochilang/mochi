// Generated by Mochi v0.10.63 on 2025-08-11 16:30:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def parse_int(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    value = value * BigInt(10) + BigInt(c.toString.head.asDigit)
    i = i + BigInt(1)
  }
  return value
}

def join(xs: ArrayBuffer[String]): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    s = s + xs.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return s
}

def contains(xs: ArrayBuffer[String], c: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == c) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def index_of(xs: ArrayBuffer[String], c: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == c) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def remove_at(xs: ArrayBuffer[String], idx: BigInt): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return res
}

def unique_chars(logins: ArrayBuffer[String]): ArrayBuffer[String] = {
  var chars: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((logins).size)) {
    val login: String = logins.lift((i.toInt).toInt).getOrElse("")
    var j: BigInt = BigInt(0)
    while (j < BigInt((login).size)) {
      val c: String = login.slice((j.toInt).toInt, (j.toInt).toInt + 1)
      if (!(chars.contains(c)).asInstanceOf[Boolean]) {
        chars = chars :+ (c)
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return chars
}

def satisfies(permutation: ArrayBuffer[String], logins: ArrayBuffer[String]): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((logins).size)) {
    val login: String = logins.lift((i.toInt).toInt).getOrElse("")
    val i0: BigInt = index_of(permutation, (login.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1)).toString)
    val i1: BigInt = index_of(permutation, (login.slice((BigInt(1).toInt).toInt, (BigInt(1).toInt).toInt + 1)).toString)
    val i2: BigInt = index_of(permutation, (login.slice((BigInt(2).toInt).toInt, (BigInt(2).toInt).toInt + 1)).toString)
    if (!(i0 < i1 && i1 < i2).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def search(chars: ArrayBuffer[String], current: ArrayBuffer[String], logins: ArrayBuffer[String]): String = {
  if (BigInt((chars).size) == BigInt(0)) {
    if (satisfies(current, logins)) {
      return join(current)
    }
    return ""
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((chars).size)) {
    val c: String = chars.lift((i.toInt).toInt).getOrElse("")
    val rest: ArrayBuffer[String] = remove_at(chars, i)
    val next: ArrayBuffer[String] = current :+ (c)
    val res: String = search(rest, next, logins)
    if (res != "") {
      return res
    }
    i = i + BigInt(1)
  }
  return ""
}

def find_secret_passcode(logins: ArrayBuffer[String]): BigInt = {
  val chars: ArrayBuffer[String] = unique_chars(logins)
  val s: String = search(chars, ArrayBuffer[String](), logins)
  if (s == "") {
    return -BigInt(1)
  }
  return parse_int(s)
}

val logins1: ArrayBuffer[String] = ArrayBuffer("135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280")

val logins2: ArrayBuffer[String] = ArrayBuffer("426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(find_secret_passcode(logins1)))
    println(_str(find_secret_passcode(logins2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
