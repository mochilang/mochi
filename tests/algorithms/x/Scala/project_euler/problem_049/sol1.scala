// Generated by Mochi v0.10.63 on 2025-08-11 15:28:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_prime(number: BigInt): Boolean = {
  if ((BigInt(1) < number && number < BigInt(4)).asInstanceOf[Boolean]) {
    return true
  }
  if (((number < BigInt(2) || number % BigInt(2) == BigInt(0)).asInstanceOf[Boolean] || number % BigInt(3) == BigInt(0)).asInstanceOf[Boolean]) {
    return false
  }
  var i: BigInt = BigInt(5)
  while (i * i <= number) {
    if ((number % i == BigInt(0) || number % (i + BigInt(2)) == BigInt(0)).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(6)
  }
  return true
}

def search(target: BigInt, arr: ArrayBuffer[BigInt]): Boolean = {
  var left: BigInt = BigInt(0)
  var right: BigInt = BigInt((arr).size) - BigInt(1)
  while (left <= right) {
    val middle: BigInt = (left + right) / BigInt(2)
    if (arr.lift((middle.toInt).toInt).getOrElse(null) == target) {
      return true
    }
    if (arr.lift((middle.toInt).toInt).getOrElse(null) < target) {
      left = middle + BigInt(1)
    } else {
      right = middle - BigInt(1)
    }
  }
  return false
}

def sort_int(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = xs
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    var j: BigInt = i + BigInt(1)
    while (j < BigInt((arr).size)) {
      if (arr.lift((j.toInt).toInt).getOrElse(null) < arr.lift((i.toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = arr.lift((i.toInt).toInt).getOrElse(null)
        arr((i).toInt) = arr.lift((j.toInt).toInt).getOrElse(null)
        arr((j).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def permutations_of_number(n: BigInt): ArrayBuffer[BigInt] = {
  val s = _str(n)
  var d: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    d = d :+ (BigInt((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString.head.asDigit))
    i = i + BigInt(1)
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var a: BigInt = BigInt(0)
  while (a < BigInt((d).size)) {
    var b: BigInt = BigInt(0)
    while (b < BigInt((d).size)) {
      if (b != a) {
        var c: BigInt = BigInt(0)
        while (c < BigInt((d).size)) {
          if ((c != a && c != b).asInstanceOf[Boolean]) {
            var e: BigInt = BigInt(0)
            while (e < BigInt((d).size)) {
              if (((e != a && e != b).asInstanceOf[Boolean] && e != c).asInstanceOf[Boolean]) {
                val `val`: BigInt = d.lift((a.toInt).toInt).getOrElse(null) * BigInt(1000) + d.lift((b.toInt).toInt).getOrElse(null) * BigInt(100) + d.lift((c.toInt).toInt).getOrElse(null) * BigInt(10) + d.lift((e.toInt).toInt).getOrElse(null)
                res = res :+ (`val`)
              }
              e = e + BigInt(1)
            }
          }
          c = c + BigInt(1)
        }
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return res
}

def abs_int(x: BigInt): BigInt = {
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

def contains_int(xs: ArrayBuffer[BigInt], v: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(null) == v) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def solution(): BigInt = {
  var prime_list: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var n: BigInt = BigInt(1001)
  while (n < BigInt(10000)) {
    if (is_prime(n)) {
      prime_list = prime_list :+ (n)
    }
    n = n + BigInt(2)
  }
  var candidates: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((prime_list).size)) {
    val number: BigInt = prime_list.lift((i.toInt).toInt).getOrElse(null)
    var tmp: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    val perms: ArrayBuffer[BigInt] = permutations_of_number(number)
    var j: BigInt = BigInt(0)
    while (j < BigInt((perms).size)) {
      val prime: BigInt = perms.lift((j.toInt).toInt).getOrElse(null)
      if ((prime % BigInt(2) != BigInt(0) && search(prime, prime_list)).asInstanceOf[Boolean]) {
        tmp = tmp :+ (prime)
      }
      j = j + BigInt(1)
    }
    tmp = sort_int(tmp)
    if (BigInt((tmp).size) >= BigInt(3)) {
      candidates = candidates :+ (tmp)
    }
    i = i + BigInt(1)
  }
  var passed: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  i = BigInt(0)
  val _br13 = new Breaks
  _br13.breakable {
    while (i < BigInt((candidates).size)) {
      val candidate: ArrayBuffer[BigInt] = candidates.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var found: Boolean = false
      var a: BigInt = BigInt(0)
      val _br14 = new Breaks
      _br14.breakable {
        while (a < BigInt((candidate).size)) {
          var b: BigInt = a + BigInt(1)
          val _br15 = new Breaks
          _br15.breakable {
            while (b < BigInt((candidate).size)) {
              var c: BigInt = b + BigInt(1)
              val _br16 = new Breaks
              _br16.breakable {
                while (c < BigInt((candidate).size)) {
                  val x: BigInt = candidate.lift((a.toInt).toInt).getOrElse(null)
                  val y: BigInt = candidate.lift((b.toInt).toInt).getOrElse(null)
                  val z: BigInt = candidate.lift((c.toInt).toInt).getOrElse(null)
                  if ((((abs_int(x - y) == abs_int(y - z) && x != y).asInstanceOf[Boolean] && x != z).asInstanceOf[Boolean] && y != z).asInstanceOf[Boolean]) {
                    val triple: ArrayBuffer[BigInt] = sort_int(ArrayBuffer(x, y, z))
                    passed = passed :+ (triple)
                    found = true
                    _br16.break()
                  }
                  c = c + BigInt(1)
                }
              }
              if (found) {
                _br15.break()
              }
              b = b + BigInt(1)
            }
          }
          if (found) {
            _br14.break()
          }
          a = a + BigInt(1)
        }
      }
      i = i + BigInt(1)
    }
  }
  var answer_nums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((passed).size)) {
    val seq: ArrayBuffer[BigInt] = passed.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    val `val`: BigInt = BigInt((_str(seq.lift((BigInt(0).toInt).toInt).getOrElse(null))).toString.head.asDigit) + BigInt((_str(seq.lift((BigInt(1).toInt).toInt).getOrElse(null))).toString.head.asDigit) + _str(seq.lift((BigInt(2).toInt).toInt).getOrElse(null))
    if (!contains_int(answer_nums, `val`)) {
      answer_nums = answer_nums :+ (`val`)
    }
    i = i + BigInt(1)
  }
  var max_val: BigInt = answer_nums.lift((BigInt(0).toInt).toInt).getOrElse(null)
  i = BigInt(1)
  while (i < BigInt((answer_nums).size)) {
    if (answer_nums.lift((i.toInt).toInt).getOrElse(null) > max_val) {
      max_val = answer_nums.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return max_val
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(solution())
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
