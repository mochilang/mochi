// Generated by Mochi v0.10.63 on 2025-08-11 15:24:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def int_sqrt(n: BigInt): BigInt = {
  var low: BigInt = BigInt(0)
  var high: BigInt = n
  while (low <= high) {
    val mid: BigInt = (low + high) / BigInt(2)
    val sq: BigInt = mid * mid
    if (sq == n) {
      return mid
    }
    if (sq < n) {
      low = mid + BigInt(1)
    } else {
      high = mid - BigInt(1)
    }
  }
  return high
}

def pythagorean_triple(max_perimeter: BigInt): scala.collection.mutable.Map[BigInt,BigInt] = {
  var triplets: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  var base: BigInt = BigInt(1)
  while (base <= max_perimeter) {
    var perpendicular: BigInt = base
    while (perpendicular <= max_perimeter) {
      val hyp_sq: BigInt = base * base + perpendicular * perpendicular
      val hyp: BigInt = int_sqrt(hyp_sq)
      if (hyp * hyp == hyp_sq) {
        val perimeter: BigInt = base + perpendicular + hyp
        if (perimeter <= max_perimeter) {
          if ((triplets.contains(perimeter)).asInstanceOf[Boolean]) {
            triplets.update(perimeter, triplets.getOrElse(perimeter, null).asInstanceOf[BigInt] + BigInt(1))
          } else {
            triplets.update(perimeter, BigInt(1))
          }
        }
      }
      perpendicular = perpendicular + BigInt(1)
    }
    base = base + BigInt(1)
  }
  return triplets
}

def max_perimeter(counts: scala.collection.mutable.Map[BigInt,BigInt]): BigInt = {
  var best_p: BigInt = BigInt(0)
  var max_count: BigInt = BigInt(0)
  for (p <- counts.keys) {
    val count: BigInt = counts.getOrElse(p, null).asInstanceOf[BigInt]
    if ((count > max_count || (count == max_count && p > best_p).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      max_count = count
      best_p = p
    }
  }
  return best_p
}

def solution(n: BigInt): BigInt = {
  val triplets: scala.collection.mutable.Map[BigInt,BigInt] = pythagorean_triple(n)
  return max_perimeter(triplets)
}

def main(): Any = {
  val s200: BigInt = max_perimeter(pythagorean_triple(BigInt(200)))
  val s100: BigInt = max_perimeter(pythagorean_triple(BigInt(100)))
  println(_str(s100))
  println(_str(s200))
  val best: BigInt = max_perimeter(pythagorean_triple(BigInt(1000)))
  println(_str(best))
  println("Perimeter " + _str(best) + " has maximum solutions")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
