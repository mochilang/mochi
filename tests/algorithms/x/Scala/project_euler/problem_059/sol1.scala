// Generated by Mochi v0.10.70 on 2025-08-22 23:18:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

private def _ord(s: String): Int = {
  if (s != null && s.nonEmpty) s.codePointAt(0) else 0
}

def xor(a: BigInt, b: BigInt): BigInt = {
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var x: BigInt = a
  var y: BigInt = b
  while (x > BigInt(0) || y > BigInt(0)) {
    var abit: BigInt = x % BigInt(2)
    var bbit: BigInt = y % BigInt(2)
    if (abit != bbit) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
  }
  return res
}

def chr(code: BigInt): String = {
  if (code == BigInt(10)) {
    return "\n"
  }
  if (code == BigInt(13)) {
    return "\r"
  }
  if (code == BigInt(9)) {
    return "\t"
  }
  if ((code >= BigInt(32) && code < BigInt(127))) {
    return ascii_chars.slice((code - BigInt(32)).toInt, (code - BigInt(31)).toInt)
  }
  return ""
}

def ord(ch: String): BigInt = {
  if (ch == "\n") {
    return BigInt(10)
  }
  if (ch == "\r") {
    return BigInt(13)
  }
  if (ch == "\t") {
    return BigInt(9)
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((ascii_chars).length)) {
    if (ascii_chars.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return BigInt(32) + i
    }
    i = i + BigInt(1)
  }
  return BigInt(0)
}

def is_valid_ascii(code: BigInt): Boolean = {
  if ((code >= BigInt(32) && code <= BigInt(126))) {
    return true
  }
  if (((code == BigInt(9) || code == BigInt(10)).asInstanceOf[Boolean] || code == BigInt(13))) {
    return true
  }
  return false
}

def try_key(ciphertext: ArrayBuffer[BigInt], key: ArrayBuffer[BigInt]): String = {
  var decoded: String = ""
  i = BigInt(0)
  var klen: BigInt = BigInt((key).size)
  while (i < BigInt((ciphertext).size)) {
    var decodedchar: BigInt = xor(ciphertext.lift((i.toInt).toInt).getOrElse(BigInt(0)), key.lift(((i % klen).toInt).toInt).getOrElse(BigInt(0)))
    if (!is_valid_ascii(decodedchar)) {
      return null
    }
    decoded = decoded + chr(decodedchar)
    i = i + BigInt(1)
  }
  return decoded
}

def filter_valid_chars(ciphertext: ArrayBuffer[BigInt]): ArrayBuffer[String] = {
  var possibles: ArrayBuffer[String] = ArrayBuffer[String]()
  i = BigInt(0)
  while (i < BigInt((LOWERCASE_INTS).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((LOWERCASE_INTS).size)) {
      var k: BigInt = BigInt(0)
      while (k < BigInt((LOWERCASE_INTS).size)) {
        var key: ArrayBuffer[BigInt] = ArrayBuffer(LOWERCASE_INTS.lift((i.toInt).toInt).getOrElse(BigInt(0)), LOWERCASE_INTS.lift((j.toInt).toInt).getOrElse(BigInt(0)), LOWERCASE_INTS.lift((k.toInt).toInt).getOrElse(BigInt(0)))
        var decoded: String = try_key(ciphertext, key)
        if (decoded != null) {
          possibles = (possibles :+ (decoded))
        }
        k = k + BigInt(1)
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return possibles
}

def contains(s: String, sub: String): Boolean = {
  var n: BigInt = BigInt((s).size)
  var m: BigInt = BigInt((sub).size)
  if (m == BigInt(0)) {
    return true
  }
  i = BigInt(0)
  val _br6 = new Breaks
  _br6.breakable {
    while (i <= n - m) {
      var j: BigInt = BigInt(0)
      var is_match: Boolean = true
      val _br7 = new Breaks
      _br7.breakable {
        while (j < m) {
          if (s.slice(((i + j).toInt).toInt, ((i + j).toInt).toInt + 1) != sub.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
            is_match = false
            _br7.break()
          }
          j = j + BigInt(1)
        }
      }
      if (is_match) {
        return true
      }
      i = i + BigInt(1)
    }
  }
  return false
}

def filter_common_word(possibles: ArrayBuffer[String], common_word: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  i = BigInt(0)
  while (i < BigInt((possibles).size)) {
    var p: String = possibles.lift((i.toInt).toInt).getOrElse("")
    if (((p.toLowerCase()).contains(common_word))) {
      res = (res :+ (p))
    }
    i = i + BigInt(1)
  }
  return res
}

def solution(ciphertext: ArrayBuffer[BigInt]): BigInt = {
  var possibles: ArrayBuffer[String] = filter_valid_chars(ciphertext)
  i = BigInt(0)
  val _br9 = new Breaks
  _br9.breakable {
    while (i < BigInt((COMMON_WORDS).size)) {
      var word: String = COMMON_WORDS.lift((i.toInt).toInt).getOrElse("")
      possibles = filter_common_word(possibles, word)
      if (BigInt((possibles).size) == BigInt(1)) {
        _br9.break()
      }
      i = i + BigInt(1)
    }
  }
  var decoded_text: String = possibles.lift((BigInt(0).toInt).toInt).getOrElse("")
  var sum: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (j < BigInt((decoded_text).size)) {
    sum = sum + _ord(decoded_text.slice((j).toInt, (j + BigInt(1)).toInt))
    j = j + BigInt(1)
  }
  return sum
}

var ascii_chars: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

var LOWERCASE_INTS: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var i: BigInt = BigInt(97)

var COMMON_WORDS: ArrayBuffer[String] = ArrayBuffer("the", "be", "to", "of", "and", "in", "that", "have")

var ciphertext: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(17), BigInt(6), BigInt(1), BigInt(69), BigInt(12), BigInt(1), BigInt(69), BigInt(26), BigInt(11), BigInt(69), BigInt(1), BigInt(2), BigInt(69), BigInt(15), BigInt(10), BigInt(1), BigInt(78), BigInt(13), BigInt(11), BigInt(78), BigInt(16), BigInt(13), BigInt(15), BigInt(16), BigInt(69), BigInt(6), BigInt(5), BigInt(19), BigInt(11))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i <= BigInt(122)) {
      LOWERCASE_INTS = (LOWERCASE_INTS :+ (i))
      i = i + BigInt(1)
    }
    println(_str(_str(solution(ciphertext))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
