// Generated by Mochi v0.10.63 on 2025-08-11 15:22:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def num_digits(x: BigInt): BigInt = {
  var count: BigInt = BigInt(0)
  var n: BigInt = x
  while (n > BigInt(0)) {
    count = count + BigInt(1)
    n = n / BigInt(10)
  }
  return count
}

def solution(n: BigInt): BigInt = {
  var f1: BigInt = BigInt(1)
  var f2: BigInt = BigInt(1)
  var index: BigInt = BigInt(2)
  val _br1 = new Breaks
  _br1.breakable {
    while (true) {
      val f: BigInt = f1 + f2
      f1 = f2
      f2 = f
      index = index + BigInt(1)
      if (num_digits(f) == n) {
        _br1.break()
      }
    }
  }
  return index
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("solution(1000) = " + _str(solution(BigInt(1000))))
    println("solution(100) = " + _str(solution(BigInt(100))))
    println("solution(50) = " + _str(solution(BigInt(50))))
    println("solution(3) = " + _str(solution(BigInt(3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
