// Generated by Mochi v0.10.62 on 2025-08-09 16:40:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def max_product_four(grid: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var maximum: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt(17)) {
      val temp: BigInt = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) * grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + BigInt(1)).toInt).toInt).getOrElse(null) * grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + BigInt(2)).toInt).toInt).getOrElse(null) * grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + BigInt(3)).toInt).toInt).getOrElse(null)
      if (temp > maximum) {
        maximum = temp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt(17)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt(20)) {
      val temp: BigInt = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(2)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(3)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null)
      if (temp > maximum) {
        maximum = temp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt(17)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt(17)) {
      val temp: BigInt = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + BigInt(1)).toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(2)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + BigInt(2)).toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(3)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + BigInt(3)).toInt).toInt).getOrElse(null)
      if (temp > maximum) {
        maximum = temp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt(17)) {
    var j: BigInt = BigInt(3)
    while (j < BigInt(20)) {
      val temp: BigInt = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(2)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(2)).toInt).toInt).getOrElse(null) * grid.lift(((i + BigInt(3)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(3)).toInt).toInt).getOrElse(null)
      if (temp > maximum) {
        maximum = temp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return maximum
}

val grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(8), BigInt(2), BigInt(22), BigInt(97), BigInt(38), BigInt(15), BigInt(0), BigInt(40), BigInt(0), BigInt(75), BigInt(4), BigInt(5), BigInt(7), BigInt(78), BigInt(52), BigInt(12), BigInt(50), BigInt(77), BigInt(91), BigInt(8)), ArrayBuffer(BigInt(49), BigInt(49), BigInt(99), BigInt(40), BigInt(17), BigInt(81), BigInt(18), BigInt(57), BigInt(60), BigInt(87), BigInt(17), BigInt(40), BigInt(98), BigInt(43), BigInt(69), BigInt(48), BigInt(4), BigInt(56), BigInt(62), BigInt(0)), ArrayBuffer(BigInt(81), BigInt(49), BigInt(31), BigInt(73), BigInt(55), BigInt(79), BigInt(14), BigInt(29), BigInt(93), BigInt(71), BigInt(40), BigInt(67), BigInt(53), BigInt(88), BigInt(30), BigInt(3), BigInt(49), BigInt(13), BigInt(36), BigInt(65)), ArrayBuffer(BigInt(52), BigInt(70), BigInt(95), BigInt(23), BigInt(4), BigInt(60), BigInt(11), BigInt(42), BigInt(69), BigInt(24), BigInt(68), BigInt(56), BigInt(1), BigInt(32), BigInt(56), BigInt(71), BigInt(37), BigInt(2), BigInt(36), BigInt(91)), ArrayBuffer(BigInt(22), BigInt(31), BigInt(16), BigInt(71), BigInt(51), BigInt(67), BigInt(63), BigInt(89), BigInt(41), BigInt(92), BigInt(36), BigInt(54), BigInt(22), BigInt(40), BigInt(40), BigInt(28), BigInt(66), BigInt(33), BigInt(13), BigInt(80)), ArrayBuffer(BigInt(24), BigInt(47), BigInt(32), BigInt(60), BigInt(99), BigInt(3), BigInt(45), BigInt(2), BigInt(44), BigInt(75), BigInt(33), BigInt(53), BigInt(78), BigInt(36), BigInt(84), BigInt(20), BigInt(35), BigInt(17), BigInt(12), BigInt(50)), ArrayBuffer(BigInt(32), BigInt(98), BigInt(81), BigInt(28), BigInt(64), BigInt(23), BigInt(67), BigInt(10), BigInt(26), BigInt(38), BigInt(40), BigInt(67), BigInt(59), BigInt(54), BigInt(70), BigInt(66), BigInt(18), BigInt(38), BigInt(64), BigInt(70)), ArrayBuffer(BigInt(67), BigInt(26), BigInt(20), BigInt(68), BigInt(2), BigInt(62), BigInt(12), BigInt(20), BigInt(95), BigInt(63), BigInt(94), BigInt(39), BigInt(63), BigInt(8), BigInt(40), BigInt(91), BigInt(66), BigInt(49), BigInt(94), BigInt(21)), ArrayBuffer(BigInt(24), BigInt(55), BigInt(58), BigInt(5), BigInt(66), BigInt(73), BigInt(99), BigInt(26), BigInt(97), BigInt(17), BigInt(78), BigInt(78), BigInt(96), BigInt(83), BigInt(14), BigInt(88), BigInt(34), BigInt(89), BigInt(63), BigInt(72)), ArrayBuffer(BigInt(21), BigInt(36), BigInt(23), BigInt(9), BigInt(75), BigInt(0), BigInt(76), BigInt(44), BigInt(20), BigInt(45), BigInt(35), BigInt(14), BigInt(0), BigInt(61), BigInt(33), BigInt(97), BigInt(34), BigInt(31), BigInt(33), BigInt(95)), ArrayBuffer(BigInt(78), BigInt(17), BigInt(53), BigInt(28), BigInt(22), BigInt(75), BigInt(31), BigInt(67), BigInt(15), BigInt(94), BigInt(3), BigInt(80), BigInt(4), BigInt(62), BigInt(16), BigInt(14), BigInt(9), BigInt(53), BigInt(56), BigInt(92)), ArrayBuffer(BigInt(16), BigInt(39), BigInt(5), BigInt(42), BigInt(96), BigInt(35), BigInt(31), BigInt(47), BigInt(55), BigInt(58), BigInt(88), BigInt(24), BigInt(0), BigInt(17), BigInt(54), BigInt(24), BigInt(36), BigInt(29), BigInt(85), BigInt(57)), ArrayBuffer(BigInt(86), BigInt(56), BigInt(0), BigInt(48), BigInt(35), BigInt(71), BigInt(89), BigInt(7), BigInt(5), BigInt(44), BigInt(44), BigInt(37), BigInt(44), BigInt(60), BigInt(21), BigInt(58), BigInt(51), BigInt(54), BigInt(17), BigInt(58)), ArrayBuffer(BigInt(19), BigInt(80), BigInt(81), BigInt(68), BigInt(5), BigInt(94), BigInt(47), BigInt(69), BigInt(28), BigInt(73), BigInt(92), BigInt(13), BigInt(86), BigInt(52), BigInt(17), BigInt(77), BigInt(4), BigInt(89), BigInt(55), BigInt(40)), ArrayBuffer(BigInt(4), BigInt(52), BigInt(8), BigInt(83), BigInt(97), BigInt(35), BigInt(99), BigInt(16), BigInt(7), BigInt(97), BigInt(57), BigInt(32), BigInt(16), BigInt(26), BigInt(26), BigInt(79), BigInt(33), BigInt(27), BigInt(98), BigInt(66)), ArrayBuffer(BigInt(88), BigInt(36), BigInt(68), BigInt(87), BigInt(57), BigInt(62), BigInt(20), BigInt(72), BigInt(3), BigInt(46), BigInt(33), BigInt(67), BigInt(46), BigInt(55), BigInt(12), BigInt(32), BigInt(63), BigInt(93), BigInt(53), BigInt(69)), ArrayBuffer(BigInt(4), BigInt(42), BigInt(16), BigInt(73), BigInt(38), BigInt(25), BigInt(39), BigInt(11), BigInt(24), BigInt(94), BigInt(72), BigInt(18), BigInt(8), BigInt(46), BigInt(29), BigInt(32), BigInt(40), BigInt(62), BigInt(76), BigInt(36)), ArrayBuffer(BigInt(20), BigInt(69), BigInt(36), BigInt(41), BigInt(72), BigInt(30), BigInt(23), BigInt(88), BigInt(34), BigInt(62), BigInt(99), BigInt(69), BigInt(82), BigInt(67), BigInt(59), BigInt(85), BigInt(74), BigInt(4), BigInt(36), BigInt(16)), ArrayBuffer(BigInt(20), BigInt(73), BigInt(35), BigInt(29), BigInt(78), BigInt(31), BigInt(90), BigInt(1), BigInt(74), BigInt(31), BigInt(49), BigInt(71), BigInt(48), BigInt(86), BigInt(81), BigInt(16), BigInt(23), BigInt(57), BigInt(5), BigInt(54)), ArrayBuffer(BigInt(1), BigInt(70), BigInt(54), BigInt(71), BigInt(83), BigInt(51), BigInt(54), BigInt(69), BigInt(16), BigInt(92), BigInt(33), BigInt(48), BigInt(61), BigInt(43), BigInt(52), BigInt(1), BigInt(89), BigInt(19), BigInt(67), BigInt(48)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(max_product_four(grid)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
