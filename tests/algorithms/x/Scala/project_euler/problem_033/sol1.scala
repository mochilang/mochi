// Generated by Mochi v0.10.63 on 2025-08-11 15:23:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class FractionPair(var num: BigInt, var den: BigInt)

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = (if (a < BigInt(0)) -a else a)
  var y: BigInt = (if (b < BigInt(0)) -b else b)
  while (y != BigInt(0)) {
    val t: BigInt = x % y
    x = y
    y = t
  }
  return x
}

def is_digit_cancelling(num: BigInt, den: BigInt): Boolean = {
  if (num >= den) {
    return false
  }
  val num_unit: BigInt = num % BigInt(10)
  val num_tens: BigInt = num / BigInt(10)
  val den_unit: BigInt = den % BigInt(10)
  val den_tens: BigInt = den / BigInt(10)
  if (num_unit != den_tens) {
    return false
  }
  if (den_unit == BigInt(0)) {
    return false
  }
  return num * den_unit == num_tens * den
}

def find_fractions(): ArrayBuffer[FractionPair] = {
  var sols: ArrayBuffer[FractionPair] = ArrayBuffer[FractionPair]()
  var num: BigInt = BigInt(10)
  while (num < BigInt(100)) {
    var den: BigInt = num + BigInt(1)
    while (den < BigInt(100)) {
      if (is_digit_cancelling(num, den)) {
        sols = sols :+ (FractionPair(num, den))
      }
      den = den + BigInt(1)
    }
    num = num + BigInt(1)
  }
  return sols
}

def solution(): BigInt = {
  val fracs: ArrayBuffer[FractionPair] = find_fractions()
  var num_prod: BigInt = BigInt(1)
  var den_prod: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt((fracs).size)) {
    val f: FractionPair = fracs.lift((i.toInt).toInt).getOrElse(null)
    num_prod = num_prod * f.asInstanceOf[FractionPair].num
    den_prod = den_prod * f.asInstanceOf[FractionPair].den
    i = i + BigInt(1)
  }
  val g: BigInt = gcd(num_prod, den_prod)
  return den_prod / g
}

def main(): Any = {
  println(_str(solution()))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
