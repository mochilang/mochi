// Generated by Mochi v0.10.70 on 2025-08-22 15:50:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private val _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/project_euler/problem_042"
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

private def _read_file(path: String): String = {
  val f = new java.io.File(path)
  val p = if (f.exists) f else new java.io.File(_dataDir, path)
  try {
    val src = scala.io.Source.fromFile(p)
    try src.mkString finally src.close()
  } catch { case _: Throwable => "" }
}

private def _ord(s: String): Int = {
  if (s != null && s.nonEmpty) s.codePointAt(0) else 0
}

def triangular_numbers(limit: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var n: BigInt = BigInt(1)
  while (n <= limit) {
    res = (res :+ (n * (n + BigInt(1)) / BigInt(2)))
    n = n + BigInt(1)
  }
  return res
}

def parse_words(text: String): ArrayBuffer[String] = {
  var words: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((text).size)) {
    var c: String = text.slice((i).toInt, (i + BigInt(1)).toInt)
    if (c == ",") {
      words = (words :+ (current))
      current = ""
    } else {
      if (c == "\"") {
      } else {
        if ((c == "\r" || c == "\n")) {
        } else {
          current = current + c
        }
      }
    }
    i = i + BigInt(1)
  }
  if (BigInt((current).size) > BigInt(0)) {
    words = (words :+ (current))
  }
  return words
}

def word_value(word: String): BigInt = {
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((word).size)) {
    total = total + _ord(word.slice((i).toInt, (i + BigInt(1)).toInt)) - BigInt(64)
    i = i + BigInt(1)
  }
  return total
}

def contains(xs: ArrayBuffer[BigInt], target: BigInt): Boolean = {
  for (x <- xs) {
    if (x == target) {
      return true
    }
  }
  return false
}

def solution(): BigInt = {
  var text: String = _read_file("words.txt")
  var words: ArrayBuffer[String] = parse_words(text)
  var tri: ArrayBuffer[BigInt] = triangular_numbers(BigInt(100))
  var count: BigInt = BigInt(0)
  for (w <- words) {
    var v: BigInt = word_value(w)
    if ((tri.contains(v))) {
      count = count + BigInt(1)
    }
  }
  return count
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(solution())))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
