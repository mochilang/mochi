// Generated by Mochi v0.10.63 on 2025-08-11 15:24:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_prime(number: BigInt): Boolean = {
  if ((BigInt(1) < number && number < BigInt(4)).asInstanceOf[Boolean]) {
    return true
  }
  if (((number < BigInt(2) || number % BigInt(2) == BigInt(0)).asInstanceOf[Boolean] || number % BigInt(3) == BigInt(0)).asInstanceOf[Boolean]) {
    return false
  }
  var i: BigInt = BigInt(5)
  while (i * i <= number) {
    if ((number % i == BigInt(0) || number % (i + BigInt(2)) == BigInt(0)).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(6)
  }
  return true
}

def list_truncated_nums(n: BigInt): ArrayBuffer[BigInt] = {
  val str_num = _str(n)
  var list_nums: ArrayBuffer[BigInt] = ArrayBuffer(n)
  var i: BigInt = BigInt(1)
  val length: BigInt = BigInt((str_num).size)
  while (i < length) {
    val right: BigInt = BigInt((str_num.slice((i).toInt, (length).toInt)))
    val left: BigInt = BigInt((str_num.slice((BigInt(0)).toInt, (length - i).toInt)))
    list_nums = list_nums :+ (right)
    list_nums = list_nums :+ (left)
    i = i + BigInt(1)
  }
  return list_nums
}

def validate(n: BigInt): Boolean = {
  val s = _str(n)
  val length: BigInt = BigInt((s).size)
  if (length > BigInt(3)) {
    val last3: BigInt = BigInt((s.slice((length - BigInt(3)).toInt, (length).toInt)))
    val first3: BigInt = BigInt((s.slice((BigInt(0)).toInt, (BigInt(3)).toInt)))
    if (!(is_prime(last3) && is_prime(first3)).asInstanceOf[Boolean]) {
      return false
    }
  }
  return true
}

def compute_truncated_primes(count: BigInt): ArrayBuffer[BigInt] = {
  var list_truncated_primes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var num: BigInt = BigInt(13)
  val _br2 = new Breaks
  _br2.breakable {
    while (BigInt((list_truncated_primes).size) != count) {
      if (validate(num)) {
        val list_nums: ArrayBuffer[BigInt] = list_truncated_nums(num)
        var all_prime: Boolean = true
        var j: BigInt = BigInt(0)
        val _br3 = new Breaks
        _br3.breakable {
          while (j < BigInt((list_nums).size)) {
            if (!is_prime(list_nums.lift((j.toInt).toInt).getOrElse(null))) {
              all_prime = false
              _br3.break()
            }
            j = j + BigInt(1)
          }
        }
        if (all_prime) {
          list_truncated_primes = list_truncated_primes :+ (num)
        }
      }
      num = num + BigInt(2)
    }
  }
  return list_truncated_primes
}

def solution(): BigInt = {
  val primes: ArrayBuffer[BigInt] = compute_truncated_primes(BigInt(11))
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((primes).size)) {
    total = total + primes.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  return total
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("sum(compute_truncated_primes(11)) = " + _str(solution()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
