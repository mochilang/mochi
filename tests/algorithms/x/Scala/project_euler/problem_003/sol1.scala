// Generated by Mochi v0.10.62 on 2025-08-09 16:37:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_prime(number: BigInt): Boolean = {
  if ((number > BigInt(1) && number < BigInt(4)).asInstanceOf[Boolean]) {
    return true
  }
  if (((number < BigInt(2) || number % BigInt(2) == BigInt(0)).asInstanceOf[Boolean] || number % BigInt(3) == BigInt(0)).asInstanceOf[Boolean]) {
    return false
  }
  var i: BigInt = BigInt(5)
  while (i * i <= number) {
    if ((number % i == BigInt(0) || number % (i + BigInt(2)) == BigInt(0)).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(6)
  }
  return true
}

def solution(n: BigInt): BigInt = {
  var num: BigInt = n
  if (num <= BigInt(0)) {
    println("Parameter n must be greater than or equal to one.")
    return BigInt(0)
  }
  if (is_prime(num)) {
    return num
  }
  while (num % BigInt(2) == BigInt(0)) {
    num = num / BigInt(2)
    if (is_prime(num)) {
      return num
    }
  }
  var max_number: BigInt = BigInt(1)
  var i: BigInt = BigInt(3)
  val _br2 = new Breaks
  _br2.breakable {
    while (i * i <= num) {
      if (num % i == BigInt(0)) {
        if (is_prime(num / i)) {
          max_number = num / i
          _br2.break()
        } else {
          if (is_prime(i)) {
            max_number = i
          }
        }
      }
      i = i + BigInt(2)
    }
  }
  return max_number
}

def main(): Any = {
  val result: BigInt = solution(BigInt("600851475143"))
  println("solution() = " + _str(result))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
