// Generated by Mochi v0.10.63 on 2025-08-11 15:23:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def join_digits(xs: ArrayBuffer[String]): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    s = s + xs.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return s
}

def digits_to_int(xs: ArrayBuffer[String]): BigInt = {
  return BigInt((join_digits(xs)).toString.head.toInt)
}

def contains_int(xs: ArrayBuffer[BigInt], value: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(null) == value) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def remove_at(xs: ArrayBuffer[String], idx: BigInt): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return res
}

def is_combination_valid(comb: ArrayBuffer[String]): Boolean = {
  val prod: BigInt = digits_to_int(comb.slice((BigInt(5)).toInt, (BigInt(9)).toInt))
  val mul2: BigInt = digits_to_int(comb.slice((BigInt(0)).toInt, (BigInt(2)).toInt))
  val mul3: BigInt = digits_to_int(comb.slice((BigInt(2)).toInt, (BigInt(5)).toInt))
  if (mul2 * mul3 == prod) {
    return true
  }
  val mul1: BigInt = digits_to_int(comb.slice((BigInt(0)).toInt, (BigInt(1)).toInt))
  val mul4: BigInt = digits_to_int(comb.slice((BigInt(1)).toInt, (BigInt(5)).toInt))
  return mul1 * mul4 == prod
}

def search(prefix: ArrayBuffer[String], remaining: ArrayBuffer[String], _products: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var products: ArrayBuffer[BigInt] = _products
  if (BigInt((remaining).size) == BigInt(0)) {
    if (is_combination_valid(prefix)) {
      val p: BigInt = digits_to_int(prefix.slice((BigInt(5)).toInt, (BigInt(9)).toInt))
      if (!contains_int(products, p)) {
        products = products :+ (p)
      }
    }
    return products
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((remaining).size)) {
    val next_prefix: ArrayBuffer[String] = prefix :+ (remaining.lift((i.toInt).toInt).getOrElse(""))
    val next_remaining: ArrayBuffer[String] = remove_at(remaining, i)
    products = search(next_prefix, next_remaining, products)
    i = i + BigInt(1)
  }
  return products
}

val digits: ArrayBuffer[String] = ArrayBuffer("1", "2", "3", "4", "5", "6", "7", "8", "9")

var products: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var total: BigInt = BigInt(0)

var i: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    products = search(ArrayBuffer[String](), digits, products)
    while (i < BigInt((products).size)) {
      total = total + products.lift((i.toInt).toInt).getOrElse(null)
      i = i + BigInt(1)
    }
    println(_str(total))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
