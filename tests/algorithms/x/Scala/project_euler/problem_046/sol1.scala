// Generated by Mochi v0.10.63 on 2025-08-11 15:28:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def int_sqrt(n: BigInt): BigInt = {
  var r: BigInt = BigInt(0)
  while ((r + BigInt(1)) * (r + BigInt(1)) <= n) {
    r = r + BigInt(1)
  }
  return r
}

def is_prime(number: BigInt): Boolean = {
  if ((BigInt(1) < number && number < BigInt(4)).asInstanceOf[Boolean]) {
    return true
  }
  if (((number < BigInt(2) || number % BigInt(2) == BigInt(0)).asInstanceOf[Boolean] || number % BigInt(3) == BigInt(0)).asInstanceOf[Boolean]) {
    return false
  }
  var i: BigInt = BigInt(5)
  val limit: BigInt = int_sqrt(number)
  while (i <= limit) {
    if ((number % i == BigInt(0) || number % (i + BigInt(2)) == BigInt(0)).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(6)
  }
  return true
}

def compute_nums(n: BigInt): ArrayBuffer[BigInt] = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("n must be >= 0"))
  }
  var list_nums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var num: BigInt = BigInt(3)
  val _br2 = new Breaks
  _br2.breakable {
    while (BigInt((list_nums).size) < n) {
      if (!is_prime(num)) {
        var i: BigInt = BigInt(0)
        var found: Boolean = false
        val _br3 = new Breaks
        _br3.breakable {
          while (BigInt(2) * i * i <= num) {
            val rem: BigInt = num - BigInt(2) * i * i
            if (is_prime(rem)) {
              found = true
              _br3.break()
            }
            i = i + BigInt(1)
          }
        }
        if (!found) {
          list_nums = list_nums :+ (num)
        }
      }
      num = num + BigInt(2)
    }
  }
  return list_nums
}

def solution(): BigInt = {
  return compute_nums(BigInt(1)).lift((BigInt(0).toInt).toInt).getOrElse(null)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(solution()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
