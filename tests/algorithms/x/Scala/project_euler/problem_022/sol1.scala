// Generated by Mochi v0.10.70 on 2025-08-23 14:58:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def parse_names(line: String): ArrayBuffer[String] = {
  var names: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((line).size)) {
    var ch: String = line.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == ",") {
      names = (names :+ (current))
      current = ""
    } else {
      if (ch != "\"") {
        current = current + ch
      }
    }
    i = i + BigInt(1)
  }
  names = (names :+ (current))
  return names
}

def insertion_sort(arr: ArrayBuffer[String]): ArrayBuffer[String] = {
  var a: ArrayBuffer[String] = arr
  var i: BigInt = BigInt(1)
  while (i < BigInt((a).size)) {
    var key: String = a.lift((i.toInt).toInt).getOrElse("")
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && a.lift((j.toInt).toInt).getOrElse("") > key) {
      a((j + BigInt(1)).toInt) = a.lift((j.toInt).toInt).getOrElse("")
      j = j - BigInt(1)
    }
    a((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return a
}

def letter_value(ch: String): BigInt = {
  var alphabet: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((alphabet).size)) {
    if (alphabet.slice((idx).toInt, (idx + BigInt(1)).toInt) == ch) {
      return idx + BigInt(1)
    }
    idx = idx + BigInt(1)
  }
  return BigInt(0)
}

def name_score(name: String): BigInt = {
  var score: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((name).size)) {
    score = score + letter_value(name.slice((i).toInt, (i + BigInt(1)).toInt))
    i = i + BigInt(1)
  }
  return score
}

def main(): Any = {
  var line: String = (Option(scala.io.StdIn.readLine())).getOrElse("")
  var names: ArrayBuffer[String] = insertion_sort(parse_names(line))
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((names).size)) {
    total = total + (i + BigInt(1)) * name_score(names.lift((i.toInt).toInt).getOrElse(""))
    i = i + BigInt(1)
  }
  println(_str(_str(total)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
