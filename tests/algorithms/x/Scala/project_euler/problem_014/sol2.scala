// Generated by Mochi v0.10.62 on 2025-08-09 16:42:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def collatz_length(n: BigInt): BigInt = {
  var num: BigInt = n
  var sequence: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (!(collatz_cache.contains(num)).asInstanceOf[Boolean]) {
    sequence = sequence :+ (num)
    if (num % BigInt(2) == BigInt(0)) {
      num = num / BigInt(2)
    } else {
      num = BigInt(3) * num + BigInt(1)
    }
  }
  var length: BigInt = collatz_cache.getOrElse(num, null).asInstanceOf[BigInt]
  var i: BigInt = BigInt((sequence).size) - BigInt(1)
  while (i >= BigInt(0)) {
    length = length + BigInt(1)
    collatz_cache.update(sequence.lift((i.toInt).toInt).getOrElse(null), length)
    i = i - BigInt(1)
  }
  return length
}

def solution(limit: BigInt): BigInt = {
  var max_len: BigInt = BigInt(0)
  var max_start: BigInt = BigInt(1)
  var i: BigInt = BigInt(1)
  while (i < limit) {
    val length: BigInt = collatz_length(i)
    if (length > max_len) {
      max_len = length
      max_start = i
    }
    i = i + BigInt(1)
  }
  return max_start
}

var collatz_cache: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map(BigInt(1) -> (BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]

val input_str: String = (Option(scala.io.StdIn.readLine())).getOrElse("q")

val limit: BigInt = BigInt(input_str)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(solution(limit))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
