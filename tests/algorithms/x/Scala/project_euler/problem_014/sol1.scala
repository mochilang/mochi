// Generated by Mochi v0.10.62 on 2025-08-09 16:42:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def solution(n: BigInt): BigInt = {
  var counters: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    counters = counters :+ (BigInt(0))
    i = i + BigInt(1)
  }
  counters((BigInt(1)).toInt) = BigInt(1)
  var largest_number: BigInt = BigInt(1)
  var pre_counter: BigInt = BigInt(1)
  var start: BigInt = BigInt(2)
  val _br1 = new Breaks
  _br1.breakable {
    while (start < n) {
      var number: BigInt = start
      var counter: BigInt = BigInt(0)
      val _br2 = new Breaks
      _br2.breakable {
        while (true) {
          if ((number < BigInt((counters).size) && counters.lift((number.toInt).toInt).getOrElse(null) != BigInt(0)).asInstanceOf[Boolean]) {
            counter = counter + counters.lift((number.toInt).toInt).getOrElse(null)
            _br2.break()
          }
          if (number % BigInt(2) == BigInt(0)) {
            number = number / BigInt(2)
          } else {
            number = BigInt(3) * number + BigInt(1)
          }
          counter = counter + BigInt(1)
        }
      }
      if ((start < BigInt((counters).size) && counters.lift((start.toInt).toInt).getOrElse(null) == BigInt(0)).asInstanceOf[Boolean]) {
        counters((start).toInt) = counter
      }
      if (counter > pre_counter) {
        largest_number = start
        pre_counter = counter
      }
      start = start + BigInt(1)
    }
  }
  return largest_number
}

val input_str: String = (Option(scala.io.StdIn.readLine())).getOrElse("q")

val n: BigInt = BigInt(input_str)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(solution(n)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
