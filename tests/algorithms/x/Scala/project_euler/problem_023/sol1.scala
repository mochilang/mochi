// Generated by Mochi v0.10.63 on 2025-08-11 15:37:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def int_sqrt(n: BigInt): BigInt = {
  var x: BigInt = BigInt(1)
  while ((x + BigInt(1)) * (x + BigInt(1)) <= n) {
    x = x + BigInt(1)
  }
  return x
}

def solution(limit: BigInt): BigInt = {
  var sum_divs: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= limit) {
    sum_divs = sum_divs :+ (BigInt(1))
    i = i + BigInt(1)
  }
  val sqrt_limit: BigInt = int_sqrt(limit)
  i = BigInt(2)
  while (i <= sqrt_limit) {
    sum_divs((i * i).toInt) = sum_divs.lift(((i * i).toInt).toInt).getOrElse(null) + i
    var k: BigInt = i + BigInt(1)
    while (k <= limit / i) {
      sum_divs((k * i).toInt) = sum_divs.lift(((k * i).toInt).toInt).getOrElse(null) + k + i
      k = k + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var is_abundant: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  i = BigInt(0)
  while (i <= limit) {
    is_abundant = is_abundant :+ (false)
    i = i + BigInt(1)
  }
  var abundants: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var res: BigInt = BigInt(0)
  var n: BigInt = BigInt(1)
  val _br5 = new Breaks
  _br5.breakable {
    while (n <= limit) {
      if (sum_divs.lift((n.toInt).toInt).getOrElse(null) > n) {
        abundants = abundants :+ (n)
        is_abundant((n).toInt) = true
      }
      var has_pair: Boolean = false
      var j: BigInt = BigInt(0)
      val _br6 = new Breaks
      _br6.breakable {
        while (j < BigInt((abundants).size)) {
          val a: BigInt = abundants.lift((j.toInt).toInt).getOrElse(null)
          if (a > n) {
            _br6.break()
          }
          val b: BigInt = n - a
          if ((b <= limit && is_abundant.lift((b.toInt).toInt).getOrElse(false)).asInstanceOf[Boolean]) {
            has_pair = true
            _br6.break()
          }
          j = j + BigInt(1)
        }
      }
      if (!has_pair) {
        res = res + n
      }
      n = n + BigInt(1)
    }
  }
  return res
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(solution(BigInt(28123))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
