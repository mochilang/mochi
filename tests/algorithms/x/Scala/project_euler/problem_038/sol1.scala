// Generated by Mochi v0.10.63 on 2025-08-11 15:24:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_9_pandigital(n: BigInt): Boolean = {
  var digits: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    digits = digits :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var count: BigInt = BigInt(0)
  var x: BigInt = n
  while (x > BigInt(0)) {
    val digit: BigInt = x % BigInt(10)
    if (digit == BigInt(0)) {
      return false
    }
    if (digits.lift((digit.toInt).toInt).getOrElse(null) == BigInt(1)) {
      return false
    }
    digits((digit).toInt) = BigInt(1)
    x = x / BigInt(10)
    count = count + BigInt(1)
  }
  return (((((((((count == BigInt(9) && digits.lift((BigInt(1).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(2).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(3).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(4).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(5).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(6).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(7).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(8).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean] && digits.lift((BigInt(9).toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean]
}

def solution(): BigInt = {
  var base_num: BigInt = BigInt(9999)
  while (base_num >= BigInt(5000)) {
    val candidate: BigInt = BigInt(100002) * base_num
    if (is_9_pandigital(candidate)) {
      return candidate
    }
    base_num = base_num - BigInt(1)
  }
  base_num = BigInt(333)
  while (base_num >= BigInt(100)) {
    val candidate: BigInt = BigInt(1002003) * base_num
    if (is_9_pandigital(candidate)) {
      return candidate
    }
    base_num = base_num - BigInt(1)
  }
  return BigInt(0)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("solution() = " + _str(solution()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
