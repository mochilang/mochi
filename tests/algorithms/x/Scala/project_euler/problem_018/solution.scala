// Generated by Mochi v0.10.62 on 2025-08-09 16:42:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def solution(): BigInt = {
  var triangle: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(75)), ArrayBuffer(BigInt(95), BigInt(64)), ArrayBuffer(BigInt(17), BigInt(47), BigInt(82)), ArrayBuffer(BigInt(18), BigInt(35), BigInt(87), BigInt(10)), ArrayBuffer(BigInt(20), BigInt(4), BigInt(82), BigInt(47), BigInt(65)), ArrayBuffer(BigInt(19), BigInt(1), BigInt(23), BigInt(75), BigInt(3), BigInt(34)), ArrayBuffer(BigInt(88), BigInt(2), BigInt(77), BigInt(73), BigInt(7), BigInt(63), BigInt(67)), ArrayBuffer(BigInt(99), BigInt(65), BigInt(4), BigInt(28), BigInt(6), BigInt(16), BigInt(70), BigInt(92)), ArrayBuffer(BigInt(41), BigInt(41), BigInt(26), BigInt(56), BigInt(83), BigInt(40), BigInt(80), BigInt(70), BigInt(33)), ArrayBuffer(BigInt(41), BigInt(48), BigInt(72), BigInt(33), BigInt(47), BigInt(32), BigInt(37), BigInt(16), BigInt(94), BigInt(29)), ArrayBuffer(BigInt(53), BigInt(71), BigInt(44), BigInt(65), BigInt(25), BigInt(43), BigInt(91), BigInt(52), BigInt(97), BigInt(51), BigInt(14)), ArrayBuffer(BigInt(70), BigInt(11), BigInt(33), BigInt(28), BigInt(77), BigInt(73), BigInt(17), BigInt(78), BigInt(39), BigInt(68), BigInt(17), BigInt(57)), ArrayBuffer(BigInt(91), BigInt(71), BigInt(52), BigInt(38), BigInt(17), BigInt(14), BigInt(91), BigInt(43), BigInt(58), BigInt(50), BigInt(27), BigInt(29), BigInt(48)), ArrayBuffer(BigInt(63), BigInt(66), BigInt(4), BigInt(68), BigInt(89), BigInt(53), BigInt(67), BigInt(30), BigInt(73), BigInt(16), BigInt(69), BigInt(87), BigInt(40), BigInt(31)), ArrayBuffer(BigInt(4), BigInt(62), BigInt(98), BigInt(27), BigInt(23), BigInt(9), BigInt(70), BigInt(98), BigInt(73), BigInt(93), BigInt(38), BigInt(53), BigInt(60), BigInt(4), BigInt(23)))
  var i: BigInt = BigInt(1)
  while (i < BigInt((triangle).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((triangle.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      val prev_row: ArrayBuffer[BigInt] = triangle.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      val number1: BigInt = (if (j != BigInt((prev_row).size)) prev_row.lift((j.toInt).toInt).getOrElse(null) else BigInt(0))
      val number2: BigInt = (if (j > BigInt(0)) prev_row.lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) else BigInt(0))
      val max_val: BigInt = (if (number1 > number2) number1 else number2)
      triangle((i).toInt)((j).toInt) = triangle.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) + max_val
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  val last: ArrayBuffer[BigInt] = triangle.lift(((BigInt((triangle).size) - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  var k: BigInt = BigInt(0)
  var best: BigInt = BigInt(0)
  while (k < BigInt((last).size)) {
    if (last.lift((k.toInt).toInt).getOrElse(null) > best) {
      best = last.lift((k.toInt).toInt).getOrElse(null)
    }
    k = k + BigInt(1)
  }
  return best
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(solution()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
