// Generated by Mochi v0.10.62 on 2025-08-09 16:42:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_leap(year: BigInt): Boolean = {
  if (((year % BigInt(4) == BigInt(0) && year % BigInt(100) != BigInt(0)).asInstanceOf[Boolean] || year % BigInt(400) == BigInt(0)).asInstanceOf[Boolean]) {
    return true
  }
  return false
}

def count_sundays(): BigInt = {
  val days_per_month: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(31), BigInt(28), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31))
  var day: BigInt = BigInt(6)
  var month: BigInt = BigInt(1)
  var year: BigInt = BigInt(1901)
  var sundays: BigInt = BigInt(0)
  while (year < BigInt(2001)) {
    day = day + BigInt(7)
    if (is_leap(year)) {
      if ((day > days_per_month.lift(((month - BigInt(1)).toInt).toInt).getOrElse(null) && month != BigInt(2)).asInstanceOf[Boolean]) {
        month = month + BigInt(1)
        day = day - days_per_month.lift(((month - BigInt(2)).toInt).toInt).getOrElse(null)
      } else {
        if ((day > BigInt(29) && month == BigInt(2)).asInstanceOf[Boolean]) {
          month = month + BigInt(1)
          day = day - BigInt(29)
        }
      }
    } else {
      if (day > days_per_month.lift(((month - BigInt(1)).toInt).toInt).getOrElse(null)) {
        month = month + BigInt(1)
        day = day - days_per_month.lift(((month - BigInt(2)).toInt).toInt).getOrElse(null)
      }
    }
    if (month > BigInt(12)) {
      year = year + BigInt(1)
      month = BigInt(1)
    }
    if ((year < BigInt(2001) && day == BigInt(1)).asInstanceOf[Boolean]) {
      sundays = sundays + BigInt(1)
    }
  }
  return sundays
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(count_sundays())
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
