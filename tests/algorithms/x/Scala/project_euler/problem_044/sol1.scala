// Generated by Mochi v0.10.63 on 2025-08-11 15:26:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def sqrt(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def is_pentagonal(n: BigInt): Boolean = {
  val root: Double = sqrt(1.0 + 24.0 * (1.0 * n.toString.toDouble))
  val `val`: Double = (1.0 + root) / 6.0
  val val_int: BigInt = BigInt(`val`.toString.head.asDigit)
  return `val` == 1.0 * val_int.toString.toDouble
}

def pentagonal(k: BigInt): BigInt = {
  return k * (BigInt(3) * k - BigInt(1)) / BigInt(2)
}

def solution(limit: BigInt): BigInt = {
  var pentagonal_nums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(1)
  while (i < limit) {
    pentagonal_nums = pentagonal_nums :+ (pentagonal(i))
    i = i + BigInt(1)
  }
  var a_idx: BigInt = BigInt(0)
  while (a_idx < BigInt((pentagonal_nums).size)) {
    val pentagonal_i: BigInt = pentagonal_nums.lift((a_idx.toInt).toInt).getOrElse(null)
    var b_idx: BigInt = a_idx
    while (b_idx < BigInt((pentagonal_nums).size)) {
      val pentagonal_j: BigInt = pentagonal_nums.lift((b_idx.toInt).toInt).getOrElse(null)
      val s: BigInt = pentagonal_i + pentagonal_j
      val d: BigInt = pentagonal_j - pentagonal_i
      if ((is_pentagonal(s) && is_pentagonal(d)).asInstanceOf[Boolean]) {
        return d
      }
      b_idx = b_idx + BigInt(1)
    }
    a_idx = a_idx + BigInt(1)
  }
  return -BigInt(1)
}

val result: BigInt = solution(BigInt(5000))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("solution() = " + _str(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
