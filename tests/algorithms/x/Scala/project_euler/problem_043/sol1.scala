// Generated by Mochi v0.10.63 on 2025-08-11 15:26:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_substring_divisible(num: ArrayBuffer[BigInt]): Boolean = {
  if (num.lift((BigInt(3).toInt).toInt).getOrElse(null) % BigInt(2) != BigInt(0)) {
    return false
  }
  if ((num.lift((BigInt(2).toInt).toInt).getOrElse(null) + num.lift((BigInt(3).toInt).toInt).getOrElse(null) + num.lift((BigInt(4).toInt).toInt).getOrElse(null)) % BigInt(3) != BigInt(0)) {
    return false
  }
  if (num.lift((BigInt(5).toInt).toInt).getOrElse(null) % BigInt(5) != BigInt(0)) {
    return false
  }
  val primes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(7), BigInt(11), BigInt(13), BigInt(17))
  var i: BigInt = BigInt(0)
  while (i < BigInt((primes).size)) {
    val p: BigInt = primes.lift((i.toInt).toInt).getOrElse(null)
    val idx: BigInt = i + BigInt(4)
    val `val`: BigInt = num.lift((idx.toInt).toInt).getOrElse(null) * BigInt(100) + num.lift(((idx + BigInt(1)).toInt).toInt).getOrElse(null) * BigInt(10) + num.lift(((idx + BigInt(2)).toInt).toInt).getOrElse(null)
    if (`val` % p != BigInt(0)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def remove_at(xs: ArrayBuffer[BigInt], idx: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    }
    i = i + BigInt(1)
  }
  return res
}

def digits_to_number(xs: ArrayBuffer[BigInt]): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    value = value * BigInt(10) + xs.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  return value
}

def search(prefix: ArrayBuffer[BigInt], remaining: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((remaining).size) == BigInt(0)) {
    if (is_substring_divisible(prefix)) {
      return digits_to_number(prefix)
    }
    return BigInt(0)
  }
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((remaining).size)) {
    val d: BigInt = remaining.lift((i.toInt).toInt).getOrElse(null)
    val next_prefix: ArrayBuffer[BigInt] = prefix :+ (d)
    val next_remaining: ArrayBuffer[BigInt] = remove_at(remaining, i)
    total = total + search(next_prefix, next_remaining)
    i = i + BigInt(1)
  }
  return total
}

def solution(n: BigInt): BigInt = {
  var digits: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    digits = digits :+ (i)
    i = i + BigInt(1)
  }
  return search((ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]], digits)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println((List("solution() =", solution(BigInt(10)))).mkString(" "))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
