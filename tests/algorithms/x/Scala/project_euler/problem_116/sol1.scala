// Generated by Mochi v0.10.63 on 2025-08-11 16:30:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def solution(length: BigInt): BigInt = {
  var ways: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i <= length) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    row = row :+ (BigInt(0))
    row = row :+ (BigInt(0))
    row = row :+ (BigInt(0))
    ways = ways :+ (row)
    i = i + BigInt(1)
  }
  var row_length: BigInt = BigInt(0)
  while (row_length <= length) {
    var tile_length: BigInt = BigInt(2)
    while (tile_length <= BigInt(4)) {
      var tile_start: BigInt = BigInt(0)
      while (tile_start <= row_length - tile_length) {
        val remaining: BigInt = row_length - tile_start - tile_length
        ways((row_length).toInt)((tile_length - BigInt(2)).toInt) = ways.lift((row_length.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((tile_length - BigInt(2)).toInt).toInt).getOrElse(null) + ways.lift((remaining.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((tile_length - BigInt(2)).toInt).toInt).getOrElse(null) + BigInt(1)
        tile_start = tile_start + BigInt(1)
      }
      tile_length = tile_length + BigInt(1)
    }
    row_length = row_length + BigInt(1)
  }
  var total: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (j < BigInt(3)) {
    total = total + ways.lift((length.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null)
    j = j + BigInt(1)
  }
  return total
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(solution(BigInt(5)))
    println(solution(BigInt(50)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
