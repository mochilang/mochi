// Generated by Mochi v0.10.63 on 2025-08-11 15:29:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def prime_sieve(limit: BigInt): ArrayBuffer[BigInt] = {
  if (limit <= BigInt(2)) {
    return ArrayBuffer[BigInt]()
  }
  var is_prime: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < limit) {
    is_prime = is_prime :+ (true)
    i = i + BigInt(1)
  }
  is_prime((BigInt(0)).toInt) = false
  is_prime((BigInt(1)).toInt) = false
  var p: BigInt = BigInt(3)
  while (p * p < limit) {
    var index: BigInt = p * BigInt(2)
    while (index < limit) {
      is_prime((index).toInt) = false
      index = index + p
    }
    p = p + BigInt(2)
  }
  var primes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2))
  var n: BigInt = BigInt(3)
  while (n < limit) {
    if (is_prime.lift((n.toInt).toInt).getOrElse(false)) {
      primes = primes :+ (n)
    }
    n = n + BigInt(2)
  }
  return primes
}

def solution(ceiling: BigInt): BigInt = {
  val primes: ArrayBuffer[BigInt] = prime_sieve(ceiling)
  var prime_map: scala.collection.mutable.Map[BigInt,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,Boolean]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((primes).size)) {
    prime_map.update(primes.lift((i.toInt).toInt).getOrElse(null), true)
    i = i + BigInt(1)
  }
  var prefix: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))
  i = BigInt(0)
  while (i < BigInt((primes).size)) {
    prefix = prefix :+ (prefix.lift((i.toInt).toInt).getOrElse(null) + primes.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var max_len: BigInt = BigInt(0)
  while (max_len < BigInt((prefix).size) && prefix.lift((max_len.toInt).toInt).getOrElse(null) < ceiling) {
    max_len = max_len + BigInt(1)
  }
  var L: BigInt = max_len
  val _br7 = new Breaks
  _br7.breakable {
    while (L > BigInt(0)) {
      var start: BigInt = BigInt(0)
      val _br8 = new Breaks
      _br8.breakable {
        while (start + L <= BigInt((primes).size)) {
          val s: BigInt = prefix.lift(((start + L).toInt).toInt).getOrElse(null) - prefix.lift((start.toInt).toInt).getOrElse(null)
          if (s >= ceiling) {
            _br8.break()
          }
          if (prime_map.getOrElse(s, false).asInstanceOf[Boolean]) {
            return s
          }
          start = start + BigInt(1)
        }
      }
      L = L - BigInt(1)
    }
  }
  return BigInt(0)
}

val ans: BigInt = solution(BigInt(1000000))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("solution() = " + _str(ans))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
