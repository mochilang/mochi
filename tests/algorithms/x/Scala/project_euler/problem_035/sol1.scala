// Generated by Mochi v0.10.63 on 2025-08-11 15:23:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_prime(n: BigInt): Boolean = {
  return sieve.lift((n.toInt).toInt).getOrElse(false)
}

def contains_an_even_digit(n: BigInt): Boolean = {
  val s = _str(n)
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((s).size)) {
    val c = s.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
    if (((((c == "0" || c == "2").asInstanceOf[Boolean] || c == "4").asInstanceOf[Boolean] || c == "6").asInstanceOf[Boolean] || c == "8").asInstanceOf[Boolean]) {
      return true
    }
    idx = idx + BigInt(1)
  }
  return false
}

def parse_int(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var k: BigInt = BigInt(0)
  while (k < BigInt((s).size)) {
    val ch: String = s.slice((k.toInt).toInt, (k.toInt).toInt + 1)
    value = value * BigInt(10) + BigInt(ch.toString.head.toInt)
    k = k + BigInt(1)
  }
  return value
}

def find_circular_primes(limit: BigInt): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2))
  var num: BigInt = BigInt(3)
  val _br2 = new Breaks
  _br2.breakable {
    while (num <= limit) {
      if ((is_prime(num) && contains_an_even_digit(num) == false).asInstanceOf[Boolean]) {
        val s = _str(num)
        var all_prime: Boolean = true
        var j: BigInt = BigInt(0)
        val _br3 = new Breaks
        _br3.breakable {
          while (j < BigInt((s).size)) {
            val rotated_str: String = s.slice((j).toInt, (BigInt((s).size)).toInt) + s.slice((BigInt(0)).toInt, (j).toInt)
            val rotated: BigInt = parse_int(rotated_str)
            if (!is_prime(rotated)) {
              all_prime = false
              _br3.break()
            }
            j = j + BigInt(1)
          }
        }
        if (all_prime) {
          result = result :+ (num)
        }
      }
      num = num + BigInt(2)
    }
  }
  return result
}

def solution(): BigInt = {
  return BigInt((find_circular_primes(LIMIT)).size)
}

val LIMIT: BigInt = BigInt(10000)

var sieve: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()

var i: BigInt = BigInt(0)

var p: BigInt = BigInt(2)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i <= LIMIT) {
      sieve = sieve :+ (true)
      i = i + BigInt(1)
    }
    while (p * p <= LIMIT) {
      if (sieve.lift((p.toInt).toInt).getOrElse(false)) {
        var j: BigInt = p * p
        while (j <= LIMIT) {
          sieve((j).toInt) = false
          j = j + p
        }
      }
      p = p + BigInt(1)
    }
    println("len(find_circular_primes()) = " + _str(solution()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
