// Generated by Mochi v0.10.62 on 2025-08-09 16:42:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def solution(power: BigInt): BigInt = {
  var digits: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  digits = digits :+ (BigInt(1))
  var i: BigInt = BigInt(0)
  while (i < power) {
    var carry: BigInt = BigInt(0)
    var j: BigInt = BigInt(0)
    while (j < BigInt((digits).size)) {
      val v: BigInt = digits.lift((j.toInt).toInt).getOrElse(null) * BigInt(2) + carry
      digits((j).toInt) = v % BigInt(10)
      carry = v / BigInt(10)
      j = j + BigInt(1)
    }
    if (carry > BigInt(0)) {
      digits = digits :+ (carry)
    }
    i = i + BigInt(1)
  }
  var sum: BigInt = BigInt(0)
  var k: BigInt = BigInt(0)
  while (k < BigInt((digits).size)) {
    sum = sum + digits.lift((k.toInt).toInt).getOrElse(null)
    k = k + BigInt(1)
  }
  return sum
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(solution(BigInt(1000))))
    println(_str(solution(BigInt(50))))
    println(_str(solution(BigInt(20))))
    println(_str(solution(BigInt(15))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
