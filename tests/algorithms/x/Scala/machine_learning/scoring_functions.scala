// Generated by Mochi v0.10.67 on 2025-08-16 21:31:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return 0.0 - x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def ln_series(x: Double): Double = {
  var t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(19)) {
    sum = sum + term / n.toString.toDouble
    term = term * t * t
    n = n + BigInt(2)
  }
  return 2.0 * sum
}

def ln(x: Double): Double = {
  var y: Double = x
  var k: BigInt = BigInt(0)
  while (y >= 10.0) {
    y = y / 10.0
    k = k + BigInt(1)
  }
  while (y < 1.0) {
    y = y * 10.0
    k = k - BigInt(1)
  }
  return ln_series(y) + k.toString.toDouble * ln_series(10.0)
}

def mae(predict: ArrayBuffer[Double], actual: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((predict).size)) {
    var diff: Double = predict.lift((i.toInt).toInt).getOrElse(0.0) - actual.lift((i.toInt).toInt).getOrElse(0.0)
    sum = sum + absf(diff)
    i = i + BigInt(1)
  }
  return sum / (BigInt((predict).size)).toDouble
}

def mse(predict: ArrayBuffer[Double], actual: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((predict).size)) {
    var diff: Double = predict.lift((i.toInt).toInt).getOrElse(0.0) - actual.lift((i.toInt).toInt).getOrElse(0.0)
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  return sum / (BigInt((predict).size)).toDouble
}

def rmse(predict: ArrayBuffer[Double], actual: ArrayBuffer[Double]): Double = {
  return sqrtApprox(mse(predict, actual))
}

def rmsle(predict: ArrayBuffer[Double], actual: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((predict).size)) {
    var lp: Double = math.log(predict.lift((i.toInt).toInt).getOrElse(0.0) + 1.0)
    var la: Double = math.log(actual.lift((i.toInt).toInt).getOrElse(0.0) + 1.0)
    var diff: Double = lp - la
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  return sqrtApprox(sum / (BigInt((predict).size)).toDouble)
}

def mbd(predict: ArrayBuffer[Double], actual: ArrayBuffer[Double]): Double = {
  var diff_sum: Double = 0.0
  var actual_sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((predict).size)) {
    diff_sum = diff_sum + (predict.lift((i.toInt).toInt).getOrElse(0.0) - actual.lift((i.toInt).toInt).getOrElse(0.0))
    actual_sum = actual_sum + actual.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  var n: Double = (BigInt((predict).size)).toDouble
  var numerator: Double = diff_sum / n
  var denominator: Double = actual_sum / n
  return numerator / denominator * 100.0
}

def manual_accuracy(predict: ArrayBuffer[Double], actual: ArrayBuffer[Double]): Double = {
  var correct: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((predict).size)) {
    if (predict.lift((i.toInt).toInt).getOrElse(0.0) == actual.lift((i.toInt).toInt).getOrElse(0.0)) {
      correct = correct + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return correct.toString.toDouble / (BigInt((predict).size)).toDouble
}

def main(): Any = {
  var actual: ArrayBuffer[Double] = ArrayBuffer(1.0, 2.0, 3.0)
  var predict: ArrayBuffer[Double] = ArrayBuffer(1.0, 4.0, 3.0)
  println(_str(_str(mae(predict, actual))))
  println(_str(_str(mse(predict, actual))))
  println(_str(_str(rmse(predict, actual))))
  println(_str(_str(rmsle(ArrayBuffer(10.0, 2.0, 30.0), ArrayBuffer(10.0, 10.0, 30.0)))))
  println(_str(_str(mbd(ArrayBuffer(2.0, 3.0, 4.0), ArrayBuffer(1.0, 2.0, 3.0)))))
  println(_str(_str(mbd(ArrayBuffer(0.0, 1.0, 1.0), ArrayBuffer(1.0, 2.0, 3.0)))))
  println(_str(_str(manual_accuracy(predict, actual))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
