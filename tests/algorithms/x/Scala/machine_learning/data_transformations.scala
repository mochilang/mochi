// Generated by Mochi v0.10.63 on 2025-08-12 09:00:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * 10.0
    i = i + BigInt(1)
  }
  return result
}

def round(x: Double, n: BigInt): Double = {
  val m: Double = pow10(n)
  val y: Double = (Math.floor(x * m + 0.5)).toString.toDouble
  return y / m
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def mean(data: ArrayBuffer[Double]): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  val n: BigInt = BigInt((data).size)
  while (i < n) {
    total = total + data.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return total / n.toString.toDouble
}

def stdev(data: ArrayBuffer[Double]): Double = {
  val n: BigInt = BigInt((data).size)
  if (n <= BigInt(1)) {
    throw new RuntimeException(String.valueOf("data length must be > 1"))
  }
  val m: Double = mean(data)
  var sum_sq: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    val diff: Double = data.lift((i.toInt).toInt).getOrElse(0.0) - m
    sum_sq = sum_sq + diff * diff
    i = i + BigInt(1)
  }
  return sqrtApprox(sum_sq / (n - BigInt(1)).toDouble)
}

def normalization(data: ArrayBuffer[Double], ndigits: BigInt): ArrayBuffer[Double] = {
  val x_min: Double = (data.min).toString.toDouble
  val x_max: Double = (data.max).toString.toDouble
  val denom: Double = x_max - x_min
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  val n: BigInt = BigInt((data).size)
  while (i < n) {
    val norm: Double = (data.lift((i.toInt).toInt).getOrElse(0.0) - x_min) / denom
    result = result :+ (round(norm, ndigits))
    i = i + BigInt(1)
  }
  return result
}

def standardization(data: ArrayBuffer[Double], ndigits: BigInt): ArrayBuffer[Double] = {
  val mu: Double = mean(data)
  val sigma: Double = stdev(data)
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  val n: BigInt = BigInt((data).size)
  while (i < n) {
    val z: Double = (data.lift((i.toInt).toInt).getOrElse(0.0) - mu) / sigma
    result = result :+ (round(z, ndigits))
    i = i + BigInt(1)
  }
  return result
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(normalization(ArrayBuffer(2.0, 7.0, 10.0, 20.0, 30.0, 50.0), BigInt(3))))
    println(_str(normalization(ArrayBuffer(5.0, 10.0, 15.0, 20.0, 25.0), BigInt(3))))
    println(_str(standardization(ArrayBuffer(2.0, 7.0, 10.0, 20.0, 30.0, 50.0), BigInt(3))))
    println(_str(standardization(ArrayBuffer(5.0, 10.0, 15.0, 20.0, 25.0), BigInt(3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
