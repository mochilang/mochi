// Generated by Mochi v0.10.59 on 2025-08-07 12:43:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class PointLabel(var point: ArrayBuffer[Double], var label: BigInt)

case class KNN(var data: ArrayBuffer[PointLabel], var labels: ArrayBuffer[String])

case class DistLabel(var dist: Double, var label: BigInt)

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def make_knn(train_data: ArrayBuffer[ArrayBuffer[Double]], train_target: ArrayBuffer[BigInt], class_labels: ArrayBuffer[String]): KNN = {
  var items: ArrayBuffer[PointLabel] = ArrayBuffer[PointLabel]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((train_data).size)) {
    val pl: PointLabel = PointLabel(train_data((i.toInt).toInt), train_target((i.toInt).toInt))
    items = items :+ pl
    i = i + BigInt(1)
  }
  return KNN(items, class_labels)
}

def euclidean_distance(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    val diff: Double = a((i.toInt).toInt) - b((i.toInt).toInt)
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  return sqrtApprox(sum)
}

def classify(knn: KNN, pred_point: ArrayBuffer[Double], k: BigInt): String = {
  var distances: ArrayBuffer[DistLabel] = ArrayBuffer[DistLabel]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((knn.data).size)) {
    val d: Double = euclidean_distance(knn.data((i.toInt).toInt).point, pred_point)
    distances = distances :+ DistLabel(d, knn.data((i.toInt).toInt).label)
    i = i + BigInt(1)
  }
  var votes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var count: BigInt = BigInt(0)
  while (count < k) {
    var min_index: BigInt = BigInt(0)
    var j: BigInt = BigInt(1)
    while (j < BigInt((distances).size)) {
      if (distances((j.toInt).toInt).dist < distances((min_index.toInt).toInt).dist) {
        min_index = j
      }
      j = j + BigInt(1)
    }
    votes = votes :+ BigInt((distances((min_index.toInt).toInt).label).toString.toDouble.toInt)
    distances((min_index).toInt).asInstanceOf[DistLabel].dist = BigInt(1)
    e18
    count = count + BigInt(1)
  }
  var tally: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var t: BigInt = BigInt(0)
  while (t < BigInt((knn.labels).size)) {
    tally = tally :+ BigInt(0)
    t = t + BigInt(1)
  }
  var v: BigInt = BigInt(0)
  while (v < BigInt((votes).size)) {
    val lbl: BigInt = votes((v.toInt).toInt)
    tally((lbl).toInt) = tally((lbl.toInt).toInt) + BigInt(1)
    v = v + BigInt(1)
  }
  var max_idx: BigInt = BigInt(0)
  var m: BigInt = BigInt(1)
  while (m < BigInt((tally).size)) {
    if (tally((m.toInt).toInt) > tally((max_idx.toInt).toInt)) {
      max_idx = m
    }
    m = m + BigInt(1)
  }
  return knn.labels((max_idx.toInt).toInt)
}

val train_X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(1.0, 0.0), ArrayBuffer(0.0, 1.0), ArrayBuffer(0.5, 0.5), ArrayBuffer(3.0, 3.0), ArrayBuffer(2.0, 3.0), ArrayBuffer(3.0, 2.0))

val train_y: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(1))

val classes: ArrayBuffer[String] = ArrayBuffer("A", "B")

val knn: KNN = make_knn(train_X, train_y, classes)

val point: ArrayBuffer[Double] = ArrayBuffer(1.2, 1.2)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(classify(knn, point, BigInt(5)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
