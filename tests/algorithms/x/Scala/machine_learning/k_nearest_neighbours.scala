// Generated by Mochi v0.10.67 on 2025-08-16 21:29:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

case class PointLabel(var point: ArrayBuffer[Double], var label: BigInt)

case class KNN(var data: ArrayBuffer[PointLabel], var labels: ArrayBuffer[String])

case class DistLabel(var dist: Double, var label: BigInt)

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def make_knn(train_data: ArrayBuffer[ArrayBuffer[Double]], train_target: ArrayBuffer[BigInt], class_labels: ArrayBuffer[String]): KNN = {
  var items: ArrayBuffer[PointLabel] = ArrayBuffer[PointLabel]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((train_data).size)) {
    var pl: PointLabel = PointLabel(train_data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), train_target.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    items = (items :+ pl)
    i = i + BigInt(1)
  }
  return KNN(items, class_labels)
}

def euclidean_distance(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    var diff: Double = a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0)
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  return sqrtApprox(sum)
}

def classify(knn: KNN, pred_point: ArrayBuffer[Double], k: BigInt): String = {
  var distances: ArrayBuffer[DistLabel] = ArrayBuffer[DistLabel]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((knn.data).size)) {
    var d: Double = euclidean_distance(knn.data.lift((i.toInt).toInt).getOrElse(null).point, pred_point)
    distances = (distances :+ DistLabel(d, knn.data.lift((i.toInt).toInt).getOrElse(null).label))
    i = i + BigInt(1)
  }
  var votes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var count: BigInt = BigInt(0)
  while (count < k) {
    var min_index: BigInt = BigInt(0)
    var j: BigInt = BigInt(1)
    while (j < BigInt((distances).size)) {
      if (distances.lift((j.toInt).toInt).getOrElse(null).dist < distances.lift((min_index.toInt).toInt).getOrElse(null).dist) {
        min_index = j
      }
      j = j + BigInt(1)
    }
    votes = (votes :+ BigInt((distances.lift((min_index.toInt).toInt).getOrElse(null).label).toString.toDouble.toInt))
    distances.lift((min_index).toInt).getOrElse(null).dist = 1000000000000000000.0
    count = count + BigInt(1)
  }
  var tally: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var t: BigInt = BigInt(0)
  while (t < BigInt((knn.labels).size)) {
    tally = (tally :+ BigInt(0))
    t = t + BigInt(1)
  }
  var v: BigInt = BigInt(0)
  while (v < BigInt((votes).size)) {
    var lbl: BigInt = votes.lift((v.toInt).toInt).getOrElse(BigInt(0))
    tally((lbl).toInt) = tally.lift((lbl.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
    v = v + BigInt(1)
  }
  var max_idx: BigInt = BigInt(0)
  var m: BigInt = BigInt(1)
  while (m < BigInt((tally).size)) {
    if (tally.lift((m.toInt).toInt).getOrElse(BigInt(0)) > tally.lift((max_idx.toInt).toInt).getOrElse(BigInt(0))) {
      max_idx = m
    }
    m = m + BigInt(1)
  }
  return knn.labels.lift((max_idx.toInt).toInt).getOrElse("")
}

var train_X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(1.0, 0.0), ArrayBuffer(0.0, 1.0), ArrayBuffer(0.5, 0.5), ArrayBuffer(3.0, 3.0), ArrayBuffer(2.0, 3.0), ArrayBuffer(3.0, 2.0))

var train_y: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(1))

var classes: ArrayBuffer[String] = ArrayBuffer("A", "B")

var point: ArrayBuffer[Double] = ArrayBuffer(1.2, 1.2)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var knn: KNN = make_knn(train_X, train_y, classes)
    println(_str(classify(knn, point, BigInt(5))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
