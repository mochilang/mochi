// Generated by Mochi v0.10.59 on 2025-08-07 12:44:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def maxf(a: Double, b: Double): Double = {
  if (a > b) {
    return a
  }
  return b
}

def minf(a: Double, b: Double): Double = {
  if (a < b) {
    return a
  }
  return b
}

def clip(x: Double, lo: Double, hi: Double): Double = {
  return maxf(lo, minf(x, hi))
}

def to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def powf(base: Double, exp: Double): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  val n: BigInt = BigInt(exp.toString.toDouble.toInt)
  while (i < n) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def ln(x: Double): Double = {
  if (x <= 0.0) {
    throw new RuntimeException(String.valueOf("ln domain error"))
  }
  val y: Double = (x - 1.0) / (x + 1.0)
  val y2: Double = y * y
  var term: Double = y
  var sum: Double = 0.0
  var k: BigInt = BigInt(0)
  while (k < BigInt(10)) {
    val denom: Double = to_float(BigInt(2) * k + BigInt(1))
    sum = sum + term / denom
    term = term * y2
    k = k + BigInt(1)
  }
  return 2.0 * sum
}

def exp(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(20)) {
    term = term * x / to_float(n)
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def mean(v: ArrayBuffer[Double]): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((v).size)) {
    total = total + v((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return total / to_float(BigInt((v).size))
}

def binary_cross_entropy(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double], epsilon: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var losses: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val yt: Double = y_true((i.toInt).toInt)
    val yp: Double = clip(y_pred((i.toInt).toInt), epsilon, 1.0 - epsilon)
    val loss: Double = -(yt * ln(yp) + (1.0 - yt) * ln(1.0 - yp))
    losses = losses :+ loss
    i = i + BigInt(1)
  }
  return mean(losses)
}

def binary_focal_cross_entropy(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double], gamma: Double, alpha: Double, epsilon: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var losses: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val yt: Double = y_true((i.toInt).toInt)
    val yp: Double = clip(y_pred((i.toInt).toInt), epsilon, 1.0 - epsilon)
    val term1: Double = alpha * powf(1.0 - yp, gamma) * yt * ln(yp)
    val term2: Double = (1.0 - alpha) * powf(yp, gamma) * (1.0 - yt) * ln(1.0 - yp)
    losses = losses :+ -(term1 + term2)
    i = i + BigInt(1)
  }
  return mean(losses)
}

def categorical_cross_entropy(y_true: ArrayBuffer[ArrayBuffer[Double]], y_pred: ArrayBuffer[ArrayBuffer[Double]], epsilon: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same shape."))
  }
  val rows: BigInt = BigInt((y_true).size)
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < rows) {
    if (BigInt((y_true((i.toInt).toInt)).size) != BigInt((y_pred((i.toInt).toInt)).size)) {
      throw new RuntimeException(String.valueOf("Input arrays must have the same shape."))
    }
    var sum_true: Double = 0.0
    var sum_pred: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < BigInt((y_true((i.toInt).toInt)).size)) {
      val yt: Double = y_true((i.toInt).toInt)((j.toInt).toInt)
      val yp: Double = y_pred((i.toInt).toInt)((j.toInt).toInt)
      if ((yt != 0.0 && yt != 1.0).asInstanceOf[Boolean]) {
        throw new RuntimeException(String.valueOf("y_true must be one-hot encoded."))
      }
      sum_true = sum_true + yt
      sum_pred = sum_pred + yp
      j = j + BigInt(1)
    }
    if (sum_true != 1.0) {
      throw new RuntimeException(String.valueOf("y_true must be one-hot encoded."))
    }
    if (absf(sum_pred - 1.0) > epsilon) {
      throw new RuntimeException(String.valueOf("Predicted probabilities must sum to approximately 1."))
    }
    j = BigInt(0)
    while (j < BigInt((y_true((i.toInt).toInt)).size)) {
      val yp: Double = clip(y_pred((i.toInt).toInt)((j.toInt).toInt), epsilon, 1.0)
      total = total - y_true((i.toInt).toInt)((j.toInt).toInt) * ln(yp)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return total
}

def categorical_focal_cross_entropy(y_true: ArrayBuffer[ArrayBuffer[Double]], y_pred: ArrayBuffer[ArrayBuffer[Double]], alpha: ArrayBuffer[Double], gamma: Double, epsilon: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Shape of y_true and y_pred must be the same."))
  }
  val rows: BigInt = BigInt((y_true).size)
  val cols: BigInt = BigInt((y_true((BigInt(0).toInt).toInt)).size)
  var a: ArrayBuffer[Double] = alpha
  if (BigInt((a).size) == BigInt(0)) {
    var tmp: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      tmp = tmp :+ 1.0
      j = j + BigInt(1)
    }
    a = tmp
  }
  if (BigInt((a).size) != cols) {
    throw new RuntimeException(String.valueOf("Length of alpha must match the number of classes."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < rows) {
    if ((BigInt((y_true((i.toInt).toInt)).size) != cols || BigInt((y_pred((i.toInt).toInt)).size) != cols).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Shape of y_true and y_pred must be the same."))
    }
    var sum_true: Double = 0.0
    var sum_pred: Double = 0.0
    j = BigInt(0)
    while (j < cols) {
      val yt: Double = y_true((i.toInt).toInt)((j.toInt).toInt)
      val yp: Double = y_pred((i.toInt).toInt)((j.toInt).toInt)
      if ((yt != 0.0 && yt != 1.0).asInstanceOf[Boolean]) {
        throw new RuntimeException(String.valueOf("y_true must be one-hot encoded."))
      }
      sum_true = sum_true + yt
      sum_pred = sum_pred + yp
      j = j + BigInt(1)
    }
    if (sum_true != 1.0) {
      throw new RuntimeException(String.valueOf("y_true must be one-hot encoded."))
    }
    if (absf(sum_pred - 1.0) > epsilon) {
      throw new RuntimeException(String.valueOf("Predicted probabilities must sum to approximately 1."))
    }
    var row_loss: Double = 0.0
    j = BigInt(0)
    while (j < cols) {
      val yp: Double = clip(y_pred((i.toInt).toInt)((j.toInt).toInt), epsilon, 1.0)
      row_loss = row_loss + a((j.toInt).toInt) * powf(1.0 - yp, gamma) * y_true((i.toInt).toInt)((j.toInt).toInt) * ln(yp)
      j = j + BigInt(1)
    }
    total = total - row_loss
    i = i + BigInt(1)
  }
  return total / to_float(rows)
}

def hinge_loss(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double]): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Length of predicted and actual array must be same."))
  }
  var losses: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val yt: Double = y_true((i.toInt).toInt)
    if ((yt != -1.0 && yt != 1.0).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("y_true can have values -1 or 1 only."))
    }
    val pred: Double = y_pred((i.toInt).toInt)
    val l: Double = maxf(0.0, 1.0 - yt * pred)
    losses = losses :+ l
    i = i + BigInt(1)
  }
  return mean(losses)
}

def huber_loss(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double], delta: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val diff: Double = y_true((i.toInt).toInt) - y_pred((i.toInt).toInt)
    val adiff: Double = absf(diff)
    if (adiff <= delta) {
      total = total + 0.5 * diff * diff
    } else {
      total = total + delta * (adiff - 0.5 * delta)
    }
    i = i + BigInt(1)
  }
  return total / to_float(BigInt((y_true).size))
}

def mean_squared_error(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double]): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var losses: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val diff: Double = y_true((i.toInt).toInt) - y_pred((i.toInt).toInt)
    losses = losses :+ diff * diff
    i = i + BigInt(1)
  }
  return mean(losses)
}

def mean_absolute_error(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double]): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    total = total + absf(y_true((i.toInt).toInt) - y_pred((i.toInt).toInt))
    i = i + BigInt(1)
  }
  return total / to_float(BigInt((y_true).size))
}

def mean_squared_logarithmic_error(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double]): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val a: Double = ln(1.0 + y_true((i.toInt).toInt))
    val b: Double = ln(1.0 + y_pred((i.toInt).toInt))
    val diff: Double = a - b
    total = total + diff * diff
    i = i + BigInt(1)
  }
  return total / to_float(BigInt((y_true).size))
}

def mean_absolute_percentage_error(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double], epsilon: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("The length of the two arrays should be the same."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    var yt: Double = y_true((i.toInt).toInt)
    if (yt == 0.0) {
      yt = epsilon
    }
    total = total + absf((yt - y_pred((i.toInt).toInt)) / yt)
    i = i + BigInt(1)
  }
  return total / to_float(BigInt((y_true).size))
}

def perplexity_loss(y_true: ArrayBuffer[ArrayBuffer[BigInt]], y_pred: ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]], epsilon: Double): Double = {
  val batch: BigInt = BigInt((y_true).size)
  if (batch != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Batch size of y_true and y_pred must be equal."))
  }
  val sentence_len: BigInt = BigInt((y_true((BigInt(0).toInt).toInt)).size)
  if (sentence_len != BigInt((y_pred((BigInt(0).toInt).toInt)).size)) {
    throw new RuntimeException(String.valueOf("Sentence length of y_true and y_pred must be equal."))
  }
  val vocab_size: BigInt = BigInt((y_pred((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt)).size)
  var b: BigInt = BigInt(0)
  var total_perp: Double = 0.0
  while (b < batch) {
    if ((BigInt((y_true((b.toInt).toInt)).size) != sentence_len || BigInt((y_pred((b.toInt).toInt)).size) != sentence_len).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Sentence length of y_true and y_pred must be equal."))
    }
    var sum_log: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < sentence_len) {
      val label: BigInt = y_true((b.toInt).toInt)((j.toInt).toInt)
      if (label >= vocab_size) {
        throw new RuntimeException(String.valueOf("Label value must not be greater than vocabulary size."))
      }
      val prob: Double = clip(y_pred((b.toInt).toInt)((j.toInt).toInt)((label.toInt).toInt), epsilon, 1.0)
      sum_log = sum_log + ln(prob)
      j = j + BigInt(1)
    }
    val mean_log: Double = sum_log / to_float(sentence_len)
    val perp: Double = exp(-mean_log)
    total_perp = total_perp + perp
    b = b + BigInt(1)
  }
  return total_perp / to_float(batch)
}

def smooth_l1_loss(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double], beta: Double): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("The length of the two arrays should be the same."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    val diff: Double = absf(y_true((i.toInt).toInt) - y_pred((i.toInt).toInt))
    if (diff < beta) {
      total = total + 0.5 * diff * diff / beta
    } else {
      total = total + diff - 0.5 * beta
    }
    i = i + BigInt(1)
  }
  return total / to_float(BigInt((y_true).size))
}

def kullback_leibler_divergence(y_true: ArrayBuffer[Double], y_pred: ArrayBuffer[Double]): Double = {
  if (BigInt((y_true).size) != BigInt((y_pred).size)) {
    throw new RuntimeException(String.valueOf("Input arrays must have the same length."))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((y_true).size)) {
    total = total + y_true((i.toInt).toInt) * ln(y_true((i.toInt).toInt) / y_pred((i.toInt).toInt))
    i = i + BigInt(1)
  }
  return total
}

def main(): Any = {
  val y_true_bc: ArrayBuffer[Double] = ArrayBuffer(0.0, 1.0, 1.0, 0.0, 1.0)
  val y_pred_bc: ArrayBuffer[Double] = ArrayBuffer(0.2, 0.7, 0.9, 0.3, 0.8)
  println(binary_cross_entropy(y_true_bc, y_pred_bc, 0.000000000000001))
  println(binary_focal_cross_entropy(y_true_bc, y_pred_bc, 2.0, 0.25, 0.000000000000001))
  val y_true_cce: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 0.0, 0.0), ArrayBuffer(0.0, 1.0, 0.0), ArrayBuffer(0.0, 0.0, 1.0))
  val y_pred_cce: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.9, 0.1, 0.0), ArrayBuffer(0.2, 0.7, 0.1), ArrayBuffer(0.0, 0.1, 0.9))
  println(categorical_cross_entropy(y_true_cce, y_pred_cce, 0.000000000000001))
  val alpha: ArrayBuffer[Double] = ArrayBuffer(0.6, 0.2, 0.7)
  println(categorical_focal_cross_entropy(y_true_cce, y_pred_cce, alpha, 2.0, 0.000000000000001))
  val y_true_hinge: ArrayBuffer[Double] = ArrayBuffer(-1.0, 1.0, 1.0, -1.0, 1.0)
  val y_pred_hinge: ArrayBuffer[Double] = ArrayBuffer(-4.0, -0.3, 0.7, 5.0, 10.0)
  println(hinge_loss(y_true_hinge, y_pred_hinge))
  val y_true_huber: ArrayBuffer[Double] = ArrayBuffer(0.9, 10.0, 2.0, 1.0, 5.2)
  val y_pred_huber: ArrayBuffer[Double] = ArrayBuffer(0.8, 2.1, 2.9, 4.2, 5.2)
  println(huber_loss(y_true_huber, y_pred_huber, 1.0))
  println(mean_squared_error(y_true_huber, y_pred_huber))
  println(mean_absolute_error(y_true_huber, y_pred_huber))
  println(mean_squared_logarithmic_error(y_true_huber, y_pred_huber))
  val y_true_mape: ArrayBuffer[Double] = ArrayBuffer(10.0, 20.0, 30.0, 40.0)
  val y_pred_mape: ArrayBuffer[Double] = ArrayBuffer(12.0, 18.0, 33.0, 45.0)
  println(mean_absolute_percentage_error(y_true_mape, y_pred_mape, 0.000000000000001))
  val y_true_perp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(3)))
  val y_pred_perp: ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(0.28, 0.19, 0.21, 0.15, 0.17), ArrayBuffer(0.24, 0.19, 0.09, 0.18, 0.3)), ArrayBuffer(ArrayBuffer(0.03, 0.26, 0.21, 0.18, 0.32), ArrayBuffer(0.28, 0.1, 0.33, 0.15, 0.14)))
  println(perplexity_loss(y_true_perp, y_pred_perp, 0.0000001))
  val y_true_smooth: ArrayBuffer[Double] = ArrayBuffer(3.0, 5.0, 2.0, 7.0)
  val y_pred_smooth: ArrayBuffer[Double] = ArrayBuffer(2.9, 4.8, 2.1, 7.2)
  println(smooth_l1_loss(y_true_smooth, y_pred_smooth, 1.0))
  val y_true_kl: ArrayBuffer[Double] = ArrayBuffer(0.2, 0.3, 0.5)
  val y_pred_kl: ArrayBuffer[Double] = ArrayBuffer(0.3, 0.3, 0.4)
  println(kullback_leibler_divergence(y_true_kl, y_pred_kl))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
