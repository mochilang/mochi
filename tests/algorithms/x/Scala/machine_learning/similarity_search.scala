// Generated by Mochi v0.10.59 on 2025-08-07 12:45:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Neighbor(var vector: ArrayBuffer[Double], var distance: Double)

def sqrt(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def euclidean(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    val diff: Double = a((i.toInt).toInt) - b((i.toInt).toInt)
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  val res: Double = sqrt(sum)
  return res
}

def similarity_search(dataset: ArrayBuffer[ArrayBuffer[Double]], value_array: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Neighbor] = {
  val dim: BigInt = BigInt((dataset((BigInt(0).toInt).toInt)).size)
  if (dim != BigInt((value_array((BigInt(0).toInt).toInt)).size)) {
    return ArrayBuffer[Neighbor]()
  }
  var result: ArrayBuffer[Neighbor] = ArrayBuffer[Neighbor]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((value_array).size)) {
    val value: ArrayBuffer[Double] = value_array((i.toInt).toInt)
    var dist: Double = euclidean(value, dataset((BigInt(0).toInt).toInt))
    var vec: ArrayBuffer[Double] = dataset((BigInt(0).toInt).toInt)
    var j: BigInt = BigInt(1)
    while (j < BigInt((dataset).size)) {
      val d: Double = euclidean(value, dataset((j.toInt).toInt))
      if (d < dist) {
        dist = d
        vec = dataset((j.toInt).toInt)
      }
      j = j + BigInt(1)
    }
    val nb: Neighbor = Neighbor(vec, dist)
    result = result :+ nb
    i = i + BigInt(1)
  }
  return result
}

def cosine_similarity(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var dot: Double = 0.0
  var norm_a: Double = 0.0
  var norm_b: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    dot = dot + a((i.toInt).toInt) * b((i.toInt).toInt)
    norm_a = norm_a + a((i.toInt).toInt) * a((i.toInt).toInt)
    norm_b = norm_b + b((i.toInt).toInt) * b((i.toInt).toInt)
    i = i + BigInt(1)
  }
  if ((norm_a == 0.0 || norm_b == 0.0).asInstanceOf[Boolean]) {
    return 0.0
  }
  return dot / (sqrt(norm_a) * sqrt(norm_b))
}

val dataset: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(1.0, 1.0, 1.0), ArrayBuffer(2.0, 2.0, 2.0))

val value_array: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 1.0))

val neighbors: ArrayBuffer[Neighbor] = similarity_search(dataset, value_array)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var k: BigInt = BigInt(0)
    while (k < BigInt((neighbors).size)) {
      val n: Neighbor = neighbors((k.toInt).toInt)
      println("[" + String.valueOf(n.asInstanceOf[Neighbor].vector) + ", " + String.valueOf(n.asInstanceOf[Neighbor].distance) + "]")
      k = k + BigInt(1)
    }
    println(String.valueOf(cosine_similarity(ArrayBuffer(1.0, 2.0), ArrayBuffer(6.0, 32.0))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
