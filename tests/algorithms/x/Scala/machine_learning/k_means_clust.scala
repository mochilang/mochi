// Generated by Mochi v0.10.67 on 2025-08-16 21:29:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

case class KMeansResult(var centroids: ArrayBuffer[ArrayBuffer[Double]], var assignments: ArrayBuffer[BigInt], var heterogeneity: ArrayBuffer[Double])

def distance_sq(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  for (i <- (BigInt(0)).toInt until (BigInt((a).size)).toInt) {
    var diff: Double = a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0)
    sum = sum + diff * diff
  }
  return sum
}

def assign_clusters(data: ArrayBuffer[ArrayBuffer[Double]], centroids: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[BigInt] = {
  var assignments: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (i <- (BigInt(0)).toInt until (BigInt((data).size)).toInt) {
    var best_idx: BigInt = BigInt(0)
    var best: Double = distance_sq(data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), centroids.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()))
    for (j <- (BigInt(1)).toInt until (BigInt((centroids).size)).toInt) {
      var dist: Double = distance_sq(data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), centroids.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
      if (dist < best) {
        best = dist
        best_idx = BigInt(j.toString.toDouble.toInt)
      }
    }
    assignments = (assignments :+ best_idx)
  }
  return assignments
}

def revise_centroids(data: ArrayBuffer[ArrayBuffer[Double]], k: BigInt, assignment: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[Double]] = {
  var dim: BigInt = BigInt((data.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var sums: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (i <- (BigInt(0)).toInt until (k).toInt) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    for (j <- (BigInt(0)).toInt until (dim).toInt) {
      row = (row :+ 0.0)
    }
    sums = (sums :+ row)
    counts = (counts :+ BigInt(0))
  }
  for (i <- (BigInt(0)).toInt until (BigInt((data).size)).toInt) {
    var c: BigInt = assignment.lift((i.toInt).toInt).getOrElse(BigInt(0))
    counts((c).toInt) = counts.lift((c.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
    for (j <- (BigInt(0)).toInt until (dim).toInt) {
      sums((c).toInt)((j).toInt) = sums.lift((c.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) + data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
    }
  }
  var centroids: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  for (i <- (BigInt(0)).toInt until (k).toInt) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    if (counts.lift((i.toInt).toInt).getOrElse(BigInt(0)) > BigInt(0)) {
      for (j <- (BigInt(0)).toInt until (dim).toInt) {
        row = (row :+ sums.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) / (counts.lift((i.toInt).toInt).getOrElse(BigInt(0))).toDouble)
      }
    } else {
      for (j <- (BigInt(0)).toInt until (dim).toInt) {
        row = (row :+ 0.0)
      }
    }
    centroids = (centroids :+ row)
  }
  return centroids
}

def compute_heterogeneity(data: ArrayBuffer[ArrayBuffer[Double]], centroids: ArrayBuffer[ArrayBuffer[Double]], assignment: ArrayBuffer[BigInt]): Double = {
  var total: Double = 0.0
  for (i <- (BigInt(0)).toInt until (BigInt((data).size)).toInt) {
    var c: BigInt = assignment.lift((i.toInt).toInt).getOrElse(BigInt(0))
    total = total + distance_sq(data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), centroids.lift((c.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
  }
  return total
}

def lists_equal(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  for (i <- (BigInt(0)).toInt until (BigInt((a).size)).toInt) {
    if (a.lift((i.toInt).toInt).getOrElse(BigInt(0)) != b.lift((i.toInt).toInt).getOrElse(BigInt(0))) {
      return false
    }
  }
  return true
}

def kmeans(data: ArrayBuffer[ArrayBuffer[Double]], k: BigInt, initial_centroids: ArrayBuffer[ArrayBuffer[Double]], max_iter: BigInt): KMeansResult = {
  var centroids: ArrayBuffer[ArrayBuffer[Double]] = initial_centroids
  var assignment: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var prev: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var heterogeneity: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var iter: BigInt = BigInt(0)
  val _br12 = new Breaks
  _br12.breakable {
    while (iter < max_iter) {
      assignment = assign_clusters(data, centroids)
      centroids = revise_centroids(data, k, assignment)
      var h: Double = compute_heterogeneity(data, centroids, assignment)
      heterogeneity = (heterogeneity :+ h)
      if ((iter > BigInt(0) && lists_equal(prev, assignment))) {
        _br12.break()
      }
      prev = assignment
      iter = iter + BigInt(1)
    }
  }
  return KMeansResult(centroids, assignment, heterogeneity)
}

var data: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 2.0), ArrayBuffer(1.5, 1.8), ArrayBuffer(5.0, 8.0), ArrayBuffer(8.0, 8.0), ArrayBuffer(1.0, 0.6), ArrayBuffer(9.0, 11.0))

var k: BigInt = BigInt(3)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var initial_centroids: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(data.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()), data.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()), data.lift((BigInt(5).toInt).toInt).getOrElse(ArrayBuffer[Double]()))
    var result: KMeansResult = kmeans(data, k, initial_centroids, BigInt(10))
    println(_str(_str(result.centroids)))
    println(_str(_str(result.assignments)))
    println(_str(_str(result.heterogeneity)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
