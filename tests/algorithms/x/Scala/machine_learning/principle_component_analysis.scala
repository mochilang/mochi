// Generated by Mochi v0.10.67 on 2025-08-16 21:31:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

case class PCAResult(var transformed: ArrayBuffer[ArrayBuffer[Double]], var variance_ratio: ArrayBuffer[Double])

case class Eigen(var values: ArrayBuffer[Double], var vectors: ArrayBuffer[ArrayBuffer[Double]])

def sqrt(x: Double): Double = {
  var guess: Double = (if (x > 1.0) x / 2.0 else 1.0)
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = 0.5 * (guess + x / guess)
    i = i + BigInt(1)
  }
  return guess
}

def mean(xs: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    sum = sum + xs.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return sum / (BigInt((xs).size)).toDouble
}

def standardize(data: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var n_samples: BigInt = BigInt((data).size)
  var n_features: BigInt = BigInt((data.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var means: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var stds: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var j: BigInt = BigInt(0)
  while (j < n_features) {
    var column: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < n_samples) {
      column = (column :+ data.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      i = i + BigInt(1)
    }
    var m: Double = mean(column)
    means = (means :+ m)
    var variance: Double = 0.0
    var k: BigInt = BigInt(0)
    while (k < n_samples) {
      var diff: Double = column.lift((k.toInt).toInt).getOrElse(0.0) - m
      variance = variance + diff * diff
      k = k + BigInt(1)
    }
    stds = (stds :+ sqrt(variance / (n_samples - BigInt(1)).toDouble))
    j = j + BigInt(1)
  }
  var standardized: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var r: BigInt = BigInt(0)
  while (r < n_samples) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c: BigInt = BigInt(0)
    while (c < n_features) {
      row = (row :+ (data.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0) - means.lift((c.toInt).toInt).getOrElse(0.0)) / stds.lift((c.toInt).toInt).getOrElse(0.0))
      c = c + BigInt(1)
    }
    standardized = (standardized :+ row)
    r = r + BigInt(1)
  }
  return standardized
}

def covariance_matrix(data: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var n_samples: BigInt = BigInt((data).size)
  var n_features: BigInt = BigInt((data.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var cov: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n_features) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n_features) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < n_samples) {
        sum = sum + data.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0) * data.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      row = (row :+ sum / (n_samples - BigInt(1)).toDouble)
      j = j + BigInt(1)
    }
    cov = (cov :+ row)
    i = i + BigInt(1)
  }
  return cov
}

def normalize(vec: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((vec).size)) {
    sum = sum + vec.lift((i.toInt).toInt).getOrElse(0.0) * vec.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  var n: Double = sqrt(sum)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((vec).size)) {
    res = (res :+ vec.lift((j.toInt).toInt).getOrElse(0.0) / n)
    j = j + BigInt(1)
  }
  return res
}

def eigen_decomposition_2x2(matrix: ArrayBuffer[ArrayBuffer[Double]]): Eigen = {
  var a: Double = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var b: Double = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  var c: Double = matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  var diff: Double = a - c
  var discriminant: Double = sqrt(diff * diff + 4.0 * b * b)
  var lambda1: Double = (a + c + discriminant) / 2.0
  var lambda2: Double = (a + c - discriminant) / 2.0
  var v1: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var v2: ArrayBuffer[Double] = ArrayBuffer[Double]()
  if (b != 0.0) {
    v1 = normalize(ArrayBuffer(lambda1 - c, b))
    v2 = normalize(ArrayBuffer(lambda2 - c, b))
  } else {
    v1 = ArrayBuffer(1.0, 0.0)
    v2 = ArrayBuffer(0.0, 1.0)
  }
  var eigenvalues: ArrayBuffer[Double] = ArrayBuffer(lambda1, lambda2)
  var eigenvectors: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(v1, v2)
  if (eigenvalues.lift((BigInt(0).toInt).toInt).getOrElse(0.0) < eigenvalues.lift((BigInt(1).toInt).toInt).getOrElse(0.0)) {
    var tmp_val: Double = eigenvalues.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
    eigenvalues((BigInt(0)).toInt) = eigenvalues.lift((BigInt(1).toInt).toInt).getOrElse(0.0)
    eigenvalues((BigInt(1)).toInt) = tmp_val
    var tmp_vec: ArrayBuffer[Double] = eigenvectors.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())
    eigenvectors((BigInt(0)).toInt) = eigenvectors.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]())
    eigenvectors((BigInt(1)).toInt) = tmp_vec
  }
  return Eigen(eigenvalues, eigenvectors)
}

def transpose(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var rows: BigInt = BigInt((matrix).size)
  var cols: BigInt = BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var trans: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < rows) {
      row = (row :+ matrix.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    trans = (trans :+ row)
    i = i + BigInt(1)
  }
  return trans
}

def matrix_multiply(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var rows_a: BigInt = BigInt((a).size)
  var cols_a: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var rows_b: BigInt = BigInt((b).size)
  var cols_b: BigInt = BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  if (cols_a != rows_b) {
    throw new RuntimeException(String.valueOf("Incompatible matrices"))
  }
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows_a) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols_b) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < cols_a) {
        sum = sum + a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) * b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      row = (row :+ sum)
      j = j + BigInt(1)
    }
    result = (result :+ row)
    i = i + BigInt(1)
  }
  return result
}

def apply_pca(data: ArrayBuffer[ArrayBuffer[Double]], n_components: BigInt): PCAResult = {
  var standardized: ArrayBuffer[ArrayBuffer[Double]] = standardize(data)
  var cov: ArrayBuffer[ArrayBuffer[Double]] = covariance_matrix(standardized)
  var eig: Eigen = eigen_decomposition_2x2(cov)
  var eigenvalues: ArrayBuffer[Double] = eig.asInstanceOf[Eigen].values
  var eigenvectors: ArrayBuffer[ArrayBuffer[Double]] = eig.asInstanceOf[Eigen].vectors
  var components: ArrayBuffer[ArrayBuffer[Double]] = transpose(eigenvectors)
  var transformed: ArrayBuffer[ArrayBuffer[Double]] = matrix_multiply(standardized, components)
  var total: Double = eigenvalues.lift((BigInt(0).toInt).toInt).getOrElse(0.0) + eigenvalues.lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  var ratios: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n_components) {
    ratios = (ratios :+ eigenvalues.lift((i.toInt).toInt).getOrElse(0.0) / total)
    i = i + BigInt(1)
  }
  return PCAResult(transformed, ratios)
}

var data: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.5, 2.4), ArrayBuffer(0.5, 0.7), ArrayBuffer(2.2, 2.9), ArrayBuffer(1.9, 2.2), ArrayBuffer(3.1, 3.0), ArrayBuffer(2.3, 2.7), ArrayBuffer(2.0, 1.6), ArrayBuffer(1.0, 1.1), ArrayBuffer(1.5, 1.6), ArrayBuffer(1.1, 0.9))

var idx: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: PCAResult = apply_pca(data, BigInt(2))
    println(_str("Transformed Data (first 5 rows):"))
    while (idx < BigInt(5)) {
      println(_str(result.transformed.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[Double]())))
      idx = idx + BigInt(1)
    }
    println(_str("Explained Variance Ratio:"))
    println(_str(result.variance_ratio))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
