// Generated by Mochi v0.10.59 on 2025-08-07 12:44:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def design_matrix(xs: ArrayBuffer[Double], degree: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var i: BigInt = BigInt(0)
  var matrix: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (i < BigInt((xs).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    var pow: Double = 1.0
    while (j <= degree) {
      row = row :+ pow
      pow = pow * xs((i.toInt).toInt)
      j = j + BigInt(1)
    }
    matrix = matrix :+ row
    i = i + BigInt(1)
  }
  return matrix
}

def transpose(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((matrix).size)
  val cols: BigInt = BigInt((matrix((BigInt(0).toInt).toInt)).size)
  var j: BigInt = BigInt(0)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (j < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < rows) {
      row = row :+ matrix((i.toInt).toInt)((j.toInt).toInt)
      i = i + BigInt(1)
    }
    result = result :+ row
    j = j + BigInt(1)
  }
  return result
}

def matmul(A: ArrayBuffer[ArrayBuffer[Double]], B: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((A).size)
  val m: BigInt = BigInt((A((BigInt(0).toInt).toInt)).size)
  val p: BigInt = BigInt((B((BigInt(0).toInt).toInt)).size)
  var i: BigInt = BigInt(0)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var k: BigInt = BigInt(0)
    while (k < p) {
      var sum: Double = 0.0
      var j: BigInt = BigInt(0)
      while (j < m) {
        sum = sum + A((i.toInt).toInt)((j.toInt).toInt) * B((j.toInt).toInt)((k.toInt).toInt)
        j = j + BigInt(1)
      }
      row = row :+ sum
      k = k + BigInt(1)
    }
    result = result :+ row
    i = i + BigInt(1)
  }
  return result
}

def matvec_mul(A: ArrayBuffer[ArrayBuffer[Double]], v: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val n: BigInt = BigInt((A).size)
  val m: BigInt = BigInt((A((BigInt(0).toInt).toInt)).size)
  var i: BigInt = BigInt(0)
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  while (i < n) {
    var sum: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < m) {
      sum = sum + A((i.toInt).toInt)((j.toInt).toInt) * v((j.toInt).toInt)
      j = j + BigInt(1)
    }
    result = result :+ sum
    i = i + BigInt(1)
  }
  return result
}

def gaussian_elimination(A: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val n: BigInt = BigInt((A).size)
  var M: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    M = M :+ A((i.toInt).toInt) :+ b((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var k: BigInt = BigInt(0)
  while (k < n) {
    var j: BigInt = k + BigInt(1)
    while (j < n) {
      val factor: Double = M((j.toInt).toInt)((k.toInt).toInt) / M((k.toInt).toInt)((k.toInt).toInt)
      var rowj: ArrayBuffer[Double] = M((j.toInt).toInt)
      var rowk: ArrayBuffer[Double] = M((k.toInt).toInt)
      var l: BigInt = k
      while (l <= n) {
        rowj((l).toInt) = rowj((l.toInt).toInt) - factor * rowk((l.toInt).toInt)
        l = l + BigInt(1)
      }
      M((j).toInt) = rowj
      j = j + BigInt(1)
    }
    k = k + BigInt(1)
  }
  var x: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var t: BigInt = BigInt(0)
  while (t < n) {
    x = x :+ 0.0
    t = t + BigInt(1)
  }
  var i2: BigInt = n - BigInt(1)
  while (i2 >= BigInt(0)) {
    var sum: Double = M((i2.toInt).toInt)((n.toInt).toInt)
    var j2: BigInt = i2 + BigInt(1)
    while (j2 < n) {
      sum = sum - M((i2.toInt).toInt)((j2.toInt).toInt) * x((j2.toInt).toInt)
      j2 = j2 + BigInt(1)
    }
    x((i2).toInt) = sum / M((i2.toInt).toInt)((i2.toInt).toInt)
    i2 = i2 - BigInt(1)
  }
  return x
}

def predict(xs: ArrayBuffer[Double], coeffs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var i: BigInt = BigInt(0)
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  while (i < BigInt((xs).size)) {
    val x: Double = xs((i.toInt).toInt)
    var j: BigInt = BigInt(0)
    var pow: Double = 1.0
    var sum: Double = 0.0
    while (j < BigInt((coeffs).size)) {
      sum = sum + coeffs((j.toInt).toInt) * pow
      pow = pow * x
      j = j + BigInt(1)
    }
    result = result :+ sum
    i = i + BigInt(1)
  }
  return result
}

val xs: ArrayBuffer[Double] = ArrayBuffer(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0)

var X: ArrayBuffer[ArrayBuffer[Double]] = design_matrix(xs, BigInt(3))

var Xt: ArrayBuffer[ArrayBuffer[Double]] = transpose(X)

var XtX: ArrayBuffer[ArrayBuffer[Double]] = matmul(Xt, X)

val coeffs: ArrayBuffer[Double] = gaussian_elimination(XtX, Xty)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var ys: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < BigInt((xs).size)) {
      val x: Double = xs((i.toInt).toInt)
      ys = ys :+ x * x * x - 2.0 * x * x + 3.0 * x - 5.0
      i = i + BigInt(1)
    }
    var Xty: ArrayBuffer[Double] = matvec_mul(Xt, ys)
    println(String.valueOf(coeffs))
    println(String.valueOf(predict(ArrayBuffer((-1.0).toString.toDouble), coeffs)))
    println(String.valueOf(predict(ArrayBuffer((-2.0).toString.toDouble), coeffs)))
    println(String.valueOf(predict(ArrayBuffer(6.0), coeffs)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
