// Generated by Mochi v0.10.59 on 2025-08-07 12:45:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_winner(weights: ArrayBuffer[ArrayBuffer[Double]], sample: ArrayBuffer[BigInt]): BigInt = {
  var d0: Double = 0.0
  var d1: Double = 0.0
  for (i <- (BigInt(0)).toInt until (BigInt((sample).size)).toInt) {
    val diff0: Double = (sample((i.toInt).toInt)).toString.toDouble - weights((BigInt(0).toInt).toInt)((i.toInt).toInt)
    val diff1: Double = (sample((i.toInt).toInt)).toString.toDouble - weights((BigInt(1).toInt).toInt)((i.toInt).toInt)
    d0 = d0 + diff0 * diff0
    d1 = d1 + diff1 * diff1
    return (if (d0 > d1) BigInt(0) else BigInt(1))
  }
  return BigInt(0)
}

def update(weights: ArrayBuffer[ArrayBuffer[Double]], sample: ArrayBuffer[BigInt], j: BigInt, alpha: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  for (i <- (BigInt(0)).toInt until (BigInt((weights).size)).toInt) {
    weights((j).toInt)((i).toInt) = weights((j.toInt).toInt)((i.toInt).toInt) + alpha * ((sample((i.toInt).toInt)).toString.toDouble - weights((j.toInt).toInt)((i.toInt).toInt))
  }
  return weights
}

def list_to_string(xs: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    s = s + String.valueOf(xs((i.toInt).toInt))
    if (i < BigInt((xs).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def matrix_to_string(m: ArrayBuffer[ArrayBuffer[Double]]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((m).size)) {
    s = s + list_to_string(m((i.toInt).toInt))
    if (i < BigInt((m).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def main(): Any = {
  val training_samples: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(1)))
  var weights: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.2, 0.6, 0.5, 0.9), ArrayBuffer(0.8, 0.4, 0.7, 0.3))
  val epochs: BigInt = BigInt(3)
  val alpha: Double = 0.5
  for (_ <- (BigInt(0)).toInt until (epochs).toInt) {
    for (j <- (BigInt(0)).toInt until (BigInt((training_samples).size)).toInt) {
      val sample: ArrayBuffer[BigInt] = training_samples((j.toInt).toInt)
      val winner: BigInt = get_winner(weights, sample)
      weights = update(weights, sample, winner, alpha)
    }
  }
  val sample: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(1))
  val winner: BigInt = get_winner(weights, sample)
  println("Clusters that the test sample belongs to : " + String.valueOf(winner))
  println("Weights that have been trained : " + matrix_to_string(weights))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
