// Generated by Mochi v0.10.59 on 2025-08-07 12:43:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def int_to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return 0.0 - x
  }
  return x
}

def exp_approx(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    term = term * x / int_to_float(i)
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def floor_int(x: Double): BigInt = {
  var i: BigInt = BigInt(0)
  while (int_to_float(i + BigInt(1)) <= x) {
    i = i + BigInt(1)
  }
  return i
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var s: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    s = s + a((i.toInt).toInt) * b((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return s
}

def transpose(m: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((m).size)
  val cols: BigInt = BigInt((m((BigInt(0).toInt).toInt)).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var j: BigInt = BigInt(0)
  while (j < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < rows) {
      row = row :+ m((i.toInt).toInt)((j.toInt).toInt)
      i = i + BigInt(1)
    }
    res = res :+ row
    j = j + BigInt(1)
  }
  return res
}

def matmul(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((a).size)
  val m: BigInt = BigInt((b((BigInt(0).toInt).toInt)).size)
  val p: BigInt = BigInt((b).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m) {
      var s: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < p) {
        s = s + a((i.toInt).toInt)((k.toInt).toInt) * b((k.toInt).toInt)((j.toInt).toInt)
        k = k + BigInt(1)
      }
      row = row :+ s
      j = j + BigInt(1)
    }
    res = res :+ row
    i = i + BigInt(1)
  }
  return res
}

def matvec(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    res = res :+ dot(a((i.toInt).toInt), b)
    i = i + BigInt(1)
  }
  return res
}

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ (if (i == j) 1.0 else 0.0)
      j = j + BigInt(1)
    }
    res = res :+ row
    i = i + BigInt(1)
  }
  return res
}

def invert(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((mat).size)
  var a: ArrayBuffer[ArrayBuffer[Double]] = mat
  var inv: ArrayBuffer[ArrayBuffer[Double]] = identity(n)
  var i: BigInt = BigInt(0)
  while (i < n) {
    val pivot: Double = a((i.toInt).toInt)((i.toInt).toInt)
    var j: BigInt = BigInt(0)
    while (j < n) {
      a((i).toInt)((j).toInt) = a((i.toInt).toInt)((j.toInt).toInt) / pivot
      inv((i).toInt)((j).toInt) = inv((i.toInt).toInt)((j.toInt).toInt) / pivot
      j = j + BigInt(1)
    }
    var k: BigInt = BigInt(0)
    while (k < n) {
      if (k != i) {
        val factor: Double = a((k.toInt).toInt)((i.toInt).toInt)
        j = BigInt(0)
        while (j < n) {
          a((k).toInt)((j).toInt) = a((k.toInt).toInt)((j.toInt).toInt) - factor * a((i.toInt).toInt)((j.toInt).toInt)
          inv((k).toInt)((j).toInt) = inv((k.toInt).toInt)((j.toInt).toInt) - factor * inv((i.toInt).toInt)((j.toInt).toInt)
          j = j + BigInt(1)
        }
      }
      k = k + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return inv
}

def normal_equation(X: ArrayBuffer[ArrayBuffer[Double]], y: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val Xt: ArrayBuffer[ArrayBuffer[Double]] = transpose(X)
  val XtX: ArrayBuffer[ArrayBuffer[Double]] = matmul(Xt, X)
  val XtX_inv: ArrayBuffer[ArrayBuffer[Double]] = invert(XtX)
  val Xty: ArrayBuffer[Double] = matvec(Xt, y)
  return matvec(XtX_inv, Xty)
}

def linear_regression_prediction(train_dt: ArrayBuffer[Double], train_usr: ArrayBuffer[Double], train_mtch: ArrayBuffer[Double], test_dt: ArrayBuffer[Double], test_mtch: ArrayBuffer[Double]): Double = {
  var X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((train_dt).size)) {
    X = X :+ ArrayBuffer(1.0, (train_dt((i.toInt).toInt)).toString.toDouble, (train_mtch((i.toInt).toInt)).toString.toDouble)
    i = i + BigInt(1)
  }
  val beta: ArrayBuffer[Double] = normal_equation(X, train_usr)
  return abs_float(beta((BigInt(0).toInt).toInt) + test_dt((BigInt(0).toInt).toInt) * beta((BigInt(1).toInt).toInt) + test_mtch((BigInt(0).toInt).toInt) * beta((BigInt(2).toInt).toInt))
}

def sarimax_predictor(train_user: ArrayBuffer[Double], train_match: ArrayBuffer[Double], test_match: ArrayBuffer[Double]): Double = {
  val n: BigInt = BigInt((train_user).size)
  var X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(1)
  while (i < n) {
    X = X :+ ArrayBuffer(1.0, (train_user(((i - BigInt(1)).toInt).toInt)).toString.toDouble, (train_match((i.toInt).toInt)).toString.toDouble)
    y = y :+ train_user((i.toInt).toInt)
    i = i + BigInt(1)
  }
  val beta: ArrayBuffer[Double] = normal_equation(X, y)
  return beta((BigInt(0).toInt).toInt) + beta((BigInt(1).toInt).toInt) * train_user(((n - BigInt(1)).toInt).toInt) + beta((BigInt(2).toInt).toInt) * test_match((BigInt(0).toInt).toInt)
}

def rbf_kernel(a: ArrayBuffer[Double], b: ArrayBuffer[Double], gamma: Double): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    val diff: Double = a((i.toInt).toInt) - b((i.toInt).toInt)
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  return exp_approx(-gamma * sum)
}

def support_vector_regressor(x_train: ArrayBuffer[ArrayBuffer[Double]], x_test: ArrayBuffer[ArrayBuffer[Double]], train_user: ArrayBuffer[Double]): Double = {
  val gamma: Double = 0.1
  var weights: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_train).size)) {
    weights = weights :+ rbf_kernel(x_train((i.toInt).toInt), x_test((BigInt(0).toInt).toInt), gamma)
    i = i + BigInt(1)
  }
  var num: Double = 0.0
  var den: Double = 0.0
  i = BigInt(0)
  while (i < BigInt((train_user).size)) {
    num = num + weights((i.toInt).toInt) * train_user((i.toInt).toInt)
    den = den + weights((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return num / den
}

def set_at_float(xs: ArrayBuffer[Double], idx: BigInt, value: Double): ArrayBuffer[Double] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ value
    } else {
      res = res :+ xs((i.toInt).toInt)
    }
    i = i + BigInt(1)
  }
  return res
}

def sort_float(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = xs
  var i: BigInt = BigInt(1)
  while (i < BigInt((res).size)) {
    val key: Double = res((i.toInt).toInt)
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && res((j.toInt).toInt) > key) {
      res = set_at_float(res, j + BigInt(1), res((j.toInt).toInt))
      j = j - BigInt(1)
    }
    res = set_at_float(res, j + BigInt(1), key)
    i = i + BigInt(1)
  }
  return res
}

def percentile(data: ArrayBuffer[Double], q: Double): Double = {
  var sorted: ArrayBuffer[Double] = sort_float(data)
  val n: BigInt = BigInt((sorted).size)
  val pos: Double = q / 100.0 * int_to_float(n - BigInt(1))
  val idx: BigInt = floor_int(pos)
  val frac: Double = pos - int_to_float(idx)
  if (idx + BigInt(1) < n) {
    return sorted((idx.toInt).toInt) * (1.0 - frac) + sorted(((idx + BigInt(1)).toInt).toInt) * frac
  }
  return sorted((idx.toInt).toInt)
}

def interquartile_range_checker(train_user: ArrayBuffer[Double]): Double = {
  val q1: Double = percentile(train_user, 25.0)
  val q3: Double = percentile(train_user, 75.0)
  val iqr: Double = q3 - q1
  return q1 - iqr * 0.1
}

def data_safety_checker(list_vote: ArrayBuffer[Double], actual_result: Double): Boolean = {
  var safe: BigInt = BigInt(0)
  var not_safe: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((list_vote).size)) {
    val v: Double = list_vote((i.toInt).toInt)
    if (v > actual_result) {
      safe = not_safe + BigInt(1)
    } else {
      if (abs_float(abs_float(v) - abs_float(actual_result)) <= 0.1) {
        safe = safe + BigInt(1)
      } else {
        not_safe = not_safe + BigInt(1)
      }
    }
    i = i + BigInt(1)
  }
  return safe > not_safe
}

def main(): Any = {
  val vote: ArrayBuffer[Double] = ArrayBuffer(linear_regression_prediction(ArrayBuffer(2.0, 3.0, 4.0, 5.0), ArrayBuffer(5.0, 3.0, 4.0, 6.0), ArrayBuffer(3.0, 1.0, 2.0, 4.0), ArrayBuffer(2.0), ArrayBuffer(2.0)), sarimax_predictor(ArrayBuffer(4.0, 2.0, 6.0, 8.0), ArrayBuffer(3.0, 1.0, 2.0, 4.0), ArrayBuffer(2.0)), support_vector_regressor(ArrayBuffer(ArrayBuffer(5.0, 2.0), ArrayBuffer(1.0, 5.0), ArrayBuffer(6.0, 2.0)), ArrayBuffer(ArrayBuffer(3.0, 2.0)), ArrayBuffer(2.0, 1.0, 4.0)))
  println(vote((BigInt(0).toInt).toInt))
  println(vote((BigInt(1).toInt).toInt))
  println(vote((BigInt(2).toInt).toInt))
  println(data_safety_checker(vote, 5.0))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
