// Generated by Mochi v0.10.66 on 2025-08-16 12:47:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => java.math.BigDecimal.valueOf(d).stripTrailingZeros.toPlainString
  case other => String.valueOf(other)
}

def int_to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return 0.0 - x
  }
  return x
}

def exp_approx(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    term = term * x / int_to_float(i)
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def floor_int(x: Double): BigInt = {
  var i: BigInt = BigInt(0)
  while (int_to_float(i + BigInt(1)) <= x) {
    i = i + BigInt(1)
  }
  return i
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var s: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    s = s + a.lift((i.toInt).toInt).getOrElse(0.0) * b.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return s
}

def transpose(m: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var rows: BigInt = BigInt((m).size)
  var cols: BigInt = BigInt((m.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var j: BigInt = BigInt(0)
  while (j < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < rows) {
      row = (row :+ m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      i = i + BigInt(1)
    }
    res = (res :+ row)
    j = j + BigInt(1)
  }
  return res
}

def matmul(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var n: BigInt = BigInt((a).size)
  var m: BigInt = BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var p: BigInt = BigInt((b).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m) {
      var s: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < p) {
        s = s + a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) * b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      row = (row :+ s)
      j = j + BigInt(1)
    }
    res = (res :+ row)
    i = i + BigInt(1)
  }
  return res
}

def matvec(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    res = (res :+ dot(a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), b))
    i = i + BigInt(1)
  }
  return res
}

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = (row :+ (if (i == j) 1.0 else 0.0))
      j = j + BigInt(1)
    }
    res = (res :+ row)
    i = i + BigInt(1)
  }
  return res
}

def invert(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var n: BigInt = BigInt((mat).size)
  var a: ArrayBuffer[ArrayBuffer[Double]] = mat
  var inv: ArrayBuffer[ArrayBuffer[Double]] = identity(n)
  var i: BigInt = BigInt(0)
  while (i < n) {
    var pivot: Double = a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0)
    var j: BigInt = BigInt(0)
    while (j < n) {
      a((i).toInt)((j).toInt) = a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) / pivot
      inv((i).toInt)((j).toInt) = inv.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) / pivot
      j = j + BigInt(1)
    }
    var k: BigInt = BigInt(0)
    while (k < n) {
      if (k != i) {
        var factor: Double = a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0)
        j = BigInt(0)
        while (j < n) {
          a((k).toInt)((j).toInt) = a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) - factor * a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
          inv((k).toInt)((j).toInt) = inv.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) - factor * inv.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
          j = j + BigInt(1)
        }
      }
      k = k + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return inv
}

def normal_equation(X: ArrayBuffer[ArrayBuffer[Double]], y: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var Xt: ArrayBuffer[ArrayBuffer[Double]] = transpose(X)
  var XtX: ArrayBuffer[ArrayBuffer[Double]] = matmul(Xt, X)
  var XtX_inv: ArrayBuffer[ArrayBuffer[Double]] = invert(XtX)
  var Xty: ArrayBuffer[Double] = matvec(Xt, y)
  return matvec(XtX_inv, Xty)
}

def linear_regression_prediction(train_dt: ArrayBuffer[Double], train_usr: ArrayBuffer[Double], train_mtch: ArrayBuffer[Double], test_dt: ArrayBuffer[Double], test_mtch: ArrayBuffer[Double]): Double = {
  var X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((train_dt).size)) {
    X = (X :+ ArrayBuffer(1.0, (train_dt.lift((i.toInt).toInt).getOrElse(0.0)).toString.toDouble, (train_mtch.lift((i.toInt).toInt).getOrElse(0.0)).toString.toDouble))
    i = i + BigInt(1)
  }
  var beta: ArrayBuffer[Double] = normal_equation(X, train_usr)
  return abs_float(beta.lift((BigInt(0).toInt).toInt).getOrElse(0.0) + test_dt.lift((BigInt(0).toInt).toInt).getOrElse(0.0) * beta.lift((BigInt(1).toInt).toInt).getOrElse(0.0) + test_mtch.lift((BigInt(0).toInt).toInt).getOrElse(0.0) * beta.lift((BigInt(2).toInt).toInt).getOrElse(0.0))
}

def sarimax_predictor(train_user: ArrayBuffer[Double], train_match: ArrayBuffer[Double], test_match: ArrayBuffer[Double]): Double = {
  var n: BigInt = BigInt((train_user).size)
  var X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(1)
  while (i < n) {
    X = (X :+ ArrayBuffer(1.0, (train_user.lift(((i - BigInt(1)).toInt).toInt).getOrElse(0.0)).toString.toDouble, (train_match.lift((i.toInt).toInt).getOrElse(0.0)).toString.toDouble))
    y = (y :+ train_user.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  var beta: ArrayBuffer[Double] = normal_equation(X, y)
  return beta.lift((BigInt(0).toInt).toInt).getOrElse(0.0) + beta.lift((BigInt(1).toInt).toInt).getOrElse(0.0) * train_user.lift(((n - BigInt(1)).toInt).toInt).getOrElse(0.0) + beta.lift((BigInt(2).toInt).toInt).getOrElse(0.0) * test_match.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
}

def rbf_kernel(a: ArrayBuffer[Double], b: ArrayBuffer[Double], gamma: Double): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    var diff: Double = a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0)
    sum = sum + diff * diff
    i = i + BigInt(1)
  }
  return exp_approx(-gamma * sum)
}

def support_vector_regressor(x_train: ArrayBuffer[ArrayBuffer[Double]], x_test: ArrayBuffer[ArrayBuffer[Double]], train_user: ArrayBuffer[Double]): Double = {
  var gamma: Double = 0.1
  var weights: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_train).size)) {
    weights = (weights :+ rbf_kernel(x_train.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), x_test.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()), gamma))
    i = i + BigInt(1)
  }
  var num: Double = 0.0
  var den: Double = 0.0
  i = BigInt(0)
  while (i < BigInt((train_user).size)) {
    num = num + weights.lift((i.toInt).toInt).getOrElse(0.0) * train_user.lift((i.toInt).toInt).getOrElse(0.0)
    den = den + weights.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return num / den
}

def set_at_float(xs: ArrayBuffer[Double], idx: BigInt, value: Double): ArrayBuffer[Double] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = (res :+ value)
    } else {
      res = (res :+ xs.lift((i.toInt).toInt).getOrElse(0.0))
    }
    i = i + BigInt(1)
  }
  return res
}

def sort_float(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = xs
  var i: BigInt = BigInt(1)
  while (i < BigInt((res).size)) {
    var key: Double = res.lift((i.toInt).toInt).getOrElse(0.0)
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && res.lift((j.toInt).toInt).getOrElse(0.0) > key) {
      res = set_at_float(res, j + BigInt(1), res.lift((j.toInt).toInt).getOrElse(0.0))
      j = j - BigInt(1)
    }
    res = set_at_float(res, j + BigInt(1), key)
    i = i + BigInt(1)
  }
  return res
}

def percentile(data: ArrayBuffer[Double], q: Double): Double = {
  var sorted: ArrayBuffer[Double] = sort_float(data)
  var n: BigInt = BigInt((sorted).size)
  var pos: Double = q / 100.0 * int_to_float(n - BigInt(1))
  var idx: BigInt = floor_int(pos)
  var frac: Double = pos - int_to_float(idx)
  if (idx + BigInt(1) < n) {
    return sorted.lift((idx.toInt).toInt).getOrElse(0.0) * (1.0 - frac) + sorted.lift(((idx + BigInt(1)).toInt).toInt).getOrElse(0.0) * frac
  }
  return sorted.lift((idx.toInt).toInt).getOrElse(0.0)
}

def interquartile_range_checker(train_user: ArrayBuffer[Double]): Double = {
  var q1: Double = percentile(train_user, 25.0)
  var q3: Double = percentile(train_user, 75.0)
  var iqr: Double = q3 - q1
  return q1 - iqr * 0.1
}

def data_safety_checker(list_vote: ArrayBuffer[Double], actual_result: Double): Boolean = {
  var safe: BigInt = BigInt(0)
  var not_safe: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((list_vote).size)) {
    var v: Double = list_vote.lift((i.toInt).toInt).getOrElse(0.0)
    if (v > actual_result) {
      safe = not_safe + BigInt(1)
    } else {
      if (abs_float(abs_float(v) - abs_float(actual_result)) <= 0.1) {
        safe = safe + BigInt(1)
      } else {
        not_safe = not_safe + BigInt(1)
      }
    }
    i = i + BigInt(1)
  }
  return safe > not_safe
}

def main(): Any = {
  var vote: ArrayBuffer[Double] = ArrayBuffer(linear_regression_prediction(ArrayBuffer(2.0, 3.0, 4.0, 5.0), ArrayBuffer(5.0, 3.0, 4.0, 6.0), ArrayBuffer(3.0, 1.0, 2.0, 4.0), ArrayBuffer(2.0), ArrayBuffer(2.0)), sarimax_predictor(ArrayBuffer(4.0, 2.0, 6.0, 8.0), ArrayBuffer(3.0, 1.0, 2.0, 4.0), ArrayBuffer(2.0)), support_vector_regressor(ArrayBuffer(ArrayBuffer(5.0, 2.0), ArrayBuffer(1.0, 5.0), ArrayBuffer(6.0, 2.0)), ArrayBuffer(ArrayBuffer(3.0, 2.0)), ArrayBuffer(2.0, 1.0, 4.0)))
  println(_str(vote.lift((BigInt(0).toInt).toInt).getOrElse(0.0)))
  println(_str(vote.lift((BigInt(1).toInt).toInt).getOrElse(0.0)))
  println(_str(vote.lift((BigInt(2).toInt).toInt).getOrElse(0.0)))
  println(_str(data_safety_checker(vote, 5.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
