// Generated by Mochi v0.10.67 on 2025-08-16 21:30:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def random(): Double = {
  return (rand()).toString.toDouble / 2147483648.0
}

def _mod(x: Double, m: Double): Double = {
  return x - (BigInt((x / m).toString.toDouble.toInt)).toDouble * m
}

def cos(x: Double): Double = {
  var y: Double = _mod(x + PI, TWO_PI) - PI
  var y2: Double = y * y
  var y4: Double = y2 * y2
  var y6: Double = y4 * y2
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def ln(x: Double): Double = {
  var t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(19)) {
    sum = sum + term / n.toString.toDouble
    term = term * t * t
    n = n + BigInt(2)
  }
  return 2.0 * sum
}

def gaussian_distribution(mean: Double, std_dev: Double, instance_count: BigInt): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < instance_count) {
    var u1: Double = random()
    var u2: Double = random()
    var r: Double = sqrtApprox(-2.0 * math.log(u1))
    var theta: Double = TWO_PI * u2
    var z: Double = r * cos(theta)
    res = (res :+ mean + z * std_dev)
    i = i + BigInt(1)
  }
  return res
}

def y_generator(class_count: BigInt, instance_count: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = BigInt(0)
  while (k < class_count) {
    var i: BigInt = BigInt(0)
    while (i < instance_count.lift((k.toInt).toInt).getOrElse(BigInt(0))) {
      res = (res :+ k)
      i = i + BigInt(1)
    }
    k = k + BigInt(1)
  }
  return res
}

def calculate_mean(instance_count: BigInt, items: ArrayBuffer[Double]): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < instance_count) {
    total = total + items.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return total / instance_count.toString.toDouble
}

def calculate_probabilities(instance_count: BigInt, total_count: BigInt): Double = {
  return instance_count.toString.toDouble / total_count.toString.toDouble
}

def calculate_variance(items: ArrayBuffer[ArrayBuffer[Double]], means: ArrayBuffer[Double], total_count: BigInt): Double = {
  var squared_diff: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((items).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((items.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      var diff: Double = items.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) - means.lift((i.toInt).toInt).getOrElse(0.0)
      squared_diff = (squared_diff :+ diff * diff)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var sum_sq: Double = 0.0
  var k: BigInt = BigInt(0)
  while (k < BigInt((squared_diff).size)) {
    sum_sq = sum_sq + squared_diff.lift((k.toInt).toInt).getOrElse(0.0)
    k = k + BigInt(1)
  }
  var n_classes: BigInt = BigInt((means).size)
  return 1.0 / (total_count - n_classes).toString.toDouble * sum_sq
}

def predict_y_values(x_items: ArrayBuffer[ArrayBuffer[Double]], means: ArrayBuffer[Double], variance: Double, probabilities: ArrayBuffer[Double]): ArrayBuffer[BigInt] = {
  var results: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_items).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((x_items.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      var temp: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var k: BigInt = BigInt(0)
      while (k < BigInt((x_items).size)) {
        var discr: Double = x_items.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * (means.lift((k.toInt).toInt).getOrElse(0.0) / variance) - means.lift((k.toInt).toInt).getOrElse(0.0) * means.lift((k.toInt).toInt).getOrElse(0.0) / (2.0 * variance) + math.log(probabilities.lift((k.toInt).toInt).getOrElse(0.0))
        temp = (temp :+ discr)
        k = k + BigInt(1)
      }
      var max_idx: BigInt = BigInt(0)
      var max_val: Double = temp.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
      var t: BigInt = BigInt(1)
      while (t < BigInt((temp).size)) {
        if (temp.lift((t.toInt).toInt).getOrElse(0.0) > max_val) {
          max_val = temp.lift((t.toInt).toInt).getOrElse(0.0)
          max_idx = t
        }
        t = t + BigInt(1)
      }
      results = (results :+ max_idx)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return results
}

def accuracy(actual_y: ArrayBuffer[BigInt], predicted_y: ArrayBuffer[BigInt]): Double = {
  var correct: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((actual_y).size)) {
    if (actual_y.lift((i.toInt).toInt).getOrElse(BigInt(0)) == predicted_y.lift((i.toInt).toInt).getOrElse(BigInt(0))) {
      correct = correct + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return correct.toString.toDouble / (BigInt((actual_y).size)).toDouble * 100.0
}

def main(): Any = {
  seed = BigInt(1)
  var counts: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(20), BigInt(20), BigInt(20))
  var means: ArrayBuffer[Double] = ArrayBuffer(5.0, 10.0, 15.0)
  var std_dev: Double = 1.0
  var x: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((counts).size)) {
    x = (x :+ gaussian_distribution(means.lift((i.toInt).toInt).getOrElse(0.0), std_dev, counts.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  var y: ArrayBuffer[BigInt] = y_generator(BigInt((counts).size), counts)
  var actual_means: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    actual_means = (actual_means :+ calculate_mean(counts.lift((i.toInt).toInt).getOrElse(BigInt(0)), x.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())))
    i = i + BigInt(1)
  }
  var total_count: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    total_count = total_count + counts.lift((i.toInt).toInt).getOrElse(BigInt(0))
    i = i + BigInt(1)
  }
  var probabilities: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    probabilities = (probabilities :+ calculate_probabilities(counts.lift((i.toInt).toInt).getOrElse(BigInt(0)), total_count))
    i = i + BigInt(1)
  }
  var variance: Double = calculate_variance(x, actual_means, total_count)
  var predicted: ArrayBuffer[BigInt] = predict_y_values(x, actual_means, variance, probabilities)
  println(_str(predicted))
  println(_str(accuracy(y, predicted)))
}

var PI: Double = 3.141592653589793

var TWO_PI: Double = 6.283185307179586

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
