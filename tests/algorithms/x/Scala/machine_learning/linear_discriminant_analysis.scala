// Generated by Mochi v0.10.59 on 2025-08-07 12:43:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def random(): Double = {
  return (rand()).toString.toDouble / 2147483648.0
}

def _mod(x: Double, m: Double): Double = {
  return x - (BigInt((x / m).toString.toDouble.toInt)).toString.toDouble * m
}

def cos(x: Double): Double = {
  val y: Double = _mod(x + PI, TWO_PI) - PI
  val y2: Double = y * y
  val y4: Double = y2 * y2
  val y6: Double = y4 * y2
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def ln(x: Double): Double = {
  val t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(19)) {
    sum = sum + term / n.toString.toDouble
    term = term * t * t
    n = n + BigInt(2)
  }
  return 2.0 * sum
}

def gaussian_distribution(mean: Double, std_dev: Double, instance_count: BigInt): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < instance_count) {
    val u1: Double = random()
    val u2: Double = random()
    val r: Double = sqrtApprox(-2.0 * ln(u1))
    val theta: Double = TWO_PI * u2
    val z: Double = r * cos(theta)
    res = res :+ mean + z * std_dev
    i = i + BigInt(1)
  }
  return res
}

def y_generator(class_count: BigInt, instance_count: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = BigInt(0)
  while (k < class_count) {
    var i: BigInt = BigInt(0)
    while (i < instance_count((k.toInt).toInt)) {
      res = res :+ k
      i = i + BigInt(1)
    }
    k = k + BigInt(1)
  }
  return res
}

def calculate_mean(instance_count: BigInt, items: ArrayBuffer[Double]): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < instance_count) {
    total = total + items((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return total / instance_count.toString.toDouble
}

def calculate_probabilities(instance_count: BigInt, total_count: BigInt): Double = {
  return instance_count.toString.toDouble / total_count.toString.toDouble
}

def calculate_variance(items: ArrayBuffer[ArrayBuffer[Double]], means: ArrayBuffer[Double], total_count: BigInt): Double = {
  var squared_diff: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((items).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((items((i.toInt).toInt)).size)) {
      val diff: Double = items((i.toInt).toInt)((j.toInt).toInt) - means((i.toInt).toInt)
      squared_diff = squared_diff :+ diff * diff
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var sum_sq: Double = 0.0
  var k: BigInt = BigInt(0)
  while (k < BigInt((squared_diff).size)) {
    sum_sq = sum_sq + squared_diff((k.toInt).toInt)
    k = k + BigInt(1)
  }
  val n_classes: BigInt = BigInt((means).size)
  return 1.0 / (total_count - n_classes).toString.toDouble * sum_sq
}

def predict_y_values(x_items: ArrayBuffer[ArrayBuffer[Double]], means: ArrayBuffer[Double], variance: Double, probabilities: ArrayBuffer[Double]): ArrayBuffer[BigInt] = {
  var results: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_items).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((x_items((i.toInt).toInt)).size)) {
      var temp: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var k: BigInt = BigInt(0)
      while (k < BigInt((x_items).size)) {
        val discr: Double = x_items((i.toInt).toInt)((j.toInt).toInt) * (means((k.toInt).toInt) / variance) - means((k.toInt).toInt) * means((k.toInt).toInt) / (2.0 * variance) + ln(probabilities((k.toInt).toInt))
        temp = temp :+ discr
        k = k + BigInt(1)
      }
      var max_idx: BigInt = BigInt(0)
      var max_val: Double = temp((BigInt(0).toInt).toInt)
      var t: BigInt = BigInt(1)
      while (t < BigInt((temp).size)) {
        if (temp((t.toInt).toInt) > max_val) {
          max_val = temp((t.toInt).toInt)
          max_idx = t
        }
        t = t + BigInt(1)
      }
      results = results :+ max_idx
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return results
}

def accuracy(actual_y: ArrayBuffer[BigInt], predicted_y: ArrayBuffer[BigInt]): Double = {
  var correct: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((actual_y).size)) {
    if (actual_y((i.toInt).toInt) == predicted_y((i.toInt).toInt)) {
      correct = correct + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return correct.toString.toDouble / (BigInt((actual_y).size)).toString.toDouble * 100.0
}

def main(): Any = {
  seed = BigInt(1)
  val counts: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(20), BigInt(20), BigInt(20))
  val means: ArrayBuffer[Double] = ArrayBuffer(5.0, 10.0, 15.0)
  val std_dev: Double = 1.0
  var x: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((counts).size)) {
    x = x :+ gaussian_distribution(means((i.toInt).toInt), std_dev, counts((i.toInt).toInt))
    i = i + BigInt(1)
  }
  val y: ArrayBuffer[BigInt] = y_generator(BigInt((counts).size), counts)
  var actual_means: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    actual_means = actual_means :+ calculate_mean(counts((i.toInt).toInt), x((i.toInt).toInt))
    i = i + BigInt(1)
  }
  var total_count: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    total_count = total_count + counts((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var probabilities: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    probabilities = probabilities :+ calculate_probabilities(counts((i.toInt).toInt), total_count)
    i = i + BigInt(1)
  }
  val variance: Double = calculate_variance(x, actual_means, total_count)
  val predicted: ArrayBuffer[BigInt] = predict_y_values(x, actual_means, variance, probabilities)
  println(predicted)
  println(accuracy(y, predicted))
}

val PI: Double = 3.141592653589793

val TWO_PI: Double = 6.283185307179586

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
