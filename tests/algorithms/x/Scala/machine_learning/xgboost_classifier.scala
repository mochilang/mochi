// Generated by Mochi v0.10.59 on 2025-08-07 12:45:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Stump(var feature: BigInt, var threshold: Double, var left: Double, var right: Double)

def mean(xs: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    sum = sum + xs((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return sum / ((BigInt((xs).size)).toString.toDouble * 1.0)
}

def stump_predict(s: Stump, x: ArrayBuffer[Double]): Double = {
  if (x((s.asInstanceOf[Stump].feature.toInt).toInt) < s.asInstanceOf[Stump].threshold) {
    return s.asInstanceOf[Stump].left
  }
  return s.asInstanceOf[Stump].right
}

def train_stump(features: ArrayBuffer[ArrayBuffer[Double]], residuals: ArrayBuffer[Double]): Stump = {
  var best_feature: BigInt = BigInt(0)
  var best_threshold: Double = 0.0
  var best_error: Double = 1000000000.0
  var best_left: Double = 0.0
  var best_right: Double = 0.0
  val num_features: BigInt = BigInt((features((BigInt(0).toInt).toInt)).size)
  var f: BigInt = BigInt(0)
  while (f < num_features) {
    var i: BigInt = BigInt(0)
    while (i < BigInt((features).size)) {
      val threshold: Double = features((i.toInt).toInt)((f.toInt).toInt)
      var left: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var right: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var j: BigInt = BigInt(0)
      while (j < BigInt((features).size)) {
        if (features((j.toInt).toInt)((f.toInt).toInt) < threshold) {
          left = (left ++ ArrayBuffer(residuals((j.toInt).toInt))).asInstanceOf[ArrayBuffer[Double]]
        } else {
          right = (right ++ ArrayBuffer(residuals((j.toInt).toInt))).asInstanceOf[ArrayBuffer[Double]]
        }
        j = j + BigInt(1)
      }
      if ((BigInt((left).size) != BigInt(0) && BigInt((right).size) != BigInt(0)).asInstanceOf[Boolean]) {
        val left_mean: Double = mean(left)
        val right_mean: Double = mean(right)
        var err: Double = 0.0
        j = BigInt(0)
        while (j < BigInt((features).size)) {
          val pred: Double = (if (features((j.toInt).toInt)((f.toInt).toInt) < threshold) left_mean else right_mean)
          val diff: Double = residuals((j.toInt).toInt) - pred
          err = err + diff * diff
          j = j + BigInt(1)
        }
        if (err < best_error) {
          best_error = err
          best_feature = f
          best_threshold = threshold
          best_left = left_mean
          best_right = right_mean
        }
      }
      i = i + BigInt(1)
    }
    f = f + BigInt(1)
  }
  return Stump(best_feature, best_threshold, best_left, best_right)
}

def boost(features: ArrayBuffer[ArrayBuffer[Double]], targets: ArrayBuffer[BigInt], rounds: BigInt): ArrayBuffer[Stump] = {
  var model: ArrayBuffer[Stump] = ArrayBuffer[Stump]()
  var preds: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((targets).size)) {
    preds = (preds ++ ArrayBuffer(0.0)).asInstanceOf[ArrayBuffer[Double]]
    i = i + BigInt(1)
  }
  var r: BigInt = BigInt(0)
  while (r < rounds) {
    var residuals: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((targets).size)) {
      residuals = (residuals ++ ArrayBuffer((targets((j.toInt).toInt)).toString.toDouble - preds((j.toInt).toInt))).asInstanceOf[ArrayBuffer[Double]]
      j = j + BigInt(1)
    }
    val stump: Stump = train_stump(features, residuals)
    model = (model ++ ArrayBuffer(stump)).asInstanceOf[ArrayBuffer[Stump]]
    j = BigInt(0)
    while (j < BigInt((preds).size)) {
      preds((j).toInt) = preds((j.toInt).toInt) + stump_predict(stump, features((j.toInt).toInt))
      j = j + BigInt(1)
    }
    r = r + BigInt(1)
  }
  return model
}

def predict(model: ArrayBuffer[Stump], x: ArrayBuffer[Double]): Double = {
  var score: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((model).size)) {
    val s: Stump = model((i.toInt).toInt)
    if (x((s.asInstanceOf[Stump].feature.toInt).toInt) < s.asInstanceOf[Stump].threshold) {
      score = score + s.asInstanceOf[Stump].left
    } else {
      score = score + s.asInstanceOf[Stump].right
    }
    i = i + BigInt(1)
  }
  return score
}

def main(): Any = {
  val features: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(5.1, 3.5), ArrayBuffer(4.9, 3.0), ArrayBuffer(6.2, 3.4), ArrayBuffer(5.9, 3.0))
  val targets: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(1))
  val model: ArrayBuffer[Stump] = boost(features, targets, BigInt(3))
  var out: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((features).size)) {
    val s: Double = predict(model, features((i.toInt).toInt))
    val label: BigInt = (if (s >= 0.5) BigInt(1) else BigInt(0))
    if (i == BigInt(0)) {
      out = String.valueOf(label)
    } else {
      out = out + " " + String.valueOf(label)
    }
    i = i + BigInt(1)
  }
  println(out)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
