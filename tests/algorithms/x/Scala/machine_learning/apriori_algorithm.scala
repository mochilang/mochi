// Generated by Mochi v0.10.59 on 2025-08-07 12:42:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Itemset(var items: ArrayBuffer[String], var support: BigInt)

def load_data(): ArrayBuffer[ArrayBuffer[String]] = {
  return ArrayBuffer(ArrayBuffer("milk"), ArrayBuffer("milk", "butter"), ArrayBuffer("milk", "bread"), ArrayBuffer("milk", "bread", "chips"))
}

def contains_string(xs: ArrayBuffer[String], s: String): Boolean = {
  for (v <- xs) {
    if (v == s) {
      return true
    }
  }
  return false
}

def is_subset(candidate: ArrayBuffer[String], transaction: ArrayBuffer[String]): Boolean = {
  for (it <- candidate) {
    if (!contains_string(transaction, it)) {
      return false
    }
  }
  return true
}

def lists_equal(a: ArrayBuffer[String], b: ArrayBuffer[String]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a((i.toInt).toInt) != b((i.toInt).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def contains_list(itemset: ArrayBuffer[ArrayBuffer[String]], item: ArrayBuffer[String]): Boolean = {
  for (l <- itemset) {
    if (lists_equal(l, item)) {
      return true
    }
  }
  return false
}

def count_list(itemset: ArrayBuffer[ArrayBuffer[String]], item: ArrayBuffer[String]): BigInt = {
  var c: BigInt = BigInt(0)
  for (l <- itemset) {
    if (lists_equal(l, item)) {
      c = c + BigInt(1)
    }
  }
  return c
}

def slice_list(xs: ArrayBuffer[ArrayBuffer[String]], start: BigInt): ArrayBuffer[ArrayBuffer[String]] = {
  var res: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var i: BigInt = start
  while (i < BigInt((xs).size)) {
    res = res :+ xs((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return res
}

def combinations_lists(xs: ArrayBuffer[ArrayBuffer[String]], k: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = {
  var result: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]]()
  if (k == BigInt(0)) {
    result = result :+ ArrayBuffer[ArrayBuffer[String]]()
    return result
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    val head: ArrayBuffer[String] = xs((i.toInt).toInt)
    val tail: ArrayBuffer[ArrayBuffer[String]] = slice_list(xs, i + BigInt(1))
    val tail_combos: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = combinations_lists(tail, k - BigInt(1))
    for (combo <- tail_combos) {
      var new_combo: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
      new_combo = new_combo :+ head
      for (c <- combo) {
        new_combo = new_combo :+ c
      }
      result = result :+ new_combo
    }
    i = i + BigInt(1)
  }
  return result
}

def prune(itemset: ArrayBuffer[ArrayBuffer[String]], candidates: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]], length: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = {
  var pruned: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]]()
  val _br9 = new Breaks
  _br9.breakable {
    for (candidate <- candidates) {
      var is_subsequence: Boolean = true
      val _br10 = new Breaks
      _br10.breakable {
        for (item <- candidate) {
          if ((!contains_list(itemset, item) || count_list(itemset, item) < length - BigInt(1)).asInstanceOf[Boolean]) {
            is_subsequence = false
            _br10.break()
          }
        }
      }
      if (is_subsequence) {
        pruned = pruned :+ candidate
      }
    }
  }
  return pruned
}

def sort_strings(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  for (s <- xs) {
    res = res :+ s
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((res).size)) {
    var j: BigInt = i + BigInt(1)
    while (j < BigInt((res).size)) {
      if (res((j.toInt).toInt) < res((i.toInt).toInt)) {
        val tmp: String = res((i.toInt).toInt)
        res((i).toInt) = res((j.toInt).toInt)
        res((j).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return res
}

def itemset_to_string(xs: ArrayBuffer[String]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i > BigInt(0)) {
      s = s + ", "
    }
    s = s + "'" + xs((i.toInt).toInt) + "'"
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def apriori(data: ArrayBuffer[ArrayBuffer[String]], min_support: BigInt): ArrayBuffer[Itemset] = {
  var itemset: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = ArrayBuffer[ArrayBuffer[String]]()
  for (transaction <- data) {
    var t: ArrayBuffer[String] = ArrayBuffer[String]()
    for (v <- transaction) {
      t = t :+ v
    }
    itemset = itemset :+ t
  }
  var frequent: ArrayBuffer[Itemset] = ArrayBuffer[Itemset]()
  var length: BigInt = BigInt(1)
  while (BigInt((itemset).size) > BigInt(0)) {
    var counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var idx: BigInt = BigInt(0)
    while (idx < BigInt((itemset).size)) {
      counts = counts :+ BigInt(0)
      idx = idx + BigInt(1)
    }
    for (transaction <- data) {
      var j: BigInt = BigInt(0)
      while (j < BigInt((itemset).size)) {
        val candidate: ArrayBuffer[String] = itemset((j.toInt).toInt)
        if (is_subset(candidate, transaction)) {
          counts((j).toInt) = counts((j.toInt).toInt) + BigInt(1)
        }
        j = j + BigInt(1)
      }
    }
    var new_itemset: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
    var k: BigInt = BigInt(0)
    while (k < BigInt((itemset).size)) {
      if (counts((k.toInt).toInt) >= min_support) {
        new_itemset = new_itemset :+ itemset((k.toInt).toInt)
      }
      k = k + BigInt(1)
    }
    itemset = new_itemset
    var m: BigInt = BigInt(0)
    while (m < BigInt((itemset).size)) {
      var sorted_item: ArrayBuffer[String] = sort_strings(itemset((m.toInt).toInt))
      frequent = frequent :+ Itemset(sorted_item, counts((m.toInt).toInt))
      m = m + BigInt(1)
    }
    length = length + BigInt(1)
    val combos: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = combinations_lists(itemset, length)
    itemset = prune(itemset, combos, length)
  }
  return frequent
}

var frequent_itemsets: ArrayBuffer[Itemset] = apriori(load_data(), BigInt(2))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    for (fi <- frequent_itemsets) {
      println(itemset_to_string(fi.asInstanceOf[Itemset].items) + ": " + String.valueOf(fi.asInstanceOf[Itemset].support))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
