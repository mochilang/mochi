// Generated by Mochi v0.10.67 on 2025-08-16 21:30:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def sinApprox(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var n: BigInt = BigInt(1)
  while (n <= BigInt(10)) {
    var denom: Double = (BigInt(2) * n * (BigInt(2) * n + BigInt(1))).toDouble
    term = -term * x * x / denom
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def cosApprox(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(10)) {
    var denom: Double = ((BigInt(2) * n - BigInt(1)) * (BigInt(2) * n)).toDouble
    term = -term * x * x / denom
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def expApprox(x: Double): Double = {
  var sum: Double = 1.0
  var term: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(10)) {
    term = term * x / n.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def ln(x: Double): Double = {
  var t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(19)) {
    sum = sum + term / n.toDouble
    term = term * t * t
    n = n + BigInt(2)
  }
  return 2.0 * sum
}

def log10(x: Double): Double = {
  return math.log(x) / math.log(10.0)
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def normalize(audio: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var max_val: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((audio).size)) {
    var v: Double = absf(audio.lift((i.toInt).toInt).getOrElse(0.0))
    if (v > max_val) {
      max_val = v
    }
    i = i + BigInt(1)
  }
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((audio).size)) {
    res = (res :+ audio.lift((i.toInt).toInt).getOrElse(0.0) / max_val)
    i = i + BigInt(1)
  }
  return res
}

def dft(frame: ArrayBuffer[Double], bins: BigInt): ArrayBuffer[Double] = {
  var N: BigInt = BigInt((frame).size)
  var spec: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var k: BigInt = BigInt(0)
  while (k < bins) {
    var real: Double = 0.0
    var imag: Double = 0.0
    var n: BigInt = BigInt(0)
    while (n < N) {
      var angle: Double = -2.0 * PI * k.toString.toDouble * n.toDouble / N.toString.toDouble
      real = real + frame.lift((n.toInt).toInt).getOrElse(0.0) * cosApprox(angle)
      imag = imag + frame.lift((n.toInt).toInt).getOrElse(0.0) * sinApprox(angle)
      n = n + BigInt(1)
    }
    spec = (spec :+ real * real + imag * imag)
    k = k + BigInt(1)
  }
  return spec
}

def triangular_filters(bins: BigInt, spectrum_size: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var filters: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var b: BigInt = BigInt(0)
  while (b < bins) {
    var center: BigInt = (b + BigInt(1)) * spectrum_size / (bins + BigInt(1))
    var filt: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < spectrum_size) {
      var v: Double = 0.0
      if (i <= center) {
        v = i.toString.toDouble / center.toString.toDouble
      } else {
        v = (spectrum_size - i).toString.toDouble / (spectrum_size - center).toString.toDouble
      }
      filt = (filt :+ v)
      i = i + BigInt(1)
    }
    filters = (filters :+ filt)
    b = b + BigInt(1)
  }
  return filters
}

def dot(mat: ArrayBuffer[ArrayBuffer[Double]], vec: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var sum: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < BigInt((vec).size)) {
      sum = sum + mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * vec.lift((j.toInt).toInt).getOrElse(0.0)
      j = j + BigInt(1)
    }
    res = (res :+ sum)
    i = i + BigInt(1)
  }
  return res
}

def discrete_cosine_transform(dct_filter_num: BigInt, filter_num: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var basis: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < dct_filter_num) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < filter_num) {
      if (i == BigInt(0)) {
        row = (row :+ 1.0 / sqrtApprox(filter_num.toString.toDouble))
      } else {
        var angle: Double = (BigInt(2) * j + BigInt(1)).toDouble * i.toString.toDouble * PI / (2.0 * filter_num.toString.toDouble)
        row = (row :+ cosApprox(angle) * sqrtApprox(2.0 / filter_num.toString.toDouble))
      }
      j = j + BigInt(1)
    }
    basis = (basis :+ row)
    i = i + BigInt(1)
  }
  return basis
}

def mfcc(audio: ArrayBuffer[Double], bins: BigInt, dct_num: BigInt): ArrayBuffer[Double] = {
  var norm: ArrayBuffer[Double] = normalize(audio)
  var spec: ArrayBuffer[Double] = dft(norm, bins + BigInt(2))
  var filters: ArrayBuffer[ArrayBuffer[Double]] = triangular_filters(bins, BigInt((spec).size))
  var energies: ArrayBuffer[Double] = dot(filters, spec)
  var logfb: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((energies).size)) {
    logfb = (logfb :+ 10.0 * log10(energies.lift((i.toInt).toInt).getOrElse(0.0) + 0.0000000001))
    i = i + BigInt(1)
  }
  var dct_basis: ArrayBuffer[ArrayBuffer[Double]] = discrete_cosine_transform(dct_num, bins)
  var res: ArrayBuffer[Double] = dot(dct_basis, logfb)
  if (BigInt((res).size) == BigInt(0)) {
    res = ArrayBuffer(0.0, 0.0, 0.0)
  }
  return res
}

var PI: Double = 3.141592653589793

var sample_rate: BigInt = BigInt(8000)

var size: BigInt = BigInt(16)

var audio: ArrayBuffer[Double] = ArrayBuffer[Double]()

var n: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (n < size) {
      var t: Double = n.toDouble / sample_rate.toDouble
      audio = (audio :+ sinApprox(2.0 * PI * 440.0 * t))
      n = n + BigInt(1)
    }
    var coeffs: ArrayBuffer[Double] = mfcc(audio, BigInt(5), BigInt(3))
    for (c <- coeffs) {
      println(_str(c))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
