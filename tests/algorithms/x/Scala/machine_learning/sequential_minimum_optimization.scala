// Generated by Mochi v0.10.67 on 2025-08-16 21:31:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    sum = sum + a.lift((i.toInt).toInt).getOrElse(0.0) * b.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return sum
}

def maxf(a: Double, b: Double): Double = {
  if (a > b) {
    return a
  }
  return b
}

def minf(a: Double, b: Double): Double = {
  if (a < b) {
    return a
  }
  return b
}

def absf(x: Double): Double = {
  if (x >= 0.0) {
    return x
  }
  return 0.0 - x
}

def predict_raw(samples: ArrayBuffer[ArrayBuffer[Double]], labels: ArrayBuffer[Double], alphas: ArrayBuffer[Double], b: Double, x: ArrayBuffer[Double]): Double = {
  var res: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((samples).size)) {
    res = res + alphas.lift((i.toInt).toInt).getOrElse(0.0) * labels.lift((i.toInt).toInt).getOrElse(0.0) * dot(samples.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), x)
    i = i + BigInt(1)
  }
  return res + b
}

def smo_train(samples: ArrayBuffer[ArrayBuffer[Double]], labels: ArrayBuffer[Double], c: Double, tol: Double, max_passes: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var m: BigInt = BigInt((samples).size)
  var alphas: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < m) {
    alphas = (alphas :+ 0.0)
    i = i + BigInt(1)
  }
  var b: Double = 0.0
  var passes: BigInt = BigInt(0)
  val _ct3 = new Breaks
  while (passes < max_passes) {
    _ct3.breakable {
      var num_changed: BigInt = BigInt(0)
      var i1: BigInt = BigInt(0)
      val _ct4 = new Breaks
      while (i1 < m) {
        _ct4.breakable {
          var Ei: Double = predict_raw(samples, labels, alphas, b, samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]())) - labels.lift((i1.toInt).toInt).getOrElse(0.0)
          if (((labels.lift((i1.toInt).toInt).getOrElse(0.0) * Ei < 0.0 - tol && alphas.lift((i1.toInt).toInt).getOrElse(0.0) < c).asInstanceOf[Boolean] || (labels.lift((i1.toInt).toInt).getOrElse(0.0) * Ei > tol && alphas.lift((i1.toInt).toInt).getOrElse(0.0) > 0.0).asInstanceOf[Boolean])) {
            var i2: BigInt = (i1 + BigInt(1)) % m
            var Ej: Double = predict_raw(samples, labels, alphas, b, samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]())) - labels.lift((i2.toInt).toInt).getOrElse(0.0)
            var alpha1_old: Double = alphas.lift((i1.toInt).toInt).getOrElse(0.0)
            var alpha2_old: Double = alphas.lift((i2.toInt).toInt).getOrElse(0.0)
            var L: Double = 0.0
            var H: Double = 0.0
            if (labels.lift((i1.toInt).toInt).getOrElse(0.0) != labels.lift((i2.toInt).toInt).getOrElse(0.0)) {
              L = maxf(0.0, alpha2_old - alpha1_old)
              H = minf(c, c + alpha2_old - alpha1_old)
            } else {
              L = maxf(0.0, alpha2_old + alpha1_old - c)
              H = minf(c, alpha2_old + alpha1_old)
            }
            if (L == H) {
              i1 = i1 + BigInt(1)
              _ct4.break()
            }
            var eta: Double = 2.0 * dot(samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]())) - dot(samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]())) - dot(samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
            if (eta >= 0.0) {
              i1 = i1 + BigInt(1)
              _ct4.break()
            }
            alphas((i2).toInt) = alpha2_old - labels.lift((i2.toInt).toInt).getOrElse(0.0) * (Ei - Ej) / eta
            if (alphas.lift((i2.toInt).toInt).getOrElse(0.0) > H) {
              alphas((i2).toInt) = H
            }
            if (alphas.lift((i2.toInt).toInt).getOrElse(0.0) < L) {
              alphas((i2).toInt) = L
            }
            if (absf(alphas.lift((i2.toInt).toInt).getOrElse(0.0) - alpha2_old) < 0.00001) {
              i1 = i1 + BigInt(1)
              _ct4.break()
            }
            alphas((i1).toInt) = alpha1_old + labels.lift((i1.toInt).toInt).getOrElse(0.0) * labels.lift((i2.toInt).toInt).getOrElse(0.0) * (alpha2_old - alphas.lift((i2.toInt).toInt).getOrElse(0.0))
            var b1: Double = b - Ei - labels.lift((i1.toInt).toInt).getOrElse(0.0) * (alphas.lift((i1.toInt).toInt).getOrElse(0.0) - alpha1_old) * dot(samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]())) - labels.lift((i2.toInt).toInt).getOrElse(0.0) * (alphas.lift((i2.toInt).toInt).getOrElse(0.0) - alpha2_old) * dot(samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
            var b2: Double = b - Ej - labels.lift((i1.toInt).toInt).getOrElse(0.0) * (alphas.lift((i1.toInt).toInt).getOrElse(0.0) - alpha1_old) * dot(samples.lift((i1.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]())) - labels.lift((i2.toInt).toInt).getOrElse(0.0) * (alphas.lift((i2.toInt).toInt).getOrElse(0.0) - alpha2_old) * dot(samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]()), samples.lift((i2.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
            if ((alphas.lift((i1.toInt).toInt).getOrElse(0.0) > 0.0 && alphas.lift((i1.toInt).toInt).getOrElse(0.0) < c)) {
              b = b1
            } else {
              if ((alphas.lift((i2.toInt).toInt).getOrElse(0.0) > 0.0 && alphas.lift((i2.toInt).toInt).getOrElse(0.0) < c)) {
                b = b2
              } else {
                b = (b1 + b2) / 2.0
              }
            }
            num_changed = num_changed + BigInt(1)
          }
          i1 = i1 + BigInt(1)
        }
      }
      if (num_changed == BigInt(0)) {
        passes = passes + BigInt(1)
      } else {
        passes = BigInt(0)
      }
    }
  }
  return ArrayBuffer(alphas, ArrayBuffer(b))
}

def predict(samples: ArrayBuffer[ArrayBuffer[Double]], labels: ArrayBuffer[Double], model: ArrayBuffer[ArrayBuffer[Double]], x: ArrayBuffer[Double]): Double = {
  var alphas: ArrayBuffer[Double] = model.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())
  var b: Double = model.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var `val`: Double = predict_raw(samples, labels, alphas, b, x)
  if (`val` >= 0.0) {
    return 1.0
  }
  return -1.0
}

var samples: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 2.0), ArrayBuffer(1.5, 1.5), ArrayBuffer(0.0, 0.0), ArrayBuffer(0.5, 0.0))

var labels: ArrayBuffer[Double] = ArrayBuffer(1.0, 1.0, -1.0, -1.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var model: ArrayBuffer[ArrayBuffer[Double]] = smo_train(samples, labels, 1.0, 0.001, BigInt(10))
    println(_str(predict(samples, labels, model, ArrayBuffer(1.5, 1.0))))
    println(_str(predict(samples, labels, model, ArrayBuffer(0.2, 0.1))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
