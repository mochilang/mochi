// Generated by Mochi v0.10.59 on 2025-08-07 12:43:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Stump(var feature: BigInt, var threshold: Double, var left: Double, var right: Double)

def exp_approx(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    term = term * x / i.toString.toDouble
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def signf(x: Double): Double = {
  if (x >= 0.0) {
    return 1.0
  }
  return -1.0
}

def gradient(target: ArrayBuffer[Double], preds: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val n: BigInt = BigInt((target).size)
  var residuals: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    val t: Double = target((i.toInt).toInt)
    val y: Double = preds((i.toInt).toInt)
    val exp_val: Double = exp_approx(t * y)
    val res: Double = -t / (1.0 + exp_val)
    residuals = residuals :+ res
    i = i + BigInt(1)
  }
  return residuals
}

def predict_raw(models: ArrayBuffer[Stump], features: ArrayBuffer[ArrayBuffer[Double]], learning_rate: Double): ArrayBuffer[Double] = {
  val n: BigInt = BigInt((features).size)
  var preds: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    preds = preds :+ 0.0
    i = i + BigInt(1)
  }
  var m: BigInt = BigInt(0)
  while (m < BigInt((models).size)) {
    val stump: Stump = models((m.toInt).toInt)
    i = BigInt(0)
    while (i < n) {
      val value: Double = features((i.toInt).toInt)((stump.asInstanceOf[Stump].feature.toInt).toInt)
      if (value <= stump.asInstanceOf[Stump].threshold) {
        preds((i).toInt) = preds((i.toInt).toInt) + learning_rate * stump.asInstanceOf[Stump].left
      } else {
        preds((i).toInt) = preds((i.toInt).toInt) + learning_rate * stump.asInstanceOf[Stump].right
      }
      i = i + BigInt(1)
    }
    m = m + BigInt(1)
  }
  return preds
}

def predict(models: ArrayBuffer[Stump], features: ArrayBuffer[ArrayBuffer[Double]], learning_rate: Double): ArrayBuffer[Double] = {
  val raw: ArrayBuffer[Double] = predict_raw(models, features, learning_rate)
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((raw).size)) {
    result = result :+ signf(raw((i.toInt).toInt))
    i = i + BigInt(1)
  }
  return result
}

def train_stump(features: ArrayBuffer[ArrayBuffer[Double]], residuals: ArrayBuffer[Double]): Stump = {
  val n_samples: BigInt = BigInt((features).size)
  val n_features: BigInt = BigInt((features((BigInt(0).toInt).toInt)).size)
  var best_feature: BigInt = BigInt(0)
  var best_threshold: Double = 0.0
  var best_error: Double = 1000000000.0
  var best_left: Double = 0.0
  var best_right: Double = 0.0
  var j: BigInt = BigInt(0)
  while (j < n_features) {
    var t_index: BigInt = BigInt(0)
    while (t_index < n_samples) {
      val t: Double = features((t_index.toInt).toInt)((j.toInt).toInt)
      var sum_left: Double = 0.0
      var count_left: BigInt = BigInt(0)
      var sum_right: Double = 0.0
      var count_right: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      while (i < n_samples) {
        if (features((i.toInt).toInt)((j.toInt).toInt) <= t) {
          sum_left = sum_left + residuals((i.toInt).toInt)
          count_left = count_left + BigInt(1)
        } else {
          sum_right = sum_right + residuals((i.toInt).toInt)
          count_right = count_right + BigInt(1)
        }
        i = i + BigInt(1)
      }
      var left_val: Double = 0.0
      if (count_left != BigInt(0)) {
        left_val = sum_left / count_left.toString.toDouble
      }
      var right_val: Double = 0.0
      if (count_right != BigInt(0)) {
        right_val = sum_right / count_right.toString.toDouble
      }
      var error: Double = 0.0
      i = BigInt(0)
      while (i < n_samples) {
        val pred: Double = (if (features((i.toInt).toInt)((j.toInt).toInt) <= t) left_val else right_val)
        val diff: Double = residuals((i.toInt).toInt) - pred
        error = error + diff * diff
        i = i + BigInt(1)
      }
      if (error < best_error) {
        best_error = error
        best_feature = j
        best_threshold = t
        best_left = left_val
        best_right = right_val
      }
      t_index = t_index + BigInt(1)
    }
    j = j + BigInt(1)
  }
  return Stump(best_feature, best_threshold, best_left, best_right)
}

def fit(n_estimators: BigInt, learning_rate: Double, features: ArrayBuffer[ArrayBuffer[Double]], target: ArrayBuffer[Double]): ArrayBuffer[Stump] = {
  var models: ArrayBuffer[Stump] = ArrayBuffer[Stump]()
  var m: BigInt = BigInt(0)
  while (m < n_estimators) {
    val preds: ArrayBuffer[Double] = predict_raw(models, features, learning_rate)
    val grad: ArrayBuffer[Double] = gradient(target, preds)
    var residuals: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < BigInt((grad).size)) {
      residuals = residuals :+ -grad((i.toInt).toInt)
      i = i + BigInt(1)
    }
    val stump: Stump = train_stump(features, residuals)
    models = models :+ stump
    m = m + BigInt(1)
  }
  return models
}

def accuracy(preds: ArrayBuffer[Double], target: ArrayBuffer[Double]): Double = {
  val n: BigInt = BigInt((target).size)
  var correct: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < n) {
    if (preds((i.toInt).toInt) == target((i.toInt).toInt)) {
      correct = correct + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return correct.toString.toDouble / n.toString.toDouble
}

val features: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0), ArrayBuffer(2.0), ArrayBuffer(3.0), ArrayBuffer(4.0))

val target: ArrayBuffer[Double] = ArrayBuffer(-1.0, -1.0, 1.0, 1.0)

val models: ArrayBuffer[Stump] = fit(BigInt(5), 0.5, features, target)

val predictions: ArrayBuffer[Double] = predict(models, features, 0.5)

val acc: Double = accuracy(predictions, target)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Accuracy: " + String.valueOf(acc))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
