// Generated by Mochi v0.10.59 on 2025-08-07 12:44:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def exp_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: Double = 1.0
  while (i < 20.0) {
    term = term * x / i
    sum = sum + term
    i = i + 1.0
  }
  return sum
}

def sigmoid(x: Double): Double = {
  return 1.0 / (1.0 + exp_taylor(-x))
}

def train(epochs: BigInt, lr: Double): Any = {
  var e: BigInt = BigInt(0)
  while (e < epochs) {
    var i: BigInt = BigInt(0)
    while (i < BigInt((X).size)) {
      val x0: Double = X((i.toInt).toInt)((BigInt(0).toInt).toInt)
      val x1: Double = X((i.toInt).toInt)((BigInt(1).toInt).toInt)
      val target: Double = Y((i.toInt).toInt)
      val z1: Double = w1((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) * x0 + w1((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt) * x1 + b1((BigInt(0).toInt).toInt)
      val z2: Double = w1((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) * x0 + w1((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) * x1 + b1((BigInt(1).toInt).toInt)
      val h1: Double = sigmoid(z1)
      val h2: Double = sigmoid(z2)
      val z3: Double = w2((BigInt(0).toInt).toInt) * h1 + w2((BigInt(1).toInt).toInt) * h2 + b2
      val out: Double = sigmoid(z3)
      val error: Double = out - target
      val d1: Double = h1 * (1.0 - h1) * w2((BigInt(0).toInt).toInt) * error
      val d2: Double = h2 * (1.0 - h2) * w2((BigInt(1).toInt).toInt) * error
      w2((BigInt(0)).toInt) = w2((BigInt(0).toInt).toInt) - lr * error * h1
      w2((BigInt(1)).toInt) = w2((BigInt(1).toInt).toInt) - lr * error * h2
      b2 = b2 - lr * error
      w1((BigInt(0)).toInt)((BigInt(0)).toInt) = w1((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) - lr * d1 * x0
      w1((BigInt(1)).toInt)((BigInt(0)).toInt) = w1((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt) - lr * d1 * x1
      b1((BigInt(0)).toInt) = b1((BigInt(0).toInt).toInt) - lr * d1
      w1((BigInt(0)).toInt)((BigInt(1)).toInt) = w1((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) - lr * d2 * x0
      w1((BigInt(1)).toInt)((BigInt(1)).toInt) = w1((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) - lr * d2 * x1
      b1((BigInt(1)).toInt) = b1((BigInt(1).toInt).toInt) - lr * d2
      i = i + BigInt(1)
    }
    e = e + BigInt(1)
  }
}

def predict(samples: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[BigInt] = {
  var preds: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((samples).size)) {
    val x0: Double = samples((i.toInt).toInt)((BigInt(0).toInt).toInt)
    val x1: Double = samples((i.toInt).toInt)((BigInt(1).toInt).toInt)
    val z1: Double = w1((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) * x0 + w1((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt) * x1 + b1((BigInt(0).toInt).toInt)
    val z2: Double = w1((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) * x0 + w1((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) * x1 + b1((BigInt(1).toInt).toInt)
    val h1: Double = sigmoid(z1)
    val h2: Double = sigmoid(z2)
    val z3: Double = w2((BigInt(0).toInt).toInt) * h1 + w2((BigInt(1).toInt).toInt) * h2 + b2
    val out: Double = sigmoid(z3)
    var label: BigInt = BigInt(0)
    if (out >= 0.5) {
      label = BigInt(1)
    }
    preds = preds :+ BigInt(label)
    i = i + BigInt(1)
  }
  return preds
}

def wrapper(y: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  return y
}

val X: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(1.0, 1.0), ArrayBuffer(1.0, 0.0), ArrayBuffer(0.0, 1.0))

val Y: ArrayBuffer[Double] = ArrayBuffer(0.0, 1.0, 0.0, 0.0)

val test_data: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(0.0, 1.0), ArrayBuffer(1.0, 1.0))

var w1: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.5, -0.5), ArrayBuffer(0.5, 0.5))

var b1: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0)

var w2: ArrayBuffer[Double] = ArrayBuffer(0.5, -0.5)

var b2: Double = 0.0

val preds: ArrayBuffer[BigInt] = wrapper(predict(test_data))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    train(BigInt(4000), 0.5)
    println(String.valueOf(preds))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
