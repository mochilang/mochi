// Generated by Mochi v0.10.59 on 2025-08-07 12:45:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SVC(var weights: ArrayBuffer[Double], var bias: Double, var lr: Double, var lambda: Double, var epochs: BigInt)

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var s: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    s = s + a((i.toInt).toInt) * b((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return s
}

def new_svc(lr: Double, lambda: Double, epochs: BigInt): SVC = {
  return SVC(ArrayBuffer(), 0.0, lr, lambda, epochs)
}

def fit(model: SVC, xs: ArrayBuffer[ArrayBuffer[Double]], ys: ArrayBuffer[BigInt]): SVC = {
  val n_features: BigInt = BigInt((xs((BigInt(0).toInt).toInt)).size)
  var w: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n_features) {
    w = w :+ 0.0
    i = i + BigInt(1)
  }
  var b: Double = 0.0
  var epoch: BigInt = BigInt(0)
  while (epoch < model.epochs) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((xs).size)) {
      val x: ArrayBuffer[Double] = xs((j.toInt).toInt)
      val y: Double = (ys((j.toInt).toInt)).toString.toDouble
      val prod: Double = dot(w, x) + b
      if (y * prod < 1.0) {
        var k: BigInt = BigInt(0)
        while (k < BigInt((w).size)) {
          w((k).toInt) = w((k.toInt).toInt) + model.lr * (y * x((k.toInt).toInt) - 2.0 * model.lambda * w((k.toInt).toInt))
          k = k + BigInt(1)
        }
        b = b + model.lr * y
      } else {
        k = BigInt(0)
        while (k < BigInt((w).size)) {
          w((k).toInt) = w((k.toInt).toInt) - model.lr * (2.0 * model.lambda * w((k.toInt).toInt))
          k = k + BigInt(1)
        }
      }
      j = j + BigInt(1)
    }
    epoch = epoch + BigInt(1)
  }
  return SVC(w, b, model.lr, model.lambda, model.epochs)
}

def predict(model: SVC, x: ArrayBuffer[Double]): BigInt = {
  val s: Double = dot(model.weights, x) + model.bias
  if (s >= 0.0) {
    return BigInt(1)
  } else {
    return -BigInt(1)
  }
  return null
}

val xs: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 1.0), ArrayBuffer(0.0, 2.0), ArrayBuffer(1.0, 1.0), ArrayBuffer(1.0, 2.0))

val ys: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(1), -BigInt(1), -BigInt(1))

val base: SVC = new_svc(0.01, 0.01, BigInt(1000))

val model: SVC = fit(base, xs, ys)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(predict(model, ArrayBuffer(0.0, 1.0)))
    println(predict(model, ArrayBuffer(1.0, 1.0)))
    println(predict(model, ArrayBuffer(2.0, 2.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
