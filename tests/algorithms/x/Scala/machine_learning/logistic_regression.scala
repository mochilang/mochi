// Generated by Mochi v0.10.59 on 2025-08-07 12:44:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def expApprox(x: Double): Double = {
  var y: Double = x
  var is_neg: Boolean = false
  if (x < 0.0) {
    is_neg = true
    y = -x
  }
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(30)) {
    term = term * y / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  if (is_neg) {
    return 1.0 / sum
  }
  return sum
}

def sigmoid(z: Double): Double = {
  return 1.0 / (1.0 + expApprox(-z))
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var s: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    s = s + a((i.toInt).toInt) * b((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return s
}

def zeros(n: BigInt): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res :+ 0.0
    i = i + BigInt(1)
  }
  return res
}

def logistic_reg(alpha: Double, x: ArrayBuffer[ArrayBuffer[Double]], y: ArrayBuffer[Double], iterations: BigInt): ArrayBuffer[Double] = {
  val m: BigInt = BigInt((x).size)
  val n: BigInt = BigInt((x((BigInt(0).toInt).toInt)).size)
  var theta: ArrayBuffer[Double] = zeros(n)
  var iter: BigInt = BigInt(0)
  while (iter < iterations) {
    var grad: ArrayBuffer[Double] = zeros(n)
    var i: BigInt = BigInt(0)
    while (i < m) {
      val z: Double = dot(x((i.toInt).toInt), theta)
      val h: Double = sigmoid(z)
      var k: BigInt = BigInt(0)
      while (k < n) {
        grad((k).toInt) = grad((k.toInt).toInt) + (h - y((i.toInt).toInt)) * x((i.toInt).toInt)((k.toInt).toInt)
        k = k + BigInt(1)
      }
      i = i + BigInt(1)
    }
    var k2: BigInt = BigInt(0)
    while (k2 < n) {
      theta((k2).toInt) = theta((k2.toInt).toInt) - alpha * grad((k2.toInt).toInt) / m.toString.toDouble
      k2 = k2 + BigInt(1)
    }
    iter = iter + BigInt(1)
  }
  return theta
}

val x: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.5, 1.5), ArrayBuffer(1.0, 1.0), ArrayBuffer(1.5, 0.5), ArrayBuffer(3.0, 3.5), ArrayBuffer(3.5, 3.0), ArrayBuffer(4.0, 4.0))

val y: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0, 0.0, 1.0, 1.0, 1.0)

val alpha: Double = 0.1

val iterations: BigInt = BigInt(1000)

val theta: ArrayBuffer[Double] = logistic_reg(alpha, x, y, iterations)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    for (i <- (BigInt(0)).toInt until (BigInt((theta).size)).toInt) {
      println(theta((i.toInt).toInt))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
