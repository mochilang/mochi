// Generated by Mochi v0.10.63 on 2025-08-12 08:53:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ord(ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((ASCII).length)) {
    if (ASCII.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return BigInt(32) + i
    }
    i = i + BigInt(1)
  }
  return BigInt(0)
}

def pow2(n: BigInt): BigInt = {
  var res: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_and(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    if ((x % BigInt(2) == BigInt(1) && y % BigInt(2) == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_or(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    val abit: BigInt = x % BigInt(2)
    val bbit: BigInt = y % BigInt(2)
    if ((abit == BigInt(1) || bbit == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_xor(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    val abit: BigInt = x % BigInt(2)
    val bbit: BigInt = y % BigInt(2)
    if (((abit == BigInt(1) && bbit == BigInt(0)).asInstanceOf[Boolean] || (abit == BigInt(0) && bbit == BigInt(1)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_not(a: BigInt): BigInt = {
  return MOD - BigInt(1) - a
}

def rotate_left(n: BigInt, b: BigInt): BigInt = {
  val left: BigInt = n * pow2(b) % MOD
  val right: BigInt = n / pow2(BigInt(32) - b)
  return (left + right) % MOD
}

def to_hex32(n: BigInt): String = {
  val digits: String = "0123456789abcdef"
  var num: BigInt = n
  var s: String = ""
  if (num == BigInt(0)) {
    s = "0"
  }
  while (num > BigInt(0)) {
    val d: BigInt = num % BigInt(16)
    s = digits.slice((d).toInt, (d + BigInt(1)).toInt) + s
    num = num / BigInt(16)
  }
  while (BigInt((s).size) < BigInt(8)) {
    s = "0" + s
  }
  if (BigInt((s).size) > BigInt(8)) {
    s = s.slice((BigInt((s).size) - BigInt(8)).toInt, (BigInt((s).size)).toInt)
  }
  return s
}

def sha1(message: String): String = {
  var bytes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((message).size)) {
    bytes = bytes :+ (ord(message.slice((i).toInt, (i + BigInt(1)).toInt)))
    i = i + BigInt(1)
  }
  bytes = bytes :+ (BigInt(128))
  while ((BigInt((bytes).size) + BigInt(8)) % BigInt(64) != BigInt(0)) {
    bytes = bytes :+ (BigInt(0))
  }
  val bit_len: BigInt = BigInt((message).size) * BigInt(8)
  var len_bytes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0))
  var bl: BigInt = bit_len
  var k: BigInt = BigInt(7)
  while (k >= BigInt(0)) {
    len_bytes((k).toInt) = bl % BigInt(256)
    bl = bl / BigInt(256)
    k = k - BigInt(1)
  }
  var j: BigInt = BigInt(0)
  while (j < BigInt(8)) {
    bytes = bytes :+ (len_bytes.lift((j.toInt).toInt).getOrElse(BigInt(0)))
    j = j + BigInt(1)
  }
  var blocks: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var pos: BigInt = BigInt(0)
  while (pos < BigInt((bytes).size)) {
    var block: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j2: BigInt = BigInt(0)
    while (j2 < BigInt(64)) {
      block = block :+ (bytes.lift(((pos + j2).toInt).toInt).getOrElse(BigInt(0)))
      j2 = j2 + BigInt(1)
    }
    blocks = blocks :+ (block)
    pos = pos + BigInt(64)
  }
  var h0: BigInt = BigInt(1732584193)
  var h1: BigInt = BigInt("4023233417")
  var h2: BigInt = BigInt("2562383102")
  var h3: BigInt = BigInt(271733878)
  var h4: BigInt = BigInt("3285377520")
  var bindex: BigInt = BigInt(0)
  while (bindex < BigInt((blocks).size)) {
    var block: ArrayBuffer[BigInt] = blocks.lift((bindex.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var w: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var t: BigInt = BigInt(0)
    while (t < BigInt(16)) {
      val j3: BigInt = t * BigInt(4)
      val word: BigInt = ((block.lift((j3.toInt).toInt).getOrElse(BigInt(0)) * BigInt(256) + block.lift(((j3 + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))) * BigInt(256) + block.lift(((j3 + BigInt(2)).toInt).toInt).getOrElse(BigInt(0))) * BigInt(256) + block.lift(((j3 + BigInt(3)).toInt).toInt).getOrElse(BigInt(0))
      w = w :+ (word)
      t = t + BigInt(1)
    }
    while (t < BigInt(80)) {
      val tmp: BigInt = bit_xor(bit_xor(bit_xor(w.lift(((t - BigInt(3)).toInt).toInt).getOrElse(BigInt(0)), w.lift(((t - BigInt(8)).toInt).toInt).getOrElse(BigInt(0))), w.lift(((t - BigInt(14)).toInt).toInt).getOrElse(BigInt(0))), w.lift(((t - BigInt(16)).toInt).toInt).getOrElse(BigInt(0)))
      w = w :+ (rotate_left(tmp, BigInt(1)))
      t = t + BigInt(1)
    }
    var a: BigInt = h0
    var b: BigInt = h1
    var c: BigInt = h2
    var d: BigInt = h3
    var e: BigInt = h4
    var i2: BigInt = BigInt(0)
    while (i2 < BigInt(80)) {
      var f: BigInt = BigInt(0)
      var kconst: BigInt = BigInt(0)
      if (i2 < BigInt(20)) {
        f = bit_or(bit_and(b, c), bit_and(bit_not(b), d))
        kconst = BigInt(1518500249)
      } else {
        if (i2 < BigInt(40)) {
          f = bit_xor(bit_xor(b, c), d)
          kconst = BigInt(1859775393)
        } else {
          if (i2 < BigInt(60)) {
            f = bit_or(bit_or(bit_and(b, c), bit_and(b, d)), bit_and(c, d))
            kconst = BigInt("2400959708")
          } else {
            f = bit_xor(bit_xor(b, c), d)
            kconst = BigInt("3395469782")
          }
        }
      }
      val temp: BigInt = (rotate_left(a, BigInt(5)) + f + e + kconst + w.lift((i2.toInt).toInt).getOrElse(BigInt(0))) % MOD
      e = d
      d = c
      c = rotate_left(b, BigInt(30))
      b = a
      a = temp
      i2 = i2 + BigInt(1)
    }
    h0 = (h0 + a) % MOD
    h1 = (h1 + b) % MOD
    h2 = (h2 + c) % MOD
    h3 = (h3 + d) % MOD
    h4 = (h4 + e) % MOD
    bindex = bindex + BigInt(1)
  }
  return to_hex32(h0) + to_hex32(h1) + to_hex32(h2) + to_hex32(h3) + to_hex32(h4)
}

def main(): Any = {
  println(sha1("Test String"))
}

val MOD: BigInt = BigInt("4294967296")

val ASCII: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
