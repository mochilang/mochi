// Generated by Mochi v0.10.66 on 2025-08-15 10:42:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def ord(ch: String): BigInt = {
  var lower: String = "abcdefghijklmnopqrstuvwxyz"
  var upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var digits: String = "0123456789"
  var i: BigInt = BigInt(0)
  while (i < BigInt((lower).size)) {
    if (lower.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(97) + i
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((upper).size)) {
    if (upper.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(65) + i
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((digits).size)) {
    if (digits.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(48) + i
    }
    i = i + BigInt(1)
  }
  if (ch == " ") {
    return BigInt(32)
  }
  return BigInt(0)
}

def adler32(plain_text: String): BigInt = {
  var a: BigInt = BigInt(1)
  var b: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((plain_text).size)) {
    var code: BigInt = ord((plain_text.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    a = (a + code) % MOD_ADLER
    b = (b + a) % MOD_ADLER
    i = i + BigInt(1)
  }
  return b * BigInt(65536) + a
}

def main(): Any = {
  println(_str(_str(adler32("Algorithms"))))
  println(_str(_str(adler32("go adler em all"))))
}

var MOD_ADLER: BigInt = BigInt(65521)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
