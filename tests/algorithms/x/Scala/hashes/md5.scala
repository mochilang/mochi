// Generated by Mochi v0.10.63 on 2025-08-12 08:52:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def ord(ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((ASCII).length)) {
    if (ASCII.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return BigInt(32) + i
    }
    i = i + BigInt(1)
  }
  return BigInt(0)
}

def to_little_endian(s: String): String = {
  if (BigInt((s).size) != BigInt(32)) {
    throw new RuntimeException(String.valueOf("Input must be of length 32"))
  }
  return s.slice((BigInt(24)).toInt, (BigInt(32)).toInt) + s.slice((BigInt(16)).toInt, (BigInt(24)).toInt) + s.slice((BigInt(8)).toInt, (BigInt(16)).toInt) + s.slice((BigInt(0)).toInt, (BigInt(8)).toInt)
}

def int_to_bits(n: BigInt, width: BigInt): String = {
  var bits: String = ""
  var num: BigInt = n
  while (num > BigInt(0)) {
    bits = _str(num % BigInt(2)) + bits
    num = num / BigInt(2)
  }
  while (BigInt((bits).size) < width) {
    bits = "0" + bits
  }
  if (BigInt((bits).size) > width) {
    bits = bits.slice((BigInt((bits).size) - width).toInt, (BigInt((bits).size)).toInt)
  }
  return bits
}

def bits_to_int(bits: String): BigInt = {
  var num: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((bits).size)) {
    if (bits.slice((i).toInt, (i + BigInt(1)).toInt) == "1") {
      num = num * BigInt(2) + BigInt(1)
    } else {
      num = num * BigInt(2)
    }
    i = i + BigInt(1)
  }
  return num
}

def to_hex(n: BigInt): String = {
  val digits: String = "0123456789abcdef"
  if (n == BigInt(0)) {
    return "0"
  }
  var num: BigInt = n
  var s: String = ""
  while (num > BigInt(0)) {
    val d: BigInt = num % BigInt(16)
    s = digits.slice((d).toInt, (d + BigInt(1)).toInt) + s
    num = num / BigInt(16)
  }
  return s
}

def reformat_hex(i: BigInt): String = {
  if (i < BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input must be non-negative"))
  }
  var hex: String = to_hex(i)
  while (BigInt((hex).size) < BigInt(8)) {
    hex = "0" + hex
  }
  if (BigInt((hex).size) > BigInt(8)) {
    hex = hex.slice((BigInt((hex).size) - BigInt(8)).toInt, (BigInt((hex).size)).toInt)
  }
  var le: String = ""
  var j: BigInt = BigInt((hex).size) - BigInt(2)
  while (j >= BigInt(0)) {
    le = le + hex.slice((j).toInt, (j + BigInt(2)).toInt)
    j = j - BigInt(2)
  }
  return le
}

def preprocess(message: String): String = {
  var bit_string: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((message).size)) {
    val ch: String = message.slice((i).toInt, (i + BigInt(1)).toInt)
    bit_string = bit_string + int_to_bits(ord(ch), BigInt(8))
    i = i + BigInt(1)
  }
  val start_len: String = int_to_bits(BigInt((bit_string).size), BigInt(64))
  bit_string = bit_string + "1"
  while (BigInt((bit_string).size) % BigInt(512) != BigInt(448)) {
    bit_string = bit_string + "0"
  }
  bit_string = bit_string + to_little_endian(start_len.slice((BigInt(32)).toInt, (BigInt(64)).toInt)) + to_little_endian(start_len.slice((BigInt(0)).toInt, (BigInt(32)).toInt))
  return bit_string
}

def get_block_words(bit_string: String): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (BigInt((bit_string).size) % BigInt(512) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input must have length that's a multiple of 512"))
  }
  var blocks: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var pos: BigInt = BigInt(0)
  while (pos < BigInt((bit_string).size)) {
    var block: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var i: BigInt = BigInt(0)
    while (i < BigInt(512)) {
      val part: String = bit_string.slice((pos + i).toInt, (pos + i + BigInt(32)).toInt)
      val word: BigInt = bits_to_int(to_little_endian(part))
      block = block :+ (word)
      i = i + BigInt(32)
    }
    blocks = blocks :+ (block)
    pos = pos + BigInt(512)
  }
  return blocks
}

def bit_and(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    if ((x % BigInt(2) == BigInt(1) && y % BigInt(2) == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_or(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    val abit: BigInt = x % BigInt(2)
    val bbit: BigInt = y % BigInt(2)
    if ((abit == BigInt(1) || bbit == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_xor(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    val abit: BigInt = x % BigInt(2)
    val bbit: BigInt = y % BigInt(2)
    if ((abit + bbit) % BigInt(2) == BigInt(1)) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def not_32(i: BigInt): BigInt = {
  if (i < BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input must be non-negative"))
  }
  return BigInt("4294967295") - i
}

def sum_32(a: BigInt, b: BigInt): BigInt = {
  return (a + b) % MOD
}

def lshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num % MOD
  var i: BigInt = BigInt(0)
  while (i < k) {
    result = result * BigInt(2) % MOD
    i = i + BigInt(1)
  }
  return result
}

def rshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = BigInt(0)
  while (i < k) {
    result = result / BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def left_rotate_32(i: BigInt, shift: BigInt): BigInt = {
  if (i < BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input must be non-negative"))
  }
  if (shift < BigInt(0)) {
    throw new RuntimeException(String.valueOf("Shift must be non-negative"))
  }
  val left: BigInt = lshift(i, shift)
  val right: BigInt = rshift(i, BigInt(32) - shift)
  return (left + right) % MOD
}

def md5_me(message: String): String = {
  val bit_string: String = preprocess(message)
  val added_consts: ArrayBuffer[BigInt] = ArrayBuffer(BigInt("3614090360"), BigInt("3905402710"), BigInt(606105819), BigInt("3250441966"), BigInt("4118548399"), BigInt(1200080426), BigInt("2821735955"), BigInt("4249261313"), BigInt(1770035416), BigInt("2336552879"), BigInt("4294925233"), BigInt("2304563134"), BigInt(1804603682), BigInt("4254626195"), BigInt("2792965006"), BigInt(1236535329), BigInt("4129170786"), BigInt("3225465664"), BigInt(643717713), BigInt("3921069994"), BigInt("3593408605"), BigInt(38016083), BigInt("3634488961"), BigInt("3889429448"), BigInt(568446438), BigInt("3275163606"), BigInt("4107603335"), BigInt(1163531501), BigInt("2850285829"), BigInt("4243563512"), BigInt(1735328473), BigInt("2368359562"), BigInt("4294588738"), BigInt("2272392833"), BigInt(1839030562), BigInt("4259657740"), BigInt("2763975236"), BigInt(1272893353), BigInt("4139469664"), BigInt("3200236656"), BigInt(681279174), BigInt("3936430074"), BigInt("3572445317"), BigInt(76029189), BigInt("3654602809"), BigInt("3873151461"), BigInt(530742520), BigInt("3299628645"), BigInt("4096336452"), BigInt(1126891415), BigInt("2878612391"), BigInt("4237533241"), BigInt(1700485571), BigInt("2399980690"), BigInt("4293915773"), BigInt("2240044497"), BigInt(1873313359), BigInt("4264355552"), BigInt("2734768916"), BigInt(1309151649), BigInt("4149444226"), BigInt("3174756917"), BigInt(718787259), BigInt("3951481745"))
  val shift_amounts: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(7), BigInt(12), BigInt(17), BigInt(22), BigInt(7), BigInt(12), BigInt(17), BigInt(22), BigInt(7), BigInt(12), BigInt(17), BigInt(22), BigInt(7), BigInt(12), BigInt(17), BigInt(22), BigInt(5), BigInt(9), BigInt(14), BigInt(20), BigInt(5), BigInt(9), BigInt(14), BigInt(20), BigInt(5), BigInt(9), BigInt(14), BigInt(20), BigInt(5), BigInt(9), BigInt(14), BigInt(20), BigInt(4), BigInt(11), BigInt(16), BigInt(23), BigInt(4), BigInt(11), BigInt(16), BigInt(23), BigInt(4), BigInt(11), BigInt(16), BigInt(23), BigInt(4), BigInt(11), BigInt(16), BigInt(23), BigInt(6), BigInt(10), BigInt(15), BigInt(21), BigInt(6), BigInt(10), BigInt(15), BigInt(21), BigInt(6), BigInt(10), BigInt(15), BigInt(21), BigInt(6), BigInt(10), BigInt(15), BigInt(21))
  var a0: BigInt = BigInt(1732584193)
  var b0: BigInt = BigInt("4023233417")
  var c0: BigInt = BigInt("2562383102")
  var d0: BigInt = BigInt(271733878)
  val blocks: ArrayBuffer[ArrayBuffer[BigInt]] = get_block_words(bit_string)
  var bi: BigInt = BigInt(0)
  while (bi < BigInt((blocks).size)) {
    val block: ArrayBuffer[BigInt] = blocks.lift((bi.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var a: BigInt = a0
    var b: BigInt = b0
    var c: BigInt = c0
    var d: BigInt = d0
    var i: BigInt = BigInt(0)
    while (i < BigInt(64)) {
      var f: BigInt = BigInt(0)
      var g: BigInt = BigInt(0)
      if (i <= BigInt(15)) {
        f = bit_xor(d, bit_and(b, bit_xor(c, d)))
        g = i
      } else {
        if (i <= BigInt(31)) {
          f = bit_xor(c, bit_and(d, bit_xor(b, c)))
          g = (BigInt(5) * i + BigInt(1)) % BigInt(16)
        } else {
          if (i <= BigInt(47)) {
            f = bit_xor(bit_xor(b, c), d)
            g = (BigInt(3) * i + BigInt(5)) % BigInt(16)
          } else {
            f = bit_xor(c, bit_or(b, not_32(d)))
            g = BigInt(7) * i % BigInt(16)
          }
        }
      }
      f = sum_32(f, a)
      f = sum_32(f, added_consts.lift((i.toInt).toInt).getOrElse(BigInt(0)))
      f = sum_32(f, block.lift((g.toInt).toInt).getOrElse(BigInt(0)))
      val rotated: BigInt = left_rotate_32(f, shift_amounts.lift((i.toInt).toInt).getOrElse(BigInt(0)))
      val new_b: BigInt = sum_32(b, rotated)
      a = d
      d = c
      c = b
      b = new_b
      i = i + BigInt(1)
    }
    a0 = sum_32(a0, a)
    b0 = sum_32(b0, b)
    c0 = sum_32(c0, c)
    d0 = sum_32(d0, d)
    bi = bi + BigInt(1)
  }
  val digest: String = reformat_hex(a0) + reformat_hex(b0) + reformat_hex(c0) + reformat_hex(d0)
  return digest
}

val MOD: BigInt = BigInt("4294967296")

val ASCII: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
