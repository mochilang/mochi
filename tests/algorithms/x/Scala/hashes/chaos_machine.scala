// Generated by Mochi v0.10.66 on 2025-08-15 15:28:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Machine(var buffer: ArrayBuffer[Double], var params: ArrayBuffer[Double], var time: BigInt)

case class PullResult(var value: BigInt, var machine: Machine)

def round_dec(x: Double, n: BigInt): Double = {
  var m10: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    m10 = m10 * 10.0
    i = i + BigInt(1)
  }
  var y: Double = x * m10 + 0.5
  return 1.0 * (BigInt(y.toString.toDouble.toInt)).toDouble / m10
}

def reset(): Machine = {
  return Machine(K, ArrayBuffer(0.0, 0.0, 0.0, 0.0, 0.0), BigInt(0))
}

def push(m: Machine, seed: BigInt): Machine = {
  var buf: ArrayBuffer[Double] = m.asInstanceOf[Machine].buffer
  var par: ArrayBuffer[Double] = m.asInstanceOf[Machine].params
  var i: BigInt = BigInt(0)
  while (i < BigInt((buf).size)) {
    var value: Double = buf.lift((i.toInt).toInt).getOrElse(0.0)
    var e: Double = 1.0 * seed.toString.toDouble / value
    var next_value: Double = buf.lift((((i + BigInt(1)) % size).toInt).toInt).getOrElse(0.0) + e
    next_value = next_value - 1.0 * (BigInt(next_value.toString.toDouble.toInt)).toDouble
    var r: Double = par.lift((i.toInt).toInt).getOrElse(0.0) + e
    r = r - 1.0 * (BigInt(r.toString.toDouble.toInt)).toDouble
    r = r + 3.0
    buf((i).toInt) = round_dec(r * next_value * (1.0 - next_value), BigInt(10))
    par((i).toInt) = r
    i = i + BigInt(1)
  }
  return Machine(buf, par, m.asInstanceOf[Machine].time + BigInt(1))
}

def xor(a: BigInt, b: BigInt): BigInt = {
  var aa: BigInt = a
  var bb: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  while (aa > BigInt(0) || bb > BigInt(0)) {
    var abit: BigInt = aa % BigInt(2)
    var bbit: BigInt = bb % BigInt(2)
    if (abit != bbit) {
      res = res + bit
    }
    aa = aa / BigInt(2)
    bb = bb / BigInt(2)
    bit = bit * BigInt(2)
  }
  return res
}

def xorshift(x: BigInt, y: BigInt): BigInt = {
  var xv: BigInt = x
  var yv: BigInt = y
  xv = xor(xv, yv / BigInt(8192))
  yv = xor(yv, xv * BigInt(131072))
  xv = xor(xv, yv / BigInt(32))
  return xv
}

def pull(m: Machine): PullResult = {
  var buf: ArrayBuffer[Double] = m.asInstanceOf[Machine].buffer
  var par: ArrayBuffer[Double] = m.asInstanceOf[Machine].params
  var key: BigInt = m.asInstanceOf[Machine].time % size
  var i: BigInt = BigInt(0)
  while (i < t) {
    var r: Double = par.lift((key.toInt).toInt).getOrElse(0.0)
    var value: Double = buf.lift((key.toInt).toInt).getOrElse(0.0)
    buf((key).toInt) = round_dec(r * value * (1.0 - value), BigInt(10))
    var new_r: Double = 1.0 * (m.asInstanceOf[Machine].time).toString.toDouble * 0.01 + r * 1.01
    new_r = new_r - 1.0 * (BigInt(new_r.toString.toDouble.toInt)).toDouble
    par((key).toInt) = new_r + 3.0
    i = i + BigInt(1)
  }
  var x: BigInt = BigInt((buf.lift((((key + BigInt(2)) % size).toInt).toInt).getOrElse(0.0) * 10000000000.0).toInt)
  var y: BigInt = BigInt((buf.lift((((key + size - BigInt(2)) % size).toInt).toInt).getOrElse(0.0) * 10000000000.0).toInt)
  var new_machine: Machine = Machine(buf, par, m.asInstanceOf[Machine].time + BigInt(1))
  var value: BigInt = xorshift(x, y) % BigInt("4294967295")
  return PullResult(value, new_machine)
}

var K: ArrayBuffer[Double] = ArrayBuffer(0.33, 0.44, 0.55, 0.44, 0.33)

var t: BigInt = BigInt(3)

var size: BigInt = BigInt(5)

var machine: Machine = reset()

var i: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i < BigInt(100)) {
      machine = push(machine, i)
      i = i + BigInt(1)
    }
    var res: PullResult = pull(machine)
    println(_str(res.value))
    println(_str(res.machine.asInstanceOf[Machine].buffer))
    println(_str(res.machine.asInstanceOf[Machine].params))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
