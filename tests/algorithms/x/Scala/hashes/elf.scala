// Generated by Mochi v0.10.63 on 2025-08-12 08:52:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def ord(ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((ascii).length)) {
    if (ascii.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return BigInt(32) + i
    }
    i = i + BigInt(1)
  }
  return BigInt(0)
}

def bit_and(a: BigInt, b: BigInt): BigInt = {
  var ua: BigInt = a
  var ub: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  while (ua > BigInt(0) || ub > BigInt(0)) {
    if ((ua % BigInt(2) == BigInt(1) && ub % BigInt(2) == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    ua = ua / BigInt(2)
    ub = ub / BigInt(2)
    bit = bit * BigInt(2)
  }
  return res
}

def bit_xor(a: BigInt, b: BigInt): BigInt = {
  var ua: BigInt = a
  var ub: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  while (ua > BigInt(0) || ub > BigInt(0)) {
    val abit: BigInt = ua % BigInt(2)
    val bbit: BigInt = ub % BigInt(2)
    if (abit != bbit) {
      res = res + bit
    }
    ua = ua / BigInt(2)
    ub = ub / BigInt(2)
    bit = bit * BigInt(2)
  }
  return res
}

def bit_not32(x: BigInt): BigInt = {
  var ux: BigInt = x
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var count: BigInt = BigInt(0)
  while (count < BigInt(32)) {
    if (ux % BigInt(2) == BigInt(0)) {
      res = res + bit
    }
    ux = ux / BigInt(2)
    bit = bit * BigInt(2)
    count = count + BigInt(1)
  }
  return res
}

def elf_hash(data: String): BigInt = {
  var `hash_`: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((data).size)) {
    val c: BigInt = ord(data.slice((i).toInt, (i + BigInt(1)).toInt))
    `hash_` = `hash_` * BigInt(16) + c
    val x: BigInt = bit_and(`hash_`, BigInt("4026531840"))
    if (x != BigInt(0)) {
      `hash_` = bit_xor(`hash_`, x / BigInt(16777216))
    }
    `hash_` = bit_and(`hash_`, bit_not32(x))
    i = i + BigInt(1)
  }
  return `hash_`
}

val ascii: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(elf_hash("lorem ipsum")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
