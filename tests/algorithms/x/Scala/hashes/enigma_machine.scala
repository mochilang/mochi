// Generated by Mochi v0.10.63 on 2025-08-12 08:52:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def build_alphabet(): ArrayBuffer[String] = {
  var result: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((ASCII).length)) {
    result = result :+ (ASCII.slice((i.toInt).toInt, (i.toInt).toInt + 1))
    i = i + BigInt(1)
  }
  return result
}

def range_list(n: BigInt): ArrayBuffer[BigInt] = {
  var lst: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    lst = lst :+ (i)
    i = i + BigInt(1)
  }
  return lst
}

def reversed_range_list(n: BigInt): ArrayBuffer[BigInt] = {
  var lst: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = n - BigInt(1)
  while (i >= BigInt(0)) {
    lst = lst :+ (i)
    i = i - BigInt(1)
  }
  return lst
}

def index_of_char(lst: ArrayBuffer[String], ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (lst.lift((i.toInt).toInt).getOrElse("") == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def index_of_int(lst: ArrayBuffer[BigInt], value: BigInt): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (lst.lift((i.toInt).toInt).getOrElse(BigInt(0)) == value) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def enigma_encrypt(message: String, token: BigInt): String = {
  val alphabets: ArrayBuffer[String] = build_alphabet()
  val n: BigInt = BigInt((alphabets).size)
  var gear_one: ArrayBuffer[BigInt] = range_list(n)
  var gear_two: ArrayBuffer[BigInt] = range_list(n)
  var gear_three: ArrayBuffer[BigInt] = range_list(n)
  val reflector: ArrayBuffer[BigInt] = reversed_range_list(n)
  var gear_one_pos: BigInt = BigInt(0)
  var gear_two_pos: BigInt = BigInt(0)
  var gear_three_pos: BigInt = BigInt(0)
  def rotator(): Any = {
    var i: BigInt = gear_one.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    gear_one = gear_one.slice((BigInt(1)).toInt, (BigInt((gear_one).size)).toInt)
    gear_one = gear_one :+ (i)
    gear_one_pos = gear_one_pos + BigInt(1)
    if (gear_one_pos % n == BigInt(0)) {
      i = gear_two.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      gear_two = gear_two.slice((BigInt(1)).toInt, (BigInt((gear_two).size)).toInt)
      gear_two = gear_two :+ (i)
      gear_two_pos = gear_two_pos + BigInt(1)
      if (gear_two_pos % n == BigInt(0)) {
        i = gear_three.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
        gear_three = gear_three.slice((BigInt(1)).toInt, (BigInt((gear_three).size)).toInt)
        gear_three = gear_three :+ (i)
        gear_three_pos = gear_three_pos + BigInt(1)
      }
    }
  }
  def engine(ch: String): String = {
    var target: BigInt = index_of_char(alphabets, ch)
    target = gear_one.lift((target.toInt).toInt).getOrElse(BigInt(0))
    target = gear_two.lift((target.toInt).toInt).getOrElse(BigInt(0))
    target = gear_three.lift((target.toInt).toInt).getOrElse(BigInt(0))
    target = reflector.lift((target.toInt).toInt).getOrElse(BigInt(0))
    target = index_of_int(gear_three, target)
    target = index_of_int(gear_two, target)
    target = index_of_int(gear_one, target)
    rotator()
    return alphabets.lift((target.toInt).toInt).getOrElse("")
  }
  var t: BigInt = BigInt(0)
  while (t < token) {
    rotator()
    t = t + BigInt(1)
  }
  var result: String = ""
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((message).length)) {
    result = result + engine(message.slice((idx.toInt).toInt, (idx.toInt).toInt + 1))
    idx = idx + BigInt(1)
  }
  return result
}

val ASCII: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"

val message: String = "HELLO WORLD"

val token: BigInt = BigInt(123)

val encoded: String = enigma_encrypt(message, token)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encoded)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
