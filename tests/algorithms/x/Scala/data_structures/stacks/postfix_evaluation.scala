// Generated by Mochi v0.10.59 on 2025-08-07 00:51:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def slice_without_last(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((xs).size) - 1) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def parse_float(token: String): Double = {
  var sign: Double = 1.0
  var idx: BigInt = 0
  if (BigInt((token).size) > 0) {
    val first: String = token.slice((0).toInt, (1).toInt)
    if (first == "-") {
      sign = -1.0
      idx = 1
    } else {
      if (first == "+") {
        idx = 1
      }
    }
  }
  var int_part: BigInt = 0
  while (idx < BigInt((token).size) && token.slice((idx).toInt, (idx + 1).toInt) != ".") {
    int_part = int_part * 10 + BigInt((token.slice((idx).toInt, (idx + 1).toInt)))
    idx = idx + 1
  }
  var result: Double = 1.0 * int_part.toString.toDouble
  if ((idx < BigInt((token).size) && token.slice((idx).toInt, (idx + 1).toInt) == ".").asInstanceOf[Boolean]) {
    idx = idx + 1
    var place: Double = 0.1
    while (idx < BigInt((token).size)) {
      val digit: BigInt = BigInt((token.slice((idx).toInt, (idx + 1).toInt)))
      result = result + place * (1.0 * digit.toString.toDouble)
      place = place / 10.0
      idx = idx + 1
    }
  }
  return sign * result
}

def pow_float(base: Double, exp: Double): Double = {
  var result: Double = 1.0
  var i: BigInt = 0
  val e: BigInt = BigInt(exp.toString.toDouble.toInt)
  while (i < e) {
    result = result * base
    i = i + 1
  }
  return result
}

def apply_op(a: Double, b: Double, op: String): Double = {
  if (op == "+") {
    return a + b
  }
  if (op == "-") {
    return a - b
  }
  if (op == "*") {
    return a * b
  }
  if (op == "/") {
    return a / b
  }
  if (op == "^") {
    return pow_float(a, b)
  }
  return 0.0
}

def evaluate(tokens: ArrayBuffer[String]): Double = {
  if (BigInt((tokens).size) == 0) {
    return 0.0
  }
  var stack: ArrayBuffer[Double] = ArrayBuffer()
  for (token <- tokens) {
    if (((((token == "+" || token == "-").asInstanceOf[Boolean] || token == "*").asInstanceOf[Boolean] || token == "/").asInstanceOf[Boolean] || token == "^").asInstanceOf[Boolean]) {
      if (((token == "+" || token == "-").asInstanceOf[Boolean] && BigInt((stack).size) < 2).asInstanceOf[Boolean]) {
        val b: Double = stack(((BigInt((stack).size) - 1).toInt).toInt)
        stack = slice_without_last(stack)
        if (token == "-") {
          stack = stack :+ 0.0 - b
        } else {
          stack = stack :+ b
        }
      } else {
        val b: Double = stack(((BigInt((stack).size) - 1).toInt).toInt)
        stack = slice_without_last(stack)
        val a: Double = stack(((BigInt((stack).size) - 1).toInt).toInt)
        stack = slice_without_last(stack)
        val result: Double = apply_op(a, b, token)
        stack = stack :+ result
      }
    } else {
      stack = stack :+ parse_float(token)
    }
  }
  if (BigInt((stack).size) != 1) {
    throw new RuntimeException(String.valueOf("Invalid postfix expression"))
  }
  return stack((0.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(evaluate(ArrayBuffer("2", "1", "+", "3", "*"))))
    println(String.valueOf(evaluate(ArrayBuffer("4", "13", "5", "/", "+"))))
    println(String.valueOf(evaluate(ArrayBuffer("5", "6", "9", "*", "+"))))
    println(String.valueOf(evaluate(ArrayBuffer("2", "-", "3", "+"))))
    println(String.valueOf(evaluate(ArrayBuffer())))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
