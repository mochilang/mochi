// Generated by Mochi v0.10.72 on 2025-08-24 22:27:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def next_greatest_element_slow(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((xs).size)) {
      var next: Double = -1.0
      var j: BigInt = i + BigInt(1)
      val _br1 = new Breaks
      _br1.breakable {
        while (j < BigInt((xs).size)) {
          if (xs.lift((i.toInt).toInt).getOrElse(0.0) < xs.lift((j.toInt).toInt).getOrElse(0.0)) {
            next = xs.lift((j.toInt).toInt).getOrElse(0.0)
            _br1.break()
          }
          j = j + BigInt(1)
        }
      }
      res = (res :+ (next))
      i = i + BigInt(1)
    }
  }
  return res
}

def next_greatest_element_fast(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (i < BigInt((xs).size)) {
      var next: Double = -1.0
      var j: BigInt = i + BigInt(1)
      val _br3 = new Breaks
      _br3.breakable {
        while (j < BigInt((xs).size)) {
          var inner: Double = xs.lift((j.toInt).toInt).getOrElse(0.0)
          if (xs.lift((i.toInt).toInt).getOrElse(0.0) < inner) {
            next = inner
            _br3.break()
          }
          j = j + BigInt(1)
        }
      }
      res = (res :+ (next))
      i = i + BigInt(1)
    }
  }
  return res
}

def set_at_float(xs: ArrayBuffer[Double], idx: BigInt, value: Double): ArrayBuffer[Double] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = (res :+ (value))
    } else {
      res = (res :+ (xs.lift((i.toInt).toInt).getOrElse(0.0)))
    }
    i = i + BigInt(1)
  }
  return res
}

def next_greatest_element(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var k: BigInt = BigInt(0)
  while (k < BigInt((xs).size)) {
    res = (res :+ (-1.0))
    k = k + BigInt(1)
  }
  var stack: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    while (BigInt((stack).size) > BigInt(0) && xs.lift((i.toInt).toInt).getOrElse(0.0) > xs.lift((stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(0.0)) {
      var idx: BigInt = stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
      res = set_at_float(res, idx, xs.lift((i.toInt).toInt).getOrElse(0.0))
    }
    stack = (stack :+ (i))
    i = i + BigInt(1)
  }
  return res
}

var arr: ArrayBuffer[Double] = ArrayBuffer(-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0)

var expected: ArrayBuffer[Double] = ArrayBuffer(-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(next_greatest_element_slow(arr))))
    println(_str(_str(next_greatest_element_fast(arr))))
    println(_str(_str(next_greatest_element(arr))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
