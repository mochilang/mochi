// Generated by Mochi v0.10.59 on 2025-08-07 00:51:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def precedence(ch: String): BigInt = {
  if ((PRECEDENCES.contains(ch)).asInstanceOf[Boolean]) {
    return PRECEDENCES.getOrElse(ch.toString, null).asInstanceOf[BigInt]
  }
  return -1
}

def associativity(ch: String): String = {
  if ((ASSOCIATIVITIES.contains(ch)).asInstanceOf[Boolean]) {
    return ASSOCIATIVITIES.getOrElse(ch.toString, "").asInstanceOf[String]
  }
  return ""
}

def balanced_parentheses(expr: String): Boolean = {
  var count: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((expr).size)) {
    val ch: String = expr.slice((i).toInt, (i + 1).toInt)
    if (ch == "(") {
      count = count + 1
    }
    if (ch == ")") {
      count = count - 1
      if (count < 0) {
        return false
      }
    }
    i = i + 1
  }
  return count == 0
}

def is_letter(ch: String): Boolean = {
  return (('a' <= ch.charAt(0) && ch.charAt(0) <= 'z').asInstanceOf[Boolean] || ('A' <= ch.charAt(0) && ch.charAt(0) <= 'Z').asInstanceOf[Boolean]).asInstanceOf[Boolean]
}

def is_digit(ch: String): Boolean = {
  return ('0' <= ch.charAt(0) && ch.charAt(0) <= '9').asInstanceOf[Boolean]
}

def is_alnum(ch: String): Boolean = {
  return (is_letter(ch) || is_digit(ch)).asInstanceOf[Boolean]
}

def infix_to_postfix(expression: String): String = {
  if (balanced_parentheses(expression) == false) {
    throw new RuntimeException(String.valueOf("Mismatched parentheses"))
  }
  var stack: ArrayBuffer[String] = ArrayBuffer()
  var postfix: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  val _br1 = new Breaks
  val _ct1 = new Breaks
  _br1.breakable {
    while (i < BigInt((expression).size)) {
      _ct1.breakable {
        val ch: String = expression.slice((i).toInt, (i + 1).toInt)
        if (is_alnum(ch)) {
          postfix = postfix :+ ch
        } else {
          if (ch == "(") {
            stack = stack :+ ch
          } else {
            if (ch == ")") {
              while (BigInt((stack).size) > 0 && stack(((BigInt((stack).size) - 1).toInt).toInt) != "(") {
                postfix = postfix :+ stack(((BigInt((stack).size) - 1).toInt).toInt)
                stack = stack.slice((0).toInt, (BigInt((stack).size) - 1).toInt)
              }
              if (BigInt((stack).size) > 0) {
                stack = stack.slice((0).toInt, (BigInt((stack).size) - 1).toInt)
              }
            } else {
              if (ch == " ") {
              } else {
                val _br3 = new Breaks
                val _ct3 = new Breaks
                _br3.breakable {
                  while (true) {
                    _ct3.breakable {
                      if (BigInt((stack).size) == 0) {
                        stack = stack :+ ch
                        _br3.break()
                      }
                      val cp: BigInt = precedence(ch)
                      val tp: BigInt = precedence(stack(((BigInt((stack).size) - 1).toInt).toInt))
                      if (cp > tp) {
                        stack = stack :+ ch
                        _br3.break()
                      }
                      if (cp < tp) {
                        postfix = postfix :+ stack(((BigInt((stack).size) - 1).toInt).toInt)
                        stack = stack.slice((0).toInt, (BigInt((stack).size) - 1).toInt)
                        _ct3.break()
                      }
                      if (associativity(ch) == "RL") {
                        stack = stack :+ ch
                        _br3.break()
                      }
                      postfix = postfix :+ stack(((BigInt((stack).size) - 1).toInt).toInt)
                      stack = stack.slice((0).toInt, (BigInt((stack).size) - 1).toInt)
                    }
                  }
                }
              }
            }
          }
        }
        i = i + 1
      }
    }
  }
  while (BigInt((stack).size) > 0) {
    postfix = postfix :+ stack(((BigInt((stack).size) - 1).toInt).toInt)
    stack = stack.slice((0).toInt, (BigInt((stack).size) - 1).toInt)
  }
  var res: String = ""
  var j: BigInt = 0
  while (j < BigInt((postfix).size)) {
    if (j > 0) {
      res = res + " "
    }
    res = res + postfix((j.toInt).toInt)
    j = j + 1
  }
  return res
}

def main(): Any = {
  val expression: String = "a+b*(c^d-e)^(f+g*h)-i"
  println(expression)
  println(infix_to_postfix(expression))
}

val PRECEDENCES: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("+" -> (BigInt(1)), "-" -> (BigInt(1)), "*" -> (BigInt(2)), "/" -> (BigInt(2)), "^" -> (BigInt(3)))

val ASSOCIATIVITIES: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("+" -> ("LR"), "-" -> ("LR"), "*" -> ("LR"), "/" -> ("LR"), "^" -> ("RL"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
