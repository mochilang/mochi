// Generated by Mochi v0.10.59 on 2025-08-07 00:52:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var value: String, var next: BigInt)

case class Stack(var nodes: ArrayBuffer[Node], var top: BigInt)

case class PopResult(var stack: Stack, var value: String)

def empty_stack(): Stack = {
  return Stack(ArrayBuffer(), -1)
}

def is_empty(stack: Stack): Boolean = {
  return stack.asInstanceOf[Stack].top == -1
}

def push(stack: Stack, item: String): Stack = {
  val new_node: Node = Node(item, stack.asInstanceOf[Stack].top)
  var new_nodes: ArrayBuffer[Node] = stack.asInstanceOf[Stack].nodes
  new_nodes = new_nodes :+ new_node
  val new_top: BigInt = BigInt((new_nodes).size) - 1
  return Stack(new_nodes, new_top)
}

def pop(stack: Stack): PopResult = {
  if (stack.asInstanceOf[Stack].top == -1) {
    throw new RuntimeException(String.valueOf("pop from empty stack"))
  }
  val node: Node = stack.asInstanceOf[Stack].nodes((stack.asInstanceOf[Stack].top.toInt).toInt)
  val new_top: BigInt = node.asInstanceOf[Node].next
  val new_stack: Stack = Stack(stack.asInstanceOf[Stack].nodes, new_top)
  return PopResult(new_stack, node.value)
}

def peek(stack: Stack): String = {
  if (stack.asInstanceOf[Stack].top == -1) {
    throw new RuntimeException(String.valueOf("peek from empty stack"))
  }
  val node: Node = stack.asInstanceOf[Stack].nodes((stack.asInstanceOf[Stack].top.toInt).toInt)
  return node.value
}

def clear(stack: Stack): Stack = {
  return Stack(ArrayBuffer(), -1)
}

def main(): Any = {
  var stack: Stack = empty_stack()
  println(is_empty(stack))
  stack = push(stack, "5")
  stack = push(stack, "9")
  stack = push(stack, "python")
  println(is_empty(stack))
  var res: PopResult = pop(stack)
  stack = res.asInstanceOf[PopResult].stack
  println(res.value)
  stack = push(stack, "algorithms")
  res = pop(stack)
  stack = res.asInstanceOf[PopResult].stack
  println(res.value)
  res = pop(stack)
  stack = res.asInstanceOf[PopResult].stack
  println(res.value)
  res = pop(stack)
  stack = res.asInstanceOf[PopResult].stack
  println(res.value)
  println(is_empty(stack))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
