// Generated by Mochi v0.10.59 on 2025-08-07 00:51:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class StackWithQueues(var main_queue: ArrayBuffer[BigInt], var temp_queue: ArrayBuffer[BigInt])

def make_stack(): StackWithQueues = {
  return StackWithQueues(ArrayBuffer(), ArrayBuffer())
}

def push(s: StackWithQueues, item: BigInt): Any = {
  s.asInstanceOf[StackWithQueues].temp_queue = s.asInstanceOf[StackWithQueues].temp_queue :+ item
  while (BigInt((s.asInstanceOf[StackWithQueues].main_queue).size) > 0) {
    s.asInstanceOf[StackWithQueues].temp_queue = s.asInstanceOf[StackWithQueues].temp_queue :+ s.asInstanceOf[StackWithQueues].main_queue((0.toInt).toInt)
    s.asInstanceOf[StackWithQueues].main_queue = s.asInstanceOf[StackWithQueues].main_queue.slice((1).toInt, (BigInt((s.asInstanceOf[StackWithQueues].main_queue).size)).toInt)
  }
  val new_main: ArrayBuffer[BigInt] = s.asInstanceOf[StackWithQueues].temp_queue
  s.asInstanceOf[StackWithQueues].temp_queue = s.asInstanceOf[StackWithQueues].main_queue
  s.asInstanceOf[StackWithQueues].main_queue = new_main
}

def pop(s: StackWithQueues): BigInt = {
  if (BigInt((s.asInstanceOf[StackWithQueues].main_queue).size) == 0) {
    throw new RuntimeException(String.valueOf("pop from empty stack"))
  }
  val item: BigInt = s.asInstanceOf[StackWithQueues].main_queue((0.toInt).toInt)
  s.asInstanceOf[StackWithQueues].main_queue = s.asInstanceOf[StackWithQueues].main_queue.slice((1).toInt, (BigInt((s.asInstanceOf[StackWithQueues].main_queue).size)).toInt)
  return item
}

def peek(s: StackWithQueues): BigInt = {
  if (BigInt((s.asInstanceOf[StackWithQueues].main_queue).size) == 0) {
    throw new RuntimeException(String.valueOf("peek from empty stack"))
  }
  return s.asInstanceOf[StackWithQueues].main_queue((0.toInt).toInt)
}

def is_empty(s: StackWithQueues): Boolean = {
  return BigInt((s.asInstanceOf[StackWithQueues].main_queue).size) == 0
}

var stack: StackWithQueues = make_stack()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    push(stack, 1)
    push(stack, 2)
    push(stack, 3)
    println(String.valueOf(peek(stack)))
    println(String.valueOf(pop(stack)))
    println(String.valueOf(peek(stack)))
    println(String.valueOf(pop(stack)))
    println(String.valueOf(pop(stack)))
    println(String.valueOf(is_empty(stack)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
