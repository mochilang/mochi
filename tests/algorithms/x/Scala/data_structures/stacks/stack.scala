// Generated by Mochi v0.10.59 on 2025-08-07 00:51:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Stack(var items: ArrayBuffer[BigInt], var limit: BigInt)

def make_stack(limit: BigInt): Stack = {
  return Stack(ArrayBuffer(), limit)
}

def is_empty(s: Stack): Boolean = {
  return BigInt((s.asInstanceOf[Stack].items).size) == 0
}

def size(s: Stack): BigInt = {
  return BigInt((s.asInstanceOf[Stack].items).size)
}

def is_full(s: Stack): Boolean = {
  return BigInt((s.asInstanceOf[Stack].items).size) >= s.asInstanceOf[Stack].limit
}

def push(s: Stack, item: BigInt): Any = {
  if (is_full(s)) {
    throw new RuntimeException(String.valueOf("stack overflow"))
  }
  s.asInstanceOf[Stack].items = s.asInstanceOf[Stack].items :+ item
}

def pop(s: Stack): BigInt = {
  if (is_empty(s)) {
    throw new RuntimeException(String.valueOf("stack underflow"))
  }
  val n: BigInt = BigInt((s.asInstanceOf[Stack].items).size)
  val `val`: BigInt = s.asInstanceOf[Stack].items(((n - 1).toInt).toInt)
  s.asInstanceOf[Stack].items = s.asInstanceOf[Stack].items.slice((0).toInt, (n - 1).toInt)
  return `val`
}

def peek(s: Stack): BigInt = {
  if (is_empty(s)) {
    throw new RuntimeException(String.valueOf("peek from empty stack"))
  }
  return s.asInstanceOf[Stack].items(((BigInt((s.asInstanceOf[Stack].items).size) - 1).toInt).toInt)
}

def contains(s: Stack, item: BigInt): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((s.asInstanceOf[Stack].items).size)) {
    if (s.asInstanceOf[Stack].items((i.toInt).toInt) == item) {
      return true
    }
    i = i + 1
  }
  return false
}

def stack_repr(s: Stack): String = {
  return String.valueOf(s.asInstanceOf[Stack].items)
}

def main(): Any = {
  var s: Stack = make_stack(5)
  println(String.valueOf(is_empty(s)))
  push(s, 0)
  push(s, 1)
  push(s, 2)
  println(String.valueOf(peek(s)))
  println(String.valueOf(size(s)))
  println(String.valueOf(is_full(s)))
  push(s, 3)
  push(s, 4)
  println(String.valueOf(is_full(s)))
  println(stack_repr(s))
  println(String.valueOf(pop(s)))
  println(String.valueOf(peek(s)))
  println(String.valueOf(s.contains(1)))
  println(String.valueOf(s.contains(9)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
