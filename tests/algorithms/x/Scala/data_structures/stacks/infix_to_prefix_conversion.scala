// Generated by Mochi v0.10.72 on 2025-08-24 23:39:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_alpha(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((LETTERS).length)) {
    if (LETTERS.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def is_digit(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((DIGITS).length)) {
    if (DIGITS.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def reverse_string(s: String): String = {
  var out: String = ""
  var i: BigInt = BigInt((s).size) - BigInt(1)
  while (i >= BigInt(0)) {
    out = out + s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i - BigInt(1)
  }
  return out
}

def infix_to_postfix(infix: String): String = {
  var stack: ArrayBuffer[String] = ArrayBuffer[String]()
  var post: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((infix).size)) {
    val x: String = infix.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((is_alpha(x) || is_digit(x))) {
      post = (post :+ (x))
    } else {
      if (x == "(") {
        stack = (stack :+ (x))
      } else {
        if (x == ")") {
          if (BigInt((stack).size) == BigInt(0)) {
            throw new RuntimeException(String.valueOf("list index out of range"))
          }
          while (stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("") != "(") {
            post = (post :+ (stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("")))
            stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
          }
          stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
        } else {
          if (BigInt((stack).size) == BigInt(0)) {
            stack = (stack :+ (x))
          } else {
            while ((BigInt((stack).size) > BigInt(0) && stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("") != "(").asInstanceOf[Boolean] && PRIORITY.getOrElse(x.toString, BigInt(0)).asInstanceOf[BigInt] <= PRIORITY.getOrElse(stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("").toString, BigInt(0)).asInstanceOf[BigInt]) {
              post = (post :+ (stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("")))
              stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
            }
            stack = (stack :+ (x))
          }
        }
      }
    }
    i = i + BigInt(1)
  }
  while (BigInt((stack).size) > BigInt(0)) {
    if (stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("") == "(") {
      throw new RuntimeException(String.valueOf("invalid expression"))
    }
    post = (post :+ (stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse("")))
    stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
  }
  var res: String = ""
  var j: BigInt = BigInt(0)
  while (j < BigInt((post).size)) {
    res = res + post.lift((j.toInt).toInt).getOrElse("")
    j = j + BigInt(1)
  }
  return res
}

def infix_to_prefix(infix: String): String = {
  var reversed: String = ""
  var i: BigInt = BigInt((infix).size) - BigInt(1)
  while (i >= BigInt(0)) {
    val ch: String = infix.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch == "(") {
      reversed = reversed + ")"
    } else {
      if (ch == ")") {
        reversed = reversed + "("
      } else {
        reversed = reversed + ch
      }
    }
    i = i - BigInt(1)
  }
  val postfix: String = infix_to_postfix(reversed)
  val prefix: String = reverse_string(postfix)
  return prefix
}

val PRIORITY: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("^" -> (BigInt(3)), "*" -> (BigInt(2)), "/" -> (BigInt(2)), "%" -> (BigInt(2)), "+" -> (BigInt(1)), "-" -> (BigInt(1)))

val LETTERS: String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

val DIGITS: String = "0123456789"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
