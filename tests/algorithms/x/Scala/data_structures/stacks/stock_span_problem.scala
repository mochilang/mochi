// Generated by Mochi v0.10.59 on 2025-08-07 00:52:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def calculation_span(price: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((price).size)
  var st: ArrayBuffer[BigInt] = ArrayBuffer()
  var span: ArrayBuffer[BigInt] = ArrayBuffer()
  st = st :+ BigInt(0)
  span = span :+ BigInt(1)
  for (i <- (1).toInt until (n).toInt) {
    while (BigInt((st).size) > 0 && price((st(((BigInt((st).size) - 1).toInt).toInt).toInt).toInt) <= price((i.toInt).toInt)) {
      st = st.slice((0).toInt, (BigInt((st).size) - 1).toInt)
    }
    val s: BigInt = (if (BigInt((st).size) <= 0) i + 1 else i - st(((BigInt((st).size) - 1).toInt).toInt))
    span = span :+ s
    st = st :+ BigInt(i.toString.toDouble.toInt)
  }
  return span
}

def print_array(arr: ArrayBuffer[BigInt]): Any = {
  for (i <- (0).toInt until (BigInt((arr).size)).toInt) {
    println(arr((i.toInt).toInt))
  }
}

val price: ArrayBuffer[BigInt] = ArrayBuffer(10, 4, 5, 90, 120, 80)

val spans: ArrayBuffer[BigInt] = calculation_span(price)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_array(spans)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
