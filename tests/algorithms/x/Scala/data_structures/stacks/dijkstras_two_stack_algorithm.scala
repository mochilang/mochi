// Generated by Mochi v0.10.59 on 2025-08-07 00:50:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_digit(ch: String): Boolean = {
  return (((((((((ch == "0" || ch == "1").asInstanceOf[Boolean] || ch == "2").asInstanceOf[Boolean] || ch == "3").asInstanceOf[Boolean] || ch == "4").asInstanceOf[Boolean] || ch == "5").asInstanceOf[Boolean] || ch == "6").asInstanceOf[Boolean] || ch == "7").asInstanceOf[Boolean] || ch == "8").asInstanceOf[Boolean] || ch == "9").asInstanceOf[Boolean]
}

def slice_without_last_int(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((xs).size) - 1) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def slice_without_last_string(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((xs).size) - 1) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def dijkstras_two_stack_algorithm(equation: String): BigInt = {
  var operand_stack: ArrayBuffer[BigInt] = ArrayBuffer()
  var operator_stack: ArrayBuffer[String] = ArrayBuffer()
  var idx: BigInt = 0
  while (idx < BigInt((equation).length)) {
    val ch: String = equation.slice((idx).toInt, (idx + 1).toInt)
    if (is_digit(ch)) {
      operand_stack = operand_stack :+ BigInt(ch.toString.toDouble.toInt)
    } else {
      if ((((ch == "+" || ch == "-").asInstanceOf[Boolean] || ch == "*").asInstanceOf[Boolean] || ch == "/").asInstanceOf[Boolean]) {
        operator_stack = operator_stack :+ ch
      } else {
        if (ch == ")") {
          val opr: String = operator_stack(((BigInt((operator_stack).size) - 1).toInt).toInt)
          operator_stack = slice_without_last_string(operator_stack)
          val num1: BigInt = operand_stack(((BigInt((operand_stack).size) - 1).toInt).toInt)
          operand_stack = slice_without_last_int(operand_stack)
          val num2: BigInt = operand_stack(((BigInt((operand_stack).size) - 1).toInt).toInt)
          operand_stack = slice_without_last_int(operand_stack)
          val total: BigInt = (if (opr == "+") num2 + num1 else (if (opr == "-") num2 - num1 else (if (opr == "*") num2 * num1 else num2 / num1)))
          operand_stack = operand_stack :+ total
        }
      }
    }
    idx = idx + 1
  }
  return operand_stack(((BigInt((operand_stack).size) - 1).toInt).toInt)
}

val equation: String = "(5 + ((4 * 2) * (2 + 3)))"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(equation + " = " + String.valueOf(dijkstras_two_stack_algorithm(equation)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
