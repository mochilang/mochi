// Generated by Mochi v0.10.59 on 2025-08-07 00:51:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var current: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if (ch == sep) {
      res = res :+ current
      current = ""
    } else {
      current = current + ch
    }
    i = i + 1
  }
  res = res :+ current
  return res
}

def tokenize(s: String): ArrayBuffer[String] = {
  val parts = ArrayBuffer(s.split(" "): _*)
  var res: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((parts).size)) {
    val p: String = parts((i.toInt).toInt)
    if (p != "") {
      res = res :+ p
    }
    i = i + 1
  }
  return res
}

def is_digit(ch: String): Boolean = {
  return (ch.charAt(0) >= '0' && ch.charAt(0) <= '9').asInstanceOf[Boolean]
}

def is_operand(token: String): Boolean = {
  if (token == "") {
    return false
  }
  var i: BigInt = 0
  while (i < BigInt((token).size)) {
    val ch: String = token.slice((i).toInt, (i + 1).toInt)
    if (!is_digit(ch)) {
      return false
    }
    i = i + 1
  }
  return true
}

def to_int(token: String): BigInt = {
  var res: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((token).size)) {
    res = res * 10 + BigInt((token.slice((i).toInt, (i + 1).toInt)))
    i = i + 1
  }
  return res
}

def apply_op(op: String, a: Double, b: Double): Double = {
  if (op == "+") {
    return a + b
  }
  if (op == "-") {
    return a - b
  }
  if (op == "*") {
    return a * b
  }
  if (op == "/") {
    return a / b
  }
  return 0.0
}

def evaluate(expression: String): Double = {
  val tokens: ArrayBuffer[String] = tokenize(expression)
  var stack: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = BigInt((tokens).size) - 1
  while (i >= 0) {
    val token: String = tokens((i.toInt).toInt)
    if (token != "") {
      if (is_operand(token)) {
        stack = stack :+ (to_int(token)).toString.toDouble
      } else {
        val o1: Double = stack(((BigInt((stack).size) - 1).toInt).toInt)
        val o2: Double = stack(((BigInt((stack).size) - 2).toInt).toInt)
        stack = stack.slice((0).toInt, (BigInt((stack).size) - 2).toInt)
        val res: Double = apply_op(token, o1, o2)
        stack = stack :+ res
      }
    }
    i = i - 1
  }
  return stack((0.toInt).toInt)
}

def eval_rec(tokens: ArrayBuffer[String], pos: BigInt): ArrayBuffer[Double] = {
  val token: String = tokens((pos.toInt).toInt)
  val next: BigInt = pos + 1
  if (is_operand(token)) {
    return ArrayBuffer((to_int(token)).toString.toDouble, next.toString.toDouble)
  }
  val left: ArrayBuffer[Double] = eval_rec(tokens, next)
  val a: Double = left((0.toInt).toInt)
  val p1: BigInt = BigInt((left((1.toInt).toInt)).toString.toDouble.toInt)
  val right: ArrayBuffer[Double] = eval_rec(tokens, p1)
  val b: Double = right((0.toInt).toInt)
  val p2: Double = right((1.toInt).toInt)
  return ArrayBuffer((apply_op(token, a, b)).toString.toDouble, p2.toString.toDouble)
}

def evaluate_recursive(expression: String): Double = {
  val tokens: ArrayBuffer[String] = tokenize(expression)
  val res: ArrayBuffer[Double] = eval_rec(tokens, 0)
  return res((0.toInt).toInt)
}

val test_expression: String = "+ 9 * 2 6"

val test_expression2: String = "/ * 10 2 + 4 1 "

val test_expression3: String = "+ * 2 3 / 8 4"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(evaluate(test_expression)))
    println(String.valueOf(evaluate(test_expression2)))
    println(String.valueOf(evaluate_recursive(test_expression3)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
