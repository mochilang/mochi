// Generated by Mochi v0.10.59 on 2025-08-07 00:52:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var data: BigInt, var next: BigInt, var prev: BigInt)

case class Stack(var nodes: ArrayBuffer[Node], var head: BigInt)

case class PopResult(var stack: Stack, var value: BigInt, var ok: Boolean)

case class TopResult(var value: BigInt, var ok: Boolean)

def empty_stack(): Stack = {
  return Stack(ArrayBuffer(), 0 - 1)
}

def push(stack: Stack, value: BigInt): Stack = {
  var nodes: ArrayBuffer[Node] = stack.asInstanceOf[Stack].nodes
  val idx: BigInt = BigInt((nodes).size)
  var new_node: Node = Node(value, stack.asInstanceOf[Stack].head, 0 - 1)
  nodes = nodes :+ new_node
  if (stack.asInstanceOf[Stack].head != 0 - 1) {
    var head_node: Node = nodes((stack.asInstanceOf[Stack].head.toInt).toInt)
    head_node.asInstanceOf[Node].prev = idx
    nodes((stack.asInstanceOf[Stack].head).toInt) = head_node
  }
  return Stack(nodes, idx)
}

def pop(stack: Stack): PopResult = {
  if (stack.asInstanceOf[Stack].head == 0 - 1) {
    return PopResult(stack, 0, false)
  }
  var nodes: ArrayBuffer[Node] = stack.asInstanceOf[Stack].nodes
  var head_node: Node = nodes((stack.asInstanceOf[Stack].head.toInt).toInt)
  val value: BigInt = head_node.asInstanceOf[Node].data
  val next_idx: BigInt = head_node.asInstanceOf[Node].next
  if (next_idx != 0 - 1) {
    var next_node: Node = nodes((next_idx.toInt).toInt)
    next_node.asInstanceOf[Node].prev = 0 - 1
    nodes((next_idx).toInt) = next_node
  }
  val new_stack: Stack = Stack(nodes, next_idx)
  return PopResult(new_stack, value, true)
}

def top(stack: Stack): TopResult = {
  if (stack.asInstanceOf[Stack].head == 0 - 1) {
    return TopResult(0, false)
  }
  val node: Node = stack.asInstanceOf[Stack].nodes((stack.asInstanceOf[Stack].head.toInt).toInt)
  return TopResult(node.asInstanceOf[Node].data, true)
}

def size(stack: Stack): BigInt = {
  var count: BigInt = 0
  var idx: BigInt = stack.asInstanceOf[Stack].head
  while (idx != 0 - 1) {
    count = count + 1
    val node: Node = stack.asInstanceOf[Stack].nodes((idx.toInt).toInt)
    idx = node.asInstanceOf[Node].next
  }
  return count
}

def is_empty(stack: Stack): Boolean = {
  return stack.asInstanceOf[Stack].head == 0 - 1
}

def print_stack(stack: Stack): Any = {
  println("stack elements are:")
  var idx: BigInt = stack.asInstanceOf[Stack].head
  var s: String = ""
  while (idx != 0 - 1) {
    val node: Node = stack.asInstanceOf[Stack].nodes((idx.toInt).toInt)
    s = s + String.valueOf(node.asInstanceOf[Node].data) + "->"
    idx = node.asInstanceOf[Node].next
  }
  if (BigInt((s).size) > 0) {
    println(s)
  }
}

def main(): Any = {
  var stack: Stack = empty_stack()
  println("Stack operations using Doubly LinkedList")
  stack = push(stack, 4)
  stack = push(stack, 5)
  stack = push(stack, 6)
  stack = push(stack, 7)
  print_stack(stack)
  val t: TopResult = top(stack)
  if (t.ok) {
    println("Top element is " + String.valueOf(t.value))
  } else {
    println("Top element is None")
  }
  println("Size of the stack is " + String.valueOf(size(stack)))
  var p: PopResult = pop(stack)
  stack = p.asInstanceOf[PopResult].stack
  p = pop(stack)
  stack = p.asInstanceOf[PopResult].stack
  print_stack(stack)
  println("stack is empty: " + String.valueOf(is_empty(stack)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
