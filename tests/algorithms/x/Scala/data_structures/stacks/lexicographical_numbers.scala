// Generated by Mochi v0.10.59 on 2025-08-07 00:51:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def lexical_order(max_number: BigInt): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var stack: ArrayBuffer[BigInt] = ArrayBuffer(1)
  val _ct0 = new Breaks
  while (BigInt((stack).size) > 0) {
    _ct0.breakable {
      val idx: BigInt = BigInt((stack).size) - 1
      val num: BigInt = stack((idx.toInt).toInt)
      stack = stack.slice((0).toInt, (idx).toInt)
      if (num > max_number) {
        _ct0.break()
      }
      result = result :+ num
      if (num % 10 != 9) {
        stack = stack :+ num + 1
      }
      stack = stack :+ num * 10
    }
  }
  return result
}

def join_ints(xs: ArrayBuffer[BigInt]): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (i > 0) {
      res = res + " "
    }
    res = res + String.valueOf(xs((i.toInt).toInt))
    i = i + 1
  }
  return res
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(join_ints(lexical_order(13)))
    println(String.valueOf(lexical_order(1)))
    println(join_ints(lexical_order(20)))
    println(join_ints(lexical_order(25)))
    println(String.valueOf(lexical_order(12)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
