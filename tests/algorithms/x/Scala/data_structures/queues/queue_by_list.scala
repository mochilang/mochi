// Generated by Mochi v0.10.72 on 2025-08-24 22:26:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Queue(var entries: ArrayBuffer[BigInt])

case class GetResult(var queue: Queue, var value: BigInt)

def new_queue(items: ArrayBuffer[BigInt]): Queue = {
  return Queue(items)
}

def len_queue(q: Queue): BigInt = {
  return BigInt((q.entries).size)
}

def str_queue(q: Queue): String = {
  var s: String = "Queue(("
  var i: BigInt = BigInt(0)
  while (i < BigInt((q.entries).size)) {
    s = s + _str(q.entries.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    if (i < BigInt((q.entries).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "))"
  return s
}

def put(q: Queue, item: BigInt): Queue = {
  var e: ArrayBuffer[BigInt] = q.entries
  e = ({e += (item); e})
  return Queue(e)
}

def get(q: Queue): GetResult = {
  if (BigInt((q.entries).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Queue is empty"))
  }
  var value: BigInt = q.entries.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var new_entries: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(1)
  while (i < BigInt((q.entries).size)) {
    new_entries = (new_entries :+ (q.entries.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  return GetResult(Queue(new_entries), value)
}

def rotate(q: Queue, rotation: BigInt): Queue = {
  var e: ArrayBuffer[BigInt] = q.entries
  var r: BigInt = BigInt(0)
  while (r < rotation) {
    if (BigInt((e).size) > BigInt(0)) {
      var first: BigInt = e.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      var rest: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var i: BigInt = BigInt(1)
      while (i < BigInt((e).size)) {
        rest = (rest :+ (e.lift((i.toInt).toInt).getOrElse(BigInt(0))))
        i = i + BigInt(1)
      }
      rest = (rest :+ (first))
      e = rest
    }
    r = r + BigInt(1)
  }
  return Queue(e)
}

def get_front(q: Queue): BigInt = {
  return q.entries.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
}

var q: Queue = new_queue(ArrayBuffer[BigInt]())

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(len_queue(q)))
    q = put(q, BigInt(10))
    q = put(q, BigInt(20))
    q = put(q, BigInt(30))
    q = put(q, BigInt(40))
    println(_str(str_queue(q)))
    var res: GetResult = get(q)
    q = res.queue
    println(_str(res.value))
    println(_str(str_queue(q)))
    q = rotate(q, BigInt(2))
    println(_str(str_queue(q)))
    var front: BigInt = get_front(q)
    println(_str(front))
    println(_str(str_queue(q)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
