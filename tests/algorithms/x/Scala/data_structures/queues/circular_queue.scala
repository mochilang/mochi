// Generated by Mochi v0.10.72 on 2025-08-24 23:36:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class CircularQueue(var data: ArrayBuffer[BigInt], var front: BigInt, var rear: BigInt, var size: BigInt, var capacity: BigInt)

case class DequeueResult(var queue: CircularQueue, var value: BigInt)

def create_queue(capacity: BigInt): CircularQueue = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < capacity) {
    arr = ({arr += (BigInt(0)); arr})
    i = i + BigInt(1)
  }
  return CircularQueue(arr, BigInt(0), BigInt(0), BigInt(0), capacity)
}

def length(q: CircularQueue): BigInt = {
  return q.asInstanceOf[CircularQueue].size
}

def is_empty(q: CircularQueue): Boolean = {
  return q.asInstanceOf[CircularQueue].size == BigInt(0)
}

def front(q: CircularQueue): BigInt = {
  if (is_empty(q)) {
    return BigInt(0)
  }
  return q.asInstanceOf[CircularQueue].data.lift((q.asInstanceOf[CircularQueue].front.toInt).toInt).getOrElse(BigInt(0))
}

def enqueue(q: CircularQueue, value: BigInt): CircularQueue = {
  if (q.asInstanceOf[CircularQueue].size >= q.asInstanceOf[CircularQueue].capacity) {
    throw new RuntimeException(String.valueOf("QUEUE IS FULL"))
  }
  var arr: ArrayBuffer[BigInt] = q.asInstanceOf[CircularQueue].data
  arr((q.asInstanceOf[CircularQueue].rear).toInt) = value
  q.asInstanceOf[CircularQueue].data = arr
  q.asInstanceOf[CircularQueue].rear = (q.asInstanceOf[CircularQueue].rear + BigInt(1)) % q.asInstanceOf[CircularQueue].capacity
  q.asInstanceOf[CircularQueue].size = q.asInstanceOf[CircularQueue].size + BigInt(1)
  return q
}

def dequeue(q: CircularQueue): DequeueResult = {
  if (q.asInstanceOf[CircularQueue].size == BigInt(0)) {
    throw new RuntimeException(String.valueOf("UNDERFLOW"))
  }
  val value: BigInt = q.asInstanceOf[CircularQueue].data.lift((q.asInstanceOf[CircularQueue].front.toInt).toInt).getOrElse(BigInt(0))
  var arr2: ArrayBuffer[BigInt] = q.asInstanceOf[CircularQueue].data
  arr2((q.asInstanceOf[CircularQueue].front).toInt) = BigInt(0)
  q.asInstanceOf[CircularQueue].data = arr2
  q.asInstanceOf[CircularQueue].front = (q.asInstanceOf[CircularQueue].front + BigInt(1)) % q.asInstanceOf[CircularQueue].capacity
  q.asInstanceOf[CircularQueue].size = q.asInstanceOf[CircularQueue].size - BigInt(1)
  return DequeueResult(q, value)
}

def main(): Any = {
  var q: CircularQueue = create_queue(BigInt(5))
  println(_str(is_empty(q)))
  q = enqueue(q, BigInt(10))
  println(_str(is_empty(q)))
  q = enqueue(q, BigInt(20))
  q = enqueue(q, BigInt(30))
  println(_str(front(q)))
  var r: DequeueResult = dequeue(q)
  q = r.asInstanceOf[DequeueResult].queue
  println(_str(r.asInstanceOf[DequeueResult].value))
  println(_str(front(q)))
  println(_str(length(q)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
