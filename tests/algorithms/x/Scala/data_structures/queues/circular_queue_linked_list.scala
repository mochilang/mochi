// Generated by Mochi v0.10.72 on 2025-08-24 22:26:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class CircularQueue(var data: ArrayBuffer[String], var next: ArrayBuffer[BigInt], var prev: ArrayBuffer[BigInt], var front: BigInt, var rear: BigInt)

case class DequeueResult(var queue: CircularQueue, var value: String)

def create_queue(capacity: BigInt): CircularQueue = {
  var data: ArrayBuffer[String] = ArrayBuffer[String]()
  var next: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var prev: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < capacity) {
    data = ({data += (""); data})
    next = (next :+ ((i + BigInt(1)) % capacity))
    prev = (prev :+ ((i - BigInt(1) + capacity) % capacity))
    i = i + BigInt(1)
  }
  return CircularQueue(data, next, prev, BigInt(0), BigInt(0))
}

def is_empty(q: CircularQueue): Boolean = {
  return (q.asInstanceOf[CircularQueue].front == q.asInstanceOf[CircularQueue].rear && q.asInstanceOf[CircularQueue].data.lift((q.asInstanceOf[CircularQueue].front.toInt).toInt).getOrElse("") == "").asInstanceOf[Boolean]
}

def check_can_perform(q: CircularQueue): Any = {
  if (is_empty(q)) {
    throw new RuntimeException(String.valueOf("Empty Queue"))
  }
}

def check_is_full(q: CircularQueue): Any = {
  if (q.asInstanceOf[CircularQueue].next.lift((q.asInstanceOf[CircularQueue].rear.toInt).toInt).getOrElse(BigInt(0)) == q.asInstanceOf[CircularQueue].front) {
    throw new RuntimeException(String.valueOf("Full Queue"))
  }
}

def peek(q: CircularQueue): String = {
  check_can_perform(q)
  return q.asInstanceOf[CircularQueue].data.lift((q.asInstanceOf[CircularQueue].front.toInt).toInt).getOrElse("")
}

def enqueue(q: CircularQueue, value: String): CircularQueue = {
  check_is_full(q)
  if (!is_empty(q)) {
    q.asInstanceOf[CircularQueue].rear = q.asInstanceOf[CircularQueue].next.lift((q.asInstanceOf[CircularQueue].rear.toInt).toInt).getOrElse(BigInt(0))
  }
  var data: ArrayBuffer[String] = q.asInstanceOf[CircularQueue].data
  data((q.asInstanceOf[CircularQueue].rear).toInt) = value
  q.asInstanceOf[CircularQueue].data = data
  return q
}

def dequeue(q: CircularQueue): DequeueResult = {
  check_can_perform(q)
  var data: ArrayBuffer[String] = q.asInstanceOf[CircularQueue].data
  var `val`: String = data.lift((q.asInstanceOf[CircularQueue].front.toInt).toInt).getOrElse("")
  data((q.asInstanceOf[CircularQueue].front).toInt) = ""
  q.asInstanceOf[CircularQueue].data = data
  if (q.asInstanceOf[CircularQueue].front != q.asInstanceOf[CircularQueue].rear) {
    q.asInstanceOf[CircularQueue].front = q.asInstanceOf[CircularQueue].next.lift((q.asInstanceOf[CircularQueue].front.toInt).toInt).getOrElse(BigInt(0))
  }
  return DequeueResult(q, `val`)
}

def main(): Any = {
  var q: CircularQueue = create_queue(BigInt(3))
  println(_str(_str(is_empty(q))))
  q = enqueue(q, "a")
  q = enqueue(q, "b")
  println(_str(peek(q)))
  var res: DequeueResult = dequeue(q)
  q = res.asInstanceOf[DequeueResult].queue
  println(_str(res.asInstanceOf[DequeueResult].value))
  res = dequeue(q)
  q = res.asInstanceOf[DequeueResult].queue
  println(_str(res.asInstanceOf[DequeueResult].value))
  println(_str(_str(is_empty(q))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
