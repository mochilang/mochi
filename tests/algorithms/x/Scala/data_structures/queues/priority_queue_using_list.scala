// Generated by Mochi v0.10.72 on 2025-08-24 22:26:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class FixedPriorityQueue(var queues: ArrayBuffer[ArrayBuffer[BigInt]])

case class FPQDequeueResult(var queue: FixedPriorityQueue, var value: BigInt)

case class ElementPriorityQueue(var queue: ArrayBuffer[BigInt])

case class EPQDequeueResult(var queue: ElementPriorityQueue, var value: BigInt)

def panic(msg: String): Any = {
  println(_str(msg))
}

def fpq_new(): FixedPriorityQueue = {
  return FixedPriorityQueue(ArrayBuffer(ArrayBuffer(), ArrayBuffer(), ArrayBuffer()))
}

def fpq_enqueue(fpq: FixedPriorityQueue, priority: BigInt, data: BigInt): FixedPriorityQueue = {
  if ((priority < BigInt(0) || priority >= BigInt((fpq.asInstanceOf[FixedPriorityQueue].queues).size))) {
    throw new RuntimeException(String.valueOf("Valid priorities are 0, 1, and 2"))
    return fpq
  }
  if (BigInt((fpq.asInstanceOf[FixedPriorityQueue].queues.lift((priority.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) >= BigInt(100)) {
    throw new RuntimeException(String.valueOf("Maximum queue size is 100"))
    return fpq
  }
  var qs: ArrayBuffer[ArrayBuffer[BigInt]] = fpq.asInstanceOf[FixedPriorityQueue].queues
  qs((priority).toInt) = (qs.lift((priority.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) :+ (data))
  fpq.asInstanceOf[FixedPriorityQueue].queues = qs
  return fpq
}

def fpq_dequeue(fpq: FixedPriorityQueue): FPQDequeueResult = {
  var qs: ArrayBuffer[ArrayBuffer[BigInt]] = fpq.asInstanceOf[FixedPriorityQueue].queues
  var i: BigInt = BigInt(0)
  while (i < BigInt((qs).size)) {
    var q: ArrayBuffer[BigInt] = qs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    if (BigInt((q).size) > BigInt(0)) {
      var `val`: BigInt = q.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      var new_q: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var j: BigInt = BigInt(1)
      while (j < BigInt((q).size)) {
        new_q = (new_q :+ (q.lift((j.toInt).toInt).getOrElse(BigInt(0))))
        j = j + BigInt(1)
      }
      qs((i).toInt) = new_q
      fpq.asInstanceOf[FixedPriorityQueue].queues = qs
      return FPQDequeueResult(fpq, `val`)
    }
    i = i + BigInt(1)
  }
  throw new RuntimeException(String.valueOf("All queues are empty"))
  return FPQDequeueResult(fpq, BigInt(0))
}

def fpq_to_string(fpq: FixedPriorityQueue): String = {
  var lines: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((fpq.asInstanceOf[FixedPriorityQueue].queues).size)) {
    var q_str: String = "["
    var q: ArrayBuffer[BigInt] = fpq.asInstanceOf[FixedPriorityQueue].queues.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var j: BigInt = BigInt(0)
    while (j < BigInt((q).size)) {
      if (j > BigInt(0)) {
        q_str = q_str + ", "
      }
      q_str = q_str + _str(q.lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
    q_str = q_str + "]"
    lines = (lines :+ ("Priority " + _str(i) + ": " + q_str))
    i = i + BigInt(1)
  }
  var res: String = ""
  i = BigInt(0)
  while (i < BigInt((lines).size)) {
    if (i > BigInt(0)) {
      res = res + "\n"
    }
    res = res + lines.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return res
}

def epq_new(): ElementPriorityQueue = {
  return ElementPriorityQueue(ArrayBuffer())
}

def epq_enqueue(epq: ElementPriorityQueue, data: BigInt): ElementPriorityQueue = {
  if (BigInt((epq.queue).size) >= BigInt(100)) {
    throw new RuntimeException(String.valueOf("Maximum queue size is 100"))
    return epq
  }
  epq.queue = (epq.queue :+ (data))
  return epq
}

def epq_dequeue(epq: ElementPriorityQueue): EPQDequeueResult = {
  if (BigInt((epq.queue).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("The queue is empty"))
    return EPQDequeueResult(epq, BigInt(0))
  }
  var min_val: BigInt = epq.queue.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(1)
  while (i < BigInt((epq.queue).size)) {
    var v: BigInt = epq.queue.lift((i.toInt).toInt).getOrElse(BigInt(0))
    if (v < min_val) {
      min_val = v
      idx = i
    }
    i = i + BigInt(1)
  }
  var new_q: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((epq.queue).size)) {
    if (i != idx) {
      new_q = (new_q :+ (epq.queue.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    }
    i = i + BigInt(1)
  }
  epq.queue = new_q
  return EPQDequeueResult(epq, min_val)
}

def epq_to_string(epq: ElementPriorityQueue): String = {
  return (_str(epq.queue)).toString
}

def fixed_priority_queue(): Any = {
  var fpq: FixedPriorityQueue = fpq_new()
  fpq = fpq_enqueue(fpq, BigInt(0), BigInt(10))
  fpq = fpq_enqueue(fpq, BigInt(1), BigInt(70))
  fpq = fpq_enqueue(fpq, BigInt(0), BigInt(100))
  fpq = fpq_enqueue(fpq, BigInt(2), BigInt(1))
  fpq = fpq_enqueue(fpq, BigInt(2), BigInt(5))
  fpq = fpq_enqueue(fpq, BigInt(1), BigInt(7))
  fpq = fpq_enqueue(fpq, BigInt(2), BigInt(4))
  fpq = fpq_enqueue(fpq, BigInt(1), BigInt(64))
  fpq = fpq_enqueue(fpq, BigInt(0), BigInt(128))
  println(_str(fpq_to_string(fpq)))
  var res: FPQDequeueResult = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  println(_str(fpq_to_string(fpq)))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
  res = fpq_dequeue(fpq)
  fpq = res.queue
  println(_str(res.value))
}

def element_priority_queue(): Any = {
  var epq: ElementPriorityQueue = epq_new()
  epq = epq_enqueue(epq, BigInt(10))
  epq = epq_enqueue(epq, BigInt(70))
  epq = epq_enqueue(epq, BigInt(100))
  epq = epq_enqueue(epq, BigInt(1))
  epq = epq_enqueue(epq, BigInt(5))
  epq = epq_enqueue(epq, BigInt(7))
  epq = epq_enqueue(epq, BigInt(4))
  epq = epq_enqueue(epq, BigInt(64))
  epq = epq_enqueue(epq, BigInt(128))
  println(_str(epq_to_string(epq)))
  var res: EPQDequeueResult = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  println(_str(epq_to_string(epq)))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
  res = epq_dequeue(epq)
  epq = res.queue
  println(_str(res.value))
}

def main(): Any = {
  fixed_priority_queue()
  element_priority_queue()
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
