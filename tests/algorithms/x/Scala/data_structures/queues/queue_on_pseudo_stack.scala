// Generated by Mochi v0.10.72 on 2025-08-24 22:27:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Queue(var stack: ArrayBuffer[BigInt], var length: BigInt)

case class GetResult(var queue: Queue, var value: BigInt)

case class FrontResult(var queue: Queue, var value: BigInt)

def empty_queue(): Queue = {
  return Queue(ArrayBuffer(), BigInt(0))
}

def put(q: Queue, item: BigInt): Queue = {
  var s: ArrayBuffer[BigInt] = (q.asInstanceOf[Queue].stack :+ (item))
  return Queue(s, q.asInstanceOf[Queue].length + BigInt(1))
}

def drop_first(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(1)
  while (i < BigInt((xs).size)) {
    res = (res :+ (xs.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  return res
}

def drop_last(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size) - BigInt(1)) {
    res = (res :+ (xs.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  return res
}

def rotate(q: Queue, rotation: BigInt): Queue = {
  var s: ArrayBuffer[BigInt] = q.asInstanceOf[Queue].stack
  var i: BigInt = BigInt(0)
  while (i < rotation && BigInt((s).size) > BigInt(0)) {
    var temp: BigInt = s.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    s = drop_first(s)
    s = ({s += (temp); s})
    i = i + BigInt(1)
  }
  return Queue(s, q.asInstanceOf[Queue].length)
}

def get(q: Queue): GetResult = {
  if (q.asInstanceOf[Queue].length == BigInt(0)) {
    throw new RuntimeException(String.valueOf("queue empty"))
  }
  var q1: Queue = rotate(q, BigInt(1))
  var v: BigInt = q1.asInstanceOf[Queue].stack.lift(((q1.asInstanceOf[Queue].length - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
  var s: ArrayBuffer[BigInt] = drop_last(q1.asInstanceOf[Queue].stack)
  var q2: Queue = Queue(s, q1.asInstanceOf[Queue].length)
  q2 = rotate(q2, q2.asInstanceOf[Queue].length - BigInt(1))
  q2 = Queue(q2.asInstanceOf[Queue].stack, q2.asInstanceOf[Queue].length - BigInt(1))
  return GetResult(q2, v)
}

def front(q: Queue): FrontResult = {
  var r: GetResult = get(q)
  var q2: Queue = put(r.queue, r.value)
  q2 = rotate(q2, q2.asInstanceOf[Queue].length - BigInt(1))
  return FrontResult(q2, r.value)
}

def size(q: Queue): BigInt = {
  return q.asInstanceOf[Queue].length
}

def to_string(q: Queue): String = {
  var s: String = "<"
  if (q.asInstanceOf[Queue].length > BigInt(0)) {
    s = s + _str(q.asInstanceOf[Queue].stack.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
    var i: BigInt = BigInt(1)
    while (i < q.asInstanceOf[Queue].length) {
      s = s + ", " + _str(q.asInstanceOf[Queue].stack.lift((i.toInt).toInt).getOrElse(BigInt(0)))
      i = i + BigInt(1)
    }
  }
  s = s + ">"
  return s
}

def main(): Any = {
  var q: Queue = empty_queue()
  q = put(q, BigInt(1))
  q = put(q, BigInt(2))
  q = put(q, BigInt(3))
  println(_str(to_string(q)))
  var g: GetResult = get(q)
  q = g.queue
  println(_str(g.value))
  println(_str(to_string(q)))
  var f: FrontResult = front(q)
  q = f.queue
  println(_str(f.value))
  println(_str(to_string(q)))
  println(_str(size(q)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
