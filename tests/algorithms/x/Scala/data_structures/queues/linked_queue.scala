// Generated by Mochi v0.10.72 on 2025-08-24 22:26:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Node(var data: String, var next: BigInt)

case class LinkedQueue(var nodes: ArrayBuffer[Node], var front: BigInt, var rear: BigInt)

def new_queue(): LinkedQueue = {
  return LinkedQueue(ArrayBuffer(), BigInt(-1), BigInt(-1))
}

def is_empty(q: LinkedQueue): Boolean = {
  return q.asInstanceOf[LinkedQueue].front == BigInt(-1)
}

def put(q: LinkedQueue, item: String): Any = {
  var node: Node = Node(item, BigInt(-1))
  q.asInstanceOf[LinkedQueue].nodes = (q.asInstanceOf[LinkedQueue].nodes :+ (node))
  var idx: BigInt = BigInt((q.asInstanceOf[LinkedQueue].nodes).size) - BigInt(1)
  if (q.asInstanceOf[LinkedQueue].front == BigInt(-1)) {
    q.asInstanceOf[LinkedQueue].front = idx
    q.asInstanceOf[LinkedQueue].rear = idx
  } else {
    var nodes: ArrayBuffer[Node] = q.asInstanceOf[LinkedQueue].nodes
    nodes.lift((q.asInstanceOf[LinkedQueue].rear).toInt).getOrElse(null).next = idx
    q.asInstanceOf[LinkedQueue].nodes = nodes
    q.asInstanceOf[LinkedQueue].rear = idx
  }
}

def get(q: LinkedQueue): String = {
  if (is_empty(q)) {
    throw new RuntimeException(String.valueOf("dequeue from empty queue"))
  }
  var idx: BigInt = q.asInstanceOf[LinkedQueue].front
  var node: Node = q.asInstanceOf[LinkedQueue].nodes.lift((idx.toInt).toInt).getOrElse(null)
  q.asInstanceOf[LinkedQueue].front = node.asInstanceOf[Node].next
  if (q.asInstanceOf[LinkedQueue].front == BigInt(-1)) {
    q.asInstanceOf[LinkedQueue].rear = BigInt(-1)
  }
  return node.asInstanceOf[Node].data
}

def length(q: LinkedQueue): BigInt = {
  var count: BigInt = BigInt(0)
  var idx: BigInt = q.asInstanceOf[LinkedQueue].front
  while (idx != BigInt(-1)) {
    count = count + BigInt(1)
    idx = q.asInstanceOf[LinkedQueue].nodes.lift((idx.toInt).toInt).getOrElse(null).next
  }
  return count
}

def to_string(q: LinkedQueue): String = {
  var res: String = ""
  var idx: BigInt = q.asInstanceOf[LinkedQueue].front
  var first: Boolean = true
  while (idx != BigInt(-1)) {
    var node: Node = q.asInstanceOf[LinkedQueue].nodes.lift((idx.toInt).toInt).getOrElse(null)
    if (first) {
      res = node.asInstanceOf[Node].data
      first = false
    } else {
      res = res + " <- " + node.asInstanceOf[Node].data
    }
    idx = node.asInstanceOf[Node].next
  }
  return res
}

def clear(q: LinkedQueue): Any = {
  q.asInstanceOf[LinkedQueue].nodes = ArrayBuffer[Node]()
  q.asInstanceOf[LinkedQueue].front = BigInt(-1)
  q.asInstanceOf[LinkedQueue].rear = BigInt(-1)
}

var queue: LinkedQueue = new_queue()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(is_empty(queue))))
    put(queue, "5")
    put(queue, "9")
    put(queue, "python")
    println(_str(_str(is_empty(queue))))
    println(_str(get(queue)))
    put(queue, "algorithms")
    println(_str(get(queue)))
    println(_str(get(queue)))
    println(_str(get(queue)))
    println(_str(_str(is_empty(queue))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
