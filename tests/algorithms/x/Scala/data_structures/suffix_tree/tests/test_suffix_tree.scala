// Generated by Mochi v0.10.59 on 2025-08-07 00:52:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SuffixTree(var text: String)

def suffix_tree_new(text: String): SuffixTree = {
  return SuffixTree(text)
}

def suffix_tree_search(st: SuffixTree, pattern: String): Boolean = {
  if (BigInt((pattern).size) == 0) {
    return true
  }
  var i: BigInt = 0
  val n: BigInt = BigInt((st.text).length)
  val m: BigInt = BigInt((pattern).size)
  val _br0 = new Breaks
  _br0.breakable {
    while (i <= n - m) {
      var j: BigInt = 0
      var found: Boolean = true
      val _br1 = new Breaks
      _br1.breakable {
        while (j < m) {
          if (st.text.slice(((i + j).toInt).toInt, ((i + j).toInt).toInt + 1) != pattern.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
            found = false
            _br1.break()
          }
          j = j + 1
        }
      }
      if (found) {
        return true
      }
      i = i + 1
    }
  }
  return false
}

val text: String = "banana"

val st: SuffixTree = suffix_tree_new(text)

val patterns_exist: ArrayBuffer[String] = ArrayBuffer("ana", "ban", "na")

val patterns_none: ArrayBuffer[String] = ArrayBuffer("xyz", "apple", "cat")

val substrings: ArrayBuffer[String] = ArrayBuffer("ban", "ana", "a", "na")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var i: BigInt = 0
    while (i < BigInt((patterns_exist).size)) {
      println(String.valueOf(suffix_tree_search(st, patterns_exist((i.toInt).toInt))))
      i = i + 1
    }
    i = 0
    while (i < BigInt((patterns_none).size)) {
      println(String.valueOf(suffix_tree_search(st, patterns_none((i.toInt).toInt))))
      i = i + 1
    }
    println(String.valueOf(suffix_tree_search(st, "")))
    println(String.valueOf(suffix_tree_search(st, text)))
    i = 0
    while (i < BigInt((substrings).size)) {
      println(String.valueOf(suffix_tree_search(st, substrings((i.toInt).toInt))))
      i = i + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
