// Generated by Mochi v0.10.72 on 2025-08-24 22:29:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class SuffixTreeNode(var children: scala.collection.mutable.Map[String,BigInt], var is_end_of_string: Boolean, var start: BigInt, var end: BigInt, var suffix_link: BigInt)

def new_suffix_tree_node(children: scala.collection.mutable.Map[String,BigInt], is_end_of_string: Boolean, start: BigInt, end: BigInt, suffix_link: BigInt): SuffixTreeNode = {
  return SuffixTreeNode(children, is_end_of_string, start, end, suffix_link)
}

def empty_suffix_tree_node(): SuffixTreeNode = {
  return new_suffix_tree_node((scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]], false, BigInt(-1), BigInt(-1), BigInt(-1))
}

def has_key(m: scala.collection.mutable.Map[String,BigInt], k: String): Boolean = {
  for (key <- (m.keys.toSeq.sorted)) {
    if (key == k) {
      return true
    }
  }
  return false
}

var root: SuffixTreeNode = new_suffix_tree_node((scala.collection.mutable.Map("a" -> (BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[String,BigInt]], false, BigInt(-1), BigInt(-1), BigInt(-1))

var leaf: SuffixTreeNode = new_suffix_tree_node((scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]], true, BigInt(0), BigInt(2), BigInt(0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var nodes: ArrayBuffer[SuffixTreeNode] = ArrayBuffer(root, leaf)
    var root_check: SuffixTreeNode = nodes.lift((BigInt(0).toInt).toInt).getOrElse(null)
    var leaf_check: SuffixTreeNode = nodes.lift((BigInt(1).toInt).toInt).getOrElse(null)
    println(_str(_str(has_key(root_check.children, "a"))))
    println(_str(_str(leaf_check.is_end_of_string)))
    println(_str(_str(leaf_check.start)))
    println(_str(_str(leaf_check.end)))
    println(_str(_str(leaf_check.suffix_link)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
