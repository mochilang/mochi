// Generated by Mochi v0.10.59 on 2025-08-07 00:52:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SuffixTree(var text: String)

def new_suffix_tree(text: String): SuffixTree = {
  return SuffixTree(text)
}

def search(tree: SuffixTree, pattern: String): Boolean = {
  val n: BigInt = BigInt((tree.asInstanceOf[SuffixTree].text).length)
  val m: BigInt = BigInt((pattern).size)
  if (m == 0) {
    return true
  }
  if (m > n) {
    return false
  }
  var i: BigInt = 0
  while (i <= n - m) {
    if (tree.asInstanceOf[SuffixTree].text.slice((i).toInt, (i + m).toInt) == pattern) {
      return true
    }
    i = i + 1
  }
  return false
}

def main(): Any = {
  val text: String = "monkey banana"
  val suffix_tree: SuffixTree = new_suffix_tree(text)
  val patterns: ArrayBuffer[String] = ArrayBuffer("ana", "ban", "na", "xyz", "mon")
  var i: BigInt = 0
  while (i < BigInt((patterns).size)) {
    val pattern: String = patterns((i.toInt).toInt)
    val found: Boolean = search(suffix_tree, pattern)
    println("Pattern '" + pattern + "' found: " + String.valueOf(found))
    i = i + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
