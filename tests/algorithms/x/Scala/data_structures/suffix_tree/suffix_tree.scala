// Generated by Mochi v0.10.59 on 2025-08-07 00:52:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var children: scala.collection.mutable.Map[String,BigInt], var is_end_of_string: Boolean, var start: BigInt, var end: BigInt)

case class SuffixTree(var text: String, var nodes: ArrayBuffer[Node])

def new_node(): Node = {
  return Node(scala.collection.mutable.Map(), false, -1, -1)
}

def has_key(m: scala.collection.mutable.Map[String,BigInt], k: String): Boolean = {
  for (key <- m.keys) {
    if (key == k) {
      return true
    }
  }
  return false
}

def add_suffix(tree: SuffixTree, suffix: String, index: BigInt): SuffixTree = {
  var nodes: ArrayBuffer[Node] = tree.asInstanceOf[SuffixTree].nodes
  var node_idx: BigInt = 0
  var j: BigInt = 0
  while (j < BigInt((suffix).size)) {
    val ch = suffix.slice((j.toInt).toInt, (j.toInt).toInt + 1)
    var node: Node = nodes((node_idx.toInt).toInt)
    var children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[Node].children
    if (!has_key(children, ch)) {
      nodes = nodes :+ new_node()
      val new_idx: BigInt = BigInt((nodes).size) - 1
      children.update(ch, new_idx)
    }
    node.asInstanceOf[Node].children = children
    nodes((node_idx).toInt) = node
    node_idx = children.getOrElse(ch.toString, null).asInstanceOf[BigInt]
    j = j + 1
  }
  var node: Node = nodes((node_idx.toInt).toInt)
  node.asInstanceOf[Node].is_end_of_string = true
  node.asInstanceOf[Node].start = index
  node.asInstanceOf[Node].end = index + BigInt((suffix).size) - 1
  nodes((node_idx).toInt) = node
  tree.asInstanceOf[SuffixTree].nodes = nodes
  return tree
}

def build_suffix_tree(tree: SuffixTree): SuffixTree = {
  val text: String = tree.asInstanceOf[SuffixTree].text
  val n: BigInt = BigInt((text).size)
  var i: BigInt = 0
  var t: SuffixTree = tree
  while (i < n) {
    var suffix: String = ""
    var k: BigInt = i
    while (k < n) {
      suffix = suffix + text.slice((k.toInt).toInt, (k.toInt).toInt + 1)
      k = k + 1
    }
    t = add_suffix(t, suffix, i)
    i = i + 1
  }
  return t
}

def new_suffix_tree(text: String): SuffixTree = {
  var tree: SuffixTree = SuffixTree(text, ArrayBuffer())
  tree.asInstanceOf[SuffixTree].nodes = tree.asInstanceOf[SuffixTree].nodes :+ new_node()
  tree = build_suffix_tree(tree)
  return tree
}

def search(tree: SuffixTree, pattern: String): Boolean = {
  var node_idx: BigInt = 0
  var i: BigInt = 0
  val nodes: ArrayBuffer[Node] = tree.asInstanceOf[SuffixTree].nodes
  while (i < BigInt((pattern).size)) {
    val ch = pattern.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val node: Node = nodes((node_idx.toInt).toInt)
    val children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[Node].children
    if (!has_key(children, ch)) {
      return false
    }
    node_idx = children.getOrElse(ch.toString, null).asInstanceOf[BigInt]
    i = i + 1
  }
  return true
}

val st: SuffixTree = new_suffix_tree("bananas")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(search(st, "ana")))
    println(String.valueOf(search(st, "apple")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
