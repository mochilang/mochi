// Generated by Mochi v0.10.72 on 2025-08-24 23:33:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class KDNode(var point: ArrayBuffer[Double], var left: BigInt, var right: BigInt)

case class SearchResult(var point: ArrayBuffer[Double], var distance: Double, var nodes_visited: BigInt)

def square_distance(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var i: BigInt = BigInt(0)
  var total: Double = 0.0
  while (i < BigInt((a).size)) {
    val diff: Double = a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0)
    total = total + diff * diff
    i = i + BigInt(1)
  }
  return total
}

def search(nodes: ArrayBuffer[KDNode], index: BigInt, query_point: ArrayBuffer[Double], depth: BigInt, best: SearchResult): SearchResult = {
  if (index == BigInt(-1)) {
    return best
  }
  var result: SearchResult = best
  result.asInstanceOf[SearchResult].nodes_visited = result.asInstanceOf[SearchResult].nodes_visited + BigInt(1)
  val node: KDNode = nodes.lift((index.toInt).toInt).getOrElse(null)
  val current_point: ArrayBuffer[Double] = node.point
  val current_dist: Double = square_distance(query_point, current_point)
  if ((BigInt((result.point).size) == BigInt(0) || current_dist < result.asInstanceOf[SearchResult].distance)) {
    result.point = current_point
    result.asInstanceOf[SearchResult].distance = current_dist
  }
  val k: BigInt = BigInt((query_point).size)
  val axis: BigInt = depth % k
  var nearer: BigInt = node.asInstanceOf[KDNode].left
  var further: BigInt = node.asInstanceOf[KDNode].right
  if (query_point.lift((axis.toInt).toInt).getOrElse(0.0) > current_point.lift((axis.toInt).toInt).getOrElse(0.0)) {
    nearer = node.asInstanceOf[KDNode].right
    further = node.asInstanceOf[KDNode].left
  }
  result = search(nodes, nearer, query_point, depth + BigInt(1), result)
  val diff: Double = query_point.lift((axis.toInt).toInt).getOrElse(0.0) - current_point.lift((axis.toInt).toInt).getOrElse(0.0)
  if (diff * diff < result.asInstanceOf[SearchResult].distance) {
    result = search(nodes, further, query_point, depth + BigInt(1), result)
  }
  return result
}

def nearest_neighbour_search(nodes: ArrayBuffer[KDNode], root: BigInt, query_point: ArrayBuffer[Double]): SearchResult = {
  val initial: SearchResult = SearchResult(ArrayBuffer(), 1e+30, BigInt(0))
  return search(nodes, root, query_point, BigInt(0), initial)
}

val nodes: ArrayBuffer[KDNode] = ArrayBuffer(KDNode(ArrayBuffer(9.0, 1.0), BigInt(1), BigInt(4)), KDNode(ArrayBuffer(2.0, 7.0), BigInt(2), BigInt(3)), KDNode(ArrayBuffer(3.0, 6.0), BigInt(-1), BigInt(-1)), KDNode(ArrayBuffer(6.0, 12.0), BigInt(-1), BigInt(-1)), KDNode(ArrayBuffer(17.0, 15.0), BigInt(5), BigInt(6)), KDNode(ArrayBuffer(13.0, 15.0), BigInt(-1), BigInt(-1)), KDNode(ArrayBuffer(10.0, 19.0), BigInt(-1), BigInt(-1)))

val queries: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(9.0, 2.0), ArrayBuffer(12.0, 15.0), ArrayBuffer(1.0, 3.0))

var q: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (q < BigInt((queries).size)) {
      val res: SearchResult = nearest_neighbour_search(nodes, BigInt(0), queries.lift((q.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
      println(_str(_str(res.point) + " " + _str(res.asInstanceOf[SearchResult].distance) + " " + _str(res.asInstanceOf[SearchResult].nodes_visited) + "\n"))
      q = q + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
