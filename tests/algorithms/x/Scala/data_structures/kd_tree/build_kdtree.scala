// Generated by Mochi v0.10.72 on 2025-08-24 23:32:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class KDNode(var point: ArrayBuffer[Double], var left: BigInt, var right: BigInt)

def sort_points(points: ArrayBuffer[ArrayBuffer[Double]], axis: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var arr: ArrayBuffer[ArrayBuffer[Double]] = points
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((arr).size) - BigInt(1)) {
      if (arr.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((axis.toInt).toInt).getOrElse(0.0) > arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((axis.toInt).toInt).getOrElse(0.0)) {
        val tmp: ArrayBuffer[Double] = arr.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]())
        arr((j).toInt) = arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Double]())
        arr((j + BigInt(1)).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def build_kdtree(points: ArrayBuffer[ArrayBuffer[Double]], depth: BigInt): BigInt = {
  if (BigInt((points).size) == BigInt(0)) {
    return BigInt(-1)
  }
  val k: BigInt = BigInt((points.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  val axis: BigInt = depth % k
  val sorted: ArrayBuffer[ArrayBuffer[Double]] = sort_points(points, axis)
  val median_idx: BigInt = BigInt((sorted).size) / BigInt(2)
  val left_points: ArrayBuffer[ArrayBuffer[Double]] = sorted.slice((BigInt(0)).toInt, (median_idx).toInt)
  val right_points: ArrayBuffer[ArrayBuffer[Double]] = sorted.slice((median_idx + BigInt(1)).toInt, (BigInt((sorted).size)).toInt)
  var idx: BigInt = BigInt((tree).size)
  tree = (tree :+ (KDNode(sorted.lift((median_idx.toInt).toInt).getOrElse(ArrayBuffer[Double]()), BigInt(-1), BigInt(-1))))
  val left_idx: BigInt = build_kdtree(left_points, depth + BigInt(1))
  val right_idx: BigInt = build_kdtree(right_points, depth + BigInt(1))
  var node: KDNode = tree.lift((idx.toInt).toInt).getOrElse(null)
  node.asInstanceOf[KDNode].left = left_idx
  node.asInstanceOf[KDNode].right = right_idx
  tree((idx).toInt) = node
  return idx
}

var tree: ArrayBuffer[KDNode] = ArrayBuffer[KDNode]()

val pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 3.0), ArrayBuffer(5.0, 4.0), ArrayBuffer(9.0, 6.0), ArrayBuffer(4.0, 7.0), ArrayBuffer(8.0, 1.0), ArrayBuffer(7.0, 2.0))

val root: BigInt = build_kdtree(pts, BigInt(0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(tree)))
    println(_str(root))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
