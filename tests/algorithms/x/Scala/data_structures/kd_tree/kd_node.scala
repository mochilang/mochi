// Generated by Mochi v0.10.72 on 2025-08-24 23:33:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class KDNode(var point: ArrayBuffer[Double], var left: BigInt, var right: BigInt)

def make_kd_node(point: ArrayBuffer[Double], left: BigInt, right: BigInt): KDNode = {
  return KDNode(point, left, right)
}

var nodes: ArrayBuffer[KDNode] = ArrayBuffer[KDNode]()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    nodes = (nodes :+ (make_kd_node(ArrayBuffer(2.0, 3.0), BigInt(1), BigInt(2))))
    nodes = (nodes :+ (make_kd_node(ArrayBuffer(1.0, 5.0), BigInt(-1), BigInt(-1))))
    nodes = (nodes :+ (make_kd_node(ArrayBuffer(4.0, 2.0), BigInt(-1), BigInt(-1))))
    val root: KDNode = nodes.lift((BigInt(0).toInt).toInt).getOrElse(null)
    val left_child: KDNode = nodes.lift((BigInt(1).toInt).toInt).getOrElse(null)
    val right_child: KDNode = nodes.lift((BigInt(2).toInt).toInt).getOrElse(null)
    println(_str(_str(root.point)))
    println(_str(_str(root.left)))
    println(_str(_str(root.right)))
    println(_str(_str(left_child.point)))
    println(_str(_str(right_child.point)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
