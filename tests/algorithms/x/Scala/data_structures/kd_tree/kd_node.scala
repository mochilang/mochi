// Generated by Mochi v0.10.59 on 2025-08-07 00:47:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class KDNode(var point: ArrayBuffer[Double], var left: BigInt, var right: BigInt)

def make_kd_node(point: ArrayBuffer[Double], left: BigInt, right: BigInt): KDNode = {
  return KDNode(point, left, right)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var nodes: ArrayBuffer[KDNode] = ArrayBuffer()
    nodes = nodes :+ make_kd_node(ArrayBuffer(2.0, 3.0), 1, 2)
    nodes = nodes :+ make_kd_node(ArrayBuffer(1.0, 5.0), -1, -1)
    nodes = nodes :+ make_kd_node(ArrayBuffer(4.0, 2.0), -1, -1)
    val root: KDNode = nodes((0.toInt).toInt)
    val left_child: KDNode = nodes((1.toInt).toInt)
    val right_child: KDNode = nodes((2.toInt).toInt)
    println(String.valueOf(root.point))
    println(String.valueOf(root.left))
    println(String.valueOf(root.right))
    println(String.valueOf(left_child.point))
    println(String.valueOf(right_child.point))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
