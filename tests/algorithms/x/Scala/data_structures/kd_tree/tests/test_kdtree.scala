// Generated by Mochi v0.10.72 on 2025-08-24 23:33:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def rand_float(): Double = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed.toDouble / 2.147483648e+09
}

def hypercube_points(num_points: BigInt, cube_size: Double, num_dimensions: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < num_points) {
    var p: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < num_dimensions) {
      val v: Double = cube_size * rand_float()
      p = (p :+ (v))
      j = j + BigInt(1)
    }
    pts = (pts :+ (p))
    i = i + BigInt(1)
  }
  return pts
}

def build_kdtree(points: ArrayBuffer[ArrayBuffer[Double]], depth: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  return points
}

def distance_sq(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    val d: Double = a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0)
    sum = sum + d * d
    i = i + BigInt(1)
  }
  return sum
}

def nearest_neighbour_search(points: ArrayBuffer[ArrayBuffer[Double]], query: ArrayBuffer[Double]): scala.collection.mutable.Map[String,Double] = {
  if (BigInt((points).size) == BigInt(0)) {
    return (scala.collection.mutable.Map("index" -> (-1.0), "dist" -> (INF), "visited" -> (0.0))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  }
  var nearest_idx: BigInt = BigInt(0)
  var nearest_dist: Double = INF
  var visited: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((points).size)) {
    val d: Double = distance_sq(query, points.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
    visited = visited + BigInt(1)
    if (d < nearest_dist) {
      nearest_dist = d
      nearest_idx = i
    }
    i = i + BigInt(1)
  }
  return (scala.collection.mutable.Map("index" -> (nearest_idx.toString.toDouble), "dist" -> (nearest_dist), "visited" -> (visited.toString.toDouble))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
}

def test_build_cases(): Any = {
  val empty_pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  val tree0: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(empty_pts, BigInt(0))
  if (BigInt((tree0).size) == BigInt(0)) {
    println(_str("case1 true"))
  } else {
    println(_str("case1 false"))
  }
  val pts1: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(BigInt(10), 10.0, BigInt(2))
  val tree1: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(pts1, BigInt(2))
  if ((BigInt((tree1).size) > BigInt(0) && BigInt((tree1.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(2))) {
    println(_str("case2 true"))
  } else {
    println(_str("case2 false"))
  }
  val pts2: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(BigInt(10), 10.0, BigInt(3))
  val tree2: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(pts2, BigInt(-2))
  if ((BigInt((tree2).size) > BigInt(0) && BigInt((tree2.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(3))) {
    println(_str("case3 true"))
  } else {
    println(_str("case3 false"))
  }
}

def test_search(): Any = {
  val pts: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(BigInt(10), 10.0, BigInt(2))
  val tree: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(pts, BigInt(0))
  val qp: ArrayBuffer[Double] = hypercube_points(BigInt(1), 10.0, BigInt(2)).lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())
  val res: scala.collection.mutable.Map[String,Double] = nearest_neighbour_search(tree, qp)
  if (((res.getOrElse("index", 0.0).asInstanceOf[Double] != -1.0 && res.getOrElse("dist", 0.0).asInstanceOf[Double] >= 0.0).asInstanceOf[Boolean] && res.getOrElse("visited", 0.0).asInstanceOf[Double] > 0.0)) {
    println(_str("search true"))
  } else {
    println(_str("search false"))
  }
}

def test_edge(): Any = {
  val empty_pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  val tree: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(empty_pts, BigInt(0))
  val query: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0)
  val res: scala.collection.mutable.Map[String,Double] = nearest_neighbour_search(tree, query)
  if (((res.getOrElse("index", 0.0).asInstanceOf[Double] == -1.0 && res.getOrElse("dist", 0.0).asInstanceOf[Double] > 1e+08).asInstanceOf[Boolean] && res.getOrElse("visited", 0.0).asInstanceOf[Double] == 0.0)) {
    println(_str("edge true"))
  } else {
    println(_str("edge false"))
  }
}

def main(): Any = {
  seed = BigInt(1)
  test_build_cases()
  test_search()
  test_edge()
}

val INF: Double = 1e+09

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
