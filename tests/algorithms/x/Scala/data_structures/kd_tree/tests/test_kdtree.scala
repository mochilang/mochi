// Generated by Mochi v0.10.59 on 2025-08-07 00:47:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand_float(): Double = {
  seed = (seed * 1103515245 + 12345) % BigInt("2147483648")
  return seed.toString.toDouble / 2147483648.0
}

def hypercube_points(num_points: BigInt, cube_size: Double, num_dimensions: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < num_points) {
    var p: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < num_dimensions) {
      val v: Double = cube_size * rand_float()
      p = p :+ v
      j = j + 1
    }
    pts = pts :+ p
    i = i + 1
  }
  return pts
}

def build_kdtree(points: ArrayBuffer[ArrayBuffer[Double]], depth: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  return points
}

def distance_sq(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = 0
  while (i < BigInt((a).size)) {
    val d: Double = a((i.toInt).toInt) - b((i.toInt).toInt)
    sum = sum + d * d
    i = i + 1
  }
  return sum
}

def nearest_neighbour_search(points: ArrayBuffer[ArrayBuffer[Double]], query: ArrayBuffer[Double]): scala.collection.mutable.Map[String,Double] = {
  if (BigInt((points).size) == 0) {
    return (scala.collection.mutable.Map("index" -> (-1.0), "dist" -> (INF), "visited" -> (0.0))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  }
  var nearest_idx: BigInt = 0
  var nearest_dist: Double = INF
  var visited: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((points).size)) {
    val d: Double = distance_sq(query, points((i.toInt).toInt))
    visited = visited + 1
    if (d < nearest_dist) {
      nearest_dist = d
      nearest_idx = i
    }
    i = i + 1
  }
  return (scala.collection.mutable.Map("index" -> (nearest_idx.toString.toDouble), "dist" -> (nearest_dist), "visited" -> (visited.toString.toDouble))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
}

def test_build_cases(): Any = {
  val empty_pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  val tree0: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(empty_pts, 0)
  if (BigInt((tree0).size) == 0) {
    println("case1 true")
  } else {
    println("case1 false")
  }
  val pts1: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(10, 10.0, 2)
  val tree1: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(pts1, 2)
  if ((BigInt((tree1).size) > 0 && BigInt((tree1((0.toInt).toInt)).size) == 2).asInstanceOf[Boolean]) {
    println("case2 true")
  } else {
    println("case2 false")
  }
  val pts2: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(10, 10.0, 3)
  val tree2: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(pts2, -2)
  if ((BigInt((tree2).size) > 0 && BigInt((tree2((0.toInt).toInt)).size) == 3).asInstanceOf[Boolean]) {
    println("case3 true")
  } else {
    println("case3 false")
  }
}

def test_search(): Any = {
  val pts: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(10, 10.0, 2)
  val tree: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(pts, 0)
  val qp: ArrayBuffer[Double] = hypercube_points(1, 10.0, 2)((0.toInt).toInt)
  val res: scala.collection.mutable.Map[String,Double] = nearest_neighbour_search(tree, qp)
  if (((res.getOrElse("index", 0.0).asInstanceOf[Double] != -1.0 && res.getOrElse("dist", 0.0).asInstanceOf[Double] >= 0.0).asInstanceOf[Boolean] && res.getOrElse("visited", 0.0).asInstanceOf[Double] > 0.0).asInstanceOf[Boolean]) {
    println("search true")
  } else {
    println("search false")
  }
}

def test_edge(): Any = {
  val empty_pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  val tree: ArrayBuffer[ArrayBuffer[Double]] = build_kdtree(empty_pts, 0)
  val query: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0)
  val res: scala.collection.mutable.Map[String,Double] = nearest_neighbour_search(tree, query)
  if (((res.getOrElse("index", 0.0).asInstanceOf[Double] == -1.0 && res.getOrElse("dist", 0.0).asInstanceOf[Double] > 100000000.0).asInstanceOf[Boolean] && res.getOrElse("visited", 0.0).asInstanceOf[Double] == 0.0).asInstanceOf[Boolean]) {
    println("edge true")
  } else {
    println("edge false")
  }
}

def main(): Any = {
  seed = 1
  test_build_cases()
  test_search()
  test_edge()
}

val INF: Double = 1000000000.0

var seed: BigInt = 1

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
