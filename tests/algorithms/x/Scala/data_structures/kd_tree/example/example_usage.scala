// Generated by Mochi v0.10.59 on 2025-08-07 00:47:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var point: ArrayBuffer[Double], var left: BigInt, var right: BigInt)

case class BuildResult(var index: BigInt, var nodes: ArrayBuffer[Node])

case class SearchResult(var point: ArrayBuffer[Double], var dist: Double, var visited: BigInt)

def rand(): BigInt = {
  seed = (seed * 1103515245 + 12345) % BigInt("2147483648")
  return seed
}

def random(): Double = {
  return 1.0 * (rand()).toString.toDouble / 2147483648.0
}

def hypercube_points(num_points: BigInt, cube_size: Double, num_dimensions: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var pts: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < num_points) {
    var p: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < num_dimensions) {
      p = p :+ cube_size * random()
      j = j + 1
    }
    pts = pts :+ p
    i = i + 1
  }
  return pts
}

def sort_points(points: ArrayBuffer[ArrayBuffer[Double]], axis: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((points).size)
  var i: BigInt = 1
  while (i < n) {
    var key: ArrayBuffer[Double] = points((i.toInt).toInt)
    var j: BigInt = i - 1
    while (j >= 0 && points((j.toInt).toInt)((axis.toInt).toInt) > key((axis.toInt).toInt)) {
      points((j + 1).toInt) = points((j.toInt).toInt)
      j = j - 1
    }
    points((j + 1).toInt) = key
    i = i + 1
  }
  return points
}

def sublist(arr: ArrayBuffer[ArrayBuffer[Double]], start: BigInt, end: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = start
  while (i < end) {
    res = res :+ arr((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def shift_nodes(nodes: ArrayBuffer[Node], offset: BigInt): ArrayBuffer[Node] = {
  var i: BigInt = 0
  while (i < BigInt((nodes).size)) {
    if (nodes((i.toInt).toInt).left != 0 - 1) {
      nodes((i).toInt).asInstanceOf[Node].left = nodes((i.toInt).toInt).left + offset
    }
    if (nodes((i.toInt).toInt).right != 0 - 1) {
      nodes((i).toInt).asInstanceOf[Node].right = nodes((i.toInt).toInt).right + offset
    }
    i = i + 1
  }
  return nodes
}

def build_kdtree(_points: ArrayBuffer[ArrayBuffer[Double]], depth: BigInt): BuildResult = {
  var points: ArrayBuffer[ArrayBuffer[Double]] = _points
  if (BigInt((points).size) == 0) {
    return BuildResult(0 - 1, ArrayBuffer())
  }
  val k: BigInt = BigInt((points((0.toInt).toInt)).size)
  val axis: BigInt = depth % k
  points = sort_points(points, axis)
  val median: BigInt = BigInt((points).size) / 2
  val left_points: ArrayBuffer[ArrayBuffer[Double]] = sublist(points, 0, median)
  val right_points: ArrayBuffer[ArrayBuffer[Double]] = sublist(points, median + 1, BigInt((points).size))
  val left_res: BuildResult = build_kdtree(left_points, depth + 1)
  val right_res: BuildResult = build_kdtree(right_points, depth + 1)
  val offset: BigInt = BigInt((left_res.asInstanceOf[BuildResult].nodes).size) + 1
  val shifted_right: ArrayBuffer[Node] = shift_nodes(right_res.asInstanceOf[BuildResult].nodes, offset)
  var nodes: ArrayBuffer[Node] = left_res.asInstanceOf[BuildResult].nodes
  val left_index: BigInt = left_res.asInstanceOf[BuildResult].index
  val right_index: BigInt = (if (right_res.asInstanceOf[BuildResult].index == 0 - 1) 0 - 1 else right_res.asInstanceOf[BuildResult].index + offset)
  nodes = nodes :+ Node(points((median.toInt).toInt), left_index, right_index)
  nodes = (nodes ++ shifted_right).asInstanceOf[ArrayBuffer[Node]]
  val root_index: BigInt = BigInt((left_res.asInstanceOf[BuildResult].nodes).size)
  return BuildResult(root_index, nodes)
}

def square_distance(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = 0
  while (i < BigInt((a).size)) {
    val diff: Double = a((i.toInt).toInt) - b((i.toInt).toInt)
    sum = sum + diff * diff
    i = i + 1
  }
  return sum
}

def nearest_neighbour_search(tree: ArrayBuffer[Node], root: BigInt, query_point: ArrayBuffer[Double]): SearchResult = {
  var nearest_point: ArrayBuffer[Double] = ArrayBuffer()
  var nearest_dist: Double = 0.0
  var visited: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((tree).size)) {
    val node: Node = tree((i.toInt).toInt)
    val dist: Double = square_distance(query_point, node.point)
    visited = visited + 1
    if ((visited == 1 || dist < nearest_dist).asInstanceOf[Boolean]) {
      nearest_point = node.point
      nearest_dist = dist
    }
    i = i + 1
  }
  return SearchResult(nearest_point, nearest_dist, visited)
}

def list_to_string(arr: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    s = s + String.valueOf(arr((i.toInt).toInt))
    if (i < BigInt((arr).size) - 1) {
      s = s + ", "
    }
    i = i + 1
  }
  return s + "]"
}

def main(): Any = {
  val num_points: BigInt = 5000
  val cube_size: Double = 10.0
  val num_dimensions: BigInt = 10
  var pts: ArrayBuffer[ArrayBuffer[Double]] = hypercube_points(num_points, cube_size, num_dimensions)
  val build: BuildResult = build_kdtree(pts, 0)
  val root: BigInt = build.asInstanceOf[BuildResult].index
  val tree: ArrayBuffer[Node] = build.asInstanceOf[BuildResult].nodes
  var query: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < num_dimensions) {
    query = query :+ random()
    i = i + 1
  }
  val res: SearchResult = nearest_neighbour_search(tree, root, query)
  println("Query point: " + list_to_string(query))
  println("Nearest point: " + list_to_string(res.point))
  println("Distance: " + String.valueOf(res.asInstanceOf[SearchResult].dist))
  println("Nodes visited: " + String.valueOf(res.asInstanceOf[SearchResult].visited))
}

var seed: BigInt = 1

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
