// Generated by Mochi v0.10.59 on 2025-08-06 22:55:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class DisjointSet(var set_counts: ArrayBuffer[BigInt], var max_set: BigInt, var ranks: ArrayBuffer[BigInt], var parents: ArrayBuffer[BigInt])

def max_list(xs: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = xs((0.toInt).toInt)
  var i: BigInt = 1
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) > m) {
      m = xs((i.toInt).toInt)
    }
    i = i + 1
  }
  return m
}

def disjoint_set_new(set_counts: ArrayBuffer[BigInt]): DisjointSet = {
  val max_set: BigInt = max_list(set_counts)
  val num_sets: BigInt = BigInt((set_counts).size)
  var ranks: ArrayBuffer[BigInt] = ArrayBuffer()
  var parents: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < num_sets) {
    ranks = ranks :+ BigInt(1)
    parents = parents :+ i
    i = i + 1
  }
  return DisjointSet(set_counts, max_set, ranks, parents)
}

def get_parent(ds: DisjointSet, idx: BigInt): BigInt = {
  if (ds.parents((idx.toInt).toInt) == idx) {
    return idx
  }
  var parents: ArrayBuffer[BigInt] = ds.parents
  parents((idx).toInt) = get_parent(ds, parents((idx.toInt).toInt))
  ds.parents = parents
  return ds.parents((idx.toInt).toInt)
}

def merge(ds: DisjointSet, src: BigInt, dst: BigInt): Boolean = {
  val src_parent: BigInt = get_parent(ds, src)
  val dst_parent: BigInt = get_parent(ds, dst)
  if (src_parent == dst_parent) {
    return false
  }
  if (ds.ranks((dst_parent.toInt).toInt) >= ds.ranks((src_parent.toInt).toInt)) {
    var counts: ArrayBuffer[BigInt] = ds.set_counts
    counts((dst_parent).toInt) = counts((dst_parent.toInt).toInt) + counts((src_parent.toInt).toInt)
    counts((src_parent).toInt) = 0
    ds.set_counts = counts
    var parents: ArrayBuffer[BigInt] = ds.parents
    parents((src_parent).toInt) = dst_parent
    ds.parents = parents
    if (ds.ranks((dst_parent.toInt).toInt) == ds.ranks((src_parent.toInt).toInt)) {
      var ranks: ArrayBuffer[BigInt] = ds.ranks
      ranks((dst_parent).toInt) = ranks((dst_parent.toInt).toInt) + 1
      ds.ranks = ranks
    }
    val joined: BigInt = ds.set_counts((dst_parent.toInt).toInt)
    if (joined > ds.max_set) {
      ds.max_set = joined
    }
  } else {
    var counts: ArrayBuffer[BigInt] = ds.set_counts
    counts((src_parent).toInt) = counts((src_parent.toInt).toInt) + counts((dst_parent.toInt).toInt)
    counts((dst_parent).toInt) = 0
    ds.set_counts = counts
    var parents: ArrayBuffer[BigInt] = ds.parents
    parents((dst_parent).toInt) = src_parent
    ds.parents = parents
    val joined: BigInt = ds.set_counts((src_parent.toInt).toInt)
    if (joined > ds.max_set) {
      ds.max_set = joined
    }
  }
  return true
}

var ds: DisjointSet = disjoint_set_new(ArrayBuffer(1, 1, 1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(merge(ds, 1, 2))
    println(merge(ds, 0, 2))
    println(merge(ds, 0, 1))
    println(get_parent(ds, 0))
    println(get_parent(ds, 1))
    println(ds.max_set)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
