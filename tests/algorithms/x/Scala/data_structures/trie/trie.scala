// Generated by Mochi v0.10.71 on 2025-08-24 09:36:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Node(var children: scala.collection.mutable.Map[String,BigInt], var is_leaf: Boolean)

case class Trie(var nodes: ArrayBuffer[Node])

def new_trie(): Trie = {
  return Trie(ArrayBuffer(Node(scala.collection.mutable.Map(), false)))
}

def remove_key(m: scala.collection.mutable.Map[String,BigInt], k: String): scala.collection.mutable.Map[String,BigInt] = {
  var out: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  for (key <- (m.keys.toSeq.sorted)) {
    if (key != k) {
      out.update(key, m.getOrElse(key.toString, BigInt(0)).asInstanceOf[BigInt])
    }
  }
  return out
}

def insert(trie: Trie, word: String): Any = {
  var nodes: ArrayBuffer[Node] = trie.nodes
  var curr: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((word).size)) {
    var ch: String = word.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    var child_idx: BigInt = BigInt(-1)
    var children: scala.collection.mutable.Map[String,BigInt] = nodes.lift((curr.toInt).toInt).getOrElse(null).children
    if ((children.contains(ch))) {
      child_idx = children.getOrElse(ch.toString, BigInt(0)).asInstanceOf[BigInt]
    } else {
      var new_node: Node = Node(scala.collection.mutable.Map(), false)
      nodes = ({nodes += (new_node); nodes})
      child_idx = BigInt((nodes).size) - BigInt(1)
      var new_children: scala.collection.mutable.Map[String,BigInt] = children
      new_children.update(ch, child_idx)
      var node: Node = nodes.lift((curr.toInt).toInt).getOrElse(null)
      node.asInstanceOf[Node].children = new_children
      nodes((curr).toInt) = node
    }
    curr = child_idx
    i = i + BigInt(1)
  }
  var node: Node = nodes.lift((curr.toInt).toInt).getOrElse(null)
  node.asInstanceOf[Node].is_leaf = true
  nodes((curr).toInt) = node
  trie.nodes = nodes
}

def insert_many(trie: Trie, words: ArrayBuffer[String]): Any = {
  for (w <- words) {
    insert(trie, w)
  }
}

def find(trie: Trie, word: String): Boolean = {
  var nodes: ArrayBuffer[Node] = trie.nodes
  var curr: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((word).size)) {
    var ch: String = word.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    var children: scala.collection.mutable.Map[String,BigInt] = nodes.lift((curr.toInt).toInt).getOrElse(null).children
    if (!(children.contains(ch))) {
      return false
    }
    curr = children.getOrElse(ch.toString, BigInt(0)).asInstanceOf[BigInt]
    i = i + BigInt(1)
  }
  var node: Node = nodes.lift((curr.toInt).toInt).getOrElse(null)
  return node.asInstanceOf[Node].is_leaf
}

def delete(trie: Trie, word: String): Any = {
  var nodes: ArrayBuffer[Node] = trie.nodes
  def _delete(idx: BigInt, pos: BigInt): Boolean = {
    if (pos == BigInt((word).size)) {
      var node: Node = nodes.lift((idx.toInt).toInt).getOrElse(null)
      if (node.asInstanceOf[Node].is_leaf == false) {
        return false
      }
      node.asInstanceOf[Node].is_leaf = false
      nodes((idx).toInt) = node
      return BigInt((node.asInstanceOf[Node].children).size) == BigInt(0)
    }
    var node: Node = nodes.lift((idx.toInt).toInt).getOrElse(null)
    var children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[Node].children
    var ch: String = word.slice((pos.toInt).toInt, (pos.toInt).toInt + 1)
    if (!(children.contains(ch))) {
      return false
    }
    var child_idx: BigInt = children.getOrElse(ch.toString, BigInt(0)).asInstanceOf[BigInt]
    var should_delete: Boolean = _delete(child_idx, pos + BigInt(1))
    node = nodes.lift((idx.toInt).toInt).getOrElse(null)
    if (should_delete) {
      var new_children: scala.collection.mutable.Map[String,BigInt] = remove_key(node.asInstanceOf[Node].children, ch)
      node.asInstanceOf[Node].children = new_children
      nodes((idx).toInt) = node
      return (BigInt((new_children).size) == BigInt(0) && node.asInstanceOf[Node].is_leaf == false).asInstanceOf[Boolean]
    }
    nodes((idx).toInt) = node
    return false
  }
  _delete(BigInt(0), BigInt(0))
  trie.nodes = nodes
  return null
}

def print_words(trie: Trie): Any = {
  def dfs(idx: BigInt, word: String): Any = {
    var node: Node = trie.nodes.lift((idx.toInt).toInt).getOrElse(null)
    if (node.asInstanceOf[Node].is_leaf) {
      println(_str(word))
    }
    for (key <- (node.asInstanceOf[Node].children.keys.toSeq.sorted)) {
      dfs(node.asInstanceOf[Node].children.getOrElse(key.toString, BigInt(0)).asInstanceOf[BigInt], word + key)
    }
  }
  dfs(BigInt(0), "")
}

def test_trie(): Boolean = {
  var words: ArrayBuffer[String] = ArrayBuffer("banana", "bananas", "bandana", "band", "apple", "all", "beast")
  var trie: Trie = new_trie()
  insert_many(trie, words)
  var ok: Boolean = true
  for (w <- words) {
    ok = (ok && find(trie, w)).asInstanceOf[Boolean]
  }
  ok = (ok && find(trie, "banana")).asInstanceOf[Boolean]
  var t: Boolean = find(trie, "bandanas")
  ok = (ok && t == false).asInstanceOf[Boolean]
  var t2: Boolean = find(trie, "apps")
  ok = (ok && t2 == false).asInstanceOf[Boolean]
  ok = (ok && find(trie, "apple")).asInstanceOf[Boolean]
  ok = (ok && find(trie, "all")).asInstanceOf[Boolean]
  delete(trie, "all")
  var t3: Boolean = find(trie, "all")
  ok = (ok && t3 == false).asInstanceOf[Boolean]
  delete(trie, "banana")
  var t4: Boolean = find(trie, "banana")
  ok = (ok && t4 == false).asInstanceOf[Boolean]
  ok = (ok && find(trie, "bananas")).asInstanceOf[Boolean]
  return ok
}

def print_results(msg: String, passes: Boolean): Any = {
  if (passes) {
    println(_str(msg + " works!"))
  } else {
    println(_str(msg + " doesn't work :("))
  }
}

var trie: Trie = new_trie()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_results("Testing trie functionality", test_trie())
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
