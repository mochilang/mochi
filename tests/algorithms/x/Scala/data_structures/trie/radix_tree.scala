// Generated by Mochi v0.10.59 on 2025-08-07 00:52:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class RadixNode(var prefix: String, var is_leaf: Boolean, var children: scala.collection.mutable.Map[String,BigInt])

case class RadixTree(var nodes: ArrayBuffer[RadixNode])

case class MatchResult(var common: String, var rem_prefix: String, var rem_word: String)

def new_node(prefix: String, is_leaf: Boolean): RadixNode = {
  return RadixNode(prefix, is_leaf, scala.collection.mutable.Map())
}

def new_tree(): RadixTree = {
  var nodes: ArrayBuffer[RadixNode] = ArrayBuffer((new_node("", false)).asInstanceOf[RadixNode])
  return RadixTree(nodes)
}

def match_prefix(node: RadixNode, word: String): MatchResult = {
  var x: BigInt = 0
  var p: String = node.asInstanceOf[RadixNode].prefix
  var w: String = word
  var min_len: BigInt = BigInt((p).size)
  if (BigInt((w).size) < min_len) {
    min_len = BigInt((w).size)
  }
  val _br0 = new Breaks
  _br0.breakable {
    while (x < min_len) {
      if (p.slice((x).toInt, (x + 1).toInt) != w.slice((x).toInt, (x + 1).toInt)) {
        _br0.break()
      }
      x = x + 1
    }
  }
  val common: String = p.slice((0).toInt, (x).toInt)
  val rem_prefix: String = p.slice((x).toInt, (BigInt((p).size)).toInt)
  val rem_word: String = w.slice((x).toInt, (BigInt((w).size)).toInt)
  return MatchResult(common, rem_prefix, rem_word)
}

def insert_many(tree: RadixTree, words: ArrayBuffer[String]): Any = {
  for (w <- words) {
    insert(tree, 0, w)
  }
}

def insert(tree: RadixTree, idx: BigInt, word: String): Any = {
  var nodes: ArrayBuffer[RadixNode] = tree.asInstanceOf[RadixTree].nodes
  var node: RadixNode = nodes((idx.toInt).toInt)
  if ((node.asInstanceOf[RadixNode].prefix == word && !node.asInstanceOf[RadixNode].is_leaf).asInstanceOf[Boolean]) {
    node.asInstanceOf[RadixNode].is_leaf = true
    nodes((idx).toInt) = node
    tree.asInstanceOf[RadixTree].nodes = nodes
    return
  }
  val first: String = word.slice((0).toInt, (1).toInt)
  var children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[RadixNode].children
  if (!has_key(children, first)) {
    val new_idx: BigInt = BigInt((nodes).size)
    nodes = nodes :+ new_node(word, true)
    children.update(first, new_idx)
    node.asInstanceOf[RadixNode].children = children
    nodes((idx).toInt) = node
    tree.asInstanceOf[RadixTree].nodes = nodes
    return
  }
  val child_idx: BigInt = children.getOrElse(first.toString, null).asInstanceOf[BigInt]
  var child: RadixNode = nodes((child_idx.toInt).toInt)
  val res: MatchResult = match_prefix(child, word)
  if (res.asInstanceOf[MatchResult].rem_prefix == "") {
    insert(tree, child_idx, res.asInstanceOf[MatchResult].rem_word)
    return
  }
  child.asInstanceOf[RadixNode].prefix = res.asInstanceOf[MatchResult].rem_prefix
  nodes((child_idx).toInt) = child
  var new_children: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  new_children.update(res.asInstanceOf[MatchResult].rem_prefix.slice((0).toInt, (1).toInt), child_idx)
  val new_idx: BigInt = BigInt((nodes).size)
  nodes = nodes :+ new_node(res.asInstanceOf[MatchResult].common, false)
  nodes((new_idx).toInt).asInstanceOf[RadixNode].children = new_children
  if (res.asInstanceOf[MatchResult].rem_word == "") {
    nodes((new_idx).toInt).asInstanceOf[RadixNode].is_leaf = true
  } else {
    insert(tree, new_idx, res.asInstanceOf[MatchResult].rem_word)
  }
  children.update(first, new_idx)
  node.asInstanceOf[RadixNode].children = children
  nodes((idx).toInt) = node
  tree.asInstanceOf[RadixTree].nodes = nodes
  return null
}

def find(tree: RadixTree, idx: BigInt, word: String): Boolean = {
  var nodes: ArrayBuffer[RadixNode] = tree.asInstanceOf[RadixTree].nodes
  val node: RadixNode = nodes((idx.toInt).toInt)
  val first: String = word.slice((0).toInt, (1).toInt)
  val children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[RadixNode].children
  if (!has_key(children, first)) {
    return false
  }
  val child_idx: BigInt = children.getOrElse(first.toString, null).asInstanceOf[BigInt]
  val child: RadixNode = nodes((child_idx.toInt).toInt)
  val res: MatchResult = match_prefix(child, word)
  if (res.asInstanceOf[MatchResult].rem_prefix != "") {
    return false
  }
  if (res.asInstanceOf[MatchResult].rem_word == "") {
    return child.asInstanceOf[RadixNode].is_leaf
  }
  return find(tree, child_idx, res.asInstanceOf[MatchResult].rem_word)
}

def remove_key(m: scala.collection.mutable.Map[String,BigInt], k: String): scala.collection.mutable.Map[String,BigInt] = {
  var out: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  for (key <- m.keys) {
    if (key != k) {
      out.update(key, m.getOrElse(key.toString, null).asInstanceOf[BigInt])
    }
  }
  return out
}

def has_key(m: scala.collection.mutable.Map[String,BigInt], k: String): Boolean = {
  for (key <- m.keys) {
    if (key == k) {
      return true
    }
  }
  return false
}

def delete(tree: RadixTree, idx: BigInt, word: String): Boolean = {
  var nodes: ArrayBuffer[RadixNode] = tree.asInstanceOf[RadixTree].nodes
  var node: RadixNode = nodes((idx.toInt).toInt)
  val first: String = word.slice((0).toInt, (1).toInt)
  var children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[RadixNode].children
  if (!has_key(children, first)) {
    return false
  }
  val child_idx: BigInt = children.getOrElse(first.toString, null).asInstanceOf[BigInt]
  var child: RadixNode = nodes((child_idx.toInt).toInt)
  val res: MatchResult = match_prefix(child, word)
  if (res.asInstanceOf[MatchResult].rem_prefix != "") {
    return false
  }
  if (res.asInstanceOf[MatchResult].rem_word != "") {
    val deleted: Boolean = delete(tree, child_idx, res.asInstanceOf[MatchResult].rem_word)
    if (deleted) {
      nodes = tree.asInstanceOf[RadixTree].nodes
      node = nodes((idx.toInt).toInt)
    }
    return deleted
  }
  if (!child.asInstanceOf[RadixNode].is_leaf) {
    return false
  }
  if (BigInt((child.asInstanceOf[RadixNode].children).size) == 0) {
    children = remove_key(children, first)
    node.asInstanceOf[RadixNode].children = children
    nodes((idx).toInt) = node
    tree.asInstanceOf[RadixTree].nodes = nodes
    if ((BigInt((children).size) == 1 && !node.asInstanceOf[RadixNode].is_leaf).asInstanceOf[Boolean]) {
      var only_key: String = ""
      for (k <- children.keys) {
        only_key = k
      }
      val merge_idx: BigInt = children.getOrElse(only_key.toString, null).asInstanceOf[BigInt]
      val merge_node: RadixNode = nodes((merge_idx.toInt).toInt)
      node.asInstanceOf[RadixNode].is_leaf = merge_node.asInstanceOf[RadixNode].is_leaf
      node.asInstanceOf[RadixNode].prefix = node.asInstanceOf[RadixNode].prefix + merge_node.asInstanceOf[RadixNode].prefix
      node.asInstanceOf[RadixNode].children = merge_node.asInstanceOf[RadixNode].children
      nodes((idx).toInt) = node
      tree.asInstanceOf[RadixTree].nodes = nodes
    }
  } else {
    if (BigInt((child.asInstanceOf[RadixNode].children).size) > 1) {
      child.asInstanceOf[RadixNode].is_leaf = false
      nodes((child_idx).toInt) = child
      tree.asInstanceOf[RadixTree].nodes = nodes
    } else {
      var only_key: String = ""
      for (k <- child.asInstanceOf[RadixNode].children.keys) {
        only_key = k
      }
      val merge_idx: BigInt = child.asInstanceOf[RadixNode].children.getOrElse(only_key.toString, null).asInstanceOf[BigInt]
      val merge_node: RadixNode = nodes((merge_idx.toInt).toInt)
      child.asInstanceOf[RadixNode].is_leaf = merge_node.asInstanceOf[RadixNode].is_leaf
      child.asInstanceOf[RadixNode].prefix = child.asInstanceOf[RadixNode].prefix + merge_node.asInstanceOf[RadixNode].prefix
      child.asInstanceOf[RadixNode].children = merge_node.asInstanceOf[RadixNode].children
      nodes((child_idx).toInt) = child
      tree.asInstanceOf[RadixTree].nodes = nodes
    }
  }
  return true
}

def print_tree(tree: RadixTree, idx: BigInt, height: BigInt): Any = {
  var nodes: ArrayBuffer[RadixNode] = tree.asInstanceOf[RadixTree].nodes
  val node: RadixNode = nodes((idx.toInt).toInt)
  if (node.asInstanceOf[RadixNode].prefix != "") {
    var line: String = ""
    var i: BigInt = 0
    while (i < height) {
      line = line + "-"
      i = i + 1
    }
    line = line + " " + node.asInstanceOf[RadixNode].prefix
    if (node.asInstanceOf[RadixNode].is_leaf) {
      line = line + "  (leaf)"
    }
    println(line)
  }
  val children: scala.collection.mutable.Map[String,BigInt] = node.asInstanceOf[RadixNode].children
  for (k <- children.keys) {
    val child_idx: BigInt = children.getOrElse(k.toString, null).asInstanceOf[BigInt]
    print_tree(tree, child_idx, height + 1)
  }
}

def test_trie(): Boolean = {
  val words: ArrayBuffer[String] = ArrayBuffer("banana", "bananas", "bandana", "band", "apple", "all", "beast")
  val tree: RadixTree = new_tree()
  insert_many(tree, words)
  var ok: Boolean = true
  for (w <- words) {
    if (!find(tree, 0, w)) {
      ok = false
    }
  }
  if (find(tree, 0, "bandanas")) {
    ok = false
  }
  if (find(tree, 0, "apps")) {
    ok = false
  }
  delete(tree, 0, "all")
  if (find(tree, 0, "all")) {
    ok = false
  }
  delete(tree, 0, "banana")
  if (find(tree, 0, "banana")) {
    ok = false
  }
  if (!find(tree, 0, "bananas")) {
    ok = false
  }
  return ok
}

def pytests(): Any = {
  if (!test_trie()) {
    throw new RuntimeException(String.valueOf("test failed"))
  }
}

def main(): Any = {
  val tree: RadixTree = new_tree()
  val words: ArrayBuffer[String] = ArrayBuffer("banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast")
  insert_many(tree, words)
  println("Words: " + String.valueOf(words))
  println("Tree:")
  print_tree(tree, 0, 0)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
