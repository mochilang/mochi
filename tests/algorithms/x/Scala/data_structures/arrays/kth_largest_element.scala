// Generated by Mochi v0.10.59 on 2025-08-06 22:19:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def partition(arr: ArrayBuffer[BigInt], low: BigInt, high: BigInt): BigInt = {
  val pivot: BigInt = arr((high.toInt).toInt)
  var i: BigInt = low - 1
  var j: BigInt = low
  while (j < high) {
    if (arr((j.toInt).toInt) >= pivot) {
      i = i + 1
      var tmp: BigInt = arr((i.toInt).toInt)
      arr((i).toInt) = arr((j.toInt).toInt)
      arr((j).toInt) = tmp
    }
    j = j + 1
  }
  var k: BigInt = i + 1
  var tmp: BigInt = arr((k.toInt).toInt)
  arr((k).toInt) = arr((high.toInt).toInt)
  arr((high).toInt) = tmp
  return k
}

def kth_largest_element(arr: ArrayBuffer[BigInt], position: BigInt): BigInt = {
  if (BigInt((arr).size) == 0) {
    return -1
  }
  if ((position < 1 || position > BigInt((arr).size)).asInstanceOf[Boolean]) {
    return -1
  }
  var low: BigInt = 0
  var high: BigInt = BigInt((arr).size) - 1
  while (low <= high) {
    if ((low > BigInt((arr).size) - 1 || high < 0).asInstanceOf[Boolean]) {
      return -1
    }
    var pivot_index: BigInt = partition(arr, low, high)
    if (pivot_index == position - 1) {
      return arr((pivot_index.toInt).toInt)
    } else {
      if (pivot_index > position - 1) {
        high = pivot_index - 1
      } else {
        low = pivot_index + 1
      }
    }
  }
  return -1
}

val arr1: ArrayBuffer[BigInt] = ArrayBuffer(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)

val arr2: ArrayBuffer[BigInt] = ArrayBuffer(2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(kth_largest_element(arr1, 3))
    println("\n")
    println(kth_largest_element(arr2, 1))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
