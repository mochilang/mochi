// Generated by Mochi v0.10.59 on 2025-08-06 22:18:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def iterator_values(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  for (row <- matrix) {
    for (value <- row) {
      result = result :+ value
    }
  }
  return result
}

def index_2d_array_in_1d(array: ArrayBuffer[ArrayBuffer[BigInt]], index: BigInt): BigInt = {
  val rows: BigInt = BigInt((array).size)
  val cols: BigInt = BigInt((array((0.toInt).toInt)).size)
  if ((rows == 0 || cols == 0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("no items in array"))
  }
  if ((index < 0 || index >= rows * cols).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  return array((BigInt((index / cols).toString.toDouble.toInt).toInt).toInt)(((index % cols).toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(iterator_values(ArrayBuffer(ArrayBuffer(5), ArrayBuffer(BigInt((-523).toString.toDouble.toInt)), ArrayBuffer(BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(34), ArrayBuffer(0)))))
    println(String.valueOf(iterator_values(ArrayBuffer(ArrayBuffer(5, BigInt((-523).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(34, 0)))))
    println(String.valueOf(index_2d_array_in_1d(ArrayBuffer(ArrayBuffer(0, 1, 2, 3), ArrayBuffer(4, 5, 6, 7), ArrayBuffer(8, 9, 10, 11)), 5)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
