// Generated by Mochi v0.10.59 on 2025-08-06 22:19:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sortFloats(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var arr: ArrayBuffer[Double] = xs
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    var j: BigInt = 0
    while (j < BigInt((arr).size) - 1) {
      if (arr((j.toInt).toInt) > arr(((j + 1).toInt).toInt)) {
        val t: Double = arr((j.toInt).toInt)
        arr((j).toInt) = arr(((j + 1).toInt).toInt)
        arr((j + 1).toInt) = t
      }
      j = j + 1
    }
    i = i + 1
  }
  return arr
}

def find_median_sorted_arrays(nums1: ArrayBuffer[Double], nums2: ArrayBuffer[Double]): Double = {
  if ((BigInt((nums1).size) == 0 && BigInt((nums2).size) == 0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Both input arrays are empty."))
  }
  var merged: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((nums1).size)) {
    merged = merged :+ nums1((i.toInt).toInt)
    i = i + 1
  }
  var j: BigInt = 0
  while (j < BigInt((nums2).size)) {
    merged = merged :+ nums2((j.toInt).toInt)
    j = j + 1
  }
  val sorted: ArrayBuffer[Double] = sortFloats(merged)
  val total: BigInt = BigInt((sorted).size)
  if (total % 2 == 1) {
    return sorted(((total / 2).toInt).toInt)
  }
  val middle1: Double = sorted(((total / 2 - 1).toInt).toInt)
  val middle2: Double = sorted(((total / 2).toInt).toInt)
  return (middle1 + middle2) / 2.0
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(find_median_sorted_arrays(ArrayBuffer(1.0, 3.0), ArrayBuffer(2.0)))
    println(find_median_sorted_arrays(ArrayBuffer(1.0, 2.0), ArrayBuffer(3.0, 4.0)))
    println(find_median_sorted_arrays(ArrayBuffer(0.0, 0.0), ArrayBuffer(0.0, 0.0)))
    println(find_median_sorted_arrays((ArrayBuffer()).asInstanceOf[ArrayBuffer[Double]], ArrayBuffer(1.0)))
    println(find_median_sorted_arrays(ArrayBuffer((-1000.0).toString.toDouble), ArrayBuffer(1000.0)))
    println(find_median_sorted_arrays(ArrayBuffer((-1.1).toString.toDouble, (-2.2).toString.toDouble), ArrayBuffer((-3.3).toString.toDouble, (-4.4).toString.toDouble)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
