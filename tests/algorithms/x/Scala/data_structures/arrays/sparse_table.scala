// Generated by Mochi v0.10.59 on 2025-08-06 22:20:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow2(n: BigInt): BigInt = {
  var result: BigInt = 1
  var i: BigInt = 0
  while (i < n) {
    result = result * 2
    i = i + 1
  }
  return result
}

def int_log2(n: BigInt): BigInt = {
  var v: BigInt = n
  var res: BigInt = 0
  while (v > 1) {
    v = v / 2
    res = res + 1
  }
  return res
}

def build_sparse_table(number_list: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (BigInt((number_list).size) == 0) {
    throw new RuntimeException(String.valueOf("empty number list not allowed"))
  }
  val length: BigInt = BigInt((number_list).size)
  val row: BigInt = int_log2(length) + 1
  var sparse_table: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var j: BigInt = 0
  while (j < row) {
    var inner: ArrayBuffer[BigInt] = ArrayBuffer()
    var i: BigInt = 0
    while (i < length) {
      inner = inner :+ BigInt(0)
      i = i + 1
    }
    sparse_table = sparse_table :+ inner
    j = j + 1
  }
  var i: BigInt = 0
  while (i < length) {
    sparse_table((0).toInt)((i).toInt) = number_list((i.toInt).toInt)
    i = i + 1
  }
  j = 1
  while (pow2(j) <= length) {
    i = 0
    while (i + pow2(j) - 1 < length) {
      val left: BigInt = sparse_table(((j - 1).toInt).toInt)(((i + pow2(j - 1)).toInt).toInt)
      val right: BigInt = sparse_table(((j - 1).toInt).toInt)((i.toInt).toInt)
      if (left < right) {
        sparse_table((j).toInt)((i).toInt) = left
      } else {
        sparse_table((j).toInt)((i).toInt) = right
      }
      i = i + 1
    }
    j = j + 1
  }
  return sparse_table
}

def query(sparse_table: ArrayBuffer[ArrayBuffer[BigInt]], left_bound: BigInt, right_bound: BigInt): BigInt = {
  if ((left_bound < 0 || right_bound >= BigInt((sparse_table((0.toInt).toInt)).size)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("list index out of range"))
  }
  val interval: BigInt = right_bound - left_bound + 1
  val j: BigInt = int_log2(interval)
  val val1: BigInt = sparse_table((j.toInt).toInt)(((right_bound - pow2(j) + 1).toInt).toInt)
  val val2: BigInt = sparse_table((j.toInt).toInt)((left_bound.toInt).toInt)
  if (val1 < val2) {
    return val1
  }
  return val2
}

val st1: ArrayBuffer[ArrayBuffer[BigInt]] = build_sparse_table(ArrayBuffer(8, 1, 0, 3, 4, 9, 3))

val st2: ArrayBuffer[ArrayBuffer[BigInt]] = build_sparse_table(ArrayBuffer(3, 1, 9))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(st1))
    println(String.valueOf(st2))
    println(String.valueOf(query(st1, 0, 4)))
    println(String.valueOf(query(st1, 4, 6)))
    println(String.valueOf(query(st2, 2, 2)))
    println(String.valueOf(query(st2, 0, 1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
