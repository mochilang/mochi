// Generated by Mochi v0.10.59 on 2025-08-06 22:18:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sort_triplet(a: BigInt, b: BigInt, c: BigInt): ArrayBuffer[BigInt] = {
  var x: BigInt = a
  var y: BigInt = b
  var z: BigInt = c
  if (x > y) {
    val t: BigInt = x
    x = y
    y = t
  }
  if (y > z) {
    val t: BigInt = y
    y = z
    z = t
  }
  if (x > y) {
    val t: BigInt = x
    x = y
    y = t
  }
  return ArrayBuffer(x, y, z)
}

def contains_triplet(arr: ArrayBuffer[ArrayBuffer[BigInt]], target: ArrayBuffer[BigInt]): Boolean = {
  val _br0 = new Breaks
  _br0.breakable {
    for (i <- (0).toInt until (BigInt((arr).size)).toInt) {
      val item: ArrayBuffer[BigInt] = arr((i.toInt).toInt)
      var same: Boolean = true
      val _br1 = new Breaks
      _br1.breakable {
        for (j <- (0).toInt until (BigInt((target).size)).toInt) {
          if (item((j.toInt).toInt) != target((j.toInt).toInt)) {
            same = false
            _br1.break()
          }
        }
      }
      if (same) {
        return true
      }
    }
  }
  return false
}

def contains_int(arr: ArrayBuffer[BigInt], value: BigInt): Boolean = {
  for (i <- (0).toInt until (BigInt((arr).size)).toInt) {
    if (arr((i.toInt).toInt) == value) {
      return true
    }
  }
  return false
}

def find_triplets_with_0_sum(nums: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((nums).size)
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (i <- (0).toInt until (n).toInt) {
    for (j <- (i + 1).toInt until (n).toInt) {
      for (k <- (j + 1).toInt until (n).toInt) {
        val a: BigInt = nums((i.toInt).toInt)
        val b: BigInt = nums((j.toInt).toInt)
        val c: BigInt = nums((k.toInt).toInt)
        if (a + b + c == 0) {
          val trip: ArrayBuffer[BigInt] = sort_triplet(a, b, c)
          if (!contains_triplet(result, trip)) {
            result = result :+ trip
          }
        }
      }
    }
  }
  return result
}

def find_triplets_with_0_sum_hashing(arr: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val target_sum: BigInt = 0
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (i <- (0).toInt until (BigInt((arr).size)).toInt) {
    var seen: ArrayBuffer[BigInt] = ArrayBuffer()
    val current_sum: BigInt = target_sum - arr((i.toInt).toInt)
    for (j <- (i + 1).toInt until (BigInt((arr).size)).toInt) {
      val other: BigInt = arr((j.toInt).toInt)
      val required: BigInt = current_sum - other
      if (contains_int(seen, required)) {
        val trip: ArrayBuffer[BigInt] = sort_triplet(arr((i.toInt).toInt), other, required)
        if (!contains_triplet(output, trip)) {
          output = output :+ trip
        }
      }
      seen = seen :+ other
    }
  }
  return output
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(find_triplets_with_0_sum(ArrayBuffer(BigInt((-1).toString.toDouble.toInt), 0, 1, 2, BigInt((-1).toString.toDouble.toInt), BigInt((-4).toString.toDouble.toInt)))))
    println(String.valueOf(find_triplets_with_0_sum(ArrayBuffer())))
    println(String.valueOf(find_triplets_with_0_sum(ArrayBuffer(0, 0, 0))))
    println(String.valueOf(find_triplets_with_0_sum(ArrayBuffer(1, 2, 3, 0, BigInt((-1).toString.toDouble.toInt), BigInt((-2).toString.toDouble.toInt), BigInt((-3).toString.toDouble.toInt)))))
    println(String.valueOf(find_triplets_with_0_sum_hashing(ArrayBuffer(BigInt((-1).toString.toDouble.toInt), 0, 1, 2, BigInt((-1).toString.toDouble.toInt), BigInt((-4).toString.toDouble.toInt)))))
    println(String.valueOf(find_triplets_with_0_sum_hashing(ArrayBuffer())))
    println(String.valueOf(find_triplets_with_0_sum_hashing(ArrayBuffer(0, 0, 0))))
    println(String.valueOf(find_triplets_with_0_sum_hashing(ArrayBuffer(1, 2, 3, 0, BigInt((-1).toString.toDouble.toInt), BigInt((-2).toString.toDouble.toInt), BigInt((-3).toString.toDouble.toInt)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
