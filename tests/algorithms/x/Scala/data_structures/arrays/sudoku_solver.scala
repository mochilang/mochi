// Generated by Mochi v0.10.59 on 2025-08-06 22:20:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def string_to_grid(s: String): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 9) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < 9) {
      val ch: String = s.slice((i * 9 + j).toInt, (i * 9 + j + 1).toInt)
      var `val`: BigInt = 0
      if ((ch != "0" && ch != ".").asInstanceOf[Boolean]) {
        `val` = BigInt(ch.toString.toDouble.toInt)
      }
      row = row :+ `val`
      j = j + 1
    }
    grid = grid :+ row
    i = i + 1
  }
  return grid
}

def print_grid(grid: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  for (r <- (0).toInt until (9).toInt) {
    var line: String = ""
    for (c <- (0).toInt until (9).toInt) {
      line = line + String.valueOf(grid((r.toInt).toInt)((c.toInt).toInt))
      if (BigInt(c.toString.toDouble.toInt) < 8) {
        line = line + " "
      }
    }
    println(line)
  }
}

def is_safe(grid: ArrayBuffer[ArrayBuffer[BigInt]], row: BigInt, column: BigInt, n: BigInt): Boolean = {
  for (i <- (0).toInt until (9).toInt) {
    if ((grid((row.toInt).toInt)((i.toInt).toInt) == n || grid((i.toInt).toInt)((column.toInt).toInt) == n).asInstanceOf[Boolean]) {
      return false
    }
  }
  for (i <- (0).toInt until (3).toInt) {
    for (j <- (0).toInt until (3).toInt) {
      if (grid(((row - row % 3 + i).toInt).toInt)(((column - column % 3 + j).toInt).toInt) == n) {
        return false
      }
    }
  }
  return true
}

def find_empty(grid: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  for (i <- (0).toInt until (9).toInt) {
    for (j <- (0).toInt until (9).toInt) {
      if (grid((i.toInt).toInt)((j.toInt).toInt) == 0) {
        return ArrayBuffer(BigInt(i.toString.toDouble.toInt), BigInt(j.toString.toDouble.toInt))
      }
    }
  }
  return ArrayBuffer()
}

def solve(grid: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  val loc: ArrayBuffer[BigInt] = find_empty(grid)
  if (BigInt((loc).size) == 0) {
    return true
  }
  val row: BigInt = loc((0.toInt).toInt)
  val column: BigInt = loc((1.toInt).toInt)
  for (digit <- (1).toInt until (10).toInt) {
    if (is_safe(grid, row, column, BigInt(digit.toString.toDouble.toInt))) {
      grid((row).toInt)((column).toInt) = BigInt(digit.toString.toDouble.toInt)
      if (solve(grid)) {
        return true
      }
      grid((row).toInt)((column).toInt) = 0
    }
  }
  return false
}

val puzzle: String = "003020600900305001001806400008102900700000008006708200002609500800203009005010300"

val grid: ArrayBuffer[ArrayBuffer[BigInt]] = string_to_grid(puzzle)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Original grid:")
    print_grid(grid)
    if (solve(grid)) {
      println("\nSolved grid:")
      print_grid(grid)
    } else {
      println("\nNo solution found")
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
