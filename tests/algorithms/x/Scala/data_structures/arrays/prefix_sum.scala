// Generated by Mochi v0.10.59 on 2025-08-06 22:19:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class PrefixSum(var prefix_sum: ArrayBuffer[BigInt])

def make_prefix_sum(arr: ArrayBuffer[BigInt]): PrefixSum = {
  var prefix: ArrayBuffer[BigInt] = ArrayBuffer()
  var running: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    running = running + arr((i.toInt).toInt)
    prefix = prefix :+ running
    i = i + 1
  }
  return PrefixSum(prefix)
}

def get_sum(ps: PrefixSum, start: BigInt, end: BigInt): BigInt = {
  val prefix: ArrayBuffer[BigInt] = ps.prefix_sum
  if (BigInt((prefix).size) == 0) {
    throw new RuntimeException(String.valueOf("The array is empty."))
  }
  if (((start < 0 || end >= BigInt((prefix).size)).asInstanceOf[Boolean] || start > end).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid range specified."))
  }
  if (start == 0) {
    return prefix((end.toInt).toInt)
  }
  return prefix((end.toInt).toInt) - prefix(((start - 1).toInt).toInt)
}

def contains_sum(ps: PrefixSum, target_sum: BigInt): Boolean = {
  val prefix: ArrayBuffer[BigInt] = ps.prefix_sum
  var sums: ArrayBuffer[BigInt] = ArrayBuffer(0)
  var i: BigInt = 0
  while (i < BigInt((prefix).size)) {
    val sum_item: BigInt = prefix((i.toInt).toInt)
    var j: BigInt = 0
    while (j < BigInt((sums).size)) {
      if (sums((j.toInt).toInt) == sum_item - target_sum) {
        return true
      }
      j = j + 1
    }
    sums = sums :+ sum_item
    i = i + 1
  }
  return false
}

val ps: PrefixSum = make_prefix_sum(ArrayBuffer(1, 2, 3))

val ps2: PrefixSum = make_prefix_sum(ArrayBuffer(1, BigInt((-2).toString.toDouble.toInt), 3))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(get_sum(ps, 0, 2)))
    println(String.valueOf(get_sum(ps, 1, 2)))
    println(String.valueOf(get_sum(ps, 2, 2)))
    println(String.valueOf(contains_sum(ps, 6)))
    println(String.valueOf(contains_sum(ps, 5)))
    println(String.valueOf(contains_sum(ps, 3)))
    println(String.valueOf(contains_sum(ps, 4)))
    println(String.valueOf(contains_sum(ps, 7)))
    println(String.valueOf(contains_sum(ps2, 2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
