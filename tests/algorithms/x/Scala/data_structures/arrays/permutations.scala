// Generated by Mochi v0.10.59 on 2025-08-06 22:19:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def tail(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 1
  while (i < BigInt((xs).size)) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def rotate_left(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((xs).size) == 0) {
    return xs
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 1
  while (i < BigInt((xs).size)) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  res = res :+ xs((0.toInt).toInt)
  return res
}

def permute_recursive(nums: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (BigInt((nums).size) == 0) {
    val base: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
    return base :+ (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  }
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var current: ArrayBuffer[BigInt] = nums
  var count: BigInt = 0
  while (count < BigInt((nums).size)) {
    val n: BigInt = current((0.toInt).toInt)
    val rest: ArrayBuffer[BigInt] = tail(current)
    val perms: ArrayBuffer[ArrayBuffer[BigInt]] = permute_recursive(rest)
    var j: BigInt = 0
    while (j < BigInt((perms).size)) {
      val perm: ArrayBuffer[BigInt] = perms((j.toInt).toInt) :+ n
      result = result :+ perm
      j = j + 1
    }
    current = rotate_left(current)
    count = count + 1
  }
  return result
}

def swap(xs: ArrayBuffer[BigInt], i: BigInt, j: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var k: BigInt = 0
  while (k < BigInt((xs).size)) {
    if (k == i) {
      res = res :+ xs((j.toInt).toInt)
    } else {
      if (k == j) {
        res = res :+ xs((i.toInt).toInt)
      } else {
        res = res :+ xs((k.toInt).toInt)
      }
    }
    k = k + 1
  }
  return res
}

def permute_backtrack_helper(nums: ArrayBuffer[BigInt], start: BigInt, output: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (start == BigInt((nums).size) - 1) {
    return output :+ nums
  }
  var i: BigInt = start
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = output
  while (i < BigInt((nums).size)) {
    val swapped: ArrayBuffer[BigInt] = swap(nums, start, i)
    res = permute_backtrack_helper(swapped, start + 1, res)
    i = i + 1
  }
  return res
}

def permute_backtrack(nums: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val output: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  return permute_backtrack_helper(nums, 0, output)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(permute_recursive(ArrayBuffer(1, 2, 3))))
    println(String.valueOf(permute_backtrack(ArrayBuffer(1, 2, 3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
