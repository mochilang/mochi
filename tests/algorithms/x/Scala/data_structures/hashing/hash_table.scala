// Generated by Mochi v0.10.59 on 2025-08-06 23:20:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class HashTable(var size_table: BigInt, var values: ArrayBuffer[BigInt], var filled: ArrayBuffer[Boolean], var charge_factor: BigInt, var lim_charge: Double)

def repeat_int(n: BigInt, `val`: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = 0
  while (i < n) {
    res = res :+ `val`
    i = i + 1
  }
  return res
}

def repeat_bool(n: BigInt, `val`: Boolean): ArrayBuffer[Boolean] = {
  var res: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = 0
  while (i < n) {
    res = res :+ `val`
    i = i + 1
  }
  return res
}

def set_int(xs: ArrayBuffer[BigInt], idx: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ value
    } else {
      res = res :+ xs((i.toInt).toInt)
    }
    i = i + 1
  }
  return res
}

def set_bool(xs: ArrayBuffer[Boolean], idx: BigInt, value: Boolean): ArrayBuffer[Boolean] = {
  var res: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ value
    } else {
      res = res :+ xs((i.toInt).toInt)
    }
    i = i + 1
  }
  return res
}

def create_table(size_table: BigInt, charge_factor: BigInt, lim_charge: Double): HashTable = {
  return HashTable(size_table, repeat_int(size_table, 0), repeat_bool(size_table, false), charge_factor, lim_charge)
}

def hash_function(ht: HashTable, key: BigInt): BigInt = {
  var k: BigInt = key % ht.asInstanceOf[HashTable].size_table
  if (k < 0) {
    k = k + ht.asInstanceOf[HashTable].size_table
  }
  return k
}

def is_prime(n: BigInt): Boolean = {
  if (n < 2) {
    return false
  }
  if (n % 2 == 0) {
    return n == 2
  }
  var i: BigInt = 3
  while (i * i <= n) {
    if (n % i == 0) {
      return false
    }
    i = i + 2
  }
  return true
}

def next_prime(value: BigInt, factor: BigInt): BigInt = {
  var candidate: BigInt = value * factor + 1
  while (!is_prime(candidate)) {
    candidate = candidate + 1
  }
  return candidate
}

def set_value(ht: HashTable, key: BigInt, data: BigInt): HashTable = {
  val new_values: ArrayBuffer[BigInt] = set_int(ht.asInstanceOf[HashTable].values, key, data)
  val new_filled: ArrayBuffer[Boolean] = set_bool(ht.asInstanceOf[HashTable].filled, key, true)
  return HashTable(ht.asInstanceOf[HashTable].size_table, new_values, new_filled, ht.asInstanceOf[HashTable].charge_factor, ht.asInstanceOf[HashTable].lim_charge)
}

def collision_resolution(ht: HashTable, key: BigInt): BigInt = {
  var new_key: BigInt = hash_function(ht, key + 1)
  var steps: BigInt = 0
  while (ht.asInstanceOf[HashTable].filled((new_key.toInt).toInt)) {
    new_key = hash_function(ht, new_key + 1)
    steps = steps + 1
    if (steps >= ht.asInstanceOf[HashTable].size_table) {
      return -1
    }
  }
  return new_key
}

def rehashing(ht: HashTable): HashTable = {
  var survivors: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = 0
  while (i < BigInt((ht.asInstanceOf[HashTable].values).size)) {
    if (ht.asInstanceOf[HashTable].filled((i.toInt).toInt)) {
      survivors = survivors :+ ht.asInstanceOf[HashTable].values((i.toInt).toInt)
    }
    i = i + 1
  }
  val new_size: BigInt = next_prime(ht.asInstanceOf[HashTable].size_table, 2)
  var new_ht: HashTable = create_table(new_size, ht.asInstanceOf[HashTable].charge_factor, ht.asInstanceOf[HashTable].lim_charge)
  i = 0
  while (i < BigInt((survivors).size)) {
    new_ht = insert_data(new_ht, survivors((i.toInt).toInt))
    i = i + 1
  }
  return new_ht
}

def insert_data(ht: HashTable, data: BigInt): HashTable = {
  val key: BigInt = hash_function(ht, data)
  if (!ht.asInstanceOf[HashTable].filled((key.toInt).toInt)) {
    return set_value(ht, key, data)
  }
  if (ht.asInstanceOf[HashTable].values((key.toInt).toInt) == data) {
    return ht
  }
  val new_key: BigInt = collision_resolution(ht, key)
  if (new_key >= 0) {
    return set_value(ht, new_key, data)
  }
  val resized: HashTable = rehashing(ht)
  return insert_data(resized, data)
}

def keys(ht: HashTable): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = 0
  while (i < BigInt((ht.asInstanceOf[HashTable].values).size)) {
    if (ht.asInstanceOf[HashTable].filled((i.toInt).toInt)) {
      res = res :+ ArrayBuffer(BigInt(i.toString.toDouble.toInt), ht.asInstanceOf[HashTable].values((i.toInt).toInt))
    }
    i = i + 1
  }
  return res
}

def main(): Any = {
  var ht: HashTable = create_table(3, 1, 0.75)
  ht = insert_data(ht, 17)
  ht = insert_data(ht, 18)
  ht = insert_data(ht, 99)
  println(keys(ht))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
