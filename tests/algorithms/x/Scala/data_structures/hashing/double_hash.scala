// Generated by Mochi v0.10.59 on 2025-08-06 22:54:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_prime(n: BigInt): Boolean = {
  if (n < 2) {
    return false
  }
  var i: BigInt = 2
  while (i * i <= n) {
    if (n % i == 0) {
      return false
    }
    i = i + 1
  }
  return true
}

def prev_prime(n: BigInt): BigInt = {
  var p: BigInt = n - 1
  while (p >= 2) {
    if (is_prime(p)) {
      return p
    }
    p = p - 1
  }
  return 1
}

def create_table(size: BigInt): ArrayBuffer[BigInt] = {
  var vals: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < size) {
    vals = vals :+ BigInt((-1).toString.toDouble.toInt)
    i = i + 1
  }
  return vals
}

def hash1(size: BigInt, key: BigInt): BigInt = {
  return key % size
}

def hash2(prime: BigInt, key: BigInt): BigInt = {
  return prime - key % prime
}

def insert_double_hash(values: ArrayBuffer[BigInt], size: BigInt, prime: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var vals: ArrayBuffer[BigInt] = values
  var idx: BigInt = hash1(size, value)
  val step: BigInt = hash2(prime, value)
  var count: BigInt = 0
  while (vals((idx.toInt).toInt) != -1 && count < size) {
    idx = (idx + step) % size
    count = count + 1
  }
  if (vals((idx.toInt).toInt) == -1) {
    vals((idx).toInt) = value
  }
  return vals
}

def table_keys(values: ArrayBuffer[BigInt]): scala.collection.mutable.Map[BigInt,BigInt] = {
  var res: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  var i: BigInt = 0
  while (i < BigInt((values).size)) {
    if (values((i.toInt).toInt) != -1) {
      res.update(i, values((i.toInt).toInt))
    }
    i = i + 1
  }
  return res
}

def run_example(size: BigInt, data: ArrayBuffer[BigInt]): Any = {
  val prime: BigInt = prev_prime(size)
  var table: ArrayBuffer[BigInt] = create_table(size)
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    table = insert_double_hash(table, size, prime, data((i.toInt).toInt))
    i = i + 1
  }
  println(String.valueOf(table_keys(table)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    run_example(3, ArrayBuffer(10, 20, 30))
    run_example(4, ArrayBuffer(10, 20, 30))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
