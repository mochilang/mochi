// Generated by Mochi v0.10.59 on 2025-08-06 23:23:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def isPrime(number: BigInt): Boolean = {
  if (number < 2) {
    return false
  }
  if (number < 4) {
    return true
  }
  if (number % 2 == 0) {
    return false
  }
  var i: BigInt = 3
  while (i * i <= number) {
    if (number % i == 0) {
      return false
    }
    i = i + 2
  }
  return true
}

def nextPrime(value: BigInt, factor: BigInt, desc: Boolean): BigInt = {
  var v: BigInt = value * factor
  val firstValue: BigInt = v
  while (!isPrime(v)) {
    if (desc) {
      v = v - 1
    } else {
      v = v + 1
    }
  }
  if (v == firstValue) {
    if (desc) {
      return nextPrime(v - 1, 1, desc)
    } else {
      return nextPrime(v + 1, 1, desc)
    }
  }
  return v
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(isPrime(0))
    println(isPrime(1))
    println(isPrime(2))
    println(isPrime(3))
    println(isPrime(27))
    println(isPrime(87))
    println(isPrime(563))
    println(isPrime(2999))
    println(isPrime(67483))
    println(nextPrime(14, 1, false))
    println(nextPrime(14, 1, true))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
