// Generated by Mochi v0.10.59 on 2025-08-06 22:55:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Bloom(var size: BigInt, var bits: ArrayBuffer[BigInt])

def ord(ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((ascii).length)) {
    if (ascii.slice((i).toInt, (i + 1).toInt) == ch) {
      return 32 + i
    }
    i = i + 1
  }
  return 0
}

def new_bloom(size: BigInt): Bloom = {
  var bits: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < size) {
    bits = bits :+ BigInt(0)
    i = i + 1
  }
  return Bloom(size, bits)
}

def hash1(value: String, size: BigInt): BigInt = {
  var h: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((value).size)) {
    h = (h * 31 + ord(value.slice((i).toInt, (i + 1).toInt))) % size
    i = i + 1
  }
  return h
}

def hash2(value: String, size: BigInt): BigInt = {
  var h: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((value).size)) {
    h = (h * 131 + ord(value.slice((i).toInt, (i + 1).toInt))) % size
    i = i + 1
  }
  return h
}

def hash_positions(value: String, size: BigInt): ArrayBuffer[BigInt] = {
  val h1: BigInt = hash1(value, size)
  val h2: BigInt = hash2(value, size)
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  res = res :+ h1
  res = res :+ h2
  return res
}

def bloom_add(b: Bloom, value: String): Bloom = {
  val pos: ArrayBuffer[BigInt] = hash_positions(value, b.asInstanceOf[Bloom].size)
  var bits: ArrayBuffer[BigInt] = b.asInstanceOf[Bloom].bits
  var i: BigInt = 0
  while (i < BigInt((pos).size)) {
    val idx: BigInt = b.asInstanceOf[Bloom].size - 1 - pos((i.toInt).toInt)
    bits((idx).toInt) = 1
    i = i + 1
  }
  return Bloom(b.asInstanceOf[Bloom].size, bits)
}

def bloom_exists(b: Bloom, value: String): Boolean = {
  val pos: ArrayBuffer[BigInt] = hash_positions(value, b.asInstanceOf[Bloom].size)
  var i: BigInt = 0
  while (i < BigInt((pos).size)) {
    val idx: BigInt = b.asInstanceOf[Bloom].size - 1 - pos((i.toInt).toInt)
    if (b.asInstanceOf[Bloom].bits((idx.toInt).toInt) != 1) {
      return false
    }
    i = i + 1
  }
  return true
}

def bitstring(b: Bloom): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < b.asInstanceOf[Bloom].size) {
    res = res + String.valueOf(b.asInstanceOf[Bloom].bits((i.toInt).toInt))
    i = i + 1
  }
  return res
}

def format_hash(b: Bloom, value: String): String = {
  val pos: ArrayBuffer[BigInt] = hash_positions(value, b.asInstanceOf[Bloom].size)
  var bits: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < b.asInstanceOf[Bloom].size) {
    bits = bits :+ BigInt(0)
    i = i + 1
  }
  i = 0
  while (i < BigInt((pos).size)) {
    val idx: BigInt = b.asInstanceOf[Bloom].size - 1 - pos((i.toInt).toInt)
    bits((idx).toInt) = 1
    i = i + 1
  }
  var res: String = ""
  i = 0
  while (i < b.asInstanceOf[Bloom].size) {
    res = res + String.valueOf(bits((i.toInt).toInt))
    i = i + 1
  }
  return res
}

def estimated_error_rate(b: Bloom): Double = {
  var ones: BigInt = 0
  var i: BigInt = 0
  while (i < b.asInstanceOf[Bloom].size) {
    if (b.asInstanceOf[Bloom].bits((i.toInt).toInt) == 1) {
      ones = ones + 1
    }
    i = i + 1
  }
  val frac: Double = ones.toString.toDouble / (b.asInstanceOf[Bloom].size).toString.toDouble
  return frac * frac
}

def any_in(b: Bloom, items: ArrayBuffer[String]): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((items).size)) {
    if (bloom_exists(b, items((i.toInt).toInt))) {
      return true
    }
    i = i + 1
  }
  return false
}

def main(): Any = {
  var bloom: Bloom = new_bloom(8)
  println(bitstring(bloom))
  println(bloom_exists(bloom, "Titanic"))
  bloom = bloom_add(bloom, "Titanic")
  println(bitstring(bloom))
  println(bloom_exists(bloom, "Titanic"))
  bloom = bloom_add(bloom, "Avatar")
  println(bloom_exists(bloom, "Avatar"))
  println(format_hash(bloom, "Avatar"))
  println(bitstring(bloom))
  val not_present: ArrayBuffer[String] = ArrayBuffer("The Godfather", "Interstellar", "Parasite", "Pulp Fiction")
  var i: BigInt = 0
  while (i < BigInt((not_present).size)) {
    val film: String = not_present((i.toInt).toInt)
    println(film + ":" + format_hash(bloom, film))
    i = i + 1
  }
  println(any_in(bloom, not_present))
  println(bloom_exists(bloom, "Ratatouille"))
  println(format_hash(bloom, "Ratatouille"))
  println(String.valueOf(estimated_error_rate(bloom)))
  bloom = bloom_add(bloom, "The Godfather")
  println(String.valueOf(estimated_error_rate(bloom)))
  println(bitstring(bloom))
}

val ascii: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
