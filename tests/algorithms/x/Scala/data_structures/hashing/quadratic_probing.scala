// Generated by Mochi v0.10.59 on 2025-08-06 23:24:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class HashTable(var size_table: BigInt, var values: ArrayBuffer[BigInt], var lim_charge: Double)

def create_hash_table(size: BigInt): HashTable = {
  var vals: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < size) {
    vals = vals :+ null.asInstanceOf[BigInt]
    i = i + 1
  }
  return HashTable(size, vals, 0.75)
}

def hash_function(table: HashTable, key: BigInt): BigInt = {
  return key % table.asInstanceOf[HashTable].size_table
}

def balanced_factor(table: HashTable): Double = {
  var count: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((table.asInstanceOf[HashTable].values).size)) {
    if (table.asInstanceOf[HashTable].values((i.toInt).toInt) != null) {
      count = count + 1
    }
    i = i + 1
  }
  return count.toString.toDouble / (table.asInstanceOf[HashTable].size_table).toString.toDouble
}

def collision_resolution(table: HashTable, key: BigInt): BigInt = {
  var i: BigInt = 1
  var new_key: BigInt = hash_function(table, key + i * i)
  while (table.asInstanceOf[HashTable].values((new_key.toInt).toInt) != null && table.asInstanceOf[HashTable].values((new_key.toInt).toInt) != key) {
    i = i + 1
    if (balanced_factor(table) >= table.asInstanceOf[HashTable].lim_charge) {
      return table.asInstanceOf[HashTable].size_table
    }
    new_key = hash_function(table, key + i * i)
  }
  return new_key
}

def insert_data(table: HashTable, data: BigInt): Any = {
  var key: BigInt = hash_function(table, data)
  var vals: ArrayBuffer[BigInt] = table.asInstanceOf[HashTable].values
  if (vals((key.toInt).toInt) == null) {
    vals((key).toInt) = data
  } else {
    if (vals((key.toInt).toInt) == data) {
      table.asInstanceOf[HashTable].values = vals
      return
    } else {
      val new_key: BigInt = collision_resolution(table, key)
      if ((new_key < BigInt((vals).size) && vals((new_key.toInt).toInt) == null).asInstanceOf[Boolean]) {
        vals((new_key).toInt) = data
      }
    }
  }
  table.asInstanceOf[HashTable].values = vals
  return null
}

def int_to_string(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  var num: BigInt = n
  var neg: Boolean = false
  if (num < 0) {
    neg = true
    num = -num
  }
  var res: String = ""
  while (num > 0) {
    val digit: BigInt = num % 10
    val ch: String = "0123456789".slice((digit).toInt, (digit + 1).toInt)
    res = ch + res
    num = num / 10
  }
  if (neg) {
    res = "-" + res
  }
  return res
}

def keys_to_string(table: HashTable): String = {
  var result: String = "{"
  var first: Boolean = true
  var i: BigInt = 0
  while (i < BigInt((table.asInstanceOf[HashTable].values).size)) {
    val v: BigInt = table.asInstanceOf[HashTable].values((i.toInt).toInt)
    if (v != null) {
      if (!first) {
        result = result + ", "
      }
      result = result + int_to_string(i) + ": " + int_to_string(v)
      first = false
    }
    i = i + 1
  }
  result = result + "}"
  return result
}

val qp: HashTable = create_hash_table(8)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    insert_data(qp, 0)
    insert_data(qp, 999)
    insert_data(qp, 111)
    println(keys_to_string(qp))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
