// Generated by Mochi v0.10.59 on 2025-08-06 23:38:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Bucket(var state: BigInt, var key: BigInt, var `val`: BigInt)

case class HashMap(var buckets: ArrayBuffer[Bucket], var len: BigInt, var cap_num: BigInt, var cap_den: BigInt, var initial_size: BigInt)

def make_buckets(n: BigInt): ArrayBuffer[Bucket] = {
  var buckets: ArrayBuffer[Bucket] = ArrayBuffer[Bucket]()
  var i: BigInt = 0
  while (i < n) {
    buckets = buckets :+ Bucket(0, 0, 0)
    i = i + 1
  }
  return buckets
}

def hashmap_new(initial_size: BigInt): HashMap = {
  return HashMap(make_buckets(initial_size), 0, 3, 4, initial_size)
}

def bucket_index(hm: HashMap, key: BigInt): BigInt = {
  var ind: BigInt = key % BigInt((hm.buckets).size)
  if (ind < 0) {
    ind = ind + BigInt((hm.buckets).size)
  }
  return ind
}

def next_index(hm: HashMap, ind: BigInt): BigInt = {
  return (ind + 1) % BigInt((hm.buckets).size)
}

def try_set(hm: HashMap, ind: BigInt, key: BigInt, `val`: BigInt): Boolean = {
  var buckets: ArrayBuffer[Bucket] = hm.buckets
  val b: Bucket = buckets((ind.toInt).toInt)
  if ((b.asInstanceOf[Bucket].state == 0 || b.asInstanceOf[Bucket].state == 2).asInstanceOf[Boolean]) {
    buckets((ind).toInt) = Bucket(1, key, `val`)
    hm.buckets = buckets
    hm.len = hm.len + 1
    return true
  }
  if (b.asInstanceOf[Bucket].key == key) {
    buckets((ind).toInt) = Bucket(1, key, `val`)
    hm.buckets = buckets
    return true
  }
  return false
}

def is_full(hm: HashMap): Boolean = {
  val limit: BigInt = BigInt((hm.buckets).size) * hm.cap_num / hm.cap_den
  return hm.len >= limit
}

def is_sparse(hm: HashMap): Boolean = {
  if (BigInt((hm.buckets).size) <= hm.initial_size) {
    return false
  }
  val limit: BigInt = BigInt((hm.buckets).size) * hm.cap_num / (2 * hm.cap_den)
  return hm.len < limit
}

def resize(hm: HashMap, new_size: BigInt): Any = {
  val old: ArrayBuffer[Bucket] = hm.buckets
  hm.buckets = make_buckets(new_size)
  hm.len = 0
  var i: BigInt = 0
  while (i < BigInt((old).size)) {
    val it: Bucket = old((i.toInt).toInt)
    if (it.asInstanceOf[Bucket].state == 1) {
      add_item(hm, it.asInstanceOf[Bucket].key, it.asInstanceOf[Bucket].`val`)
    }
    i = i + 1
  }
}

def size_up(hm: HashMap): Any = {
  resize(hm, BigInt((hm.buckets).size) * 2)
}

def size_down(hm: HashMap): Any = {
  resize(hm, BigInt((hm.buckets).size) / 2)
}

def add_item(hm: HashMap, key: BigInt, `val`: BigInt): Any = {
  var ind: BigInt = bucket_index(hm, key)
  var i: BigInt = 0
  val _br2 = new Breaks
  _br2.breakable {
    while (i < BigInt((hm.buckets).size)) {
      if (try_set(hm, ind, key, `val`)) {
        _br2.break()
      }
      ind = next_index(hm, ind)
      i = i + 1
    }
  }
}

def hashmap_set(hm: HashMap, key: BigInt, `val`: BigInt): Any = {
  if (is_full(hm)) {
    size_up(hm)
  }
  add_item(hm, key, `val`)
}

def hashmap_get(hm: HashMap, key: BigInt): BigInt = {
  var buckets: ArrayBuffer[Bucket] = hm.buckets
  var ind: BigInt = bucket_index(hm, key)
  var i: BigInt = 0
  val _br3 = new Breaks
  _br3.breakable {
    while (i < BigInt((buckets).size)) {
      val it: Bucket = buckets((ind.toInt).toInt)
      if (it.asInstanceOf[Bucket].state == 0) {
        _br3.break()
      }
      if ((it.asInstanceOf[Bucket].state == 1 && it.asInstanceOf[Bucket].key == key).asInstanceOf[Boolean]) {
        return it.asInstanceOf[Bucket].`val`
      }
      ind = next_index(hm, ind)
      i = i + 1
    }
  }
  return 0
}

def hashmap_del(hm: HashMap, key: BigInt): Any = {
  var buckets: ArrayBuffer[Bucket] = hm.buckets
  var ind: BigInt = bucket_index(hm, key)
  var i: BigInt = 0
  val _br4 = new Breaks
  _br4.breakable {
    while (i < BigInt((buckets).size)) {
      val it: Bucket = buckets((ind.toInt).toInt)
      if (it.asInstanceOf[Bucket].state == 0) {
        println("KeyError: " + String.valueOf(key))
        return
      }
      if ((it.asInstanceOf[Bucket].state == 1 && it.asInstanceOf[Bucket].key == key).asInstanceOf[Boolean]) {
        buckets((ind).toInt) = Bucket(2, 0, 0)
        hm.buckets = buckets
        hm.len = hm.len - 1
        _br4.break()
      }
      ind = next_index(hm, ind)
      i = i + 1
    }
  }
  if (is_sparse(hm)) {
    size_down(hm)
  }
  return null
}

def hashmap_len(hm: HashMap): BigInt = {
  return hm.len
}

def hashmap_repr(hm: HashMap): String = {
  var out: String = "HashMap("
  var first: Boolean = true
  var i: BigInt = 0
  while (i < BigInt((hm.buckets).size)) {
    val b: Bucket = hm.buckets((i.toInt).toInt)
    if (b.asInstanceOf[Bucket].state == 1) {
      if (!first) {
        out = out + ", "
      } else {
        first = false
      }
      out = out + String.valueOf(b.asInstanceOf[Bucket].key) + ": " + String.valueOf(b.asInstanceOf[Bucket].`val`)
    }
    i = i + 1
  }
  out = out + ")"
  return out
}

var hm: HashMap = hashmap_new(5)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    hashmap_set(hm, 1, 10)
    hashmap_set(hm, 2, 20)
    hashmap_set(hm, 3, 30)
    println(hashmap_repr(hm))
    println(String.valueOf(hashmap_get(hm, 2)))
    hashmap_del(hm, 1)
    println(hashmap_repr(hm))
    println(String.valueOf(hashmap_len(hm)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
