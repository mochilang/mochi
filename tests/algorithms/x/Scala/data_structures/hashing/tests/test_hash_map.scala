// Generated by Mochi v0.10.59 on 2025-08-06 23:24:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Entry(var key: String, var value: String)

case class HashMap(var entries: ArrayBuffer[Entry])

case class GetResult(var found: Boolean, var value: String)

case class DelResult(var map: HashMap, var ok: Boolean)

def make_hash_map(): HashMap = {
  return HashMap(ArrayBuffer())
}

def hm_len(m: HashMap): BigInt = {
  return BigInt((m.asInstanceOf[HashMap].entries).size)
}

def hm_set(m: HashMap, key: String, value: String): HashMap = {
  var entries: ArrayBuffer[Entry] = m.asInstanceOf[HashMap].entries
  var updated: Boolean = false
  var new_entries: ArrayBuffer[Entry] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((entries).size)) {
    val e: Entry = entries((i.toInt).toInt)
    if (e.asInstanceOf[Entry].key == key) {
      new_entries = new_entries :+ Entry(key, value)
      updated = true
    } else {
      new_entries = new_entries :+ e
    }
    i = i + 1
  }
  if (!updated) {
    new_entries = new_entries :+ Entry(key, value)
  }
  return HashMap(new_entries)
}

def hm_get(m: HashMap, key: String): GetResult = {
  var i: BigInt = 0
  while (i < BigInt((m.asInstanceOf[HashMap].entries).size)) {
    val e: Entry = m.asInstanceOf[HashMap].entries((i.toInt).toInt)
    if (e.asInstanceOf[Entry].key == key) {
      return GetResult(true, e.value)
    }
    i = i + 1
  }
  return GetResult(false, "")
}

def hm_del(m: HashMap, key: String): DelResult = {
  var entries: ArrayBuffer[Entry] = m.asInstanceOf[HashMap].entries
  var new_entries: ArrayBuffer[Entry] = ArrayBuffer()
  var removed: Boolean = false
  var i: BigInt = 0
  while (i < BigInt((entries).size)) {
    val e: Entry = entries((i.toInt).toInt)
    if (e.asInstanceOf[Entry].key == key) {
      removed = true
    } else {
      new_entries = new_entries :+ e
    }
    i = i + 1
  }
  if (removed) {
    return DelResult(HashMap(new_entries), true)
  }
  return DelResult(m, false)
}

def test_add_items(): Boolean = {
  var h: HashMap = make_hash_map()
  h = hm_set(h, "key_a", "val_a")
  h = hm_set(h, "key_b", "val_b")
  val a: GetResult = hm_get(h, "key_a")
  val b: GetResult = hm_get(h, "key_b")
  return ((((hm_len(h) == 2 && a.asInstanceOf[GetResult].found).asInstanceOf[Boolean] && b.asInstanceOf[GetResult].found).asInstanceOf[Boolean] && a.value == "val_a").asInstanceOf[Boolean] && b.value == "val_b").asInstanceOf[Boolean]
}

def test_overwrite_items(): Boolean = {
  var h: HashMap = make_hash_map()
  h = hm_set(h, "key_a", "val_a")
  h = hm_set(h, "key_a", "val_b")
  val a: GetResult = hm_get(h, "key_a")
  return ((hm_len(h) == 1 && a.asInstanceOf[GetResult].found).asInstanceOf[Boolean] && a.value == "val_b").asInstanceOf[Boolean]
}

def test_delete_items(): Boolean = {
  var h: HashMap = make_hash_map()
  h = hm_set(h, "key_a", "val_a")
  h = hm_set(h, "key_b", "val_b")
  val d1: DelResult = hm_del(h, "key_a")
  h = d1.asInstanceOf[DelResult].map
  val d2: DelResult = hm_del(h, "key_b")
  h = d2.asInstanceOf[DelResult].map
  h = hm_set(h, "key_a", "val_a")
  val d3: DelResult = hm_del(h, "key_a")
  h = d3.asInstanceOf[DelResult].map
  return hm_len(h) == 0
}

def test_access_absent_items(): Boolean = {
  var h: HashMap = make_hash_map()
  val g1: GetResult = hm_get(h, "key_a")
  val d1: DelResult = hm_del(h, "key_a")
  h = d1.asInstanceOf[DelResult].map
  h = hm_set(h, "key_a", "val_a")
  val d2: DelResult = hm_del(h, "key_a")
  h = d2.asInstanceOf[DelResult].map
  val d3: DelResult = hm_del(h, "key_a")
  h = d3.asInstanceOf[DelResult].map
  val g2: GetResult = hm_get(h, "key_a")
  return (((((g1.asInstanceOf[GetResult].found == false && d1.asInstanceOf[DelResult].ok == false).asInstanceOf[Boolean] && d2.asInstanceOf[DelResult].ok).asInstanceOf[Boolean] && d3.asInstanceOf[DelResult].ok == false).asInstanceOf[Boolean] && g2.asInstanceOf[GetResult].found == false).asInstanceOf[Boolean] && hm_len(h) == 0).asInstanceOf[Boolean]
}

def test_add_with_resize_up(): Boolean = {
  var h: HashMap = make_hash_map()
  var i: BigInt = 0
  while (i < 5) {
    val s: String = String.valueOf(i)
    h = hm_set(h, s, s)
    i = i + 1
  }
  return hm_len(h) == 5
}

def test_add_with_resize_down(): Boolean = {
  var h: HashMap = make_hash_map()
  var i: BigInt = 0
  while (i < 5) {
    val s: String = String.valueOf(i)
    h = hm_set(h, s, s)
    i = i + 1
  }
  var j: BigInt = 0
  while (j < 5) {
    val s: String = String.valueOf(j)
    val d: DelResult = hm_del(h, s)
    h = d.asInstanceOf[DelResult].map
    j = j + 1
  }
  h = hm_set(h, "key_a", "val_b")
  val a: GetResult = hm_get(h, "key_a")
  return ((hm_len(h) == 1 && a.asInstanceOf[GetResult].found).asInstanceOf[Boolean] && a.value == "val_b").asInstanceOf[Boolean]
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(test_add_items())
    println(test_overwrite_items())
    println(test_delete_items())
    println(test_access_absent_items())
    println(test_add_with_resize_up())
    println(test_add_with_resize_down())
    println(true)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
