// Generated by Mochi v0.10.59 on 2025-08-06 22:21:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Tree(var values: ArrayBuffer[BigInt], var lefts: ArrayBuffer[BigInt], var rights: ArrayBuffer[BigInt], var root: BigInt)

case class Pair(var idx: BigInt, var hd: BigInt)

def make_tree(): Tree = {
  return Tree(ArrayBuffer(3, 9, 20, 15, 7), ArrayBuffer(1, NIL, 3, NIL, NIL), ArrayBuffer(2, NIL, 4, NIL, NIL), 0)
}

def index_of(xs: ArrayBuffer[BigInt], x: BigInt): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return i
    }
    i = i + 1
  }
  return NIL
}

def sort_pairs(hds: ArrayBuffer[BigInt], vals: ArrayBuffer[BigInt]): Any = {
  var i: BigInt = 0
  while (i < BigInt((hds).size)) {
    var j: BigInt = i
    while (j > 0 && hds(((j - 1).toInt).toInt) > hds((j.toInt).toInt)) {
      val hd_tmp: BigInt = hds(((j - 1).toInt).toInt)
      hds((j - 1).toInt) = hds((j.toInt).toInt)
      hds((j).toInt) = hd_tmp
      val val_tmp: BigInt = vals(((j - 1).toInt).toInt)
      vals((j - 1).toInt) = vals((j.toInt).toInt)
      vals((j).toInt) = val_tmp
      j = j - 1
    }
    i = i + 1
  }
}

def right_view(t: Tree): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var queue: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((t.asInstanceOf[Tree].root).toString.toDouble.toInt))
  while (BigInt((queue).size) > 0) {
    val size: BigInt = BigInt((queue).size)
    var i: BigInt = 0
    while (i < size) {
      val idx: BigInt = queue((i.toInt).toInt)
      if (t.asInstanceOf[Tree].lefts((idx.toInt).toInt) != NIL) {
        queue = queue :+ t.asInstanceOf[Tree].lefts((idx.toInt).toInt)
      }
      if (t.asInstanceOf[Tree].rights((idx.toInt).toInt) != NIL) {
        queue = queue :+ t.asInstanceOf[Tree].rights((idx.toInt).toInt)
      }
      i = i + 1
    }
    res = res :+ t.asInstanceOf[Tree].values((queue(((size - 1).toInt).toInt).toInt).toInt)
    queue = queue.slice((size).toInt, (BigInt((queue).size)).toInt)
  }
  return res
}

def left_view(t: Tree): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var queue: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((t.asInstanceOf[Tree].root).toString.toDouble.toInt))
  while (BigInt((queue).size) > 0) {
    val size: BigInt = BigInt((queue).size)
    var i: BigInt = 0
    while (i < size) {
      val idx: BigInt = queue((i.toInt).toInt)
      if (t.asInstanceOf[Tree].lefts((idx.toInt).toInt) != NIL) {
        queue = queue :+ t.asInstanceOf[Tree].lefts((idx.toInt).toInt)
      }
      if (t.asInstanceOf[Tree].rights((idx.toInt).toInt) != NIL) {
        queue = queue :+ t.asInstanceOf[Tree].rights((idx.toInt).toInt)
      }
      i = i + 1
    }
    res = res :+ t.asInstanceOf[Tree].values((queue((0.toInt).toInt).toInt).toInt)
    queue = queue.slice((size).toInt, (BigInt((queue).size)).toInt)
  }
  return res
}

def top_view(t: Tree): ArrayBuffer[BigInt] = {
  var hds: ArrayBuffer[BigInt] = ArrayBuffer()
  var vals: ArrayBuffer[BigInt] = ArrayBuffer()
  var queue_idx: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((t.asInstanceOf[Tree].root).toString.toDouble.toInt))
  var queue_hd: ArrayBuffer[BigInt] = ArrayBuffer(0)
  while (BigInt((queue_idx).size) > 0) {
    val idx: BigInt = queue_idx((0.toInt).toInt)
    queue_idx = queue_idx.slice((1).toInt, (BigInt((queue_idx).size)).toInt)
    val hd: BigInt = queue_hd((0.toInt).toInt)
    queue_hd = queue_hd.slice((1).toInt, (BigInt((queue_hd).size)).toInt)
    if (index_of(hds, hd) == NIL) {
      hds = hds :+ hd
      vals = vals :+ t.asInstanceOf[Tree].values((idx.toInt).toInt)
    }
    if (t.asInstanceOf[Tree].lefts((idx.toInt).toInt) != NIL) {
      queue_idx = queue_idx :+ t.asInstanceOf[Tree].lefts((idx.toInt).toInt)
      queue_hd = queue_hd :+ hd - 1
    }
    if (t.asInstanceOf[Tree].rights((idx.toInt).toInt) != NIL) {
      queue_idx = queue_idx :+ t.asInstanceOf[Tree].rights((idx.toInt).toInt)
      queue_hd = queue_hd :+ hd + 1
    }
  }
  sort_pairs(hds, vals)
  return vals
}

def bottom_view(t: Tree): ArrayBuffer[BigInt] = {
  var hds: ArrayBuffer[BigInt] = ArrayBuffer()
  var vals: ArrayBuffer[BigInt] = ArrayBuffer()
  var queue_idx: ArrayBuffer[BigInt] = ArrayBuffer(BigInt((t.asInstanceOf[Tree].root).toString.toDouble.toInt))
  var queue_hd: ArrayBuffer[BigInt] = ArrayBuffer(0)
  while (BigInt((queue_idx).size) > 0) {
    val idx: BigInt = queue_idx((0.toInt).toInt)
    queue_idx = queue_idx.slice((1).toInt, (BigInt((queue_idx).size)).toInt)
    val hd: BigInt = queue_hd((0.toInt).toInt)
    queue_hd = queue_hd.slice((1).toInt, (BigInt((queue_hd).size)).toInt)
    val pos: BigInt = index_of(hds, hd)
    if (pos == NIL) {
      hds = hds :+ hd
      vals = vals :+ t.asInstanceOf[Tree].values((idx.toInt).toInt)
    } else {
      vals((pos).toInt) = t.asInstanceOf[Tree].values((idx.toInt).toInt)
    }
    if (t.asInstanceOf[Tree].lefts((idx.toInt).toInt) != NIL) {
      queue_idx = queue_idx :+ t.asInstanceOf[Tree].lefts((idx.toInt).toInt)
      queue_hd = queue_hd :+ hd - 1
    }
    if (t.asInstanceOf[Tree].rights((idx.toInt).toInt) != NIL) {
      queue_idx = queue_idx :+ t.asInstanceOf[Tree].rights((idx.toInt).toInt)
      queue_hd = queue_hd :+ hd + 1
    }
  }
  sort_pairs(hds, vals)
  return vals
}

val NIL: BigInt = 0 - 1

val tree: Tree = make_tree()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(right_view(tree))
    println(left_view(tree))
    println(top_view(tree))
    println(bottom_view(tree))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
