// Generated by Mochi v0.10.59 on 2025-08-06 22:23:14 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def binomial_coefficient(n: BigInt, k: BigInt): BigInt = {
  var result: BigInt = 1
  var kk: BigInt = k
  if (k > n - k) {
    kk = n - k
  }
  for (i <- (0).toInt until (kk).toInt) {
    result = result * (n - i)
    result = result / (i + 1)
  }
  return result
}

def catalan_number(node_count: BigInt): BigInt = {
  return binomial_coefficient(2 * node_count, node_count) / (node_count + 1)
}

def factorial(n: BigInt): BigInt = {
  if (n < 0) {
    println("factorial() not defined for negative values")
    return 0
  }
  var result: BigInt = 1
  for (i <- (1).toInt until (n + 1).toInt) {
    result = result * i
  }
  return result
}

def binary_tree_count(node_count: BigInt): BigInt = {
  return catalan_number(node_count) * factorial(node_count)
}

val input_str: String = (Option(scala.io.StdIn.readLine())).getOrElse("q")

val node_count: BigInt = BigInt(input_str)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Enter the number of nodes:")
    if (node_count <= 0) {
      println("We need some nodes to work with.")
    } else {
      val bst: BigInt = catalan_number(node_count)
      val bt: BigInt = binary_tree_count(node_count)
      println((List("Given", node_count, "nodes, there are", bt, "binary trees and", bst, "binary search trees.")).mkString(" "))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
