// Generated by Mochi v0.10.59 on 2025-08-06 22:22:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

sealed trait Tree
case object Leaf extends Tree
case class Node(var left: Any, var value: BigInt, var right: Any) extends Tree


def merge_two_binary_trees(t1: Tree, t2: Tree): Tree = {
  return (t1 match { case Leaf => t2 case Node(l1, v1, r1) => t2 match { case Leaf => t1 case Node(l2, v2, r2) => Node(merge_two_binary_trees(l1.asInstanceOf[Tree], l2.asInstanceOf[Tree]), BigInt(v1.toString.toDouble.toInt) + BigInt(v2.toString.toDouble.toInt), merge_two_binary_trees(r1.asInstanceOf[Tree], r2.asInstanceOf[Tree])) } }).asInstanceOf[Tree]
}

def is_leaf(t: Tree): Boolean = {
  return (t match { case Leaf => true case _ => false }).asInstanceOf[Boolean]
}

def get_left(t: Tree): Tree = {
  return (t match { case Node(l, _, _) => l case _ => Leaf() }).asInstanceOf[Tree]
}

def get_right(t: Tree): Tree = {
  return (t match { case Node(_, _, r) => r case _ => Leaf() }).asInstanceOf[Tree]
}

def get_value(t: Tree): BigInt = {
  return BigInt((t match { case Node(_, v, _) => v case _ => 0 }).toString.toDouble.toInt)
}

def print_preorder(t: Tree): Any = {
  if (!is_leaf(t)) {
    val v: BigInt = get_value(t)
    val l: Any = get_left(t)
    val r: Any = get_right(t)
    println(v)
    print_preorder(l.asInstanceOf[Tree])
    print_preorder(r.asInstanceOf[Tree])
  }
}

val tree1: Node = Node(Node(Node(Leaf(), 4, Leaf()), 2, Leaf()), 1, Node(Leaf(), 3, Leaf()))

val tree2: Node = Node(Node(Leaf(), 4, Node(Leaf(), 9, Leaf())), 2, Node(Leaf(), 6, Node(Leaf(), 5, Leaf())))

val merged_tree: Any = merge_two_binary_trees(tree1.asInstanceOf[Tree], tree2.asInstanceOf[Tree])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Tree1 is:")
    print_preorder(tree1.asInstanceOf[Tree])
    println("Tree2 is:")
    print_preorder(tree2.asInstanceOf[Tree])
    println("Merged Tree is:")
    print_preorder(merged_tree.asInstanceOf[Tree])
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
