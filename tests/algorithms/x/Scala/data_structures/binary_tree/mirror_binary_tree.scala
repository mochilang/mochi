// Generated by Mochi v0.10.59 on 2025-08-06 22:22:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Tree(var values: ArrayBuffer[BigInt], var left: ArrayBuffer[BigInt], var right: ArrayBuffer[BigInt], var root: BigInt)

def mirror_node(left: ArrayBuffer[BigInt], right: ArrayBuffer[BigInt], idx: BigInt): Any = {
  if (idx == -1) {
    return
  }
  val temp: BigInt = left((idx.toInt).toInt)
  left((idx).toInt) = right((idx.toInt).toInt)
  right((idx).toInt) = temp
  mirror_node(left, right, left((idx.toInt).toInt))
  mirror_node(left, right, right((idx.toInt).toInt))
  return null
}

def mirror(tree: Tree): Tree = {
  mirror_node(tree.asInstanceOf[Tree].left, tree.asInstanceOf[Tree].right, tree.asInstanceOf[Tree].root)
  return tree
}

def inorder(tree: Tree, idx: BigInt): ArrayBuffer[BigInt] = {
  if (idx == -1) {
    return ArrayBuffer()
  }
  val left_vals: ArrayBuffer[BigInt] = inorder(tree, tree.asInstanceOf[Tree].left((idx.toInt).toInt))
  val right_vals: ArrayBuffer[BigInt] = inorder(tree, tree.asInstanceOf[Tree].right((idx.toInt).toInt))
  return (left_vals ++ ArrayBuffer(tree.asInstanceOf[Tree].values((idx.toInt).toInt)) ++ right_vals).asInstanceOf[ArrayBuffer[BigInt]]
}

def make_tree_zero(): Tree = {
  return Tree(ArrayBuffer(0), ArrayBuffer(-1), ArrayBuffer(-1), 0)
}

def make_tree_seven(): Tree = {
  return Tree(ArrayBuffer(1, 2, 3, 4, 5, 6, 7), ArrayBuffer(1, 3, 5, -1, -1, -1, -1), ArrayBuffer(2, 4, 6, -1, -1, -1, -1), 0)
}

def make_tree_nine(): Tree = {
  return Tree(ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9), ArrayBuffer(1, 3, -1, 6, -1, -1, -1, -1, -1), ArrayBuffer(2, 4, 5, 7, 8, -1, -1, -1, -1), 0)
}

def main(): Any = {
  val names: ArrayBuffer[String] = ArrayBuffer("zero", "seven", "nine")
  val trees: ArrayBuffer[Tree] = ArrayBuffer(make_tree_zero(), make_tree_seven(), make_tree_nine())
  var i: BigInt = 0
  while (i < BigInt((trees).size)) {
    val tree: Tree = trees((i.toInt).toInt)
    println("      The " + names((i.toInt).toInt) + " tree: " + String.valueOf(inorder(tree, tree.asInstanceOf[Tree].root)))
    val mirrored: Tree = mirror(tree)
    println("Mirror of " + names((i.toInt).toInt) + " tree: " + String.valueOf(inorder(mirrored, mirrored.asInstanceOf[Tree].root)))
    i = i + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
