// Generated by Mochi v0.10.59 on 2025-08-06 22:23:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def left_child(idx: BigInt): BigInt = {
  return idx * 2
}

def right_child(idx: BigInt): BigInt = {
  return idx * 2 + 1
}

def build(idx: BigInt, left: BigInt, right: BigInt): Any = {
  if (left == right) {
    st((idx).toInt) = A((left.toInt).toInt)
  } else {
    val mid: BigInt = (left + right) / 2
    build(left_child(idx), left, mid)
    build(right_child(idx), mid + 1, right)
    val left_val: BigInt = st(((left_child(idx)).toInt).toInt)
    val right_val: BigInt = st(((right_child(idx)).toInt).toInt)
    st((idx).toInt) = (if (left_val > right_val) left_val else right_val)
  }
}

def update_recursive(idx: BigInt, left: BigInt, right: BigInt, a: BigInt, b: BigInt, `val`: BigInt): Boolean = {
  if ((right < a || left > b).asInstanceOf[Boolean]) {
    return true
  }
  if (left == right) {
    st((idx).toInt) = `val`
    return true
  }
  val mid: BigInt = (left + right) / 2
  update_recursive(left_child(idx), left, mid, a, b, `val`)
  update_recursive(right_child(idx), mid + 1, right, a, b, `val`)
  val left_val: BigInt = st(((left_child(idx)).toInt).toInt)
  val right_val: BigInt = st(((right_child(idx)).toInt).toInt)
  st((idx).toInt) = (if (left_val > right_val) left_val else right_val)
  return true
}

def update(a: BigInt, b: BigInt, `val`: BigInt): Boolean = {
  return update_recursive(1, 0, N - 1, a - 1, b - 1, `val`)
}

def query_recursive(idx: BigInt, left: BigInt, right: BigInt, a: BigInt, b: BigInt): BigInt = {
  if ((right < a || left > b).asInstanceOf[Boolean]) {
    return NEG_INF
  }
  if ((left >= a && right <= b).asInstanceOf[Boolean]) {
    return st((idx.toInt).toInt)
  }
  val mid: BigInt = (left + right) / 2
  val q1: BigInt = query_recursive(left_child(idx), left, mid, a, b)
  val q2: BigInt = query_recursive(right_child(idx), mid + 1, right, a, b)
  return (if (q1 > q2) q1 else q2)
}

def query(a: BigInt, b: BigInt): BigInt = {
  return query_recursive(1, 0, N - 1, a - 1, b - 1)
}

def show_data(): Any = {
  var i: BigInt = 0
  var show_list: ArrayBuffer[BigInt] = ArrayBuffer()
  while (i < N) {
    show_list = show_list :+ query(i + 1, i + 1)
    i = i + 1
  }
  println(show_list)
}

def main(): Any = {
  A = ArrayBuffer(1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8)
  N = BigInt((A).size)
  var i: BigInt = 0
  while (i < 4 * N) {
    st = st :+ BigInt(0)
    i = i + 1
  }
  if (N > 0) {
    build(1, 0, N - 1)
  }
  println(query(4, 6))
  println(query(7, 11))
  println(query(7, 12))
  update(1, 3, 111)
  println(query(1, 15))
  update(7, 8, 235)
  show_data()
}

var A: ArrayBuffer[BigInt] = ArrayBuffer()

var N: BigInt = 0

var st: ArrayBuffer[BigInt] = ArrayBuffer()

val NEG_INF: BigInt = -1000000000

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
