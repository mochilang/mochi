// Generated by Mochi v0.10.59 on 2025-08-06 22:24:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SplitResult(var left: BigInt, var right: BigInt)

def random(): Double = {
  seed = (seed * 13 + 7) % 100
  return seed.toString.toDouble / 100.0
}

def new_node(value: BigInt): BigInt = {
  node_values = node_values :+ value
  node_priors = node_priors :+ random()
  node_lefts = node_lefts :+ NIL
  node_rights = node_rights :+ NIL
  return BigInt((node_values).size) - 1
}

def split(root: BigInt, value: BigInt): SplitResult = {
  if (root == NIL) {
    return SplitResult(NIL, NIL)
  }
  if (value < node_values((root.toInt).toInt)) {
    val res = ArrayBuffer(node_lefts((root.toInt).toInt).split(value): _*)
    node_lefts((root).toInt) = res.asInstanceOf[SplitResult].right
    return SplitResult(res.asInstanceOf[SplitResult].left, root)
  }
  val res = ArrayBuffer(node_rights((root.toInt).toInt).split(value): _*)
  node_rights((root).toInt) = res.asInstanceOf[SplitResult].left
  return SplitResult(root, res.asInstanceOf[SplitResult].right)
}

def merge(left: BigInt, right: BigInt): BigInt = {
  if (left == NIL) {
    return right
  }
  if (right == NIL) {
    return left
  }
  if (node_priors((left.toInt).toInt) < node_priors((right.toInt).toInt)) {
    node_rights((left).toInt) = merge(node_rights((left.toInt).toInt), right)
    return left
  }
  node_lefts((right).toInt) = merge(left, node_lefts((right.toInt).toInt))
  return right
}

def insert(root: BigInt, value: BigInt): BigInt = {
  val node: BigInt = new_node(value)
  val res = ArrayBuffer(root.split(value): _*)
  return merge(merge(res.asInstanceOf[SplitResult].left, node), res.asInstanceOf[SplitResult].right)
}

def erase(root: BigInt, value: BigInt): BigInt = {
  val res1 = ArrayBuffer(root.split(value - 1): _*)
  val res2 = ArrayBuffer(res1.asInstanceOf[SplitResult].right.split(value): _*)
  return merge(res1.asInstanceOf[SplitResult].left, res2.asInstanceOf[SplitResult].right)
}

def inorder(i: BigInt, acc: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (i == NIL) {
    return acc
  }
  val left_acc: ArrayBuffer[BigInt] = inorder(node_lefts((i.toInt).toInt), acc)
  val with_node: ArrayBuffer[BigInt] = left_acc :+ node_values((i.toInt).toInt)
  return inorder(node_rights((i.toInt).toInt), with_node)
}

def main(): Any = {
  var root: BigInt = NIL
  root = insert(root, 1)
  println(String.valueOf(inorder(root, ArrayBuffer())))
  root = insert(root, 3)
  root = insert(root, 5)
  root = insert(root, 17)
  root = insert(root, 19)
  root = insert(root, 2)
  root = insert(root, 16)
  root = insert(root, 4)
  root = insert(root, 0)
  println(String.valueOf(inorder(root, ArrayBuffer())))
  root = insert(root, 4)
  root = insert(root, 4)
  root = insert(root, 4)
  println(String.valueOf(inorder(root, ArrayBuffer())))
  root = erase(root, 0)
  println(String.valueOf(inorder(root, ArrayBuffer())))
  root = erase(root, 4)
  println(String.valueOf(inorder(root, ArrayBuffer())))
}

val NIL: BigInt = 0 - 1

var node_values: ArrayBuffer[BigInt] = ArrayBuffer()

var node_priors: ArrayBuffer[Double] = ArrayBuffer()

var node_lefts: ArrayBuffer[BigInt] = ArrayBuffer()

var node_rights: ArrayBuffer[BigInt] = ArrayBuffer()

var seed: BigInt = 1

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
