// Generated by Mochi v0.10.59 on 2025-08-06 22:21:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

sealed trait Tree
case object Empty extends Tree
case class Node(var left: Any, var value: BigInt, var right: Any) extends Tree


def dfs(node: Tree, target: BigInt, current: BigInt): BigInt = {
  return BigInt((node match { case Empty => 0 case Node(l, v, r) => (if (current + v == target) 1 else 0) + dfs(l.asInstanceOf[Tree], target, current + v) + dfs(r.asInstanceOf[Tree], target, current + v) }).toString.toDouble.toInt)
}

def path_sum(node: Tree, target: BigInt): BigInt = {
  return BigInt((node match { case Empty => 0 case Node(l, v, r) => dfs(node, target, 0) + path_sum(l.asInstanceOf[Tree], target) + path_sum(r.asInstanceOf[Tree], target) }).toString.toDouble.toInt)
}

def sample_tree_one(): Tree = {
  return (Node(Node(Node(Node(Empty, 3, Empty), 3, Node(Empty, -2, Empty)), 5, Node(Empty, 2, Node(Empty, 1, Empty))), 10, Node(Empty, -3, Node(Empty, 11, Empty)))).asInstanceOf[Tree]
}

def sample_tree_two(): Tree = {
  return (Node(Node(Node(Node(Empty, 3, Empty), 3, Node(Empty, -2, Empty)), 5, Node(Empty, 2, Node(Empty, 1, Empty))), 10, Node(Empty, -3, Node(Empty, 10, Empty)))).asInstanceOf[Tree]
}

def main(): Any = {
  val tree1: Any = sample_tree_one()
  println(path_sum(tree1.asInstanceOf[Tree], 8))
  println(path_sum(tree1.asInstanceOf[Tree], 7))
  val tree2: Any = sample_tree_two()
  println(path_sum(tree2.asInstanceOf[Tree], 8))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
