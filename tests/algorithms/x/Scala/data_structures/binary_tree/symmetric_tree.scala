// Generated by Mochi v0.10.59 on 2025-08-06 22:23:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_symmetric_tree(): ArrayBuffer[ArrayBuffer[BigInt]] = {
  return ArrayBuffer(ArrayBuffer(1, 1, 2), ArrayBuffer(2, 3, 4), ArrayBuffer(2, 5, 6), ArrayBuffer(3, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(4, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(4, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(3, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)))
}

def make_asymmetric_tree(): ArrayBuffer[ArrayBuffer[BigInt]] = {
  return ArrayBuffer(ArrayBuffer(1, 1, 2), ArrayBuffer(2, 3, 4), ArrayBuffer(2, 5, 6), ArrayBuffer(3, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(4, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(3, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)), ArrayBuffer(4, BigInt((-1).toString.toDouble.toInt), BigInt((-1).toString.toDouble.toInt)))
}

def is_symmetric_tree(tree: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  var stack: ArrayBuffer[BigInt] = ArrayBuffer(tree((0.toInt).toInt)((1.toInt).toInt), tree((0.toInt).toInt)((2.toInt).toInt))
  val _ct0 = new Breaks
  while (BigInt((stack).size) >= 2) {
    _ct0.breakable {
      val left: BigInt = stack(((BigInt((stack).size) - 2).toInt).toInt)
      val right: BigInt = stack(((BigInt((stack).size) - 1).toInt).toInt)
      stack = stack.slice((0).toInt, (BigInt((stack).size) - 2).toInt)
      if ((left == -1 && right == -1).asInstanceOf[Boolean]) {
        _ct0.break()
      }
      if ((left == -1 || right == -1).asInstanceOf[Boolean]) {
        return false
      }
      val lnode: ArrayBuffer[BigInt] = tree((left.toInt).toInt)
      val rnode: ArrayBuffer[BigInt] = tree((right.toInt).toInt)
      if (lnode((0.toInt).toInt) != rnode((0.toInt).toInt)) {
        return false
      }
      stack = stack :+ lnode((1.toInt).toInt)
      stack = stack :+ rnode((2.toInt).toInt)
      stack = stack :+ lnode((2.toInt).toInt)
      stack = stack :+ rnode((1.toInt).toInt)
    }
  }
  return true
}

val symmetric_tree: ArrayBuffer[ArrayBuffer[BigInt]] = make_symmetric_tree()

val asymmetric_tree: ArrayBuffer[ArrayBuffer[BigInt]] = make_asymmetric_tree()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(is_symmetric_tree(symmetric_tree)))
    println(String.valueOf(is_symmetric_tree(asymmetric_tree)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
