// Generated by Mochi v0.10.59 on 2025-08-06 22:21:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def binary_tree_mirror_dict(tree: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], root: BigInt): Any = {
  if ((root == 0 || !(tree.contains(root)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    return
  }
  val children: ArrayBuffer[BigInt] = tree.getOrElse(root, ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  val left: BigInt = children((0.toInt).toInt)
  val right: BigInt = children((1.toInt).toInt)
  tree.update(root, ArrayBuffer(right, left))
  binary_tree_mirror_dict(tree, left)
  binary_tree_mirror_dict(tree, right)
  return null
}

def binary_tree_mirror(binary_tree: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], root: BigInt): scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = {
  if (BigInt((binary_tree).size) == 0) {
    throw new RuntimeException(String.valueOf("binary tree cannot be empty"))
  }
  if (!(binary_tree.contains(root)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("root " + String.valueOf(root) + " is not present in the binary_tree"))
  }
  var tree_copy: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  for (k <- binary_tree.keys) {
    tree_copy.update(k, binary_tree.getOrElse(k, ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]])
  }
  binary_tree_mirror_dict(tree_copy, root)
  return tree_copy
}

def main(): Any = {
  val binary_tree: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(1) -> (ArrayBuffer(2, 3)), BigInt(2) -> (ArrayBuffer(4, 5)), BigInt(3) -> (ArrayBuffer(6, 7)), BigInt(7) -> (ArrayBuffer(8, 9)))
  println("Binary tree: " + String.valueOf(binary_tree))
  val mirrored: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = binary_tree_mirror(binary_tree, 1)
  println("Binary tree mirror: " + String.valueOf(mirrored))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
