// Generated by Mochi v0.10.59 on 2025-08-06 22:22:14 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Tree(var data: ArrayBuffer[Double], var left: ArrayBuffer[BigInt], var right: ArrayBuffer[BigInt])

def inorder(tree: Tree, index: BigInt): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer()
  if (index == NONE) {
    return res
  }
  val left_idx: BigInt = tree.asInstanceOf[Tree].left((index.toInt).toInt)
  if (left_idx != NONE) {
    res = res ++ inorder(tree, left_idx)
  }
  res = res :+ tree.asInstanceOf[Tree].data((index.toInt).toInt)
  val right_idx: BigInt = tree.asInstanceOf[Tree].right((index.toInt).toInt)
  if (right_idx != NONE) {
    res = res ++ inorder(tree, right_idx)
  }
  return res.asInstanceOf[ArrayBuffer[Double]]
}

def is_sorted(tree: Tree, index: BigInt): Boolean = {
  if (index == NONE) {
    return true
  }
  val left_idx: BigInt = tree.asInstanceOf[Tree].left((index.toInt).toInt)
  if (left_idx != NONE) {
    if (tree.asInstanceOf[Tree].data((index.toInt).toInt) < tree.asInstanceOf[Tree].data((left_idx.toInt).toInt)) {
      return false
    }
    if (!is_sorted(tree, left_idx)) {
      return false
    }
  }
  val right_idx: BigInt = tree.asInstanceOf[Tree].right((index.toInt).toInt)
  if (right_idx != NONE) {
    if (tree.asInstanceOf[Tree].data((index.toInt).toInt) > tree.asInstanceOf[Tree].data((right_idx.toInt).toInt)) {
      return false
    }
    if (!is_sorted(tree, right_idx)) {
      return false
    }
  }
  return true
}

val NONE: BigInt = 0 - 1

val tree1: Tree = Tree(ArrayBuffer(2.1, 2.0, 2.2), ArrayBuffer(1, NONE, NONE), ArrayBuffer(2, NONE, NONE))

val tree2: Tree = Tree(ArrayBuffer(2.1, 2.0, 2.0), ArrayBuffer(1, NONE, NONE), ArrayBuffer(2, NONE, NONE))

val tree3: Tree = Tree(ArrayBuffer(2.1, 2.0, 2.1), ArrayBuffer(1, NONE, NONE), ArrayBuffer(2, NONE, NONE))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Tree " + String.valueOf(inorder(tree1, 0)) + " is sorted: " + String.valueOf(is_sorted(tree1, 0)))
    println("Tree " + String.valueOf(inorder(tree2, 0)) + " is sorted: " + String.valueOf(is_sorted(tree2, 0)))
    println("Tree " + String.valueOf(inorder(tree3, 0)) + " is sorted: " + String.valueOf(is_sorted(tree3, 0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
