// Generated by Mochi v0.10.59 on 2025-08-06 22:20:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var data: BigInt, var left: BigInt, var right: BigInt)

def inorder(nodes: ArrayBuffer[Node], index: BigInt, acc: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (index == 0 - 1) {
    return acc
  }
  val node: Node = nodes((index.toInt).toInt)
  var res: ArrayBuffer[BigInt] = inorder(nodes, node.asInstanceOf[Node].left, acc)
  res = res :+ node.asInstanceOf[Node].data
  res = inorder(nodes, node.asInstanceOf[Node].right, res)
  return res
}

def size(nodes: ArrayBuffer[Node], index: BigInt): BigInt = {
  if (index == 0 - 1) {
    return 0
  }
  val node: Node = nodes((index.toInt).toInt)
  return 1 + size(nodes, node.asInstanceOf[Node].left) + size(nodes, node.asInstanceOf[Node].right)
}

def depth(nodes: ArrayBuffer[Node], index: BigInt): BigInt = {
  if (index == 0 - 1) {
    return 0
  }
  val node: Node = nodes((index.toInt).toInt)
  val left_depth: BigInt = depth(nodes, node.asInstanceOf[Node].left)
  val right_depth: BigInt = depth(nodes, node.asInstanceOf[Node].right)
  if (left_depth > right_depth) {
    return left_depth + 1
  }
  return right_depth + 1
}

def is_full(nodes: ArrayBuffer[Node], index: BigInt): Boolean = {
  if (index == 0 - 1) {
    return true
  }
  val node: Node = nodes((index.toInt).toInt)
  if ((node.asInstanceOf[Node].left == 0 - 1 && node.asInstanceOf[Node].right == 0 - 1).asInstanceOf[Boolean]) {
    return true
  }
  if ((node.asInstanceOf[Node].left != 0 - 1 && node.asInstanceOf[Node].right != 0 - 1).asInstanceOf[Boolean]) {
    return (is_full(nodes, node.asInstanceOf[Node].left) && is_full(nodes, node.asInstanceOf[Node].right)).asInstanceOf[Boolean]
  }
  return false
}

def small_tree(): ArrayBuffer[Node] = {
  var arr: ArrayBuffer[Node] = ArrayBuffer()
  arr = arr :+ Node(2, 1, 2)
  arr = arr :+ Node(1, 0 - 1, 0 - 1)
  arr = arr :+ Node(3, 0 - 1, 0 - 1)
  return arr
}

def medium_tree(): ArrayBuffer[Node] = {
  var arr: ArrayBuffer[Node] = ArrayBuffer()
  arr = arr :+ Node(4, 1, 4)
  arr = arr :+ Node(2, 2, 3)
  arr = arr :+ Node(1, 0 - 1, 0 - 1)
  arr = arr :+ Node(3, 0 - 1, 0 - 1)
  arr = arr :+ Node(5, 0 - 1, 5)
  arr = arr :+ Node(6, 0 - 1, 6)
  arr = arr :+ Node(7, 0 - 1, 0 - 1)
  return arr
}

val small: ArrayBuffer[Node] = small_tree()

val medium: ArrayBuffer[Node] = medium_tree()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(size(small, 0))
    println(inorder(small, 0, ArrayBuffer()))
    println(depth(small, 0))
    println(is_full(small, 0))
    println(size(medium, 0))
    println(inorder(medium, 0, ArrayBuffer()))
    println(depth(medium, 0))
    println(is_full(medium, 0))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
