// Generated by Mochi v0.10.59 on 2025-08-06 22:24:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var minn: BigInt, var maxx: BigInt, var map_left: ArrayBuffer[BigInt], var left: BigInt, var right: BigInt)

def make_list(length: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var lst: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < length) {
    lst = lst :+ value
    i = i + 1
  }
  return lst
}

def min_list(arr: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = arr((0.toInt).toInt)
  var i: BigInt = 1
  while (i < BigInt((arr).size)) {
    if (arr((i.toInt).toInt) < m) {
      m = arr((i.toInt).toInt)
    }
    i = i + 1
  }
  return m
}

def max_list(arr: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = arr((0.toInt).toInt)
  var i: BigInt = 1
  while (i < BigInt((arr).size)) {
    if (arr((i.toInt).toInt) > m) {
      m = arr((i.toInt).toInt)
    }
    i = i + 1
  }
  return m
}

def build_tree(arr: ArrayBuffer[BigInt]): BigInt = {
  var n: Node = Node(min_list(arr), max_list(arr), make_list(BigInt((arr).size), 0), -1, -1)
  if (n.asInstanceOf[Node].minn == n.asInstanceOf[Node].maxx) {
    nodes = nodes :+ n
    return BigInt((nodes).size) - 1
  }
  val pivot: BigInt = (n.asInstanceOf[Node].minn + n.asInstanceOf[Node].maxx) / 2
  var left_arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var right_arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    val num: BigInt = arr((i.toInt).toInt)
    if (num <= pivot) {
      left_arr = left_arr :+ num
    } else {
      right_arr = right_arr :+ num
    }
    var ml: ArrayBuffer[BigInt] = n.asInstanceOf[Node].map_left
    ml((i).toInt) = BigInt((left_arr).size)
    n.asInstanceOf[Node].map_left = ml
    i = i + 1
  }
  if (BigInt((left_arr).size) > 0) {
    n.asInstanceOf[Node].left = build_tree(left_arr)
  }
  if (BigInt((right_arr).size) > 0) {
    n.asInstanceOf[Node].right = build_tree(right_arr)
  }
  nodes = nodes :+ n
  return BigInt((nodes).size) - 1
}

def rank_till_index(node_idx: BigInt, num: BigInt, index: BigInt): BigInt = {
  if ((index < 0 || node_idx < 0).asInstanceOf[Boolean]) {
    return 0
  }
  val node: Node = nodes((node_idx.toInt).toInt)
  if (node.asInstanceOf[Node].minn == node.asInstanceOf[Node].maxx) {
    if (node.asInstanceOf[Node].minn == num) {
      return index + 1
    } else {
      return 0
    }
  }
  val pivot: BigInt = (BigInt((node.asInstanceOf[Node].minn).toString.toDouble.toInt) + BigInt((node.asInstanceOf[Node].maxx).toString.toDouble.toInt)) / 2
  if (num <= pivot) {
    return rank_till_index(BigInt((node.asInstanceOf[Node].left).toString.toDouble.toInt), num, node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((index.toInt).toInt) - 1)
  } else {
    return rank_till_index(BigInt((node.asInstanceOf[Node].right).toString.toDouble.toInt), num, index - node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((index.toInt).toInt))
  }
  return null
}

def rank(node_idx: BigInt, num: BigInt, start: BigInt, end: BigInt): BigInt = {
  if (start > end) {
    return 0
  }
  val rank_till_end: BigInt = rank_till_index(node_idx, num, end)
  val rank_before_start: BigInt = rank_till_index(node_idx, num, start - 1)
  return rank_till_end - rank_before_start
}

def quantile(node_idx: BigInt, index: BigInt, start: BigInt, end: BigInt): BigInt = {
  if (((index > end - start || start > end).asInstanceOf[Boolean] || node_idx < 0).asInstanceOf[Boolean]) {
    return -1
  }
  val node: Node = nodes((node_idx.toInt).toInt)
  if (node.asInstanceOf[Node].minn == node.asInstanceOf[Node].maxx) {
    return BigInt((node.asInstanceOf[Node].minn).toString.toDouble.toInt)
  }
  val left_start = (if (start == 0) 0 else node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]](((start - 1).toInt).toInt))
  val num_left: BigInt = BigInt((node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((end.toInt).toInt)).toString.toDouble.toInt) - BigInt(left_start.toString.toDouble.toInt)
  if (num_left > index) {
    return quantile(BigInt((node.asInstanceOf[Node].left).toString.toDouble.toInt), index, BigInt(left_start.toString.toDouble.toInt), node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((end.toInt).toInt) - 1)
  } else {
    return quantile(BigInt((node.asInstanceOf[Node].right).toString.toDouble.toInt), index - num_left, start - BigInt(left_start.toString.toDouble.toInt), end - node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((end.toInt).toInt))
  }
  return null
}

def range_counting(node_idx: BigInt, start: BigInt, end: BigInt, start_num: BigInt, end_num: BigInt): BigInt = {
  if (((start > end || node_idx < 0).asInstanceOf[Boolean] || start_num > end_num).asInstanceOf[Boolean]) {
    return 0
  }
  val node: Node = nodes((node_idx.toInt).toInt)
  if ((BigInt((node.asInstanceOf[Node].minn).toString.toDouble.toInt) > end_num || BigInt((node.asInstanceOf[Node].maxx).toString.toDouble.toInt) < start_num).asInstanceOf[Boolean]) {
    return 0
  }
  if ((start_num <= BigInt((node.asInstanceOf[Node].minn).toString.toDouble.toInt) && BigInt((node.asInstanceOf[Node].maxx).toString.toDouble.toInt) <= end_num).asInstanceOf[Boolean]) {
    return end - start + 1
  }
  val left: BigInt = range_counting(BigInt((node.asInstanceOf[Node].left).toString.toDouble.toInt), BigInt(((if (start == 0) 0 else node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]](((start - 1).toInt).toInt))).toString.toDouble.toInt), node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((end.toInt).toInt) - 1, start_num, end_num)
  val right: BigInt = range_counting(BigInt((node.asInstanceOf[Node].right).toString.toDouble.toInt), start - (if (start == 0) 0 else node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]](((start - 1).toInt).toInt)), end - node.asInstanceOf[Node].map_left.asInstanceOf[ArrayBuffer[Any]]((end.toInt).toInt), start_num, end_num)
  return left + right
}

var nodes: ArrayBuffer[Node] = ArrayBuffer()

val test_array: ArrayBuffer[BigInt] = ArrayBuffer(2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7)

val root: BigInt = build_tree(test_array)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("rank_till_index 6 at 6 -> " + String.valueOf(rank_till_index(root, 6, 6)))
    println("rank 6 in [3,13] -> " + String.valueOf(rank(root, 6, 3, 13)))
    println("quantile index 2 in [2,5] -> " + String.valueOf(quantile(root, 2, 2, 5)))
    println("range_counting [3,7] in [1,10] -> " + String.valueOf(range_counting(root, 1, 10, 3, 7)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
