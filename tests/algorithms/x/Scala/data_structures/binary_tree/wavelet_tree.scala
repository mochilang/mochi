// Generated by Mochi v0.10.71 on 2025-08-24 15:51:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Node(var minn: BigInt, var maxx: BigInt, var map_left: ArrayBuffer[BigInt], var left: BigInt, var right: BigInt)

def make_list(length: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var lst: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < length) {
    lst = (lst :+ (value))
    i = i + BigInt(1)
  }
  return lst
}

def min_list(arr: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var i: BigInt = BigInt(1)
  while (i < BigInt((arr).size)) {
    if (arr.lift((i.toInt).toInt).getOrElse(BigInt(0)) < m) {
      m = arr.lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i + BigInt(1)
  }
  return m
}

def max_list(arr: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var i: BigInt = BigInt(1)
  while (i < BigInt((arr).size)) {
    if (arr.lift((i.toInt).toInt).getOrElse(BigInt(0)) > m) {
      m = arr.lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i + BigInt(1)
  }
  return m
}

def build_tree(arr: ArrayBuffer[BigInt]): BigInt = {
  var n: Node = Node(min_list(arr), max_list(arr), make_list(BigInt((arr).size), BigInt(0)), BigInt(-1), BigInt(-1))
  if (n.asInstanceOf[Node].minn == n.asInstanceOf[Node].maxx) {
    nodes = (nodes :+ (n))
    return BigInt((nodes).size) - BigInt(1)
  }
  var pivot: BigInt = (n.asInstanceOf[Node].minn + n.asInstanceOf[Node].maxx) / BigInt(2)
  var left_arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var right_arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    var num: BigInt = arr.lift((i.toInt).toInt).getOrElse(BigInt(0))
    if (num <= pivot) {
      left_arr = (left_arr :+ (num))
    } else {
      right_arr = (right_arr :+ (num))
    }
    var ml: ArrayBuffer[BigInt] = n.asInstanceOf[Node].map_left
    ml((i).toInt) = BigInt((left_arr).size)
    n.asInstanceOf[Node].map_left = ml
    i = i + BigInt(1)
  }
  if (BigInt((left_arr).size) > BigInt(0)) {
    n.asInstanceOf[Node].left = build_tree(left_arr)
  }
  if (BigInt((right_arr).size) > BigInt(0)) {
    n.asInstanceOf[Node].right = build_tree(right_arr)
  }
  nodes = (nodes :+ (n))
  return BigInt((nodes).size) - BigInt(1)
}

def rank_till_index(node_idx: BigInt, num: BigInt, index: BigInt): BigInt = {
  if ((index < BigInt(0) || node_idx < BigInt(0))) {
    return BigInt(0)
  }
  var node: Node = nodes.lift((node_idx.toInt).toInt).getOrElse(null)
  if (node.asInstanceOf[Node].minn == node.asInstanceOf[Node].maxx) {
    if (node.asInstanceOf[Node].minn == num) {
      return index + BigInt(1)
    } else {
      return BigInt(0)
    }
  }
  var pivot: BigInt = (node.asInstanceOf[Node].minn + node.asInstanceOf[Node].maxx) / BigInt(2)
  if (num <= pivot) {
    return rank_till_index(node.asInstanceOf[Node].left, num, node.asInstanceOf[Node].map_left.lift((index.toInt).toInt).getOrElse(BigInt(0)) - BigInt(1))
  } else {
    return rank_till_index(node.asInstanceOf[Node].right, num, index - node.asInstanceOf[Node].map_left.lift((index.toInt).toInt).getOrElse(BigInt(0)))
  }
  return BigInt(0)
}

def rank(node_idx: BigInt, num: BigInt, start: BigInt, end: BigInt): BigInt = {
  if (start > end) {
    return BigInt(0)
  }
  var rank_till_end: BigInt = rank_till_index(node_idx, num, end)
  var rank_before_start: BigInt = rank_till_index(node_idx, num, start - BigInt(1))
  return rank_till_end - rank_before_start
}

def quantile(node_idx: BigInt, index: BigInt, start: BigInt, end: BigInt): BigInt = {
  if (((index > end - start || start > end).asInstanceOf[Boolean] || node_idx < BigInt(0))) {
    return BigInt(-1)
  }
  var node: Node = nodes.lift((node_idx.toInt).toInt).getOrElse(null)
  if (node.asInstanceOf[Node].minn == node.asInstanceOf[Node].maxx) {
    return node.asInstanceOf[Node].minn
  }
  var left_start: BigInt = (if (start == BigInt(0)) BigInt(0) else node.asInstanceOf[Node].map_left.lift(((start - BigInt(1)).toInt).toInt).getOrElse(BigInt(0)))
  var num_left: BigInt = node.asInstanceOf[Node].map_left.lift((end.toInt).toInt).getOrElse(BigInt(0)) - left_start
  if (num_left > index) {
    return quantile(node.asInstanceOf[Node].left, index, left_start, node.asInstanceOf[Node].map_left.lift((end.toInt).toInt).getOrElse(BigInt(0)) - BigInt(1))
  } else {
    return quantile(node.asInstanceOf[Node].right, index - num_left, start - left_start, end - node.asInstanceOf[Node].map_left.lift((end.toInt).toInt).getOrElse(BigInt(0)))
  }
  return BigInt(0)
}

def range_counting(node_idx: BigInt, start: BigInt, end: BigInt, start_num: BigInt, end_num: BigInt): BigInt = {
  if (((start > end || node_idx < BigInt(0)).asInstanceOf[Boolean] || start_num > end_num)) {
    return BigInt(0)
  }
  var node: Node = nodes.lift((node_idx.toInt).toInt).getOrElse(null)
  if ((node.asInstanceOf[Node].minn > end_num || node.asInstanceOf[Node].maxx < start_num)) {
    return BigInt(0)
  }
  if ((start_num <= node.asInstanceOf[Node].minn && node.asInstanceOf[Node].maxx <= end_num)) {
    return end - start + BigInt(1)
  }
  var left: BigInt = range_counting(node.asInstanceOf[Node].left, (if (start == BigInt(0)) BigInt(0) else node.asInstanceOf[Node].map_left.lift(((start - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))), node.asInstanceOf[Node].map_left.lift((end.toInt).toInt).getOrElse(BigInt(0)) - BigInt(1), start_num, end_num)
  var right: BigInt = range_counting(node.asInstanceOf[Node].right, start - (if (start == BigInt(0)) BigInt(0) else node.asInstanceOf[Node].map_left.lift(((start - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))), end - node.asInstanceOf[Node].map_left.lift((end.toInt).toInt).getOrElse(BigInt(0)), start_num, end_num)
  return left + right
}

var nodes: ArrayBuffer[Node] = ArrayBuffer[Node]()

var test_array: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(1), BigInt(4), BigInt(5), BigInt(6), BigInt(0), BigInt(8), BigInt(9), BigInt(1), BigInt(2), BigInt(0), BigInt(6), BigInt(4), BigInt(2), BigInt(0), BigInt(6), BigInt(5), BigInt(3), BigInt(2), BigInt(7))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var root: BigInt = build_tree(test_array)
    println(_str("rank_till_index 6 at 6 -> " + _str(rank_till_index(root, BigInt(6), BigInt(6)))))
    println(_str("rank 6 in [3,13] -> " + _str(rank(root, BigInt(6), BigInt(3), BigInt(13)))))
    println(_str("quantile index 2 in [2,5] -> " + _str(quantile(root, BigInt(2), BigInt(2), BigInt(5)))))
    println(_str("range_counting [3,7] in [1,10] -> " + _str(range_counting(root, BigInt(1), BigInt(10), BigInt(3), BigInt(7)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
