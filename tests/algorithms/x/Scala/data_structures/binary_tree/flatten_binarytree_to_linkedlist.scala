// Generated by Mochi v0.10.59 on 2025-08-06 22:21:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def new_node(value: BigInt): BigInt = {
  node_data = node_data :+ value
  left_child = left_child :+ BigInt(0)
  right_child = right_child :+ BigInt(0)
  return BigInt((node_data).size) - 1
}

def build_tree(): BigInt = {
  val root: BigInt = new_node(1)
  val n2: BigInt = new_node(2)
  val n5: BigInt = new_node(5)
  val n3: BigInt = new_node(3)
  val n4: BigInt = new_node(4)
  val n6: BigInt = new_node(6)
  left_child((root).toInt) = n2
  right_child((root).toInt) = n5
  left_child((n2).toInt) = n3
  right_child((n2).toInt) = n4
  right_child((n5).toInt) = n6
  return root
}

def flatten(root: BigInt): ArrayBuffer[BigInt] = {
  if (root == 0) {
    return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer(node_data((root.toInt).toInt))
  val left_vals: ArrayBuffer[BigInt] = flatten(left_child((root.toInt).toInt))
  val right_vals: ArrayBuffer[BigInt] = flatten(right_child((root.toInt).toInt))
  var i: BigInt = 0
  while (i < BigInt((left_vals).size)) {
    res = res :+ left_vals((i.toInt).toInt)
    i = i + 1
  }
  i = 0
  while (i < BigInt((right_vals).size)) {
    res = res :+ right_vals((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def display(values: ArrayBuffer[BigInt]): Any = {
  var s: String = ""
  var i: BigInt = 0
  while (i < BigInt((values).size)) {
    if (i == 0) {
      s = String.valueOf(values((i.toInt).toInt))
    } else {
      s = s + " " + String.valueOf(values((i.toInt).toInt))
    }
    i = i + 1
  }
  println(s)
}

var node_data: ArrayBuffer[BigInt] = ArrayBuffer(0)

var left_child: ArrayBuffer[BigInt] = ArrayBuffer(0)

var right_child: ArrayBuffer[BigInt] = ArrayBuffer(0)

val root: BigInt = build_tree()

val vals: ArrayBuffer[BigInt] = flatten(root)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Flattened Linked List:")
    display(vals)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
