// Generated by Mochi v0.10.59 on 2025-08-06 22:20:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def create_node(value: BigInt): ArrayBuffer[Any] = {
  return ArrayBuffer(value, null, null)
}

def insert(node: ArrayBuffer[Any], value: BigInt): ArrayBuffer[Any] = {
  if (node == null) {
    return create_node(value)
  }
  if (value < BigInt((node((0.toInt).toInt)).toString.toDouble.toInt)) {
    node((1).toInt) = insert((node((1.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], value)
  } else {
    if (value > BigInt((node((0.toInt).toInt)).toString.toDouble.toInt)) {
      node((2).toInt) = insert((node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], value)
    }
  }
  return node
}

def search(node: ArrayBuffer[Any], value: BigInt): Boolean = {
  if (node == null) {
    return false
  }
  if (value == node((0.toInt).toInt)) {
    return true
  }
  if (value < BigInt((node((0.toInt).toInt)).toString.toDouble.toInt)) {
    return search((node((1.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], value)
  }
  return search((node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], value)
}

def inorder(node: ArrayBuffer[Any], acc: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (node == null) {
    return acc
  }
  val left_acc: ArrayBuffer[BigInt] = inorder((node((1.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], acc)
  val with_node: ArrayBuffer[BigInt] = left_acc :+ BigInt((node((0.toInt).toInt)).toString.toDouble.toInt)
  return inorder((node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], with_node)
}

def find_min(node: ArrayBuffer[Any]): BigInt = {
  var current: Any = node
  while (current((1.toInt).toInt) != null) {
    current = current((1.toInt).toInt)
  }
  return BigInt((current.asInstanceOf[ArrayBuffer[Any]]((0.toInt).toInt)).toString.toDouble.toInt)
}

def find_max(node: ArrayBuffer[Any]): BigInt = {
  var current: Any = node
  while (current((2.toInt).toInt) != null) {
    current = current((2.toInt).toInt)
  }
  return BigInt((current.asInstanceOf[ArrayBuffer[Any]]((0.toInt).toInt)).toString.toDouble.toInt)
}

def delete(node: ArrayBuffer[Any], value: BigInt): ArrayBuffer[Any] = {
  if (node == null) {
    return null.asInstanceOf[ArrayBuffer[Any]]
  }
  if (value < BigInt((node((0.toInt).toInt)).toString.toDouble.toInt)) {
    node((1).toInt) = delete((node((1.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], value)
  } else {
    if (value > BigInt((node((0.toInt).toInt)).toString.toDouble.toInt)) {
      node((2).toInt) = delete((node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], value)
    } else {
      if (node((1.toInt).toInt) == null) {
        return (node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]]
      }
      if (node((2.toInt).toInt) == null) {
        return (node((1.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]]
      }
      val min_val: BigInt = find_min((node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]])
      node((0).toInt) = min_val
      node((2).toInt) = delete((node((2.toInt).toInt)).asInstanceOf[ArrayBuffer[Any]], min_val)
    }
  }
  return node
}

def main(): Any = {
  var root: ArrayBuffer[Any] = null
  val nums: ArrayBuffer[BigInt] = ArrayBuffer(8, 3, 6, 1, 10, 14, 13, 4, 7)
  for (v <- nums) {
    root = insert(root, v)
  }
  println(String.valueOf(inorder(root, ArrayBuffer())))
  println(search(root, 6))
  println(search(root, 20))
  println(find_min(root))
  println(find_max(root))
  root = delete(root, 6)
  println(String.valueOf(inorder(root, ArrayBuffer())))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
