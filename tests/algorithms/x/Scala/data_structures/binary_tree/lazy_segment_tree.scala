// Generated by Mochi v0.10.59 on 2025-08-06 22:22:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def init_int_array(n: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 4 * n + 5) {
    arr = arr :+ BigInt(0)
    i = i + 1
  }
  return arr
}

def init_bool_array(n: BigInt): ArrayBuffer[Boolean] = {
  var arr: ArrayBuffer[Boolean] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 4 * n + 5) {
    arr = arr :+ false
    i = i + 1
  }
  return arr
}

def left(idx: BigInt): BigInt = {
  return idx * 2
}

def right(idx: BigInt): BigInt = {
  return idx * 2 + 1
}

def build(segment_tree: ArrayBuffer[BigInt], idx: BigInt, l: BigInt, r: BigInt, a: ArrayBuffer[BigInt]): Any = {
  if (l == r) {
    segment_tree((idx).toInt) = a(((l - 1).toInt).toInt)
  } else {
    val mid: BigInt = (l + r) / 2
    build(segment_tree, left(idx), l, mid, a)
    build(segment_tree, right(idx), mid + 1, r, a)
    val lv: BigInt = segment_tree(((left(idx)).toInt).toInt)
    val rv: BigInt = segment_tree(((right(idx)).toInt).toInt)
    if (lv > rv) {
      segment_tree((idx).toInt) = lv
    } else {
      segment_tree((idx).toInt) = rv
    }
  }
}

def update(segment_tree: ArrayBuffer[BigInt], lazy: ArrayBuffer[BigInt], flag: ArrayBuffer[Boolean], idx: BigInt, l: BigInt, r: BigInt, a: BigInt, b: BigInt, `val`: BigInt): Any = {
  if (flag((idx.toInt).toInt)) {
    segment_tree((idx).toInt) = lazy((idx.toInt).toInt)
    flag((idx).toInt) = false
    if (l != r) {
      lazy((left(idx)).toInt) = lazy((idx.toInt).toInt)
      lazy((right(idx)).toInt) = lazy((idx.toInt).toInt)
      flag((left(idx)).toInt) = true
      flag((right(idx)).toInt) = true
    }
  }
  if ((r < a || l > b).asInstanceOf[Boolean]) {
    return
  }
  if ((l >= a && r <= b).asInstanceOf[Boolean]) {
    segment_tree((idx).toInt) = `val`
    if (l != r) {
      lazy((left(idx)).toInt) = `val`
      lazy((right(idx)).toInt) = `val`
      flag((left(idx)).toInt) = true
      flag((right(idx)).toInt) = true
    }
    return
  }
  val mid: BigInt = (l + r) / 2
  update(segment_tree, lazy, flag, left(idx), l, mid, a, b, `val`)
  update(segment_tree, lazy, flag, right(idx), mid + 1, r, a, b, `val`)
  val lv: BigInt = segment_tree(((left(idx)).toInt).toInt)
  val rv: BigInt = segment_tree(((right(idx)).toInt).toInt)
  if (lv > rv) {
    segment_tree((idx).toInt) = lv
  } else {
    segment_tree((idx).toInt) = rv
  }
  return null
}

def query(segment_tree: ArrayBuffer[BigInt], lazy: ArrayBuffer[BigInt], flag: ArrayBuffer[Boolean], idx: BigInt, l: BigInt, r: BigInt, a: BigInt, b: BigInt): BigInt = {
  if (flag((idx.toInt).toInt)) {
    segment_tree((idx).toInt) = lazy((idx.toInt).toInt)
    flag((idx).toInt) = false
    if (l != r) {
      lazy((left(idx)).toInt) = lazy((idx.toInt).toInt)
      lazy((right(idx)).toInt) = lazy((idx.toInt).toInt)
      flag((left(idx)).toInt) = true
      flag((right(idx)).toInt) = true
    }
  }
  if ((r < a || l > b).asInstanceOf[Boolean]) {
    return NEG_INF
  }
  if ((l >= a && r <= b).asInstanceOf[Boolean]) {
    return segment_tree((idx.toInt).toInt)
  }
  val mid: BigInt = (l + r) / 2
  val q1: BigInt = query(segment_tree, lazy, flag, left(idx), l, mid, a, b)
  val q2: BigInt = query(segment_tree, lazy, flag, right(idx), mid + 1, r, a, b)
  if (q1 > q2) {
    return q1
  } else {
    return q2
  }
  return null
}

def segtree_to_string(segment_tree: ArrayBuffer[BigInt], lazy: ArrayBuffer[BigInt], flag: ArrayBuffer[Boolean], n: BigInt): String = {
  var res: String = "["
  var i: BigInt = 1
  while (i <= n) {
    val v: BigInt = query(segment_tree, lazy, flag, 1, 1, n, i, i)
    res = res + String.valueOf(v)
    if (i < n) {
      res = res + ", "
    }
    i = i + 1
  }
  res = res + "]"
  return res
}

val NEG_INF: BigInt = -1000000000

val A: ArrayBuffer[BigInt] = ArrayBuffer(1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8)

val n: BigInt = 15

var segment_tree: ArrayBuffer[BigInt] = init_int_array(n)

var lazy: ArrayBuffer[BigInt] = init_int_array(n)

var flag: ArrayBuffer[Boolean] = init_bool_array(n)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    build(segment_tree, 1, 1, n, A)
    println(query(segment_tree, lazy, flag, 1, 1, n, 4, 6))
    println(query(segment_tree, lazy, flag, 1, 1, n, 7, 11))
    println(query(segment_tree, lazy, flag, 1, 1, n, 7, 12))
    update(segment_tree, lazy, flag, 1, 1, n, 1, 3, 111)
    println(query(segment_tree, lazy, flag, 1, 1, n, 1, 15))
    update(segment_tree, lazy, flag, 1, 1, n, 7, 8, 235)
    println(segtree_to_string(segment_tree, lazy, flag, n))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
