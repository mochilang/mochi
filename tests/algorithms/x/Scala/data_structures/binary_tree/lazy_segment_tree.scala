// Generated by Mochi v0.10.71 on 2025-08-24 15:50:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def init_int_array(n: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(4) * n + BigInt(5)) {
    arr = (arr :+ (BigInt(0)))
    i = i + BigInt(1)
  }
  return arr
}

def init_bool_array(n: BigInt): ArrayBuffer[Boolean] = {
  var arr: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(4) * n + BigInt(5)) {
    arr = (arr :+ (false))
    i = i + BigInt(1)
  }
  return arr
}

def left(idx: BigInt): BigInt = {
  return idx * BigInt(2)
}

def right(idx: BigInt): BigInt = {
  return idx * BigInt(2) + BigInt(1)
}

def build(segment_tree: ArrayBuffer[BigInt], idx: BigInt, l: BigInt, r: BigInt, a: ArrayBuffer[BigInt]): Any = {
  if (l == r) {
    segment_tree((idx).toInt) = a.lift(((l - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
  } else {
    var mid: BigInt = (l + r) / BigInt(2)
    build(segment_tree, left(idx), l, mid, a)
    build(segment_tree, right(idx), mid + BigInt(1), r, a)
    var lv: BigInt = segment_tree.lift(((left(idx)).toInt).toInt).getOrElse(BigInt(0))
    var rv: BigInt = segment_tree.lift(((right(idx)).toInt).toInt).getOrElse(BigInt(0))
    if (lv > rv) {
      segment_tree((idx).toInt) = lv
    } else {
      segment_tree((idx).toInt) = rv
    }
  }
}

def update(segment_tree: ArrayBuffer[BigInt], `lazy`: ArrayBuffer[BigInt], flag: ArrayBuffer[Boolean], idx: BigInt, l: BigInt, r: BigInt, a: BigInt, b: BigInt, `val`: BigInt): Any = {
  if (flag.lift((idx.toInt).toInt).getOrElse(false)) {
    segment_tree((idx).toInt) = `lazy`.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    flag((idx).toInt) = false
    if (l != r) {
      `lazy`((left(idx)).toInt) = `lazy`.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      `lazy`((right(idx)).toInt) = `lazy`.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      flag((left(idx)).toInt) = true
      flag((right(idx)).toInt) = true
    }
  }
  if ((r < a || l > b)) {
    return
  }
  if ((l >= a && r <= b)) {
    segment_tree((idx).toInt) = `val`
    if (l != r) {
      `lazy`((left(idx)).toInt) = `val`
      `lazy`((right(idx)).toInt) = `val`
      flag((left(idx)).toInt) = true
      flag((right(idx)).toInt) = true
    }
    return
  }
  var mid: BigInt = (l + r) / BigInt(2)
  update(segment_tree, `lazy`, flag, left(idx), l, mid, a, b, `val`)
  update(segment_tree, `lazy`, flag, right(idx), mid + BigInt(1), r, a, b, `val`)
  var lv: BigInt = segment_tree.lift(((left(idx)).toInt).toInt).getOrElse(BigInt(0))
  var rv: BigInt = segment_tree.lift(((right(idx)).toInt).toInt).getOrElse(BigInt(0))
  if (lv > rv) {
    segment_tree((idx).toInt) = lv
  } else {
    segment_tree((idx).toInt) = rv
  }
  return null
}

def query(segment_tree: ArrayBuffer[BigInt], `lazy`: ArrayBuffer[BigInt], flag: ArrayBuffer[Boolean], idx: BigInt, l: BigInt, r: BigInt, a: BigInt, b: BigInt): BigInt = {
  if (flag.lift((idx.toInt).toInt).getOrElse(false)) {
    segment_tree((idx).toInt) = `lazy`.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    flag((idx).toInt) = false
    if (l != r) {
      `lazy`((left(idx)).toInt) = `lazy`.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      `lazy`((right(idx)).toInt) = `lazy`.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      flag((left(idx)).toInt) = true
      flag((right(idx)).toInt) = true
    }
  }
  if ((r < a || l > b)) {
    return NEG_INF
  }
  if ((l >= a && r <= b)) {
    return segment_tree.lift((idx.toInt).toInt).getOrElse(BigInt(0))
  }
  var mid: BigInt = (l + r) / BigInt(2)
  var q1: BigInt = query(segment_tree, `lazy`, flag, left(idx), l, mid, a, b)
  var q2: BigInt = query(segment_tree, `lazy`, flag, right(idx), mid + BigInt(1), r, a, b)
  if (q1 > q2) {
    return q1
  } else {
    return q2
  }
  return BigInt(0)
}

def segtree_to_string(segment_tree: ArrayBuffer[BigInt], `lazy`: ArrayBuffer[BigInt], flag: ArrayBuffer[Boolean], n: BigInt): String = {
  var res: String = "["
  var i: BigInt = BigInt(1)
  while (i <= n) {
    var v: BigInt = query(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, i, i)
    res = res + _str(v)
    if (i < n) {
      res = res + ", "
    }
    i = i + BigInt(1)
  }
  res = res + "]"
  return res
}

var NEG_INF: BigInt = BigInt(-1000000000)

var A: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(-4), BigInt(7), BigInt(3), BigInt(-5), BigInt(6), BigInt(11), BigInt(-20), BigInt(9), BigInt(14), BigInt(15), BigInt(5), BigInt(2), BigInt(-8))

var n: BigInt = BigInt(15)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var segment_tree: ArrayBuffer[BigInt] = init_int_array(n)
    var `lazy`: ArrayBuffer[BigInt] = init_int_array(n)
    var flag: ArrayBuffer[Boolean] = init_bool_array(n)
    build(segment_tree, BigInt(1), BigInt(1), n, A)
    println(_str(query(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, BigInt(4), BigInt(6))))
    println(_str(query(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, BigInt(7), BigInt(11))))
    println(_str(query(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, BigInt(7), BigInt(12))))
    update(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, BigInt(1), BigInt(3), BigInt(111))
    println(_str(query(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, BigInt(1), BigInt(15))))
    update(segment_tree, `lazy`, flag, BigInt(1), BigInt(1), n, BigInt(7), BigInt(8), BigInt(235))
    println(_str(segtree_to_string(segment_tree, `lazy`, flag, n)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
