// Generated by Mochi v0.10.59 on 2025-08-06 22:22:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var data: BigInt, var left: BigInt, var right: BigInt)

case class TreeState(var nodes: ArrayBuffer[Node], var root: BigInt)

def new_node(state: TreeState, value: BigInt): BigInt = {
  state.asInstanceOf[TreeState].nodes = state.asInstanceOf[TreeState].nodes :+ Node(value, -1, -1)
  return BigInt((state.asInstanceOf[TreeState].nodes).size) - 1
}

def insert(state: TreeState, value: BigInt): Any = {
  if (state.asInstanceOf[TreeState].root == -1) {
    state.asInstanceOf[TreeState].root = new_node(state, value)
    return
  }
  var current: BigInt = state.asInstanceOf[TreeState].root
  var nodes: ArrayBuffer[Node] = state.asInstanceOf[TreeState].nodes
  while (true) {
    var node: Node = nodes((current.toInt).toInt)
    if (value < node.asInstanceOf[Node].data) {
      if (node.asInstanceOf[Node].left == -1) {
        node.asInstanceOf[Node].left = new_node(state, value)
        nodes((current).toInt) = node
        state.asInstanceOf[TreeState].nodes = nodes
        return
      }
      current = node.asInstanceOf[Node].left
    } else {
      if (node.asInstanceOf[Node].right == -1) {
        node.asInstanceOf[Node].right = new_node(state, value)
        nodes((current).toInt) = node
        state.asInstanceOf[TreeState].nodes = nodes
        return
      }
      current = node.asInstanceOf[Node].right
    }
  }
  return null
}

def inorder(state: TreeState, idx: BigInt): ArrayBuffer[BigInt] = {
  if (idx == -1) {
    return ArrayBuffer()
  }
  val node: Node = state.asInstanceOf[TreeState].nodes((idx.toInt).toInt)
  var result: ArrayBuffer[BigInt] = inorder(state, node.asInstanceOf[Node].left)
  result = result :+ node.asInstanceOf[Node].data
  val right_part: ArrayBuffer[BigInt] = inorder(state, node.asInstanceOf[Node].right)
  var i: BigInt = 0
  while (i < BigInt((right_part).size)) {
    result = result :+ right_part((i.toInt).toInt)
    i = i + 1
  }
  return result
}

def make_tree(): TreeState = {
  var state: TreeState = TreeState(ArrayBuffer(), -1)
  insert(state, 15)
  insert(state, 10)
  insert(state, 25)
  insert(state, 6)
  insert(state, 14)
  insert(state, 20)
  insert(state, 60)
  return state
}

def main(): Any = {
  val state: TreeState = make_tree()
  println("Printing values of binary search tree in Inorder Traversal.")
  println(inorder(state, state.asInstanceOf[TreeState].root))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
