// Generated by Mochi v0.10.59 on 2025-08-06 22:22:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var key: BigInt, var left: BigInt, var right: BigInt)

def inorder(nodes: ArrayBuffer[Node], idx: BigInt): ArrayBuffer[BigInt] = {
  if (idx == -1) {
    return ArrayBuffer()
  }
  val node: Node = nodes((idx.toInt).toInt)
  var result: Any = inorder(nodes, node.asInstanceOf[Node].left)
  result = result :+ node.asInstanceOf[Node].key
  result = result ++ inorder(nodes, node.asInstanceOf[Node].right)
  return result.asInstanceOf[ArrayBuffer[BigInt]]
}

def floor_ceiling(nodes: ArrayBuffer[Node], idx: BigInt, key: BigInt): ArrayBuffer[BigInt] = {
  var floor_val: BigInt = null
  var ceiling_val: BigInt = null
  var current: BigInt = idx
  val _br0 = new Breaks
  _br0.breakable {
    while (current != -1) {
      val node: Node = nodes((current.toInt).toInt)
      if (node.asInstanceOf[Node].key == key) {
        floor_val = node.asInstanceOf[Node].key
        ceiling_val = node.asInstanceOf[Node].key
        _br0.break()
      }
      if (key < node.asInstanceOf[Node].key) {
        ceiling_val = node.asInstanceOf[Node].key
        current = node.asInstanceOf[Node].left
      } else {
        floor_val = node.asInstanceOf[Node].key
        current = node.asInstanceOf[Node].right
      }
    }
  }
  return ArrayBuffer(floor_val, ceiling_val)
}

val tree: ArrayBuffer[Node] = ArrayBuffer(Node(10, 1, 2), Node(5, 3, 4), Node(20, 5, 6), Node(3, -1, -1), Node(7, -1, -1), Node(15, -1, -1), Node(25, -1, -1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(inorder(tree, 0)))
    println(String.valueOf(floor_ceiling(tree, 0, 8)))
    println(String.valueOf(floor_ceiling(tree, 0, 14)))
    println(String.valueOf(floor_ceiling(tree, 0, -1)))
    println(String.valueOf(floor_ceiling(tree, 0, 30)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
