// Generated by Mochi v0.10.59 on 2025-08-06 22:23:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var start: BigInt, var end: BigInt, var `val`: BigInt, var mid: BigInt, var left: BigInt, var right: BigInt)

case class BuildResult(var nodes: ArrayBuffer[Node], var idx: BigInt)

case class SegmentTree(var arr: ArrayBuffer[BigInt], var op: BigInt)

def combine(a: BigInt, b: BigInt, op: BigInt): BigInt = {
  if (op == 0) {
    return a + b
  }
  if (op == 1) {
    if (a > b) {
      return a
    }
    return b
  }
  if (a < b) {
    return a
  }
  return b
}

def build_tree(nodes: ArrayBuffer[Node], arr: ArrayBuffer[BigInt], start: BigInt, end: BigInt, op: BigInt): BuildResult = {
  if (start == end) {
    val node: Node = Node(start, end, arr((start.toInt).toInt), start, -1, -1)
    val new_nodes: ArrayBuffer[Node] = nodes :+ node
    return BuildResult(new_nodes, BigInt((new_nodes).size) - 1)
  }
  val mid: BigInt = (start + end) / 2
  val left_res: BuildResult = build_tree(nodes, arr, start, mid, op)
  val right_res: BuildResult = build_tree(left_res.asInstanceOf[BuildResult].nodes, arr, mid + 1, end, op)
  val left_node: Node = right_res.asInstanceOf[BuildResult].nodes((left_res.asInstanceOf[BuildResult].idx.toInt).toInt)
  val right_node: Node = right_res.asInstanceOf[BuildResult].nodes((right_res.asInstanceOf[BuildResult].idx.toInt).toInt)
  val `val`: BigInt = combine(left_node.asInstanceOf[Node].`val`, right_node.asInstanceOf[Node].`val`, op)
  val parent: Node = Node(start, end, `val`, mid, left_res.asInstanceOf[BuildResult].idx, right_res.asInstanceOf[BuildResult].idx)
  val new_nodes: ArrayBuffer[Node] = right_res.asInstanceOf[BuildResult].nodes :+ parent
  return BuildResult(new_nodes, BigInt((new_nodes).size) - 1)
}

def new_segment_tree(collection: ArrayBuffer[BigInt], op: BigInt): SegmentTree = {
  return SegmentTree(collection, op)
}

def update(tree: SegmentTree, i: BigInt, `val`: BigInt): SegmentTree = {
  var new_arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var idx: BigInt = 0
  while (idx < BigInt((tree.asInstanceOf[SegmentTree].arr).size)) {
    if (idx == i) {
      new_arr = new_arr :+ `val`
    } else {
      new_arr = new_arr :+ tree.asInstanceOf[SegmentTree].arr((idx.toInt).toInt)
    }
    idx = idx + 1
  }
  return SegmentTree(new_arr, tree.asInstanceOf[SegmentTree].op)
}

def query_range(tree: SegmentTree, i: BigInt, j: BigInt): BigInt = {
  var result: BigInt = tree.asInstanceOf[SegmentTree].arr((i.toInt).toInt)
  var idx: BigInt = i + 1
  while (idx <= j) {
    result = combine(result, tree.asInstanceOf[SegmentTree].arr((idx.toInt).toInt), tree.asInstanceOf[SegmentTree].op)
    idx = idx + 1
  }
  return result
}

def traverse(tree: SegmentTree): ArrayBuffer[Node] = {
  if (BigInt((tree.asInstanceOf[SegmentTree].arr).size) == 0) {
    return ArrayBuffer()
  }
  val res: BuildResult = build_tree(ArrayBuffer(), tree.asInstanceOf[SegmentTree].arr, 0, BigInt((tree.asInstanceOf[SegmentTree].arr).size) - 1, tree.asInstanceOf[SegmentTree].op)
  return res.asInstanceOf[BuildResult].nodes
}

def node_to_string(node: Node): String = {
  return "SegmentTreeNode(start=" + String.valueOf(node.asInstanceOf[Node].start) + ", end=" + String.valueOf(node.asInstanceOf[Node].end) + ", val=" + String.valueOf(node.asInstanceOf[Node].`val`) + ")"
}

def print_traverse(tree: SegmentTree): Any = {
  val nodes: ArrayBuffer[Node] = traverse(tree)
  var i: BigInt = 0
  while (i < BigInt((nodes).size)) {
    println(node_to_string(nodes((i.toInt).toInt)))
    i = i + 1
  }
  println("")
}

val arr: ArrayBuffer[BigInt] = ArrayBuffer(2, 1, 5, 3, 4)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    for (op <- ArrayBuffer(0, 1, 2)) {
      println("**************************************************")
      var tree: SegmentTree = new_segment_tree(arr, op)
      print_traverse(tree)
      tree = update(tree, 1, 5)
      print_traverse(tree)
      println(query_range(tree, 3, 4))
      println(query_range(tree, 2, 2))
      println(query_range(tree, 1, 3))
      println("")
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
