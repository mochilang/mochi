// Generated by Mochi v0.10.59 on 2025-08-06 22:23:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def build(arr: ArrayBuffer[BigInt], combine: (BigInt, BigInt) => BigInt): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((arr).size)
  var st: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 2 * n) {
    st = st :+ BigInt(0)
    i = i + 1
  }
  i = 0
  while (i < n) {
    st((n + i).toInt) = arr((i.toInt).toInt)
    i = i + 1
  }
  i = n - 1
  while (i > 0) {
    st((i).toInt) = combine(st(((i * 2).toInt).toInt), st(((i * 2 + 1).toInt).toInt))
    i = i - 1
  }
  return st
}

def update(st: ArrayBuffer[BigInt], n: BigInt, combine: (BigInt, BigInt) => BigInt, p: BigInt, v: BigInt): Any = {
  var idx: BigInt = p + n
  st((idx).toInt) = v
  while (idx > 1) {
    idx = idx / 2
    st((idx).toInt) = combine(st(((idx * 2).toInt).toInt), st(((idx * 2 + 1).toInt).toInt))
  }
}

def query(st: ArrayBuffer[BigInt], n: BigInt, combine: (BigInt, BigInt) => BigInt, left: BigInt, right: BigInt): BigInt = {
  var l: BigInt = left + n
  var r: BigInt = right + n
  var res: BigInt = 0
  var has: Boolean = false
  while (l <= r) {
    if (l % 2 == 1) {
      if (!has) {
        res = st((l.toInt).toInt)
        has = true
      } else {
        res = combine(res, st((l.toInt).toInt))
      }
      l = l + 1
    }
    if (r % 2 == 0) {
      if (!has) {
        res = st((r.toInt).toInt)
        has = true
      } else {
        res = combine(res, st((r.toInt).toInt))
      }
      r = r - 1
    }
    l = l / 2
    r = r / 2
  }
  return res
}

def add(a: BigInt, b: BigInt): BigInt = {
  return a + b
}

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  } else {
    return b
  }
  return null
}

def max_int(a: BigInt, b: BigInt): BigInt = {
  if (a > b) {
    return a
  } else {
    return b
  }
  return null
}

val arr1: ArrayBuffer[BigInt] = ArrayBuffer(1, 2, 3)

val st1: ArrayBuffer[BigInt] = build(arr1, (add _).asInstanceOf[(BigInt, BigInt) => BigInt])

val arr2: ArrayBuffer[BigInt] = ArrayBuffer(3, 1, 2)

val st2: ArrayBuffer[BigInt] = build(arr2, (min_int _).asInstanceOf[(BigInt, BigInt) => BigInt])

val arr3: ArrayBuffer[BigInt] = ArrayBuffer(2, 3, 1)

val st3: ArrayBuffer[BigInt] = build(arr3, (max_int _).asInstanceOf[(BigInt, BigInt) => BigInt])

val arr4: ArrayBuffer[BigInt] = ArrayBuffer(1, 5, 7, -1, 6)

val n4: BigInt = BigInt((arr4).size)

val st4: ArrayBuffer[BigInt] = build(arr4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(query(st1, BigInt((arr1).size), (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 0, 2)))
    println(String.valueOf(query(st2, BigInt((arr2).size), (min_int _).asInstanceOf[(BigInt, BigInt) => BigInt], 0, 2)))
    println(String.valueOf(query(st3, BigInt((arr3).size), (max_int _).asInstanceOf[(BigInt, BigInt) => BigInt], 0, 2)))
    update(st4, n4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 1, -1)
    update(st4, n4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 2, 3)
    println(String.valueOf(query(st4, n4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 1, 2)))
    println(String.valueOf(query(st4, n4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 1, 1)))
    update(st4, n4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 4, 1)
    println(String.valueOf(query(st4, n4, (add _).asInstanceOf[(BigInt, BigInt) => BigInt], 3, 4)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
