// Generated by Mochi v0.10.71 on 2025-08-24 15:50:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def pow2(exp: BigInt): BigInt = {
  var res: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < exp) {
    res = res * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def create_sparse(max_node: BigInt, parent: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var j: BigInt = BigInt(1)
  while (pow2(j) < max_node) {
    var i: BigInt = BigInt(1)
    while (i <= max_node) {
      parent((j).toInt)((i).toInt) = parent.lift(((j - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((parent.lift(((j - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(BigInt(0))
      i = i + BigInt(1)
    }
    j = j + BigInt(1)
  }
  return parent
}

def lowest_common_ancestor(_u: BigInt, _v: BigInt, level: ArrayBuffer[BigInt], parent: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var u: BigInt = _u
  var v: BigInt = _v
  if (level.lift((u.toInt).toInt).getOrElse(BigInt(0)) < level.lift((v.toInt).toInt).getOrElse(BigInt(0))) {
    var temp: BigInt = u
    u = v
    v = temp
  }
  var i: BigInt = BigInt(18)
  while (i >= BigInt(0)) {
    if (level.lift((u.toInt).toInt).getOrElse(BigInt(0)) - pow2(i) >= level.lift((v.toInt).toInt).getOrElse(BigInt(0))) {
      u = parent.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((u.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i - BigInt(1)
  }
  if (u == v) {
    return u
  }
  i = BigInt(18)
  while (i >= BigInt(0)) {
    var pu: BigInt = parent.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((u.toInt).toInt).getOrElse(BigInt(0))
    var pv: BigInt = parent.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((v.toInt).toInt).getOrElse(BigInt(0))
    if ((pu != BigInt(0) && pu != pv)) {
      u = pu
      v = pv
    }
    i = i - BigInt(1)
  }
  return parent.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((u.toInt).toInt).getOrElse(BigInt(0))
}

def breadth_first_search(level: ArrayBuffer[BigInt], parent: ArrayBuffer[ArrayBuffer[BigInt]], max_node: BigInt, graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], root: BigInt): Any = {
  level((root).toInt) = BigInt(0)
  var q: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  q = (q :+ (root))
  var head: BigInt = BigInt(0)
  while (head < BigInt((q).size)) {
    var u: BigInt = q.lift((head.toInt).toInt).getOrElse(BigInt(0))
    head = head + BigInt(1)
    var adj: ArrayBuffer[BigInt] = graph.getOrElse(u, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    var j: BigInt = BigInt(0)
    while (j < BigInt((adj).size)) {
      var v: BigInt = adj.lift((j.toInt).toInt).getOrElse(BigInt(0))
      if (level.lift((v.toInt).toInt).getOrElse(BigInt(0)) == BigInt(-1)) {
        level((v).toInt) = level.lift((u.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
        parent((BigInt(0)).toInt)((v).toInt) = u
        q = (q :+ (v))
      }
      j = j + BigInt(1)
    }
  }
}

def main(): Any = {
  var max_node: BigInt = BigInt(13)
  var parent: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < max_node + BigInt(10)) {
      row = (row :+ (BigInt(0)))
      j = j + BigInt(1)
    }
    parent = (parent :+ (row))
    i = i + BigInt(1)
  }
  var level: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < max_node + BigInt(10)) {
    level = (level :+ (BigInt(-1)))
    i = i + BigInt(1)
  }
  var graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  graph.update(BigInt(1), ArrayBuffer(BigInt(2), BigInt(3), BigInt(4)))
  graph.update(BigInt(2), ArrayBuffer(BigInt(5)))
  graph.update(BigInt(3), ArrayBuffer(BigInt(6), BigInt(7)))
  graph.update(BigInt(4), ArrayBuffer(BigInt(8)))
  graph.update(BigInt(5), ArrayBuffer(BigInt(9), BigInt(10)))
  graph.update(BigInt(6), ArrayBuffer(BigInt(11)))
  graph.update(BigInt(7), ArrayBuffer())
  graph.update(BigInt(8), ArrayBuffer(BigInt(12), BigInt(13)))
  graph.update(BigInt(9), ArrayBuffer())
  graph.update(BigInt(10), ArrayBuffer())
  graph.update(BigInt(11), ArrayBuffer())
  graph.update(BigInt(12), ArrayBuffer())
  graph.update(BigInt(13), ArrayBuffer())
  breadth_first_search(level, parent, max_node, graph, BigInt(1))
  parent = create_sparse(max_node, parent)
  println(_str("LCA of node 1 and 3 is: " + _str(lowest_common_ancestor(BigInt(1), BigInt(3), level, parent))))
  println(_str("LCA of node 5 and 6 is: " + _str(lowest_common_ancestor(BigInt(5), BigInt(6), level, parent))))
  println(_str("LCA of node 7 and 11 is: " + _str(lowest_common_ancestor(BigInt(7), BigInt(11), level, parent))))
  println(_str("LCA of node 6 and 7 is: " + _str(lowest_common_ancestor(BigInt(6), BigInt(7), level, parent))))
  println(_str("LCA of node 4 and 12 is: " + _str(lowest_common_ancestor(BigInt(4), BigInt(12), level, parent))))
  println(_str("LCA of node 8 and 8 is: " + _str(lowest_common_ancestor(BigInt(8), BigInt(8), level, parent))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
