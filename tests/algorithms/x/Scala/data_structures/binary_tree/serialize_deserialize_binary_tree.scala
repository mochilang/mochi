// Generated by Mochi v0.10.59 on 2025-08-06 22:23:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

sealed trait TreeNode
case object Empty extends TreeNode
case class Node(var left: Any, var value: BigInt, var right: Any) extends TreeNode


case class BuildResult(var node: TreeNode, var next: BigInt)

def digit(ch: String): BigInt = {
  val digits: String = "0123456789"
  var i: BigInt = 0
  while (i < BigInt((digits).size)) {
    if (digits.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return 0
}

def to_int(s: String): BigInt = {
  var i: BigInt = 0
  var sign: BigInt = 1
  if ((BigInt((s).size) > 0 && s.slice((0).toInt, (1).toInt) == "-").asInstanceOf[Boolean]) {
    sign = -1
    i = 1
  }
  var num: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    num = num * 10 + digit(ch)
    i = i + 1
  }
  return sign * num
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var current: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if (ch == sep) {
      res = res :+ current
      current = ""
    } else {
      current = current + ch
    }
    i = i + 1
  }
  res = res :+ current
  return res
}

def serialize(node: TreeNode): String = {
  return (node match { case Empty => "null" case Node(l, v, r) => String.valueOf(v) + "," + serialize(l.asInstanceOf[TreeNode]) + "," + serialize(r.asInstanceOf[TreeNode]) }).toString
}

def build(nodes: ArrayBuffer[String], idx: BigInt): BuildResult = {
  val value: String = nodes((idx.toInt).toInt)
  if (value == "null") {
    return BuildResult(Empty(), idx + 1)
  }
  val left_res: BuildResult = build(nodes, idx + 1)
  val right_res: BuildResult = build(nodes, left_res.asInstanceOf[BuildResult].next)
  val node: Node = Node(left_res.asInstanceOf[BuildResult].node, to_int(value), right_res.asInstanceOf[BuildResult].node)
  return BuildResult(node, right_res.asInstanceOf[BuildResult].next)
}

def deserialize(data: String): TreeNode = {
  val nodes = ArrayBuffer(data.split(","): _*)
  val res: BuildResult = build(nodes, 0)
  return (res.asInstanceOf[BuildResult].node).asInstanceOf[TreeNode]
}

def five_tree(): TreeNode = {
  val left_child: Node = Node(Empty(), 2, Empty())
  val right_left: Node = Node(Empty(), 4, Empty())
  val right_right: Node = Node(Empty(), 5, Empty())
  val right_child: Node = Node(right_left, 3, right_right)
  return (Node(left_child, 1, right_child)).asInstanceOf[TreeNode]
}

def main(): Any = {
  val root: Any = five_tree()
  val serial: String = serialize(root.asInstanceOf[TreeNode])
  println(serial)
  val rebuilt: Any = deserialize(serial)
  val serial2: String = serialize(rebuilt.asInstanceOf[TreeNode])
  println(serial2)
  println(serial == serial2)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
