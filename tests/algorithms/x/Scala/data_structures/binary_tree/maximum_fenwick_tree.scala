// Generated by Mochi v0.10.59 on 2025-08-06 22:22:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def zeros(n: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    res = res :+ BigInt(0)
    i = i + 1
  }
  return res
}

def update(arr: ArrayBuffer[BigInt], idx: BigInt, value: BigInt): Any = {
  arr((idx).toInt) = value
}

def query(arr: ArrayBuffer[BigInt], left: BigInt, right: BigInt): BigInt = {
  var result: BigInt = 0
  var i: BigInt = left
  while (i < right) {
    if (arr((i.toInt).toInt) > result) {
      result = arr((i.toInt).toInt)
    }
    i = i + 1
  }
  return result
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var arr: ArrayBuffer[BigInt] = ArrayBuffer(0, 0, 0, 0, 0)
    println(query(arr, 0, 5))
    update(arr, 4, 100)
    println(query(arr, 0, 5))
    update(arr, 4, 0)
    update(arr, 2, 20)
    println(query(arr, 0, 5))
    update(arr, 4, 10)
    println(query(arr, 2, 5))
    println(query(arr, 1, 5))
    update(arr, 2, 0)
    println(query(arr, 0, 5))
    arr = zeros(10000)
    update(arr, 255, 30)
    println(query(arr, 0, 10000))
    arr = zeros(6)
    update(arr, 5, 1)
    println(query(arr, 5, 6))
    arr = zeros(6)
    update(arr, 0, 1000)
    println(query(arr, 0, 1))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
