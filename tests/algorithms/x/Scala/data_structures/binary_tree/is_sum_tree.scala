// Generated by Mochi v0.10.59 on 2025-08-06 22:22:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var value: BigInt, var left: BigInt, var right: BigInt)

def tree_sum(nodes: ArrayBuffer[Node], idx: BigInt): BigInt = {
  if (idx == -1) {
    return 0
  }
  val node: Node = nodes((idx.toInt).toInt)
  return node.asInstanceOf[Node].value + tree_sum(nodes, node.asInstanceOf[Node].left) + tree_sum(nodes, node.asInstanceOf[Node].right)
}

def is_sum_node(nodes: ArrayBuffer[Node], idx: BigInt): Boolean = {
  val node: Node = nodes((idx.toInt).toInt)
  if ((node.asInstanceOf[Node].left == -1 && node.asInstanceOf[Node].right == -1).asInstanceOf[Boolean]) {
    return true
  }
  val left_sum: BigInt = tree_sum(nodes, node.asInstanceOf[Node].left)
  val right_sum: BigInt = tree_sum(nodes, node.asInstanceOf[Node].right)
  if (node.asInstanceOf[Node].value != left_sum + right_sum) {
    return false
  }
  var left_ok: Boolean = true
  if (node.asInstanceOf[Node].left != -1) {
    left_ok = is_sum_node(nodes, node.asInstanceOf[Node].left)
  }
  var right_ok: Boolean = true
  if (node.asInstanceOf[Node].right != -1) {
    right_ok = is_sum_node(nodes, node.asInstanceOf[Node].right)
  }
  return (left_ok && right_ok).asInstanceOf[Boolean]
}

def build_a_tree(): ArrayBuffer[Node] = {
  return ArrayBuffer(Node(11, 1, 2), Node(2, 3, 4), Node(29, 5, 6), Node(1, -1, -1), Node(7, -1, -1), Node(15, -1, -1), Node(40, 7, -1), Node(35, -1, -1))
}

def build_a_sum_tree(): ArrayBuffer[Node] = {
  return ArrayBuffer(Node(26, 1, 2), Node(10, 3, 4), Node(3, -1, 5), Node(4, -1, -1), Node(6, -1, -1), Node(3, -1, -1))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
