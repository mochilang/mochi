// Generated by Mochi v0.10.59 on 2025-08-06 22:21:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class TreeNode(var data: BigInt, var left: BigInt, var right: BigInt)

def count_nodes(nodes: ArrayBuffer[TreeNode], idx: BigInt): BigInt = {
  if (idx == 0) {
    return 0
  }
  val node: TreeNode = nodes((idx.toInt).toInt)
  return count_nodes(nodes, node.asInstanceOf[TreeNode].left) + count_nodes(nodes, node.asInstanceOf[TreeNode].right) + 1
}

def count_coins(nodes: ArrayBuffer[TreeNode], idx: BigInt): BigInt = {
  if (idx == 0) {
    return 0
  }
  val node: TreeNode = nodes((idx.toInt).toInt)
  return count_coins(nodes, node.asInstanceOf[TreeNode].left) + count_coins(nodes, node.asInstanceOf[TreeNode].right) + node.asInstanceOf[TreeNode].data
}

def iabs(x: BigInt): BigInt = {
  if (x < 0) {
    return -x
  }
  return x
}

def dfs(nodes: ArrayBuffer[TreeNode], idx: BigInt): BigInt = {
  if (idx == 0) {
    return 0
  }
  val node: TreeNode = nodes((idx.toInt).toInt)
  val left_excess: BigInt = dfs(nodes, node.asInstanceOf[TreeNode].left)
  val right_excess: BigInt = dfs(nodes, node.asInstanceOf[TreeNode].right)
  val abs_left: BigInt = iabs(left_excess)
  val abs_right: BigInt = iabs(right_excess)
  total_moves = total_moves + abs_left + abs_right
  return node.asInstanceOf[TreeNode].data + left_excess + right_excess - 1
}

def distribute_coins(nodes: ArrayBuffer[TreeNode], root: BigInt): BigInt = {
  if (root == 0) {
    return 0
  }
  if (count_nodes(nodes, root) != count_coins(nodes, root)) {
    throw new RuntimeException(String.valueOf("The nodes number should be same as the number of coins"))
  }
  total_moves = 0
  dfs(nodes, root)
  return total_moves
}

def main(): Any = {
  val example1: ArrayBuffer[TreeNode] = ArrayBuffer(TreeNode(0, 0, 0), TreeNode(3, 2, 3), TreeNode(0, 0, 0), TreeNode(0, 0, 0))
  val example2: ArrayBuffer[TreeNode] = ArrayBuffer(TreeNode(0, 0, 0), TreeNode(0, 2, 3), TreeNode(3, 0, 0), TreeNode(0, 0, 0))
  val example3: ArrayBuffer[TreeNode] = ArrayBuffer(TreeNode(0, 0, 0), TreeNode(0, 2, 3), TreeNode(0, 0, 0), TreeNode(3, 0, 0))
  println(distribute_coins(example1, 1))
  println(distribute_coins(example2, 1))
  println(distribute_coins(example3, 1))
  println(distribute_coins(ArrayBuffer(TreeNode(0, 0, 0)), 0))
}

var total_moves: BigInt = 0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
