// Generated by Mochi v0.10.59 on 2025-08-06 22:22:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var `val`: BigInt, var left: BigInt, var right: BigInt)

case class Info(var is_bst: Boolean, var min_val: BigInt, var max_val: BigInt, var total: BigInt, var best: BigInt)

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  }
  return b
}

def max_int(a: BigInt, b: BigInt): BigInt = {
  if (a > b) {
    return a
  }
  return b
}

def solver(nodes: ArrayBuffer[Node], idx: BigInt): Info = {
  if (idx == 0 - 1) {
    return Info(true, 2147483647, -BigInt("2147483648"), 0, 0)
  }
  val node: Node = nodes((idx.toInt).toInt)
  val left_info: Info = solver(nodes, node.asInstanceOf[Node].left)
  val right_info: Info = solver(nodes, node.asInstanceOf[Node].right)
  var current_best: BigInt = max_int(left_info.asInstanceOf[Info].best, right_info.asInstanceOf[Info].best)
  if ((((left_info.asInstanceOf[Info].is_bst && right_info.asInstanceOf[Info].is_bst).asInstanceOf[Boolean] && left_info.asInstanceOf[Info].max_val < node.asInstanceOf[Node].`val`).asInstanceOf[Boolean] && node.asInstanceOf[Node].`val` < right_info.asInstanceOf[Info].min_val).asInstanceOf[Boolean]) {
    val sum_val: BigInt = left_info.asInstanceOf[Info].total + right_info.asInstanceOf[Info].total + node.asInstanceOf[Node].`val`
    current_best = max_int(current_best, sum_val)
    return Info(true, min_int(left_info.asInstanceOf[Info].min_val, node.asInstanceOf[Node].`val`), max_int(right_info.asInstanceOf[Info].max_val, node.asInstanceOf[Node].`val`), sum_val, current_best)
  }
  return Info(false, 0, 0, 0, current_best)
}

def max_sum_bst(nodes: ArrayBuffer[Node], root: BigInt): BigInt = {
  val info: Info = solver(nodes, root)
  return info.asInstanceOf[Info].best
}

def main(): Any = {
  val t1_nodes: ArrayBuffer[Node] = ArrayBuffer(Node(4, 1, 0 - 1), Node(3, 2, 3), Node(1, 0 - 1, 0 - 1), Node(2, 0 - 1, 0 - 1))
  println(max_sum_bst(t1_nodes, 0))
  val t2_nodes: ArrayBuffer[Node] = ArrayBuffer(Node(-4, 1, 2), Node(-2, 0 - 1, 0 - 1), Node(-5, 0 - 1, 0 - 1))
  println(max_sum_bst(t2_nodes, 0))
  val t3_nodes: ArrayBuffer[Node] = ArrayBuffer(Node(1, 1, 2), Node(4, 3, 4), Node(3, 5, 6), Node(2, 0 - 1, 0 - 1), Node(4, 0 - 1, 0 - 1), Node(2, 0 - 1, 0 - 1), Node(5, 7, 8), Node(4, 0 - 1, 0 - 1), Node(6, 0 - 1, 0 - 1))
  println(max_sum_bst(t3_nodes, 0))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
