// Generated by Mochi v0.10.59 on 2025-08-07 00:04:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var name: String, var `val`: BigInt)

case class MinHeap(var heap: ArrayBuffer[Node], var idx_of_element: scala.collection.mutable.Map[String,BigInt], var heap_dict: scala.collection.mutable.Map[String,BigInt])

def get_parent_idx(idx: BigInt): BigInt = {
  return (idx - 1) / 2
}

def get_left_child_idx(idx: BigInt): BigInt = {
  return idx * 2 + 1
}

def get_right_child_idx(idx: BigInt): BigInt = {
  return idx * 2 + 2
}

def remove_key(m: scala.collection.mutable.Map[String,BigInt], k: String): scala.collection.mutable.Map[String,BigInt] = {
  var out: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  for (key <- m.keys) {
    if (key != k) {
      out.update(key, m.getOrElse(key.toString, null).asInstanceOf[BigInt])
    }
  }
  return out
}

def slice_without_last(xs: ArrayBuffer[Node]): ArrayBuffer[Node] = {
  var res: ArrayBuffer[Node] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((xs).size) - 1) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def sift_down(mh: MinHeap, idx: BigInt): Any = {
  var heap: ArrayBuffer[Node] = mh.asInstanceOf[MinHeap].heap
  var idx_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].idx_of_element
  var i: BigInt = idx
  val _br2 = new Breaks
  _br2.breakable {
    while (true) {
      val left: BigInt = get_left_child_idx(i)
      val right: BigInt = get_right_child_idx(i)
      var smallest: BigInt = i
      if ((left < BigInt((heap).size) && (heap((left.toInt).toInt).`val`).toString < (heap((smallest.toInt).toInt).`val`).toString).asInstanceOf[Boolean]) {
        smallest = left
      }
      if ((right < BigInt((heap).size) && (heap((right.toInt).toInt).`val`).toString < (heap((smallest.toInt).toInt).`val`).toString).asInstanceOf[Boolean]) {
        smallest = right
      }
      if (smallest != i) {
        val tmp: Node = heap((i.toInt).toInt)
        heap((i).toInt) = heap((smallest.toInt).toInt)
        heap((smallest).toInt) = tmp
        idx_map.update(heap((i.toInt).toInt).name, i)
        idx_map.update(heap((smallest.toInt).toInt).name, smallest)
        i = smallest
      } else {
        _br2.break()
      }
    }
  }
  mh.asInstanceOf[MinHeap].heap = heap
  mh.asInstanceOf[MinHeap].idx_of_element = idx_map
}

def sift_up(mh: MinHeap, idx: BigInt): Any = {
  var heap: ArrayBuffer[Node] = mh.asInstanceOf[MinHeap].heap
  var idx_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].idx_of_element
  var i: BigInt = idx
  var p: BigInt = get_parent_idx(i)
  while (p >= 0 && (heap((p.toInt).toInt).`val`).toString > (heap((i.toInt).toInt).`val`).toString) {
    val tmp: Node = heap((p.toInt).toInt)
    heap((p).toInt) = heap((i.toInt).toInt)
    heap((i).toInt) = tmp
    idx_map.update(heap((p.toInt).toInt).name, p)
    idx_map.update(heap((i.toInt).toInt).name, i)
    i = p
    p = get_parent_idx(i)
  }
  mh.asInstanceOf[MinHeap].heap = heap
  mh.asInstanceOf[MinHeap].idx_of_element = idx_map
}

def new_min_heap(array: ArrayBuffer[Node]): MinHeap = {
  var idx_map: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var val_map: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var heap: ArrayBuffer[Node] = array
  var i: BigInt = 0
  while (i < BigInt((array).size)) {
    val n: Node = array((i.toInt).toInt)
    idx_map.update(n.asInstanceOf[Node].name, i)
    val_map.update(n.asInstanceOf[Node].name, n.asInstanceOf[Node].`val`)
    i = i + 1
  }
  var mh: MinHeap = MinHeap(heap, idx_map, val_map)
  var start: BigInt = get_parent_idx(BigInt((array).size) - 1)
  while (start >= 0) {
    sift_down(mh, start)
    start = start - 1
  }
  return mh
}

def peek(mh: MinHeap): Node = {
  return mh.asInstanceOf[MinHeap].heap((0.toInt).toInt)
}

def remove_min(mh: MinHeap): Node = {
  var heap: ArrayBuffer[Node] = mh.asInstanceOf[MinHeap].heap
  var idx_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].idx_of_element
  var val_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].heap_dict
  val last_idx: BigInt = BigInt((heap).size) - 1
  val top: Node = heap((0.toInt).toInt)
  val last: Node = heap((last_idx.toInt).toInt)
  heap((0).toInt) = last
  idx_map.update(last.asInstanceOf[Node].name, 0)
  heap = slice_without_last(heap)
  idx_map = remove_key(idx_map, top.asInstanceOf[Node].name)
  val_map = remove_key(val_map, top.asInstanceOf[Node].name)
  mh.asInstanceOf[MinHeap].heap = heap
  mh.asInstanceOf[MinHeap].idx_of_element = idx_map
  mh.asInstanceOf[MinHeap].heap_dict = val_map
  if (BigInt((heap).size) > 0) {
    sift_down(mh, 0)
  }
  return top
}

def insert(mh: MinHeap, node: Node): Any = {
  var heap: ArrayBuffer[Node] = mh.asInstanceOf[MinHeap].heap
  var idx_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].idx_of_element
  var val_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].heap_dict
  heap = heap :+ node
  val idx: BigInt = BigInt((heap).size) - 1
  idx_map.update(node.asInstanceOf[Node].name, idx)
  val_map.update(node.asInstanceOf[Node].name, node.asInstanceOf[Node].`val`)
  mh.asInstanceOf[MinHeap].heap = heap
  mh.asInstanceOf[MinHeap].idx_of_element = idx_map
  mh.asInstanceOf[MinHeap].heap_dict = val_map
  sift_up(mh, idx)
}

def is_empty(mh: MinHeap): Boolean = {
  return BigInt((mh.asInstanceOf[MinHeap].heap).size) == 0
}

def get_value(mh: MinHeap, key: String): BigInt = {
  return mh.asInstanceOf[MinHeap].heap_dict.getOrElse(key.toString, null).asInstanceOf[BigInt]
}

def decrease_key(mh: MinHeap, node: Node, new_value: BigInt): Any = {
  var heap: ArrayBuffer[Node] = mh.asInstanceOf[MinHeap].heap
  var val_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].heap_dict
  var idx_map: scala.collection.mutable.Map[String,BigInt] = mh.asInstanceOf[MinHeap].idx_of_element
  val idx: BigInt = idx_map.getOrElse(node.asInstanceOf[Node].name.toString, null).asInstanceOf[BigInt]
  if (!(BigInt((heap((idx.toInt).toInt).`val`).toString.toDouble.toInt) > new_value)) {
    throw new RuntimeException(String.valueOf("newValue must be less than current value"))
  }
  node.asInstanceOf[Node].`val` = new_value
  heap((idx).toInt).asInstanceOf[Node].`val` = new_value
  val_map.update(node.asInstanceOf[Node].name, new_value)
  mh.asInstanceOf[MinHeap].heap = heap
  mh.asInstanceOf[MinHeap].heap_dict = val_map
  sift_up(mh, idx)
}

def node_to_string(n: Node): String = {
  return "Node(" + n.asInstanceOf[Node].name + ", " + String.valueOf(n.asInstanceOf[Node].`val`) + ")"
}

var r: Node = Node("R", -1)

var b: Node = Node("B", 6)

var a: Node = Node("A", 3)

var x: Node = Node("X", 1)

var e: Node = Node("E", 4)

var my_min_heap: MinHeap = new_min_heap(ArrayBuffer(r, b, a, x, e))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Min Heap - before decrease key")
    for (n <- my_min_heap.heap) {
      println(node_to_string(n))
    }
    println("Min Heap - After decrease key of node [B -> -17]")
    decrease_key(my_min_heap, b, -17)
    for (n <- my_min_heap.heap) {
      println(node_to_string(n))
    }
    println(String.valueOf(get_value(my_min_heap, "B")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
