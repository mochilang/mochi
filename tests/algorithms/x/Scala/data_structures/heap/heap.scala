// Generated by Mochi v0.10.72 on 2025-08-25 00:18:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

private def _div(a: BigInt, b: BigInt): BigInt = {
  var q = a / b
  var r = a % b
  if (r != 0 && ((r < 0) != (b < 0))) q -= 1
  q
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def parent_index(child_idx: BigInt): BigInt = {
  if (child_idx > BigInt(0)) {
    return BigInt((_div(child_idx - BigInt(1), BigInt(2))).toString.toDouble.toInt)
  }
  return BigInt(-1)
}

def left_child_idx(parent_idx: BigInt): BigInt = {
  return BigInt(2) * parent_idx + BigInt(1)
}

def right_child_idx(parent_idx: BigInt): BigInt = {
  return BigInt(2) * parent_idx + BigInt(2)
}

def max_heapify(h: ArrayBuffer[Double], heap_size: BigInt, index: BigInt): Any = {
  var largest: BigInt = index
  val left: BigInt = left_child_idx(index)
  val right: BigInt = right_child_idx(index)
  if ((left < heap_size && h.lift((left.toInt).toInt).getOrElse(0.0) > h.lift((largest.toInt).toInt).getOrElse(0.0))) {
    largest = left
  }
  if ((right < heap_size && h.lift((right.toInt).toInt).getOrElse(0.0) > h.lift((largest.toInt).toInt).getOrElse(0.0))) {
    largest = right
  }
  if (largest != index) {
    val temp: Double = h.lift((index.toInt).toInt).getOrElse(0.0)
    h((index).toInt) = h.lift((largest.toInt).toInt).getOrElse(0.0)
    h((largest).toInt) = temp
    max_heapify(h, heap_size, largest)
  }
}

def build_max_heap(h: ArrayBuffer[Double]): BigInt = {
  var heap_size: BigInt = BigInt((h).size)
  var i: BigInt = _div(heap_size, BigInt(2)) - BigInt(1)
  while (i >= BigInt(0)) {
    max_heapify(h, heap_size, i)
    i = i - BigInt(1)
  }
  return heap_size
}

def extract_max(h: ArrayBuffer[Double], heap_size: BigInt): Double = {
  val max_value: Double = h.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  h((BigInt(0)).toInt) = h.lift(((heap_size - BigInt(1)).toInt).toInt).getOrElse(0.0)
  max_heapify(h, heap_size - BigInt(1), BigInt(0))
  return max_value
}

def insert(_h: ArrayBuffer[Double], _heap_size: BigInt, value: Double): BigInt = {
  var h: ArrayBuffer[Double] = _h
  var heap_size: BigInt = _heap_size
  if (heap_size < BigInt((h).size)) {
    h((heap_size).toInt) = value
  } else {
    h = (h :+ (value))
  }
  heap_size = heap_size + BigInt(1)
  var idx: BigInt = _div(heap_size - BigInt(1), BigInt(2))
  while (idx >= BigInt(0)) {
    max_heapify(h, heap_size, idx)
    idx = BigInt((_div(idx - BigInt(1), BigInt(2))).toString.toDouble.toInt)
  }
  return heap_size
}

def heap_sort(h: ArrayBuffer[Double], heap_size: BigInt): Any = {
  var size: BigInt = heap_size
  var j: BigInt = size - BigInt(1)
  while (j > BigInt(0)) {
    val temp: Double = h.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
    h((BigInt(0)).toInt) = h.lift((j.toInt).toInt).getOrElse(0.0)
    h((j).toInt) = temp
    size = size - BigInt(1)
    max_heapify(h, size, BigInt(0))
    j = j - BigInt(1)
  }
}

def heap_to_string(h: ArrayBuffer[Double], heap_size: BigInt): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < heap_size) {
    s = s + _str(h.lift((i.toInt).toInt).getOrElse(0.0))
    if (i < heap_size - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

var heap: ArrayBuffer[Double] = ArrayBuffer(103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var size: BigInt = build_max_heap(heap)
    println(_str(heap_to_string(heap, size)))
    val m: Double = extract_max(heap, size)
    size = size - BigInt(1)
    println(_str(_str(m)))
    println(_str(heap_to_string(heap, size)))
    size = insert(heap, size, 100.0)
    println(_str(heap_to_string(heap, size)))
    heap_sort(heap, size)
    println(_str(heap_to_string(heap, size)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
