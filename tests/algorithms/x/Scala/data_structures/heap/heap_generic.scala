// Generated by Mochi v0.10.72 on 2025-08-24 23:30:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Heap(var arr: ArrayBuffer[ArrayBuffer[BigInt]], var pos_map: scala.collection.mutable.Map[BigInt,BigInt], var size: BigInt, var key: (BigInt) => BigInt)

def new_heap(key: (BigInt) => BigInt): Heap = {
  return Heap(ArrayBuffer(), scala.collection.mutable.Map(), BigInt(0), key)
}

def parent(i: BigInt): BigInt = {
  if (i > BigInt(0)) {
    return (i - BigInt(1)) / BigInt(2)
  }
  return BigInt(-1)
}

def left(i: BigInt, size: BigInt): BigInt = {
  var l: BigInt = BigInt(2) * i + BigInt(1)
  if (l < size) {
    return l
  }
  return BigInt(-1)
}

def right(i: BigInt, size: BigInt): BigInt = {
  var r: BigInt = BigInt(2) * i + BigInt(2)
  if (r < size) {
    return r
  }
  return BigInt(-1)
}

def swap(h: Heap, i: BigInt, j: BigInt): Any = {
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  var item_i: BigInt = arr.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var item_j: BigInt = arr.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  pm.update(item_i, j + BigInt(1))
  pm.update(item_j, i + BigInt(1))
  h.pos_map = pm
  var tmp: ArrayBuffer[BigInt] = arr.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  arr((i).toInt) = arr.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  arr((j).toInt) = tmp
  h.arr = arr
}

def cmp(h: Heap, i: BigInt, j: BigInt): Boolean = {
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  return arr.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) < arr.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
}

def get_valid_parent(h: Heap, i: BigInt): BigInt = {
  var vp: BigInt = i
  var l: BigInt = left(i, h.size)
  if ((l != BigInt(-1) && cmp(h, l, vp) == false)) {
    vp = l
  }
  var r: BigInt = right(i, h.size)
  if ((r != BigInt(-1) && cmp(h, r, vp) == false)) {
    vp = r
  }
  return vp
}

def heapify_up(h: Heap, index: BigInt): Any = {
  var idx: BigInt = index
  var p: BigInt = parent(idx)
  while (p != BigInt(-1) && cmp(h, idx, p) == false) {
    swap(h, idx, p)
    idx = p
    p = parent(p)
  }
}

def heapify_down(h: Heap, index: BigInt): Any = {
  var idx: BigInt = index
  var vp: BigInt = get_valid_parent(h, idx)
  while (vp != idx) {
    swap(h, idx, vp)
    idx = vp
    vp = get_valid_parent(h, idx)
  }
}

def update_item(h: Heap, item: BigInt, item_value: BigInt): Any = {
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  if (pm.getOrElse(item, BigInt(0)).asInstanceOf[BigInt] == BigInt(0)) {
    return
  }
  var index: BigInt = pm.getOrElse(item, BigInt(0)).asInstanceOf[BigInt] - BigInt(1)
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  arr((index).toInt) = ArrayBuffer(item, h.key(item_value))
  h.arr = arr
  h.pos_map = pm
  heapify_up(h, index)
  heapify_down(h, index)
  return null
}

def delete_item(h: Heap, item: BigInt): Any = {
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  if (pm.getOrElse(item, BigInt(0)).asInstanceOf[BigInt] == BigInt(0)) {
    return
  }
  var index: BigInt = pm.getOrElse(item, BigInt(0)).asInstanceOf[BigInt] - BigInt(1)
  pm.update(item, BigInt(0))
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  var last_index: BigInt = h.size - BigInt(1)
  if (index != last_index) {
    arr((index).toInt) = arr.lift((last_index.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var moved: BigInt = arr.lift((index.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    pm.update(moved, index + BigInt(1))
  }
  h.size = h.size - BigInt(1)
  h.arr = arr
  h.pos_map = pm
  if (h.size > index) {
    heapify_up(h, index)
    heapify_down(h, index)
  }
  return null
}

def insert_item(h: Heap, item: BigInt, item_value: BigInt): Any = {
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  var arr_len: BigInt = BigInt((arr).size)
  if (arr_len == h.size) {
    arr = ({arr += (ArrayBuffer(BigInt(item.toString.toDouble.toInt), BigInt((h.key(item_value)).toString.toDouble.toInt))); arr})
  } else {
    arr((h.size).toInt) = ArrayBuffer(item, h.key(item_value))
  }
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  pm.update(item, h.size + BigInt(1))
  h.size = h.size + BigInt(1)
  h.arr = arr
  h.pos_map = pm
  heapify_up(h, h.size - BigInt(1))
}

def get_top(h: Heap): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  if (h.size > BigInt(0)) {
    return arr.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  }
  return ArrayBuffer[BigInt]()
}

def extract_top(h: Heap): ArrayBuffer[BigInt] = {
  var top: ArrayBuffer[BigInt] = get_top(h)
  if (BigInt((top).size) > BigInt(0)) {
    delete_item(h, top.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
  }
  return top
}

def identity(x: BigInt): BigInt = {
  return x
}

def negate(x: BigInt): BigInt = {
  return BigInt(0) - x
}

var h: Heap = new_heap((identity _).asInstanceOf[(BigInt) => BigInt])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    insert_item(h, BigInt(5), BigInt(34))
    insert_item(h, BigInt(6), BigInt(31))
    insert_item(h, BigInt(7), BigInt(37))
    println(_str(_str(get_top(h))))
    println(_str(_str(extract_top(h))))
    println(_str(_str(extract_top(h))))
    println(_str(_str(extract_top(h))))
    h = new_heap((negate _).asInstanceOf[(BigInt) => BigInt])
    insert_item(h, BigInt(5), BigInt(34))
    insert_item(h, BigInt(6), BigInt(31))
    insert_item(h, BigInt(7), BigInt(37))
    println(_str(_str(get_top(h))))
    println(_str(_str(extract_top(h))))
    println(_str(_str(extract_top(h))))
    println(_str(_str(extract_top(h))))
    insert_item(h, BigInt(8), BigInt(45))
    insert_item(h, BigInt(9), BigInt(40))
    insert_item(h, BigInt(10), BigInt(50))
    println(_str(_str(get_top(h))))
    update_item(h, BigInt(10), BigInt(30))
    println(_str(_str(get_top(h))))
    delete_item(h, BigInt(10))
    println(_str(_str(get_top(h))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
