// Generated by Mochi v0.10.59 on 2025-08-07 00:02:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Heap(var arr: ArrayBuffer[ArrayBuffer[BigInt]], var pos_map: scala.collection.mutable.Map[BigInt,BigInt], var size: BigInt, var key: (BigInt) => BigInt)

def new_heap(key: (BigInt) => BigInt): Heap = {
  return Heap(ArrayBuffer(), scala.collection.mutable.Map(), 0, key)
}

def parent(i: BigInt): BigInt = {
  if (i > 0) {
    return (i - 1) / 2
  }
  return -1
}

def left(i: BigInt, size: BigInt): BigInt = {
  val l: BigInt = 2 * i + 1
  if (l < size) {
    return l
  }
  return -1
}

def right(i: BigInt, size: BigInt): BigInt = {
  val r: BigInt = 2 * i + 2
  if (r < size) {
    return r
  }
  return -1
}

def swap(h: Heap, i: BigInt, j: BigInt): Any = {
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  val item_i: BigInt = arr((i.toInt).toInt)((0.toInt).toInt)
  val item_j: BigInt = arr((j.toInt).toInt)((0.toInt).toInt)
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  pm.update(item_i, j + 1)
  pm.update(item_j, i + 1)
  h.pos_map = pm
  val tmp: ArrayBuffer[BigInt] = arr((i.toInt).toInt)
  arr((i).toInt) = arr((j.toInt).toInt)
  arr((j).toInt) = tmp
  h.arr = arr
}

def cmp(h: Heap, i: BigInt, j: BigInt): Boolean = {
  val arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  return arr((i.toInt).toInt)((1.toInt).toInt) < arr((j.toInt).toInt)((1.toInt).toInt)
}

def get_valid_parent(h: Heap, i: BigInt): BigInt = {
  var vp: BigInt = i
  val l: BigInt = left(i, h.size)
  if ((l != 0 - 1 && cmp(h, l, vp) == false).asInstanceOf[Boolean]) {
    vp = l
  }
  val r: BigInt = right(i, h.size)
  if ((r != 0 - 1 && cmp(h, r, vp) == false).asInstanceOf[Boolean]) {
    vp = r
  }
  return vp
}

def heapify_up(h: Heap, index: BigInt): Any = {
  var idx: BigInt = index
  var p: BigInt = parent(idx)
  while (p != 0 - 1 && cmp(h, idx, p) == false) {
    swap(h, idx, p)
    idx = p
    p = parent(p)
  }
}

def heapify_down(h: Heap, index: BigInt): Any = {
  var idx: BigInt = index
  var vp: BigInt = get_valid_parent(h, idx)
  while (vp != idx) {
    swap(h, idx, vp)
    idx = vp
    vp = get_valid_parent(h, idx)
  }
}

def update_item(h: Heap, item: BigInt, item_value: BigInt): Any = {
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  if (pm.getOrElse(item, null).asInstanceOf[BigInt] == 0) {
    return
  }
  val index: BigInt = pm.getOrElse(item, null).asInstanceOf[BigInt] - 1
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  arr((index).toInt) = ArrayBuffer(item, h.key(item_value))
  h.arr = arr
  h.pos_map = pm
  heapify_up(h, index)
  heapify_down(h, index)
  return null
}

def delete_item(h: Heap, item: BigInt): Any = {
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  if (pm.getOrElse(item, null).asInstanceOf[BigInt] == 0) {
    return
  }
  val index: BigInt = pm.getOrElse(item, null).asInstanceOf[BigInt] - 1
  pm.update(item, 0)
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  val last_index: BigInt = h.size - 1
  if (index != last_index) {
    arr((index).toInt) = arr((last_index.toInt).toInt)
    val moved: BigInt = arr((index.toInt).toInt)((0.toInt).toInt)
    pm.update(moved, index + 1)
  }
  h.size = h.size - 1
  h.arr = arr
  h.pos_map = pm
  if (h.size > index) {
    heapify_up(h, index)
    heapify_down(h, index)
  }
  return null
}

def insert_item(h: Heap, item: BigInt, item_value: BigInt): Any = {
  var arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  val arr_len: BigInt = BigInt((arr).size)
  if (arr_len == h.size) {
    arr = arr :+ ArrayBuffer(BigInt(item.toString.toDouble.toInt), BigInt((h.key(item_value)).toString.toDouble.toInt))
  } else {
    arr((h.size).toInt) = ArrayBuffer(item, h.key(item_value))
  }
  var pm: scala.collection.mutable.Map[BigInt,BigInt] = h.pos_map
  pm.update(item, h.size + 1)
  h.size = h.size + 1
  h.arr = arr
  h.pos_map = pm
  heapify_up(h, h.size - 1)
}

def get_top(h: Heap): ArrayBuffer[BigInt] = {
  val arr: ArrayBuffer[ArrayBuffer[BigInt]] = h.arr
  if (h.size > 0) {
    return arr((0.toInt).toInt)
  }
  return ArrayBuffer()
}

def extract_top(h: Heap): ArrayBuffer[BigInt] = {
  val top: ArrayBuffer[BigInt] = get_top(h)
  if (BigInt((top).size) > 0) {
    delete_item(h, top((0.toInt).toInt))
  }
  return top
}

def identity(x: BigInt): BigInt = {
  return x
}

def negate(x: BigInt): BigInt = {
  return 0 - x
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var h: Heap = new_heap((identity _).asInstanceOf[(BigInt) => BigInt])
    insert_item(h, 5, 34)
    insert_item(h, 6, 31)
    insert_item(h, 7, 37)
    println(String.valueOf(get_top(h)))
    println(String.valueOf(extract_top(h)))
    println(String.valueOf(extract_top(h)))
    println(String.valueOf(extract_top(h)))
    h = new_heap((negate _).asInstanceOf[(BigInt) => BigInt])
    insert_item(h, 5, 34)
    insert_item(h, 6, 31)
    insert_item(h, 7, 37)
    println(String.valueOf(get_top(h)))
    println(String.valueOf(extract_top(h)))
    println(String.valueOf(extract_top(h)))
    println(String.valueOf(extract_top(h)))
    insert_item(h, 8, 45)
    insert_item(h, 9, 40)
    insert_item(h, 10, 50)
    println(String.valueOf(get_top(h)))
    update_item(h, 10, 30)
    println(String.valueOf(get_top(h)))
    delete_item(h, 10)
    println(String.valueOf(get_top(h)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
