// Generated by Mochi v0.10.72 on 2025-08-24 23:32:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def set_seed(s: BigInt): Any = {
  seed = s
}

def randint(a: BigInt, b: BigInt): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed % (b - a + BigInt(1)) + a
}

def rand_bool(): Boolean = {
  return randint(BigInt(0), BigInt(1)) == BigInt(1)
}

def new_heap(): Any = {
  nodes = ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]()
  root = NIL
}

def merge(_r1: BigInt, _r2: BigInt): BigInt = {
  var r1: BigInt = _r1
  var r2: BigInt = _r2
  if (r1 == NIL) {
    return r2
  }
  if (r2 == NIL) {
    return r1
  }
  if (nodes.lift((r1.toInt).toInt).getOrElse(null).getOrElse("value", BigInt(0)).asInstanceOf[BigInt] > nodes.lift((r2.toInt).toInt).getOrElse(null).getOrElse("value", BigInt(0)).asInstanceOf[BigInt]) {
    val tmp: BigInt = r1
    r1 = r2
    r2 = tmp
  }
  if (rand_bool()) {
    val tmp: BigInt = nodes.lift((r1.toInt).toInt).getOrElse(null).getOrElse("left", BigInt(0)).asInstanceOf[BigInt]
    nodes.lift((r1).toInt).getOrElse(null).update("left", nodes.lift((r1.toInt).toInt).getOrElse(null).getOrElse("right", BigInt(0)).asInstanceOf[BigInt])
    nodes.lift((r1).toInt).getOrElse(null).update("right", tmp)
  }
  nodes.lift((r1).toInt).getOrElse(null).update("left", merge(nodes.lift((r1.toInt).toInt).getOrElse(null).getOrElse("left", BigInt(0)).asInstanceOf[BigInt], r2))
  return r1
}

def insert(value: BigInt): Any = {
  val node: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("value" -> (BigInt(value.toString.toDouble.toInt)), "left" -> (NIL), "right" -> (NIL))
  nodes = (nodes :+ (node))
  val idx: BigInt = BigInt((nodes).size) - BigInt(1)
  root = merge(root, idx)
}

def top(): BigInt = {
  if (root == NIL) {
    return BigInt(0)
  }
  return nodes.lift((root.toInt).toInt).getOrElse(null).getOrElse("value", BigInt(0)).asInstanceOf[BigInt]
}

def pop(): BigInt = {
  val result: BigInt = top()
  val l: BigInt = nodes.lift((root.toInt).toInt).getOrElse(null).getOrElse("left", BigInt(0)).asInstanceOf[BigInt]
  val r: BigInt = nodes.lift((root.toInt).toInt).getOrElse(null).getOrElse("right", BigInt(0)).asInstanceOf[BigInt]
  root = merge(l, r)
  return result
}

def is_empty(): Boolean = {
  return root == NIL
}

def to_sorted_list(): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (!is_empty()) {
    res = (res :+ (pop()))
  }
  return res
}

val NIL: BigInt = BigInt(-1)

var seed: BigInt = BigInt(1)

var nodes: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]()

var root: BigInt = NIL

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    set_seed(BigInt(1))
    new_heap()
    insert(BigInt(2))
    insert(BigInt(3))
    insert(BigInt(1))
    insert(BigInt(5))
    insert(BigInt(1))
    insert(BigInt(7))
    println(_str(to_sorted_list()))
    new_heap()
    insert(BigInt(1))
    insert(BigInt(-1))
    insert(BigInt(0))
    println(_str(to_sorted_list()))
    new_heap()
    insert(BigInt(3))
    insert(BigInt(1))
    insert(BigInt(3))
    insert(BigInt(7))
    println(_str(pop()))
    println(_str(pop()))
    println(_str(pop()))
    println(_str(pop()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
