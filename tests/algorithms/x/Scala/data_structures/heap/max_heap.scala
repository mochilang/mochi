// Generated by Mochi v0.10.72 on 2025-08-24 23:30:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def swap_up(i: BigInt): Any = {
  var temp: BigInt = heap.lift((i.toInt).toInt).getOrElse(BigInt(0))
  var idx: BigInt = i
  while (idx / BigInt(2) > BigInt(0)) {
    if (heap.lift((idx.toInt).toInt).getOrElse(BigInt(0)) > heap.lift(((idx / BigInt(2)).toInt).toInt).getOrElse(BigInt(0))) {
      heap((idx).toInt) = heap.lift(((idx / BigInt(2)).toInt).toInt).getOrElse(BigInt(0))
      heap((idx / BigInt(2)).toInt) = temp
    }
    idx = idx / BigInt(2)
  }
}

def insert(value: BigInt): Any = {
  heap = (heap :+ (value))
  size = size + BigInt(1)
  swap_up(size)
}

def swap_down(i: BigInt): Any = {
  var idx: BigInt = i
  while (size >= BigInt(2) * idx) {
    var bigger_child: BigInt = (if (BigInt(2) * idx + BigInt(1) > size) BigInt(2) * idx else (if (heap.lift(((BigInt(2) * idx).toInt).toInt).getOrElse(BigInt(0)) > heap.lift(((BigInt(2) * idx + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))) BigInt(2) * idx else BigInt(2) * idx + BigInt(1)))
    var temp: BigInt = heap.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    if (heap.lift((idx.toInt).toInt).getOrElse(BigInt(0)) < heap.lift((bigger_child.toInt).toInt).getOrElse(BigInt(0))) {
      heap((idx).toInt) = heap.lift((bigger_child.toInt).toInt).getOrElse(BigInt(0))
      heap((bigger_child).toInt) = temp
    }
    idx = bigger_child
  }
}

def shrink(): Any = {
  var new_heap: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= size) {
    new_heap = (new_heap :+ (heap.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  heap = new_heap
}

def pop(): BigInt = {
  var max_value: BigInt = heap.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
  heap((BigInt(1)).toInt) = heap.lift((size.toInt).toInt).getOrElse(BigInt(0))
  size = size - BigInt(1)
  shrink()
  swap_down(BigInt(1))
  return max_value
}

def get_list(): ArrayBuffer[BigInt] = {
  var out: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(1)
  while (i <= size) {
    out = (out :+ (heap.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  return out
}

def len(): BigInt = {
  return size
}

var heap: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))

var size: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    insert(BigInt(6))
    insert(BigInt(10))
    insert(BigInt(15))
    insert(BigInt(12))
    println(_str(pop()))
    println(_str(pop()))
    println(_str(get_list()))
    println(_str(len()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
