// Generated by Mochi v0.10.59 on 2025-08-07 00:03:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def swap_up(i: BigInt): Any = {
  val temp: BigInt = heap((i.toInt).toInt)
  var idx: BigInt = i
  while (idx / 2 > 0) {
    if (heap((idx.toInt).toInt) > heap(((idx / 2).toInt).toInt)) {
      heap((idx).toInt) = heap(((idx / 2).toInt).toInt)
      heap((idx / 2).toInt) = temp
    }
    idx = idx / 2
  }
}

def insert(value: BigInt): Any = {
  heap = heap :+ value
  size = size + 1
  swap_up(size)
}

def swap_down(i: BigInt): Any = {
  var idx: BigInt = i
  while (size >= 2 * idx) {
    val bigger_child: BigInt = (if (2 * idx + 1 > size) 2 * idx else (if (heap(((2 * idx).toInt).toInt) > heap(((2 * idx + 1).toInt).toInt)) 2 * idx else 2 * idx + 1))
    val temp: BigInt = heap((idx.toInt).toInt)
    if (heap((idx.toInt).toInt) < heap((bigger_child.toInt).toInt)) {
      heap((idx).toInt) = heap((bigger_child.toInt).toInt)
      heap((bigger_child).toInt) = temp
    }
    idx = bigger_child
  }
}

def shrink(): Any = {
  var new_heap: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= size) {
    new_heap = new_heap :+ heap((i.toInt).toInt)
    i = i + 1
  }
  heap = new_heap
}

def pop(): BigInt = {
  val max_value: BigInt = heap((1.toInt).toInt)
  heap((1).toInt) = heap((size.toInt).toInt)
  size = size - 1
  shrink()
  swap_down(1)
  return max_value
}

def get_list(): ArrayBuffer[BigInt] = {
  var out: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 1
  while (i <= size) {
    out = out :+ heap((i.toInt).toInt)
    i = i + 1
  }
  return out
}

def len(): BigInt = {
  return size
}

var heap: ArrayBuffer[BigInt] = ArrayBuffer(0)

var size: BigInt = 0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    insert(6)
    insert(10)
    insert(15)
    insert(12)
    println(pop())
    println(pop())
    println(get_list())
    println(len())
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
