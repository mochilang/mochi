// Generated by Mochi v0.10.59 on 2025-08-07 00:49:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class LinkedList(var data: ArrayBuffer[BigInt])

def empty_list(): LinkedList = {
  return LinkedList(ArrayBuffer())
}

def push(list: LinkedList, value: BigInt): LinkedList = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer(value)
  res = (res ++ list.asInstanceOf[LinkedList].data).asInstanceOf[ArrayBuffer[BigInt]]
  return LinkedList(res)
}

def swap_nodes(list: LinkedList, v1: BigInt, v2: BigInt): LinkedList = {
  if (v1 == v2) {
    return list
  }
  var idx1: BigInt = 0 - 1
  var idx2: BigInt = 0 - 1
  var i: BigInt = 0
  while (i < BigInt((list.asInstanceOf[LinkedList].data).size)) {
    if ((list.asInstanceOf[LinkedList].data((i.toInt).toInt) == v1 && idx1 == 0 - 1).asInstanceOf[Boolean]) {
      idx1 = i
    }
    if ((list.asInstanceOf[LinkedList].data((i.toInt).toInt) == v2 && idx2 == 0 - 1).asInstanceOf[Boolean]) {
      idx2 = i
    }
    i = i + 1
  }
  if ((idx1 == 0 - 1 || idx2 == 0 - 1).asInstanceOf[Boolean]) {
    return list
  }
  var res: ArrayBuffer[BigInt] = list.asInstanceOf[LinkedList].data
  val temp: BigInt = res((idx1.toInt).toInt)
  res((idx1).toInt) = res((idx2.toInt).toInt)
  res((idx2).toInt) = temp
  return LinkedList(res)
}

def to_string(list: LinkedList): String = {
  return String.valueOf(list.asInstanceOf[LinkedList].data)
}

def main(): Any = {
  var ll: LinkedList = empty_list()
  var i: BigInt = 5
  while (i > 0) {
    ll = push(ll, i)
    i = i - 1
  }
  println("Original Linked List: " + to_string(ll))
  ll = swap_nodes(ll, 1, 4)
  println("Modified Linked List: " + to_string(ll))
  println("After swapping the nodes whose data is 1 and 4.")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
