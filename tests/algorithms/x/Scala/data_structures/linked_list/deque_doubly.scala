// Generated by Mochi v0.10.59 on 2025-08-07 00:47:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var data: String, var prev: BigInt, var next: BigInt)

case class LinkedDeque(var nodes: ArrayBuffer[Node], var header: BigInt, var trailer: BigInt, var size: BigInt)

case class DeleteResult(var deque: LinkedDeque, var value: String)

def new_deque(): LinkedDeque = {
  var nodes: ArrayBuffer[Node] = ArrayBuffer()
  nodes = nodes :+ Node("", -1, 1)
  nodes = nodes :+ Node("", 0, -1)
  return LinkedDeque(nodes, 0, 1, 0)
}

def is_empty(d: LinkedDeque): Boolean = {
  return d.asInstanceOf[LinkedDeque].size == 0
}

def front(d: LinkedDeque): String = {
  if (is_empty(d)) {
    throw new RuntimeException(String.valueOf("List is empty"))
  }
  val head: Node = d.asInstanceOf[LinkedDeque].nodes((d.asInstanceOf[LinkedDeque].header.toInt).toInt)
  val idx: BigInt = head.asInstanceOf[Node].next
  val node: Node = d.asInstanceOf[LinkedDeque].nodes((idx.toInt).toInt)
  return node.asInstanceOf[Node].data
}

def back(d: LinkedDeque): String = {
  if (is_empty(d)) {
    throw new RuntimeException(String.valueOf("List is empty"))
  }
  val tail: Node = d.asInstanceOf[LinkedDeque].nodes((d.asInstanceOf[LinkedDeque].trailer.toInt).toInt)
  val idx: BigInt = tail.asInstanceOf[Node].prev
  val node: Node = d.asInstanceOf[LinkedDeque].nodes((idx.toInt).toInt)
  return node.asInstanceOf[Node].data
}

def insert(d: LinkedDeque, pred: BigInt, value: String, succ: BigInt): LinkedDeque = {
  var nodes: ArrayBuffer[Node] = d.asInstanceOf[LinkedDeque].nodes
  val new_idx: BigInt = BigInt((nodes).size)
  nodes = nodes :+ Node(value, pred, succ)
  var pred_node: Node = nodes((pred.toInt).toInt)
  pred_node.asInstanceOf[Node].next = new_idx
  nodes((pred).toInt) = pred_node
  var succ_node: Node = nodes((succ.toInt).toInt)
  succ_node.asInstanceOf[Node].prev = new_idx
  nodes((succ).toInt) = succ_node
  d.asInstanceOf[LinkedDeque].nodes = nodes
  d.asInstanceOf[LinkedDeque].size = d.asInstanceOf[LinkedDeque].size + 1
  return d
}

def delete(d: LinkedDeque, idx: BigInt): DeleteResult = {
  var nodes: ArrayBuffer[Node] = d.asInstanceOf[LinkedDeque].nodes
  val node: Node = nodes((idx.toInt).toInt)
  val pred: BigInt = node.asInstanceOf[Node].prev
  val succ: BigInt = node.asInstanceOf[Node].next
  var pred_node: Node = nodes((pred.toInt).toInt)
  pred_node.asInstanceOf[Node].next = succ
  nodes((pred).toInt) = pred_node
  var succ_node: Node = nodes((succ.toInt).toInt)
  succ_node.asInstanceOf[Node].prev = pred
  nodes((succ).toInt) = succ_node
  val `val`: String = node.asInstanceOf[Node].data
  d.asInstanceOf[LinkedDeque].nodes = nodes
  d.asInstanceOf[LinkedDeque].size = d.asInstanceOf[LinkedDeque].size - 1
  return DeleteResult(d, `val`)
}

def add_first(d: LinkedDeque, value: String): LinkedDeque = {
  val head: Node = d.asInstanceOf[LinkedDeque].nodes((d.asInstanceOf[LinkedDeque].header.toInt).toInt)
  val succ: BigInt = head.asInstanceOf[Node].next
  return insert(d, d.asInstanceOf[LinkedDeque].header, value, succ)
}

def add_last(d: LinkedDeque, value: String): LinkedDeque = {
  val tail: Node = d.asInstanceOf[LinkedDeque].nodes((d.asInstanceOf[LinkedDeque].trailer.toInt).toInt)
  val pred: BigInt = tail.asInstanceOf[Node].prev
  return insert(d, pred, value, d.asInstanceOf[LinkedDeque].trailer)
}

def remove_first(d: LinkedDeque): DeleteResult = {
  if (is_empty(d)) {
    throw new RuntimeException(String.valueOf("remove_first from empty list"))
  }
  val head: Node = d.asInstanceOf[LinkedDeque].nodes((d.asInstanceOf[LinkedDeque].header.toInt).toInt)
  val idx: BigInt = head.asInstanceOf[Node].next
  return delete(d, idx)
}

def remove_last(d: LinkedDeque): DeleteResult = {
  if (is_empty(d)) {
    throw new RuntimeException(String.valueOf("remove_first from empty list"))
  }
  val tail: Node = d.asInstanceOf[LinkedDeque].nodes((d.asInstanceOf[LinkedDeque].trailer.toInt).toInt)
  val idx: BigInt = tail.asInstanceOf[Node].prev
  return delete(d, idx)
}

def main(): Any = {
  var d: LinkedDeque = new_deque()
  d = add_first(d, "A")
  println(front(d))
  d = add_last(d, "B")
  println(back(d))
  var r: DeleteResult = remove_first(d)
  d = r.asInstanceOf[DeleteResult].deque
  println(r.asInstanceOf[DeleteResult].value)
  r = remove_last(d)
  d = r.asInstanceOf[DeleteResult].deque
  println(r.asInstanceOf[DeleteResult].value)
  println(String.valueOf(is_empty(d)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
