// Generated by Mochi v0.10.72 on 2025-08-24 22:26:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def random(): Double = {
  seed = (seed * BigInt(13) + BigInt(7)) % BigInt(100)
  return seed.toDouble / 100.0
}

def random_level(): BigInt = {
  var lvl: BigInt = BigInt(1)
  while (random() < P && lvl < MAX_LEVEL) {
    lvl = lvl + BigInt(1)
  }
  return lvl
}

def empty_forward(): ArrayBuffer[BigInt] = {
  var f: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < MAX_LEVEL) {
    f = (f :+ (NIL))
    i = i + BigInt(1)
  }
  return f
}

def init(): Any = {
  node_keys = ArrayBuffer(BigInt(-1))
  node_vals = ArrayBuffer(BigInt(0))
  node_forwards = ArrayBuffer(empty_forward())
  level = BigInt(1)
}

def insert(key: BigInt, value: BigInt): Any = {
  var update: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < MAX_LEVEL) {
    update = (update :+ (BigInt(0)))
    i = i + BigInt(1)
  }
  var x: BigInt = BigInt(0)
  i = level - BigInt(1)
  while (i >= BigInt(0)) {
    while (node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)) != NIL && node_keys.lift((node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(BigInt(0)) < key) {
      x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    update((i).toInt) = x
    i = i - BigInt(1)
  }
  x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  if ((x != NIL && node_keys.lift((x.toInt).toInt).getOrElse(BigInt(0)) == key)) {
    node_vals((x).toInt) = value
    return
  }
  var lvl: BigInt = random_level()
  if (lvl > level) {
    var j: BigInt = level
    while (j < lvl) {
      update((j).toInt) = BigInt(0)
      j = j + BigInt(1)
    }
    level = lvl
  }
  node_keys = (node_keys :+ (key))
  node_vals = (node_vals :+ (value))
  var forwards: ArrayBuffer[BigInt] = empty_forward()
  var idx: BigInt = BigInt((node_keys).size) - BigInt(1)
  i = BigInt(0)
  while (i < lvl) {
    forwards((i).toInt) = node_forwards.lift((update.lift((i.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
    node_forwards((update.lift((i.toInt).toInt).getOrElse(BigInt(0))).toInt)((i).toInt) = idx
    i = i + BigInt(1)
  }
  node_forwards = (node_forwards :+ (forwards))
  return null
}

def find(key: BigInt): BigInt = {
  var x: BigInt = BigInt(0)
  var i: BigInt = level - BigInt(1)
  while (i >= BigInt(0)) {
    while (node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)) != NIL && node_keys.lift((node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(BigInt(0)) < key) {
      x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i - BigInt(1)
  }
  x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  if ((x != NIL && node_keys.lift((x.toInt).toInt).getOrElse(BigInt(0)) == key)) {
    return node_vals.lift((x.toInt).toInt).getOrElse(BigInt(0))
  }
  return BigInt(-1)
}

def delete(key: BigInt): Any = {
  var update: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < MAX_LEVEL) {
    update = (update :+ (BigInt(0)))
    i = i + BigInt(1)
  }
  var x: BigInt = BigInt(0)
  i = level - BigInt(1)
  while (i >= BigInt(0)) {
    while (node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)) != NIL && node_keys.lift((node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(BigInt(0)) < key) {
      x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    update((i).toInt) = x
    i = i - BigInt(1)
  }
  x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  if ((x == NIL || node_keys.lift((x.toInt).toInt).getOrElse(BigInt(0)) != key)) {
    return
  }
  i = BigInt(0)
  while (i < level) {
    if (node_forwards.lift((update.lift((i.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)) == x) {
      node_forwards((update.lift((i.toInt).toInt).getOrElse(BigInt(0))).toInt)((i).toInt) = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i + BigInt(1)
  }
  while (level > BigInt(1) && node_forwards.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((level - BigInt(1)).toInt).toInt).getOrElse(BigInt(0)) == NIL) {
    level = level - BigInt(1)
  }
  return null
}

def to_string(): String = {
  var s: String = ""
  var x: BigInt = node_forwards.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  while (x != NIL) {
    if (s != "") {
      s = s + " -> "
    }
    s = s + _str(node_keys.lift((x.toInt).toInt).getOrElse(BigInt(0))) + ":" + _str(node_vals.lift((x.toInt).toInt).getOrElse(BigInt(0)))
    x = node_forwards.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  }
  return s
}

def main(): Any = {
  init()
  insert(BigInt(2), BigInt(2))
  insert(BigInt(4), BigInt(4))
  insert(BigInt(6), BigInt(4))
  insert(BigInt(4), BigInt(5))
  insert(BigInt(8), BigInt(4))
  insert(BigInt(9), BigInt(4))
  delete(BigInt(4))
  println(_str(to_string()))
}

var NIL: BigInt = BigInt(-1)

var MAX_LEVEL: BigInt = BigInt(6)

var P: Double = 0.5

var seed: BigInt = BigInt(1)

var node_keys: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var node_vals: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var node_forwards: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()

var level: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
