// Generated by Mochi v0.10.59 on 2025-08-07 00:49:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def random(): Double = {
  seed = (seed * 13 + 7) % 100
  return seed.toString.toDouble / 100.0
}

def random_level(): BigInt = {
  var lvl: BigInt = 1
  while (random() < P && lvl < MAX_LEVEL) {
    lvl = lvl + 1
  }
  return lvl
}

def empty_forward(): ArrayBuffer[BigInt] = {
  var f: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < MAX_LEVEL) {
    f = f :+ NIL
    i = i + 1
  }
  return f
}

def init(): Any = {
  node_keys = ArrayBuffer(-1)
  node_vals = ArrayBuffer(0)
  node_forwards = ArrayBuffer(empty_forward())
  level = 1
}

def insert(key: BigInt, value: BigInt): Any = {
  var update: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < MAX_LEVEL) {
    update = update :+ BigInt(0)
    i = i + 1
  }
  var x: BigInt = 0
  i = level - 1
  while (i >= 0) {
    while (node_forwards((x.toInt).toInt)((i.toInt).toInt) != NIL && node_keys((node_forwards((x.toInt).toInt)((i.toInt).toInt).toInt).toInt) < key) {
      x = node_forwards((x.toInt).toInt)((i.toInt).toInt)
    }
    update((i).toInt) = x
    i = i - 1
  }
  x = node_forwards((x.toInt).toInt)((0.toInt).toInt)
  if ((x != NIL && node_keys((x.toInt).toInt) == key).asInstanceOf[Boolean]) {
    node_vals((x).toInt) = value
    return
  }
  val lvl: BigInt = random_level()
  if (lvl > level) {
    var j: BigInt = level
    while (j < lvl) {
      update((j).toInt) = 0
      j = j + 1
    }
    level = lvl
  }
  node_keys = node_keys :+ key
  node_vals = node_vals :+ value
  var forwards: ArrayBuffer[BigInt] = empty_forward()
  val idx: BigInt = BigInt((node_keys).size) - 1
  i = 0
  while (i < lvl) {
    forwards((i).toInt) = node_forwards((update((i.toInt).toInt).toInt).toInt)((i.toInt).toInt)
    node_forwards((update((i.toInt).toInt)).toInt)((i).toInt) = idx
    i = i + 1
  }
  node_forwards = node_forwards :+ forwards
  return null
}

def find(key: BigInt): BigInt = {
  var x: BigInt = 0
  var i: BigInt = level - 1
  while (i >= 0) {
    while (node_forwards((x.toInt).toInt)((i.toInt).toInt) != NIL && node_keys((node_forwards((x.toInt).toInt)((i.toInt).toInt).toInt).toInt) < key) {
      x = node_forwards((x.toInt).toInt)((i.toInt).toInt)
    }
    i = i - 1
  }
  x = node_forwards((x.toInt).toInt)((0.toInt).toInt)
  if ((x != NIL && node_keys((x.toInt).toInt) == key).asInstanceOf[Boolean]) {
    return node_vals((x.toInt).toInt)
  }
  return -1
}

def delete(key: BigInt): Any = {
  var update: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < MAX_LEVEL) {
    update = update :+ BigInt(0)
    i = i + 1
  }
  var x: BigInt = 0
  i = level - 1
  while (i >= 0) {
    while (node_forwards((x.toInt).toInt)((i.toInt).toInt) != NIL && node_keys((node_forwards((x.toInt).toInt)((i.toInt).toInt).toInt).toInt) < key) {
      x = node_forwards((x.toInt).toInt)((i.toInt).toInt)
    }
    update((i).toInt) = x
    i = i - 1
  }
  x = node_forwards((x.toInt).toInt)((0.toInt).toInt)
  if ((x == NIL || node_keys((x.toInt).toInt) != key).asInstanceOf[Boolean]) {
    return
  }
  i = 0
  while (i < level) {
    if (node_forwards((update((i.toInt).toInt).toInt).toInt)((i.toInt).toInt) == x) {
      node_forwards((update((i.toInt).toInt)).toInt)((i).toInt) = node_forwards((x.toInt).toInt)((i.toInt).toInt)
    }
    i = i + 1
  }
  while (level > 1 && node_forwards((0.toInt).toInt)(((level - 1).toInt).toInt) == NIL) {
    level = level - 1
  }
  return null
}

def to_string(): String = {
  var s: String = ""
  var x: BigInt = node_forwards((0.toInt).toInt)((0.toInt).toInt)
  while (x != NIL) {
    if (s != "") {
      s = s + " -> "
    }
    s = s + String.valueOf(node_keys((x.toInt).toInt)) + ":" + String.valueOf(node_vals((x.toInt).toInt))
    x = node_forwards((x.toInt).toInt)((0.toInt).toInt)
  }
  return s
}

def main(): Any = {
  init()
  insert(2, 2)
  insert(4, 4)
  insert(6, 4)
  insert(4, 5)
  insert(8, 4)
  insert(9, 4)
  delete(4)
  println(to_string())
}

val NIL: BigInt = 0 - 1

val MAX_LEVEL: BigInt = 6

val P: Double = 0.5

var seed: BigInt = 1

var node_keys: ArrayBuffer[BigInt] = ArrayBuffer()

var node_vals: ArrayBuffer[BigInt] = ArrayBuffer()

var node_forwards: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()

var level: BigInt = 1

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
