// Generated by Mochi v0.10.72 on 2025-08-24 23:35:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class LinkedList(var data: ArrayBuffer[BigInt])

def to_string(list: LinkedList): String = {
  if (BigInt((list.asInstanceOf[LinkedList].data).size) == BigInt(0)) {
    return ""
  }
  var s: String = _str(list.asInstanceOf[LinkedList].data.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
  var i: BigInt = BigInt(1)
  while (i < BigInt((list.asInstanceOf[LinkedList].data).size)) {
    s = s + " -> " + _str(list.asInstanceOf[LinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  return s
}

def reverse_k_nodes(list: LinkedList, k: BigInt): LinkedList = {
  if (k <= BigInt(1)) {
    return list
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((list.asInstanceOf[LinkedList].data).size)) {
    var j: BigInt = BigInt(0)
    var group: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    while (j < k && i + j < BigInt((list.asInstanceOf[LinkedList].data).size)) {
      group = (group :+ (list.asInstanceOf[LinkedList].data.lift(((i + j).toInt).toInt).getOrElse(BigInt(0))))
      j = j + BigInt(1)
    }
    if (BigInt((group).size) == k) {
      var g: BigInt = k - BigInt(1)
      while (g >= BigInt(0)) {
        res = (res :+ (group.lift((g.toInt).toInt).getOrElse(BigInt(0))))
        g = g - BigInt(1)
      }
    } else {
      var g: BigInt = BigInt(0)
      while (g < BigInt((group).size)) {
        res = (res :+ (group.lift((g.toInt).toInt).getOrElse(BigInt(0))))
        g = g + BigInt(1)
      }
    }
    i = i + k
  }
  return LinkedList(res)
}

def main(): Any = {
  var ll: LinkedList = LinkedList(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5)))
  println(_str("Original Linked List: " + to_string(ll)))
  var k: BigInt = BigInt(2)
  ll = reverse_k_nodes(ll, k)
  println(_str("After reversing groups of size " + _str(k) + ": " + to_string(ll)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
