// Generated by Mochi v0.10.59 on 2025-08-07 00:48:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var data: BigInt, var next: BigInt)

def has_loop(nodes: ArrayBuffer[Node], head: BigInt): Boolean = {
  var slow: BigInt = head
  var fast: BigInt = head
  while (fast != 0 - 1) {
    val fast_node1: Node = nodes((fast.toInt).toInt)
    if (fast_node1.asInstanceOf[Node].next == 0 - 1) {
      return false
    }
    val fast_node2: Node = nodes((fast_node1.asInstanceOf[Node].next.toInt).toInt)
    if (fast_node2.asInstanceOf[Node].next == 0 - 1) {
      return false
    }
    val slow_node: Node = nodes((slow.toInt).toInt)
    slow = slow_node.asInstanceOf[Node].next
    fast = fast_node2.asInstanceOf[Node].next
    if (slow == fast) {
      return true
    }
  }
  return false
}

def make_nodes(values: ArrayBuffer[BigInt]): ArrayBuffer[Node] = {
  var nodes: ArrayBuffer[Node] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((values).size)) {
    val next_idx: BigInt = (if (i == BigInt((values).size) - 1) 0 - 1 else i + 1)
    nodes = nodes :+ Node(values((i.toInt).toInt), next_idx)
    i = i + 1
  }
  return nodes
}

def main(): Any = {
  var list1: ArrayBuffer[Node] = make_nodes(ArrayBuffer(1, 2, 3, 4))
  println(String.valueOf(has_loop(list1, 0)))
  list1((3).toInt).asInstanceOf[Node].next = 1
  println(String.valueOf(has_loop(list1, 0)))
  val list2: ArrayBuffer[Node] = make_nodes(ArrayBuffer(5, 6, 5, 6))
  println(String.valueOf(has_loop(list2, 0)))
  val list3: ArrayBuffer[Node] = make_nodes(ArrayBuffer(1))
  println(String.valueOf(has_loop(list3, 0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
