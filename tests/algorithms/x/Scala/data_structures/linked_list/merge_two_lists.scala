// Generated by Mochi v0.10.59 on 2025-08-07 00:48:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SortedLinkedList(var values: ArrayBuffer[BigInt])

def sort_list(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((nums).size)) {
    arr = arr :+ nums((i.toInt).toInt)
    i = i + 1
  }
  var j: BigInt = 0
  while (j < BigInt((arr).size)) {
    var k: BigInt = j + 1
    while (k < BigInt((arr).size)) {
      if (arr((k.toInt).toInt) < arr((j.toInt).toInt)) {
        val tmp: BigInt = arr((j.toInt).toInt)
        arr((j).toInt) = arr((k.toInt).toInt)
        arr((k).toInt) = tmp
      }
      k = k + 1
    }
    j = j + 1
  }
  return arr
}

def make_sorted_linked_list(ints: ArrayBuffer[BigInt]): SortedLinkedList = {
  return SortedLinkedList(sort_list(ints))
}

def len_sll(sll: SortedLinkedList): BigInt = {
  return BigInt((sll.asInstanceOf[SortedLinkedList].values).size)
}

def str_sll(sll: SortedLinkedList): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((sll.asInstanceOf[SortedLinkedList].values).size)) {
    res = res + String.valueOf(sll.asInstanceOf[SortedLinkedList].values((i.toInt).toInt))
    if (i + 1 < BigInt((sll.asInstanceOf[SortedLinkedList].values).size)) {
      res = res + " -> "
    }
    i = i + 1
  }
  return res
}

def merge_lists(a: SortedLinkedList, b: SortedLinkedList): SortedLinkedList = {
  var combined: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((a.asInstanceOf[SortedLinkedList].values).size)) {
    combined = combined :+ a.asInstanceOf[SortedLinkedList].values((i.toInt).toInt)
    i = i + 1
  }
  i = 0
  while (i < BigInt((b.asInstanceOf[SortedLinkedList].values).size)) {
    combined = combined :+ b.asInstanceOf[SortedLinkedList].values((i.toInt).toInt)
    i = i + 1
  }
  return make_sorted_linked_list(combined)
}

def main(): Any = {
  val test_data_odd: ArrayBuffer[BigInt] = ArrayBuffer(3, 9, -11, 0, 7, 5, 1, -1)
  val test_data_even: ArrayBuffer[BigInt] = ArrayBuffer(4, 6, 2, 0, 8, 10, 3, -2)
  val sll_one: SortedLinkedList = make_sorted_linked_list(test_data_odd)
  val sll_two: SortedLinkedList = make_sorted_linked_list(test_data_even)
  val merged: SortedLinkedList = merge_lists(sll_one, sll_two)
  println(String.valueOf(len_sll(merged)))
  println(str_sll(merged))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
