// Generated by Mochi v0.10.59 on 2025-08-07 00:48:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class DoublyLinkedList(var data: ArrayBuffer[BigInt])

case class DeleteResult(var list: DoublyLinkedList, var value: BigInt)

def empty_list(): DoublyLinkedList = {
  return DoublyLinkedList(ArrayBuffer())
}

def length(list: DoublyLinkedList): BigInt = {
  return BigInt((list.asInstanceOf[DoublyLinkedList].data).size)
}

def is_empty(list: DoublyLinkedList): Boolean = {
  return BigInt((list.asInstanceOf[DoublyLinkedList].data).size) == 0
}

def to_string(list: DoublyLinkedList): String = {
  if (BigInt((list.asInstanceOf[DoublyLinkedList].data).size) == 0) {
    return ""
  }
  var s: String = String.valueOf(list.asInstanceOf[DoublyLinkedList].data((0.toInt).toInt))
  var i: BigInt = 1
  while (i < BigInt((list.asInstanceOf[DoublyLinkedList].data).size)) {
    s = s + "->" + String.valueOf(list.asInstanceOf[DoublyLinkedList].data((i.toInt).toInt))
    i = i + 1
  }
  return s
}

def insert_nth(list: DoublyLinkedList, index: BigInt, value: BigInt): DoublyLinkedList = {
  if ((index < 0 || index > BigInt((list.asInstanceOf[DoublyLinkedList].data).size)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < index) {
    res = res :+ list.asInstanceOf[DoublyLinkedList].data((i.toInt).toInt)
    i = i + 1
  }
  res = res :+ value
  while (i < BigInt((list.asInstanceOf[DoublyLinkedList].data).size)) {
    res = res :+ list.asInstanceOf[DoublyLinkedList].data((i.toInt).toInt)
    i = i + 1
  }
  return DoublyLinkedList(res)
}

def insert_head(list: DoublyLinkedList, value: BigInt): DoublyLinkedList = {
  return insert_nth(list, 0, value)
}

def insert_tail(list: DoublyLinkedList, value: BigInt): DoublyLinkedList = {
  return insert_nth(list, BigInt((list.asInstanceOf[DoublyLinkedList].data).size), value)
}

def delete_nth(list: DoublyLinkedList, index: BigInt): DeleteResult = {
  if ((index < 0 || index >= BigInt((list.asInstanceOf[DoublyLinkedList].data).size)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  var removed: BigInt = 0
  while (i < BigInt((list.asInstanceOf[DoublyLinkedList].data).size)) {
    if (i == index) {
      removed = list.asInstanceOf[DoublyLinkedList].data((i.toInt).toInt)
    } else {
      res = res :+ list.asInstanceOf[DoublyLinkedList].data((i.toInt).toInt)
    }
    i = i + 1
  }
  return DeleteResult(DoublyLinkedList(res), removed)
}

def delete_head(list: DoublyLinkedList): DeleteResult = {
  return delete_nth(list, 0)
}

def delete_tail(list: DoublyLinkedList): DeleteResult = {
  return delete_nth(list, BigInt((list.asInstanceOf[DoublyLinkedList].data).size) - 1)
}

def delete_value(list: DoublyLinkedList, value: BigInt): DeleteResult = {
  var idx: BigInt = 0
  var found: Boolean = false
  val _br4 = new Breaks
  _br4.breakable {
    while (idx < BigInt((list.asInstanceOf[DoublyLinkedList].data).size)) {
      if (list.asInstanceOf[DoublyLinkedList].data((idx.toInt).toInt) == value) {
        found = true
        _br4.break()
      }
      idx = idx + 1
    }
  }
  if (!found) {
    throw new RuntimeException(String.valueOf("value not found"))
  }
  return delete_nth(list, idx)
}

def main(): Any = {
  var dll: DoublyLinkedList = empty_list()
  dll = insert_tail(dll, 1)
  dll = insert_tail(dll, 2)
  dll = insert_tail(dll, 3)
  println(to_string(dll))
  dll = insert_head(dll, 0)
  println(to_string(dll))
  dll = insert_nth(dll, 2, 9)
  println(to_string(dll))
  var res: DeleteResult = delete_nth(dll, 2)
  dll = res.asInstanceOf[DeleteResult].list
  println(res.asInstanceOf[DeleteResult].value)
  println(to_string(dll))
  res = delete_tail(dll)
  dll = res.asInstanceOf[DeleteResult].list
  println(res.asInstanceOf[DeleteResult].value)
  println(to_string(dll))
  res = delete_value(dll, 1)
  dll = res.asInstanceOf[DeleteResult].list
  println(res.asInstanceOf[DeleteResult].value)
  println(to_string(dll))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
