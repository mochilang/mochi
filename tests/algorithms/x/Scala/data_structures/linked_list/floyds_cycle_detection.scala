// Generated by Mochi v0.10.72 on 2025-08-24 23:34:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class LinkedList(var next: ArrayBuffer[BigInt], var head: BigInt)

def empty_list(): LinkedList = {
  return LinkedList(ArrayBuffer[BigInt](), NULL)
}

def add_node(list: LinkedList, value: BigInt): LinkedList = {
  var nexts: ArrayBuffer[BigInt] = list.asInstanceOf[LinkedList].next
  val new_index: BigInt = BigInt((nexts).size)
  nexts = ({nexts += (NULL); nexts})
  if (list.asInstanceOf[LinkedList].head == NULL) {
    return LinkedList(nexts, new_index)
  }
  var last: BigInt = list.asInstanceOf[LinkedList].head
  while (nexts.lift((last.toInt).toInt).getOrElse(BigInt(0)) != NULL) {
    last = nexts.lift((last.toInt).toInt).getOrElse(BigInt(0))
  }
  var new_nexts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((nexts).size)) {
    if (i == last) {
      new_nexts = (new_nexts :+ (new_index))
    } else {
      new_nexts = (new_nexts :+ (nexts.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    }
    i = i + BigInt(1)
  }
  return LinkedList(new_nexts, list.asInstanceOf[LinkedList].head)
}

def set_next(list: LinkedList, index: BigInt, next_index: BigInt): LinkedList = {
  var nexts: ArrayBuffer[BigInt] = list.asInstanceOf[LinkedList].next
  var new_nexts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((nexts).size)) {
    if (i == index) {
      new_nexts = (new_nexts :+ (next_index))
    } else {
      new_nexts = (new_nexts :+ (nexts.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    }
    i = i + BigInt(1)
  }
  return LinkedList(new_nexts, list.asInstanceOf[LinkedList].head)
}

def detect_cycle(list: LinkedList): Boolean = {
  if (list.asInstanceOf[LinkedList].head == NULL) {
    return false
  }
  val nexts: ArrayBuffer[BigInt] = list.asInstanceOf[LinkedList].next
  var slow: BigInt = list.asInstanceOf[LinkedList].head
  var fast: BigInt = list.asInstanceOf[LinkedList].head
  while (fast != NULL && nexts.lift((fast.toInt).toInt).getOrElse(BigInt(0)) != NULL) {
    slow = nexts.lift((slow.toInt).toInt).getOrElse(BigInt(0))
    fast = nexts.lift((nexts.lift((fast.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(BigInt(0))
    if (slow == fast) {
      return true
    }
  }
  return false
}

def main(): Any = {
  var ll: LinkedList = empty_list()
  ll = add_node(ll, BigInt(1))
  ll = add_node(ll, BigInt(2))
  ll = add_node(ll, BigInt(3))
  ll = add_node(ll, BigInt(4))
  ll = set_next(ll, BigInt(3), BigInt(1))
  println(_str(detect_cycle(ll)))
}

val NULL: BigInt = BigInt(-1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
