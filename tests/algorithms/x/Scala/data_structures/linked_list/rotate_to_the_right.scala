// Generated by Mochi v0.10.59 on 2025-08-07 00:49:14 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def list_to_string(xs: ArrayBuffer[BigInt]): String = {
  if (BigInt((xs).size) == 0) {
    return ""
  }
  var s: String = String.valueOf(xs((0.toInt).toInt))
  var i: BigInt = 1
  while (i < BigInt((xs).size)) {
    s = s + "->" + String.valueOf(xs((i.toInt).toInt))
    i = i + 1
  }
  return s
}

def insert_node(xs: ArrayBuffer[BigInt], data: BigInt): ArrayBuffer[BigInt] = {
  return xs :+ data
}

def rotate_to_the_right(xs: ArrayBuffer[BigInt], places: BigInt): ArrayBuffer[BigInt] = {
  if (BigInt((xs).size) == 0) {
    throw new RuntimeException(String.valueOf("The linked list is empty."))
  }
  val n: BigInt = BigInt((xs).size)
  var k: BigInt = places % n
  if (k == 0) {
    return xs
  }
  val split: BigInt = n - k
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = split
  while (i < n) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  var j: BigInt = 0
  while (j < split) {
    res = res :+ xs((j.toInt).toInt)
    j = j + 1
  }
  return res
}

def main(): Any = {
  var head: ArrayBuffer[BigInt] = ArrayBuffer()
  head = insert_node(head, 5)
  head = insert_node(head, 1)
  head = insert_node(head, 2)
  head = insert_node(head, 4)
  head = insert_node(head, 3)
  println("Original list: " + list_to_string(head))
  val places: BigInt = 3
  val new_head: ArrayBuffer[BigInt] = rotate_to_the_right(head, places)
  println("After " + String.valueOf(places) + " iterations: " + list_to_string(new_head))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
