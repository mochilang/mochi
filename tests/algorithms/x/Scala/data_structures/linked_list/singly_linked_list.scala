// Generated by Mochi v0.10.72 on 2025-08-24 22:25:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class SinglyLinkedList(var data: ArrayBuffer[BigInt])

case class DeleteResult(var list: SinglyLinkedList, var value: BigInt)

def empty_list(): SinglyLinkedList = {
  return SinglyLinkedList(ArrayBuffer())
}

def length(list: SinglyLinkedList): BigInt = {
  return BigInt((list.asInstanceOf[SinglyLinkedList].data).size)
}

def is_empty(list: SinglyLinkedList): Boolean = {
  return BigInt((list.asInstanceOf[SinglyLinkedList].data).size) == BigInt(0)
}

def to_string(list: SinglyLinkedList): String = {
  if (BigInt((list.asInstanceOf[SinglyLinkedList].data).size) == BigInt(0)) {
    return ""
  }
  var s: String = _str(list.asInstanceOf[SinglyLinkedList].data.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
  var i: BigInt = BigInt(1)
  while (i < BigInt((list.asInstanceOf[SinglyLinkedList].data).size)) {
    s = s + " -> " + _str(list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  return s
}

def insert_nth(list: SinglyLinkedList, index: BigInt, value: BigInt): SinglyLinkedList = {
  if ((index < BigInt(0) || index > BigInt((list.asInstanceOf[SinglyLinkedList].data).size))) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < index) {
    res = (res :+ (list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  res = (res :+ (value))
  while (i < BigInt((list.asInstanceOf[SinglyLinkedList].data).size)) {
    res = (res :+ (list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  return SinglyLinkedList(res)
}

def insert_head(list: SinglyLinkedList, value: BigInt): SinglyLinkedList = {
  return insert_nth(list, BigInt(0), value)
}

def insert_tail(list: SinglyLinkedList, value: BigInt): SinglyLinkedList = {
  return insert_nth(list, BigInt((list.asInstanceOf[SinglyLinkedList].data).size), value)
}

def delete_nth(list: SinglyLinkedList, index: BigInt): DeleteResult = {
  if ((index < BigInt(0) || index >= BigInt((list.asInstanceOf[SinglyLinkedList].data).size))) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var `val`: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((list.asInstanceOf[SinglyLinkedList].data).size)) {
    if (i == index) {
      `val` = list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0))
    } else {
      res = (res :+ (list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    }
    i = i + BigInt(1)
  }
  return DeleteResult(SinglyLinkedList(res), `val`)
}

def delete_head(list: SinglyLinkedList): DeleteResult = {
  return delete_nth(list, BigInt(0))
}

def delete_tail(list: SinglyLinkedList): DeleteResult = {
  return delete_nth(list, BigInt((list.asInstanceOf[SinglyLinkedList].data).size) - BigInt(1))
}

def get_item(list: SinglyLinkedList, index: BigInt): BigInt = {
  if ((index < BigInt(0) || index >= BigInt((list.asInstanceOf[SinglyLinkedList].data).size))) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  return list.asInstanceOf[SinglyLinkedList].data.lift((index.toInt).toInt).getOrElse(BigInt(0))
}

def set_item(list: SinglyLinkedList, index: BigInt, value: BigInt): SinglyLinkedList = {
  if ((index < BigInt(0) || index >= BigInt((list.asInstanceOf[SinglyLinkedList].data).size))) {
    throw new RuntimeException(String.valueOf("index out of range"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((list.asInstanceOf[SinglyLinkedList].data).size)) {
    if (i == index) {
      res = (res :+ (value))
    } else {
      res = (res :+ (list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    }
    i = i + BigInt(1)
  }
  return SinglyLinkedList(res)
}

def reverse_list(list: SinglyLinkedList): SinglyLinkedList = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt((list.asInstanceOf[SinglyLinkedList].data).size) - BigInt(1)
  while (i >= BigInt(0)) {
    res = (res :+ (list.asInstanceOf[SinglyLinkedList].data.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i - BigInt(1)
  }
  return SinglyLinkedList(res)
}

def main(): Any = {
  var lst: SinglyLinkedList = empty_list()
  var i: BigInt = BigInt(1)
  while (i <= BigInt(5)) {
    lst = insert_tail(lst, i)
    i = i + BigInt(1)
  }
  println(_str(to_string(lst)))
  lst = insert_head(lst, BigInt(0))
  println(_str(to_string(lst)))
  var del: DeleteResult = delete_head(lst)
  lst = del.asInstanceOf[DeleteResult].list
  println(_str(_str(del.asInstanceOf[DeleteResult].value)))
  del = delete_tail(lst)
  lst = del.asInstanceOf[DeleteResult].list
  println(_str(_str(del.asInstanceOf[DeleteResult].value)))
  del = delete_nth(lst, BigInt(2))
  lst = del.asInstanceOf[DeleteResult].list
  println(_str(_str(del.asInstanceOf[DeleteResult].value)))
  lst = set_item(lst, BigInt(1), BigInt(99))
  println(_str(_str(get_item(lst, BigInt(1)))))
  lst = reverse_list(lst)
  println(_str(to_string(lst)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
