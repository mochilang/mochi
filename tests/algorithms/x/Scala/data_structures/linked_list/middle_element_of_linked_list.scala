// Generated by Mochi v0.10.59 on 2025-08-07 00:48:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class List(var data: ArrayBuffer[BigInt])

def empty_list(): List = {
  return List(ArrayBuffer())
}

def push(lst: List, value: BigInt): List = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer(value)
  var i: BigInt = 0
  while (i < BigInt((lst.asInstanceOf[List].data).size)) {
    res = res :+ lst.asInstanceOf[List].data((i.toInt).toInt)
    i = i + 1
  }
  return List(res)
}

def middle_element(lst: List): BigInt = {
  val n: BigInt = BigInt((lst.asInstanceOf[List].data).size)
  if (n == 0) {
    println("No element found.")
    return 0
  }
  var slow: BigInt = 0
  var fast: BigInt = 0
  while (fast + 1 < n) {
    fast = fast + 2
    slow = slow + 1
  }
  return lst.asInstanceOf[List].data((slow.toInt).toInt)
}

def main(): Any = {
  var lst: List = empty_list()
  middle_element(lst)
  lst = push(lst, 5)
  println(5)
  lst = push(lst, 6)
  println(6)
  lst = push(lst, 8)
  println(8)
  lst = push(lst, 8)
  println(8)
  lst = push(lst, 10)
  println(10)
  lst = push(lst, 12)
  println(12)
  lst = push(lst, 17)
  println(17)
  lst = push(lst, 7)
  println(7)
  lst = push(lst, 3)
  println(3)
  lst = push(lst, 20)
  println(20)
  lst = push(lst, -20)
  println(-20)
  println(middle_element(lst))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
