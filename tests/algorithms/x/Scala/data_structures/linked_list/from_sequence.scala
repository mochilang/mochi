// Generated by Mochi v0.10.59 on 2025-08-07 00:48:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var data: BigInt, var next: BigInt)

def make_linked_list(elements: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((elements).size) == 0) {
    throw new RuntimeException(String.valueOf("The Elements List is empty"))
  }
  nodes = ArrayBuffer()
  nodes = nodes :+ (Node(elements((0.toInt).toInt), NIL)).asInstanceOf[Any]
  var head: BigInt = 0
  var current: BigInt = head
  var i: BigInt = 1
  while (i < BigInt((elements).size)) {
    nodes = nodes :+ (Node(elements((i.toInt).toInt), NIL)).asInstanceOf[Any]
    nodes((current).toInt).asInstanceOf[Node].next = BigInt((nodes).size) - 1
    current = BigInt((nodes).size) - 1
    i = i + 1
  }
  return head
}

def node_to_string(head: BigInt): String = {
  var s: String = ""
  var index: BigInt = head
  while (index != NIL) {
    val node: Node = nodes((index.toInt).toInt)
    s = s + "<" + String.valueOf(node.asInstanceOf[Node].data) + "> ---> "
    index = node.asInstanceOf[Node].next
  }
  s = s + "<END>"
  return s
}

def main(): Any = {
  val list_data: ArrayBuffer[BigInt] = ArrayBuffer(1, 3, 5, 32, 44, 12, 43)
  println("List: " + String.valueOf(list_data))
  println("Creating Linked List from List.")
  val head: BigInt = make_linked_list(list_data)
  println("Linked List:")
  println(node_to_string(head))
}

val NIL: BigInt = 0 - 1

var nodes: ArrayBuffer[Node] = ArrayBuffer()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
