// Generated by Mochi v0.10.59 on 2025-08-07 08:39:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ceil_index(v: ArrayBuffer[BigInt], left: BigInt, right: BigInt, key: BigInt): BigInt = {
  var l: BigInt = left
  var r: BigInt = right
  while (r - l > 1) {
    val middle: BigInt = (l + r) / 2
    if (v((middle.toInt).toInt) >= key) {
      r = middle
    } else {
      l = middle
    }
  }
  return r
}

def longest_increasing_subsequence_length(v: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((v).size) == 0) {
    return 0
  }
  var tail: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((v).size)) {
    tail = tail :+ BigInt(0)
    i = i + 1
  }
  var length: BigInt = 1
  tail((0).toInt) = v((0.toInt).toInt)
  var j: BigInt = 1
  while (j < BigInt((v).size)) {
    if (v((j.toInt).toInt) < tail((0.toInt).toInt)) {
      tail((0).toInt) = v((j.toInt).toInt)
    } else {
      if (v((j.toInt).toInt) > tail(((length - 1).toInt).toInt)) {
        tail((length).toInt) = v((j.toInt).toInt)
        length = length + 1
      } else {
        val idx: BigInt = ceil_index(tail, -1, length - 1, v((j.toInt).toInt))
        tail((idx).toInt) = v((j.toInt).toInt)
      }
    }
    j = j + 1
  }
  return length
}

def main(): Any = {
  val example1: ArrayBuffer[BigInt] = ArrayBuffer(2, 5, 3, 7, 11, 8, 10, 13, 6)
  val example2: ArrayBuffer[BigInt] = ArrayBuffer()
  val example3: ArrayBuffer[BigInt] = ArrayBuffer(0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15)
  val example4: ArrayBuffer[BigInt] = ArrayBuffer(5, 4, 3, 2, 1)
  println(longest_increasing_subsequence_length(example1))
  println(longest_increasing_subsequence_length(example2))
  println(longest_increasing_subsequence_length(example3))
  println(longest_increasing_subsequence_length(example4))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
