// Generated by Mochi v0.10.59 on 2025-08-07 08:48:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def copy_list(src: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((src).size)) {
    result = result :+ src((i.toInt).toInt)
    i = i + 1
  }
  return result
}

def subset_combinations(elements: ArrayBuffer[BigInt], n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val r: BigInt = BigInt((elements).size)
  if (n > r) {
    return ArrayBuffer()
  }
  var dp: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= r) {
    dp = dp :+ ArrayBuffer()
    i = i + 1
  }
  dp((0).toInt) = dp((0.toInt).toInt) :+ ArrayBuffer()
  i = 1
  while (i <= r) {
    var j: BigInt = i
    while (j > 0) {
      var prevs: ArrayBuffer[ArrayBuffer[BigInt]] = dp(((j - 1).toInt).toInt)
      var k: BigInt = 0
      while (k < BigInt((prevs).size)) {
        var prev: ArrayBuffer[BigInt] = prevs((k.toInt).toInt)
        var comb: ArrayBuffer[BigInt] = copy_list(prev)
        comb = comb :+ elements(((i - 1).toInt).toInt)
        dp((j).toInt) = dp((j.toInt).toInt) :+ comb
        k = k + 1
      }
      j = j - 1
    }
    i = i + 1
  }
  return dp((n.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(subset_combinations(ArrayBuffer(10, 20, 30, 40), 2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
