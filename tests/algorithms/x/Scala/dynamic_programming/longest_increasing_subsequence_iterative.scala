// Generated by Mochi v0.10.59 on 2025-08-07 08:39:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def copy_list(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    res = res :+ xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def longest_subsequence(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((arr).size)
  var lis: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var single: ArrayBuffer[BigInt] = ArrayBuffer()
    single = single :+ arr((i.toInt).toInt)
    lis = lis :+ single
    i = i + 1
  }
  i = 1
  while (i < n) {
    var prev: BigInt = 0
    while (prev < i) {
      if ((arr((prev.toInt).toInt) <= arr((i.toInt).toInt) && BigInt((lis((prev.toInt).toInt)).size) + 1 > BigInt((lis((i.toInt).toInt)).size)).asInstanceOf[Boolean]) {
        val temp: ArrayBuffer[BigInt] = copy_list(lis((prev.toInt).toInt))
        val temp2: ArrayBuffer[BigInt] = temp :+ arr((i.toInt).toInt)
        lis((i).toInt) = temp2
      }
      prev = prev + 1
    }
    i = i + 1
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  i = 0
  while (i < n) {
    if (BigInt((lis((i.toInt).toInt)).size) > BigInt((result).size)) {
      result = lis((i.toInt).toInt)
    }
    i = i + 1
  }
  return result
}

def main(): Any = {
  println(String.valueOf(longest_subsequence(ArrayBuffer(10, 22, 9, 33, 21, 50, 41, 60, 80))))
  println(String.valueOf(longest_subsequence(ArrayBuffer(4, 8, 7, 5, 1, 12, 2, 3, 9))))
  println(String.valueOf(longest_subsequence(ArrayBuffer(9, 8, 7, 6, 5, 7))))
  println(String.valueOf(longest_subsequence(ArrayBuffer(28, 26, 12, 23, 35, 39))))
  println(String.valueOf(longest_subsequence(ArrayBuffer(1, 1, 1))))
  println(String.valueOf(longest_subsequence((ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]])))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
