// Generated by Mochi v0.10.59 on 2025-08-07 08:47:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Query(var left: BigInt, var right: BigInt)

def prefix_sum(arr: ArrayBuffer[BigInt], queries: ArrayBuffer[Query]): ArrayBuffer[BigInt] = {
  var dp: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    if (i == 0) {
      dp = dp :+ arr((0.toInt).toInt)
    } else {
      dp = dp :+ dp(((i - 1).toInt).toInt) + arr((i.toInt).toInt)
    }
    i = i + 1
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var j: BigInt = 0
  while (j < BigInt((queries).size)) {
    val q: Query = queries((j.toInt).toInt)
    var sum: BigInt = dp((q.asInstanceOf[Query].right.toInt).toInt)
    if (q.asInstanceOf[Query].left > 0) {
      sum = sum - dp(((q.asInstanceOf[Query].left - 1).toInt).toInt)
    }
    result = result :+ sum
    j = j + 1
  }
  return result
}

val arr1: ArrayBuffer[BigInt] = ArrayBuffer(1, 4, 6, 2, 61, 12)

val queries1: ArrayBuffer[Query] = ArrayBuffer(Query(2, 5), Query(1, 5), Query(3, 4))

val arr2: ArrayBuffer[BigInt] = ArrayBuffer(4, 2, 1, 6, 3)

val queries2: ArrayBuffer[Query] = ArrayBuffer(Query(3, 4), Query(1, 3), Query(0, 2))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(prefix_sum(arr1, queries1)))
    println(String.valueOf(prefix_sum(arr2, queries2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
