// Generated by Mochi v0.10.59 on 2025-08-07 08:46:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def minimum_subarray_sum(target: BigInt, numbers: ArrayBuffer[BigInt]): BigInt = {
  val n: BigInt = BigInt((numbers).size)
  if (n == 0) {
    return 0
  }
  if (target == 0) {
    var i: BigInt = 0
    while (i < n) {
      if (numbers((i.toInt).toInt) == 0) {
        return 0
      }
      i = i + 1
    }
  }
  var left: BigInt = 0
  var right: BigInt = 0
  var curr_sum: BigInt = 0
  var min_len: BigInt = n + 1
  while (right < n) {
    curr_sum = curr_sum + numbers((right.toInt).toInt)
    while (curr_sum >= target && left <= right) {
      val current_len: BigInt = right - left + 1
      if (current_len < min_len) {
        min_len = current_len
      }
      curr_sum = curr_sum - numbers((left.toInt).toInt)
      left = left + 1
    }
    right = right + 1
  }
  if (min_len == n + 1) {
    return 0
  }
  return min_len
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(minimum_subarray_sum(7, ArrayBuffer(2, 3, 1, 2, 4, 3))))
    println(String.valueOf(minimum_subarray_sum(7, ArrayBuffer(2, 3, BigInt((-1).toString.toDouble.toInt), 2, 4, BigInt((-3).toString.toDouble.toInt)))))
    println(String.valueOf(minimum_subarray_sum(11, ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1))))
    println(String.valueOf(minimum_subarray_sum(0, ArrayBuffer(1, 2, 3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
