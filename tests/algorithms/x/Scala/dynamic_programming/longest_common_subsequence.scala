// Generated by Mochi v0.10.59 on 2025-08-07 08:38:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class LcsResult(var length: BigInt, var sequence: String)

def zeros_matrix(rows: BigInt, cols: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= cols) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    matrix = matrix :+ row
    i = i + 1
  }
  return matrix
}

def longest_common_subsequence(x: String, y: String): LcsResult = {
  val m: BigInt = BigInt((x).size)
  val n: BigInt = BigInt((y).size)
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = zeros_matrix(m, n)
  var i: BigInt = 1
  while (i <= m) {
    var j: BigInt = 1
    while (j <= n) {
      if (x.slice(((i - 1).toInt).toInt, ((i - 1).toInt).toInt + 1) == y.slice(((j - 1).toInt).toInt, ((j - 1).toInt).toInt + 1)) {
        dp((i).toInt)((j).toInt) = dp(((i - 1).toInt).toInt)(((j - 1).toInt).toInt) + 1
      } else {
        if (dp(((i - 1).toInt).toInt)((j.toInt).toInt) > dp((i.toInt).toInt)(((j - 1).toInt).toInt)) {
          dp((i).toInt)((j).toInt) = dp(((i - 1).toInt).toInt)((j.toInt).toInt)
        } else {
          dp((i).toInt)((j).toInt) = dp((i.toInt).toInt)(((j - 1).toInt).toInt)
        }
      }
      j = j + 1
    }
    i = i + 1
  }
  var seq: String = ""
  var i2: BigInt = m
  var j2: BigInt = n
  while (i2 > 0 && j2 > 0) {
    if (x.slice(((i2 - 1).toInt).toInt, ((i2 - 1).toInt).toInt + 1) == y.slice(((j2 - 1).toInt).toInt, ((j2 - 1).toInt).toInt + 1)) {
      seq = x.slice(((i2 - 1).toInt).toInt, ((i2 - 1).toInt).toInt + 1) + seq
      i2 = i2 - 1
      j2 = j2 - 1
    } else {
      if (dp(((i2 - 1).toInt).toInt)((j2.toInt).toInt) >= dp((i2.toInt).toInt)(((j2 - 1).toInt).toInt)) {
        i2 = i2 - 1
      } else {
        j2 = j2 - 1
      }
    }
  }
  return LcsResult(dp((m.toInt).toInt)((n.toInt).toInt), seq)
}

val a: String = "AGGTAB"

val b: String = "GXTXAYB"

val res: LcsResult = longest_common_subsequence(a, b)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("len = " + String.valueOf(res.length) + ", sub-sequence = " + res.sequence)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
