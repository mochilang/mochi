// Generated by Mochi v0.10.59 on 2025-08-07 08:48:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def create_bool_matrix(rows: BigInt, cols: BigInt): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var matrix: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= rows) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= cols) {
      row = row :+ false
      j = j + 1
    }
    matrix = matrix :+ row
    i = i + 1
  }
  return matrix
}

def is_sum_subset(arr: ArrayBuffer[BigInt], required_sum: BigInt): Boolean = {
  val arr_len: BigInt = BigInt((arr).size)
  var subset: ArrayBuffer[ArrayBuffer[Boolean]] = create_bool_matrix(arr_len, required_sum)
  var i: BigInt = 0
  while (i <= arr_len) {
    subset((i).toInt)((0).toInt) = true
    i = i + 1
  }
  var j: BigInt = 1
  while (j <= required_sum) {
    subset((0).toInt)((j).toInt) = false
    j = j + 1
  }
  i = 1
  while (i <= arr_len) {
    j = 1
    while (j <= required_sum) {
      if (arr(((i - 1).toInt).toInt) > j) {
        subset((i).toInt)((j).toInt) = subset(((i - 1).toInt).toInt)((j.toInt).toInt)
      }
      if (arr(((i - 1).toInt).toInt) <= j) {
        subset((i).toInt)((j).toInt) = (subset(((i - 1).toInt).toInt)((j.toInt).toInt) || subset(((i - 1).toInt).toInt)(((j - arr(((i - 1).toInt).toInt)).toInt).toInt)).asInstanceOf[Boolean]
      }
      j = j + 1
    }
    i = i + 1
  }
  return subset((arr_len.toInt).toInt)((required_sum.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(is_sum_subset(ArrayBuffer(2, 4, 6, 8), 5))
    println(is_sum_subset(ArrayBuffer(2, 4, 6, 8), 14))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
