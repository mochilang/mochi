// Generated by Mochi v0.10.59 on 2025-08-07 00:57:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  var idx: BigInt = index_of(upper, ch)
  if (idx >= 0) {
    return 65 + idx
  }
  idx = index_of(lower, ch)
  if (idx >= 0) {
    return 97 + idx
  }
  return 0
}

def chr(n: BigInt): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  if ((n >= 65 && n < 91).asInstanceOf[Boolean]) {
    return upper.slice((n - 65).toInt, (n - 64).toInt)
  }
  if ((n >= 97 && n < 123).asInstanceOf[Boolean]) {
    return lower.slice((n - 97).toInt, (n - 96).toInt)
  }
  return "?"
}

def to_upper_char(c: String): String = {
  val code: BigInt = ord(c)
  if ((code >= 97 && code <= 122).asInstanceOf[Boolean]) {
    return chr(code - 32)
  }
  return c
}

def is_lower(c: String): Boolean = {
  val code: BigInt = ord(c)
  return (code >= 97 && code <= 122).asInstanceOf[Boolean]
}

def abbr(a: String, b: String): Boolean = {
  val n: BigInt = BigInt((a).size)
  val m: BigInt = BigInt((b).size)
  var dp: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= n) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= m) {
      row = row :+ false
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  dp((0).toInt)((0).toInt) = true
  i = 0
  while (i < n) {
    var j: BigInt = 0
    while (j <= m) {
      if (dp((i.toInt).toInt)((j.toInt).toInt)) {
        if ((j < m && to_upper_char((a.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) == b.slice((j.toInt).toInt, (j.toInt).toInt + 1)).asInstanceOf[Boolean]) {
          dp((i + 1).toInt)((j + 1).toInt) = true
        }
        if (is_lower((a.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)) {
          dp((i + 1).toInt)((j).toInt) = true
        }
      }
      j = j + 1
    }
    i = i + 1
  }
  return dp((n.toInt).toInt)((m.toInt).toInt)
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(abbr("daBcd", "ABC"))
    print_bool(abbr("dBcd", "ABC"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
