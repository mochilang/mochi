// Generated by Mochi v0.10.59 on 2025-08-07 01:00:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class KMeansResult(var centroids: ArrayBuffer[ArrayBuffer[Double]], var assignments: ArrayBuffer[BigInt])

def distance_sq(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = 0
  while (i < BigInt((a).size)) {
    var diff: Double = a((i.toInt).toInt) - b((i.toInt).toInt)
    sum = sum + diff * diff
    i = i + 1
  }
  return sum
}

def mean(vectors: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Double] = {
  var dim: BigInt = BigInt((vectors((0.toInt).toInt)).size)
  var res: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < dim) {
    var total: Double = 0.0
    var j: BigInt = 0
    while (j < BigInt((vectors).size)) {
      total = total + vectors((j.toInt).toInt)((i.toInt).toInt)
      j = j + 1
    }
    res = res :+ total / (BigInt((vectors).size)).toString.toDouble
    i = i + 1
  }
  return res
}

def k_means(vectors: ArrayBuffer[ArrayBuffer[Double]], k: BigInt, iterations: BigInt): KMeansResult = {
  var centroids: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < k) {
    centroids = centroids :+ vectors((i.toInt).toInt)
    i = i + 1
  }
  var assignments: ArrayBuffer[BigInt] = ArrayBuffer()
  var n: BigInt = BigInt((vectors).size)
  i = 0
  while (i < n) {
    assignments = assignments :+ BigInt(0)
    i = i + 1
  }
  var it: BigInt = 0
  while (it < iterations) {
    var v: BigInt = 0
    while (v < n) {
      var best: BigInt = 0
      var bestDist: Double = distance_sq(vectors((v.toInt).toInt), centroids((0.toInt).toInt))
      var c: BigInt = 1
      while (c < k) {
        var d: Double = distance_sq(vectors((v.toInt).toInt), centroids((c.toInt).toInt))
        if (d < bestDist) {
          bestDist = d
          best = c
        }
        c = c + 1
      }
      assignments((v).toInt) = best
      v = v + 1
    }
    var cIdx: BigInt = 0
    while (cIdx < k) {
      var cluster: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
      var v2: BigInt = 0
      while (v2 < n) {
        if (assignments((v2.toInt).toInt) == cIdx) {
          cluster = cluster :+ vectors((v2.toInt).toInt)
        }
        v2 = v2 + 1
      }
      if (BigInt((cluster).size) > 0) {
        centroids((cIdx).toInt) = mean(cluster)
      }
      cIdx = cIdx + 1
    }
    it = it + 1
  }
  return KMeansResult(centroids, assignments)
}

def main(): Any = {
  val vectors: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 2.0), ArrayBuffer(1.5, 1.8), ArrayBuffer(5.0, 8.0), ArrayBuffer(8.0, 8.0), ArrayBuffer(1.0, 0.6), ArrayBuffer(9.0, 11.0))
  val result: KMeansResult = k_means(vectors, 2, 5)
  println(String.valueOf(result.asInstanceOf[KMeansResult].centroids))
  println(String.valueOf(result.asInstanceOf[KMeansResult].assignments))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
