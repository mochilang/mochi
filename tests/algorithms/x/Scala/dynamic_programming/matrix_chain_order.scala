// Generated by Mochi v0.10.59 on 2025-08-07 08:39:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class MatrixChainResult(var matrix: ArrayBuffer[ArrayBuffer[BigInt]], var solution: ArrayBuffer[ArrayBuffer[BigInt]])

def make_2d(n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    res = res :+ row
    i = i + 1
  }
  return res
}

def matrix_chain_order(arr: ArrayBuffer[BigInt]): MatrixChainResult = {
  val n: BigInt = BigInt((arr).size)
  var m: ArrayBuffer[ArrayBuffer[BigInt]] = make_2d(n)
  var s: ArrayBuffer[ArrayBuffer[BigInt]] = make_2d(n)
  var chain_length: BigInt = 2
  while (chain_length < n) {
    var a: BigInt = 1
    while (a < n - chain_length + 1) {
      val b: BigInt = a + chain_length - 1
      m((a).toInt)((b).toInt) = 1000000000
      var c: BigInt = a
      while (c < b) {
        val cost: BigInt = m((a.toInt).toInt)((c.toInt).toInt) + m(((c + 1).toInt).toInt)((b.toInt).toInt) + arr(((a - 1).toInt).toInt) * arr((c.toInt).toInt) * arr((b.toInt).toInt)
        if (cost < m((a.toInt).toInt)((b.toInt).toInt)) {
          m((a).toInt)((b).toInt) = cost
          s((a).toInt)((b).toInt) = c
        }
        c = c + 1
      }
      a = a + 1
    }
    chain_length = chain_length + 1
  }
  return MatrixChainResult(m, s)
}

def optimal_parenthesization(s: ArrayBuffer[ArrayBuffer[BigInt]], i: BigInt, j: BigInt): String = {
  if (i == j) {
    return "A" + String.valueOf(i)
  } else {
    val left: String = optimal_parenthesization(s, i, s((i.toInt).toInt)((j.toInt).toInt))
    val right: String = optimal_parenthesization(s, s((i.toInt).toInt)((j.toInt).toInt) + 1, j)
    return "( " + left + " " + right + " )"
  }
  return ""
}

def main(): Any = {
  val arr: ArrayBuffer[BigInt] = ArrayBuffer(30, 35, 15, 5, 10, 20, 25)
  val n: BigInt = BigInt((arr).size)
  val res: MatrixChainResult = matrix_chain_order(arr)
  val m: ArrayBuffer[ArrayBuffer[BigInt]] = res.asInstanceOf[MatrixChainResult].matrix
  val s: ArrayBuffer[ArrayBuffer[BigInt]] = res.asInstanceOf[MatrixChainResult].solution
  println("No. of Operation required: " + String.valueOf(m((1.toInt).toInt)(((n - 1).toInt).toInt)))
  val seq: String = optimal_parenthesization(s, 1, n - 1)
  println(seq)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
