// Generated by Mochi v0.10.59 on 2025-08-07 00:57:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def allConstruct(target: String, wordBank: ArrayBuffer[String]): ArrayBuffer[ArrayBuffer[String]] = {
  val tableSize: BigInt = BigInt((target).size) + 1
  var table: ArrayBuffer[ArrayBuffer[ArrayBuffer[String]]] = ArrayBuffer()
  var idx: BigInt = 0
  while (idx < tableSize) {
    var empty: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
    table = table :+ empty
    idx = idx + 1
  }
  var base: ArrayBuffer[String] = ArrayBuffer()
  table((0).toInt) = ArrayBuffer(base)
  var i: BigInt = 0
  while (i < tableSize) {
    if (BigInt((table((i.toInt).toInt)).size) != 0) {
      var w: BigInt = 0
      while (w < BigInt((wordBank).size)) {
        val word: String = wordBank((w.toInt).toInt)
        val wordLen: BigInt = BigInt((word).size)
        if (target.slice((i).toInt, (i + wordLen).toInt) == word) {
          var k: BigInt = 0
          while (k < BigInt((table((i.toInt).toInt)).size)) {
            val way: ArrayBuffer[String] = table((i.toInt).toInt)((k.toInt).toInt)
            var combination: ArrayBuffer[String] = ArrayBuffer()
            var m: BigInt = 0
            while (m < BigInt((way).size)) {
              combination = combination :+ way((m.toInt).toInt)
              m = m + 1
            }
            combination = combination :+ word
            val nextIndex: BigInt = i + wordLen
            table((nextIndex).toInt) = table((nextIndex.toInt).toInt) :+ combination
            k = k + 1
          }
        }
        w = w + 1
      }
    }
    i = i + 1
  }
  return table((BigInt((target).size).toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(allConstruct("jwajalapa", ArrayBuffer("jwa", "j", "w", "a", "la", "lapa"))))
    println(String.valueOf(allConstruct("rajamati", ArrayBuffer("s", "raj", "amat", "raja", "ma", "i", "t"))))
    println(String.valueOf(allConstruct("hexagonosaurus", ArrayBuffer("h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
