// Generated by Mochi v0.10.59 on 2025-08-07 00:58:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bitwise_and(a: BigInt, b: BigInt): BigInt = {
  var result: BigInt = 0
  var bit: BigInt = 1
  var x: BigInt = a
  var y: BigInt = b
  while (x > 0 || y > 0) {
    val abit: BigInt = x % 2
    val bbit: BigInt = y % 2
    if ((abit == 1 && bbit == 1).asInstanceOf[Boolean]) {
      result = result + bit
    }
    x = x / 2
    y = y / 2
    bit = bit * 2
  }
  return result
}

def list_of_submasks(mask: BigInt): ArrayBuffer[BigInt] = {
  if (mask <= 0) {
    throw new RuntimeException(String.valueOf("mask needs to be positive integer, your input " + String.valueOf(mask)))
  }
  var all_submasks: ArrayBuffer[BigInt] = ArrayBuffer()
  var submask: BigInt = mask
  while (submask != 0) {
    all_submasks = all_submasks :+ submask
    submask = bitwise_and(submask - 1, mask)
  }
  return all_submasks
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(list_of_submasks(15)))
    println(String.valueOf(list_of_submasks(13)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
