// Generated by Mochi v0.10.59 on 2025-08-07 08:46:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  }
  return b
}

def minimum_cost_path(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  val rows: BigInt = BigInt((matrix).size)
  val cols: BigInt = BigInt((matrix((0.toInt).toInt)).size)
  var j: BigInt = 1
  while (j < cols) {
    var row0: ArrayBuffer[BigInt] = matrix((0.toInt).toInt)
    row0((j).toInt) = row0((j.toInt).toInt) + row0(((j - 1).toInt).toInt)
    matrix((0).toInt) = row0
    j = j + 1
  }
  var i: BigInt = 1
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = matrix((i.toInt).toInt)
    row((0).toInt) = row((0.toInt).toInt) + matrix(((i - 1).toInt).toInt)((0.toInt).toInt)
    matrix((i).toInt) = row
    i = i + 1
  }
  i = 1
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = matrix((i.toInt).toInt)
    j = 1
    while (j < cols) {
      val up: BigInt = matrix(((i - 1).toInt).toInt)((j.toInt).toInt)
      val left: BigInt = row(((j - 1).toInt).toInt)
      val best: BigInt = min_int(up, left)
      row((j).toInt) = row((j.toInt).toInt) + best
      j = j + 1
    }
    matrix((i).toInt) = row
    i = i + 1
  }
  return matrix(((rows - 1).toInt).toInt)(((cols - 1).toInt).toInt)
}

var m1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(2, 1), ArrayBuffer(3, 1), ArrayBuffer(4, 2))

var m2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(2, 1, 4), ArrayBuffer(2, 1, 3), ArrayBuffer(3, 2, 1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(minimum_cost_path(m1)))
    println(String.valueOf(minimum_cost_path(m2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
