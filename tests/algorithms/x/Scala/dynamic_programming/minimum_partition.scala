// Generated by Mochi v0.10.59 on 2025-08-07 08:46:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def find_min(numbers: ArrayBuffer[BigInt]): BigInt = {
  val n: BigInt = BigInt((numbers).size)
  var s: BigInt = 0
  var idx: BigInt = 0
  while (idx < n) {
    s = s + numbers((idx.toInt).toInt)
    idx = idx + 1
  }
  var dp: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= n) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= s) {
      row = row :+ false
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  i = 0
  while (i <= n) {
    dp((i).toInt)((0).toInt) = true
    i = i + 1
  }
  var j: BigInt = 1
  while (j <= s) {
    dp((0).toInt)((j).toInt) = false
    j = j + 1
  }
  i = 1
  while (i <= n) {
    j = 1
    while (j <= s) {
      dp((i).toInt)((j).toInt) = dp(((i - 1).toInt).toInt)((j.toInt).toInt)
      if (numbers(((i - 1).toInt).toInt) <= j) {
        if (dp(((i - 1).toInt).toInt)(((j - numbers(((i - 1).toInt).toInt)).toInt).toInt)) {
          dp((i).toInt)((j).toInt) = true
        }
      }
      j = j + 1
    }
    i = i + 1
  }
  var diff: BigInt = 0
  j = s / 2
  val _br7 = new Breaks
  _br7.breakable {
    while (j >= 0) {
      if (dp((n.toInt).toInt)((j.toInt).toInt)) {
        diff = s - 2 * j
        _br7.break()
      }
      j = j - 1
    }
  }
  return diff
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(find_min(ArrayBuffer(1, 2, 3, 4, 5))))
    println(String.valueOf(find_min(ArrayBuffer(5, 5, 5, 5, 5))))
    println(String.valueOf(find_min(ArrayBuffer(5, 5, 5, 5))))
    println(String.valueOf(find_min(ArrayBuffer(3))))
    println(String.valueOf(find_min(ArrayBuffer())))
    println(String.valueOf(find_min(ArrayBuffer(1, 2, 3, 4))))
    println(String.valueOf(find_min(ArrayBuffer(0, 0, 0, 0))))
    println(String.valueOf(find_min(ArrayBuffer(BigInt((-1).toString.toDouble.toInt), BigInt((-5).toString.toDouble.toInt), 5, 1))))
    println(String.valueOf(find_min(ArrayBuffer(9, 9, 9, 9, 9))))
    println(String.valueOf(find_min(ArrayBuffer(1, 5, 10, 3))))
    println(String.valueOf(find_min(ArrayBuffer(BigInt((-1).toString.toDouble.toInt), 0, 1))))
    println(String.valueOf(find_min(ArrayBuffer(10, 9, 8, 7, 6, 5, 4, 3, 2, 1))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
