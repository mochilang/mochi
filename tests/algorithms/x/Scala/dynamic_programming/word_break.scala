// Generated by Mochi v0.10.64 on 2025-08-13 16:14:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def build_set(words: ArrayBuffer[String]): scala.collection.mutable.Map[String,Boolean] = {
  var m: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  for (w <- words) {
    m.update(w, true)
  }
  return m
}

def word_break(s: String, words: ArrayBuffer[String]): Boolean = {
  val n: BigInt = BigInt((s).size)
  val dict: scala.collection.mutable.Map[String,Boolean] = build_set(words)
  var dp: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    dp = dp += (false)
    i = i + BigInt(1)
  }
  dp((BigInt(0)).toInt) = true
  i = BigInt(1)
  while (i <= n) {
    var j: BigInt = BigInt(0)
    while (j < i) {
      if (dp.lift((j.toInt).toInt).getOrElse(false)) {
        val sub: String = s.slice((j).toInt, (i).toInt)
        if ((dict.contains(sub)).asInstanceOf[Boolean]) {
          dp((i).toInt) = true
          j = i
        }
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return dp.lift((n.toInt).toInt).getOrElse(false)
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(word_break("applepenapple", ArrayBuffer("apple", "pen")))
    print_bool(word_break("catsandog", ArrayBuffer("cats", "dog", "sand", "and", "cat")))
    print_bool(word_break("cars", ArrayBuffer("car", "ca", "rs")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
