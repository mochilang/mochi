// Generated by Mochi v0.10.59 on 2025-08-07 08:47:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_list(len: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < len) {
    arr = arr :+ value
    i = i + 1
  }
  return arr
}

def int_sqrt(n: BigInt): BigInt = {
  var r: BigInt = 0
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1
  }
  return r
}

def minimum_squares_to_represent_a_number(number: BigInt): BigInt = {
  if (number < 0) {
    throw new RuntimeException(String.valueOf("the value of input must not be a negative number"))
  }
  if (number == 0) {
    return 1
  }
  var answers: ArrayBuffer[BigInt] = make_list(number + 1, -1)
  answers((0).toInt) = 0
  var i: BigInt = 1
  while (i <= number) {
    var answer: BigInt = i
    val root: BigInt = int_sqrt(i)
    var j: BigInt = 1
    while (j <= root) {
      val current_answer: BigInt = 1 + answers(((i - j * j).toInt).toInt)
      if (current_answer < answer) {
        answer = current_answer
      }
      j = j + 1
    }
    answers((i).toInt) = answer
    i = i + 1
  }
  return answers((number.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(minimum_squares_to_represent_a_number(25))
    println(minimum_squares_to_represent_a_number(21))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
