// Generated by Mochi v0.10.59 on 2025-08-07 08:39:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def matrix_chain_multiply(arr: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((arr).size) < 2) {
    return 0
  }
  val n: BigInt = BigInt((arr).size)
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      row = row :+ INF
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  i = n - 1
  while (i > 0) {
    var j: BigInt = i
    while (j < n) {
      if (i == j) {
        dp((i).toInt)((j).toInt) = 0
      } else {
        var k: BigInt = i
        while (k < j) {
          val cost: BigInt = dp((i.toInt).toInt)((k.toInt).toInt) + dp(((k + 1).toInt).toInt)((j.toInt).toInt) + arr(((i - 1).toInt).toInt) * arr((k.toInt).toInt) * arr((j.toInt).toInt)
          if (cost < dp((i.toInt).toInt)((j.toInt).toInt)) {
            dp((i).toInt)((j).toInt) = cost
          }
          k = k + 1
        }
      }
      j = j + 1
    }
    i = i - 1
  }
  return dp((1.toInt).toInt)(((n - 1).toInt).toInt)
}

val INF: BigInt = 1000000000

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
