// Generated by Mochi v0.10.59 on 2025-08-07 08:48:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_bool_list(n: BigInt): ArrayBuffer[Boolean] = {
  var row: ArrayBuffer[Boolean] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    row = row :+ false
    i = i + 1
  }
  return row
}

def make_bool_matrix(rows: BigInt, cols: BigInt): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var matrix: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < rows) {
    matrix = matrix :+ make_bool_list(cols)
    i = i + 1
  }
  return matrix
}

def is_match(s: String, p: String): Boolean = {
  val n: BigInt = BigInt((s).size)
  val m: BigInt = BigInt((p).size)
  var dp: ArrayBuffer[ArrayBuffer[Boolean]] = make_bool_matrix(n + 1, m + 1)
  dp((0).toInt)((0).toInt) = true
  var j: BigInt = 1
  while (j <= m) {
    if (p.slice((j - 1).toInt, (j).toInt) == "*") {
      dp((0).toInt)((j).toInt) = dp((0.toInt).toInt)(((j - 1).toInt).toInt)
    }
    j = j + 1
  }
  var i: BigInt = 1
  while (i <= n) {
    var j2: BigInt = 1
    while (j2 <= m) {
      val pc: String = p.slice((j2 - 1).toInt, (j2).toInt)
      val sc: String = s.slice((i - 1).toInt, (i).toInt)
      if ((pc == sc || pc == "?").asInstanceOf[Boolean]) {
        dp((i).toInt)((j2).toInt) = dp(((i - 1).toInt).toInt)(((j2 - 1).toInt).toInt)
      } else {
        if (pc == "*") {
          if ((dp(((i - 1).toInt).toInt)((j2.toInt).toInt) || dp((i.toInt).toInt)(((j2 - 1).toInt).toInt)).asInstanceOf[Boolean]) {
            dp((i).toInt)((j2).toInt) = true
          }
        }
      }
      j2 = j2 + 1
    }
    i = i + 1
  }
  return dp((n.toInt).toInt)((m.toInt).toInt)
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(is_match("abc", "a*c"))
    print_bool(is_match("abc", "a*d"))
    print_bool(is_match("baaabab", "*****ba*****ab"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
