// Generated by Mochi v0.10.59 on 2025-08-07 00:58:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Graph(var n: BigInt, var dp: ArrayBuffer[ArrayBuffer[BigInt]])

def new_graph(n: BigInt): Graph = {
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      if (i == j) {
        row = row :+ BigInt(0)
      } else {
        row = row :+ INF
      }
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  return Graph(n, dp)
}

def add_edge(g: Graph, u: BigInt, v: BigInt, w: BigInt): Any = {
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = g.asInstanceOf[Graph].dp
  var row: ArrayBuffer[BigInt] = dp((u.toInt).toInt)
  row((v).toInt) = w
  dp((u).toInt) = row
  g.asInstanceOf[Graph].dp = dp
}

def floyd_warshall(g: Graph): Any = {
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = g.asInstanceOf[Graph].dp
  var k: BigInt = 0
  while (k < g.asInstanceOf[Graph].n) {
    var i: BigInt = 0
    while (i < g.asInstanceOf[Graph].n) {
      var j: BigInt = 0
      while (j < g.asInstanceOf[Graph].n) {
        val alt: BigInt = dp((i.toInt).toInt)((k.toInt).toInt) + dp((k.toInt).toInt)((j.toInt).toInt)
        var row: ArrayBuffer[BigInt] = dp((i.toInt).toInt)
        if (alt < row((j.toInt).toInt)) {
          row((j).toInt) = alt
          dp((i).toInt) = row
        }
        j = j + 1
      }
      i = i + 1
    }
    k = k + 1
  }
  g.asInstanceOf[Graph].dp = dp
}

def show_min(g: Graph, u: BigInt, v: BigInt): BigInt = {
  return g.asInstanceOf[Graph].dp((u.toInt).toInt)((v.toInt).toInt)
}

val INF: BigInt = 1000000000

var graph: Graph = new_graph(5)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    add_edge(graph, 0, 2, 9)
    add_edge(graph, 0, 4, 10)
    add_edge(graph, 1, 3, 5)
    add_edge(graph, 2, 3, 7)
    add_edge(graph, 3, 0, 10)
    add_edge(graph, 3, 1, 2)
    add_edge(graph, 3, 2, 1)
    add_edge(graph, 3, 4, 6)
    add_edge(graph, 4, 1, 3)
    add_edge(graph, 4, 2, 4)
    add_edge(graph, 4, 3, 9)
    floyd_warshall(graph)
    println(String.valueOf(show_min(graph, 1, 4)))
    println(String.valueOf(show_min(graph, 0, 3)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
