// Generated by Mochi v0.10.59 on 2025-08-07 00:58:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Fibonacci(var sequence: ArrayBuffer[BigInt])

case class FibGetResult(var fib: Fibonacci, var values: ArrayBuffer[BigInt])

def create_fibonacci(): Fibonacci = {
  return Fibonacci(ArrayBuffer(0, 1))
}

def fib_get(f: Fibonacci, index: BigInt): FibGetResult = {
  var seq: ArrayBuffer[BigInt] = f.asInstanceOf[Fibonacci].sequence
  while (BigInt((seq).size) < index) {
    val next: BigInt = seq(((BigInt((seq).size) - 1).toInt).toInt) + seq(((BigInt((seq).size) - 2).toInt).toInt)
    seq = seq :+ next
  }
  f.asInstanceOf[Fibonacci].sequence = seq
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < index) {
    result = result :+ seq((i.toInt).toInt)
    i = i + 1
  }
  return FibGetResult(f, result)
}

def main(): Any = {
  var fib: Fibonacci = create_fibonacci()
  var res: FibGetResult = fib_get(fib, 10)
  fib = res.asInstanceOf[FibGetResult].fib
  println(String.valueOf(res.asInstanceOf[FibGetResult].values))
  res = fib_get(fib, 5)
  fib = res.asInstanceOf[FibGetResult].fib
  println(String.valueOf(res.asInstanceOf[FibGetResult].values))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
