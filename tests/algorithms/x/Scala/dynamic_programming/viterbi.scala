// Generated by Mochi v0.10.64 on 2025-08-13 16:14:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def key(state: String, obs: String): String = {
  return state + "|" + obs
}

def viterbi(observations: ArrayBuffer[String], states: ArrayBuffer[String], start_p: scala.collection.mutable.Map[String,Double], trans_p: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,Double]], emit_p: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,Double]]): ArrayBuffer[String] = {
  if ((BigInt((observations).size) == BigInt(0) || BigInt((states).size) == BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("empty parameters"))
  }
  var probs: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  var ptrs: scala.collection.mutable.Map[String,String] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,String]]
  val first_obs: String = observations.lift((BigInt(0).toInt).toInt).getOrElse("")
  var i: BigInt = BigInt(0)
  while (i < BigInt((states).size)) {
    val state: String = states.lift((i.toInt).toInt).getOrElse("")
    probs.update(key(state, first_obs), start_p.getOrElse(state.toString, 0.0).asInstanceOf[Double] * emit_p.getOrElse(state.toString, null).asInstanceOf[scala.collection.mutable.Map[String,Double]].getOrElse(first_obs.toString, 0.0).asInstanceOf[Double])
    ptrs.update(key(state, first_obs), "")
    i = i + BigInt(1)
  }
  var t: BigInt = BigInt(1)
  while (t < BigInt((observations).size)) {
    val obs: String = observations.lift((t.toInt).toInt).getOrElse("")
    var j: BigInt = BigInt(0)
    while (j < BigInt((states).size)) {
      val state: String = states.lift((j.toInt).toInt).getOrElse("")
      var max_prob: Double = -1.0
      var prev_state: String = ""
      var k: BigInt = BigInt(0)
      while (k < BigInt((states).size)) {
        val state0: String = states.lift((k.toInt).toInt).getOrElse("")
        val obs0: String = observations.lift(((t - BigInt(1)).toInt).toInt).getOrElse("")
        val prob_prev: Double = probs.getOrElse(key(state0, obs0).toString, 0.0).asInstanceOf[Double]
        val prob: Double = prob_prev * trans_p.getOrElse(state0.toString, null).asInstanceOf[scala.collection.mutable.Map[String,Double]].getOrElse(state.toString, 0.0).asInstanceOf[Double] * emit_p.getOrElse(state.toString, null).asInstanceOf[scala.collection.mutable.Map[String,Double]].getOrElse(obs.toString, 0.0).asInstanceOf[Double]
        if (prob > max_prob) {
          max_prob = prob
          prev_state = state0
        }
        k = k + BigInt(1)
      }
      probs.update(key(state, obs), max_prob)
      ptrs.update(key(state, obs), prev_state)
      j = j + BigInt(1)
    }
    t = t + BigInt(1)
  }
  var path: ArrayBuffer[String] = ArrayBuffer[String]()
  var n: BigInt = BigInt(0)
  while (n < BigInt((observations).size)) {
    path = path += ("")
    n = n + BigInt(1)
  }
  val last_obs: String = observations.lift(((BigInt((observations).size) - BigInt(1)).toInt).toInt).getOrElse("")
  var max_final: Double = -1.0
  var last_state: String = ""
  var m: BigInt = BigInt(0)
  while (m < BigInt((states).size)) {
    val state: String = states.lift((m.toInt).toInt).getOrElse("")
    val prob: Double = probs.getOrElse(key(state, last_obs).toString, 0.0).asInstanceOf[Double]
    if (prob > max_final) {
      max_final = prob
      last_state = state
    }
    m = m + BigInt(1)
  }
  val last_index: BigInt = BigInt((observations).size) - BigInt(1)
  path((last_index).toInt) = last_state
  var idx: BigInt = last_index
  while (idx > BigInt(0)) {
    val obs: String = observations.lift((idx.toInt).toInt).getOrElse("")
    val prev: String = ptrs.getOrElse(key(path.lift((idx.toInt).toInt).getOrElse(""), obs).toString, "").asInstanceOf[String]
    path((idx - BigInt(1)).toInt) = prev
    idx = idx - BigInt(1)
  }
  return path
}

def join_words(words: ArrayBuffer[String]): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((words).size)) {
    if (i > BigInt(0)) {
      res = res + " "
    }
    res = res + words.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return res
}

var observations: ArrayBuffer[String] = ArrayBuffer("normal", "cold", "dizzy")

var states: ArrayBuffer[String] = ArrayBuffer("Healthy", "Fever")

var start_p: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map("Healthy" -> (0.6), "Fever" -> (0.4))).asInstanceOf[scala.collection.mutable.Map[String,Double]]

var trans_p: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,Double]] = (scala.collection.mutable.Map("Healthy" -> (scala.collection.mutable.Map("Healthy" -> (0.7), "Fever" -> (0.3))), "Fever" -> (scala.collection.mutable.Map("Healthy" -> (0.4), "Fever" -> (0.6))))).asInstanceOf[scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,Double]]]

var emit_p: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,Double]] = (scala.collection.mutable.Map("Healthy" -> (scala.collection.mutable.Map("normal" -> (0.5), "cold" -> (0.4), "dizzy" -> (0.1))), "Fever" -> (scala.collection.mutable.Map("normal" -> (0.1), "cold" -> (0.3), "dizzy" -> (0.6))))).asInstanceOf[scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,Double]]]

val result: ArrayBuffer[String] = viterbi(observations, states, start_p, trans_p, emit_p)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(join_words(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
