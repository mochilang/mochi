// Generated by Mochi v0.10.59 on 2025-08-07 08:48:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def score_function(source_char: String, target_char: String, match_score: BigInt, mismatch_score: BigInt, gap_score: BigInt): BigInt = {
  if ((source_char == "-" || target_char == "-").asInstanceOf[Boolean]) {
    return gap_score
  }
  if (source_char == target_char) {
    return match_score
  }
  return mismatch_score
}

def smith_waterman(query: String, subject: String, match_score: BigInt, mismatch_score: BigInt, gap_score: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val q = query.toUpperCase()
  val s = subject.toUpperCase()
  val m: BigInt = BigInt((q).size)
  val n: BigInt = BigInt((s).size)
  var score: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (_ <- (0).toInt until (m + 1).toInt) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    for (_2 <- (0).toInt until (n + 1).toInt) {
      row = row :+ BigInt(0)
    }
    score = score :+ row
  }
  for (i <- (1).toInt until (m + 1).toInt) {
    for (j <- (1).toInt until (n + 1).toInt) {
      val qc: String = q.slice((i - 1).toInt, (i).toInt)
      val sc: String = s.slice((j - 1).toInt, (j).toInt)
      val diag: BigInt = score(((i - 1).toInt).toInt)(((j - 1).toInt).toInt) + score_function(qc, sc, match_score, mismatch_score, gap_score)
      val delete: BigInt = score(((i - 1).toInt).toInt)((j.toInt).toInt) + gap_score
      val insert: BigInt = score((i.toInt).toInt)(((j - 1).toInt).toInt) + gap_score
      var max_val: BigInt = 0
      if (diag > max_val) {
        max_val = diag
      }
      if (delete > max_val) {
        max_val = delete
      }
      if (insert > max_val) {
        max_val = insert
      }
      score((i).toInt)((j).toInt) = max_val
    }
  }
  return score
}

def traceback(score: ArrayBuffer[ArrayBuffer[BigInt]], query: String, subject: String, match_score: BigInt, mismatch_score: BigInt, gap_score: BigInt): String = {
  val q = query.toUpperCase()
  val s = subject.toUpperCase()
  var max_value: BigInt = 0
  var i_max: BigInt = 0
  var j_max: BigInt = 0
  for (i <- (0).toInt until (BigInt((score).size)).toInt) {
    for (j <- (0).toInt until (BigInt((score((i.toInt).toInt)).size)).toInt) {
      if (score((i.toInt).toInt)((j.toInt).toInt) > max_value) {
        max_value = score((i.toInt).toInt)((j.toInt).toInt)
        i_max = BigInt(i.toString.toDouble.toInt)
        j_max = BigInt(j.toString.toDouble.toInt)
      }
    }
  }
  var i: BigInt = i_max
  var j: BigInt = j_max
  var align1: String = ""
  var align2: String = ""
  val gap_penalty: BigInt = score_function("-", "-", match_score, mismatch_score, gap_score)
  if ((i == 0 || j == 0).asInstanceOf[Boolean]) {
    return ""
  }
  while (i > 0 && j > 0) {
    val qc: String = q.slice((i - 1).toInt, (i).toInt)
    val sc: String = s.slice((j - 1).toInt, (j).toInt)
    if (score((i.toInt).toInt)((j.toInt).toInt) == score(((i - 1).toInt).toInt)(((j - 1).toInt).toInt) + score_function(qc, sc, match_score, mismatch_score, gap_score)) {
      align1 = qc + align1
      align2 = sc + align2
      i = i - 1
      j = j - 1
    } else {
      if (score((i.toInt).toInt)((j.toInt).toInt) == score(((i - 1).toInt).toInt)((j.toInt).toInt) + gap_penalty) {
        align1 = qc + align1
        align2 = "-" + align2
        i = i - 1
      } else {
        align1 = "-" + align1
        align2 = sc + align2
        j = j - 1
      }
    }
  }
  return align1 + "\n" + align2
}

val query: String = "HEAGAWGHEE"

val subject: String = "PAWHEAE"

val score: ArrayBuffer[ArrayBuffer[BigInt]] = smith_waterman(query, subject, 1, -1, -2)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(traceback(score, query, subject, 1, -1, -2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
