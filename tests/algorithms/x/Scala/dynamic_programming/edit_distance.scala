// Generated by Mochi v0.10.59 on 2025-08-07 00:58:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def min3(a: BigInt, b: BigInt, c: BigInt): BigInt = {
  var m: BigInt = a
  if (b < m) {
    m = b
  }
  if (c < m) {
    m = c
  }
  return m
}

def helper_top_down(word1: String, word2: String, dp: ArrayBuffer[ArrayBuffer[BigInt]], i: BigInt, j: BigInt): BigInt = {
  if (i < 0) {
    return j + 1
  }
  if (j < 0) {
    return i + 1
  }
  if (dp((i.toInt).toInt)((j.toInt).toInt) != 0 - 1) {
    return dp((i.toInt).toInt)((j.toInt).toInt)
  }
  if (word1.slice((i).toInt, (i + 1).toInt) == word2.slice((j).toInt, (j + 1).toInt)) {
    dp((i).toInt)((j).toInt) = helper_top_down(word1, word2, dp, i - 1, j - 1)
  } else {
    val insert: BigInt = helper_top_down(word1, word2, dp, i, j - 1)
    val delete: BigInt = helper_top_down(word1, word2, dp, i - 1, j)
    val replace: BigInt = helper_top_down(word1, word2, dp, i - 1, j - 1)
    dp((i).toInt)((j).toInt) = 1 + min3(insert, delete, replace)
  }
  return dp((i.toInt).toInt)((j.toInt).toInt)
}

def min_dist_top_down(word1: String, word2: String): BigInt = {
  val m: BigInt = BigInt((word1).size)
  val n: BigInt = BigInt((word2).size)
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (_ <- (0).toInt until (m).toInt) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    for (_2 <- (0).toInt until (n).toInt) {
      row = row :+ 0 - 1
    }
    dp = dp :+ row
  }
  return helper_top_down(word1, word2, dp, m - 1, n - 1)
}

def min_dist_bottom_up(word1: String, word2: String): BigInt = {
  val m: BigInt = BigInt((word1).size)
  val n: BigInt = BigInt((word2).size)
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (_ <- (0).toInt until (m + 1).toInt) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    for (_2 <- (0).toInt until (n + 1).toInt) {
      row = row :+ BigInt(0)
    }
    dp = dp :+ row
  }
  for (i <- (0).toInt until (m + 1).toInt) {
    for (j <- (0).toInt until (n + 1).toInt) {
      if (i == 0) {
        dp((i).toInt)((j).toInt) = BigInt(j.toString.toDouble.toInt)
      } else {
        if (j == 0) {
          dp((i).toInt)((j).toInt) = BigInt(i.toString.toDouble.toInt)
        } else {
          if (word1.slice((i - 1).toInt, (i).toInt) == word2.slice((j - 1).toInt, (j).toInt)) {
            dp((i).toInt)((j).toInt) = dp(((i - 1).toInt).toInt)(((j - 1).toInt).toInt)
          } else {
            val insert: BigInt = dp((i.toInt).toInt)(((j - 1).toInt).toInt)
            val delete: BigInt = dp(((i - 1).toInt).toInt)((j.toInt).toInt)
            val replace: BigInt = dp(((i - 1).toInt).toInt)(((j - 1).toInt).toInt)
            dp((i).toInt)((j).toInt) = 1 + min3(insert, delete, replace)
          }
        }
      }
    }
  }
  return dp((m.toInt).toInt)((n.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(min_dist_top_down("intention", "execution")))
    println(String.valueOf(min_dist_top_down("intention", "")))
    println(String.valueOf(min_dist_top_down("", "")))
    println(String.valueOf(min_dist_bottom_up("intention", "execution")))
    println(String.valueOf(min_dist_bottom_up("intention", "")))
    println(String.valueOf(min_dist_bottom_up("", "")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
