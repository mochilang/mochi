// Generated by Mochi v0.10.59 on 2025-08-07 08:47:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def enforce_args(n: BigInt, prices: ArrayBuffer[BigInt]): Any = {
  if (n < 0) {
    throw new RuntimeException(String.valueOf("n must be non-negative"))
  }
  if (n > BigInt((prices).size)) {
    throw new RuntimeException(String.valueOf("price list is shorter than n"))
  }
}

def bottom_up_cut_rod(n: BigInt, prices: ArrayBuffer[BigInt]): BigInt = {
  enforce_args(n, prices)
  var max_rev: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = 0
  while (i <= n) {
    if (i == 0) {
      max_rev = max_rev :+ BigInt(0)
    } else {
      max_rev = max_rev :+ BigInt((-BigInt("2147483648")).toString.toDouble.toInt)
    }
    i = i + 1
  }
  var length: BigInt = 1
  while (length <= n) {
    var best: BigInt = max_rev((length.toInt).toInt)
    var j: BigInt = 1
    while (j <= length) {
      val candidate: BigInt = prices(((j - 1).toInt).toInt) + max_rev(((length - j).toInt).toInt)
      if (candidate > best) {
        best = candidate
      }
      j = j + 1
    }
    max_rev((length).toInt) = best
    length = length + 1
  }
  return max_rev((n.toInt).toInt)
}

val prices: ArrayBuffer[BigInt] = ArrayBuffer(1, 5, 8, 9, 10, 17, 17, 20, 24, 30)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(bottom_up_cut_rod(4, prices))
    println(bottom_up_cut_rod(10, prices))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
