// Generated by Mochi v0.10.59 on 2025-08-07 08:47:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def recursive_match(text: String, pattern: String): Boolean = {
  if (BigInt((pattern).size) == 0) {
    return BigInt((text).size) == 0
  }
  if (BigInt((text).size) == 0) {
    if ((BigInt((pattern).size) >= 2 && pattern.slice((BigInt((pattern).size) - 1).toInt, (BigInt((pattern).size)).toInt) == "*").asInstanceOf[Boolean]) {
      return recursive_match(text, pattern.slice((0).toInt, (BigInt((pattern).size) - 2).toInt))
    }
    return false
  }
  val last_text: String = text.slice((BigInt((text).size) - 1).toInt, (BigInt((text).size)).toInt)
  val last_pattern: String = pattern.slice((BigInt((pattern).size) - 1).toInt, (BigInt((pattern).size)).toInt)
  if ((last_text == last_pattern || last_pattern == ".").asInstanceOf[Boolean]) {
    return recursive_match(text.slice((0).toInt, (BigInt((text).size) - 1).toInt), pattern.slice((0).toInt, (BigInt((pattern).size) - 1).toInt))
  }
  if (last_pattern == "*") {
    if (recursive_match(text.slice((0).toInt, (BigInt((text).size) - 1).toInt), pattern)) {
      return true
    }
    return recursive_match(text, pattern.slice((0).toInt, (BigInt((pattern).size) - 2).toInt))
  }
  return false
}

def dp_match(text: String, pattern: String): Boolean = {
  val m: BigInt = BigInt((text).size)
  val n: BigInt = BigInt((pattern).size)
  var dp: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= m) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= n) {
      row = row :+ false
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  dp((0).toInt)((0).toInt) = true
  var j: BigInt = 1
  while (j <= n) {
    if ((pattern.slice((j - 1).toInt, (j).toInt) == "*" && j >= 2).asInstanceOf[Boolean]) {
      if (dp((0.toInt).toInt)(((j - 2).toInt).toInt)) {
        dp((0).toInt)((j).toInt) = true
      }
    }
    j = j + 1
  }
  i = 1
  while (i <= m) {
    j = 1
    while (j <= n) {
      val p_char: String = pattern.slice((j - 1).toInt, (j).toInt)
      val t_char: String = text.slice((i - 1).toInt, (i).toInt)
      if ((p_char == "." || p_char == t_char).asInstanceOf[Boolean]) {
        if (dp(((i - 1).toInt).toInt)(((j - 1).toInt).toInt)) {
          dp((i).toInt)((j).toInt) = true
        }
      } else {
        if (p_char == "*") {
          if (j >= 2) {
            if (dp((i.toInt).toInt)(((j - 2).toInt).toInt)) {
              dp((i).toInt)((j).toInt) = true
            }
            val prev_p: String = pattern.slice((j - 2).toInt, (j - 1).toInt)
            if ((prev_p == "." || prev_p == t_char).asInstanceOf[Boolean]) {
              if (dp(((i - 1).toInt).toInt)((j.toInt).toInt)) {
                dp((i).toInt)((j).toInt) = true
              }
            }
          }
        } else {
          dp((i).toInt)((j).toInt) = false
        }
      }
      j = j + 1
    }
    i = i + 1
  }
  return dp((m.toInt).toInt)((n.toInt).toInt)
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(recursive_match("abc", "a.c"))
    print_bool(recursive_match("abc", "af*.c"))
    print_bool(recursive_match("abc", "a.c*"))
    print_bool(recursive_match("abc", "a.c*d"))
    print_bool(recursive_match("aa", ".*"))
    print_bool(dp_match("abc", "a.c"))
    print_bool(dp_match("abc", "af*.c"))
    print_bool(dp_match("abc", "a.c*"))
    print_bool(dp_match("abc", "a.c*d"))
    print_bool(dp_match("aa", ".*"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
