// Generated by Mochi v0.10.59 on 2025-08-07 08:37:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sort_list(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = nums
  var i: BigInt = 1
  while (i < BigInt((arr).size)) {
    val key: BigInt = arr((i.toInt).toInt)
    var j: BigInt = i - 1
    while (j >= 0 && arr((j.toInt).toInt) > key) {
      arr((j + 1).toInt) = arr((j.toInt).toInt)
      j = j - 1
    }
    arr((j + 1).toInt) = key
    i = i + 1
  }
  return arr
}

def largest_divisible_subset(items: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((items).size) == 0) {
    return ArrayBuffer()
  }
  var nums: ArrayBuffer[BigInt] = sort_list(items)
  val n: BigInt = BigInt((nums).size)
  var memo: ArrayBuffer[BigInt] = ArrayBuffer()
  var prev: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    memo = memo :+ BigInt(1)
    prev = prev :+ i
    i = i + 1
  }
  i = 0
  while (i < n) {
    var j: BigInt = 0
    while (j < i) {
      if (((nums((j.toInt).toInt) == 0 || nums((i.toInt).toInt) % nums((j.toInt).toInt) == 0).asInstanceOf[Boolean] && memo((j.toInt).toInt) + 1 > memo((i.toInt).toInt)).asInstanceOf[Boolean]) {
        memo((i).toInt) = memo((j.toInt).toInt) + 1
        prev((i).toInt) = j
      }
      j = j + 1
    }
    i = i + 1
  }
  var ans: BigInt = 0 - 1
  var last_index: BigInt = 0 - 1
  i = 0
  while (i < n) {
    if (memo((i.toInt).toInt) > ans) {
      ans = memo((i.toInt).toInt)
      last_index = i
    }
    i = i + 1
  }
  if (last_index == 0 - 1) {
    return ArrayBuffer()
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer(nums((last_index.toInt).toInt))
  while (prev((last_index.toInt).toInt) != last_index) {
    last_index = prev((last_index.toInt).toInt)
    result = result :+ nums((last_index.toInt).toInt)
  }
  return result
}

def main(): Any = {
  val items: ArrayBuffer[BigInt] = ArrayBuffer(1, 16, 7, 8, 4)
  val subset: ArrayBuffer[BigInt] = largest_divisible_subset(items)
  println("The longest divisible subset of " + String.valueOf(items) + " is " + String.valueOf(subset) + ".")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
