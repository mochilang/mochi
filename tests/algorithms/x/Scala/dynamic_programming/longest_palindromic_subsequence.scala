// Generated by Mochi v0.10.59 on 2025-08-07 08:39:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def reverse(s: String): String = {
  var result: String = ""
  var i: BigInt = BigInt((s).size) - 1
  while (i >= 0) {
    result = result + s.slice((i).toInt, (i + 1).toInt)
    i = i - 1
  }
  return result
}

def max_int(a: BigInt, b: BigInt): BigInt = {
  if (a > b) {
    return a
  }
  return b
}

def longest_palindromic_subsequence(s: String): BigInt = {
  val rev: String = reverse(s)
  val n: BigInt = BigInt((s).size)
  val m: BigInt = BigInt((rev).size)
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i <= n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j <= m) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  i = 1
  while (i <= n) {
    var j: BigInt = 1
    while (j <= m) {
      val a_char: String = s.slice((i - 1).toInt, (i).toInt)
      val b_char: String = rev.slice((j - 1).toInt, (j).toInt)
      if (a_char == b_char) {
        dp((i).toInt)((j).toInt) = 1 + dp(((i - 1).toInt).toInt)(((j - 1).toInt).toInt)
      } else {
        dp((i).toInt)((j).toInt) = max_int(dp(((i - 1).toInt).toInt)((j.toInt).toInt), dp((i.toInt).toInt)(((j - 1).toInt).toInt))
      }
      j = j + 1
    }
    i = i + 1
  }
  return dp((n.toInt).toInt)((m.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(longest_palindromic_subsequence("bbbab")))
    println(String.valueOf(longest_palindromic_subsequence("bbabcbcab")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
