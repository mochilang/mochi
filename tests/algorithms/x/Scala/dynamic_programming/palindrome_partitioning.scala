// Generated by Mochi v0.10.59 on 2025-08-07 08:47:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def min_partitions(s: String): BigInt = {
  val n: BigInt = BigInt((s).size)
  var cut: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    cut = cut :+ BigInt(0)
    i = i + 1
  }
  var pal: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  i = 0
  while (i < n) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      row = row :+ false
      j = j + 1
    }
    pal = pal :+ row
    i = i + 1
  }
  i = 0
  while (i < n) {
    var mincut: BigInt = i
    var j: BigInt = 0
    while (j <= i) {
      if ((s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == s.slice((j.toInt).toInt, (j.toInt).toInt + 1) && (i - j < 2 || pal(((j + 1).toInt).toInt)(((i - 1).toInt).toInt)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        pal((j).toInt)((i).toInt) = true
        if (j == 0) {
          mincut = 0
        } else {
          val candidate: BigInt = cut(((j - 1).toInt).toInt) + 1
          if (candidate < mincut) {
            mincut = candidate
          }
        }
      }
      j = j + 1
    }
    cut((i).toInt) = mincut
    i = i + 1
  }
  return cut(((n - 1).toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(min_partitions("aab"))
    println(min_partitions("aaa"))
    println(min_partitions("ababbbabbababa"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
