// Generated by Mochi v0.10.59 on 2025-08-07 08:39:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def longest_subsequence(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((xs).size)
  if (n <= 1) {
    return xs
  }
  val pivot: BigInt = xs((0.toInt).toInt)
  var is_found: Boolean = false
  var i: BigInt = 1
  var longest_subseq: ArrayBuffer[BigInt] = ArrayBuffer()
  while (!is_found && i < n) {
    if (xs((i.toInt).toInt) < pivot) {
      is_found = true
      var temp_array: ArrayBuffer[BigInt] = xs.slice((i).toInt, (n).toInt)
      temp_array = longest_subsequence(temp_array)
      if (BigInt((temp_array).size) > BigInt((longest_subseq).size)) {
        longest_subseq = temp_array
      }
    } else {
      i = i + 1
    }
  }
  var filtered: ArrayBuffer[BigInt] = ArrayBuffer()
  var j: BigInt = 1
  while (j < n) {
    if (xs((j.toInt).toInt) >= pivot) {
      filtered = filtered :+ xs((j.toInt).toInt)
    }
    j = j + 1
  }
  var candidate: ArrayBuffer[BigInt] = ArrayBuffer()
  candidate = candidate :+ pivot
  candidate = (candidate ++ longest_subsequence(filtered)).asInstanceOf[ArrayBuffer[BigInt]]
  if (BigInt((candidate).size) > BigInt((longest_subseq).size)) {
    return candidate
  } else {
    return longest_subseq
  }
  return ArrayBuffer[BigInt]()
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
