// Generated by Mochi v0.10.59 on 2025-08-07 08:47:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_list(len: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < len) {
    arr = arr :+ value
    i = i + 1
  }
  return arr
}

def max_int(a: BigInt, b: BigInt): BigInt = {
  if (a > b) {
    return a
  } else {
    return b
  }
  return null
}

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  } else {
    return b
  }
  return null
}

def min3(a: BigInt, b: BigInt, c: BigInt): BigInt = {
  return min_int(min_int(a, b), c)
}

def minimum_tickets_cost(days: ArrayBuffer[BigInt], costs: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((days).size) == 0) {
    return 0
  }
  var last_day: BigInt = days(((BigInt((days).size) - 1).toInt).toInt)
  var dp: ArrayBuffer[BigInt] = make_list(last_day + 1, 0)
  var day_index: BigInt = 0
  var d: BigInt = 1
  while (d <= last_day) {
    if ((day_index < BigInt((days).size) && d == days((day_index.toInt).toInt)).asInstanceOf[Boolean]) {
      val cost1: BigInt = dp(((d - 1).toInt).toInt) + costs((0.toInt).toInt)
      val cost7: BigInt = dp(((max_int(0, d - 7)).toInt).toInt) + costs((1.toInt).toInt)
      val cost30: BigInt = dp(((max_int(0, d - 30)).toInt).toInt) + costs((2.toInt).toInt)
      dp((d).toInt) = min3(cost1, cost7, cost30)
      day_index = day_index + 1
    } else {
      dp((d).toInt) = dp(((d - 1).toInt).toInt)
    }
    d = d + 1
  }
  return dp((last_day.toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(minimum_tickets_cost(ArrayBuffer(1, 4, 6, 7, 8, 20), ArrayBuffer(2, 7, 15))))
    println(String.valueOf(minimum_tickets_cost(ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31), ArrayBuffer(2, 7, 15))))
    println(String.valueOf(minimum_tickets_cost(ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31), ArrayBuffer(2, 90, 150))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
