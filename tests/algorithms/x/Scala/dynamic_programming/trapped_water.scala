// Generated by Mochi v0.10.59 on 2025-08-07 08:48:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_list(len: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < len) {
    arr = arr :+ value
    i = i + 1
  }
  return arr
}

def trapped_rainwater(heights: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((heights).size) == 0) {
    return 0
  }
  var i: BigInt = 0
  while (i < BigInt((heights).size)) {
    if (heights((i.toInt).toInt) < 0) {
      throw new RuntimeException(String.valueOf("No height can be negative"))
    }
    i = i + 1
  }
  val length: BigInt = BigInt((heights).size)
  var left_max: ArrayBuffer[BigInt] = make_list(length, 0)
  left_max((0).toInt) = heights((0.toInt).toInt)
  i = 1
  while (i < length) {
    if (heights((i.toInt).toInt) > left_max(((i - 1).toInt).toInt)) {
      left_max((i).toInt) = heights((i.toInt).toInt)
    } else {
      left_max((i).toInt) = left_max(((i - 1).toInt).toInt)
    }
    i = i + 1
  }
  var right_max: ArrayBuffer[BigInt] = make_list(length, 0)
  val last: BigInt = length - 1
  right_max((last).toInt) = heights((last.toInt).toInt)
  i = last - 1
  while (i >= 0) {
    if (heights((i.toInt).toInt) > right_max(((i + 1).toInt).toInt)) {
      right_max((i).toInt) = heights((i.toInt).toInt)
    } else {
      right_max((i).toInt) = right_max(((i + 1).toInt).toInt)
    }
    i = i - 1
  }
  var total: BigInt = 0
  i = 0
  while (i < length) {
    val left: BigInt = left_max((i.toInt).toInt)
    val right: BigInt = right_max((i.toInt).toInt)
    val smaller: BigInt = (if (left < right) left else right)
    total = total + (smaller - heights((i.toInt).toInt))
    i = i + 1
  }
  return total
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(trapped_rainwater(ArrayBuffer(0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1))))
    println(String.valueOf(trapped_rainwater(ArrayBuffer(7, 1, 5, 3, 6, 4))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
