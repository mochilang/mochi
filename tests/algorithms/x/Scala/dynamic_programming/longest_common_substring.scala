// Generated by Mochi v0.10.59 on 2025-08-07 08:38:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def longest_common_substring(text1: String, text2: String): String = {
  if ((BigInt((text1).size) == 0 || BigInt((text2).size) == 0).asInstanceOf[Boolean]) {
    return ""
  }
  val m: BigInt = BigInt((text1).size)
  val n: BigInt = BigInt((text2).size)
  var dp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < m + 1) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n + 1) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    dp = dp :+ row
    i = i + 1
  }
  var end_pos: BigInt = 0
  var max_len: BigInt = 0
  var ii: BigInt = 1
  while (ii <= m) {
    var jj: BigInt = 1
    while (jj <= n) {
      if (text1.slice((ii - 1).toInt, (ii).toInt) == text2.slice((jj - 1).toInt, (jj).toInt)) {
        dp((ii).toInt)((jj).toInt) = 1 + dp(((ii - 1).toInt).toInt)(((jj - 1).toInt).toInt)
        if (dp((ii.toInt).toInt)((jj.toInt).toInt) > max_len) {
          max_len = dp((ii.toInt).toInt)((jj.toInt).toInt)
          end_pos = ii
        }
      }
      jj = jj + 1
    }
    ii = ii + 1
  }
  return text1.slice((end_pos - max_len).toInt, (end_pos).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(longest_common_substring("abcdef", "xabded"))
    println("\n")
    println(longest_common_substring("zxabcdezy", "yzabcdezx"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
