// Generated by Mochi v0.10.59 on 2025-08-07 08:46:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def min3(a: BigInt, b: BigInt, c: BigInt): BigInt = {
  var m: BigInt = a
  if (b < m) {
    m = b
  }
  if (c < m) {
    m = c
  }
  return m
}

def helper(word1: String, word2: String, cache: ArrayBuffer[ArrayBuffer[BigInt]], i: BigInt, j: BigInt, len1: BigInt, len2: BigInt): BigInt = {
  if (i >= len1) {
    return len2 - j
  }
  if (j >= len2) {
    return len1 - i
  }
  if (cache((i.toInt).toInt)((j.toInt).toInt) != 0 - 1) {
    return cache((i.toInt).toInt)((j.toInt).toInt)
  }
  var diff: BigInt = 0
  if (word1.slice((i).toInt, (i + 1).toInt) != word2.slice((j).toInt, (j + 1).toInt)) {
    diff = 1
  }
  val delete_cost: BigInt = 1 + helper(word1, word2, cache, i + 1, j, len1, len2)
  val insert_cost: BigInt = 1 + helper(word1, word2, cache, i, j + 1, len1, len2)
  val replace_cost: BigInt = diff + helper(word1, word2, cache, i + 1, j + 1, len1, len2)
  cache((i).toInt)((j).toInt) = min3(delete_cost, insert_cost, replace_cost)
  return cache((i.toInt).toInt)((j.toInt).toInt)
}

def min_distance_up_bottom(word1: String, word2: String): BigInt = {
  val len1: BigInt = BigInt((word1).size)
  val len2: BigInt = BigInt((word2).size)
  var cache: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (_ <- (0).toInt until (len1).toInt) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    for (_2 <- (0).toInt until (len2).toInt) {
      row = row :+ BigInt((-1).toString.toDouble.toInt)
    }
    cache = cache :+ row
  }
  return helper(word1, word2, cache, 0, 0, len1, len2)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(min_distance_up_bottom("intention", "execution")))
    println(String.valueOf(min_distance_up_bottom("intention", "")))
    println(String.valueOf(min_distance_up_bottom("", "")))
    println(String.valueOf(min_distance_up_bottom("zooicoarchaeologist", "zoologist")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
