// Generated by Mochi v0.10.64 on 2025-08-12 09:33:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def bfs(graph: ArrayBuffer[ArrayBuffer[BigInt]], s: BigInt, t: BigInt, parent: ArrayBuffer[BigInt]): Boolean = {
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph).size)) {
    visited = visited :+ (false)
    i = i + BigInt(1)
  }
  var queue: ArrayBuffer[BigInt] = ArrayBuffer(s)
  var head: BigInt = BigInt(0)
  visited((s).toInt) = true
  while (head < BigInt((queue).size)) {
    val u: BigInt = queue.lift((head.toInt).toInt).getOrElse(BigInt(0))
    head = head + BigInt(1)
    var ind: BigInt = BigInt(0)
    while (ind < BigInt((graph.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      if ((visited.lift((ind.toInt).toInt).getOrElse(false) == false && graph.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((ind.toInt).toInt).getOrElse(BigInt(0)) > BigInt(0)).asInstanceOf[Boolean]) {
        queue = queue :+ (ind)
        visited((ind).toInt) = true
        parent((ind).toInt) = u
      }
      ind = ind + BigInt(1)
    }
  }
  return visited.lift((t.toInt).toInt).getOrElse(false)
}

def mincut(graph: ArrayBuffer[ArrayBuffer[BigInt]], source: BigInt, sink: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var g: ArrayBuffer[ArrayBuffer[BigInt]] = graph
  var parent: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((g).size)) {
    parent = parent :+ (BigInt((-BigInt(1)).toString.toDouble.toInt))
    i = i + BigInt(1)
  }
  var temp: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  i = BigInt(0)
  while (i < BigInt((g).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((g.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      row = row :+ (g.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
    temp = temp :+ (row)
    i = i + BigInt(1)
  }
  while (bfs(g, source, sink, parent)) {
    var path_flow: BigInt = BigInt(1000000000)
    var s: BigInt = sink
    while (s != source) {
      val p: BigInt = parent.lift((s.toInt).toInt).getOrElse(BigInt(0))
      val cap: BigInt = g.lift((p.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((s.toInt).toInt).getOrElse(BigInt(0))
      if (cap < path_flow) {
        path_flow = cap
      }
      s = p
    }
    var v: BigInt = sink
    while (v != source) {
      val u: BigInt = parent.lift((v.toInt).toInt).getOrElse(BigInt(0))
      g((u).toInt)((v).toInt) = g.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((v.toInt).toInt).getOrElse(BigInt(0)) - path_flow
      g((v).toInt)((u).toInt) = g.lift((v.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((u.toInt).toInt).getOrElse(BigInt(0)) + path_flow
      v = u
    }
  }
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  i = BigInt(0)
  while (i < BigInt((g).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((g.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      if ((g.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)) == BigInt(0) && temp.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)) > BigInt(0)).asInstanceOf[Boolean]) {
        res = res :+ (ArrayBuffer(BigInt(i.toString.toDouble.toInt), BigInt(j.toString.toDouble.toInt)))
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return res
}

val test_graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(16), BigInt(13), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(10), BigInt(12), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(4), BigInt(0), BigInt(0), BigInt(14), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(9), BigInt(0), BigInt(0), BigInt(20)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(7), BigInt(0), BigInt(4)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)))

val result: ArrayBuffer[ArrayBuffer[BigInt]] = mincut(test_graph, BigInt(0), BigInt(5))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
