// Generated by Mochi v0.10.61 on 2025-08-08 17:06:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def breadth_first_search(graph: ArrayBuffer[ArrayBuffer[BigInt]], source: BigInt, sink: BigInt, parent: ArrayBuffer[BigInt]): Boolean = {
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph).size)) {
    visited = visited :+ (false)
    i = i + BigInt(1)
  }
  var queue: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  queue = queue :+ (source)
  visited((source).toInt) = true
  var head: BigInt = BigInt(0)
  while (head < BigInt((queue).size)) {
    val u: BigInt = queue((head.toInt).toInt)
    head = head + BigInt(1)
    val row: ArrayBuffer[BigInt] = graph((u.toInt).toInt)
    var ind: BigInt = BigInt(0)
    while (ind < BigInt((row).size)) {
      val capacity: BigInt = row((ind.toInt).toInt)
      if ((visited((ind.toInt).toInt) == false && capacity > BigInt(0)).asInstanceOf[Boolean]) {
        queue = queue :+ (ind)
        visited((ind).toInt) = true
        parent((ind).toInt) = u
      }
      ind = ind + BigInt(1)
    }
  }
  return visited((sink.toInt).toInt)
}

def ford_fulkerson(graph: ArrayBuffer[ArrayBuffer[BigInt]], source: BigInt, sink: BigInt): BigInt = {
  var parent: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph).size)) {
    parent = parent :+ (BigInt((-BigInt(1)).toString.toDouble.toInt))
    i = i + BigInt(1)
  }
  var max_flow: BigInt = BigInt(0)
  while (breadth_first_search(graph, source, sink, parent)) {
    var path_flow: BigInt = INF
    var s: BigInt = sink
    while (s != source) {
      val prev: BigInt = parent((s.toInt).toInt)
      val cap: BigInt = graph((prev.toInt).toInt)((s.toInt).toInt)
      if (cap < path_flow) {
        path_flow = cap
      }
      s = prev
    }
    max_flow = max_flow + path_flow
    var v: BigInt = sink
    while (v != source) {
      val u: BigInt = parent((v.toInt).toInt)
      graph((u).toInt)((v).toInt) = graph((u.toInt).toInt)((v.toInt).toInt) - path_flow
      graph((v).toInt)((u).toInt) = graph((v.toInt).toInt)((u.toInt).toInt) + path_flow
      v = u
    }
    var j: BigInt = BigInt(0)
    while (j < BigInt((parent).size)) {
      parent((j).toInt) = -BigInt(1)
      j = j + BigInt(1)
    }
  }
  return max_flow
}

val INF: BigInt = BigInt(1000000000)

val graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(16), BigInt(13), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(10), BigInt(12), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(4), BigInt(0), BigInt(0), BigInt(14), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(9), BigInt(0), BigInt(0), BigInt(20)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(7), BigInt(0), BigInt(4)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(ford_fulkerson(graph, BigInt(0), BigInt(5))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
