// Generated by Mochi v0.10.59 on 2025-08-06 21:24:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def count_alive_neighbours(board: ArrayBuffer[ArrayBuffer[Boolean]], row: BigInt, col: BigInt): BigInt = {
  val size: BigInt = BigInt((board).size)
  var alive: BigInt = 0
  var dr: BigInt = -1
  while (dr < 2) {
    var dc: BigInt = -1
    while (dc < 2) {
      val nr: BigInt = row + dr
      val nc: BigInt = col + dc
      if ((((((!(dr == 0 && dc == 0).asInstanceOf[Boolean]).asInstanceOf[Boolean] && nr >= 0).asInstanceOf[Boolean] && nr < size).asInstanceOf[Boolean] && nc >= 0).asInstanceOf[Boolean] && nc < size).asInstanceOf[Boolean]) {
        if (board((nr.toInt).toInt)((nc.toInt).toInt)) {
          alive = alive + 1
        }
      }
      dc = dc + 1
    }
    dr = dr + 1
  }
  return alive
}

def next_state(current: Boolean, alive: BigInt): Boolean = {
  var state: Boolean = current
  if (current) {
    if (alive < 2) {
      state = false
    } else {
      if ((alive == 2 || alive == 3).asInstanceOf[Boolean]) {
        state = true
      } else {
        state = false
      }
    }
  } else {
    if (alive == 3) {
      state = true
    }
  }
  return state
}

def step(board: ArrayBuffer[ArrayBuffer[Boolean]]): ArrayBuffer[ArrayBuffer[Boolean]] = {
  val size: BigInt = BigInt((board).size)
  var new_board: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var r: BigInt = 0
  while (r < size) {
    var new_row: ArrayBuffer[Boolean] = ArrayBuffer()
    var c: BigInt = 0
    while (c < size) {
      val alive: BigInt = count_alive_neighbours(board, r, c)
      val cell: Boolean = board((r.toInt).toInt)((c.toInt).toInt)
      val updated: Boolean = next_state(cell, alive)
      new_row = new_row :+ updated
      c = c + 1
    }
    new_board = new_board :+ new_row
    r = r + 1
  }
  return new_board
}

def show(board: ArrayBuffer[ArrayBuffer[Boolean]]): Any = {
  var r: BigInt = 0
  while (r < BigInt((board).size)) {
    var line: String = ""
    var c: BigInt = 0
    while (c < BigInt((board((r.toInt).toInt)).size)) {
      if (board((r.toInt).toInt)((c.toInt).toInt)) {
        line = line + "#"
      } else {
        line = line + "."
      }
      c = c + 1
    }
    println(line)
    r = r + 1
  }
}

val glider: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer(ArrayBuffer(false, true, false, false, false), ArrayBuffer(false, false, true, false, false), ArrayBuffer(true, true, true, false, false), ArrayBuffer(false, false, false, false, false), ArrayBuffer(false, false, false, false, false))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var board: ArrayBuffer[ArrayBuffer[Boolean]] = glider
    println("Initial")
    show(board)
    var i: BigInt = 0
    while (i < 4) {
      board = step(board)
      println("\nStep " + String.valueOf(i + 1))
      show(board)
      i = i + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
