// Generated by Mochi v0.10.59 on 2025-08-06 21:24:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def new_generation(cells: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val rows: BigInt = BigInt((cells).size)
  val cols: BigInt = BigInt((cells((0.toInt).toInt)).size)
  var next: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < cols) {
      var count: BigInt = 0
      if ((i > 0 && j > 0).asInstanceOf[Boolean]) {
        count = count + cells(((i - 1).toInt).toInt)(((j - 1).toInt).toInt)
      }
      if (i > 0) {
        count = count + cells(((i - 1).toInt).toInt)((j.toInt).toInt)
      }
      if ((i > 0 && j < cols - 1).asInstanceOf[Boolean]) {
        count = count + cells(((i - 1).toInt).toInt)(((j + 1).toInt).toInt)
      }
      if (j > 0) {
        count = count + cells((i.toInt).toInt)(((j - 1).toInt).toInt)
      }
      if (j < cols - 1) {
        count = count + cells((i.toInt).toInt)(((j + 1).toInt).toInt)
      }
      if ((i < rows - 1 && j > 0).asInstanceOf[Boolean]) {
        count = count + cells(((i + 1).toInt).toInt)(((j - 1).toInt).toInt)
      }
      if (i < rows - 1) {
        count = count + cells(((i + 1).toInt).toInt)((j.toInt).toInt)
      }
      if ((i < rows - 1 && j < cols - 1).asInstanceOf[Boolean]) {
        count = count + cells(((i + 1).toInt).toInt)(((j + 1).toInt).toInt)
      }
      val alive: Boolean = cells((i.toInt).toInt)((j.toInt).toInt) == 1
      if ((((alive && count >= 2).asInstanceOf[Boolean] && count <= 3).asInstanceOf[Boolean] || ((!alive).asInstanceOf[Boolean] && count == 3).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        row = row :+ BigInt(1)
      } else {
        row = row :+ BigInt(0)
      }
      j = j + 1
    }
    next = next :+ row
    i = i + 1
  }
  return next
}

def generate_generations(cells: ArrayBuffer[ArrayBuffer[BigInt]], frames: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  var result: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer()
  var i: BigInt = 0
  var current: ArrayBuffer[ArrayBuffer[BigInt]] = cells
  while (i < frames) {
    result = result :+ current
    current = new_generation(current)
    i = i + 1
  }
  return result
}

def main(): Any = {
  val frames: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = generate_generations(GLIDER, 4)
  var i: BigInt = 0
  while (i < BigInt((frames).size)) {
    println(frames((i.toInt).toInt))
    i = i + 1
  }
}

val GLIDER: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 1, 0, 0, 0, 0, 0), ArrayBuffer(1, 1, 1, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0))

val BLINKER: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0), ArrayBuffer(0, 1, 0), ArrayBuffer(0, 1, 0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
