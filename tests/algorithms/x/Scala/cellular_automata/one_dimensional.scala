// Generated by Mochi v0.10.59 on 2025-08-06 21:26:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def format_ruleset(ruleset: BigInt): ArrayBuffer[BigInt] = {
  var rs: BigInt = ruleset
  var bits_rev: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 8) {
    bits_rev = bits_rev :+ rs % 2
    rs = rs / 2
    i = i + 1
  }
  var bits: ArrayBuffer[BigInt] = ArrayBuffer()
  var j: BigInt = BigInt((bits_rev).size) - 1
  while (j >= 0) {
    bits = bits :+ bits_rev((j.toInt).toInt)
    j = j - 1
  }
  return bits
}

def new_generation(cells: ArrayBuffer[ArrayBuffer[BigInt]], rules: ArrayBuffer[BigInt], time: BigInt): ArrayBuffer[BigInt] = {
  val population: BigInt = BigInt((cells((0.toInt).toInt)).size)
  var next_generation: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < population) {
    val left_neighbor: BigInt = (if (i == 0) 0 else cells((time.toInt).toInt)(((i - 1).toInt).toInt))
    val right_neighbor: BigInt = (if (i == population - 1) 0 else cells((time.toInt).toInt)(((i + 1).toInt).toInt))
    val center: BigInt = cells((time.toInt).toInt)((i.toInt).toInt)
    val idx: BigInt = 7 - (left_neighbor * 4 + center * 2 + right_neighbor)
    next_generation = next_generation :+ rules((idx.toInt).toInt)
    i = i + 1
  }
  return next_generation
}

def cells_to_string(row: ArrayBuffer[BigInt]): String = {
  var result: String = ""
  var i: BigInt = 0
  while (i < BigInt((row).size)) {
    if (row((i.toInt).toInt) == 1) {
      result = result + "#"
    } else {
      result = result + "."
    }
    i = i + 1
  }
  return result
}

val initial: ArrayBuffer[BigInt] = ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

val rules: ArrayBuffer[BigInt] = format_ruleset(30)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var cells: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(initial)
    var time: BigInt = 0
    while (time < 16) {
      val next: ArrayBuffer[BigInt] = new_generation(cells, rules, time)
      cells = cells :+ next
      time = time + 1
    }
    var t: BigInt = 0
    while (t < BigInt((cells).size)) {
      println(cells_to_string(cells((t.toInt).toInt)))
      t = t + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
