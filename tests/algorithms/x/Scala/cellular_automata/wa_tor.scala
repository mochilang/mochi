// Generated by Mochi v0.10.59 on 2025-08-06 21:26:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand(): BigInt = {
  seed = (seed * 1103515245 + 12345) % BigInt("2147483648")
  return seed
}

def rand_range(max: BigInt): BigInt = {
  return rand() % max
}

def shuffle(list_int: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt((list_int).size) - 1
  while (i > 0) {
    val j: BigInt = rand_range(i + 1)
    val tmp: BigInt = list_int((i.toInt).toInt)
    list_int((i).toInt) = list_int((j.toInt).toInt)
    list_int((j).toInt) = tmp
    i = i - 1
  }
  return list_int
}

def create_board(): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var board: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var r: BigInt = 0
  while (r < HEIGHT) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var c: BigInt = 0
    while (c < WIDTH) {
      row = row :+ BigInt(0)
      c = c + 1
    }
    board = board :+ row
    r = r + 1
  }
  return board
}

def create_prey(r: BigInt, c: BigInt): ArrayBuffer[BigInt] = {
  return ArrayBuffer(TYPE_PREY, r, c, PREY_REPRODUCTION_TIME, 0, 1)
}

def create_predator(r: BigInt, c: BigInt): ArrayBuffer[BigInt] = {
  return ArrayBuffer(TYPE_PREDATOR, r, c, PREDATOR_REPRODUCTION_TIME, PREDATOR_INITIAL_ENERGY, 1)
}

def empty_cell(r: BigInt, c: BigInt): Boolean = {
  return board((r.toInt).toInt)((c.toInt).toInt) == 0
}

def add_entity(typ: BigInt): Any = {
  while (true) {
    val r: BigInt = rand_range(HEIGHT)
    val c: BigInt = rand_range(WIDTH)
    if (empty_cell(r, c)) {
      if (typ == TYPE_PREY) {
        board((r).toInt)((c).toInt) = 1
        entities = entities :+ create_prey(r, c)
      } else {
        board((r).toInt)((c).toInt) = 2
        entities = entities :+ create_predator(r, c)
      }
      return
    }
  }
  return null
}

def setup(): Any = {
  var i: BigInt = 0
  while (i < PREY_INITIAL_COUNT) {
    add_entity(TYPE_PREY)
    i = i + 1
  }
  i = 0
  while (i < PREDATOR_INITIAL_COUNT) {
    add_entity(TYPE_PREDATOR)
    i = i + 1
  }
}

def inside(r: BigInt, c: BigInt): Boolean = {
  return (((r >= 0 && r < HEIGHT).asInstanceOf[Boolean] && c >= 0).asInstanceOf[Boolean] && c < WIDTH).asInstanceOf[Boolean]
}

def find_prey(r: BigInt, c: BigInt): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((entities).size)) {
    val e: ArrayBuffer[BigInt] = entities((i.toInt).toInt)
    if ((((e((5.toInt).toInt) == 1 && e((0.toInt).toInt) == TYPE_PREY).asInstanceOf[Boolean] && e((1.toInt).toInt) == r).asInstanceOf[Boolean] && e((2.toInt).toInt) == c).asInstanceOf[Boolean]) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def step_world(): Any = {
  var i: BigInt = 0
  val _br7 = new Breaks
  val _ct7 = new Breaks
  _br7.breakable {
    while (i < BigInt((entities).size)) {
      _ct7.breakable {
        var e: ArrayBuffer[BigInt] = entities((i.toInt).toInt)
        if (e((5.toInt).toInt) == 0) {
          i = i + 1
          _ct7.break()
        }
        val typ: BigInt = e((0.toInt).toInt)
        val row: BigInt = e((1.toInt).toInt)
        val col: BigInt = e((2.toInt).toInt)
        val repro: BigInt = e((3.toInt).toInt)
        val energy: BigInt = e((4.toInt).toInt)
        var dirs: ArrayBuffer[BigInt] = ArrayBuffer(0, 1, 2, 3)
        dirs = shuffle(dirs)
        var moved: Boolean = false
        val old_r: BigInt = row
        val old_c: BigInt = col
        if (typ == TYPE_PREDATOR) {
          var j: BigInt = 0
          var ate: Boolean = false
          val _br8 = new Breaks
          _br8.breakable {
            while (j < 4) {
              val d: BigInt = dirs((j.toInt).toInt)
              val nr: BigInt = row + BigInt((dr((d.toInt).toInt)).toString.toDouble.toInt)
              val nc: BigInt = col + BigInt((dc((d.toInt).toInt)).toString.toDouble.toInt)
              if ((inside(nr, nc) && board((nr.toInt).toInt)((nc.toInt).toInt) == 1).asInstanceOf[Boolean]) {
                val prey_index: BigInt = find_prey(nr, nc)
                if (prey_index >= 0) {
                  entities((prey_index).toInt)((5).toInt) = 0
                }
                board((nr).toInt)((nc).toInt) = 2
                board((row).toInt)((col).toInt) = 0
                e((1).toInt) = nr
                e((2).toInt) = nc
                e((4).toInt) = energy + PREDATOR_FOOD_VALUE - 1
                moved = true
                ate = true
                _br8.break()
              }
              j = j + 1
            }
          }
          if ((!ate).asInstanceOf[Boolean]) {
            j = 0
            val _br9 = new Breaks
            _br9.breakable {
              while (j < 4) {
                val d: BigInt = dirs((j.toInt).toInt)
                val nr: BigInt = row + BigInt((dr((d.toInt).toInt)).toString.toDouble.toInt)
                val nc: BigInt = col + BigInt((dc((d.toInt).toInt)).toString.toDouble.toInt)
                if ((inside(nr, nc) && board((nr.toInt).toInt)((nc.toInt).toInt) == 0).asInstanceOf[Boolean]) {
                  board((nr).toInt)((nc).toInt) = 2
                  board((row).toInt)((col).toInt) = 0
                  e((1).toInt) = nr
                  e((2).toInt) = nc
                  moved = true
                  _br9.break()
                }
                j = j + 1
              }
            }
            e((4).toInt) = energy - 1
          }
          if (e((4.toInt).toInt) <= 0) {
            e((5).toInt) = 0
            board((e((1.toInt).toInt)).toInt)((e((2.toInt).toInt)).toInt) = 0
          }
        } else {
          var j: BigInt = 0
          val _br10 = new Breaks
          _br10.breakable {
            while (j < 4) {
              val d: BigInt = dirs((j.toInt).toInt)
              val nr: BigInt = row + BigInt((dr((d.toInt).toInt)).toString.toDouble.toInt)
              val nc: BigInt = col + BigInt((dc((d.toInt).toInt)).toString.toDouble.toInt)
              if ((inside(nr, nc) && board((nr.toInt).toInt)((nc.toInt).toInt) == 0).asInstanceOf[Boolean]) {
                board((nr).toInt)((nc).toInt) = 1
                board((row).toInt)((col).toInt) = 0
                e((1).toInt) = nr
                e((2).toInt) = nc
                moved = true
                _br10.break()
              }
              j = j + 1
            }
          }
        }
        if (e((5.toInt).toInt) == 1) {
          if ((moved && repro <= 0).asInstanceOf[Boolean]) {
            if (typ == TYPE_PREY) {
              board((old_r).toInt)((old_c).toInt) = 1
              entities = entities :+ create_prey(old_r, old_c)
              e((3).toInt) = PREY_REPRODUCTION_TIME
            } else {
              board((old_r).toInt)((old_c).toInt) = 2
              entities = entities :+ create_predator(old_r, old_c)
              e((3).toInt) = PREDATOR_REPRODUCTION_TIME
            }
          } else {
            e((3).toInt) = repro - 1
          }
        }
        i = i + 1
      }
    }
  }
  var alive: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var k: BigInt = 0
  while (k < BigInt((entities).size)) {
    val e2: ArrayBuffer[BigInt] = entities((k.toInt).toInt)
    if (e2((5.toInt).toInt) == 1) {
      alive = alive :+ e2
    }
    k = k + 1
  }
  entities = alive
}

def count_entities(typ: BigInt): BigInt = {
  var cnt: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((entities).size)) {
    if ((entities((i.toInt).toInt)((0.toInt).toInt) == typ && entities((i.toInt).toInt)((5.toInt).toInt) == 1).asInstanceOf[Boolean]) {
      cnt = cnt + 1
    }
    i = i + 1
  }
  return cnt
}

val WIDTH: BigInt = 10

val HEIGHT: BigInt = 10

val PREY_INITIAL_COUNT: BigInt = 20

val PREY_REPRODUCTION_TIME: BigInt = 5

val PREDATOR_INITIAL_COUNT: BigInt = 5

val PREDATOR_REPRODUCTION_TIME: BigInt = 20

val PREDATOR_INITIAL_ENERGY: BigInt = 15

val PREDATOR_FOOD_VALUE: BigInt = 5

val TYPE_PREY: BigInt = 0

val TYPE_PREDATOR: BigInt = 1

var seed: BigInt = 123456789

var board: ArrayBuffer[ArrayBuffer[BigInt]] = create_board()

var entities: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()

val dr: ArrayBuffer[Any] = ArrayBuffer(-1, 0, 1, 0)

val dc: ArrayBuffer[Any] = ArrayBuffer(0, 1, 0, -1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    setup()
    var t: BigInt = 0
    while (t < 10) {
      step_world()
      t = t + 1
    }
    println("Prey: " + String.valueOf(count_entities(TYPE_PREY)))
    println("Predators: " + String.valueOf(count_entities(TYPE_PREDATOR)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
