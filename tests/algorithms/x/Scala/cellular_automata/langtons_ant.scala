// Generated by Mochi v0.10.59 on 2025-08-06 21:26:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def create_board(width: BigInt, height: BigInt): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var board: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < height) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j < width) {
      row = row :+ true
      j = j + 1
    }
    board = board :+ row
    i = i + 1
  }
  return board
}

def move_ant(board: ArrayBuffer[ArrayBuffer[Boolean]], _x: BigInt, _y: BigInt, _direction: BigInt): ArrayBuffer[BigInt] = {
  var x: BigInt = _x
  var y: BigInt = _y
  var direction: BigInt = _direction
  if (board((x.toInt).toInt)((y.toInt).toInt)) {
    direction = (direction + 1) % 4
  } else {
    direction = (direction + 3) % 4
  }
  val old_x: BigInt = x
  val old_y: BigInt = y
  if (direction == 0) {
    x = x - 1
  } else {
    if (direction == 1) {
      y = y + 1
    } else {
      if (direction == 2) {
        x = x + 1
      } else {
        y = y - 1
      }
    }
  }
  board((old_x).toInt)((old_y).toInt) = (!board((old_x.toInt).toInt)((old_y.toInt).toInt)).asInstanceOf[Boolean]
  return ArrayBuffer(x, y, direction)
}

def langtons_ant(width: BigInt, height: BigInt, steps: BigInt): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var board: ArrayBuffer[ArrayBuffer[Boolean]] = create_board(width, height)
  var x: BigInt = width / 2
  var y: BigInt = height / 2
  var dir: BigInt = 3
  var s: BigInt = 0
  while (s < steps) {
    val state: ArrayBuffer[BigInt] = move_ant(board, x, y, dir)
    x = state((0.toInt).toInt)
    y = state((1.toInt).toInt)
    dir = state((2.toInt).toInt)
    s = s + 1
  }
  return board
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
