// Generated by Mochi v0.10.59 on 2025-08-07 08:59:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble).toString.toDouble > x) {
    i = i - 1
  }
  return i.toString.toDouble
}

def modf(x: Double, m: Double): Double = {
  return x - Math.floor(x / m) * m
}

def sin_taylor(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble
    val k2: Double = k1 + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def cos_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble - 1.0
    val k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def convert_to_2d(x: Double, y: Double, z: Double, scale: Double, distance: Double): ArrayBuffer[Double] = {
  val projected_x: Double = x * distance / (z + distance) * scale
  val projected_y: Double = y * distance / (z + distance) * scale
  return ArrayBuffer(projected_x, projected_y)
}

def rotate(x: Double, y: Double, z: Double, axis: String, _angle: Double): ArrayBuffer[Double] = {
  var angle: Double = _angle
  angle = modf(angle, 360.0) / 450.0 * 180.0 / PI
  angle = modf(angle, 2.0 * PI)
  if (angle > PI) {
    angle = angle - 2.0 * PI
  }
  if (axis == "z") {
    val new_x: Double = x * cos_taylor(angle) - y * sin_taylor(angle)
    val new_y: Double = y * cos_taylor(angle) + x * sin_taylor(angle)
    val new_z: Double = z
    return ArrayBuffer(new_x, new_y, new_z)
  }
  if (axis == "x") {
    val new_y: Double = y * cos_taylor(angle) - z * sin_taylor(angle)
    val new_z: Double = z * cos_taylor(angle) + y * sin_taylor(angle)
    val new_x: Double = x
    return ArrayBuffer(new_x, new_y, new_z)
  }
  if (axis == "y") {
    val new_x: Double = x * cos_taylor(angle) - z * sin_taylor(angle)
    val new_z: Double = z * cos_taylor(angle) + x * sin_taylor(angle)
    val new_y: Double = y
    return ArrayBuffer(new_x, new_y, new_z)
  }
  println("not a valid axis, choose one of 'x', 'y', 'z'")
  return ArrayBuffer(0.0, 0.0, 0.0)
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)))
    println(String.valueOf(rotate(1.0, 2.0, 3.0, "y", 90.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
