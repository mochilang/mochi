// Generated by Mochi v0.10.64 on 2025-08-13 16:22:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def repeat_char(ch: String, count: BigInt): String = {
  var result: String = ""
  var i: BigInt = BigInt(0)
  while (i < count) {
    result = result + ch
    i = i + BigInt(1)
  }
  return result
}

def butterfly_pattern(n: BigInt): String = {
  var lines: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(1)
  while (i < n) {
    val left: String = repeat_char("*", i)
    val mid: String = repeat_char(" ", BigInt(2) * (n - i) - BigInt(1))
    val right: String = repeat_char("*", i)
    lines = lines += (left + mid + right)
    i = i + BigInt(1)
  }
  lines = lines += (repeat_char("*", BigInt(2) * n - BigInt(1)))
  var j: BigInt = n - BigInt(1)
  while (j > BigInt(0)) {
    val left: String = repeat_char("*", j)
    val mid: String = repeat_char(" ", BigInt(2) * (n - j) - BigInt(1))
    val right: String = repeat_char("*", j)
    lines = lines += (left + mid + right)
    j = j - BigInt(1)
  }
  var out: String = ""
  var k: BigInt = BigInt(0)
  while (k < BigInt((lines).size)) {
    if (k > BigInt(0)) {
      out = out + "\n"
    }
    out = out + lines.lift((k.toInt).toInt).getOrElse("")
    k = k + BigInt(1)
  }
  return out
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(butterfly_pattern(BigInt(3)))
    println(butterfly_pattern(BigInt(5)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
