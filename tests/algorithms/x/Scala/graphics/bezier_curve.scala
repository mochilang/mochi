// Generated by Mochi v0.10.64 on 2025-08-13 16:22:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => d.toString
  case other => String.valueOf(other)
}

def n_choose_k(n: BigInt, k: BigInt): Double = {
  if ((k < BigInt(0) || k > n).asInstanceOf[Boolean]) {
    return 0.0
  }
  if ((k == BigInt(0) || k == n).asInstanceOf[Boolean]) {
    return 1.0
  }
  var result: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i <= k) {
    result = result * (1.0 * (n - k + i).toString.toDouble) / (1.0 * i.toString.toDouble)
    i = i + BigInt(1)
  }
  return result
}

def pow_float(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def basis_function(points: ArrayBuffer[ArrayBuffer[Double]], t: Double): ArrayBuffer[Double] = {
  val degree: BigInt = BigInt((points).size) - BigInt(1)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i <= degree) {
    val coef: Double = n_choose_k(degree, i)
    val term: Double = pow_float(1.0 - t, degree - i) * pow_float(t, i)
    res = res += (coef * term)
    i = i + BigInt(1)
  }
  return res
}

def bezier_point(points: ArrayBuffer[ArrayBuffer[Double]], t: Double): ArrayBuffer[Double] = {
  val basis: ArrayBuffer[Double] = basis_function(points, t)
  var x: Double = 0.0
  var y: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((points).size)) {
    x = x + basis.lift((i.toInt).toInt).getOrElse(0.0) * points.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
    y = y + basis.lift((i.toInt).toInt).getOrElse(0.0) * points.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return ArrayBuffer(x, y)
}

val control: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 1.0), ArrayBuffer(1.0, 2.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(basis_function(control, 0.0)))
    println(_str(basis_function(control, 1.0)))
    println(_str(bezier_point(control, 0.0)))
    println(_str(bezier_point(control, 1.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
