// Generated by Mochi v0.10.59 on 2025-08-07 11:13:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: BigInt, var y: BigInt)

def abs_int(n: BigInt): BigInt = {
  if (n < 0) {
    return -n
  }
  return n
}

def round_int(x: Double): BigInt = {
  return BigInt((x + 0.5).toInt)
}

def digital_differential_analyzer_line(p1: Point, p2: Point): ArrayBuffer[Point] = {
  val dx: BigInt = p2.asInstanceOf[Point].x - p1.asInstanceOf[Point].x
  val dy: BigInt = p2.asInstanceOf[Point].y - p1.asInstanceOf[Point].y
  val abs_dx: BigInt = abs_int(dx)
  val abs_dy: BigInt = abs_int(dy)
  val steps: BigInt = (if (abs_dx > abs_dy) abs_dx else abs_dy)
  val x_increment: Double = dx.toString.toDouble / steps.toString.toDouble
  val y_increment: Double = dy.toString.toDouble / steps.toString.toDouble
  var coordinates: ArrayBuffer[Point] = ArrayBuffer()
  var x: Double = (p1.asInstanceOf[Point].x).toString.toDouble
  var y: Double = (p1.asInstanceOf[Point].y).toString.toDouble
  var i: BigInt = 0
  while (i < steps) {
    x = x + x_increment
    y = y + y_increment
    val point: Point = Point(round_int(x), round_int(y))
    coordinates = coordinates :+ point
    i = i + 1
  }
  return coordinates
}

def main(): Any = {
  val result: ArrayBuffer[Point] = digital_differential_analyzer_line(Point(1, 1), Point(4, 4))
  println(result)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
