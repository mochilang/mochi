// Generated by Mochi v0.10.59 on 2025-08-06 22:20:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def round_to_int(x: Double): BigInt = {
  if (x >= 0.0) {
    return BigInt((x + 0.5).toInt)
  }
  return BigInt((x - 0.5).toInt)
}

def molarity_to_normality(nfactor: Double, moles: Double, volume: Double): BigInt = {
  return round_to_int(moles / volume * nfactor)
}

def moles_to_pressure(volume: Double, moles: Double, temperature: Double): BigInt = {
  return round_to_int(moles * 0.0821 * temperature / volume)
}

def moles_to_volume(pressure: Double, moles: Double, temperature: Double): BigInt = {
  return round_to_int(moles * 0.0821 * temperature / pressure)
}

def pressure_and_volume_to_temperature(pressure: Double, moles: Double, volume: Double): BigInt = {
  return round_to_int(pressure * volume / (0.0821 * moles))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(molarity_to_normality(2.0, 3.1, 0.31)))
    println(String.valueOf(molarity_to_normality(4.0, 11.4, 5.7)))
    println(String.valueOf(moles_to_pressure(0.82, 3.0, 300.0)))
    println(String.valueOf(moles_to_pressure(8.2, 5.0, 200.0)))
    println(String.valueOf(moles_to_volume(0.82, 3.0, 300.0)))
    println(String.valueOf(moles_to_volume(8.2, 5.0, 200.0)))
    println(String.valueOf(pressure_and_volume_to_temperature(0.82, 1.0, 2.0)))
    println(String.valueOf(pressure_and_volume_to_temperature(8.2, 5.0, 3.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
