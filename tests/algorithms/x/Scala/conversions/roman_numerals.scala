// Generated by Mochi v0.10.59 on 2025-08-06 22:30:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def char_value(c: String): BigInt = {
  if (c == "I") {
    return 1
  }
  if (c == "V") {
    return 5
  }
  if (c == "X") {
    return 10
  }
  if (c == "L") {
    return 50
  }
  if (c == "C") {
    return 100
  }
  if (c == "D") {
    return 500
  }
  if (c == "M") {
    return 1000
  }
  return 0
}

def roman_to_int(roman: String): BigInt = {
  var total: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((roman).size)) {
    if ((i + 1 < BigInt((roman).size) && char_value((roman.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) < char_value((roman.slice(((i + 1).toInt).toInt, ((i + 1).toInt).toInt + 1)).toString)).asInstanceOf[Boolean]) {
      total = total + char_value((roman.slice(((i + 1).toInt).toInt, ((i + 1).toInt).toInt + 1)).toString) - char_value((roman.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
      i = i + 2
    } else {
      total = total + char_value((roman.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
      i = i + 1
    }
  }
  return total
}

def int_to_roman(number: BigInt): String = {
  var num: BigInt = number
  var res: String = ""
  var i: BigInt = 0
  val _br1 = new Breaks
  _br1.breakable {
    while (i < BigInt((roman_values).size)) {
      val value: BigInt = roman_values((i.toInt).toInt)
      val symbol: String = roman_symbols((i.toInt).toInt)
      val factor: BigInt = num / value
      num = num % value
      var j: BigInt = 0
      while (j < factor) {
        res = res + symbol
        j = j + 1
      }
      if (num == 0) {
        _br1.break()
      }
      i = i + 1
    }
  }
  return res
}

val roman_values: ArrayBuffer[BigInt] = ArrayBuffer(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)

val roman_symbols: ArrayBuffer[String] = ArrayBuffer("M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
