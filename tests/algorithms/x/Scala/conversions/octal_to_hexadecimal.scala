// Generated by Mochi v0.10.59 on 2025-08-06 22:20:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def octal_to_hex(octal: String): String = {
  var s: String = octal
  if (((BigInt((s).size) >= 2 && s.slice((0.toInt).toInt, (0.toInt).toInt + 1) == "0").asInstanceOf[Boolean] && s.slice((1.toInt).toInt, (1.toInt).toInt + 1) == "o").asInstanceOf[Boolean]) {
    s = s.slice((2).toInt, (BigInt((s).size)).toInt)
  }
  if (BigInt((s).size) == 0) {
    throw new RuntimeException(String.valueOf("Empty string was passed to the function"))
  }
  var j: BigInt = 0
  while (j < BigInt((s).size)) {
    val c = s.slice((j.toInt).toInt, (j.toInt).toInt + 1)
    if ((((((((c != "0" && c != "1").asInstanceOf[Boolean] && c != "2").asInstanceOf[Boolean] && c != "3").asInstanceOf[Boolean] && c != "4").asInstanceOf[Boolean] && c != "5").asInstanceOf[Boolean] && c != "6").asInstanceOf[Boolean] && c != "7").asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Not a Valid Octal Number"))
    }
    j = j + 1
  }
  var decimal: BigInt = 0
  var k: BigInt = 0
  while (k < BigInt((s).size)) {
    val d: BigInt = BigInt((s.slice((k.toInt).toInt, (k.toInt).toInt + 1)).toString.toDouble.toInt)
    decimal = decimal * 8 + d
    k = k + 1
  }
  val hex_chars: String = "0123456789ABCDEF"
  if (decimal == 0) {
    return "0x"
  }
  var hex: String = ""
  while (decimal > 0) {
    val idx: BigInt = decimal % 16
    hex = hex_chars.slice((idx.toInt).toInt, (idx.toInt).toInt + 1) + hex
    decimal = decimal / 16
  }
  return "0x" + hex
}

val nums: ArrayBuffer[String] = ArrayBuffer("030", "100", "247", "235", "007")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var t: BigInt = 0
    while (t < BigInt((nums).size)) {
      val num: String = nums((t.toInt).toInt)
      println(octal_to_hex(num))
      t = t + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
