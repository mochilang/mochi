// Generated by Mochi v0.10.59 on 2025-08-06 22:30:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def fmod(a: Double, b: Double): Double = {
  return a - b * (BigInt((a / b).toString.toDouble.toInt)).toString.toDouble
}

def roundf(x: Double): BigInt = {
  if (x >= 0.0) {
    return BigInt((x + 0.5).toInt)
  }
  return BigInt((x - 0.5).toInt)
}

def maxf(a: Double, b: Double, c: Double): Double = {
  var m: Double = a
  if (b > m) {
    m = b
  }
  if (c > m) {
    m = c
  }
  return m
}

def minf(a: Double, b: Double, c: Double): Double = {
  var m: Double = a
  if (b < m) {
    m = b
  }
  if (c < m) {
    m = c
  }
  return m
}

def hsv_to_rgb(hue: Double, saturation: Double, value: Double): ArrayBuffer[BigInt] = {
  if ((hue < 0.0 || hue > 360.0).asInstanceOf[Boolean]) {
    println("hue should be between 0 and 360")
    return ArrayBuffer()
  }
  if ((saturation < 0.0 || saturation > 1.0).asInstanceOf[Boolean]) {
    println("saturation should be between 0 and 1")
    return ArrayBuffer()
  }
  if ((value < 0.0 || value > 1.0).asInstanceOf[Boolean]) {
    println("value should be between 0 and 1")
    return ArrayBuffer()
  }
  val chroma: Double = value * saturation
  val hue_section: Double = hue / 60.0
  val second_largest_component: Double = chroma * (1.0 - absf(fmod(hue_section, 2.0) - 1.0))
  val match_value: Double = value - chroma
  var red: BigInt = null
  var green: BigInt = null
  var blue: BigInt = null
  if ((hue_section >= 0.0 && hue_section <= 1.0).asInstanceOf[Boolean]) {
    red = roundf(255.0 * (chroma + match_value))
    green = roundf(255.0 * (second_largest_component + match_value))
    blue = roundf(255.0 * match_value)
  } else {
    if ((hue_section > 1.0 && hue_section <= 2.0).asInstanceOf[Boolean]) {
      red = roundf(255.0 * (second_largest_component + match_value))
      green = roundf(255.0 * (chroma + match_value))
      blue = roundf(255.0 * match_value)
    } else {
      if ((hue_section > 2.0 && hue_section <= 3.0).asInstanceOf[Boolean]) {
        red = roundf(255.0 * match_value)
        green = roundf(255.0 * (chroma + match_value))
        blue = roundf(255.0 * (second_largest_component + match_value))
      } else {
        if ((hue_section > 3.0 && hue_section <= 4.0).asInstanceOf[Boolean]) {
          red = roundf(255.0 * match_value)
          green = roundf(255.0 * (second_largest_component + match_value))
          blue = roundf(255.0 * (chroma + match_value))
        } else {
          if ((hue_section > 4.0 && hue_section <= 5.0).asInstanceOf[Boolean]) {
            red = roundf(255.0 * (second_largest_component + match_value))
            green = roundf(255.0 * match_value)
            blue = roundf(255.0 * (chroma + match_value))
          } else {
            red = roundf(255.0 * (chroma + match_value))
            green = roundf(255.0 * match_value)
            blue = roundf(255.0 * (second_largest_component + match_value))
          }
        }
      }
    }
  }
  return ArrayBuffer(red, green, blue)
}

def rgb_to_hsv(red: BigInt, green: BigInt, blue: BigInt): ArrayBuffer[Double] = {
  if ((red < 0 || red > 255).asInstanceOf[Boolean]) {
    println("red should be between 0 and 255")
    return ArrayBuffer()
  }
  if ((green < 0 || green > 255).asInstanceOf[Boolean]) {
    println("green should be between 0 and 255")
    return ArrayBuffer()
  }
  if ((blue < 0 || blue > 255).asInstanceOf[Boolean]) {
    println("blue should be between 0 and 255")
    return ArrayBuffer()
  }
  val float_red: Double = red.toString.toDouble / 255.0
  val float_green: Double = green.toString.toDouble / 255.0
  val float_blue: Double = blue.toString.toDouble / 255.0
  val value: Double = maxf(float_red, float_green, float_blue)
  val min_val: Double = minf(float_red, float_green, float_blue)
  val chroma: Double = value - min_val
  val saturation: Double = (if (value == 0.0) 0.0 else chroma / value)
  var hue: Double = 0.0
  if (chroma == 0.0) {
    hue = 0.0
  } else {
    if (value == float_red) {
      hue = 60.0 * (0.0 + (float_green - float_blue) / chroma)
    } else {
      if (value == float_green) {
        hue = 60.0 * (2.0 + (float_blue - float_red) / chroma)
      } else {
        hue = 60.0 * (4.0 + (float_red - float_green) / chroma)
      }
    }
  }
  hue = fmod(hue + 360.0, 360.0)
  return ArrayBuffer(hue, saturation, value)
}

def approximately_equal_hsv(hsv1: ArrayBuffer[Double], hsv2: ArrayBuffer[Double]): Boolean = {
  val check_hue: Boolean = absf(hsv1((0.toInt).toInt) - hsv2((0.toInt).toInt)) < 0.2
  val check_saturation: Boolean = absf(hsv1((1.toInt).toInt) - hsv2((1.toInt).toInt)) < 0.002
  val check_value: Boolean = absf(hsv1((2.toInt).toInt) - hsv2((2.toInt).toInt)) < 0.002
  return ((check_hue && check_saturation).asInstanceOf[Boolean] && check_value).asInstanceOf[Boolean]
}

val rgb: ArrayBuffer[BigInt] = hsv_to_rgb(180.0, 0.5, 0.5)

val hsv: ArrayBuffer[Double] = rgb_to_hsv(64, 128, 128)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(rgb))
    println(String.valueOf(hsv))
    println(String.valueOf(approximately_equal_hsv(hsv, ArrayBuffer(180.0, 0.5, 0.5))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
