// Generated by Mochi v0.10.59 on 2025-08-06 22:20:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Prefix(var name: String, var exp: BigInt)

def pow(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var e: BigInt = exp
  if (e < 0) {
    e = -e
    var i: BigInt = 0
    while (i < e) {
      result = result * base
      i = i + 1
    }
    return 1.0 / result
  }
  var i: BigInt = 0
  while (i < e) {
    result = result * base
    i = i + 1
  }
  return result
}

def add_si_prefix(value: Double): String = {
  var prefixes: ArrayBuffer[Prefix] = ArrayBuffer()
  if (value > 0.0) {
    prefixes = si_positive
  } else {
    prefixes = si_negative
  }
  var i: BigInt = 0
  while (i < BigInt((prefixes).size)) {
    val p: Prefix = prefixes((i.toInt).toInt)
    val num: Double = value / pow(10.0, BigInt((p.asInstanceOf[Prefix].exp).toString.toDouble.toInt))
    if (num > 1.0) {
      return String.valueOf(num) + " " + p.asInstanceOf[Prefix].name
    }
    i = i + 1
  }
  return String.valueOf(value)
}

def add_binary_prefix(value: Double): String = {
  var i: BigInt = 0
  while (i < BigInt((binary_prefixes).size)) {
    val p: Prefix = binary_prefixes((i.toInt).toInt)
    val num: Double = value / pow(2.0, p.asInstanceOf[Prefix].exp)
    if (num > 1.0) {
      return String.valueOf(num) + " " + p.asInstanceOf[Prefix].name
    }
    i = i + 1
  }
  return String.valueOf(value)
}

val si_positive: ArrayBuffer[Prefix] = ArrayBuffer(Prefix("yotta", 24), Prefix("zetta", 21), Prefix("exa", 18), Prefix("peta", 15), Prefix("tera", 12), Prefix("giga", 9), Prefix("mega", 6), Prefix("kilo", 3), Prefix("hecto", 2), Prefix("deca", 1))

val si_negative: ArrayBuffer[Prefix] = ArrayBuffer(Prefix("deci", -1), Prefix("centi", -2), Prefix("milli", -3), Prefix("micro", -6), Prefix("nano", -9), Prefix("pico", -12), Prefix("femto", -15), Prefix("atto", -18), Prefix("zepto", -21), Prefix("yocto", -24))

val binary_prefixes: ArrayBuffer[Prefix] = ArrayBuffer(Prefix("yotta", 80), Prefix("zetta", 70), Prefix("exa", 60), Prefix("peta", 50), Prefix("tera", 40), Prefix("giga", 30), Prefix("mega", 20), Prefix("kilo", 10))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(add_si_prefix(10000.0))
    println(add_si_prefix(0.005))
    println(add_binary_prefix(65536.0))
    println(add_binary_prefix(512.0))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
