// Generated by Mochi v0.10.59 on 2025-08-06 22:14:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def strip_spaces(s: String): String = {
  var start: BigInt = 0
  var end: BigInt = BigInt((s).size) - 1
  while (start < BigInt((s).size) && s.slice((start.toInt).toInt, (start.toInt).toInt + 1) == " ") {
    start = start + 1
  }
  while (end >= start && s.slice((end.toInt).toInt, (end.toInt).toInt + 1) == " ") {
    end = end - 1
  }
  var res: String = ""
  var i: BigInt = start
  while (i <= end) {
    res = res + s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i + 1
  }
  return res
}

def repeat_char(ch: String, count: BigInt): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < count) {
    res = res + ch
    i = i + 1
  }
  return res
}

def slice(s: String, start: BigInt, end: BigInt): String = {
  var res: String = ""
  var i: BigInt = start
  while (i < end) {
    res = res + s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i + 1
  }
  return res
}

def bits_to_int(bits: String): BigInt = {
  var value: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((bits).size)) {
    value = value * 2
    if (bits.slice((i.toInt).toInt, (i.toInt).toInt + 1) == "1") {
      value = value + 1
    }
    i = i + 1
  }
  return value
}

def bin_to_hexadecimal(binary_str: String): String = {
  var s: String = strip_spaces(binary_str)
  if (BigInt((s).size) == 0) {
    throw new RuntimeException(String.valueOf("Empty string was passed to the function"))
  }
  var is_negative: Boolean = false
  if (s.slice((0.toInt).toInt, (0.toInt).toInt + 1) == "-") {
    is_negative = true
    s = s.slice((1).toInt, (BigInt((s).size)).toInt)
  }
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val c = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c != "0" && c != "1").asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Non-binary value was passed to the function"))
    }
    i = i + 1
  }
  val groups: BigInt = BigInt((s).size) / 4 + 1
  val pad_len: BigInt = groups * 4 - BigInt((s).size)
  s = repeat_char("0", pad_len) + s
  val digits: String = "0123456789abcdef"
  var res: String = "0x"
  var j: BigInt = 0
  while (j < BigInt((s).size)) {
    val chunk: String = s.slice((j).toInt, (j + 4).toInt)
    val `val`: BigInt = bits_to_int(chunk)
    res = res + digits.slice((`val`.toInt).toInt, (`val`.toInt).toInt + 1)
    j = j + 4
  }
  if (is_negative) {
    return "-" + res
  }
  return res
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(bin_to_hexadecimal("101011111"))
    println(bin_to_hexadecimal(" 1010   "))
    println(bin_to_hexadecimal("-11101"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
