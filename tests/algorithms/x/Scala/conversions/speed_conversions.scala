// Generated by Mochi v0.10.59 on 2025-08-06 22:30:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(arr: ArrayBuffer[String], value: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    if (arr((i.toInt).toInt) == value) {
      return i
    }
    i = i + 1
  }
  return -1
}

def units_string(arr: ArrayBuffer[String]): String = {
  var s: String = ""
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    if (i > 0) {
      s = s + ", "
    }
    s = s + arr((i.toInt).toInt)
    i = i + 1
  }
  return s
}

def round3(x: Double): Double = {
  val y: Double = x * 1000.0 + 0.5
  val z: BigInt = BigInt(y.toString.toDouble.toInt)
  val zf: Double = z.toString.toDouble
  return zf / 1000.0
}

def convert_speed(speed: Double, unit_from: String, unit_to: String): Double = {
  val from_index: BigInt = index_of(units, unit_from)
  val to_index: BigInt = index_of(units, unit_to)
  if ((from_index < 0 || to_index < 0).asInstanceOf[Boolean]) {
    val msg: String = "Incorrect 'from_type' or 'to_type' value: " + unit_from + ", " + unit_to + "\nValid values are: " + units_string(units)
    throw new RuntimeException(String.valueOf(msg))
  }
  val result: Double = speed * speed_chart((from_index.toInt).toInt) * speed_chart_inverse((to_index.toInt).toInt)
  val r: Double = round3(result)
  return r
}

val units: ArrayBuffer[String] = ArrayBuffer("km/h", "m/s", "mph", "knot")

val speed_chart: ArrayBuffer[Double] = ArrayBuffer(1.0, 3.6, 1.609344, 1.852)

val speed_chart_inverse: ArrayBuffer[Double] = ArrayBuffer(1.0, 0.277777778, 0.621371192, 0.539956803)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(convert_speed(100.0, "km/h", "m/s")))
    println(String.valueOf(convert_speed(100.0, "km/h", "mph")))
    println(String.valueOf(convert_speed(100.0, "km/h", "knot")))
    println(String.valueOf(convert_speed(100.0, "m/s", "km/h")))
    println(String.valueOf(convert_speed(100.0, "m/s", "mph")))
    println(String.valueOf(convert_speed(100.0, "m/s", "knot")))
    println(String.valueOf(convert_speed(100.0, "mph", "km/h")))
    println(String.valueOf(convert_speed(100.0, "mph", "m/s")))
    println(String.valueOf(convert_speed(100.0, "mph", "knot")))
    println(String.valueOf(convert_speed(100.0, "knot", "km/h")))
    println(String.valueOf(convert_speed(100.0, "knot", "m/s")))
    println(String.valueOf(convert_speed(100.0, "knot", "mph")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
