// Generated by Mochi v0.10.59 on 2025-08-06 22:20:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def panic(msg: String): Any = {
  println(msg)
}

def trim_spaces(s: String): String = {
  var start: BigInt = 0
  var end: BigInt = BigInt((s).size) - 1
  while (start <= end && s.slice((start).toInt, (start + 1).toInt) == " ") {
    start = start + 1
  }
  while (end >= start && s.slice((end).toInt, (end + 1).toInt) == " ") {
    end = end - 1
  }
  if (start > end) {
    return ""
  }
  return s.slice((start).toInt, (end + 1).toInt)
}

def char_to_digit(ch: String): BigInt = {
  if (ch == "0") {
    return 0
  }
  if (ch == "1") {
    return 1
  }
  if (ch == "2") {
    return 2
  }
  if (ch == "3") {
    return 3
  }
  if (ch == "4") {
    return 4
  }
  if (ch == "5") {
    return 5
  }
  if (ch == "6") {
    return 6
  }
  if (ch == "7") {
    return 7
  }
  throw new RuntimeException(String.valueOf("Non-octal value was passed to the function"))
  return 0
}

def oct_to_decimal(oct_string: String): BigInt = {
  var s: String = trim_spaces(oct_string)
  if (BigInt((s).size) == 0) {
    throw new RuntimeException(String.valueOf("Empty string was passed to the function"))
    return 0
  }
  var is_negative: Boolean = false
  if (s.slice((0).toInt, (1).toInt) == "-") {
    is_negative = true
    s = s.slice((1).toInt, (BigInt((s).size)).toInt)
  }
  if (BigInt((s).size) == 0) {
    throw new RuntimeException(String.valueOf("Non-octal value was passed to the function"))
    return 0
  }
  var decimal_number: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    val digit: BigInt = char_to_digit(ch)
    decimal_number = 8 * decimal_number + digit
    i = i + 1
  }
  if (is_negative) {
    decimal_number = -decimal_number
  }
  return decimal_number
}

def main(): Any = {
  println(String.valueOf(oct_to_decimal("1")))
  println(String.valueOf(oct_to_decimal("-1")))
  println(String.valueOf(oct_to_decimal("12")))
  println(String.valueOf(oct_to_decimal(" 12   ")))
  println(String.valueOf(oct_to_decimal("-45")))
  println(String.valueOf(oct_to_decimal("0")))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
