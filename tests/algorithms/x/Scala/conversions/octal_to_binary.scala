// Generated by Mochi v0.10.59 on 2025-08-06 22:20:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def octal_to_binary(octal_number: String): String = {
  if (BigInt((octal_number).size) == 0) {
    throw new RuntimeException(String.valueOf("Empty string was passed to the function"))
  }
  val octal_digits: String = "01234567"
  var binary_number: String = ""
  var i: BigInt = 0
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((octal_number).size)) {
      val digit = octal_number.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      var valid: Boolean = false
      var j: BigInt = 0
      val _br1 = new Breaks
      _br1.breakable {
        while (j < BigInt((octal_digits).size)) {
          if (digit == octal_digits.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
            valid = true
            _br1.break()
          }
          j = j + 1
        }
      }
      if (!valid) {
        throw new RuntimeException(String.valueOf("Non-octal value was passed to the function"))
      }
      var value: BigInt = BigInt(digit.toString.toDouble.toInt)
      var k: BigInt = 0
      var binary_digit: String = ""
      while (k < 3) {
        binary_digit = String.valueOf(value % 2) + binary_digit
        value = value / 2
        k = k + 1
      }
      binary_number = binary_number + binary_digit
      i = i + 1
    }
  }
  return binary_number
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(octal_to_binary("17"))
    println(octal_to_binary("7"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
