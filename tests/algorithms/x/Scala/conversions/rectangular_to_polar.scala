// Generated by Mochi v0.10.59 on 2025-08-06 22:28:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def atanApprox(x: Double): Double = {
  if (x > 1.0) {
    return PI / 2.0 - x / (x * x + 0.28)
  }
  if (x < -1.0) {
    return -PI / 2.0 - x / (x * x + 0.28)
  }
  return x / (1.0 + 0.28 * x * x)
}

def atan2Approx(y: Double, x: Double): Double = {
  if (x > 0.0) {
    val r: Double = atanApprox(y / x)
    return r
  }
  if (x < 0.0) {
    if (y >= 0.0) {
      return atanApprox(y / x) + PI
    }
    return atanApprox(y / x) - PI
  }
  if (y > 0.0) {
    return PI / 2.0
  }
  if (y < 0.0) {
    return -PI / 2.0
  }
  return 0.0
}

def deg(rad: Double): Double = {
  return rad * 180.0 / PI
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble).toString.toDouble > x) {
    i = i - 1
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var i: BigInt = 0
  while (i < n) {
    p = p * 10.0
    i = i + 1
  }
  return p
}

def round(x: Double, n: BigInt): Double = {
  val m: Double = pow10(n)
  return floor(x * m + 0.5) / m
}

def rectangular_to_polar(real: Double, img: Double): ArrayBuffer[Double] = {
  val mod: Double = round(sqrtApprox(real * real + img * img), 2)
  val ang: Double = round(deg(atan2Approx(img, real)), 2)
  return ArrayBuffer(mod, ang)
}

def show(real: Double, img: Double): Any = {
  val r: ArrayBuffer[Double] = rectangular_to_polar(real, img)
  println(String.valueOf(r))
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    show(5.0, -5.0)
    show(-1.0, 1.0)
    show(-1.0, -1.0)
    show(0.0000000001, 0.0000000001)
    show(-0.0000000001, 0.0000000001)
    show(9.75, 5.93)
    show(10000.0, 99999.0)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
