// Generated by Mochi v0.10.59 on 2025-08-06 22:19:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split_by_dot(s: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var current: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val c = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (c == ".") {
      res = res :+ current
      current = ""
    } else {
      current = current + c
    }
    i = i + 1
  }
  res = res :+ current
  return res
}

def parse_decimal(s: String): BigInt = {
  if (BigInt((s).size) == 0) {
    throw new RuntimeException(String.valueOf("Invalid IPv4 address format"))
  }
  var value: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val c = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c.charAt(0) < '0' || c.charAt(0) > '9').asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Invalid IPv4 address format"))
    }
    value = value * 10 + BigInt(c.toString.toDouble.toInt)
    i = i + 1
  }
  return value
}

def to_hex2(n: BigInt): String = {
  var x: BigInt = n
  var res: String = ""
  while (x > 0) {
    val d: BigInt = x % 16
    res = hex_digits.slice((d.toInt).toInt, (d.toInt).toInt + 1) + res
    x = x / 16
  }
  while (BigInt((res).size) < 2) {
    res = "0" + res
  }
  return res
}

def ipv4_to_decimal(ipv4_address: String): BigInt = {
  val parts: ArrayBuffer[String] = split_by_dot(ipv4_address)
  if (BigInt((parts).size) != 4) {
    throw new RuntimeException(String.valueOf("Invalid IPv4 address format"))
  }
  var result: BigInt = 0
  var i: BigInt = 0
  while (i < 4) {
    val oct: BigInt = parse_decimal(parts((i.toInt).toInt))
    if ((oct < 0 || oct > 255).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Invalid IPv4 octet " + String.valueOf(oct)))
    }
    result = result * 256 + oct
    i = i + 1
  }
  return result
}

def alt_ipv4_to_decimal(ipv4_address: String): BigInt = {
  val parts: ArrayBuffer[String] = split_by_dot(ipv4_address)
  if (BigInt((parts).size) != 4) {
    throw new RuntimeException(String.valueOf("Invalid IPv4 address format"))
  }
  var hex_str: String = ""
  var i: BigInt = 0
  while (i < 4) {
    val oct: BigInt = parse_decimal(parts((i.toInt).toInt))
    if ((oct < 0 || oct > 255).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Invalid IPv4 octet " + String.valueOf(oct)))
    }
    hex_str = hex_str + to_hex2(oct)
    i = i + 1
  }
  var value: BigInt = 0
  var k: BigInt = 0
  while (k < BigInt((hex_str).size)) {
    val c = hex_str.slice((k.toInt).toInt, (k.toInt).toInt + 1)
    var digit: BigInt = 0 - 1
    var j: BigInt = 0
    while (j < BigInt((hex_digits).length)) {
      if (hex_digits.slice((j.toInt).toInt, (j.toInt).toInt + 1) == c) {
        digit = j
      }
      j = j + 1
    }
    if (digit < 0) {
      throw new RuntimeException(String.valueOf("Invalid hex digit"))
    }
    value = value * 16 + digit
    k = k + 1
  }
  return value
}

def decimal_to_ipv4(decimal_ipv4: BigInt): String = {
  if ((decimal_ipv4 < 0 || decimal_ipv4 > BigInt("4294967295")).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid decimal IPv4 address"))
  }
  var n: BigInt = decimal_ipv4
  var parts: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 4) {
    val octet: BigInt = n % 256
    parts = parts :+ String.valueOf(octet)
    n = n / 256
    i = i + 1
  }
  var res: String = ""
  var j: BigInt = BigInt((parts).size) - 1
  while (j >= 0) {
    res = res + parts((j.toInt).toInt)
    if (j > 0) {
      res = res + "."
    }
    j = j - 1
  }
  return res
}

val hex_digits: String = "0123456789abcdef"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(ipv4_to_decimal("192.168.0.1"))
    println(ipv4_to_decimal("10.0.0.255"))
    println(alt_ipv4_to_decimal("192.168.0.1"))
    println(alt_ipv4_to_decimal("10.0.0.255"))
    println(decimal_to_ipv4(BigInt("3232235521")))
    println(decimal_to_ipv4(167772415))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
