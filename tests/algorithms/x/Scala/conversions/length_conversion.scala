// Generated by Mochi v0.10.59 on 2025-08-06 22:19:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rstrip_s(s: String): String = {
  if ((BigInt((s).size) > 0 && s.slice(((BigInt((s).size) - 1).toInt).toInt, ((BigInt((s).size) - 1).toInt).toInt + 1) == "s").asInstanceOf[Boolean]) {
    return s.slice((0).toInt, (BigInt((s).size) - 1).toInt)
  }
  return s
}

def normalize_alias(u: String): String = {
  if (u == "millimeter") {
    return "mm"
  }
  if (u == "centimeter") {
    return "cm"
  }
  if (u == "meter") {
    return "m"
  }
  if (u == "kilometer") {
    return "km"
  }
  if (u == "inch") {
    return "in"
  }
  if (u == "inche") {
    return "in"
  }
  if (u == "feet") {
    return "ft"
  }
  if (u == "foot") {
    return "ft"
  }
  if (u == "yard") {
    return "yd"
  }
  if (u == "mile") {
    return "mi"
  }
  return u
}

def has_unit(u: String): Boolean = {
  return (((((((u == "mm" || u == "cm").asInstanceOf[Boolean] || u == "m").asInstanceOf[Boolean] || u == "km").asInstanceOf[Boolean] || u == "in").asInstanceOf[Boolean] || u == "ft").asInstanceOf[Boolean] || u == "yd").asInstanceOf[Boolean] || u == "mi").asInstanceOf[Boolean]
}

def from_factor(u: String): Double = {
  if (u == "mm") {
    return 0.001
  }
  if (u == "cm") {
    return 0.01
  }
  if (u == "m") {
    return 1.0
  }
  if (u == "km") {
    return 1000.0
  }
  if (u == "in") {
    return 0.0254
  }
  if (u == "ft") {
    return 0.3048
  }
  if (u == "yd") {
    return 0.9144
  }
  if (u == "mi") {
    return 1609.34
  }
  return 0.0
}

def to_factor(u: String): Double = {
  if (u == "mm") {
    return 1000.0
  }
  if (u == "cm") {
    return 100.0
  }
  if (u == "m") {
    return 1.0
  }
  if (u == "km") {
    return 0.001
  }
  if (u == "in") {
    return 39.3701
  }
  if (u == "ft") {
    return 3.28084
  }
  if (u == "yd") {
    return 1.09361
  }
  if (u == "mi") {
    return 0.000621371
  }
  return 0.0
}

def length_conversion(value: Double, from_type: String, to_type: String): Double = {
  var new_from: String = normalize_alias(rstrip_s((from_type.toLowerCase()).toString))
  var new_to: String = normalize_alias(rstrip_s((to_type.toLowerCase()).toString))
  if (!has_unit(new_from)) {
    throw new RuntimeException(String.valueOf("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
  }
  if (!has_unit(new_to)) {
    throw new RuntimeException(String.valueOf("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
  }
  return value * from_factor(new_from) * to_factor(new_to)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(length_conversion(4.0, "METER", "FEET"))
    println(length_conversion(1.0, "kilometer", "inch"))
    println(length_conversion(2.0, "feet", "meter"))
    println(length_conversion(2.0, "centimeter", "millimeter"))
    println(length_conversion(4.0, "yard", "kilometer"))
    println(length_conversion(3.0, "foot", "inch"))
    println(length_conversion(3.0, "mm", "in"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
