// Generated by Mochi v0.10.59 on 2025-08-06 22:30:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble).toString.toDouble > x) {
    i = i - 1
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var i: BigInt = 0
  while (i < n) {
    p = p * 10.0
    i = i + 1
  }
  return p
}

def round_to(x: Double, ndigits: BigInt): Double = {
  val m: Double = pow10(ndigits)
  return floor(x * m + 0.5) / m
}

def celsius_to_fahrenheit(c: Double, ndigits: BigInt): Double = {
  return round_to(c * 9.0 / 5.0 + 32.0, ndigits)
}

def celsius_to_kelvin(c: Double, ndigits: BigInt): Double = {
  return round_to(c + 273.15, ndigits)
}

def celsius_to_rankine(c: Double, ndigits: BigInt): Double = {
  return round_to(c * 9.0 / 5.0 + 491.67, ndigits)
}

def fahrenheit_to_celsius(f: Double, ndigits: BigInt): Double = {
  return round_to((f - 32.0) * 5.0 / 9.0, ndigits)
}

def fahrenheit_to_kelvin(f: Double, ndigits: BigInt): Double = {
  return round_to((f - 32.0) * 5.0 / 9.0 + 273.15, ndigits)
}

def fahrenheit_to_rankine(f: Double, ndigits: BigInt): Double = {
  return round_to(f + 459.67, ndigits)
}

def kelvin_to_celsius(k: Double, ndigits: BigInt): Double = {
  return round_to(k - 273.15, ndigits)
}

def kelvin_to_fahrenheit(k: Double, ndigits: BigInt): Double = {
  return round_to((k - 273.15) * 9.0 / 5.0 + 32.0, ndigits)
}

def kelvin_to_rankine(k: Double, ndigits: BigInt): Double = {
  return round_to(k * 9.0 / 5.0, ndigits)
}

def rankine_to_celsius(r: Double, ndigits: BigInt): Double = {
  return round_to((r - 491.67) * 5.0 / 9.0, ndigits)
}

def rankine_to_fahrenheit(r: Double, ndigits: BigInt): Double = {
  return round_to(r - 459.67, ndigits)
}

def rankine_to_kelvin(r: Double, ndigits: BigInt): Double = {
  return round_to(r * 5.0 / 9.0, ndigits)
}

def reaumur_to_kelvin(r: Double, ndigits: BigInt): Double = {
  return round_to(r * 1.25 + 273.15, ndigits)
}

def reaumur_to_fahrenheit(r: Double, ndigits: BigInt): Double = {
  return round_to(r * 2.25 + 32.0, ndigits)
}

def reaumur_to_celsius(r: Double, ndigits: BigInt): Double = {
  return round_to(r * 1.25, ndigits)
}

def reaumur_to_rankine(r: Double, ndigits: BigInt): Double = {
  return round_to(r * 2.25 + 32.0 + 459.67, ndigits)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(celsius_to_fahrenheit(0.0, 2))
    println(celsius_to_kelvin(0.0, 2))
    println(celsius_to_rankine(0.0, 2))
    println(fahrenheit_to_celsius(32.0, 2))
    println(fahrenheit_to_kelvin(32.0, 2))
    println(fahrenheit_to_rankine(32.0, 2))
    println(kelvin_to_celsius(273.15, 2))
    println(kelvin_to_fahrenheit(273.15, 2))
    println(kelvin_to_rankine(273.15, 2))
    println(rankine_to_celsius(491.67, 2))
    println(rankine_to_fahrenheit(491.67, 2))
    println(rankine_to_kelvin(491.67, 2))
    println(reaumur_to_kelvin(80.0, 2))
    println(reaumur_to_fahrenheit(80.0, 2))
    println(reaumur_to_celsius(80.0, 2))
    println(reaumur_to_rankine(80.0, 2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
