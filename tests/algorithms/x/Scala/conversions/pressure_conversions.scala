// Generated by Mochi v0.10.59 on 2025-08-06 22:24:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class FromTo(var from_factor: Double, var to_factor: Double)

def pressure_conversion(value: Double, from_type: String, to_type: String): Double = {
  if (!(PRESSURE_CONVERSION.contains(from_type)).asInstanceOf[Boolean]) {
    val keys = PRESSURE_CONVERSION.keys
    throw new RuntimeException(String.valueOf("Invalid 'from_type' value: '" + from_type + "'  Supported values are:\n" + keys))
  }
  if (!(PRESSURE_CONVERSION.contains(to_type)).asInstanceOf[Boolean]) {
    val keys = PRESSURE_CONVERSION.keys
    throw new RuntimeException(String.valueOf("Invalid 'to_type' value: '" + to_type + ".  Supported values are:\n" + keys))
  }
  val from: FromTo = PRESSURE_CONVERSION.getOrElse(from_type.toString, null).asInstanceOf[FromTo]
  val to: FromTo = PRESSURE_CONVERSION.getOrElse(to_type.toString, null).asInstanceOf[FromTo]
  return value * from.asInstanceOf[FromTo].from_factor * to.asInstanceOf[FromTo].to_factor
}

val PRESSURE_CONVERSION: scala.collection.mutable.Map[String,FromTo] = scala.collection.mutable.Map("atm" -> (FromTo(1.0, 1.0)), "pascal" -> (FromTo(0.0000098, 101325.0)), "bar" -> (FromTo(0.986923, 1.01325)), "kilopascal" -> (FromTo(0.00986923, 101.325)), "megapascal" -> (FromTo(9.86923, 0.101325)), "psi" -> (FromTo(0.068046, 14.6959)), "inHg" -> (FromTo(0.0334211, 29.9213)), "torr" -> (FromTo(0.00131579, 760.0)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(pressure_conversion(4.0, "atm", "pascal"))
    println(pressure_conversion(1.0, "pascal", "psi"))
    println(pressure_conversion(1.0, "bar", "atm"))
    println(pressure_conversion(3.0, "kilopascal", "bar"))
    println(pressure_conversion(2.0, "megapascal", "psi"))
    println(pressure_conversion(4.0, "psi", "torr"))
    println(pressure_conversion(1.0, "inHg", "atm"))
    println(pressure_conversion(1.0, "torr", "psi"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
