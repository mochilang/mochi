// Generated by Mochi v0.10.59 on 2025-08-06 22:30:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(arr: ArrayBuffer[String], t: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((arr).size)) {
    if (arr((i.toInt).toInt) == t) {
      return true
    }
    i = i + 1
  }
  return false
}

def convert_time(time_value: Double, unit_from: String, unit_to: String): Double = {
  if (time_value < 0.0) {
    throw new RuntimeException(String.valueOf("'time_value' must be a non-negative number."))
  }
  val from = unit_from.toLowerCase()
  val to = unit_to.toLowerCase()
  if ((!(units.contains(from)).asInstanceOf[Boolean] || !(units.contains(to)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    var invalid_unit: String = from
    if ((units.contains(from)).asInstanceOf[Boolean]) {
      invalid_unit = to
    }
    throw new RuntimeException(String.valueOf("Invalid unit " + invalid_unit + " is not in " + units_str + "."))
  }
  val seconds: Double = time_value * time_chart.getOrElse(from.toString, 0.0).asInstanceOf[Double]
  val converted: Double = seconds * time_chart_inverse.getOrElse(to.toString, 0.0).asInstanceOf[Double]
  val scaled: Double = converted * 1000.0
  val int_part: BigInt = BigInt((scaled + 0.5).toInt)
  return (int_part.toString.toDouble + 0.0) / 1000.0
}

val time_chart: Map[String,Double] = scala.collection.mutable.Map("seconds" -> (1.0), "minutes" -> (60.0), "hours" -> (3600.0), "days" -> (86400.0), "weeks" -> (604800.0), "months" -> (2629800.0), "years" -> (31557600.0))

val time_chart_inverse: Map[String,Double] = scala.collection.mutable.Map("seconds" -> (1.0), "minutes" -> (1.0 / 60.0), "hours" -> (1.0 / 3600.0), "days" -> (1.0 / 86400.0), "weeks" -> (1.0 / 604800.0), "months" -> (1.0 / 2629800.0), "years" -> (1.0 / 31557600.0))

val units: ArrayBuffer[String] = ArrayBuffer("seconds", "minutes", "hours", "days", "weeks", "months", "years")

val units_str: String = "seconds, minutes, hours, days, weeks, months, years"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(convert_time(3600.0, "seconds", "hours"))
    println(convert_time(360.0, "days", "months"))
    println(convert_time(360.0, "months", "years"))
    println(convert_time(1.0, "years", "seconds"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
