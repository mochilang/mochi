// Generated by Mochi v0.10.59 on 2025-08-06 22:14:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sanitize(unit: String): String = {
  var res: String = unit.toLowerCase()
  if (BigInt((res).size) > 0) {
    val last: String = res.slice((BigInt((res).size) - 1).toInt, (BigInt((res).size)).toInt)
    if (last == "s") {
      res = res.slice((0).toInt, (BigInt((res).size) - 1).toInt)
    }
  }
  if ((UNIT_SYMBOL.contains(res)).asInstanceOf[Boolean]) {
    return UNIT_SYMBOL.getOrElse(res.toString, "").asInstanceOf[String]
  }
  return res
}

def pow10(exp: BigInt): Double = {
  if (exp == 0) {
    return 1.0
  }
  var e: BigInt = exp
  var res: Double = 1.0
  if (e < 0) {
    e = -e
  }
  var i: BigInt = 0
  while (i < e) {
    res = res * 10.0
    i = i + 1
  }
  if (exp < 0) {
    return 1.0 / res
  }
  return res
}

def length_conversion(value: Double, from_type: String, to_type: String): Double = {
  val from_sanitized: String = sanitize(from_type)
  val to_sanitized: String = sanitize(to_type)
  if (!(METRIC_CONVERSION.contains(from_sanitized)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS))
  }
  if (!(METRIC_CONVERSION.contains(to_sanitized)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS))
  }
  val from_exp: BigInt = METRIC_CONVERSION.getOrElse(from_sanitized.toString, null).asInstanceOf[BigInt]
  val to_exp: BigInt = METRIC_CONVERSION.getOrElse(to_sanitized.toString, null).asInstanceOf[BigInt]
  var exponent: BigInt = 0
  if (from_exp > to_exp) {
    exponent = from_exp - to_exp
  } else {
    exponent = -to_exp - from_exp
  }
  return value * pow10(exponent)
}

val UNIT_SYMBOL: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("meter" -> ("m"), "kilometer" -> ("km"), "megametre" -> ("Mm"), "gigametre" -> ("Gm"), "terametre" -> ("Tm"), "petametre" -> ("Pm"), "exametre" -> ("Em"), "zettametre" -> ("Zm"), "yottametre" -> ("Ym"))

val METRIC_CONVERSION: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("m" -> (BigInt(0)), "km" -> (BigInt(3)), "Mm" -> (BigInt(6)), "Gm" -> (BigInt(9)), "Tm" -> (BigInt(12)), "Pm" -> (BigInt(15)), "Em" -> (BigInt(18)), "Zm" -> (BigInt(21)), "Ym" -> (BigInt(24)))

val ABBREVIATIONS: String = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(length_conversion(1.0, "meter", "kilometer")))
    println(String.valueOf(length_conversion(1.0, "meter", "megametre")))
    println(String.valueOf(length_conversion(1.0, "gigametre", "meter")))
    println(String.valueOf(length_conversion(1.0, "terametre", "zettametre")))
    println(String.valueOf(length_conversion(1.0, "yottametre", "zettametre")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
