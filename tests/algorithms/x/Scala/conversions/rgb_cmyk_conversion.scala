// Generated by Mochi v0.10.59 on 2025-08-06 22:29:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def round_int(x: Double): BigInt = {
  return BigInt((x + 0.5).toInt)
}

def rgb_to_cmyk(r_input: BigInt, g_input: BigInt, b_input: BigInt): ArrayBuffer[BigInt] = {
  if ((((((r_input < 0 || r_input >= 256).asInstanceOf[Boolean] || g_input < 0).asInstanceOf[Boolean] || g_input >= 256).asInstanceOf[Boolean] || b_input < 0).asInstanceOf[Boolean] || b_input >= 256).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Expected int of the range 0..255"))
  }
  val r: Double = r_input.toString.toDouble / 255.0
  val g: Double = g_input.toString.toDouble / 255.0
  val b: Double = b_input.toString.toDouble / 255.0
  var max_val: Double = r
  if (g > max_val) {
    max_val = g
  }
  if (b > max_val) {
    max_val = b
  }
  val k_float: Double = 1.0 - max_val
  if (k_float == 1.0) {
    return ArrayBuffer(0, 0, 0, 100)
  }
  val c_float: Double = 100.0 * (1.0 - r - k_float) / (1.0 - k_float)
  val m_float: Double = 100.0 * (1.0 - g - k_float) / (1.0 - k_float)
  val y_float: Double = 100.0 * (1.0 - b - k_float) / (1.0 - k_float)
  val k_percent: Double = 100.0 * k_float
  val c: BigInt = round_int(c_float)
  val m: BigInt = round_int(m_float)
  val y: BigInt = round_int(y_float)
  val k: BigInt = round_int(k_percent)
  return ArrayBuffer(c, m, y, k)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(rgb_to_cmyk(255, 255, 255))
    println(rgb_to_cmyk(128, 128, 128))
    println(rgb_to_cmyk(0, 0, 0))
    println(rgb_to_cmyk(255, 0, 0))
    println(rgb_to_cmyk(0, 255, 0))
    println(rgb_to_cmyk(0, 0, 255))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
