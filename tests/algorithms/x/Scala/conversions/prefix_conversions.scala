// Generated by Mochi v0.10.59 on 2025-08-06 22:20:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow(base: Double, exp: BigInt): Double = {
  if (exp == 0) {
    return 1.0
  }
  var e: BigInt = exp
  if (e < 0) {
    e = -e
  }
  var result: Double = 1.0
  var i: BigInt = 0
  while (i < e) {
    result = result * base
    i = i + 1
  }
  if (exp < 0) {
    return 1.0 / result
  }
  return result
}

def convert_si_prefix(known_amount: Double, known_prefix: String, unknown_prefix: String): Double = {
  val kp = known_prefix.toLowerCase()
  val up = unknown_prefix.toLowerCase()
  if (!(SI_UNITS.contains(kp)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("unknown prefix: " + known_prefix))
  }
  if (!(SI_UNITS.contains(up)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("unknown prefix: " + unknown_prefix))
  }
  val diff: BigInt = SI_UNITS.getOrElse(kp.toString, null).asInstanceOf[BigInt] - SI_UNITS.getOrElse(up.toString, null).asInstanceOf[BigInt]
  return known_amount * pow(10.0, diff)
}

def convert_binary_prefix(known_amount: Double, known_prefix: String, unknown_prefix: String): Double = {
  val kp = known_prefix.toLowerCase()
  val up = unknown_prefix.toLowerCase()
  if (!(BINARY_UNITS.contains(kp)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("unknown prefix: " + known_prefix))
  }
  if (!(BINARY_UNITS.contains(up)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("unknown prefix: " + unknown_prefix))
  }
  val diff: BigInt = (BINARY_UNITS.getOrElse(kp.toString, null).asInstanceOf[BigInt] - BINARY_UNITS.getOrElse(up.toString, null).asInstanceOf[BigInt]) * 10
  return known_amount * pow(2.0, diff)
}

val SI_UNITS: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("yotta" -> (BigInt(24)), "zetta" -> (BigInt(21)), "exa" -> (BigInt(18)), "peta" -> (BigInt(15)), "tera" -> (BigInt(12)), "giga" -> (BigInt(9)), "mega" -> (BigInt(6)), "kilo" -> (BigInt(3)), "hecto" -> (BigInt(2)), "deca" -> (BigInt(1)), "deci" -> (BigInt((-1).toString.toDouble.toInt)), "centi" -> (BigInt((-2).toString.toDouble.toInt)), "milli" -> (BigInt((-3).toString.toDouble.toInt)), "micro" -> (BigInt((-6).toString.toDouble.toInt)), "nano" -> (BigInt((-9).toString.toDouble.toInt)), "pico" -> (BigInt((-12).toString.toDouble.toInt)), "femto" -> (BigInt((-15).toString.toDouble.toInt)), "atto" -> (BigInt((-18).toString.toDouble.toInt)), "zepto" -> (BigInt((-21).toString.toDouble.toInt)), "yocto" -> (BigInt((-24).toString.toDouble.toInt)))

val BINARY_UNITS: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("yotta" -> (BigInt(8)), "zetta" -> (BigInt(7)), "exa" -> (BigInt(6)), "peta" -> (BigInt(5)), "tera" -> (BigInt(4)), "giga" -> (BigInt(3)), "mega" -> (BigInt(2)), "kilo" -> (BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(convert_si_prefix(1.0, "giga", "mega")))
    println(String.valueOf(convert_si_prefix(1.0, "mega", "giga")))
    println(String.valueOf(convert_si_prefix(1.0, "kilo", "kilo")))
    println(String.valueOf(convert_binary_prefix(1.0, "giga", "mega")))
    println(String.valueOf(convert_binary_prefix(1.0, "mega", "giga")))
    println(String.valueOf(convert_binary_prefix(1.0, "kilo", "kilo")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
