// Generated by Mochi v0.10.59 on 2025-08-06 22:31:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow10(exp: BigInt): Double = {
  var result: Double = 1.0
  if (exp >= 0) {
    var i: BigInt = 0
    while (i < exp) {
      result = result * 10.0
      i = i + 1
    }
  } else {
    var i: BigInt = 0
    while (i < 0 - exp) {
      result = result / 10.0
      i = i + 1
    }
  }
  return result
}

def weight_conversion(from_type: String, to_type: String, value: Double): Double = {
  val has_to = KILOGRAM_CHART.contains(to_type)
  val has_from = WEIGHT_TYPE_CHART.contains(from_type)
  if ((has_to.asInstanceOf[Boolean] && has_from.asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    return value * KILOGRAM_CHART.getOrElse(to_type.toString, 0.0).asInstanceOf[Double] * WEIGHT_TYPE_CHART.getOrElse(from_type.toString, 0.0).asInstanceOf[Double]
  }
  println("Invalid 'from_type' or 'to_type'")
  return 0.0
}

val KILOGRAM_CHART: scala.collection.mutable.Map[String,Double] = scala.collection.mutable.Map("kilogram" -> (1.0), "gram" -> (1000.0), "milligram" -> (1000000.0), "metric-ton" -> (0.001), "long-ton" -> (0.0009842073), "short-ton" -> (0.0011023122), "pound" -> (2.2046244202), "stone" -> (0.1574731728), "ounce" -> (35.273990723), "carrat" -> (5000.0), "atomic-mass-unit" -> (6.022136652 * pow10(26)))

val WEIGHT_TYPE_CHART: scala.collection.mutable.Map[String,Double] = scala.collection.mutable.Map("kilogram" -> (1.0), "gram" -> (0.001), "milligram" -> (0.000001), "metric-ton" -> (1000.0), "long-ton" -> (1016.04608), "short-ton" -> (907.184), "pound" -> (0.453592), "stone" -> (6.35029), "ounce" -> (0.0283495), "carrat" -> (0.0002), "atomic-mass-unit" -> (1.660540199 * pow10(-27)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(weight_conversion("kilogram", "gram", 1.0))
    println(weight_conversion("gram", "pound", 3.0))
    println(weight_conversion("ounce", "kilogram", 3.0))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
