// Generated by Mochi v0.10.59 on 2025-08-06 22:14:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow10(exp: BigInt): BigInt = {
  var res: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    res = res * 10
    i = i + 1
  }
  return res
}

def max_value(system: String): BigInt = {
  if (system == "short") {
    return pow10(18) - 1
  }
  if (system == "long") {
    return pow10(21) - 1
  }
  if (system == "indian") {
    return pow10(19) - 1
  }
  return 0
}

def join_words(words: ArrayBuffer[String]): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((words).size)) {
    if (i > 0) {
      res = res + " "
    }
    res = res + words((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def convert_small_number(num: BigInt): String = {
  if (num < 0) {
    return ""
  }
  if (num >= 100) {
    return ""
  }
  val tens_digit: BigInt = num / 10
  val ones_digit: BigInt = num % 10
  if (tens_digit == 0) {
    return ones((ones_digit.toInt).toInt)
  }
  if (tens_digit == 1) {
    return teens((ones_digit.toInt).toInt)
  }
  val hyphen: String = (if (ones_digit > 0) "-" else "")
  val tail: String = (if (ones_digit > 0) ones((ones_digit.toInt).toInt) else "")
  return tens((tens_digit.toInt).toInt) + hyphen + tail
}

def convert_number(num: BigInt, system: String): String = {
  var word_groups: ArrayBuffer[String] = ArrayBuffer()
  var n: BigInt = num
  if (n < 0) {
    word_groups = word_groups :+ "negative"
    n = -n
  }
  if (n > max_value(system)) {
    return ""
  }
  var powers: ArrayBuffer[BigInt] = ArrayBuffer()
  var units: ArrayBuffer[String] = ArrayBuffer()
  if (system == "short") {
    powers = short_powers
    units = short_units
  } else {
    if (system == "long") {
      powers = long_powers
      units = long_units
    } else {
      if (system == "indian") {
        powers = indian_powers
        units = indian_units
      } else {
        return ""
      }
    }
  }
  var i: BigInt = 0
  while (i < BigInt((powers).size)) {
    val power: BigInt = powers((i.toInt).toInt)
    val unit: String = units((i.toInt).toInt)
    val divisor: BigInt = pow10(power)
    val digit_group: BigInt = n / divisor
    n = n % divisor
    if (digit_group > 0) {
      val word_group: String = (if (digit_group >= 100) convert_number(digit_group, system) else convert_small_number(digit_group))
      word_groups = word_groups :+ word_group + " " + unit
    }
    i = i + 1
  }
  if ((n > 0 || BigInt((word_groups).size) == 0).asInstanceOf[Boolean]) {
    word_groups = word_groups :+ convert_small_number(n)
  }
  val joined: String = join_words(word_groups)
  return joined
}

val ones: ArrayBuffer[String] = ArrayBuffer("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine")

val teens: ArrayBuffer[String] = ArrayBuffer("ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")

val tens: ArrayBuffer[String] = ArrayBuffer("", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")

val short_powers: ArrayBuffer[BigInt] = ArrayBuffer(15, 12, 9, 6, 3, 2)

val short_units: ArrayBuffer[String] = ArrayBuffer("quadrillion", "trillion", "billion", "million", "thousand", "hundred")

val long_powers: ArrayBuffer[BigInt] = ArrayBuffer(15, 9, 6, 3, 2)

val long_units: ArrayBuffer[String] = ArrayBuffer("billiard", "milliard", "million", "thousand", "hundred")

val indian_powers: ArrayBuffer[BigInt] = ArrayBuffer(14, 12, 7, 5, 3, 2)

val indian_units: ArrayBuffer[String] = ArrayBuffer("crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(convert_number(BigInt("123456789012345"), "short"))
    println(convert_number(BigInt("123456789012345"), "long"))
    println(convert_number(BigInt("123456789012345"), "indian"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
