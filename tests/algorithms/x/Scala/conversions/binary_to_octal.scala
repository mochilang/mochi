// Generated by Mochi v0.10.59 on 2025-08-06 22:14:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bin_to_octal(bin_string: String): String = {
  var i: BigInt = 0
  while (i < BigInt((bin_string).size)) {
    val c = bin_string.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (!(c == "0" || c == "1").asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Non-binary value was passed to the function"))
    }
    i = i + 1
  }
  if (BigInt((bin_string).size) == 0) {
    throw new RuntimeException(String.valueOf("Empty string was passed to the function"))
  }
  var padded: String = bin_string
  while (BigInt((padded).size) % 3 != 0) {
    padded = "0" + padded
  }
  var oct_string: String = ""
  var index: BigInt = 0
  while (index < BigInt((padded).size)) {
    val group: String = padded.slice((index).toInt, (index + 3).toInt)
    val b0: BigInt = (if (group.slice((0.toInt).toInt, (0.toInt).toInt + 1) == "1") 1 else 0)
    val b1: BigInt = (if (group.slice((1.toInt).toInt, (1.toInt).toInt + 1) == "1") 1 else 0)
    val b2: BigInt = (if (group.slice((2.toInt).toInt, (2.toInt).toInt + 1) == "1") 1 else 0)
    val oct_val: BigInt = b0 * 4 + b1 * 2 + b2
    oct_string = oct_string + String.valueOf(oct_val)
    index = index + 3
  }
  return oct_string
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(bin_to_octal("1111"))
    println(bin_to_octal("101010101010011"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
