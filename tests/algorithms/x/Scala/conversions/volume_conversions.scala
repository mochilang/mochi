// Generated by Mochi v0.10.59 on 2025-08-06 22:31:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def supported_values: String = {
  var result: String = units((0.toInt).toInt)
  var i: BigInt = 1
  while (i < BigInt((units).size)) {
    result = result + ", " + units((i.toInt).toInt)
    i = i + 1
  }
  return result
}

def find_index(name: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((units).size)) {
    if (units((i.toInt).toInt) == name) {
      return i
    }
    i = i + 1
  }
  return -1
}

def get_from_factor(name: String): Double = {
  val idx: BigInt = find_index(name)
  if (idx < 0) {
    throw new RuntimeException(String.valueOf("Invalid 'from_type' value: '" + name + "' Supported values are: " + supported_values))
  }
  return from_factors((idx.toInt).toInt)
}

def get_to_factor(name: String): Double = {
  val idx: BigInt = find_index(name)
  if (idx < 0) {
    throw new RuntimeException(String.valueOf("Invalid 'to_type' value: '" + name + "' Supported values are: " + supported_values))
  }
  return to_factors((idx.toInt).toInt)
}

def volume_conversion(value: Double, from_type: String, to_type: String): Double = {
  val from_factor: Double = get_from_factor(from_type)
  val to_factor: Double = get_to_factor(to_type)
  return value * from_factor * to_factor
}

val units: ArrayBuffer[String] = ArrayBuffer("cubic meter", "litre", "kilolitre", "gallon", "cubic yard", "cubic foot", "cup")

val from_factors: ArrayBuffer[Double] = ArrayBuffer(1.0, 0.001, 1.0, 0.00454, 0.76455, 0.028, 0.000236588)

val to_factors: ArrayBuffer[Double] = ArrayBuffer(1.0, 1000.0, 1.0, 264.172, 1.30795, 35.3147, 4226.75)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(volume_conversion(4.0, "cubic meter", "litre")))
    println(String.valueOf(volume_conversion(1.0, "litre", "gallon")))
    println(String.valueOf(volume_conversion(1.0, "kilolitre", "cubic meter")))
    println(String.valueOf(volume_conversion(3.0, "gallon", "cubic yard")))
    println(String.valueOf(volume_conversion(2.0, "cubic yard", "litre")))
    println(String.valueOf(volume_conversion(4.0, "cubic foot", "cup")))
    println(String.valueOf(volume_conversion(1.0, "cup", "kilolitre")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
