// Generated by Mochi v0.10.59 on 2025-08-06 22:15:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def energy_conversion(from_type: String, to_type: String, value: Double): Double = {
  if ((ENERGY_CONVERSION.contains(from_type) == false || ENERGY_CONVERSION.contains(to_type) == false).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Incorrect 'from_type' or 'to_type'"))
  }
  return value * ENERGY_CONVERSION.getOrElse(from_type.toString, 0.0).asInstanceOf[Double] / ENERGY_CONVERSION.getOrElse(to_type.toString, 0.0).asInstanceOf[Double]
}

val ENERGY_CONVERSION: scala.collection.mutable.Map[String,Double] = scala.collection.mutable.Map("joule" -> (1.0), "kilojoule" -> (1000.0), "megajoule" -> (1000000.0), "gigajoule" -> (1000000000.0), "wattsecond" -> (1.0), "watthour" -> (3600.0), "kilowatthour" -> (3600000.0), "newtonmeter" -> (1.0), "calorie_nutr" -> (4186.8), "kilocalorie_nutr" -> (4186800.0), "electronvolt" -> (0.0000000000000000001602176634), "britishthermalunit_it" -> (1055.05585), "footpound" -> (1.355818))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(energy_conversion("joule", "kilojoule", 1.0)))
    println(String.valueOf(energy_conversion("kilowatthour", "joule", 10.0)))
    println(String.valueOf(energy_conversion("britishthermalunit_it", "footpound", 1.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
