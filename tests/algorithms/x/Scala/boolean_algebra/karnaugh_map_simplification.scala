// Generated by Mochi v0.10.59 on 2025-08-06 21:23:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def row_string(row: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = 0
  while (i < BigInt((row).size)) {
    s = s + String.valueOf(row((i.toInt).toInt))
    if (i < BigInt((row).size) - 1) {
      s = s + ", "
    }
    i = i + 1
  }
  s = s + "]"
  return s
}

def print_kmap(kmap: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((kmap).size)) {
    println(row_string(kmap((i.toInt).toInt)))
    i = i + 1
  }
}

def join_terms(terms: ArrayBuffer[String]): String = {
  if (BigInt((terms).size) == 0) {
    return ""
  }
  var res: String = terms((0.toInt).toInt)
  var i: BigInt = 1
  while (i < BigInt((terms).size)) {
    res = res + " + " + terms((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def simplify_kmap(board: ArrayBuffer[ArrayBuffer[BigInt]]): String = {
  var terms: ArrayBuffer[String] = ArrayBuffer()
  var a: BigInt = 0
  while (a < BigInt((board).size)) {
    val row: ArrayBuffer[BigInt] = board((a.toInt).toInt)
    var b: BigInt = 0
    while (b < BigInt((row).size)) {
      val item: BigInt = row((b.toInt).toInt)
      if (item != 0) {
        val term: String = (if (a != 0) "A" else "A'") + (if (b != 0) "B" else "B'")
        terms = terms :+ term
      }
      b = b + 1
    }
    a = a + 1
  }
  val expr: String = join_terms(terms)
  return expr
}

var kmap: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1), ArrayBuffer(1, 1))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_kmap(kmap)
    println("Simplified Expression:")
    println(simplify_kmap(kmap))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
