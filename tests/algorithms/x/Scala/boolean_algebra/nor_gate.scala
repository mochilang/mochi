// Generated by Mochi v0.10.59 on 2025-08-06 21:23:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def nor_gate(input_1: BigInt, input_2: BigInt): BigInt = {
  if ((input_1 == 0 && input_2 == 0).asInstanceOf[Boolean]) {
    return 1
  }
  return 0
}

def center(s: String, width: BigInt): String = {
  var total: BigInt = width - BigInt((s).size)
  if (total <= 0) {
    return s
  }
  var left: BigInt = total / 2
  var right: BigInt = total - left
  var res: String = s
  var i: BigInt = 0
  while (i < left) {
    res = " " + res
    i = i + 1
  }
  var j: BigInt = 0
  while (j < right) {
    res = res + " "
    j = j + 1
  }
  return res
}

def make_table_row(i: BigInt, j: BigInt): String = {
  val output: BigInt = nor_gate(i, j)
  return "| " + center(String.valueOf(i), 8) + " | " + center(String.valueOf(j), 8) + " | " + center(String.valueOf(output), 8) + " |"
}

def truth_table(): String = {
  return "Truth Table of NOR Gate:\n" + "| Input 1 | Input 2 | Output  |\n" + make_table_row(0, 0) + "\n" + make_table_row(0, 1) + "\n" + make_table_row(1, 0) + "\n" + make_table_row(1, 1)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(nor_gate(0, 0))
    println(nor_gate(0, 1))
    println(nor_gate(1, 0))
    println(nor_gate(1, 1))
    println(truth_table())
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
