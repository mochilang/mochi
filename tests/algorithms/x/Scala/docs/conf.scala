// Generated by Mochi v0.10.71 on 2025-08-24 09:42:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def parse_project_name(toml: String): String = {
  var i: BigInt = BigInt(0)
  var name: String = ""
  var n: BigInt = BigInt((toml).size)
  while (i + BigInt(4) < n) {
    if ((((toml.slice((i.toInt).toInt, (i.toInt).toInt + 1) == "n" && toml.slice(((i + BigInt(1)).toInt).toInt, ((i + BigInt(1)).toInt).toInt + 1) == "a").asInstanceOf[Boolean] && toml.slice(((i + BigInt(2)).toInt).toInt, ((i + BigInt(2)).toInt).toInt + 1) == "m").asInstanceOf[Boolean] && toml.slice(((i + BigInt(3)).toInt).toInt, ((i + BigInt(3)).toInt).toInt + 1) == "e")) {
      i = i + BigInt(4)
      while (i < n && toml.slice((i.toInt).toInt, (i.toInt).toInt + 1) != "\"") {
        i = i + BigInt(1)
      }
      i = i + BigInt(1)
      while (i < n && toml.slice((i.toInt).toInt, (i.toInt).toInt + 1) != "\"") {
        name = name + toml.slice((i.toInt).toInt, (i.toInt).toInt + 1)
        i = i + BigInt(1)
      }
      return name
    }
    i = i + BigInt(1)
  }
  return name
}

var pyproject: String = "[project]\nname = \"thealgorithms-python\""

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var project: String = parse_project_name(pyproject)
    println(_str(project))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
