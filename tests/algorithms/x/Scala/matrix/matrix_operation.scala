// Generated by Mochi v0.10.64 on 2025-08-12 13:51:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def add(matrices: ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((matrices.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[Double]]())).size)
  val cols: BigInt = BigInt((matrices.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[Double]]()).lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var r: BigInt = BigInt(0)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (r < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c: BigInt = BigInt(0)
    while (c < cols) {
      var sum: Double = 0.0
      var m: BigInt = BigInt(0)
      while (m < BigInt((matrices).size)) {
        sum = sum + matrices.lift((m.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[Double]]()).lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0)
        m = m + BigInt(1)
      }
      row = row :+ (sum)
      c = c + BigInt(1)
    }
    result = result :+ (row)
    r = r + BigInt(1)
  }
  return result
}

def subtract(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var r: BigInt = BigInt(0)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (r < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c: BigInt = BigInt(0)
    while (c < cols) {
      row = row :+ (a.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0) - b.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0))
      c = c + BigInt(1)
    }
    result = result :+ (row)
    r = r + BigInt(1)
  }
  return result
}

def scalar_multiply(matrix: ArrayBuffer[ArrayBuffer[Double]], n: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((matrix).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      row = row :+ (matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * n)
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def multiply(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rowsA: BigInt = BigInt((a).size)
  val colsA: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  val rowsB: BigInt = BigInt((b).size)
  val colsB: BigInt = BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rowsA) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < colsB) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < colsA) {
        sum = sum + a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) * b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      row = row :+ (sum)
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i == j) {
        row = row :+ (1.0)
      } else {
        row = row :+ (0.0)
      }
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def transpose(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((matrix).size)
  val cols: BigInt = BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var c: BigInt = BigInt(0)
  while (c < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var r: BigInt = BigInt(0)
    while (r < rows) {
      row = row :+ (matrix.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0))
      r = r + BigInt(1)
    }
    result = result :+ (row)
    c = c + BigInt(1)
  }
  return result
}

def minor(matrix: ArrayBuffer[ArrayBuffer[Double]], row: BigInt, column: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((matrix).size)) {
    if (i != row) {
      var new_row: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var j: BigInt = BigInt(0)
      while (j < BigInt((matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
        if (j != column) {
          new_row = new_row :+ (matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
        }
        j = j + BigInt(1)
      }
      result = result :+ (new_row)
    }
    i = i + BigInt(1)
  }
  return result
}

def determinant(matrix: ArrayBuffer[ArrayBuffer[Double]]): Double = {
  if (BigInt((matrix).size) == BigInt(1)) {
    return matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  }
  var det: Double = 0.0
  var c: BigInt = BigInt(0)
  while (c < BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
    val sub: ArrayBuffer[ArrayBuffer[Double]] = minor(matrix, BigInt(0), c)
    val sign: Double = (if (c % BigInt(2) == BigInt(0)) 1.0 else -1.0)
    det = det + matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0) * determinant(sub) * sign
    c = c + BigInt(1)
  }
  return det
}

def inverse(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val det: Double = determinant(matrix)
  if (det == 0.0) {
    return ArrayBuffer[ArrayBuffer[Double]]()
  }
  val size: BigInt = BigInt((matrix).size)
  var matrix_minor: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < size) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < size) {
      val m: ArrayBuffer[ArrayBuffer[Double]] = minor(matrix, i, j)
      row = row :+ (determinant(m))
      j = j + BigInt(1)
    }
    matrix_minor = matrix_minor :+ (row)
    i = i + BigInt(1)
  }
  var cofactors: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  i = BigInt(0)
  while (i < size) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < size) {
      val sign: Double = (if ((i + j) % BigInt(2) == BigInt(0)) 1.0 else -1.0)
      row = row :+ (matrix_minor.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * sign)
      j = j + BigInt(1)
    }
    cofactors = cofactors :+ (row)
    i = i + BigInt(1)
  }
  val adjugate: ArrayBuffer[ArrayBuffer[Double]] = transpose(cofactors)
  return scalar_multiply(adjugate, 1.0 / det)
}

def main(): Any = {
  val matrix_a: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(12.0, 10.0), ArrayBuffer(3.0, 9.0))
  val matrix_b: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(3.0, 4.0), ArrayBuffer(7.0, 4.0))
  val matrix_c: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(11.0, 12.0, 13.0, 14.0), ArrayBuffer(21.0, 22.0, 23.0, 24.0), ArrayBuffer(31.0, 32.0, 33.0, 34.0), ArrayBuffer(41.0, 42.0, 43.0, 44.0))
  val matrix_d: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(3.0, 0.0, 2.0), ArrayBuffer(2.0, 0.0, -2.0), ArrayBuffer(0.0, 1.0, 1.0))
  println("Add Operation, add(matrix_a, matrix_b) = " + _str(add(ArrayBuffer(matrix_a, matrix_b))) + " \n")
  println("Multiply Operation, multiply(matrix_a, matrix_b) = " + _str(multiply(matrix_a, matrix_b)) + " \n")
  println("Identity: " + _str(identity(BigInt(5))) + "\n")
  println("Minor of " + _str(matrix_c) + " = " + _str(minor(matrix_c, BigInt(1), BigInt(2))) + " \n")
  println("Determinant of " + _str(matrix_b) + " = " + _str(determinant(matrix_b)) + " \n")
  println("Inverse of " + _str(matrix_d) + " = " + _str(inverse(matrix_d)) + "\n")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
