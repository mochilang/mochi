// Generated by Mochi v0.10.61 on 2025-08-08 17:18:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_valid_sudoku_board(board: ArrayBuffer[ArrayBuffer[String]]): Boolean = {
  if (BigInt((board).size) != NUM_SQUARES) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < NUM_SQUARES) {
    if (BigInt((board((i.toInt).toInt)).size) != NUM_SQUARES) {
      return false
    }
    i = i + BigInt(1)
  }
  var rows: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var cols: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var boxes: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  i = BigInt(0)
  while (i < NUM_SQUARES) {
    rows = rows :+ (ArrayBuffer[String]())
    cols = cols :+ (ArrayBuffer[String]())
    boxes = boxes :+ (ArrayBuffer[String]())
    i = i + BigInt(1)
  }
  val _ct2 = new Breaks
  for (r <- (BigInt(0)).toInt until (NUM_SQUARES).toInt) {
    _ct2.breakable {
      val _ct3 = new Breaks
      for (c <- (BigInt(0)).toInt until (NUM_SQUARES).toInt) {
        _ct3.breakable {
          val value: String = board((r.toInt).toInt)((c.toInt).toInt)
          if (value == EMPTY_CELL) {
            _ct3.break()
          }
          val box: BigInt = r / BigInt(3) * BigInt(3) + c / BigInt(3)
          if ((((rows((r.toInt).toInt).contains(value)).asInstanceOf[Boolean] || (cols((c.toInt).toInt).contains(value)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || (boxes((box.toInt).toInt).contains(value)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            return false
          }
          rows((r).toInt) = rows((r.toInt).toInt) :+ (value)
          cols((c).toInt) = cols((c.toInt).toInt) :+ (value)
          boxes((box).toInt) = boxes((box.toInt).toInt) :+ (value)
        }
      }
    }
  }
  return true
}

val NUM_SQUARES: BigInt = BigInt(9)

val EMPTY_CELL: String = "."

val valid_board: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("5", "3", ".", ".", "7", ".", ".", ".", "."), ArrayBuffer("6", ".", ".", "1", "9", "5", ".", ".", "."), ArrayBuffer(".", "9", "8", ".", ".", ".", ".", "6", "."), ArrayBuffer("8", ".", ".", ".", "6", ".", ".", ".", "3"), ArrayBuffer("4", ".", ".", "8", ".", "3", ".", ".", "1"), ArrayBuffer("7", ".", ".", ".", "2", ".", ".", ".", "6"), ArrayBuffer(".", "6", ".", ".", ".", ".", "2", "8", "."), ArrayBuffer(".", ".", ".", "4", "1", "9", ".", ".", "5"), ArrayBuffer(".", ".", ".", ".", "8", ".", ".", "7", "9"))

val invalid_board: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("8", "3", ".", ".", "7", ".", ".", ".", "."), ArrayBuffer("6", ".", ".", "1", "9", "5", ".", ".", "."), ArrayBuffer(".", "9", "8", ".", ".", ".", ".", "6", "."), ArrayBuffer("8", ".", ".", ".", "6", ".", ".", ".", "3"), ArrayBuffer("4", ".", ".", "8", ".", "3", ".", ".", "1"), ArrayBuffer("7", ".", ".", ".", "2", ".", ".", ".", "6"), ArrayBuffer(".", "6", ".", ".", ".", ".", "2", "8", "."), ArrayBuffer(".", ".", ".", "4", "1", "9", ".", ".", "5"), ArrayBuffer(".", ".", ".", ".", "8", ".", ".", "7", "9"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(is_valid_sudoku_board(valid_board))
    println(is_valid_sudoku_board(invalid_board))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
