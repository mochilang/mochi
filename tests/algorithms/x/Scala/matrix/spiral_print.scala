// Generated by Mochi v0.10.64 on 2025-08-12 13:52:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_valid_matrix(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  if (BigInt((matrix).size) == BigInt(0)) {
    return false
  }
  val cols: BigInt = BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  for (row <- matrix) {
    if (BigInt((row).size) != cols) {
      return false
    }
  }
  return true
}

def spiral_traversal(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  if (!is_valid_matrix(matrix)) {
    return ArrayBuffer[BigInt]()
  }
  val rows: BigInt = BigInt((matrix).size)
  val cols: BigInt = BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var top: BigInt = BigInt(0)
  var bottom: BigInt = rows - BigInt(1)
  var left: BigInt = BigInt(0)
  var right: BigInt = cols - BigInt(1)
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (left <= right && top <= bottom) {
    var i: BigInt = left
    while (i <= right) {
      result = result :+ (matrix.lift((top.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)))
      i = i + BigInt(1)
    }
    top = top + BigInt(1)
    i = top
    while (i <= bottom) {
      result = result :+ (matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((right.toInt).toInt).getOrElse(BigInt(0)))
      i = i + BigInt(1)
    }
    right = right - BigInt(1)
    if (top <= bottom) {
      i = right
      while (i >= left) {
        result = result :+ (matrix.lift((bottom.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)))
        i = i - BigInt(1)
      }
      bottom = bottom - BigInt(1)
    }
    if (left <= right) {
      i = bottom
      while (i >= top) {
        result = result :+ (matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((left.toInt).toInt).getOrElse(BigInt(0)))
        i = i - BigInt(1)
      }
      left = left + BigInt(1)
    }
  }
  return result
}

def spiral_print_clockwise(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  for (value <- spiral_traversal(matrix)) {
    println(_str(value))
  }
}

def main(): Any = {
  val a: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(5), BigInt(6), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(9), BigInt(10), BigInt(11), BigInt(12)))
  spiral_print_clockwise(a)
  println(_str(spiral_traversal(a)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
