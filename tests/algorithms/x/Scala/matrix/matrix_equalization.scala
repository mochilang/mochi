// Generated by Mochi v0.10.64 on 2025-08-12 09:31:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def unique(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((nums).size)) {
      val v: BigInt = nums.lift((i.toInt).toInt).getOrElse(BigInt(0))
      var found: Boolean = false
      var j: BigInt = BigInt(0)
      val _br1 = new Breaks
      _br1.breakable {
        while (j < BigInt((res).size)) {
          if (res.lift((j.toInt).toInt).getOrElse(BigInt(0)) == v) {
            found = true
            _br1.break()
          }
          j = j + BigInt(1)
        }
      }
      if (!found) {
        res = res :+ (v)
      }
      i = i + BigInt(1)
    }
  }
  return res
}

def array_equalization(vector: ArrayBuffer[BigInt], step_size: BigInt): BigInt = {
  if (step_size <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Step size must be positive and non-zero."))
  }
  val elems: ArrayBuffer[BigInt] = unique(vector)
  var min_updates: BigInt = BigInt((vector).size)
  var i: BigInt = BigInt(0)
  while (i < BigInt((elems).size)) {
    val target: BigInt = elems.lift((i.toInt).toInt).getOrElse(BigInt(0))
    var idx: BigInt = BigInt(0)
    var updates: BigInt = BigInt(0)
    while (idx < BigInt((vector).size)) {
      if (vector.lift((idx.toInt).toInt).getOrElse(BigInt(0)) != target) {
        updates = updates + BigInt(1)
        idx = idx + step_size
      } else {
        idx = idx + BigInt(1)
      }
    }
    if (updates < min_updates) {
      min_updates = updates
    }
    i = i + BigInt(1)
  }
  return min_updates
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(array_equalization(ArrayBuffer(BigInt(1), BigInt(1), BigInt(6), BigInt(2), BigInt(4), BigInt(6), BigInt(5), BigInt(1), BigInt(7), BigInt(2), BigInt(2), BigInt(1), BigInt(7), BigInt(2), BigInt(2)), BigInt(4))))
    println(_str(array_equalization(ArrayBuffer(BigInt(22), BigInt(81), BigInt(88), BigInt(71), BigInt(22), BigInt(81), BigInt(632), BigInt(81), BigInt(81), BigInt(22), BigInt(92)), BigInt(2))))
    println(_str(array_equalization(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), BigInt(5))))
    println(_str(array_equalization(ArrayBuffer(BigInt(22), BigInt(22), BigInt(22), BigInt(33), BigInt(33), BigInt(33)), BigInt(2))))
    println(_str(array_equalization(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), BigInt(2147483647))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
