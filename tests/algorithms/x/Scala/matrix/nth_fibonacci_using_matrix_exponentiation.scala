// Generated by Mochi v0.10.64 on 2025-08-12 13:51:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def multiply(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((matrix_a).size)
  var matrix_c: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      var `val`: BigInt = BigInt(0)
      var k: BigInt = BigInt(0)
      while (k < n) {
        `val` = `val` + matrix_a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((k.toInt).toInt).getOrElse(BigInt(0)) * matrix_b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
        k = k + BigInt(1)
      }
      row = row :+ (`val`)
      j = j + BigInt(1)
    }
    matrix_c = matrix_c :+ (row)
    i = i + BigInt(1)
  }
  return matrix_c
}

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i == j) {
        row = row :+ (BigInt(1))
      } else {
        row = row :+ (BigInt(0))
      }
      j = j + BigInt(1)
    }
    res = res :+ (row)
    i = i + BigInt(1)
  }
  return res
}

def nth_fibonacci_matrix(n: BigInt): BigInt = {
  if (n <= BigInt(1)) {
    return n
  }
  var res_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = identity(BigInt(2))
  var fib_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0)))
  var m: BigInt = n - BigInt(1)
  while (m > BigInt(0)) {
    if (m % BigInt(2) == BigInt(1)) {
      res_matrix = multiply(res_matrix, fib_matrix)
    }
    fib_matrix = multiply(fib_matrix, fib_matrix)
    m = m / BigInt(2)
  }
  return res_matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
}

def nth_fibonacci_bruteforce(n: BigInt): BigInt = {
  if (n <= BigInt(1)) {
    return n
  }
  var fib0: BigInt = BigInt(0)
  var fib1: BigInt = BigInt(1)
  var i: BigInt = BigInt(2)
  while (i <= n) {
    val next: BigInt = fib0 + fib1
    fib0 = fib1
    fib1 = next
    i = i + BigInt(1)
  }
  return fib1
}

def parse_number(s: String): BigInt = {
  var result: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((ch.charAt(BigInt(0).toInt) >= '0' && ch.charAt(BigInt(0).toInt) <= '9').asInstanceOf[Boolean]) {
      result = result * BigInt(10) + BigInt(ch.toString.toDouble.toInt)
    }
    i = i + BigInt(1)
  }
  return result
}

def main(): Any = {
  val ordinals: ArrayBuffer[String] = ArrayBuffer("0th", "1st", "2nd", "3rd", "10th", "100th", "1000th")
  var i: BigInt = BigInt(0)
  while (i < BigInt((ordinals).size)) {
    val ordinal: String = ordinals.lift((i.toInt).toInt).getOrElse("")
    val n: BigInt = parse_number(ordinal)
    val msg: String = ordinal + " fibonacci number using matrix exponentiation is " + _str(nth_fibonacci_matrix(n)) + " and using bruteforce is " + _str(nth_fibonacci_bruteforce(n))
    println(msg)
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
