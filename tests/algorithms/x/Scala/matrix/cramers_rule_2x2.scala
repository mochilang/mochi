// Generated by Mochi v0.10.64 on 2025-08-12 09:30:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def cramers_rule_2x2(eq1: ArrayBuffer[Double], eq2: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  if ((BigInt((eq1).size) != BigInt(3) || BigInt((eq2).size) != BigInt(3)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Please enter a valid equation."))
  }
  if ((((eq1.lift((BigInt(0).toInt).toInt).getOrElse(0.0) == 0.0 && eq1.lift((BigInt(1).toInt).toInt).getOrElse(0.0) == 0.0).asInstanceOf[Boolean] && eq2.lift((BigInt(0).toInt).toInt).getOrElse(0.0) == 0.0).asInstanceOf[Boolean] && eq2.lift((BigInt(1).toInt).toInt).getOrElse(0.0) == 0.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Both a & b of two equations can't be zero."))
  }
  val a1: Double = eq1.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  val b1: Double = eq1.lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  val c1: Double = eq1.lift((BigInt(2).toInt).toInt).getOrElse(0.0)
  val a2: Double = eq2.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  val b2: Double = eq2.lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  val c2: Double = eq2.lift((BigInt(2).toInt).toInt).getOrElse(0.0)
  val determinant: Double = a1 * b2 - a2 * b1
  val determinant_x: Double = c1 * b2 - c2 * b1
  val determinant_y: Double = a1 * c2 - a2 * c1
  if (determinant == 0.0) {
    if ((determinant_x == 0.0 && determinant_y == 0.0).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Infinite solutions. (Consistent system)"))
    }
    throw new RuntimeException(String.valueOf("No solution. (Inconsistent system)"))
  }
  if ((determinant_x == 0.0 && determinant_y == 0.0).asInstanceOf[Boolean]) {
    return ArrayBuffer(0.0, 0.0)
  }
  val x: Double = determinant_x / determinant
  val y: Double = determinant_y / determinant
  return ArrayBuffer(x, y)
}

def test_cramers_rule_2x2(): Any = {
  val r1: ArrayBuffer[Double] = cramers_rule_2x2(ArrayBuffer(2.0, 3.0, 0.0), ArrayBuffer(5.0, 1.0, 0.0))
  if ((r1.lift((BigInt(0).toInt).toInt).getOrElse(0.0) != 0.0 || r1.lift((BigInt(1).toInt).toInt).getOrElse(0.0) != 0.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Test1 failed"))
  }
  val r2: ArrayBuffer[Double] = cramers_rule_2x2(ArrayBuffer(0.0, 4.0, 50.0), ArrayBuffer(2.0, 0.0, 26.0))
  if ((r2.lift((BigInt(0).toInt).toInt).getOrElse(0.0) != 13.0 || r2.lift((BigInt(1).toInt).toInt).getOrElse(0.0) != 12.5).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Test2 failed"))
  }
}

def main(): Any = {
  test_cramers_rule_2x2()
  println(cramers_rule_2x2(ArrayBuffer(11.0, 2.0, 30.0), ArrayBuffer(1.0, 0.0, 4.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
