// Generated by Mochi v0.10.64 on 2025-08-12 09:32:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def abs_int(n: BigInt): BigInt = {
  if (n < BigInt(0)) {
    return -n
  }
  return n
}

def make_matrix(row_size: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var size: BigInt = abs_int(row_size)
  if (size == BigInt(0)) {
    size = BigInt(4)
  }
  var mat: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var y: BigInt = BigInt(0)
  while (y < size) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var x: BigInt = BigInt(0)
    while (x < size) {
      row = row :+ (BigInt(1) + x + y * size)
      x = x + BigInt(1)
    }
    mat = mat :+ (row)
    y = y + BigInt(1)
  }
  return mat
}

def transpose(mat: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((mat).size)
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ (mat.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def reverse_row(mat: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt((mat).size) - BigInt(1)
  while (i >= BigInt(0)) {
    result = result :+ (mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    i = i - BigInt(1)
  }
  return result
}

def reverse_column(mat: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1)
    while (j >= BigInt(0)) {
      row = row :+ (mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j - BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def rotate_90(mat: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val t: ArrayBuffer[ArrayBuffer[BigInt]] = transpose(mat)
  val rr: ArrayBuffer[ArrayBuffer[BigInt]] = reverse_row(t)
  return rr
}

def rotate_180(mat: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val rc: ArrayBuffer[ArrayBuffer[BigInt]] = reverse_column(mat)
  val rr: ArrayBuffer[ArrayBuffer[BigInt]] = reverse_row(rc)
  return rr
}

def rotate_270(mat: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val t: ArrayBuffer[ArrayBuffer[BigInt]] = transpose(mat)
  val rc: ArrayBuffer[ArrayBuffer[BigInt]] = reverse_column(t)
  return rc
}

def row_to_string(row: ArrayBuffer[BigInt]): String = {
  var line: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((row).size)) {
    if (i == BigInt(0)) {
      line = (_str(row.lift((i.toInt).toInt).getOrElse(BigInt(0)))).toString
    } else {
      line = line + " " + _str(row.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    }
    i = i + BigInt(1)
  }
  return line
}

def print_matrix(mat: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    println(row_to_string(mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())))
    i = i + BigInt(1)
  }
}

var mat: ArrayBuffer[ArrayBuffer[BigInt]] = make_matrix(BigInt(4))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("\norigin:\n")
    print_matrix(mat)
    println("\nrotate 90 counterclockwise:\n")
    val r90: ArrayBuffer[ArrayBuffer[BigInt]] = rotate_90(mat)
    print_matrix(r90)
    mat = make_matrix(BigInt(4))
    println("\norigin:\n")
    print_matrix(mat)
    println("\nrotate 180:\n")
    val r180: ArrayBuffer[ArrayBuffer[BigInt]] = rotate_180(mat)
    print_matrix(r180)
    mat = make_matrix(BigInt(4))
    println("\norigin:\n")
    print_matrix(mat)
    println("\nrotate 270 counterclockwise:\n")
    val r270: ArrayBuffer[ArrayBuffer[BigInt]] = rotate_270(mat)
    print_matrix(r270)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
