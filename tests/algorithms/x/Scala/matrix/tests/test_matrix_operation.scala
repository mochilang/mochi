// Generated by Mochi v0.10.64 on 2025-08-12 13:52:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def check_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  if ((BigInt((mat).size) < BigInt(2) || BigInt((mat.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) < BigInt(2)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Expected a matrix with at least 2x2 dimensions"))
  }
}

def add(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  check_matrix(a)
  check_matrix(b)
  if ((BigInt((a).size) != BigInt((b).size) || BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) != BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Matrices must have the same dimensions"))
  }
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row = row :+ (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) + b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def subtract(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  check_matrix(a)
  check_matrix(b)
  if ((BigInt((a).size) != BigInt((b).size) || BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) != BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Matrices must have the same dimensions"))
  }
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row = row :+ (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def scalar_multiply(a: ArrayBuffer[ArrayBuffer[Double]], s: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  check_matrix(a)
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row = row :+ (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * s)
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def multiply(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  check_matrix(a)
  check_matrix(b)
  if (BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) != BigInt((b).size)) {
    throw new RuntimeException(String.valueOf("Invalid dimensions for matrix multiplication"))
  }
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < BigInt((b).size)) {
        sum = sum + a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) * b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      row = row :+ (sum)
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i == j) {
        row = row :+ (1.0)
      } else {
        row = row :+ (0.0)
      }
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def transpose(a: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  check_matrix(a)
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var j: BigInt = BigInt(0)
  while (j < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < rows) {
      row = row :+ (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      i = i + BigInt(1)
    }
    result = result :+ (row)
    j = j + BigInt(1)
  }
  return result
}

def main(): Any = {
  val mat_a: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(12.0, 10.0), ArrayBuffer(3.0, 9.0))
  val mat_b: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(3.0, 4.0), ArrayBuffer(7.0, 4.0))
  val mat_c: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(3.0, 0.0, 2.0), ArrayBuffer(2.0, 0.0, -2.0), ArrayBuffer(0.0, 1.0, 1.0))
  println(_str(add(mat_a, mat_b)))
  println(_str(subtract(mat_a, mat_b)))
  println(_str(multiply(mat_a, mat_b)))
  println(_str(scalar_multiply(mat_a, 3.5)))
  println(_str(identity(BigInt(5))))
  println(_str(transpose(mat_c)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
