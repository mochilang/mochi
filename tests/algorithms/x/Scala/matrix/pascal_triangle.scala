// Generated by Mochi v0.10.64 on 2025-08-12 09:32:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def populate_current_row(triangle: ArrayBuffer[ArrayBuffer[BigInt]], current_row_idx: BigInt): ArrayBuffer[BigInt] = {
  var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= current_row_idx) {
    if ((i == BigInt(0) || i == current_row_idx).asInstanceOf[Boolean]) {
      row = row :+ (BigInt(1))
    } else {
      val left: BigInt = triangle.lift(((current_row_idx - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((i - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      val right: BigInt = triangle.lift(((current_row_idx - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
      row = row :+ (left + right)
    }
    i = i + BigInt(1)
  }
  return row
}

def generate_pascal_triangle(num_rows: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (num_rows <= BigInt(0)) {
    return ArrayBuffer[ArrayBuffer[BigInt]]()
  }
  var triangle: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var row_idx: BigInt = BigInt(0)
  while (row_idx < num_rows) {
    val row: ArrayBuffer[BigInt] = populate_current_row(triangle, row_idx)
    triangle = triangle :+ (row)
    row_idx = row_idx + BigInt(1)
  }
  return triangle
}

def row_to_string(row: ArrayBuffer[BigInt], total_rows: BigInt, row_idx: BigInt): String = {
  var line: String = ""
  var spaces: BigInt = total_rows - row_idx - BigInt(1)
  var s: BigInt = BigInt(0)
  while (s < spaces) {
    line = line + " "
    s = s + BigInt(1)
  }
  var c: BigInt = BigInt(0)
  while (c <= row_idx) {
    line = line + _str(row.lift((c.toInt).toInt).getOrElse(BigInt(0)))
    if (c != row_idx) {
      line = line + " "
    }
    c = c + BigInt(1)
  }
  return line
}

def print_pascal_triangle(num_rows: BigInt): Any = {
  val triangle: ArrayBuffer[ArrayBuffer[BigInt]] = generate_pascal_triangle(num_rows)
  var r: BigInt = BigInt(0)
  while (r < num_rows) {
    val line: String = row_to_string(triangle.lift((r.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()), num_rows, r)
    println(line)
    r = r + BigInt(1)
  }
}

def main(): Any = {
  print_pascal_triangle(BigInt(5))
  println(_str(generate_pascal_triangle(BigInt(5))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
