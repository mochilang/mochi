// Generated by Mochi v0.10.61 on 2025-08-08 17:36:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def binary_search(arr: ArrayBuffer[BigInt], lower_bound: BigInt, upper_bound: BigInt, value: BigInt): BigInt = {
  val r: BigInt = (lower_bound + upper_bound) / BigInt(2)
  if (arr((r.toInt).toInt) == value) {
    return r
  }
  if (lower_bound >= upper_bound) {
    return -BigInt(1)
  }
  if (arr((r.toInt).toInt) < value) {
    return binary_search(arr, r + BigInt(1), upper_bound, value)
  }
  return binary_search(arr, lower_bound, r - BigInt(1), value)
}

def mat_bin_search(value: BigInt, matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var index: BigInt = BigInt(0)
  if (matrix((index.toInt).toInt)((BigInt(0).toInt).toInt) == value) {
    return ArrayBuffer(index, BigInt(0))
  }
  while (index < BigInt((matrix).size) && matrix((index.toInt).toInt)((BigInt(0).toInt).toInt) < value) {
    val r: BigInt = binary_search(matrix((index.toInt).toInt), BigInt(0), BigInt((matrix((index.toInt).toInt)).size) - BigInt(1), value)
    if (r != -BigInt(1)) {
      return ArrayBuffer(index, r)
    }
    index = index + BigInt(1)
  }
  return ArrayBuffer(BigInt((-BigInt(1)).toString.toDouble.toInt), BigInt((-BigInt(1)).toString.toDouble.toInt))
}

def main(): Any = {
  val row: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(4), BigInt(7), BigInt(11), BigInt(15))
  println(_str(binary_search(row, BigInt(0), BigInt((row).size) - BigInt(1), BigInt(1))))
  println(_str(binary_search(row, BigInt(0), BigInt((row).size) - BigInt(1), BigInt(23))))
  val matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(4), BigInt(7), BigInt(11), BigInt(15)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(8), BigInt(12), BigInt(19)), ArrayBuffer(BigInt(3), BigInt(6), BigInt(9), BigInt(16), BigInt(22)), ArrayBuffer(BigInt(10), BigInt(13), BigInt(14), BigInt(17), BigInt(24)), ArrayBuffer(BigInt(18), BigInt(21), BigInt(23), BigInt(26), BigInt(30)))
  println(_str(mat_bin_search(BigInt(1), matrix)))
  println(_str(mat_bin_search(BigInt(34), matrix)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
