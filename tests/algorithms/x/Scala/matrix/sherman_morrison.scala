// Generated by Mochi v0.10.61 on 2025-08-08 17:04:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Matrix(var data: ArrayBuffer[ArrayBuffer[Double]], var rows: BigInt, var cols: BigInt)

def make_matrix(rows: BigInt, cols: BigInt, value: Double): Matrix = {
  var arr: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var r: BigInt = BigInt(0)
  while (r < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c: BigInt = BigInt(0)
    while (c < cols) {
      row = row :+ (value)
      c = c + BigInt(1)
    }
    arr = arr :+ (row)
    r = r + BigInt(1)
  }
  return Matrix(arr, rows, cols)
}

def matrix_from_lists(vals: ArrayBuffer[ArrayBuffer[Double]]): Matrix = {
  val r: BigInt = BigInt((vals).size)
  val c: BigInt = (if (r == BigInt(0)) BigInt(0) else BigInt((vals((BigInt(0).toInt).toInt)).size))
  return Matrix(vals, r, c)
}

def matrix_to_string(m: Matrix): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    s = s + "["
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      s = s + _str(m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt))
      if (j < m.asInstanceOf[Matrix].cols - BigInt(1)) {
        s = s + ", "
      }
      j = j + BigInt(1)
    }
    s = s + "]"
    if (i < m.asInstanceOf[Matrix].rows - BigInt(1)) {
      s = s + "\n"
    }
    i = i + BigInt(1)
  }
  return s
}

def matrix_add(a: Matrix, b: Matrix): Matrix = {
  if ((a.asInstanceOf[Matrix].rows != b.asInstanceOf[Matrix].rows || a.asInstanceOf[Matrix].cols != b.asInstanceOf[Matrix].cols).asInstanceOf[Boolean]) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < a.asInstanceOf[Matrix].cols) {
      row = row :+ ((a.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) + b.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)).toDouble)
      j = j + BigInt(1)
    }
    res = res :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(res, a.asInstanceOf[Matrix].rows, a.asInstanceOf[Matrix].cols)
}

def matrix_sub(a: Matrix, b: Matrix): Matrix = {
  if ((a.asInstanceOf[Matrix].rows != b.asInstanceOf[Matrix].rows || a.asInstanceOf[Matrix].cols != b.asInstanceOf[Matrix].cols).asInstanceOf[Boolean]) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < a.asInstanceOf[Matrix].cols) {
      row = row :+ ((a.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) - b.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)).toDouble)
      j = j + BigInt(1)
    }
    res = res :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(res, a.asInstanceOf[Matrix].rows, a.asInstanceOf[Matrix].cols)
}

def matrix_mul_scalar(m: Matrix, k: Double): Matrix = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      row = row :+ (m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) * k)
      j = j + BigInt(1)
    }
    res = res :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(res, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols)
}

def matrix_mul(a: Matrix, b: Matrix): Matrix = {
  if (a.asInstanceOf[Matrix].cols != b.asInstanceOf[Matrix].rows) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < b.asInstanceOf[Matrix].cols) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < a.asInstanceOf[Matrix].cols) {
        sum = sum + a.asInstanceOf[Matrix].data((i.toInt).toInt)((k.toInt).toInt) * b.asInstanceOf[Matrix].data((k.toInt).toInt)((j.toInt).toInt)
        k = k + BigInt(1)
      }
      row = row :+ (sum)
      j = j + BigInt(1)
    }
    res = res :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(res, a.asInstanceOf[Matrix].rows, b.asInstanceOf[Matrix].cols)
}

def matrix_transpose(m: Matrix): Matrix = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var c: BigInt = BigInt(0)
  while (c < m.asInstanceOf[Matrix].cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var r: BigInt = BigInt(0)
    while (r < m.asInstanceOf[Matrix].rows) {
      row = row :+ (m.asInstanceOf[Matrix].data((r.toInt).toInt)((c.toInt).toInt))
      r = r + BigInt(1)
    }
    res = res :+ (row)
    c = c + BigInt(1)
  }
  return Matrix(res, m.asInstanceOf[Matrix].cols, m.asInstanceOf[Matrix].rows)
}

def sherman_morrison(ainv: Matrix, u: Matrix, v: Matrix): Matrix = {
  val vt: Matrix = matrix_transpose(v)
  val vu: Matrix = matrix_mul(matrix_mul(vt, ainv), u)
  val factor: Double = vu.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) + 1.0
  if (factor == 0.0) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  val term1: Matrix = matrix_mul(ainv, u)
  val term2: Matrix = matrix_mul(vt, ainv)
  val numerator: Matrix = matrix_mul(term1, term2)
  val scaled: Matrix = matrix_mul_scalar(numerator, 1.0 / factor)
  return matrix_sub(ainv, scaled)
}

def main(): Any = {
  val ainv: Matrix = matrix_from_lists(ArrayBuffer(ArrayBuffer(1.0, 0.0, 0.0), ArrayBuffer(0.0, 1.0, 0.0), ArrayBuffer(0.0, 0.0, 1.0)))
  val u: Matrix = matrix_from_lists(ArrayBuffer(ArrayBuffer(1.0), ArrayBuffer(2.0), ArrayBuffer(-3.0)))
  val v: Matrix = matrix_from_lists(ArrayBuffer(ArrayBuffer(4.0), ArrayBuffer(-2.0), ArrayBuffer(5.0)))
  val result: Matrix = sherman_morrison(ainv, u, v)
  println(matrix_to_string(result))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
