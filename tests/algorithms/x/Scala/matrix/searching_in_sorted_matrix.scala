// Generated by Mochi v0.10.61 on 2025-08-08 17:04:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def search_in_sorted_matrix(mat: ArrayBuffer[ArrayBuffer[Double]], m: BigInt, n: BigInt, key: Double): Any = {
  var i: BigInt = m - BigInt(1)
  var j: BigInt = BigInt(0)
  while (i >= BigInt(0) && j < n) {
    if (key == mat((i.toInt).toInt)((j.toInt).toInt)) {
      println("Key " + _str(key) + " found at row- " + _str(i + BigInt(1)) + " column- " + _str(j + BigInt(1)))
      return
    }
    if (key < mat((i.toInt).toInt)((j.toInt).toInt)) {
      i = i - BigInt(1)
    } else {
      j = j + BigInt(1)
    }
  }
  println("Key " + _str(key) + " not found")
  return null
}

def main(): Any = {
  val mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 5.0, 7.0), ArrayBuffer(4.0, 8.0, 13.0), ArrayBuffer(9.0, 11.0, 15.0), ArrayBuffer(12.0, 17.0, 20.0))
  search_in_sorted_matrix(mat, BigInt((mat).size), BigInt((mat((BigInt(0).toInt).toInt)).size), 5.0)
  search_in_sorted_matrix(mat, BigInt((mat).size), BigInt((mat((BigInt(0).toInt).toInt)).size), 21.0)
  val mat2: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.1, 5.0, 7.0), ArrayBuffer(4.0, 8.0, 13.0), ArrayBuffer(9.0, 11.0, 15.0), ArrayBuffer(12.0, 17.0, 20.0))
  search_in_sorted_matrix(mat2, BigInt((mat2).size), BigInt((mat2((BigInt(0).toInt).toInt)).size), 2.1)
  search_in_sorted_matrix(mat2, BigInt((mat2).size), BigInt((mat2((BigInt(0).toInt).toInt)).size), 2.2)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
