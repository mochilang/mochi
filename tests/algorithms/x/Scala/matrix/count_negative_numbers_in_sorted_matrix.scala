// Generated by Mochi v0.10.61 on 2025-08-08 17:39:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def generate_large_matrix(): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(1000)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(1000) - i
    while (j > -BigInt(1000) - i) {
      row = row :+ (j)
      j = j - BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def find_negative_index(arr: ArrayBuffer[BigInt]): BigInt = {
  var left: BigInt = BigInt(0)
  var right: BigInt = BigInt((arr).size) - BigInt(1)
  if (BigInt((arr).size) == BigInt(0)) {
    return BigInt(0)
  }
  if (arr.lift((BigInt(0).toInt).toInt).getOrElse(null) < BigInt(0)) {
    return BigInt(0)
  }
  while (left <= right) {
    val mid: BigInt = (left + right) / BigInt(2)
    val num: BigInt = arr.lift((mid.toInt).toInt).getOrElse(null)
    if (num < BigInt(0)) {
      if (mid == BigInt(0)) {
        return BigInt(0)
      }
      if (arr.lift(((mid - BigInt(1)).toInt).toInt).getOrElse(null) >= BigInt(0)) {
        return mid
      }
      right = mid - BigInt(1)
    } else {
      left = mid + BigInt(1)
    }
  }
  return BigInt((arr).size)
}

def count_negatives_binary_search(grid: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var total: BigInt = BigInt(0)
  var bound: BigInt = BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var i: BigInt = BigInt(0)
  while (i < BigInt((grid).size)) {
    val row: ArrayBuffer[BigInt] = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    val idx: BigInt = find_negative_index(row.slice((BigInt(0)).toInt, (bound).toInt))
    bound = idx
    total = total + idx
    i = i + BigInt(1)
  }
  return BigInt((grid).size) * BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - total
}

def count_negatives_brute_force(grid: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var count: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((grid).size)) {
    val row: ArrayBuffer[BigInt] = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var j: BigInt = BigInt(0)
    while (j < BigInt((row).size)) {
      if (row.lift((j.toInt).toInt).getOrElse(null) < BigInt(0)) {
        count = count + BigInt(1)
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return count
}

def count_negatives_brute_force_with_break(grid: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  val _br6 = new Breaks
  _br6.breakable {
    while (i < BigInt((grid).size)) {
      val row: ArrayBuffer[BigInt] = grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var j: BigInt = BigInt(0)
      val _br7 = new Breaks
      _br7.breakable {
        while (j < BigInt((row).size)) {
          val number: BigInt = row.lift((j.toInt).toInt).getOrElse(null)
          if (number < BigInt(0)) {
            total = total + (BigInt((row).size) - j)
            _br7.break()
          }
          j = j + BigInt(1)
        }
      }
      i = i + BigInt(1)
    }
  }
  return total
}

val grid: ArrayBuffer[ArrayBuffer[BigInt]] = generate_large_matrix()

val test_grids: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(4), BigInt(3), BigInt(2), -BigInt(1)), ArrayBuffer(BigInt(3), BigInt(2), BigInt(1), -BigInt(1)), ArrayBuffer(BigInt(1), BigInt(1), -BigInt(1), -BigInt(2)), ArrayBuffer(-BigInt(1), -BigInt(1), -BigInt(2), -BigInt(3))), ArrayBuffer(ArrayBuffer(BigInt(3), BigInt(2)), ArrayBuffer(BigInt(1), BigInt(0))), ArrayBuffer(ArrayBuffer(BigInt(7), BigInt(7), BigInt(6))), ArrayBuffer(ArrayBuffer(BigInt(7), BigInt(7), BigInt(6)), ArrayBuffer(-BigInt(1), -BigInt(2), -BigInt(3))), grid)

var results_bin: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var i: BigInt = BigInt(0)

var results_brute: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var results_break: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i < BigInt((test_grids).size)) {
      results_bin = results_bin :+ (count_negatives_binary_search(test_grids.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())))
      i = i + BigInt(1)
    }
    println(_str(results_bin))
    i = BigInt(0)
    while (i < BigInt((test_grids).size)) {
      results_brute = results_brute :+ (count_negatives_brute_force(test_grids.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())))
      i = i + BigInt(1)
    }
    println(_str(results_brute))
    i = BigInt(0)
    while (i < BigInt((test_grids).size)) {
      results_break = results_break :+ (count_negatives_brute_force_with_break(test_grids.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())))
      i = i + BigInt(1)
    }
    println(_str(results_break))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
