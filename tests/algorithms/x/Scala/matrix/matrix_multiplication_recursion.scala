// Generated by Mochi v0.10.61 on 2025-08-08 17:03:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_square(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  val n: BigInt = BigInt((matrix).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    if (BigInt((matrix((i.toInt).toInt)).size) != n) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def matrix_multiply(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((b((BigInt(0).toInt).toInt)).size)
  val inner: BigInt = BigInt((b).size)
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      var sum: BigInt = BigInt(0)
      var k: BigInt = BigInt(0)
      while (k < inner) {
        sum = sum + a((i.toInt).toInt)((k.toInt).toInt) * b((k.toInt).toInt)((j.toInt).toInt)
        k = k + BigInt(1)
      }
      row = row :+ (sum)
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  return result
}

def multiply(i: BigInt, j: BigInt, k: BigInt, a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]], result: ArrayBuffer[ArrayBuffer[BigInt]], n: BigInt, m: BigInt): Any = {
  if (i >= n) {
    return
  }
  if (j >= m) {
    multiply(i + BigInt(1), BigInt(0), BigInt(0), a, b, result, n, m)
    return
  }
  if (k >= BigInt((b).size)) {
    multiply(i, j + BigInt(1), BigInt(0), a, b, result, n, m)
    return
  }
  result((i).toInt)((j).toInt) = result((i.toInt).toInt)((j.toInt).toInt) + a((i.toInt).toInt)((k.toInt).toInt) * b((k.toInt).toInt)((j.toInt).toInt)
  multiply(i, j, k + BigInt(1), a, b, result, n, m)
  return null
}

def matrix_multiply_recursive(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if ((BigInt((a).size) == BigInt(0) || BigInt((b).size) == BigInt(0)).asInstanceOf[Boolean]) {
    return ArrayBuffer[ArrayBuffer[BigInt]]()
  }
  if (((BigInt((a).size) != BigInt((b).size) || !is_square(a)).asInstanceOf[Boolean] || !is_square(b)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid matrix dimensions"))
  }
  val n: BigInt = BigInt((a).size)
  val m: BigInt = BigInt((b((BigInt(0).toInt).toInt)).size)
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < m) {
      row = row :+ (BigInt(0))
      j = j + BigInt(1)
    }
    result = result :+ (row)
    i = i + BigInt(1)
  }
  multiply(BigInt(0), BigInt(0), BigInt(0), a, b, result, n, m)
  return result
}

val matrix_1_to_4: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer(BigInt(3), BigInt(4)))

val matrix_5_to_8: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(5), BigInt(6)), ArrayBuffer(BigInt(7), BigInt(8)))

val matrix_count_up: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(5), BigInt(6), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(9), BigInt(10), BigInt(11), BigInt(12)), ArrayBuffer(BigInt(13), BigInt(14), BigInt(15), BigInt(16)))

val matrix_unordered: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(5), BigInt(8), BigInt(1), BigInt(2)), ArrayBuffer(BigInt(6), BigInt(7), BigInt(3), BigInt(0)), ArrayBuffer(BigInt(4), BigInt(5), BigInt(9), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(6), BigInt(10), BigInt(14)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(matrix_multiply_recursive(matrix_1_to_4, matrix_5_to_8))
    println(matrix_multiply_recursive(matrix_count_up, matrix_unordered))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
