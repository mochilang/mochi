// Generated by Mochi v0.10.61 on 2025-08-08 17:02:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Matrix(var data: ArrayBuffer[ArrayBuffer[Double]], var rows: BigInt, var cols: BigInt)

def make_matrix(values: ArrayBuffer[ArrayBuffer[Double]]): Matrix = {
  val r: BigInt = BigInt((values).size)
  if (r == BigInt(0)) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  val c: BigInt = BigInt((values((BigInt(0).toInt).toInt)).size)
  var i: BigInt = BigInt(0)
  while (i < r) {
    if (BigInt((values((i.toInt).toInt)).size) != c) {
      return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
    }
    i = i + BigInt(1)
  }
  return Matrix(values, r, c)
}

def matrix_columns(m: Matrix): ArrayBuffer[ArrayBuffer[Double]] = {
  var cols: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var j: BigInt = BigInt(0)
  while (j < m.asInstanceOf[Matrix].cols) {
    var col: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < m.asInstanceOf[Matrix].rows) {
      col = col :+ (m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt))
      i = i + BigInt(1)
    }
    cols = cols :+ (col)
    j = j + BigInt(1)
  }
  return cols
}

def matrix_identity(m: Matrix): Matrix = {
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      val v: Double = (if (i == j) 1.0 else 0.0)
      row = row :+ (v)
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols)
}

def matrix_minor(m: Matrix, r: BigInt, c: BigInt): Double = {
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    if (i != r) {
      var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var j: BigInt = BigInt(0)
      while (j < m.asInstanceOf[Matrix].cols) {
        if (j != c) {
          row = row :+ (m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt))
        }
        j = j + BigInt(1)
      }
      vals = vals :+ (row)
    }
    i = i + BigInt(1)
  }
  val sub: Matrix = Matrix(vals, m.asInstanceOf[Matrix].rows - BigInt(1), m.asInstanceOf[Matrix].cols - BigInt(1))
  return matrix_determinant(sub)
}

def matrix_cofactor(m: Matrix, r: BigInt, c: BigInt): Double = {
  val minor: Double = matrix_minor(m, r, c)
  if ((r + c) % BigInt(2) == BigInt(0)) {
    return minor
  }
  return -1.0 * minor
}

def matrix_minors(m: Matrix): Matrix = {
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      row = row :+ (matrix_minor(m, i, j))
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols)
}

def matrix_cofactors(m: Matrix): Matrix = {
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      row = row :+ (matrix_cofactor(m, i, j))
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols)
}

def matrix_determinant(m: Matrix): Double = {
  if (m.asInstanceOf[Matrix].rows != m.asInstanceOf[Matrix].cols) {
    return 0.0
  }
  if (m.asInstanceOf[Matrix].rows == BigInt(0)) {
    return 0.0
  }
  if (m.asInstanceOf[Matrix].rows == BigInt(1)) {
    return m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt)
  }
  if (m.asInstanceOf[Matrix].rows == BigInt(2)) {
    return (m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) * m.asInstanceOf[Matrix].data((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) - m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) * m.asInstanceOf[Matrix].data((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt)).toDouble
  }
  var sum: Double = 0.0
  var j: BigInt = BigInt(0)
  while (j < m.asInstanceOf[Matrix].cols) {
    sum = sum + m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((j.toInt).toInt) * matrix_cofactor(m, BigInt(0), j)
    j = j + BigInt(1)
  }
  return sum
}

def matrix_is_invertible(m: Matrix): Boolean = {
  return matrix_determinant(m) != 0.0
}

def matrix_adjugate(m: Matrix): Matrix = {
  val cof: Matrix = matrix_cofactors(m)
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      row = row :+ (cof.asInstanceOf[Matrix].data((j.toInt).toInt)((i.toInt).toInt))
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols)
}

def matrix_inverse(m: Matrix): Matrix = {
  val det: Double = matrix_determinant(m)
  if (det == 0.0) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  val adj: Matrix = matrix_adjugate(m)
  return matrix_mul_scalar(adj, 1.0 / det)
}

def matrix_add_row(m: Matrix, row: ArrayBuffer[Double]): Matrix = {
  var newData: ArrayBuffer[ArrayBuffer[Double]] = m.asInstanceOf[Matrix].data
  newData = newData :+ (row)
  return Matrix(newData, m.asInstanceOf[Matrix].rows + BigInt(1), m.asInstanceOf[Matrix].cols)
}

def matrix_add_column(m: Matrix, col: ArrayBuffer[Double]): Matrix = {
  var newData: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    newData = newData :+ (m.asInstanceOf[Matrix].data((i.toInt).toInt) :+ (col((i.toInt).toInt)))
    i = i + BigInt(1)
  }
  return Matrix(newData, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols + BigInt(1))
}

def matrix_mul_scalar(m: Matrix, s: Double): Matrix = {
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      row = row :+ (m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) * s)
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, m.asInstanceOf[Matrix].rows, m.asInstanceOf[Matrix].cols)
}

def matrix_neg(m: Matrix): Matrix = {
  return matrix_mul_scalar(m, -1.0)
}

def matrix_add(a: Matrix, b: Matrix): Matrix = {
  if ((a.asInstanceOf[Matrix].rows != b.asInstanceOf[Matrix].rows || a.asInstanceOf[Matrix].cols != b.asInstanceOf[Matrix].cols).asInstanceOf[Boolean]) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < a.asInstanceOf[Matrix].cols) {
      row = row :+ ((a.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) + b.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)).toDouble)
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, a.asInstanceOf[Matrix].rows, a.asInstanceOf[Matrix].cols)
}

def matrix_sub(a: Matrix, b: Matrix): Matrix = {
  if ((a.asInstanceOf[Matrix].rows != b.asInstanceOf[Matrix].rows || a.asInstanceOf[Matrix].cols != b.asInstanceOf[Matrix].cols).asInstanceOf[Boolean]) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < a.asInstanceOf[Matrix].cols) {
      row = row :+ ((a.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) - b.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)).toDouble)
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, a.asInstanceOf[Matrix].rows, a.asInstanceOf[Matrix].cols)
}

def matrix_dot(row: ArrayBuffer[Double], col: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((row).size)) {
    sum = sum + row((i.toInt).toInt) * col((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return sum
}

def matrix_mul(a: Matrix, b: Matrix): Matrix = {
  if (a.asInstanceOf[Matrix].cols != b.asInstanceOf[Matrix].rows) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  val bcols: ArrayBuffer[ArrayBuffer[Double]] = matrix_columns(b)
  var vals: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < b.asInstanceOf[Matrix].cols) {
      row = row :+ (matrix_dot(a.asInstanceOf[Matrix].data((i.toInt).toInt), bcols((j.toInt).toInt)))
      j = j + BigInt(1)
    }
    vals = vals :+ (row)
    i = i + BigInt(1)
  }
  return Matrix(vals, a.asInstanceOf[Matrix].rows, b.asInstanceOf[Matrix].cols)
}

def matrix_pow(m: Matrix, p: BigInt): Matrix = {
  if (p == BigInt(0)) {
    return matrix_identity(m)
  }
  if (p < BigInt(0)) {
    if (matrix_is_invertible(m)) {
      return matrix_pow(matrix_inverse(m), -p)
    }
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var result: Matrix = m
  var i: BigInt = BigInt(1)
  while (i < p) {
    result = matrix_mul(result, m)
    i = i + BigInt(1)
  }
  return result
}

def matrix_to_string(m: Matrix): String = {
  if (m.asInstanceOf[Matrix].rows == BigInt(0)) {
    return "[]"
  }
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].rows) {
    s = s + "["
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].cols) {
      s = s + _str(m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt))
      if (j < m.asInstanceOf[Matrix].cols - BigInt(1)) {
        s = s + " "
      }
      j = j + BigInt(1)
    }
    s = s + "]"
    if (i < m.asInstanceOf[Matrix].rows - BigInt(1)) {
      s = s + "\n "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def main(): Any = {
  val m: Matrix = make_matrix(ArrayBuffer(ArrayBuffer(1.0, 2.0, 3.0), ArrayBuffer(4.0, 5.0, 6.0), ArrayBuffer(7.0, 8.0, 9.0)))
  println(matrix_to_string(m))
  println(_str(matrix_columns(m)))
  println(_str(m.asInstanceOf[Matrix].rows) + "," + _str(m.asInstanceOf[Matrix].cols))
  println(_str(matrix_is_invertible(m)))
  println(matrix_to_string(matrix_identity(m)))
  println(_str(matrix_determinant(m)))
  println(matrix_to_string(matrix_minors(m)))
  println(matrix_to_string(matrix_cofactors(m)))
  println(matrix_to_string(matrix_adjugate(m)))
  val m2: Matrix = matrix_mul_scalar(m, 3.0)
  println(matrix_to_string(m2))
  println(matrix_to_string(matrix_add(m, m2)))
  println(matrix_to_string(matrix_sub(m, m2)))
  println(matrix_to_string(matrix_pow(m, BigInt(3))))
  val m3: Matrix = matrix_add_row(m, ArrayBuffer(10.0, 11.0, 12.0))
  println(matrix_to_string(m3))
  val m4: Matrix = matrix_add_column(m2, ArrayBuffer(8.0, 16.0, 32.0))
  println(matrix_to_string(matrix_mul(m3, m4)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
