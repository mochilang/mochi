// Generated by Mochi v0.10.61 on 2025-08-08 17:03:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def encode(row: BigInt, col: BigInt): String = {
  return _str(row) + "," + _str(col)
}

def is_safe(row: BigInt, col: BigInt, rows: BigInt, cols: BigInt): Boolean = {
  return (((row >= BigInt(0) && row < rows).asInstanceOf[Boolean] && col >= BigInt(0)).asInstanceOf[Boolean] && col < cols).asInstanceOf[Boolean]
}

def has(seen: scala.collection.mutable.Map[String,Boolean], key: String): Boolean = {
  return (seen.contains(key)).asInstanceOf[Boolean]
}

def depth_first_search(row: BigInt, col: BigInt, seen: scala.collection.mutable.Map[String,Boolean], mat: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  val rows: BigInt = BigInt((mat).size)
  val cols: BigInt = BigInt((mat((BigInt(0).toInt).toInt)).size)
  val key: String = encode(row, col)
  if (((is_safe(row, col, rows, cols) && !has(seen, key)).asInstanceOf[Boolean] && mat((row.toInt).toInt)((col.toInt).toInt) == BigInt(1)).asInstanceOf[Boolean]) {
    seen.update(key, true)
    return BigInt(1) + depth_first_search(row + BigInt(1), col, seen, mat) + depth_first_search(row - BigInt(1), col, seen, mat) + depth_first_search(row, col + BigInt(1), seen, mat) + depth_first_search(row, col - BigInt(1), seen, mat)
  } else {
    return BigInt(0)
  }
  return null
}

def find_max_area(mat: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var seen: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  val rows: BigInt = BigInt((mat).size)
  var max_area: BigInt = BigInt(0)
  var r: BigInt = BigInt(0)
  while (r < rows) {
    val line: ArrayBuffer[BigInt] = mat((r.toInt).toInt)
    val cols: BigInt = BigInt((line).size)
    var c: BigInt = BigInt(0)
    while (c < cols) {
      if (line((c.toInt).toInt) == BigInt(1)) {
        val key: String = encode(r, c)
        if (!(seen.contains(key)).asInstanceOf[Boolean]) {
          val area: BigInt = depth_first_search(r, c, seen, mat)
          if (area > max_area) {
            max_area = area
          }
        }
      }
      c = c + BigInt(1)
    }
    r = r + BigInt(1)
  }
  return max_area
}

val matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(1), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(1), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(find_max_area(matrix))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
