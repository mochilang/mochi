// Generated by Mochi v0.10.61 on 2025-08-08 17:39:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_safe(grid: ArrayBuffer[ArrayBuffer[BigInt]], visited: ArrayBuffer[ArrayBuffer[Boolean]], row: BigInt, col: BigInt): Boolean = {
  val rows: BigInt = BigInt((grid).size)
  val cols: BigInt = BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  val visited_cell: Boolean = visited.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift((col.toInt).toInt).getOrElse(false)
  val within_bounds = ((row >= BigInt(0) && row < rows).asInstanceOf[Boolean] && col >= BigInt(0)).asInstanceOf[Boolean] && col < cols
  val not_visited: Boolean = visited_cell == false
  return ((within_bounds && not_visited).asInstanceOf[Boolean] && grid.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean]
}

def dfs(grid: ArrayBuffer[ArrayBuffer[BigInt]], visited: ArrayBuffer[ArrayBuffer[Boolean]], row: BigInt, col: BigInt): Any = {
  val row_nbr: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(1), -BigInt(1), -BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1), BigInt(1))
  val col_nbr: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(1), BigInt(0), BigInt(1), -BigInt(1), BigInt(1), -BigInt(1), BigInt(0), BigInt(1))
  visited((row).toInt)((col).toInt) = true
  var k: BigInt = BigInt(0)
  while (k < BigInt(8)) {
    val new_row: BigInt = row + row_nbr.lift((k.toInt).toInt).getOrElse(null)
    val new_col: BigInt = col + col_nbr.lift((k.toInt).toInt).getOrElse(null)
    if (is_safe(grid, visited, new_row, new_col)) {
      dfs(grid, visited, new_row, new_col)
    }
    k = k + BigInt(1)
  }
}

def count_islands(grid: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  val rows: BigInt = BigInt((grid).size)
  val cols: BigInt = BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var visited: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer[ArrayBuffer[Boolean]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row_list: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row_list = row_list :+ (false)
      j = j + BigInt(1)
    }
    visited = visited :+ (row_list)
    i = i + BigInt(1)
  }
  var count: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < rows) {
    var j: BigInt = BigInt(0)
    while (j < cols) {
      if ((!visited.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift((j.toInt).toInt).getOrElse(false) && grid.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) == BigInt(1)).asInstanceOf[Boolean]) {
        dfs(grid, visited, i, j)
        count = count + BigInt(1)
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return count
}

val grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(1), BigInt(0), BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(count_islands(grid))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
