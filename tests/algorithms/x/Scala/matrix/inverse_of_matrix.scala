// Generated by Mochi v0.10.64 on 2025-08-12 09:31:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def inverse_of_matrix(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  if (((BigInt((matrix).size) == BigInt(2) && BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(2)).asInstanceOf[Boolean] && BigInt((matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(2)).asInstanceOf[Boolean]) {
    val det: Double = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0)
    if (det == 0.0) {
      println("This matrix has no inverse.")
      return ArrayBuffer[ArrayBuffer[Double]]()
    }
    return ArrayBuffer(ArrayBuffer(matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) / det, -matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) / det), ArrayBuffer(-matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) / det, matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) / det))
  } else {
    if ((((BigInt((matrix).size) == BigInt(3) && BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(3)).asInstanceOf[Boolean] && BigInt((matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(3)).asInstanceOf[Boolean] && BigInt((matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) == BigInt(3)).asInstanceOf[Boolean]) {
      val det: Double = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) + matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) + matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) - (matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) + matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) + matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0))
      if (det == 0.0) {
        println("This matrix has no inverse.")
        return ArrayBuffer[ArrayBuffer[Double]]()
      }
      var cof: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0))
      cof((BigInt(0)).toInt)((BigInt(0)).toInt) = matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0)
      cof((BigInt(0)).toInt)((BigInt(1)).toInt) = -(matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0))
      cof((BigInt(0)).toInt)((BigInt(2)).toInt) = matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
      cof((BigInt(1)).toInt)((BigInt(0)).toInt) = -(matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0))
      cof((BigInt(1)).toInt)((BigInt(1)).toInt) = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
      cof((BigInt(1)).toInt)((BigInt(2)).toInt) = -(matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0))
      cof((BigInt(2)).toInt)((BigInt(0)).toInt) = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0)
      cof((BigInt(2)).toInt)((BigInt(1)).toInt) = -(matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(2).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0))
      cof((BigInt(2)).toInt)((BigInt(2)).toInt) = matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) - matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(1).toInt).toInt).getOrElse(0.0) * matrix.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
      var inv: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0))
      var i: BigInt = BigInt(0)
      while (i < BigInt(3)) {
        var j: BigInt = BigInt(0)
        while (j < BigInt(3)) {
          inv((i).toInt)((j).toInt) = cof.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0) / det
          j = j + BigInt(1)
        }
        i = i + BigInt(1)
      }
      return inv
    }
  }
  println("Please provide a matrix of size 2x2 or 3x3.")
  return ArrayBuffer[ArrayBuffer[Double]]()
}

var m2: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 5.0), ArrayBuffer(2.0, 0.0))

var m3: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 5.0, 7.0), ArrayBuffer(2.0, 0.0, 1.0), ArrayBuffer(1.0, 2.0, 3.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(inverse_of_matrix(m2))
    println(inverse_of_matrix(m3))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
