// Generated by Mochi v0.10.64 on 2025-08-12 09:31:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def update_area_of_max_square(row: BigInt, col: BigInt, rows: BigInt, cols: BigInt, mat: ArrayBuffer[ArrayBuffer[BigInt]], largest_square_area: ArrayBuffer[BigInt]): BigInt = {
  if ((row >= rows || col >= cols).asInstanceOf[Boolean]) {
    return BigInt(0)
  }
  val right: BigInt = update_area_of_max_square(row, col + BigInt(1), rows, cols, mat, largest_square_area)
  val diagonal: BigInt = update_area_of_max_square(row + BigInt(1), col + BigInt(1), rows, cols, mat, largest_square_area)
  val down: BigInt = update_area_of_max_square(row + BigInt(1), col, rows, cols, mat, largest_square_area)
  if (mat.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
    val sub: BigInt = BigInt(1) + ArrayBuffer(right, diagonal, down).min
    if (sub > largest_square_area.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) {
      largest_square_area((BigInt(0)).toInt) = sub
    }
    return sub
  } else {
    return BigInt(0)
  }
  return BigInt(0)
}

def largest_square_area_in_matrix_top_down(rows: BigInt, cols: BigInt, mat: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var largest: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))
  update_area_of_max_square(BigInt(0), BigInt(0), rows, cols, mat, largest)
  return largest.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
}

def update_area_of_max_square_with_dp(row: BigInt, col: BigInt, rows: BigInt, cols: BigInt, mat: ArrayBuffer[ArrayBuffer[BigInt]], dp_array: ArrayBuffer[ArrayBuffer[BigInt]], largest_square_area: ArrayBuffer[BigInt]): BigInt = {
  if ((row >= rows || col >= cols).asInstanceOf[Boolean]) {
    return BigInt(0)
  }
  if (dp_array.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0)) != -BigInt(1)) {
    return dp_array.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0))
  }
  val right: BigInt = update_area_of_max_square_with_dp(row, col + BigInt(1), rows, cols, mat, dp_array, largest_square_area)
  val diagonal: BigInt = update_area_of_max_square_with_dp(row + BigInt(1), col + BigInt(1), rows, cols, mat, dp_array, largest_square_area)
  val down: BigInt = update_area_of_max_square_with_dp(row + BigInt(1), col, rows, cols, mat, dp_array, largest_square_area)
  if (mat.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
    val sub: BigInt = BigInt(1) + ArrayBuffer(right, diagonal, down).min
    if (sub > largest_square_area.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) {
      largest_square_area((BigInt(0)).toInt) = sub
    }
    dp_array((row).toInt)((col).toInt) = sub
    return sub
  } else {
    dp_array((row).toInt)((col).toInt) = BigInt(0)
    return BigInt(0)
  }
  return BigInt(0)
}

def largest_square_area_in_matrix_top_down_with_dp(rows: BigInt, cols: BigInt, mat: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var largest: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))
  var dp_array: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var r: BigInt = BigInt(0)
  while (r < rows) {
    var row_list: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var c: BigInt = BigInt(0)
    while (c < cols) {
      row_list = row_list :+ (BigInt((-BigInt(1)).toString.toDouble.toInt))
      c = c + BigInt(1)
    }
    dp_array = dp_array :+ (row_list)
    r = r + BigInt(1)
  }
  update_area_of_max_square_with_dp(BigInt(0), BigInt(0), rows, cols, mat, dp_array, largest)
  return largest.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
}

def largest_square_area_in_matrix_bottom_up(rows: BigInt, cols: BigInt, mat: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var dp_array: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var r: BigInt = BigInt(0)
  while (r <= rows) {
    var row_list: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var c: BigInt = BigInt(0)
    while (c <= cols) {
      row_list = row_list :+ (BigInt(0))
      c = c + BigInt(1)
    }
    dp_array = dp_array :+ (row_list)
    r = r + BigInt(1)
  }
  var largest: BigInt = BigInt(0)
  var row: BigInt = rows - BigInt(1)
  while (row >= BigInt(0)) {
    var col: BigInt = cols - BigInt(1)
    while (col >= BigInt(0)) {
      val right: BigInt = dp_array.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((col + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      val diagonal: BigInt = dp_array.lift(((row + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((col + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      val bottom: BigInt = dp_array.lift(((row + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0))
      if (mat.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
        val value: BigInt = BigInt(1) + ArrayBuffer(right, diagonal, bottom).min
        dp_array((row).toInt)((col).toInt) = value
        if (value > largest) {
          largest = value
        }
      } else {
        dp_array((row).toInt)((col).toInt) = BigInt(0)
      }
      col = col - BigInt(1)
    }
    row = row - BigInt(1)
  }
  return largest
}

def largest_square_area_in_matrix_bottom_up_space_optimization(rows: BigInt, cols: BigInt, mat: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  var current_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= cols) {
    current_row = current_row :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var next_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var j: BigInt = BigInt(0)
  while (j <= cols) {
    next_row = next_row :+ (BigInt(0))
    j = j + BigInt(1)
  }
  var largest: BigInt = BigInt(0)
  var row: BigInt = rows - BigInt(1)
  while (row >= BigInt(0)) {
    var col: BigInt = cols - BigInt(1)
    while (col >= BigInt(0)) {
      val right: BigInt = current_row.lift(((col + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      val diagonal: BigInt = next_row.lift(((col + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      val bottom: BigInt = next_row.lift((col.toInt).toInt).getOrElse(BigInt(0))
      if (mat.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((col.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
        val value: BigInt = BigInt(1) + ArrayBuffer(right, diagonal, bottom).min
        current_row((col).toInt) = value
        if (value > largest) {
          largest = value
        }
      } else {
        current_row((col).toInt) = BigInt(0)
      }
      col = col - BigInt(1)
    }
    next_row = current_row
    current_row = ArrayBuffer()
    var t: BigInt = BigInt(0)
    while (t <= cols) {
      current_row = current_row :+ (BigInt(0))
      t = t + BigInt(1)
    }
    row = row - BigInt(1)
  }
  return largest
}

val sample: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(largest_square_area_in_matrix_top_down(BigInt(2), BigInt(2), sample))
    println(largest_square_area_in_matrix_top_down_with_dp(BigInt(2), BigInt(2), sample))
    println(largest_square_area_in_matrix_bottom_up(BigInt(2), BigInt(2), sample))
    println(largest_square_area_in_matrix_bottom_up_space_optimization(BigInt(2), BigInt(2), sample))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
