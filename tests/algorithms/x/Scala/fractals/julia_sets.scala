// Generated by Mochi v0.10.59 on 2025-08-07 11:12:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Complex(var re: Double, var im: Double)

def complex_add(a: Complex, b: Complex): Complex = {
  return Complex(a.asInstanceOf[Complex].re + b.asInstanceOf[Complex].re, a.asInstanceOf[Complex].im + b.asInstanceOf[Complex].im)
}

def complex_mul(a: Complex, b: Complex): Complex = {
  val real: Double = a.asInstanceOf[Complex].re * b.asInstanceOf[Complex].re - a.asInstanceOf[Complex].im * b.asInstanceOf[Complex].im
  val imag: Double = a.asInstanceOf[Complex].re * b.asInstanceOf[Complex].im + a.asInstanceOf[Complex].im * b.asInstanceOf[Complex].re
  return Complex(real, imag)
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def complex_abs(a: Complex): Double = {
  return sqrtApprox(a.asInstanceOf[Complex].re * a.asInstanceOf[Complex].re + a.asInstanceOf[Complex].im * a.asInstanceOf[Complex].im)
}

def sin_taylor(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble
    val k2: Double = 2.0 * i.toString.toDouble + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def cos_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble - 1.0
    val k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def exp_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: Double = 1.0
  while (i < 20.0) {
    term = term * x / i
    sum = sum + term
    i = i + 1.0
  }
  return sum
}

def complex_exp(z: Complex): Complex = {
  val e: Double = exp_taylor(z.asInstanceOf[Complex].re)
  return Complex(e * cos_taylor(z.asInstanceOf[Complex].im), e * sin_taylor(z.asInstanceOf[Complex].im))
}

def eval_quadratic(c: Complex, z: Complex): Complex = {
  return complex_add(complex_mul(z, z), c)
}

def eval_exponential(c: Complex, z: Complex): Complex = {
  return complex_add(complex_exp(z), c)
}

def iterate_function(eval_function: (Complex, Complex) => Complex, c: Complex, nb_iterations: BigInt, z0: Complex, infinity: Double): Complex = {
  var z_n: Complex = z0
  var i: BigInt = 0
  while (i < nb_iterations) {
    z_n = eval_function(c, z_n)
    if (complex_abs(z_n) > infinity) {
      return z_n
    }
    i = i + 1
  }
  return z_n
}

def prepare_grid(window_size: Double, nb_pixels: BigInt): ArrayBuffer[ArrayBuffer[Complex]] = {
  var grid: ArrayBuffer[ArrayBuffer[Complex]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < nb_pixels) {
    var row: ArrayBuffer[Complex] = ArrayBuffer()
    var j: BigInt = 0
    while (j < nb_pixels) {
      val real: Double = -window_size + 2.0 * window_size * i.toString.toDouble / (nb_pixels - 1).toString.toDouble
      val imag: Double = -window_size + 2.0 * window_size * j.toString.toDouble / (nb_pixels - 1).toString.toDouble
      row = row :+ Complex(real, imag)
      j = j + 1
    }
    grid = grid :+ row
    i = i + 1
  }
  return grid
}

def julia_demo(): Any = {
  val grid: ArrayBuffer[ArrayBuffer[Complex]] = prepare_grid(1.0, 5)
  val c_poly: Complex = Complex(-0.4, 0.6)
  val c_exp: Complex = Complex(-2.0, 0.0)
  var poly_result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var exp_result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var y: BigInt = 0
  while (y < BigInt((grid).size)) {
    var row_poly: ArrayBuffer[BigInt] = ArrayBuffer()
    var row_exp: ArrayBuffer[BigInt] = ArrayBuffer()
    var x: BigInt = 0
    while (x < BigInt((grid((y.toInt).toInt)).size)) {
      val z0: Complex = grid((y.toInt).toInt)((x.toInt).toInt)
      val z_poly: Complex = iterate_function((eval_quadratic _).asInstanceOf[(Complex, Complex) => Complex], c_poly, 20, z0, 4.0)
      val z_exp: Complex = iterate_function((eval_exponential _).asInstanceOf[(Complex, Complex) => Complex], c_exp, 10, z0, 10000000000.0)
      row_poly = row_poly :+ BigInt((if (complex_abs(z_poly) < 2.0) 1 else 0))
      row_exp = row_exp :+ BigInt((if (complex_abs(z_exp) < 10000.0) 1 else 0))
      x = x + 1
    }
    poly_result = poly_result :+ row_poly
    exp_result = exp_result :+ row_exp
    y = y + 1
  }
  println(poly_result)
  println(exp_result)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    julia_demo()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
