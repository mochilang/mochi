// Generated by Mochi v0.10.59 on 2025-08-07 11:12:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class RGB(var r: BigInt, var g: BigInt, var b: BigInt)

def round_int(x: Double): BigInt = {
  return BigInt((x + 0.5).toInt)
}

def hsv_to_rgb(h: Double, s: Double, v: Double): RGB = {
  val i: BigInt = BigInt((h * 6.0).toInt)
  val f: Double = h * 6.0 - i.toString.toDouble
  val p: Double = v * (1.0 - s)
  val q: Double = v * (1.0 - f * s)
  val t: Double = v * (1.0 - (1.0 - f) * s)
  val mod: BigInt = i % 6
  var r: Double = 0.0
  var g: Double = 0.0
  var b: Double = 0.0
  if (mod == 0) {
    r = v
    g = t
    b = p
  } else {
    if (mod == 1) {
      r = q
      g = v
      b = p
    } else {
      if (mod == 2) {
        r = p
        g = v
        b = t
      } else {
        if (mod == 3) {
          r = p
          g = q
          b = v
        } else {
          if (mod == 4) {
            r = t
            g = p
            b = v
          } else {
            r = v
            g = p
            b = q
          }
        }
      }
    }
  }
  return RGB(round_int(r * 255.0), round_int(g * 255.0), round_int(b * 255.0))
}

def get_distance(x: Double, y: Double, max_step: BigInt): Double = {
  var a: Double = x
  var b: Double = y
  var step: BigInt = -1
  val _br0 = new Breaks
  _br0.breakable {
    while (step < max_step - 1) {
      step = step + 1
      val a_new: Double = a * a - b * b + x
      b = 2.0 * a * b + y
      a = a_new
      if (a * a + b * b > 4.0) {
        _br0.break()
      }
    }
  }
  return step.toString.toDouble / (max_step - 1).toString.toDouble
}

def get_black_and_white_rgb(distance: Double): RGB = {
  if (distance == 1.0) {
    return RGB(0, 0, 0)
  } else {
    return RGB(255, 255, 255)
  }
  return null
}

def get_color_coded_rgb(distance: Double): RGB = {
  if (distance == 1.0) {
    return RGB(0, 0, 0)
  } else {
    return hsv_to_rgb(distance, 1.0, 1.0)
  }
  return null
}

def get_image(image_width: BigInt, image_height: BigInt, figure_center_x: Double, figure_center_y: Double, figure_width: Double, max_step: BigInt, use_distance_color_coding: Boolean): ArrayBuffer[ArrayBuffer[RGB]] = {
  var img: ArrayBuffer[ArrayBuffer[RGB]] = ArrayBuffer()
  val figure_height: Double = figure_width / image_width.toString.toDouble * image_height.toString.toDouble
  var image_y: BigInt = 0
  while (image_y < image_height) {
    var row: ArrayBuffer[RGB] = ArrayBuffer()
    var image_x: BigInt = 0
    while (image_x < image_width) {
      val fx: Double = figure_center_x + (image_x.toString.toDouble / image_width.toString.toDouble - 0.5) * figure_width
      val fy: Double = figure_center_y + (image_y.toString.toDouble / image_height.toString.toDouble - 0.5) * figure_height
      val distance: Double = get_distance(fx, fy, max_step)
      var rgb: RGB = null
      if (use_distance_color_coding) {
        rgb = get_color_coded_rgb(distance)
      } else {
        rgb = get_black_and_white_rgb(distance)
      }
      row = row :+ rgb
      image_x = image_x + 1
    }
    img = img :+ row
    image_y = image_y + 1
  }
  return img
}

def rgb_to_string(c: RGB): String = {
  return "(" + String.valueOf(c.asInstanceOf[RGB].r) + ", " + String.valueOf(c.asInstanceOf[RGB].g) + ", " + String.valueOf(c.asInstanceOf[RGB].b) + ")"
}

val img1: ArrayBuffer[ArrayBuffer[RGB]] = get_image(10, 10, -0.6, 0.0, 3.2, 50, true)

val img2: ArrayBuffer[ArrayBuffer[RGB]] = get_image(10, 10, -0.6, 0.0, 3.2, 50, false)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(rgb_to_string(img1((0.toInt).toInt)((0.toInt).toInt)))
    println(rgb_to_string(img2((0.toInt).toInt)((0.toInt).toInt)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
