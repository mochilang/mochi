// Generated by Mochi v0.10.64 on 2025-08-13 16:21:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => d.toString
  case other => String.valueOf(other)
}

case class Point(var x: BigInt, var y: BigInt)

def get_mid(p1: Point, p2: Point): Point = {
  return Point((p1.asInstanceOf[Point].x + p2.asInstanceOf[Point].x) / BigInt(2), (p1.asInstanceOf[Point].y + p2.asInstanceOf[Point].y) / BigInt(2))
}

def point_to_string(p: Point): String = {
  return "(" + _str(p.asInstanceOf[Point].x) + "," + _str(p.asInstanceOf[Point].y) + ")"
}

def triangle(v1: Point, v2: Point, v3: Point, depth: BigInt): Any = {
  println(point_to_string(v1) + " " + point_to_string(v2) + " " + point_to_string(v3))
  if (depth == BigInt(0)) {
    return
  }
  triangle(v1, get_mid(v1, v2), get_mid(v1, v3), depth - BigInt(1))
  triangle(v2, get_mid(v1, v2), get_mid(v2, v3), depth - BigInt(1))
  triangle(v3, get_mid(v3, v2), get_mid(v1, v3), depth - BigInt(1))
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    triangle(Point(-BigInt(175), -BigInt(125)), Point(BigInt(0), BigInt(175)), Point(BigInt(175), -BigInt(125)), BigInt(2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
