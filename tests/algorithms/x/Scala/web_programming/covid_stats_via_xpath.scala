// Generated by Mochi v0.10.63 on 2025-08-11 15:45:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class CovidData(var cases: BigInt, var deaths: BigInt, var recovered: BigInt)

def parse_int(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  val _ct0 = new Breaks
  while (i < BigInt((s).size)) {
    _ct0.breakable {
      val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
      if (ch == ",") {
        i = i + BigInt(1)
        _ct0.break()
      }
      value = value * BigInt(10) + BigInt(ch.toString.head.toInt)
      i = i + BigInt(1)
    }
  }
  return value
}

def find(haystack: String, needle: String, start: BigInt): BigInt = {
  val nlen: BigInt = BigInt((needle).size)
  var i: BigInt = start
  val _br1 = new Breaks
  _br1.breakable {
    while (i <= BigInt((haystack).size) - nlen) {
      var j: BigInt = BigInt(0)
      var matched: Boolean = true
      val _br2 = new Breaks
      _br2.breakable {
        while (j < nlen) {
          if (haystack.slice((i + j).toInt, (i + j + BigInt(1)).toInt) != needle.slice((j).toInt, (j + BigInt(1)).toInt)) {
            matched = false
            _br2.break()
          }
          j = j + BigInt(1)
        }
      }
      if (matched) {
        return i
      }
      i = i + BigInt(1)
    }
  }
  return BigInt(-1)
}

def extract_numbers(html: String): ArrayBuffer[BigInt] = {
  var nums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var pos: BigInt = BigInt(0)
  val start_tag: String = "<span>"
  val end_tag: String = "</span>"
  val _br3 = new Breaks
  _br3.breakable {
    while (true) {
      val s: BigInt = find(html, start_tag, pos)
      if (s == BigInt(-1)) {
        _br3.break()
      }
      val content_start: BigInt = s + BigInt((start_tag).size)
      val e: BigInt = find(html, end_tag, content_start)
      if (e == BigInt(-1)) {
        _br3.break()
      }
      val num_str: String = html.slice((content_start).toInt, (e).toInt)
      nums = nums :+ (parse_int(num_str))
      pos = e + BigInt((end_tag).size)
    }
  }
  return nums
}

def covid_stats(html: String): CovidData = {
  val nums: ArrayBuffer[BigInt] = extract_numbers(html)
  return CovidData(nums.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(BigInt(0))), nums.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(BigInt(0))), nums.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(BigInt(0))))
}

def main(): Any = {
  val sample_html: String = "<div class=\"maincounter-number\"><span>123456</span></div>" + "<div class=\"maincounter-number\"><span>7890</span></div>" + "<div class=\"maincounter-number\"><span>101112</span></div>"
  val stats: CovidData = covid_stats(sample_html)
  println("Total COVID-19 cases in the world: " + _str(stats.asInstanceOf[CovidData].cases))
  println("Total deaths due to COVID-19 in the world: " + _str(stats.asInstanceOf[CovidData].deaths))
  println("Total COVID-19 patients recovered in the world: " + _str(stats.asInstanceOf[CovidData].recovered))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
