// Generated by Mochi v0.10.63 on 2025-08-11 15:45:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_digit(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((DIGITS).length)) {
    if (DIGITS.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def find_substring(haystack: String, needle: String): BigInt = {
  var i: BigInt = BigInt(0)
  val _br1 = new Breaks
  _br1.breakable {
    while (i <= BigInt((haystack).size) - BigInt((needle).size)) {
      var j: BigInt = BigInt(0)
      val _br2 = new Breaks
      _br2.breakable {
        while (j < BigInt((needle).size)) {
          if (haystack.slice(((i + j).toInt).toInt, ((i + j).toInt).toInt + 1) != needle.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
            _br2.break()
          }
          j = j + BigInt(1)
        }
      }
      if (j == BigInt((needle).size)) {
        return i
      }
      i = i + BigInt(1)
    }
  }
  return -BigInt(1)
}

def extract_citation(html: String): String = {
  val marker: String = "Cited by "
  val idx: BigInt = find_substring(html, marker)
  if (idx < BigInt(0)) {
    return ""
  }
  var pos: BigInt = idx + BigInt((marker).size)
  var result: String = ""
  val _br3 = new Breaks
  _br3.breakable {
    while (pos < BigInt((html).size)) {
      val ch: String = html.slice((pos.toInt).toInt, (pos.toInt).toInt + 1)
      if (!is_digit(ch)) {
        _br3.break()
      }
      result = result + ch
      pos = pos + BigInt(1)
    }
  }
  return result
}

def get_citation(base_url: String, params: scala.collection.mutable.Map[String,String]): String = {
  val html: String = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>"
  return extract_citation(html)
}

val DIGITS: String = "0123456789"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    if (`__name__` == "__main__") {
      val params: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("title" -> ("Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density"), "journal" -> ("Chem. Mater."), "volume" -> ("30"), "pages" -> ("3979-3990"), "year" -> ("2018"), "hl" -> ("en"))
      println(get_citation("https://scholar.google.com/scholar_lookup", params))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
