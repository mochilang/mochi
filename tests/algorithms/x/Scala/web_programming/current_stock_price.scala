// Generated by Mochi v0.10.63 on 2025-08-11 15:45:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def find(text: String, pattern: String, start: BigInt): BigInt = {
  var i: BigInt = start
  val limit: BigInt = BigInt((text).size) - BigInt((pattern).size)
  while (i <= limit) {
    if (text.slice((i).toInt, (i + BigInt((pattern).size)).toInt) == pattern) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def stock_price(symbol: String): String = {
  val pages: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("AAPL" -> ("<span data-testid=\"qsp-price\">228.43</span>"), "AMZN" -> ("<span data-testid=\"qsp-price\">201.85</span>"), "IBM" -> ("<span data-testid=\"qsp-price\">210.30</span>"), "GOOG" -> ("<span data-testid=\"qsp-price\">177.86</span>"), "MSFT" -> ("<span data-testid=\"qsp-price\">414.82</span>"), "ORCL" -> ("<span data-testid=\"qsp-price\">188.87</span>"))
  if ((pages.contains(symbol)).asInstanceOf[Boolean]) {
    val html: String = pages.getOrElse(symbol.toString, "").asInstanceOf[String]
    val marker: String = "<span data-testid=\"qsp-price\">"
    val start_idx: BigInt = find(html, marker, BigInt(0))
    if (start_idx != -BigInt(1)) {
      val price_start: BigInt = start_idx + BigInt((marker).size)
      val end_idx: BigInt = find(html, "</span>", price_start)
      if (end_idx != -BigInt(1)) {
        return html.slice((price_start).toInt, (end_idx).toInt)
      }
    }
  }
  return "No <fin-streamer> tag with the specified data-testid attribute found."
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    for (symbol <- ArrayBuffer("AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL")) {
      println("Current " + symbol + " stock price is " + stock_price(symbol))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
