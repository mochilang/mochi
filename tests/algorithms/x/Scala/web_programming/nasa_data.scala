// Generated by Mochi v0.10.73 on 2025-08-25 17:02:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

private def _fetch(url: String): Map[String,Any] = Map()
private def _fetch_ArchiveCollection(url: String): ArchiveCollection = {
  ArchiveCollection(ArrayBuffer(_fetch_ArchiveItem(url)))
}
private def _fetch_ArchiveItem(url: String): ArchiveItem = {
  ArchiveItem(ArrayBuffer(_fetch_ArchiveItemData(url)))
}
private def _fetch_ArchiveItemData(url: String): ArchiveItemData = {
  ArchiveItemData("")
}
private def _fetch_ApodData(url: String): ApodData = {
  ApodData("", "")
}
private def _fetch_ArchiveResult(url: String): ArchiveResult = {
  ArchiveResult(ArchiveCollection(ArrayBuffer(_fetch_ArchiveItem(url))))
}

case class ApodData(var url: String, var title: String)

case class ArchiveItemData(var description: String)

case class ArchiveItem(var data: ArrayBuffer[ArchiveItemData])

case class ArchiveCollection(var items: ArrayBuffer[ArchiveItem])

case class ArchiveResult(var collection: ArchiveCollection)

def get_apod_data(api_key: String): ApodData = {
  val data: ApodData = _fetch_ApodData("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY")
  return data
}

def save_apod(api_key: String): ApodData = {
  val apod: ApodData = get_apod_data(api_key)
  return apod
}

def get_archive_data(query: String): ArchiveResult = {
  val data: ArchiveResult = _fetch_ArchiveResult("https://images-api.nasa.gov/search?q=apollo%202011")
  return data
}

def main(): Any = {
  val apod: ApodData = save_apod("DEMO_KEY")
  println(_str(apod.asInstanceOf[ApodData].title))
  val archive: ArchiveResult = get_archive_data("apollo 2011")
  val items: ArrayBuffer[ArchiveItem] = archive.asInstanceOf[ArchiveResult].collection.asInstanceOf[ArchiveCollection].items
  val first_item: ArchiveItem = items.head
  val first_data: ArchiveItemData = first_item.asInstanceOf[ArchiveItem].data.head
  println(_str(first_data.asInstanceOf[ArchiveItemData].description))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
