// Generated by Mochi v0.10.63 on 2025-08-11 15:45:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def index_of_from(s: String, sub: String, start: BigInt): BigInt = {
  var i: BigInt = start
  val max: BigInt = BigInt((s).size) - BigInt((sub).size)
  while (i <= max) {
    if (s.slice((i).toInt, (i + BigInt((sub).size)).toInt) == sub) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def extract_links(html: String): ArrayBuffer[scala.collection.mutable.Map[String,String]] = {
  var res: ArrayBuffer[scala.collection.mutable.Map[String,String]] = ArrayBuffer[scala.collection.mutable.Map[String,String]]()
  var i: BigInt = BigInt(0)
  val _br1 = new Breaks
  _br1.breakable {
    while (true) {
      val tag_start: BigInt = index_of_from(html, "<a class=\"eZt8xd\"", i)
      if (tag_start == -BigInt(1)) {
        _br1.break()
      }
      var href_start: BigInt = index_of_from(html, "href=\"", tag_start)
      if (href_start == -BigInt(1)) {
        _br1.break()
      }
      href_start = href_start + BigInt(("href=\"").length)
      val href_end: BigInt = index_of_from(html, "\"", href_start)
      if (href_end == -BigInt(1)) {
        _br1.break()
      }
      val href: String = html.slice((href_start).toInt, (href_end).toInt)
      val text_start: BigInt = index_of_from(html, ">", href_end) + BigInt(1)
      val text_end: BigInt = index_of_from(html, "</a>", text_start)
      if (text_end == -BigInt(1)) {
        _br1.break()
      }
      val text: String = html.slice((text_start).toInt, (text_end).toInt)
      val link: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("href" -> (href), "text" -> (text))
      res = res :+ (link)
      i = text_end + BigInt(("</a>").length)
    }
  }
  return res
}

def main(): Any = {
  val html: String = "<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" + "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>" + "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>"
  val links: ArrayBuffer[scala.collection.mutable.Map[String,String]] = extract_links(html)
  println(_str(BigInt((links).size)))
  var i: BigInt = BigInt(0)
  while (i < BigInt((links).size) && i < BigInt(5)) {
    val link: scala.collection.mutable.Map[String,String] = links.lift((i.toInt).toInt).getOrElse(null)
    val href: String = link.getOrElse("href", "").asInstanceOf[String]
    val text: String = link.getOrElse("text", "").asInstanceOf[String]
    if (text == "Maps") {
      println(href)
    } else {
      println("https://google.com" + href)
    }
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
