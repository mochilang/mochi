// Generated by Mochi v0.10.59 on 2025-08-06 22:01:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def xor(a: BigInt, b: BigInt): BigInt = {
  var res: BigInt = 0
  var bit: BigInt = 1
  var x: BigInt = a
  var y: BigInt = b
  while (x > 0 || y > 0) {
    val abit: BigInt = x % 2
    val bbit: BigInt = y % 2
    if (abit != bbit) {
      res = res + bit
    }
    x = x / 2
    y = y / 2
    bit = bit * 2
  }
  return res
}

def ord(ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((ascii).length)) {
    if (ascii.slice((i).toInt, (i + 1).toInt) == ch) {
      return 32 + i
    }
    i = i + 1
  }
  return 0
}

def chr(n: BigInt): String = {
  if ((n >= 32 && n < 127).asInstanceOf[Boolean]) {
    return ascii.slice((n - 32).toInt, (n - 31).toInt)
  }
  return ""
}

def normalize_key(key: BigInt): BigInt = {
  var k: BigInt = key
  if (k == 0) {
    k = 1
  }
  k = k % 256
  if (k < 0) {
    k = k + 256
  }
  return k
}

def encrypt(content: String, key: BigInt): ArrayBuffer[String] = {
  val k: BigInt = normalize_key(key)
  var result: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((content).size)) {
    val c: BigInt = ord(content.slice((i).toInt, (i + 1).toInt))
    val e: BigInt = xor(c, k)
    result = result :+ chr(e)
    i = i + 1
  }
  return result
}

def encrypt_string(content: String, key: BigInt): String = {
  val chars: ArrayBuffer[String] = encrypt(content, key)
  var out: String = ""
  for (ch <- chars) {
    out = out + ch
  }
  return out
}

val ascii: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

val sample: String = "hallo welt"

val enc: String = encrypt_string(sample, 1)

val dec: String = encrypt_string(enc, 1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(encrypt(sample, 1)))
    println(enc)
    println(dec)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
