// Generated by Mochi v0.10.59 on 2025-08-06 21:49:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def mod_pow(base: BigInt, exp: BigInt, mod: BigInt): BigInt = {
  var result: BigInt = 1
  var b: BigInt = base % mod
  var e: BigInt = exp
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b % mod
    }
    b = b * b % mod
    e = e / 2
  }
  return result
}

def miller_rabin(n: BigInt, allow_probable: Boolean): Boolean = {
  if (n == 2) {
    return true
  }
  if ((n < 2 || n % 2 == 0).asInstanceOf[Boolean]) {
    return false
  }
  if (n > 5) {
    val last: BigInt = n % 10
    if ((!(((last == 1 || last == 3).asInstanceOf[Boolean] || last == 7).asInstanceOf[Boolean] || last == 9).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      return false
    }
  }
  val limit: BigInt = BigInt("3825123056546413051")
  if ((n > limit && (!allow_probable).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test."))
  }
  val bounds: ArrayBuffer[BigInt] = ArrayBuffer(2047, 1373653, 25326001, BigInt("3215031751"), BigInt("2152302898747"), BigInt("3474749660383"), BigInt("341550071728321"), limit)
  val primes: ArrayBuffer[BigInt] = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19)
  var i: BigInt = 0
  var plist_len: BigInt = BigInt((primes).size)
  while (i < BigInt((bounds).size)) {
    if (n < bounds((i.toInt).toInt)) {
      plist_len = i + 1
      i = BigInt((bounds).size)
    } else {
      i = i + 1
    }
  }
  var d: BigInt = n - 1
  var s: BigInt = 0
  while (d % 2 == 0) {
    d = d / 2
    s = s + 1
  }
  var j: BigInt = 0
  while (j < plist_len) {
    val prime: BigInt = primes((j.toInt).toInt)
    var x: BigInt = mod_pow(prime, d, n)
    var pr: Boolean = false
    if ((x == 1 || x == n - 1).asInstanceOf[Boolean]) {
      pr = true
    } else {
      var r: BigInt = 1
      while (r < s && (!pr).asInstanceOf[Boolean]) {
        x = x * x % n
        if (x == n - 1) {
          pr = true
        }
        r = r + 1
      }
    }
    if ((!pr).asInstanceOf[Boolean]) {
      return false
    }
    j = j + 1
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(miller_rabin(561, false)))
    println(String.valueOf(miller_rabin(563, false)))
    println(String.valueOf(miller_rabin(838201, false)))
    println(String.valueOf(miller_rabin(838207, false)))
    println(String.valueOf(miller_rabin(17316001, false)))
    println(String.valueOf(miller_rabin(17316017, false)))
    println(String.valueOf(miller_rabin(BigInt("3078386641"), false)))
    println(String.valueOf(miller_rabin(BigInt("3078386653"), false)))
    println(String.valueOf(miller_rabin(BigInt("1713045574801"), false)))
    println(String.valueOf(miller_rabin(BigInt("1713045574819"), false)))
    println(String.valueOf(miller_rabin(BigInt("2779799728307"), false)))
    println(String.valueOf(miller_rabin(BigInt("2779799728327"), false)))
    println(String.valueOf(miller_rabin(BigInt("113850023909441"), false)))
    println(String.valueOf(miller_rabin(BigInt("113850023909527"), false)))
    println(String.valueOf(miller_rabin(BigInt("1275041018848804351"), false)))
    println(String.valueOf(miller_rabin(BigInt("1275041018848804391"), false)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
