// Generated by Mochi v0.10.59 on 2025-08-06 21:46:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def ord(ch: String): BigInt = {
  val idx: BigInt = BigInt(ascii85_chars.indexOf(ch))
  if (idx >= 0) {
    return 33 + idx
  }
  return 0
}

def chr(n: BigInt): String = {
  if ((n >= 33 && n <= 117).asInstanceOf[Boolean]) {
    return ascii85_chars.slice((n - 33).toInt, (n - 32).toInt)
  }
  return "?"
}

def to_binary(n: BigInt, bits: BigInt): String = {
  var b: String = ""
  var `val`: BigInt = n
  while (`val` > 0) {
    b = String.valueOf(`val` % 2) + b
    `val` = `val` / 2
  }
  while (BigInt((b).size) < bits) {
    b = "0" + b
  }
  if (BigInt((b).size) == 0) {
    b = "0"
  }
  return b
}

def bin_to_int(bits: String): BigInt = {
  var n: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((bits).size)) {
    if (bits.slice((i.toInt).toInt, (i.toInt).toInt + 1) == "1") {
      n = n * 2 + 1
    } else {
      n = n * 2
    }
    i = i + 1
  }
  return n
}

def reverse(s: String): String = {
  var res: String = ""
  var i: BigInt = BigInt((s).size) - 1
  while (i >= 0) {
    res = res + s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i - 1
  }
  return res
}

def base10_to_85(d: BigInt): String = {
  if (d > 0) {
    return chr(d % 85 + 33) + base10_to_85(d / 85)
  }
  return ""
}

def base85_to_10(digits: String): BigInt = {
  var value: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((digits).size)) {
    value = value * 85 + (ord((digits.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) - 33)
    i = i + 1
  }
  return value
}

def ascii85_encode(data: String): String = {
  var binary_data: String = ""
  for (_ch <- data) {
    val ch: String = _ch.toString
    binary_data = binary_data + to_binary(ord(ch), 8)
  }
  var null_values: BigInt = (32 * (BigInt((binary_data).size) / 32 + 1) - BigInt((binary_data).size)) / 8
  var total_bits: BigInt = 32 * (BigInt((binary_data).size) / 32 + 1)
  while (BigInt((binary_data).size) < total_bits) {
    binary_data = binary_data + "0"
  }
  var result: String = ""
  var i: BigInt = 0
  while (i < BigInt((binary_data).size)) {
    val chunk_bits: String = binary_data.slice((i).toInt, (i + 32).toInt)
    val chunk_val: BigInt = bin_to_int(chunk_bits)
    val encoded: String = reverse(base10_to_85(chunk_val))
    result = result + encoded
    i = i + 32
  }
  if (null_values % 4 != 0) {
    result = result.slice((0).toInt, (BigInt((result).size) - null_values).toInt)
  }
  return result
}

def ascii85_decode(data: String): String = {
  var null_values: BigInt = 5 * (BigInt((data).size) / 5 + 1) - BigInt((data).size)
  var binary_data: String = data
  var i: BigInt = 0
  while (i < null_values) {
    binary_data = binary_data + "u"
    i = i + 1
  }
  var result: String = ""
  i = 0
  while (i < BigInt((binary_data).size)) {
    val chunk: String = binary_data.slice((i).toInt, (i + 5).toInt)
    val value: BigInt = base85_to_10(chunk)
    val bits: String = to_binary(value, 32)
    var j: BigInt = 0
    while (j < 32) {
      val byte_bits: String = bits.slice((j).toInt, (j + 8).toInt)
      val c: String = chr(bin_to_int(byte_bits))
      result = result + c
      j = j + 8
    }
    i = i + 5
  }
  var trim: BigInt = null_values
  if (null_values % 5 == 0) {
    trim = null_values - 1
  }
  return result.slice((0).toInt, (BigInt((result).size) - trim).toInt)
}

val ascii85_chars: String = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(ascii85_encode(""))
    println(ascii85_encode("12345"))
    println(ascii85_encode("base 85"))
    println(ascii85_decode(""))
    println(ascii85_decode("0etOA2#"))
    println(ascii85_decode("@UX=h+?24"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
