// Generated by Mochi v0.10.59 on 2025-08-06 21:27:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_decode_map(): scala.collection.mutable.Map[String,String] = {
  var m: scala.collection.mutable.Map[String,String] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,String]]
  for (k <- encode_map.keys) {
    m.update(encode_map.getOrElse(k.toString, "").asInstanceOf[String], k.toString)
  }
  return m
}

def split_spaces(s: String): ArrayBuffer[String] = {
  var parts: ArrayBuffer[String] = ArrayBuffer()
  var current: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if (ch == " ") {
      parts = parts :+ current
      current = ""
    } else {
      current = current + ch
    }
    i = i + 1
  }
  parts = parts :+ current
  return parts
}

def encode(word: String): String = {
  val w = word.toLowerCase()
  var encoded: String = ""
  var i: BigInt = 0
  while (i < BigInt((w).size)) {
    val ch: String = w.slice((i).toInt, (i + 1).toInt)
    if ((encode_map.contains(ch)).asInstanceOf[Boolean]) {
      encoded = encoded + encode_map.getOrElse(ch.toString, "").asInstanceOf[String]
    } else {
      throw new RuntimeException(String.valueOf("encode() accepts only letters of the alphabet and spaces"))
    }
    i = i + 1
  }
  return encoded
}

def decode(coded: String): String = {
  var i: BigInt = 0
  while (i < BigInt((coded).size)) {
    val ch: String = coded.slice((i).toInt, (i + 1).toInt)
    if (((ch != "A" && ch != "B").asInstanceOf[Boolean] && ch != " ").asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("decode() accepts only 'A', 'B' and spaces"))
    }
    i = i + 1
  }
  val words: ArrayBuffer[String] = split_spaces(coded)
  var decoded: String = ""
  var w: BigInt = 0
  while (w < BigInt((words).size)) {
    val word: String = words((w.toInt).toInt)
    var j: BigInt = 0
    while (j < BigInt((word).size)) {
      val segment: String = word.slice((j).toInt, (j + 5).toInt)
      decoded = decoded + decode_map.getOrElse(segment.toString, "").asInstanceOf[String]
      j = j + 5
    }
    if (w < BigInt((words).size) - 1) {
      decoded = decoded + " "
    }
    w = w + 1
  }
  return decoded
}

val encode_map: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("a" -> ("AAAAA"), "b" -> ("AAAAB"), "c" -> ("AAABA"), "d" -> ("AAABB"), "e" -> ("AABAA"), "f" -> ("AABAB"), "g" -> ("AABBA"), "h" -> ("AABBB"), "i" -> ("ABAAA"), "j" -> ("BBBAA"), "k" -> ("ABAAB"), "l" -> ("ABABA"), "m" -> ("ABABB"), "n" -> ("ABBAA"), "o" -> ("ABBAB"), "p" -> ("ABBBA"), "q" -> ("ABBBB"), "r" -> ("BAAAA"), "s" -> ("BAAAB"), "t" -> ("BAABA"), "u" -> ("BAABB"), "v" -> ("BBBAB"), "w" -> ("BABAA"), "x" -> ("BABAB"), "y" -> ("BABBA"), "z" -> ("BABBB"), " " -> (" "))

val decode_map: scala.collection.mutable.Map[String,String] = make_decode_map()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encode("hello"))
    println(encode("hello world"))
    println(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))
    println(decode("AABBBAABAAABABAABABAABBAB"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
