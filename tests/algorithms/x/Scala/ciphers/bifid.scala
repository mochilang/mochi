// Generated by Mochi v0.10.59 on 2025-08-06 21:46:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def to_lower_without_spaces(message: String, replace_j: Boolean): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).size)) {
    var ch: String = message.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val pos: BigInt = index_of(upper, ch)
    if (pos >= 0) {
      ch = lower.slice((pos.toInt).toInt, (pos.toInt).toInt + 1)
    }
    if (ch != " ") {
      if ((replace_j && ch == "j").asInstanceOf[Boolean]) {
        ch = "i"
      }
      res = res + ch
    }
    i = i + 1
  }
  return res
}

def letter_to_numbers(letter: String): ArrayBuffer[BigInt] = {
  var r: BigInt = 0
  while (r < BigInt((SQUARE).size)) {
    var c: BigInt = 0
    while (c < BigInt((SQUARE((r.toInt).toInt)).size)) {
      if (SQUARE((r.toInt).toInt)((c.toInt).toInt) == letter) {
        return (ArrayBuffer(r + 1, c + 1)).asInstanceOf[ArrayBuffer[BigInt]]
      }
      c = c + 1
    }
    r = r + 1
  }
  return (ArrayBuffer(0, 0)).asInstanceOf[ArrayBuffer[BigInt]]
}

def numbers_to_letter(row: BigInt, col: BigInt): String = {
  return SQUARE(((row - 1).toInt).toInt)(((col - 1).toInt).toInt)
}

def encode(message: String): String = {
  val clean: String = to_lower_without_spaces(message, true)
  val l: BigInt = BigInt((clean).size)
  var rows: ArrayBuffer[BigInt] = ArrayBuffer()
  var cols: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < l) {
    val nums: ArrayBuffer[BigInt] = letter_to_numbers((clean.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    rows = rows :+ nums((0.toInt).toInt)
    cols = cols :+ nums((1.toInt).toInt)
    i = i + 1
  }
  var seq: ArrayBuffer[BigInt] = ArrayBuffer()
  i = 0
  while (i < l) {
    seq = seq :+ rows((i.toInt).toInt)
    i = i + 1
  }
  i = 0
  while (i < l) {
    seq = seq :+ cols((i.toInt).toInt)
    i = i + 1
  }
  var encoded: String = ""
  i = 0
  while (i < l) {
    val r: BigInt = seq(((2 * i).toInt).toInt)
    val c: BigInt = seq(((2 * i + 1).toInt).toInt)
    encoded = encoded + numbers_to_letter(r, c)
    i = i + 1
  }
  return encoded
}

def decode(message: String): String = {
  val clean: String = to_lower_without_spaces(message, false)
  val l: BigInt = BigInt((clean).size)
  var first: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < l) {
    val nums: ArrayBuffer[BigInt] = letter_to_numbers((clean.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    first = first :+ nums((0.toInt).toInt)
    first = first :+ nums((1.toInt).toInt)
    i = i + 1
  }
  var top: ArrayBuffer[BigInt] = ArrayBuffer()
  var bottom: ArrayBuffer[BigInt] = ArrayBuffer()
  i = 0
  while (i < l) {
    top = top :+ first((i.toInt).toInt)
    bottom = bottom :+ first(((i + l).toInt).toInt)
    i = i + 1
  }
  var decoded: String = ""
  i = 0
  while (i < l) {
    val r: BigInt = top((i.toInt).toInt)
    val c: BigInt = bottom((i.toInt).toInt)
    decoded = decoded + numbers_to_letter(r, c)
    i = i + 1
  }
  return decoded
}

val SQUARE: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("a", "b", "c", "d", "e"), ArrayBuffer("f", "g", "h", "i", "k"), ArrayBuffer("l", "m", "n", "o", "p"), ArrayBuffer("q", "r", "s", "t", "u"), ArrayBuffer("v", "w", "x", "y", "z"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encode("testmessage"))
    println(encode("Test Message"))
    println(encode("test j"))
    println(encode("test i"))
    println(decode("qtltbdxrxlk"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
