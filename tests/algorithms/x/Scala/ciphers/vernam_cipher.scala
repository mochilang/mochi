// Generated by Mochi v0.10.59 on 2025-08-06 22:00:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val idx: BigInt = BigInt(upper.indexOf(ch))
  if (idx >= 0) {
    return 65 + idx
  }
  return 0
}

def chr(n: BigInt): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  if ((n >= 65 && n < 91).asInstanceOf[Boolean]) {
    return upper.slice((n - 65).toInt, (n - 64).toInt)
  }
  return "?"
}

def vernam_encrypt(plaintext: String, key: String): String = {
  var ciphertext: String = ""
  var i: BigInt = 0
  while (i < BigInt((plaintext).length)) {
    val p: BigInt = ord(plaintext.slice((i).toInt, (i + 1).toInt)) - 65
    val k: BigInt = ord(key.slice((i % BigInt((key).length)).toInt, (i % BigInt((key).length) + 1).toInt)) - 65
    var ct: BigInt = p + k
    while (ct > 25) {
      ct = ct - 26
    }
    ciphertext = ciphertext + chr(ct + 65)
    i = i + 1
  }
  return ciphertext
}

def vernam_decrypt(ciphertext: String, key: String): String = {
  var decrypted: String = ""
  var i: BigInt = 0
  while (i < BigInt((ciphertext).size)) {
    val c: BigInt = ord(ciphertext.slice((i).toInt, (i + 1).toInt))
    val k: BigInt = ord(key.slice((i % BigInt((key).length)).toInt, (i % BigInt((key).length) + 1).toInt))
    var `val`: BigInt = c - k
    while (`val` < 0) {
      `val` = `val` + 26
    }
    decrypted = decrypted + chr(`val` + 65)
    i = i + 1
  }
  return decrypted
}

val plaintext: String = "HELLO"

val key: String = "KEY"

val encrypted: String = vernam_encrypt(plaintext, key)

val decrypted: String = vernam_decrypt(encrypted, key)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Plaintext: " + plaintext)
    println("Encrypted: " + encrypted)
    println("Decrypted: " + decrypted)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
