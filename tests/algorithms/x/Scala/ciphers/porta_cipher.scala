// Generated by Mochi v0.10.59 on 2025-08-06 21:53:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_upper(s: String): String = {
  var res: String = ""
  var i: BigInt = 0
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((s).size)) {
      val ch: String = s.slice((i).toInt, (i + 1).toInt)
      var j: BigInt = 0
      var replaced: Boolean = false
      val _br1 = new Breaks
      _br1.breakable {
        while (j < BigInt((LOWER).length)) {
          if (LOWER.slice((j).toInt, (j + 1).toInt) == ch) {
            res = res + UPPER.slice((j).toInt, (j + 1).toInt)
            replaced = true
            _br1.break()
          }
          j = j + 1
        }
      }
      if (!replaced) {
        res = res + ch
      }
      i = i + 1
    }
  }
  return res
}

def char_index(c: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((UPPER).length)) {
    if (UPPER.slice((i).toInt, (i + 1).toInt) == c) {
      return i
    }
    i = i + 1
  }
  return -1
}

def rotate_right(s: String, k: BigInt): String = {
  val n: BigInt = BigInt((s).size)
  val shift: BigInt = k % n
  return s.slice((n - shift).toInt, (n).toInt) + s.slice((0).toInt, (n - shift).toInt)
}

def table_for(c: String): ArrayBuffer[String] = {
  val idx: BigInt = char_index(c)
  val shift: BigInt = idx / 2
  val row1: String = rotate_right(BASE_BOTTOM, shift)
  val pair: ArrayBuffer[String] = ArrayBuffer(BASE_TOP, row1)
  return pair
}

def generate_table(key: String): ArrayBuffer[ArrayBuffer[String]] = {
  val up: String = to_upper(key)
  var i: BigInt = 0
  var result: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
  while (i < BigInt((up).size)) {
    val ch: String = up.slice((i).toInt, (i + 1).toInt)
    val pair: ArrayBuffer[String] = table_for(ch)
    result = result :+ pair
    i = i + 1
  }
  return result
}

def str_index(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return 0 - 1
}

def get_position(table: ArrayBuffer[String], ch: String): ArrayBuffer[BigInt] = {
  var row: BigInt = 0
  if (str_index(table((0.toInt).toInt), ch) == 0 - 1) {
    row = 1
  }
  val col: BigInt = str_index(table((row.toInt).toInt), ch)
  return ArrayBuffer(row, col)
}

def get_opponent(table: ArrayBuffer[String], ch: String): String = {
  val pos: ArrayBuffer[BigInt] = get_position(table, ch)
  val row: BigInt = pos((0.toInt).toInt)
  val col: BigInt = pos((1.toInt).toInt)
  if (col == 0 - 1) {
    return ch
  }
  if (row == 1) {
    return table((0.toInt).toInt).slice((col).toInt, (col + 1).toInt)
  }
  return table((1.toInt).toInt).slice((col).toInt, (col + 1).toInt)
}

def encrypt(key: String, words: String): String = {
  val table: ArrayBuffer[ArrayBuffer[String]] = generate_table(key)
  val up_words: String = to_upper(words)
  var cipher: String = ""
  var count: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((up_words).size)) {
    val ch: String = up_words.slice((i).toInt, (i + 1).toInt)
    cipher = cipher + get_opponent(table((count.toInt).toInt), ch)
    count = (count + 1) % BigInt((table).size)
    i = i + 1
  }
  return cipher
}

def decrypt(key: String, words: String): String = {
  val res: String = encrypt(key, words)
  return res
}

def main(): Any = {
  println(encrypt("marvin", "jessica"))
  println(decrypt("marvin", "QRACRWU"))
}

val UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val BASE_TOP: String = "ABCDEFGHIJKLM"

val BASE_BOTTOM: String = "NOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
