// Generated by Mochi v0.10.59 on 2025-08-06 21:46:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(ch: String): BigInt = {
  for (i <- (0).toInt until (BigInt((ALPHABET).length)).toInt) {
    if (ALPHABET.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(i.toString.toDouble.toInt)
    }
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def generate_key(message: String, key: String): String = {
  var key_new: String = key
  var i: BigInt = 0
  while (BigInt((key_new).length) < BigInt((message).length)) {
    key_new = key_new + key.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i + 1
    if (i == BigInt((key).length)) {
      i = 0
    }
  }
  return key_new
}

def cipher_text(message: String, key_new: String): String = {
  var res: String = ""
  var i: BigInt = 0
  for (idx <- (0).toInt until (BigInt((message).length)).toInt) {
    val ch = message.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
    if (ch == " ") {
      res = res + " "
    } else {
      val x: BigInt = (index_of(ch) - index_of((key_new.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) + 26) % 26
      i = i + 1
      res = res + ALPHABET.slice((x.toInt).toInt, (x.toInt).toInt + 1)
    }
  }
  return res
}

def original_text(cipher: String, key_new: String): String = {
  var res: String = ""
  var i: BigInt = 0
  for (idx <- (0).toInt until (BigInt((cipher).size)).toInt) {
    val ch = cipher.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
    if (ch == " ") {
      res = res + " "
    } else {
      val x: BigInt = (index_of(ch) + index_of((key_new.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) + 26) % 26
      i = i + 1
      res = res + ALPHABET.slice((x.toInt).toInt, (x.toInt).toInt + 1)
    }
  }
  return res
}

val ALPHABET: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val message: String = "THE GERMAN ATTACK"

val key: String = "SECRET"

val key_new: String = generate_key(message, key)

val encrypted: String = cipher_text(message, key_new)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Encrypted Text = " + encrypted)
    println("Original Text = " + original_text(encrypted, key_new))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
