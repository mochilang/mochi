// Generated by Mochi v0.10.59 on 2025-08-06 22:00:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand(n: BigInt): BigInt = {
  seed = (seed * 1664525 + 1013904223) % 2147483647
  return seed % n
}

def get_random_key(): String = {
  var chars: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((LETTERS).length)) {
    chars = chars :+ (LETTERS.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString
    i = i + 1
  }
  var j: BigInt = BigInt((chars).size) - 1
  while (j > 0) {
    val k: BigInt = rand(j + 1)
    val tmp: String = chars((j.toInt).toInt)
    chars((j).toInt) = chars((k.toInt).toInt)
    chars((k).toInt) = tmp
    j = j - 1
  }
  var res: String = ""
  i = 0
  while (i < BigInt((chars).size)) {
    res = res + chars((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def check_valid_key(key: String): Boolean = {
  if (BigInt((key).length) != BigInt((LETTERS).length)) {
    return false
  }
  var used: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  var i: BigInt = 0
  while (i < BigInt((key).length)) {
    val ch = key.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (used.getOrElse(ch.toString, false).asInstanceOf[Boolean]) {
      return false
    }
    used.update(ch, true)
    i = i + 1
  }
  i = 0
  while (i < BigInt((LETTERS).length)) {
    val ch = LETTERS.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (!used.getOrElse(ch.toString, false).asInstanceOf[Boolean]) {
      return false
    }
    i = i + 1
  }
  return true
}

def index_in(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def char_to_upper(c: String): String = {
  var i: BigInt = 0
  while (i < BigInt((LOWERCASE).length)) {
    if (c == LOWERCASE.slice((i.toInt).toInt, (i.toInt).toInt + 1)) {
      return (LETTERS.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString
    }
    i = i + 1
  }
  return c
}

def char_to_lower(c: String): String = {
  var i: BigInt = 0
  while (i < BigInt((LETTERS).length)) {
    if (c == LETTERS.slice((i.toInt).toInt, (i.toInt).toInt + 1)) {
      return (LOWERCASE.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString
    }
    i = i + 1
  }
  return c
}

def is_upper(c: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((LETTERS).length)) {
    if (c == LETTERS.slice((i.toInt).toInt, (i.toInt).toInt + 1)) {
      return true
    }
    i = i + 1
  }
  return false
}

def translate_message(key: String, message: String, mode: String): String = {
  var chars_a: String = LETTERS
  var chars_b: String = key
  if (mode == "decrypt") {
    val tmp: String = chars_a
    chars_a = chars_b
    chars_b = tmp
  }
  var translated: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).size)) {
    val symbol = message.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val upper_symbol: String = char_to_upper(symbol)
    val idx: BigInt = index_in(chars_a, upper_symbol)
    if (idx >= 0) {
      val mapped = chars_b.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
      if (is_upper(symbol)) {
        translated = translated + mapped
      } else {
        translated = translated + char_to_lower(mapped)
      }
    } else {
      translated = translated + symbol
    }
    i = i + 1
  }
  return translated
}

def encrypt_message(key: String, message: String): String = {
  val res: String = translate_message(key, message, "encrypt")
  return res
}

def decrypt_message(key: String, message: String): String = {
  val res: String = translate_message(key, message, "decrypt")
  return res
}

val LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val LOWERCASE: String = "abcdefghijklmnopqrstuvwxyz"

var seed: BigInt = 1

val key: String = "LFWOAYUISVKMNXPBDCRJTQEGHZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encrypt_message(key, "Harshil Darji"))
    println(decrypt_message(key, "Ilcrism Olcvs"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
