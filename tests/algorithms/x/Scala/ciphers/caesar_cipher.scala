// Generated by Mochi v0.10.59 on 2025-08-06 21:47:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def encrypt(input_string: String, key: BigInt, alphabet: String): String = {
  var result: String = ""
  var i: BigInt = 0
  val n: BigInt = BigInt((alphabet).size)
  while (i < BigInt((input_string).size)) {
    val ch: String = input_string.slice((i).toInt, (i + 1).toInt)
    val idx: BigInt = index_of(alphabet, ch)
    if (idx < 0) {
      result = result + ch
    } else {
      var new_key: BigInt = (idx + key) % n
      if (new_key < 0) {
        new_key = new_key + n
      }
      result = result + alphabet.slice((new_key).toInt, (new_key + 1).toInt)
    }
    i = i + 1
  }
  return result
}

def decrypt(input_string: String, key: BigInt, alphabet: String): String = {
  var result: String = ""
  var i: BigInt = 0
  val n: BigInt = BigInt((alphabet).size)
  while (i < BigInt((input_string).size)) {
    val ch: String = input_string.slice((i).toInt, (i + 1).toInt)
    val idx: BigInt = index_of(alphabet, ch)
    if (idx < 0) {
      result = result + ch
    } else {
      var new_key: BigInt = (idx - key) % n
      if (new_key < 0) {
        new_key = new_key + n
      }
      result = result + alphabet.slice((new_key).toInt, (new_key + 1).toInt)
    }
    i = i + 1
  }
  return result
}

def brute_force(input_string: String, alphabet: String): ArrayBuffer[String] = {
  var results: ArrayBuffer[String] = ArrayBuffer()
  var key: BigInt = 1
  val n: BigInt = BigInt((alphabet).size)
  while (key <= n) {
    val message: String = decrypt(input_string, key, alphabet)
    results = results :+ message
    key = key + 1
  }
  return results
}

def main(): Any = {
  val alpha: String = default_alphabet
  val enc: String = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha)
  println(enc)
  val dec: String = decrypt(enc, 8, alpha)
  println(dec)
  val brute: ArrayBuffer[String] = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha)
  println(brute((19.toInt).toInt))
}

val default_alphabet: String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
