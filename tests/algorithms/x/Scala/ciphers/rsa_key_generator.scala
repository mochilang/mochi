// Generated by Mochi v0.10.59 on 2025-08-06 21:54:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Keys(var public_key: ArrayBuffer[BigInt], var private_key: ArrayBuffer[BigInt])

def pow2(exp: BigInt): BigInt = {
  var res: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    res = res * 2
    i = i + 1
  }
  return res
}

def next_seed(x: BigInt): BigInt = {
  return (x * 1103515245 + 12345) % BigInt("2147483648")
}

def rand_range(min: BigInt, max: BigInt): BigInt = {
  seed = next_seed(seed)
  return min + seed % (max - min)
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  while (y != 0) {
    val temp: BigInt = x % y
    x = y
    y = temp
  }
  return x
}

def mod_inverse(e: BigInt, phi: BigInt): BigInt = {
  var t: BigInt = 0
  var newt: BigInt = 1
  var r: BigInt = phi
  var newr: BigInt = e
  while (newr != 0) {
    val quotient: BigInt = r / newr
    val tmp: BigInt = newt
    newt = t - quotient * newt
    t = tmp
    val tmp_r: BigInt = newr
    newr = r - quotient * newr
    r = tmp_r
  }
  if (r > 1) {
    return 0
  }
  if (t < 0) {
    t = t + phi
  }
  return t
}

def is_prime(n: BigInt): Boolean = {
  if (n < 2) {
    return false
  }
  var i: BigInt = 2
  while (i * i <= n) {
    if (n % i == 0) {
      return false
    }
    i = i + 1
  }
  return true
}

def generate_prime(bits: BigInt): BigInt = {
  val min: BigInt = pow2(bits - 1)
  val max: BigInt = pow2(bits)
  var p: BigInt = rand_range(min, max)
  if (p % 2 == 0) {
    p = p + 1
  }
  while (!is_prime(p)) {
    p = p + 2
    if (p >= max) {
      p = min + 1
    }
  }
  return p
}

def generate_key(bits: BigInt): Keys = {
  val p: BigInt = generate_prime(bits)
  val q: BigInt = generate_prime(bits)
  val n: BigInt = p * q
  val phi: BigInt = (p - 1) * (q - 1)
  var e: BigInt = rand_range(2, phi)
  while (gcd(e, phi) != 1) {
    e = e + 1
    if (e >= phi) {
      e = 2
    }
  }
  val d: BigInt = mod_inverse(e, phi)
  return Keys(ArrayBuffer(n, e), ArrayBuffer(n, d))
}

var seed: BigInt = 1

val keys: Keys = generate_key(8)

val pub: ArrayBuffer[BigInt] = keys.public_key

val priv: ArrayBuffer[BigInt] = keys.private_key

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Public key: (" + String.valueOf(pub((0.toInt).toInt)) + ", " + String.valueOf(pub((1.toInt).toInt)) + ")")
    println("Private key: (" + String.valueOf(priv((0.toInt).toInt)) + ", " + String.valueOf(priv((1.toInt).toInt)) + ")")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
