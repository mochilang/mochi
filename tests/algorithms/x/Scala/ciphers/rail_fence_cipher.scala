// Generated by Mochi v0.10.59 on 2025-08-06 21:54:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def encrypt(input_string: String, key: BigInt): String = {
  if (key <= 0) {
    throw new RuntimeException(String.valueOf("Height of grid can't be 0 or negative"))
  }
  if ((key == 1 || BigInt((input_string).size) <= key).asInstanceOf[Boolean]) {
    return input_string
  }
  val lowest: BigInt = key - 1
  var temp_grid: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < key) {
    temp_grid = temp_grid :+ (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
    i = i + 1
  }
  var position: BigInt = 0
  while (position < BigInt((input_string).size)) {
    var num: BigInt = position % (lowest * 2)
    val alt: BigInt = lowest * 2 - num
    if (num > alt) {
      num = alt
    }
    var row: ArrayBuffer[String] = temp_grid((num.toInt).toInt)
    row = row :+ input_string.slice((position).toInt, (position + 1).toInt)
    temp_grid((num).toInt) = row
    position = position + 1
  }
  var output: String = ""
  i = 0
  while (i < key) {
    var row: ArrayBuffer[String] = temp_grid((i.toInt).toInt)
    var j: BigInt = 0
    while (j < BigInt((row).size)) {
      output = output + row((j.toInt).toInt)
      j = j + 1
    }
    i = i + 1
  }
  return output
}

def decrypt(input_string: String, key: BigInt): String = {
  if (key <= 0) {
    throw new RuntimeException(String.valueOf("Height of grid can't be 0 or negative"))
  }
  if (key == 1) {
    return input_string
  }
  val lowest: BigInt = key - 1
  var counts: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < key) {
    counts = counts :+ BigInt(0)
    i = i + 1
  }
  var pos: BigInt = 0
  while (pos < BigInt((input_string).size)) {
    var num: BigInt = pos % (lowest * 2)
    val alt: BigInt = lowest * 2 - num
    if (num > alt) {
      num = alt
    }
    counts((num).toInt) = counts((num.toInt).toInt) + 1
    pos = pos + 1
  }
  var grid: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
  var counter: BigInt = 0
  i = 0
  while (i < key) {
    val length: BigInt = counts((i.toInt).toInt)
    val slice: String = input_string.slice((counter).toInt, (counter + length).toInt)
    var row: ArrayBuffer[String] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((slice).size)) {
      row = row :+ (slice.slice((j.toInt).toInt, (j.toInt).toInt + 1)).toString
      j = j + 1
    }
    grid = grid :+ row
    counter = counter + length
    i = i + 1
  }
  var indices: ArrayBuffer[BigInt] = ArrayBuffer()
  i = 0
  while (i < key) {
    indices = indices :+ BigInt(0)
    i = i + 1
  }
  var output: String = ""
  pos = 0
  while (pos < BigInt((input_string).size)) {
    var num: BigInt = pos % (lowest * 2)
    val alt: BigInt = lowest * 2 - num
    if (num > alt) {
      num = alt
    }
    output = output + grid((num.toInt).toInt)((indices((num.toInt).toInt).toInt).toInt)
    indices((num).toInt) = indices((num.toInt).toInt) + 1
    pos = pos + 1
  }
  return output
}

def bruteforce(input_string: String): scala.collection.mutable.Map[BigInt,String] = {
  var results: scala.collection.mutable.Map[BigInt,String] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,String]]
  var key_guess: BigInt = 1
  while (key_guess < BigInt((input_string).size)) {
    results.update(key_guess, decrypt(input_string, key_guess))
    key_guess = key_guess + 1
  }
  return results
}

val bf: scala.collection.mutable.Map[BigInt,String] = bruteforce("HWe olordll")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encrypt("Hello World", 4))
    println(decrypt("HWe olordll", 4))
    println(bf.getOrElse(4, "").asInstanceOf[String])
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
