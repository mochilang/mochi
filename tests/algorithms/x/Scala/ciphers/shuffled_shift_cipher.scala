// Generated by Mochi v0.10.59 on 2025-08-06 21:56:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Cipher(var passcode: ArrayBuffer[String], var key_list: ArrayBuffer[String], var shift_key: BigInt)

def ord(ch: String): BigInt = {
  val digits: String = "0123456789"
  var i: BigInt = 0
  while (i < BigInt((digits).size)) {
    if (digits.slice((i).toInt, (i + 1).toInt) == ch) {
      return 48 + i
    }
    i = i + 1
  }
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  i = 0
  while (i < BigInt((upper).size)) {
    if (upper.slice((i).toInt, (i + 1).toInt) == ch) {
      return 65 + i
    }
    i = i + 1
  }
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  i = 0
  while (i < BigInt((lower).size)) {
    if (lower.slice((i).toInt, (i + 1).toInt) == ch) {
      return 97 + i
    }
    i = i + 1
  }
  return 0
}

def neg_pos(iterlist: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var i: BigInt = 1
  while (i < BigInt((iterlist).size)) {
    iterlist((i).toInt) = -iterlist((i.toInt).toInt)
    i = i + 2
  }
  return iterlist
}

def passcode_creator(): ArrayBuffer[String] = {
  val choices: String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
  var seed: BigInt = _now()
  val length: BigInt = 10 + seed % 11
  var password: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < length) {
    seed = (seed * 1103515245 + 12345) % 2147483647
    val idx: BigInt = seed % BigInt((choices).size)
    password = password :+ choices.slice((idx).toInt, (idx + 1).toInt)
    i = i + 1
  }
  return password
}

def unique_sorted(chars: ArrayBuffer[String]): ArrayBuffer[String] = {
  var uniq: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((chars).size)) {
    val ch: String = chars((i.toInt).toInt)
    if (!(uniq.contains(ch)).asInstanceOf[Boolean]) {
      uniq = uniq :+ ch
    }
    i = i + 1
  }
  var j: BigInt = 0
  while (j < BigInt((uniq).size)) {
    var k: BigInt = j + 1
    var min_idx: BigInt = j
    while (k < BigInt((uniq).size)) {
      if (uniq((k.toInt).toInt) < uniq((min_idx.toInt).toInt)) {
        min_idx = k
      }
      k = k + 1
    }
    if (min_idx != j) {
      val tmp: String = uniq((j.toInt).toInt)
      uniq((j).toInt) = uniq((min_idx.toInt).toInt)
      uniq((min_idx).toInt) = tmp
    }
    j = j + 1
  }
  return uniq
}

def make_key_list(passcode: ArrayBuffer[String]): ArrayBuffer[String] = {
  val key_list_options: String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n"
  val breakpoints: ArrayBuffer[String] = unique_sorted(passcode)
  var keys_l: ArrayBuffer[String] = ArrayBuffer()
  var temp_list: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((key_list_options).size)) {
    val ch: String = key_list_options.slice((i).toInt, (i + 1).toInt)
    temp_list = temp_list :+ ch
    if (((breakpoints.contains(ch)).asInstanceOf[Boolean] || i == BigInt((key_list_options).size) - 1).asInstanceOf[Boolean]) {
      var k: BigInt = BigInt((temp_list).size) - 1
      while (k >= 0) {
        keys_l = keys_l :+ temp_list((k.toInt).toInt)
        k = k - 1
      }
      temp_list = ArrayBuffer()
    }
    i = i + 1
  }
  return keys_l
}

def make_shift_key(passcode: ArrayBuffer[String]): BigInt = {
  var codes: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((passcode).size)) {
    codes = codes :+ ord(passcode((i.toInt).toInt))
    i = i + 1
  }
  codes = neg_pos(codes)
  var total: BigInt = 0
  i = 0
  while (i < BigInt((codes).size)) {
    total = total + codes((i.toInt).toInt)
    i = i + 1
  }
  if (total > 0) {
    return total
  }
  return BigInt((passcode).size)
}

def new_cipher(passcode_str: String): Cipher = {
  var passcode: ArrayBuffer[String] = ArrayBuffer()
  if (BigInt((passcode_str).size) == 0) {
    passcode = passcode_creator()
  } else {
    var i: BigInt = 0
    while (i < BigInt((passcode_str).size)) {
      passcode = passcode :+ passcode_str.slice((i).toInt, (i + 1).toInt)
      i = i + 1
    }
  }
  val key_list: ArrayBuffer[String] = make_key_list(passcode)
  val shift_key: BigInt = make_shift_key(passcode)
  return Cipher(passcode, key_list, shift_key)
}

def index_of(lst: ArrayBuffer[String], ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((lst).size)) {
    if (lst((i.toInt).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def encrypt(c: Cipher, plaintext: String): String = {
  var encoded: String = ""
  var i: BigInt = 0
  val n: BigInt = BigInt((c.asInstanceOf[Cipher].key_list).size)
  while (i < BigInt((plaintext).size)) {
    val ch: String = plaintext.slice((i).toInt, (i + 1).toInt)
    val position: BigInt = index_of(c.asInstanceOf[Cipher].key_list, ch)
    val new_pos: BigInt = (position + c.asInstanceOf[Cipher].shift_key) % n
    encoded = encoded + c.asInstanceOf[Cipher].key_list((new_pos.toInt).toInt)
    i = i + 1
  }
  return encoded
}

def decrypt(c: Cipher, encoded_message: String): String = {
  var decoded: String = ""
  var i: BigInt = 0
  val n: BigInt = BigInt((c.asInstanceOf[Cipher].key_list).size)
  while (i < BigInt((encoded_message).size)) {
    val ch: String = encoded_message.slice((i).toInt, (i + 1).toInt)
    val position: BigInt = index_of(c.asInstanceOf[Cipher].key_list, ch)
    var new_pos: BigInt = (position - c.asInstanceOf[Cipher].shift_key) % n
    if (new_pos < 0) {
      new_pos = new_pos + n
    }
    decoded = decoded + c.asInstanceOf[Cipher].key_list((new_pos.toInt).toInt)
    i = i + 1
  }
  return decoded
}

def test_end_to_end(): String = {
  val msg: String = "Hello, this is a modified Caesar cipher"
  val cip: Cipher = new_cipher("")
  return decrypt(cip, encrypt(cip, msg))
}

val ssc: Cipher = new_cipher("4PYIXyqeQZr44")

val encoded: String = encrypt(ssc, "Hello, this is a modified Caesar cipher")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encoded)
    println(decrypt(ssc, encoded))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
