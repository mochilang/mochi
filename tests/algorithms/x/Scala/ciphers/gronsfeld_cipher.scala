// Generated by Mochi v0.10.59 on 2025-08-06 21:49:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return NEG_ONE
}

def to_uppercase(s: String): String = {
  var result: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    val idx: BigInt = index_of(ASCII_LOWERCASE, ch)
    if (idx == NEG_ONE) {
      result = result + ch
    } else {
      result = result + ASCII_UPPERCASE.slice((idx).toInt, (idx + 1).toInt)
    }
    i = i + 1
  }
  return result
}

def gronsfeld(text: String, key: String): String = {
  val ascii_len: BigInt = BigInt((ASCII_UPPERCASE).length)
  val key_len: BigInt = BigInt((key).size)
  if (key_len == 0) {
    throw new RuntimeException(String.valueOf("integer modulo by zero"))
  }
  val upper_text: String = to_uppercase(text)
  var encrypted: String = ""
  var i: BigInt = 0
  while (i < BigInt((upper_text).size)) {
    val ch: String = upper_text.slice((i).toInt, (i + 1).toInt)
    val idx: BigInt = index_of(ASCII_UPPERCASE, ch)
    if (idx == NEG_ONE) {
      encrypted = encrypted + ch
    } else {
      val key_idx: BigInt = i % key_len
      val shift: BigInt = key.slice((key_idx).toInt, (key_idx + 1).toInt).toInt
      val new_position: BigInt = (idx + shift) % ascii_len
      encrypted = encrypted + ASCII_UPPERCASE.slice((new_position).toInt, (new_position + 1).toInt)
    }
    i = i + 1
  }
  return encrypted
}

val ASCII_UPPERCASE: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val ASCII_LOWERCASE: String = "abcdefghijklmnopqrstuvwxyz"

val NEG_ONE: BigInt = 0 - 1

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(gronsfeld("hello", "412"))
    println(gronsfeld("hello", "123"))
    println(gronsfeld("", "123"))
    println(gronsfeld("yes, \u00a5\u20ac$ - _!@#%?", "0"))
    println(gronsfeld("yes, \u00a5\u20ac$ - _!@#%?", "01"))
    println(gronsfeld("yes, \u00a5\u20ac$ - _!@#%?", "012"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
