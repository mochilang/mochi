// Generated by Mochi v0.10.59 on 2025-08-06 22:00:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def encrypt_message(key: BigInt, message: String): String = {
  var result: String = ""
  var col: BigInt = 0
  while (col < key) {
    var pointer: BigInt = col
    while (pointer < BigInt((message).length)) {
      result = result + message.slice((pointer.toInt).toInt, (pointer.toInt).toInt + 1)
      pointer = pointer + key
    }
    col = col + 1
  }
  return result
}

def decrypt_message(key: BigInt, message: String): String = {
  val msg_len: BigInt = BigInt((message).length)
  var num_cols: BigInt = msg_len / key
  if (msg_len % key != 0) {
    num_cols = num_cols + 1
  }
  val num_rows: BigInt = key
  val num_shaded_boxes: BigInt = num_cols * num_rows - msg_len
  var plain: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < num_cols) {
    plain = plain :+ ""
    i = i + 1
  }
  var col: BigInt = 0
  var row: BigInt = 0
  var idx: BigInt = 0
  while (idx < msg_len) {
    val ch = message.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
    plain((col).toInt) = plain((col.toInt).toInt) + ch
    col = col + 1
    if ((col == num_cols || (col == num_cols - 1 && row >= num_rows - num_shaded_boxes).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      col = 0
      row = row + 1
    }
    idx = idx + 1
  }
  var result: String = ""
  i = 0
  while (i < num_cols) {
    result = result + plain((i.toInt).toInt)
    i = i + 1
  }
  return result
}

val key: BigInt = 6

val message: String = "Harshil Darji"

val encrypted: String = encrypt_message(key, message)

val decrypted: String = decrypt_message(key, encrypted)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encrypted)
    println(decrypted)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
