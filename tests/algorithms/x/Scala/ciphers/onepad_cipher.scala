// Generated by Mochi v0.10.59 on 2025-08-06 21:53:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def set_seed(s: BigInt): Any = {
  seed = s
}

def randint(a: BigInt, b: BigInt): BigInt = {
  seed = (seed * 1103515245 + 12345) % BigInt("2147483648")
  return seed % (b - a + 1) + a
}

def ord(ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((ascii_chars).length)) {
    if (ascii_chars.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return 32 + i
    }
    i = i + 1
  }
  return 0
}

def chr(code: BigInt): String = {
  if ((code < 32 || code > 126).asInstanceOf[Boolean]) {
    return ""
  }
  return (ascii_chars.slice(((code - 32).toInt).toInt, ((code - 32).toInt).toInt + 1)).toString
}

def encrypt(text: String): scala.collection.mutable.Map[String,ArrayBuffer[BigInt]] = {
  var cipher: ArrayBuffer[BigInt] = ArrayBuffer()
  var key: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((text).size)) {
    val p: BigInt = ord((text.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    val k: BigInt = randint(1, 300)
    val c: BigInt = (p + k) * k
    cipher = cipher :+ c
    key = key :+ k
    i = i + 1
  }
  var res: scala.collection.mutable.Map[String,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[BigInt]]]
  res.update("cipher", cipher)
  res.update("key", key)
  return res
}

def decrypt(cipher: ArrayBuffer[BigInt], key: ArrayBuffer[BigInt]): String = {
  var plain: String = ""
  var i: BigInt = 0
  while (i < BigInt((key).size)) {
    val p: BigInt = (cipher((i.toInt).toInt) - key((i.toInt).toInt) * key((i.toInt).toInt)) / key((i.toInt).toInt)
    plain = plain + chr(p)
    i = i + 1
  }
  return plain
}

var seed: BigInt = 1

val ascii_chars: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

val res: scala.collection.mutable.Map[String,ArrayBuffer[BigInt]] = encrypt("Hello")

val cipher: ArrayBuffer[BigInt] = res.getOrElse("cipher", ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]

val key: ArrayBuffer[BigInt] = res.getOrElse("key", ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    set_seed(1)
    println(cipher)
    println(key)
    println(decrypt(cipher, key))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
