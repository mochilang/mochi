// Generated by Mochi v0.10.59 on 2025-08-06 21:55:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  var idx: BigInt = BigInt(upper.indexOf(ch))
  if (idx >= 0) {
    return 65 + idx
  }
  idx = BigInt(lower.indexOf(ch))
  if (idx >= 0) {
    return 97 + idx
  }
  return 0
}

def chr(n: BigInt): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  if ((n >= 65 && n < 91).asInstanceOf[Boolean]) {
    return upper.slice((n - 65).toInt, (n - 64).toInt)
  }
  if ((n >= 97 && n < 123).asInstanceOf[Boolean]) {
    return lower.slice((n - 97).toInt, (n - 96).toInt)
  }
  return "?"
}

def clean_text(s: String): String = {
  var out: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((ch.charAt(0) >= 'A' && ch.charAt(0) <= 'Z').asInstanceOf[Boolean]) {
      out = out + ch
    } else {
      if ((ch.charAt(0) >= 'a' && ch.charAt(0) <= 'z').asInstanceOf[Boolean]) {
        out = out + chr(ord(ch) - 32)
      }
    }
    i = i + 1
  }
  return out
}

def running_key_encrypt(key: String, plaintext: String): String = {
  val pt: String = clean_text(plaintext)
  val k: String = clean_text(key)
  val key_len: BigInt = BigInt((k).size)
  var res: String = ""
  val ord_a: BigInt = ord("A")
  var i: BigInt = 0
  while (i < BigInt((pt).size)) {
    val p: BigInt = ord((pt.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) - ord_a
    val kv: BigInt = ord((k.slice(((i % key_len).toInt).toInt, ((i % key_len).toInt).toInt + 1)).toString) - ord_a
    val c: BigInt = (p + kv) % 26
    res = res + chr(c + ord_a)
    i = i + 1
  }
  return res
}

def running_key_decrypt(key: String, ciphertext: String): String = {
  val ct: String = clean_text(ciphertext)
  val k: String = clean_text(key)
  val key_len: BigInt = BigInt((k).size)
  var res: String = ""
  val ord_a: BigInt = ord("A")
  var i: BigInt = 0
  while (i < BigInt((ct).size)) {
    val c: BigInt = ord((ct.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) - ord_a
    val kv: BigInt = ord((k.slice(((i % key_len).toInt).toInt, ((i % key_len).toInt).toInt + 1)).toString) - ord_a
    val p: BigInt = (c - kv + 26) % 26
    res = res + chr(p + ord_a)
    i = i + 1
  }
  return res
}

val key: String = "How does the duck know that? said Victor"

val plaintext: String = "DEFEND THIS"

val ciphertext: String = running_key_encrypt(key, plaintext)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(ciphertext)
    println(running_key_decrypt(key, ciphertext))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
