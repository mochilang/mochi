// Generated by Mochi v0.10.59 on 2025-08-06 21:46:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return 0 - 1
}

def decrypt(message: String): Any = {
  for (key <- (0).toInt until (BigInt((LETTERS).length)).toInt) {
    var translated: String = ""
    for (i <- (0).toInt until (BigInt((message).size)).toInt) {
      val symbol: String = message.slice((i).toInt, (i + 1).toInt)
      val idx: BigInt = index_of(LETTERS, symbol)
      if (idx != 0 - 1) {
        var num: BigInt = idx - key
        if (num < 0) {
          num = num + BigInt((LETTERS).length)
        }
        translated = translated + LETTERS.slice((num).toInt, (num + 1).toInt)
      } else {
        translated = translated + symbol
      }
    }
    println("Decryption using Key #" + String.valueOf(key) + ": " + translated)
  }
}

val LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    decrypt("TMDETUX PMDVU")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
