// Generated by Mochi v0.10.59 on 2025-08-06 21:29:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def indexOfChar(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val digits: String = "0123456789"
  var idx: BigInt = indexOfChar(upper, ch)
  if (idx >= 0) {
    return 65 + idx
  }
  idx = indexOfChar(lower, ch)
  if (idx >= 0) {
    return 97 + idx
  }
  idx = indexOfChar(digits, ch)
  if (idx >= 0) {
    return 48 + idx
  }
  if (ch == " ") {
    return 32
  }
  if (ch == "!") {
    return 33
  }
  return 0
}

def chr(code: BigInt): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val digits: String = "0123456789"
  if (code == 32) {
    return " "
  }
  if (code == 33) {
    return "!"
  }
  var idx: BigInt = code - 65
  if ((idx >= 0 && idx < BigInt((upper).size)).asInstanceOf[Boolean]) {
    return (upper.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)).toString
  }
  idx = code - 97
  if ((idx >= 0 && idx < BigInt((lower).size)).asInstanceOf[Boolean]) {
    return (lower.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)).toString
  }
  idx = code - 48
  if ((idx >= 0 && idx < BigInt((digits).size)).asInstanceOf[Boolean]) {
    return (digits.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)).toString
  }
  return ""
}

def repeat(s: String, n: BigInt): String = {
  var out: String = ""
  var i: BigInt = 0
  while (i < n) {
    out = out + s
    i = i + 1
  }
  return out
}

def to_binary(n: BigInt, bits: BigInt): String = {
  var v: BigInt = n
  var out: String = ""
  var i: BigInt = 0
  while (i < bits) {
    out = String.valueOf(v % 2) + out
    v = v / 2
    i = i + 1
  }
  return out
}

def binary_to_int(bits: String): BigInt = {
  var n: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((bits).size)) {
    n = n * 2
    if (bits.slice((i.toInt).toInt, (i.toInt).toInt + 1) == "1") {
      n = n + 1
    }
    i = i + 1
  }
  return n
}

def base32_encode(data: String): String = {
  var binary_data: String = ""
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    binary_data = binary_data + to_binary(ord((data.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString), 8)
    i = i + 1
  }
  val remainder: BigInt = BigInt((binary_data).size) % 5
  if (remainder != 0) {
    binary_data = binary_data + _repeat("0", 5 - remainder)
  }
  var b32_result: String = ""
  var j: BigInt = 0
  while (j < BigInt((binary_data).size)) {
    val chunk: String = binary_data.slice((j).toInt, (j + 5).toInt)
    val index: BigInt = binary_to_int(chunk)
    b32_result = b32_result + B32_CHARSET.slice((index.toInt).toInt, (index.toInt).toInt + 1)
    j = j + 5
  }
  val rem: BigInt = BigInt((b32_result).size) % 8
  if (rem != 0) {
    b32_result = b32_result + _repeat("=", 8 - rem)
  }
  return b32_result
}

def base32_decode(data: String): String = {
  var clean: String = ""
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    val ch = data.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch != "=") {
      clean = clean + ch
    }
    i = i + 1
  }
  var binary_chunks: String = ""
  i = 0
  while (i < BigInt((clean).size)) {
    val idx: BigInt = indexOfChar(B32_CHARSET, (clean.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    binary_chunks = binary_chunks + to_binary(idx, 5)
    i = i + 1
  }
  var result: String = ""
  var j: BigInt = 0
  while (j + 8 <= BigInt((binary_chunks).size)) {
    val byte_bits: String = binary_chunks.slice((j).toInt, (j + 8).toInt)
    val code: BigInt = binary_to_int(byte_bits)
    result = result + chr(code)
    j = j + 8
  }
  return result
}

val B32_CHARSET: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(base32_encode("Hello World!"))
    println(base32_encode("123456"))
    println(base32_encode("some long complex string"))
    println(base32_decode("JBSWY3DPEBLW64TMMQQQ===="))
    println(base32_decode("GEZDGNBVGY======"))
    println(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
