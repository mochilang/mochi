// Generated by Mochi v0.10.59 on 2025-08-06 21:26:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def charToNum(ch: String): BigInt = {
  val letters: String = "abcdefghijklmnopqrstuvwxyz"
  val idx: BigInt = BigInt(letters.indexOf(ch))
  if (idx >= 0) {
    return idx + 1
  }
  return 0
}

def numToChar(n: BigInt): String = {
  val letters: String = "abcdefghijklmnopqrstuvwxyz"
  if ((n >= 1 && n <= 26).asInstanceOf[Boolean]) {
    return letters.slice((n - 1).toInt, (n).toInt)
  }
  return "?"
}

def encode(plain: String): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((plain).size)) {
    val ch = plain.slice((i).toInt, (i + 1).toInt).toLowerCase()
    val `val`: BigInt = charToNum(ch)
    if (`val` > 0) {
      res = res :+ `val`
    }
    i = i + 1
  }
  return res
}

def decode(encoded: ArrayBuffer[BigInt]): String = {
  var out: String = ""
  for (n <- encoded) {
    out = out + numToChar(n)
  }
  return out
}

def main(): Any = {
  println("-> ")
  val text = ((Option(scala.io.StdIn.readLine())).getOrElse("q")).toLowerCase()
  val enc: ArrayBuffer[BigInt] = encode(text)
  println("Encoded: " + String.valueOf(enc))
  println("Decoded: " + decode(enc))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
