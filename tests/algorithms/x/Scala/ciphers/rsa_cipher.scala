// Generated by Mochi v0.10.59 on 2025-08-06 21:54:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow_int(base: BigInt, exp: BigInt): BigInt = {
  var result: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    result = result * base
    i = i + 1
  }
  return result
}

def mod_pow(base: BigInt, exponent: BigInt, modulus: BigInt): BigInt = {
  var result: BigInt = 1
  var b: BigInt = base % modulus
  var e: BigInt = exponent
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b % modulus
    }
    e = e / 2
    b = b * b % modulus
  }
  return result
}

def ord(ch: String): BigInt = {
  if (ch == " ") {
    return 32
  }
  if (ch == "a") {
    return 97
  }
  if (ch == "b") {
    return 98
  }
  if (ch == "c") {
    return 99
  }
  if (ch == "d") {
    return 100
  }
  if (ch == "e") {
    return 101
  }
  if (ch == "f") {
    return 102
  }
  if (ch == "g") {
    return 103
  }
  if (ch == "h") {
    return 104
  }
  if (ch == "i") {
    return 105
  }
  if (ch == "j") {
    return 106
  }
  if (ch == "k") {
    return 107
  }
  if (ch == "l") {
    return 108
  }
  if (ch == "m") {
    return 109
  }
  if (ch == "n") {
    return 110
  }
  if (ch == "o") {
    return 111
  }
  if (ch == "p") {
    return 112
  }
  if (ch == "q") {
    return 113
  }
  if (ch == "r") {
    return 114
  }
  if (ch == "s") {
    return 115
  }
  if (ch == "t") {
    return 116
  }
  if (ch == "u") {
    return 117
  }
  if (ch == "v") {
    return 118
  }
  if (ch == "w") {
    return 119
  }
  if (ch == "x") {
    return 120
  }
  if (ch == "y") {
    return 121
  }
  if (ch == "z") {
    return 122
  }
  return 0
}

def chr(code: BigInt): String = {
  if (code == 32) {
    return " "
  }
  if (code == 97) {
    return "a"
  }
  if (code == 98) {
    return "b"
  }
  if (code == 99) {
    return "c"
  }
  if (code == 100) {
    return "d"
  }
  if (code == 101) {
    return "e"
  }
  if (code == 102) {
    return "f"
  }
  if (code == 103) {
    return "g"
  }
  if (code == 104) {
    return "h"
  }
  if (code == 105) {
    return "i"
  }
  if (code == 106) {
    return "j"
  }
  if (code == 107) {
    return "k"
  }
  if (code == 108) {
    return "l"
  }
  if (code == 109) {
    return "m"
  }
  if (code == 110) {
    return "n"
  }
  if (code == 111) {
    return "o"
  }
  if (code == 112) {
    return "p"
  }
  if (code == 113) {
    return "q"
  }
  if (code == 114) {
    return "r"
  }
  if (code == 115) {
    return "s"
  }
  if (code == 116) {
    return "t"
  }
  if (code == 117) {
    return "u"
  }
  if (code == 118) {
    return "v"
  }
  if (code == 119) {
    return "w"
  }
  if (code == 120) {
    return "x"
  }
  if (code == 121) {
    return "y"
  }
  if (code == 122) {
    return "z"
  }
  return ""
}

def get_blocks_from_text(message: String, block_size: BigInt): ArrayBuffer[BigInt] = {
  var block_ints: ArrayBuffer[BigInt] = ArrayBuffer()
  var block_start: BigInt = 0
  while (block_start < BigInt((message).size)) {
    var block_int: BigInt = 0
    var i: BigInt = block_start
    while (i < block_start + block_size && i < BigInt((message).size)) {
      block_int = block_int + ord((message.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) * pow_int(BYTE_SIZE, i - block_start)
      i = i + 1
    }
    block_ints = block_ints :+ block_int
    block_start = block_start + block_size
  }
  return block_ints
}

def get_text_from_blocks(block_ints: ArrayBuffer[BigInt], message_length: BigInt, block_size: BigInt): String = {
  var message: String = ""
  for (block_int <- block_ints) {
    var block: BigInt = block_int
    var i: BigInt = block_size - 1
    var block_message: String = ""
    while (i >= 0) {
      if (BigInt((message).size) + i < message_length) {
        val ascii_number: BigInt = block / pow_int(BYTE_SIZE, i)
        block = block % pow_int(BYTE_SIZE, i)
        block_message = chr(ascii_number) + block_message
      }
      i = i - 1
    }
    message = message + block_message
  }
  return message
}

def encrypt_message(message: String, n: BigInt, e: BigInt, block_size: BigInt): ArrayBuffer[BigInt] = {
  var encrypted: ArrayBuffer[BigInt] = ArrayBuffer()
  val blocks: ArrayBuffer[BigInt] = get_blocks_from_text(message, block_size)
  for (block <- blocks) {
    encrypted = encrypted :+ mod_pow(block, e, n)
  }
  return encrypted
}

def decrypt_message(blocks: ArrayBuffer[BigInt], message_length: BigInt, n: BigInt, d: BigInt, block_size: BigInt): String = {
  var decrypted_blocks: ArrayBuffer[BigInt] = ArrayBuffer()
  for (block <- blocks) {
    decrypted_blocks = decrypted_blocks :+ mod_pow(block, d, n)
  }
  var message: String = ""
  for (num <- decrypted_blocks) {
    message = message + chr(num)
  }
  return message
}

def main(): Any = {
  val message: String = "hello world"
  val n: BigInt = 3233
  val e: BigInt = 17
  val d: BigInt = 2753
  val block_size: BigInt = 1
  val encrypted: ArrayBuffer[BigInt] = encrypt_message(message, n, e, block_size)
  println(String.valueOf(encrypted))
  val decrypted: String = decrypt_message(encrypted, BigInt((message).size), n, d, block_size)
  println(decrypted)
}

val BYTE_SIZE: BigInt = 256

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
