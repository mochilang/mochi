// Generated by Mochi v0.10.59 on 2025-08-06 21:48:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Result(var shift: BigInt, var chi: Double, var decoded: String)

def default_alphabet(): ArrayBuffer[String] = {
  return ArrayBuffer("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")
}

def default_frequencies(): scala.collection.mutable.Map[String,Double] = {
  return (scala.collection.mutable.Map("a" -> (0.08497), "b" -> (0.01492), "c" -> (0.02202), "d" -> (0.04253), "e" -> (0.11162), "f" -> (0.02228), "g" -> (0.02015), "h" -> (0.06094), "i" -> (0.07546), "j" -> (0.00153), "k" -> (0.01292), "l" -> (0.04025), "m" -> (0.02406), "n" -> (0.06749), "o" -> (0.07507), "p" -> (0.01929), "q" -> (0.00095), "r" -> (0.07587), "s" -> (0.06327), "t" -> (0.09356), "u" -> (0.02758), "v" -> (0.00978), "w" -> (0.0256), "x" -> (0.0015), "y" -> (0.01994), "z" -> (0.00077))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
}

def index_of(xs: ArrayBuffer[String], ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def count_char(s: String, ch: String): BigInt = {
  var count: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      count = count + 1
    }
    i = i + 1
  }
  return count
}

def decrypt_caesar_with_chi_squared(_ciphertext: String, cipher_alphabet: ArrayBuffer[String], frequencies_dict: scala.collection.mutable.Map[String,Double], case_sensitive: Boolean): Result = {
  var ciphertext: String = _ciphertext
  var alphabet_letters: ArrayBuffer[String] = cipher_alphabet
  if (BigInt((alphabet_letters).size) == 0) {
    alphabet_letters = default_alphabet()
  }
  var frequencies: scala.collection.mutable.Map[String,Double] = frequencies_dict
  if (BigInt((frequencies).size) == 0) {
    frequencies = default_frequencies()
  }
  if ((!case_sensitive).asInstanceOf[Boolean]) {
    ciphertext = (ciphertext.toLowerCase()).toString
  }
  var best_shift: BigInt = 0
  var best_chi: Double = 0.0
  var best_text: String = ""
  var shift: BigInt = 0
  while (shift < BigInt((alphabet_letters).size)) {
    var decrypted: String = ""
    var i: BigInt = 0
    while (i < BigInt((ciphertext).size)) {
      val ch: String = ciphertext.slice((i).toInt, (i + 1).toInt)
      val idx: BigInt = index_of(alphabet_letters, (ch.toLowerCase()).toString)
      if (idx >= 0) {
        val m: BigInt = BigInt((alphabet_letters).size)
        var new_idx: BigInt = (idx - shift) % m
        if (new_idx < 0) {
          new_idx = new_idx + m
        }
        val new_char: String = alphabet_letters((new_idx.toInt).toInt)
        if ((case_sensitive && ch != ch.toLowerCase()).asInstanceOf[Boolean]) {
          decrypted = decrypted + new_char.toUpperCase()
        } else {
          decrypted = decrypted + new_char
        }
      } else {
        decrypted = decrypted + ch
      }
      i = i + 1
    }
    var chi: Double = 0.0
    val lowered = (if (case_sensitive) decrypted.toLowerCase() else decrypted)
    var j: BigInt = 0
    while (j < BigInt((alphabet_letters).size)) {
      val letter: String = alphabet_letters((j.toInt).toInt)
      val occ: BigInt = count_char(lowered, letter)
      if (occ > 0) {
        val occf: Double = occ.toString.toDouble
        val expected: Double = frequencies.getOrElse(letter.toString, 0.0).asInstanceOf[Double] * occf
        val diff: Double = occf - expected
        chi = chi + diff * diff / expected * occf
      }
      j = j + 1
    }
    if ((shift == 0 || chi < best_chi).asInstanceOf[Boolean]) {
      best_shift = shift
      best_chi = chi
      best_text = decrypted
    }
    shift = shift + 1
  }
  return Result(best_shift, best_chi, best_text)
}

val r1: Result = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", ArrayBuffer(), (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]], false)

val r2: Result = decrypt_caesar_with_chi_squared("crybd cdbsxq", ArrayBuffer(), (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]], false)

val r3: Result = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", ArrayBuffer(), (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]], true)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(r1.shift) + ", " + String.valueOf(r1.chi) + ", " + r1.decoded)
    println(String.valueOf(r2.shift) + ", " + String.valueOf(r2.chi) + ", " + r2.decoded)
    println(String.valueOf(r3.shift) + ", " + String.valueOf(r3.chi) + ", " + r3.decoded)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
