// Generated by Mochi v0.10.59 on 2025-08-06 21:42:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def to_binary(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  var num: BigInt = n
  var res: String = ""
  while (num > 0) {
    val bit: BigInt = num % 2
    res = String.valueOf(bit) + res
    num = num / 2
  }
  return res
}

def zfill(s: String, width: BigInt): String = {
  var res: String = s
  var pad: BigInt = width - BigInt((s).size)
  while (pad > 0) {
    res = "0" + res
    pad = pad - 1
  }
  return res
}

def from_binary(s: String): BigInt = {
  var i: BigInt = 0
  var result: BigInt = 0
  while (i < BigInt((s).size)) {
    result = result * 2
    if (s.slice((i).toInt, (i + 1).toInt) == "1") {
      result = result + 1
    }
    i = i + 1
  }
  return result
}

def repeat(ch: String, times: BigInt): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < times) {
    res = res + ch
    i = i + 1
  }
  return res
}

def char_index(s: String, c: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == c) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def base64_encode(data: ArrayBuffer[BigInt]): String = {
  var bits: String = ""
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    bits = bits + zfill(to_binary(data((i.toInt).toInt)), 8)
    i = i + 1
  }
  var pad_bits: BigInt = 0
  if (BigInt((bits).size) % 6 != 0) {
    pad_bits = 6 - BigInt((bits).size) % 6
    bits = bits + _repeat("0", pad_bits)
  }
  var j: BigInt = 0
  var encoded: String = ""
  while (j < BigInt((bits).size)) {
    val chunk: String = bits.slice((j).toInt, (j + 6).toInt)
    val idx: BigInt = from_binary(chunk)
    encoded = encoded + B64_CHARSET.slice((idx).toInt, (idx + 1).toInt)
    j = j + 6
  }
  var pad: BigInt = pad_bits / 2
  while (pad > 0) {
    encoded = encoded + "="
    pad = pad - 1
  }
  return encoded
}

def base64_decode(s: String): ArrayBuffer[BigInt] = {
  var padding: BigInt = 0
  var end: BigInt = BigInt((s).size)
  while (end > 0 && s.slice((end - 1).toInt, (end).toInt) == "=") {
    padding = padding + 1
    end = end - 1
  }
  var bits: String = ""
  var k: BigInt = 0
  while (k < end) {
    val c: String = s.slice((k).toInt, (k + 1).toInt)
    val idx: BigInt = char_index(B64_CHARSET, c)
    bits = bits + zfill(to_binary(idx), 6)
    k = k + 1
  }
  if (padding > 0) {
    bits = bits.slice((0).toInt, (BigInt((bits).size) - padding * 2).toInt)
  }
  var bytes: ArrayBuffer[BigInt] = ArrayBuffer()
  var m: BigInt = 0
  while (m < BigInt((bits).size)) {
    val byte: BigInt = from_binary(bits.slice((m).toInt, (m + 8).toInt))
    bytes = bytes :+ byte
    m = m + 8
  }
  return bytes
}

def main(): Any = {
  val data: ArrayBuffer[BigInt] = ArrayBuffer(77, 111, 99, 104, 105)
  val encoded: String = base64_encode(data)
  println(encoded)
  println(toJson(base64_decode(encoded)))
}

val B64_CHARSET: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
