// Generated by Mochi v0.10.59 on 2025-08-06 22:00:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def remove_spaces(s: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i).toInt, (i + 1).toInt)
    if (c != " ") {
      res = res + c
    }
    i = i + 1
  }
  return res
}

def char_to_trigram(ch: String, alphabet: String): String = {
  var i: BigInt = 0
  while (i < BigInt((alphabet).size)) {
    if (alphabet.slice((i).toInt, (i + 1).toInt) == ch) {
      return triagrams((i.toInt).toInt)
    }
    i = i + 1
  }
  return ""
}

def trigram_to_char(tri: String, alphabet: String): String = {
  var i: BigInt = 0
  while (i < BigInt((triagrams).size)) {
    if (triagrams((i.toInt).toInt) == tri) {
      return alphabet.slice((i).toInt, (i + 1).toInt)
    }
    i = i + 1
  }
  return ""
}

def encrypt_part(part: String, alphabet: String): String = {
  var one: String = ""
  var two: String = ""
  var three: String = ""
  var i: BigInt = 0
  while (i < BigInt((part).size)) {
    val tri: String = char_to_trigram(part.slice((i).toInt, (i + 1).toInt), alphabet)
    one = one + tri.slice((0).toInt, (1).toInt)
    two = two + tri.slice((1).toInt, (2).toInt)
    three = three + tri.slice((2).toInt, (3).toInt)
    i = i + 1
  }
  return one + two + three
}

def encrypt_message(message: String, alphabet: String, period: BigInt): String = {
  val msg: String = remove_spaces(message)
  val alpha: String = remove_spaces(alphabet)
  if (BigInt((alpha).size) != 27) {
    return ""
  }
  var encrypted_numeric: String = ""
  var i: BigInt = 0
  while (i < BigInt((msg).size)) {
    var end: BigInt = i + period
    if (end > BigInt((msg).size)) {
      end = BigInt((msg).size)
    }
    val part: String = msg.slice((i).toInt, (end).toInt)
    encrypted_numeric = encrypted_numeric + encrypt_part(part, alpha)
    i = i + period
  }
  var encrypted: String = ""
  var j: BigInt = 0
  while (j < BigInt((encrypted_numeric).size)) {
    val tri: String = encrypted_numeric.slice((j).toInt, (j + 3).toInt)
    encrypted = encrypted + trigram_to_char(tri, alpha)
    j = j + 3
  }
  return encrypted
}

def decrypt_part(part: String, alphabet: String): ArrayBuffer[String] = {
  var converted: String = ""
  var i: BigInt = 0
  while (i < BigInt((part).size)) {
    val tri: String = char_to_trigram(part.slice((i).toInt, (i + 1).toInt), alphabet)
    converted = converted + tri
    i = i + 1
  }
  var result: ArrayBuffer[String] = ArrayBuffer()
  var tmp: String = ""
  var j: BigInt = 0
  while (j < BigInt((converted).size)) {
    tmp = tmp + converted.slice((j).toInt, (j + 1).toInt)
    if (BigInt((tmp).size) == BigInt((part).size)) {
      result = result :+ tmp
      tmp = ""
    }
    j = j + 1
  }
  return result
}

def decrypt_message(message: String, alphabet: String, period: BigInt): String = {
  val msg: String = remove_spaces(message)
  val alpha: String = remove_spaces(alphabet)
  if (BigInt((alpha).size) != 27) {
    return ""
  }
  var decrypted_numeric: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((msg).size)) {
    var end: BigInt = i + period
    if (end > BigInt((msg).size)) {
      end = BigInt((msg).size)
    }
    val part: String = msg.slice((i).toInt, (end).toInt)
    val groups: ArrayBuffer[String] = decrypt_part(part, alpha)
    var k: BigInt = 0
    while (k < BigInt((groups((0.toInt).toInt)).size)) {
      val tri: String = groups((0.toInt).toInt).slice((k).toInt, (k + 1).toInt) + groups((1.toInt).toInt).slice((k).toInt, (k + 1).toInt) + groups((2.toInt).toInt).slice((k).toInt, (k + 1).toInt)
      decrypted_numeric = decrypted_numeric :+ tri
      k = k + 1
    }
    i = i + period
  }
  var decrypted: String = ""
  var j: BigInt = 0
  while (j < BigInt((decrypted_numeric).size)) {
    decrypted = decrypted + trigram_to_char(decrypted_numeric((j.toInt).toInt), alpha)
    j = j + 1
  }
  return decrypted
}

def main(): Any = {
  val msg: String = "DEFEND THE EAST WALL OF THE CASTLE."
  val alphabet: String = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ"
  val encrypted: String = encrypt_message(msg, alphabet, 5)
  val decrypted: String = decrypt_message(encrypted, alphabet, 5)
  println("Encrypted: " + encrypted)
  println("Decrypted: " + decrypted)
}

val triagrams: ArrayBuffer[String] = ArrayBuffer("111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
