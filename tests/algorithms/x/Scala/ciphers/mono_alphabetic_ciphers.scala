// Generated by Mochi v0.10.59 on 2025-08-06 21:53:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def find_char(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def encrypt_message(key: String, message: String): String = {
  val chars_a: String = key
  val chars_b: String = LETTERS
  var translated: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).size)) {
    val symbol = message.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val upper_sym = symbol.toUpperCase()
    val sym_index: BigInt = find_char(chars_a, upper_sym)
    if (sym_index >= 0) {
      val sub_char = chars_b.slice((sym_index.toInt).toInt, (sym_index.toInt).toInt + 1)
      if (symbol == upper_sym) {
        translated = translated + sub_char.toUpperCase()
      } else {
        translated = translated + sub_char.toLowerCase()
      }
    } else {
      translated = translated + symbol
    }
    i = i + 1
  }
  return translated
}

def decrypt_message(key: String, message: String): String = {
  val chars_a: String = LETTERS
  val chars_b: String = key
  var translated: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).size)) {
    val symbol = message.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val upper_sym = symbol.toUpperCase()
    val sym_index: BigInt = find_char(chars_a, upper_sym)
    if (sym_index >= 0) {
      val sub_char = chars_b.slice((sym_index.toInt).toInt, (sym_index.toInt).toInt + 1)
      if (symbol == upper_sym) {
        translated = translated + sub_char.toUpperCase()
      } else {
        translated = translated + sub_char.toLowerCase()
      }
    } else {
      translated = translated + symbol
    }
    i = i + 1
  }
  return translated
}

def main(): Any = {
  val message: String = "Hello World"
  val key: String = "QWERTYUIOPASDFGHJKLZXCVBNM"
  val mode: String = "decrypt"
  var translated: String = ""
  if (mode == "encrypt") {
    translated = encrypt_message(key, message)
  } else {
    if (mode == "decrypt") {
      translated = decrypt_message(key, message)
    }
  }
  println("Using the key " + key + ", the " + mode + "ed message is: " + translated)
}

val LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
