// Generated by Mochi v0.10.59 on 2025-08-06 21:59:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_in_string(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def contains_char(s: String, ch: String): Boolean = {
  return index_in_string(s, ch) >= 0
}

def is_alpha(ch: String): Boolean = {
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  return (contains_char(lower, ch) || contains_char(upper, ch)).asInstanceOf[Boolean]
}

def to_upper(s: String): String = {
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val idx: BigInt = index_in_string(lower, ch)
    if (idx >= 0) {
      res = res + upper.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
    } else {
      res = res + ch
    }
    i = i + 1
  }
  return res
}

def remove_duplicates(key: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((key).size)) {
    val ch = key.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((ch == " " || (is_alpha(ch) && contains_char(res, ch) == false).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      res = res + ch
    }
    i = i + 1
  }
  return res
}

def create_cipher_map(key: String): ArrayBuffer[String] = {
  val alphabet: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val cleaned: String = remove_duplicates(to_upper(key))
  var cipher: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((cleaned).size)) {
    cipher = cipher :+ (cleaned.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString
    i = i + 1
  }
  var offset: BigInt = BigInt((cleaned).size)
  var j: BigInt = BigInt((cipher).size)
  while (j < 26) {
    var char: Any = alphabet.slice(((j - offset).toInt).toInt, ((j - offset).toInt).toInt + 1)
    while (contains_char(cleaned, char)) {
      offset = offset - 1
      char = alphabet.slice(((j - offset).toInt).toInt, ((j - offset).toInt).toInt + 1)
    }
    cipher = cipher :+ char.toString
    j = j + 1
  }
  return cipher
}

def index_in_list(lst: ArrayBuffer[String], ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((lst).size)) {
    if (lst((i.toInt).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def encipher(message: String, cipher: ArrayBuffer[String]): String = {
  val alphabet: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val msg: String = to_upper(message)
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((msg).size)) {
    val ch = msg.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val idx: BigInt = index_in_string(alphabet, ch)
    if (idx >= 0) {
      res = res + cipher((idx.toInt).toInt)
    } else {
      res = res + ch
    }
    i = i + 1
  }
  return res
}

def decipher(message: String, cipher: ArrayBuffer[String]): String = {
  val alphabet: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val msg: String = to_upper(message)
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((msg).size)) {
    val ch = msg.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val idx: BigInt = index_in_list(cipher, ch)
    if (idx >= 0) {
      res = res + alphabet.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)
    } else {
      res = res + ch
    }
    i = i + 1
  }
  return res
}

val cipher_map: ArrayBuffer[String] = create_cipher_map("Goodbye!!")

val encoded: String = encipher("Hello World!!", cipher_map)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encoded)
    println(decipher(encoded, cipher_map))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
