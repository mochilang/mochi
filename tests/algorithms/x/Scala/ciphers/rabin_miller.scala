// Generated by Mochi v0.10.59 on 2025-08-06 21:54:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def int_pow(base: BigInt, exp: BigInt): BigInt = {
  var result: BigInt = 1
  var i: BigInt = 0
  while (i < exp) {
    result = result * base
    i = i + 1
  }
  return result
}

def pow_mod(base: BigInt, exp: BigInt, mod: BigInt): BigInt = {
  var result: BigInt = 1
  var b: BigInt = base % mod
  var e: BigInt = exp
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b % mod
    }
    e = e / 2
    b = b * b % mod
  }
  return result
}

def rand_range(low: BigInt, high: BigInt): BigInt = {
  return _now() % (high - low) + low
}

def rabin_miller(num: BigInt): Boolean = {
  var s: BigInt = num - 1
  var t: BigInt = 0
  while (s % 2 == 0) {
    s = s / 2
    t = t + 1
  }
  var k: BigInt = 0
  while (k < 5) {
    val a: BigInt = rand_range(2, num - 1)
    var v: BigInt = pow_mod(a, s, num)
    if (v != 1) {
      var i: BigInt = 0
      while (v != num - 1) {
        if (i == t - 1) {
          return false
        }
        i = i + 1
        v = v * v % num
      }
    }
    k = k + 1
  }
  return true
}

def is_prime_low_num(num: BigInt): Boolean = {
  if (num < 2) {
    return false
  }
  val low_primes: ArrayBuffer[BigInt] = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)
  if ((low_primes.contains(num)).asInstanceOf[Boolean]) {
    return true
  }
  var i: BigInt = 0
  while (i < BigInt((low_primes).size)) {
    val p: BigInt = low_primes((i.toInt).toInt)
    if (num % p == 0) {
      return false
    }
    i = i + 1
  }
  return rabin_miller(num)
}

def generate_large_prime(keysize: BigInt): BigInt = {
  var start: BigInt = int_pow(2, keysize - 1)
  var end: BigInt = int_pow(2, keysize)
  while (true) {
    val num: BigInt = rand_range(start, end)
    if (is_prime_low_num(num)) {
      return num
    }
  }
  return null
}

val p: BigInt = generate_large_prime(16)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Prime number: " + String.valueOf(p))
    println("is_prime_low_num: " + String.valueOf(is_prime_low_num(p)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
