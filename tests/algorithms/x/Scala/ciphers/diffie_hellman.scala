// Generated by Mochi v0.10.59 on 2025-08-06 21:49:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def int_to_hex(n: BigInt): String = {
  if (n == 0) {
    return "0"
  }
  val digits: String = "0123456789abcdef"
  var num: BigInt = n
  var res: String = ""
  while (num > 0) {
    val d: BigInt = num % 16
    res = digits.slice((d.toInt).toInt, (d.toInt).toInt + 1) + res
    num = num / 16
  }
  return res
}

def rand_int(): BigInt = {
  seed = (1103515245 * seed + 12345) % BigInt("2147483648")
  return seed
}

def mod_pow(base: BigInt, exp: BigInt): BigInt = {
  var result: BigInt = 1
  var b: BigInt = base % PRIME
  var e: BigInt = exp
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b % PRIME
    }
    b = b * b % PRIME
    e = e / 2
  }
  return result
}

def is_valid_public_key(key: BigInt): Boolean = {
  if ((key < 2 || key > PRIME - 2).asInstanceOf[Boolean]) {
    return false
  }
  return mod_pow(key, (PRIME - 1) / 2) == 1
}

def generate_private_key(): BigInt = {
  return rand_int() % (PRIME - 2) + 2
}

var seed: BigInt = 123456789

val PRIME: BigInt = 23

val generator: BigInt = 5

val alice_private: BigInt = generate_private_key()

val alice_public: BigInt = mod_pow(generator, alice_private)

val bob_private: BigInt = generate_private_key()

val bob_public: BigInt = mod_pow(generator, bob_private)

val alice_shared: BigInt = mod_pow(bob_public, alice_private)

val bob_shared: BigInt = mod_pow(alice_public, bob_private)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    if ((!is_valid_public_key(alice_public)).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Invalid public key"))
    }
    if ((!is_valid_public_key(bob_public)).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Invalid public key"))
    }
    println(int_to_hex(alice_shared))
    println(int_to_hex(bob_shared))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
