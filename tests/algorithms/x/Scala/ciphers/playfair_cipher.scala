// Generated by Mochi v0.10.59 on 2025-08-06 21:53:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(xs: ArrayBuffer[String], x: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return true
    }
    i = i + 1
  }
  return false
}

def index_of(xs: ArrayBuffer[String], x: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return i
    }
    i = i + 1
  }
  return -1
}

def prepare_input(dirty: String): String = {
  val letters: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val upper_dirty = dirty.toUpperCase()
  var filtered: String = ""
  var i: BigInt = 0
  while (i < BigInt((upper_dirty).size)) {
    val c: String = upper_dirty.slice((i).toInt, (i + 1).toInt)
    if ((letters.contains(c)).asInstanceOf[Boolean]) {
      filtered = filtered + c
    }
    i = i + 1
  }
  if (BigInt((filtered).size) < 2) {
    return filtered
  }
  var clean: String = ""
  i = 0
  while (i < BigInt((filtered).size) - 1) {
    val c1: String = filtered.slice((i).toInt, (i + 1).toInt)
    val c2: String = filtered.slice((i + 1).toInt, (i + 2).toInt)
    clean = clean + c1
    if (c1 == c2) {
      clean = clean + "X"
    }
    i = i + 1
  }
  clean = clean + filtered.slice((BigInt((filtered).size) - 1).toInt, (BigInt((filtered).size)).toInt)
  if (BigInt((clean).size) % 2 == 1) {
    clean = clean + "X"
  }
  return clean
}

def generate_table(key: String): ArrayBuffer[String] = {
  val alphabet: String = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
  var table: ArrayBuffer[String] = ArrayBuffer()
  val upper_key = key.toUpperCase()
  var i: BigInt = 0
  while (i < BigInt((upper_key).size)) {
    val c: String = upper_key.slice((i).toInt, (i + 1).toInt)
    if ((alphabet.contains(c)).asInstanceOf[Boolean]) {
      if (!(table.contains(c)).asInstanceOf[Boolean]) {
        table = table :+ c
      }
    }
    i = i + 1
  }
  i = 0
  while (i < BigInt((alphabet).size)) {
    val c: String = alphabet.slice((i).toInt, (i + 1).toInt)
    if (!(table.contains(c)).asInstanceOf[Boolean]) {
      table = table :+ c
    }
    i = i + 1
  }
  return table
}

def encode(plaintext: String, key: String): String = {
  val table: ArrayBuffer[String] = generate_table(key)
  val text: String = prepare_input(plaintext)
  var cipher: String = ""
  var i: BigInt = 0
  while (i < BigInt((text).size)) {
    val c1: String = text.slice((i).toInt, (i + 1).toInt)
    val c2: String = text.slice((i + 1).toInt, (i + 2).toInt)
    val idx1: BigInt = index_of(table, c1)
    val idx2: BigInt = index_of(table, c2)
    val row1: BigInt = idx1 / 5
    val col1: BigInt = idx1 % 5
    val row2: BigInt = idx2 / 5
    val col2: BigInt = idx2 % 5
    if (row1 == row2) {
      cipher = cipher + table(((row1 * 5 + (col1 + 1) % 5).toInt).toInt)
      cipher = cipher + table(((row2 * 5 + (col2 + 1) % 5).toInt).toInt)
    } else {
      if (col1 == col2) {
        cipher = cipher + table((((row1 + 1) % 5 * 5 + col1).toInt).toInt)
        cipher = cipher + table((((row2 + 1) % 5 * 5 + col2).toInt).toInt)
      } else {
        cipher = cipher + table(((row1 * 5 + col2).toInt).toInt)
        cipher = cipher + table(((row2 * 5 + col1).toInt).toInt)
      }
    }
    i = i + 2
  }
  return cipher
}

def decode(cipher: String, key: String): String = {
  val table: ArrayBuffer[String] = generate_table(key)
  var plain: String = ""
  var i: BigInt = 0
  while (i < BigInt((cipher).size)) {
    val c1: String = cipher.slice((i).toInt, (i + 1).toInt)
    val c2: String = cipher.slice((i + 1).toInt, (i + 2).toInt)
    val idx1: BigInt = index_of(table, c1)
    val idx2: BigInt = index_of(table, c2)
    val row1: BigInt = idx1 / 5
    val col1: BigInt = idx1 % 5
    val row2: BigInt = idx2 / 5
    val col2: BigInt = idx2 % 5
    if (row1 == row2) {
      plain = plain + table(((row1 * 5 + (col1 + 4) % 5).toInt).toInt)
      plain = plain + table(((row2 * 5 + (col2 + 4) % 5).toInt).toInt)
    } else {
      if (col1 == col2) {
        plain = plain + table((((row1 + 4) % 5 * 5 + col1).toInt).toInt)
        plain = plain + table((((row2 + 4) % 5 * 5 + col2).toInt).toInt)
      } else {
        plain = plain + table(((row1 * 5 + col2).toInt).toInt)
        plain = plain + table(((row2 * 5 + col1).toInt).toInt)
      }
    }
    i = i + 2
  }
  return plain
}

def main(): Any = {
  println((List("Encoded:", encode("BYE AND THANKS", "GREETING"))).mkString(" "))
  println((List("Decoded:", decode("CXRBANRLBALQ", "GREETING"))).mkString(" "))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
