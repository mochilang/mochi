// Generated by Mochi v0.10.59 on 2025-08-06 21:53:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def mod36(n: BigInt): BigInt = {
  var r: BigInt = n % 36
  if (r < 0) {
    r = r + 36
  }
  return r
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  while (y != 0) {
    val t: BigInt = y
    y = x % y
    x = t
  }
  if (x < 0) {
    x = -x
  }
  return x
}

def replace_letters(letter: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((KEY_STRING).length)) {
    if (KEY_STRING.slice((i.toInt).toInt, (i.toInt).toInt + 1) == letter) {
      return i
    }
    i = i + 1
  }
  return 0
}

def replace_digits(num: BigInt): String = {
  val idx: BigInt = mod36(num)
  return (KEY_STRING.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)).toString
}

def to_upper(c: String): String = {
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var i: BigInt = 0
  while (i < BigInt((lower).size)) {
    if (c == lower.slice((i.toInt).toInt, (i.toInt).toInt + 1)) {
      return (upper.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString
    }
    i = i + 1
  }
  return c
}

def process_text(text: String, break_key: BigInt): String = {
  var chars: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  val _br3 = new Breaks
  _br3.breakable {
    while (i < BigInt((text).size)) {
      var c: String = to_upper((text.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
      var j: BigInt = 0
      var ok: Boolean = false
      val _br4 = new Breaks
      _br4.breakable {
        while (j < BigInt((KEY_STRING).length)) {
          if (KEY_STRING.slice((j.toInt).toInt, (j.toInt).toInt + 1) == c) {
            ok = true
            _br4.break()
          }
          j = j + 1
        }
      }
      if (ok) {
        chars = chars :+ c
      }
      i = i + 1
    }
  }
  if (BigInt((chars).size) == 0) {
    return ""
  }
  val last: String = chars(((BigInt((chars).size) - 1).toInt).toInt)
  while (BigInt((chars).size) % break_key != 0) {
    chars = chars :+ last
  }
  var res: String = ""
  var k: BigInt = 0
  while (k < BigInt((chars).size)) {
    res = res + chars((k.toInt).toInt)
    k = k + 1
  }
  return res
}

def matrix_minor(m: ArrayBuffer[ArrayBuffer[BigInt]], row: BigInt, col: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((m).size)) {
    if (i != row) {
      var r: ArrayBuffer[BigInt] = ArrayBuffer()
      var j: BigInt = 0
      while (j < BigInt((m((i.toInt).toInt)).size)) {
        if (j != col) {
          r = r :+ m((i.toInt).toInt)((j.toInt).toInt)
        }
        j = j + 1
      }
      res = res :+ r
    }
    i = i + 1
  }
  return res
}

def determinant(m: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  val n: BigInt = BigInt((m).size)
  if (n == 1) {
    return m((0.toInt).toInt)((0.toInt).toInt)
  }
  if (n == 2) {
    return m((0.toInt).toInt)((0.toInt).toInt) * m((1.toInt).toInt)((1.toInt).toInt) - m((0.toInt).toInt)((1.toInt).toInt) * m((1.toInt).toInt)((0.toInt).toInt)
  }
  var det: BigInt = 0
  var col: BigInt = 0
  while (col < n) {
    val minor_mat: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_minor(m, 0, col)
    var sign: BigInt = 1
    if (col % 2 == 1) {
      sign = -1
    }
    det = det + sign * m((0.toInt).toInt)((col.toInt).toInt) * determinant(minor_mat)
    col = col + 1
  }
  return det
}

def cofactor_matrix(m: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((m).size)
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      val minor_mat: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_minor(m, i, j)
      val det_minor: BigInt = determinant(minor_mat)
      var sign: BigInt = 1
      if ((i + j) % 2 == 1) {
        sign = -1
      }
      row = row :+ sign * det_minor
      j = j + 1
    }
    res = res :+ row
    i = i + 1
  }
  return res
}

def transpose(m: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val rows: BigInt = BigInt((m).size)
  val cols: BigInt = BigInt((m((0.toInt).toInt)).size)
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var j: BigInt = 0
  while (j < cols) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var i: BigInt = 0
    while (i < rows) {
      row = row :+ m((i.toInt).toInt)((j.toInt).toInt)
      i = i + 1
    }
    res = res :+ row
    j = j + 1
  }
  return res
}

def matrix_mod(m: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((m).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((m((i.toInt).toInt)).size)) {
      row = row :+ mod36(m((i.toInt).toInt)((j.toInt).toInt))
      j = j + 1
    }
    res = res :+ row
    i = i + 1
  }
  return res
}

def scalar_matrix_mult(s: BigInt, m: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((m).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((m((i.toInt).toInt)).size)) {
      row = row :+ mod36(s * m((i.toInt).toInt)((j.toInt).toInt))
      j = j + 1
    }
    res = res :+ row
    i = i + 1
  }
  return res
}

def adjugate(m: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val cof: ArrayBuffer[ArrayBuffer[BigInt]] = cofactor_matrix(m)
  val n: BigInt = BigInt((cof).size)
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      row = row :+ cof((j.toInt).toInt)((i.toInt).toInt)
      j = j + 1
    }
    res = res :+ row
    i = i + 1
  }
  return res
}

def multiply_matrix_vector(m: ArrayBuffer[ArrayBuffer[BigInt]], v: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((m).size)
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var sum: BigInt = 0
    var j: BigInt = 0
    while (j < n) {
      sum = sum + m((i.toInt).toInt)((j.toInt).toInt) * v((j.toInt).toInt)
      j = j + 1
    }
    res = res :+ mod36(sum)
    i = i + 1
  }
  return res
}

def inverse_key(key: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val det_val: BigInt = determinant(key)
  var det_mod: BigInt = mod36(det_val)
  var det_inv: BigInt = 0
  var i: BigInt = 0
  val _br22 = new Breaks
  _br22.breakable {
    while (i < 36) {
      if (det_mod * i % 36 == 1) {
        det_inv = i
        _br22.break()
      }
      i = i + 1
    }
  }
  val adj: ArrayBuffer[ArrayBuffer[BigInt]] = adjugate(key)
  val tmp: ArrayBuffer[ArrayBuffer[BigInt]] = scalar_matrix_mult(det_inv, adj)
  val res: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_mod(tmp)
  return res
}

def hill_encrypt(key: ArrayBuffer[ArrayBuffer[BigInt]], text: String): String = {
  val break_key: BigInt = BigInt((key).size)
  val processed: String = process_text(text, break_key)
  var encrypted: String = ""
  var i: BigInt = 0
  while (i < BigInt((processed).size)) {
    var vec: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < break_key) {
      vec = vec :+ replace_letters((processed.slice(((i + j).toInt).toInt, ((i + j).toInt).toInt + 1)).toString)
      j = j + 1
    }
    val enc_vec: ArrayBuffer[BigInt] = multiply_matrix_vector(key, vec)
    var k: BigInt = 0
    while (k < break_key) {
      encrypted = encrypted + replace_digits(enc_vec((k.toInt).toInt))
      k = k + 1
    }
    i = i + break_key
  }
  return encrypted
}

def hill_decrypt(key: ArrayBuffer[ArrayBuffer[BigInt]], text: String): String = {
  val break_key: BigInt = BigInt((key).size)
  val decrypt_key: ArrayBuffer[ArrayBuffer[BigInt]] = inverse_key(key)
  val processed: String = process_text(text, break_key)
  var decrypted: String = ""
  var i: BigInt = 0
  while (i < BigInt((processed).size)) {
    var vec: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < break_key) {
      vec = vec :+ replace_letters((processed.slice(((i + j).toInt).toInt, ((i + j).toInt).toInt + 1)).toString)
      j = j + 1
    }
    val dec_vec: ArrayBuffer[BigInt] = multiply_matrix_vector(decrypt_key, vec)
    var k: BigInt = 0
    while (k < break_key) {
      decrypted = decrypted + replace_digits(dec_vec((k.toInt).toInt))
      k = k + 1
    }
    i = i + break_key
  }
  return decrypted
}

val KEY_STRING: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

val key: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(2, 5), ArrayBuffer(1, 6))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(hill_encrypt(key, "testing hill cipher"))
    println(hill_encrypt(key, "hello"))
    println(hill_decrypt(key, "WHXYJOLM9C6XT085LL"))
    println(hill_decrypt(key, "85FF00"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
