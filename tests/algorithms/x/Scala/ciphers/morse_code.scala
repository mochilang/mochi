// Generated by Mochi v0.10.59 on 2025-08-06 21:53:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_upper_char(c: String): String = {
  if (c == "a") {
    return "A"
  }
  if (c == "b") {
    return "B"
  }
  if (c == "c") {
    return "C"
  }
  if (c == "d") {
    return "D"
  }
  if (c == "e") {
    return "E"
  }
  if (c == "f") {
    return "F"
  }
  if (c == "g") {
    return "G"
  }
  if (c == "h") {
    return "H"
  }
  if (c == "i") {
    return "I"
  }
  if (c == "j") {
    return "J"
  }
  if (c == "k") {
    return "K"
  }
  if (c == "l") {
    return "L"
  }
  if (c == "m") {
    return "M"
  }
  if (c == "n") {
    return "N"
  }
  if (c == "o") {
    return "O"
  }
  if (c == "p") {
    return "P"
  }
  if (c == "q") {
    return "Q"
  }
  if (c == "r") {
    return "R"
  }
  if (c == "s") {
    return "S"
  }
  if (c == "t") {
    return "T"
  }
  if (c == "u") {
    return "U"
  }
  if (c == "v") {
    return "V"
  }
  if (c == "w") {
    return "W"
  }
  if (c == "x") {
    return "X"
  }
  if (c == "y") {
    return "Y"
  }
  if (c == "z") {
    return "Z"
  }
  return c
}

def to_upper(s: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    res = res + to_upper_char((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    i = i + 1
  }
  return res
}

def index_of(xs: ArrayBuffer[String], target: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == target) {
      return i
    }
    i = i + 1
  }
  return -1
}

def encrypt(message: String): String = {
  val msg: String = to_upper(message)
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((msg).length)) {
    val c = msg.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val idx: BigInt = index_of(CHARS, c)
    if (idx >= 0) {
      if (res != "") {
        res = res + " "
      }
      res = res + CODES((idx.toInt).toInt)
    }
    i = i + 1
  }
  return res
}

def split_spaces(s: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var current: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch == " ") {
      if (current != "") {
        res = res :+ current
        current = ""
      }
    } else {
      current = current + ch
    }
    i = i + 1
  }
  if (current != "") {
    res = res :+ current
  }
  return res
}

def decrypt(message: String): String = {
  val parts: ArrayBuffer[String] = split_spaces(message)
  var res: String = ""
  for (code <- parts) {
    val idx: BigInt = index_of(CODES, code)
    if (idx >= 0) {
      res = res + CHARS((idx.toInt).toInt)
    }
  }
  return res
}

val CHARS: ArrayBuffer[String] = ArrayBuffer("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " ")

val CODES: ArrayBuffer[String] = ArrayBuffer(".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/")

val msg: String = "Morse code here!"

val enc: String = encrypt(msg)

val dec: String = decrypt(enc)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(msg)
    println(enc)
    println(dec)
    println(encrypt("Sos!"))
    println(decrypt("... --- ... -.-.--"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
