// Generated by Mochi v0.10.59 on 2025-08-06 21:53:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand(max: BigInt): BigInt = {
  seed = (seed * 1103515245 + 12345) % 2147483647
  return seed % max
}

def generate_valid_block_size(message_length: BigInt): BigInt = {
  var factors: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 2
  while (i <= message_length) {
    if (message_length % i == 0) {
      factors = factors :+ i
    }
    i = i + 1
  }
  val idx: BigInt = rand(BigInt((factors).size))
  return factors((idx.toInt).toInt)
}

def generate_permutation_key(block_size: BigInt): ArrayBuffer[BigInt] = {
  var digits: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < block_size) {
    digits = digits :+ i
    i = i + 1
  }
  var j: BigInt = block_size - 1
  while (j > 0) {
    val k: BigInt = rand(j + 1)
    val temp: BigInt = digits((j.toInt).toInt)
    digits((j).toInt) = digits((k.toInt).toInt)
    digits((k).toInt) = temp
    j = j - 1
  }
  return digits
}

def encrypt(message: String, key: ArrayBuffer[BigInt], block_size: BigInt): String = {
  var encrypted: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).length)) {
    val block: String = message.slice((i).toInt, (i + block_size).toInt)
    var j: BigInt = 0
    while (j < block_size) {
      encrypted = encrypted + block.slice((key((j.toInt).toInt)).toInt, (key((j.toInt).toInt) + 1).toInt)
      j = j + 1
    }
    i = i + block_size
  }
  return encrypted
}

def repeat_string(times: BigInt): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < times) {
    res = res :+ ""
    i = i + 1
  }
  return res
}

def decrypt(encrypted: String, key: ArrayBuffer[BigInt]): String = {
  val klen: BigInt = BigInt((key).size)
  var decrypted: String = ""
  var i: BigInt = 0
  while (i < BigInt((encrypted).length)) {
    val block: String = encrypted.slice((i).toInt, (i + klen).toInt)
    var original: ArrayBuffer[String] = repeat_string(klen)
    var j: BigInt = 0
    while (j < klen) {
      original((key((j.toInt).toInt)).toInt) = block.slice((j).toInt, (j + 1).toInt)
      j = j + 1
    }
    j = 0
    while (j < klen) {
      decrypted = decrypted + original((j.toInt).toInt)
      j = j + 1
    }
    i = i + klen
  }
  return decrypted
}

var seed: BigInt = 1

val message: String = "HELLO WORLD"

val block_size: BigInt = generate_valid_block_size(BigInt((message).length))

val key: ArrayBuffer[BigInt] = generate_permutation_key(block_size)

val encrypted: String = encrypt(message, key, block_size)

val decrypted: String = decrypt(encrypted, key)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Block size: " + String.valueOf(block_size))
    println("Key: " + String.valueOf(key))
    println("Encrypted: " + encrypted)
    println("Decrypted: " + decrypted)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
