// Generated by Mochi v0.10.59 on 2025-08-06 22:00:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def find_index(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + 1
  }
  return -1
}

def to_upper_char(ch: String): String = {
  val idx: BigInt = find_index(LETTERS_LOWER, ch)
  if (idx >= 0) {
    return (LETTERS.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)).toString
  }
  return ch
}

def to_lower_char(ch: String): String = {
  val idx: BigInt = find_index(LETTERS, ch)
  if (idx >= 0) {
    return (LETTERS_LOWER.slice((idx.toInt).toInt, (idx.toInt).toInt + 1)).toString
  }
  return ch
}

def is_upper(ch: String): Boolean = {
  return find_index(LETTERS, ch) >= 0
}

def to_upper_string(s: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    res = res + to_upper_char((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    i = i + 1
  }
  return res
}

val LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val LETTERS_LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val key: String = "HDarji"

val message: String = "This is Harshil Darji from Dharmaj."

val key_up: String = to_upper_string(key)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var encrypted: String = ""
    var key_index: BigInt = 0
    var i: BigInt = 0
    while (i < BigInt((message).length)) {
      val symbol = message.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      val upper_symbol: String = to_upper_char(symbol)
      var num: BigInt = find_index(LETTERS, upper_symbol)
      if (num >= 0) {
        num = num + find_index(LETTERS, (key_up.slice((key_index.toInt).toInt, (key_index.toInt).toInt + 1)).toString)
        num = num % BigInt((LETTERS).length)
        if (is_upper(symbol)) {
          encrypted = encrypted + LETTERS.slice((num.toInt).toInt, (num.toInt).toInt + 1)
        } else {
          encrypted = encrypted + to_lower_char((LETTERS.slice((num.toInt).toInt, (num.toInt).toInt + 1)).toString)
        }
        key_index = key_index + 1
        if (key_index == BigInt((key_up).length)) {
          key_index = 0
        }
      } else {
        encrypted = encrypted + symbol
      }
      i = i + 1
    }
    println(encrypted)
    var decrypted: String = ""
    key_index = 0
    i = 0
    while (i < BigInt((encrypted).length)) {
      val symbol = encrypted.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      val upper_symbol: String = to_upper_char(symbol)
      var num: BigInt = find_index(LETTERS, upper_symbol)
      if (num >= 0) {
        num = num - find_index(LETTERS, (key_up.slice((key_index.toInt).toInt, (key_index.toInt).toInt + 1)).toString)
        num = num % BigInt((LETTERS).length)
        if (is_upper(symbol)) {
          decrypted = decrypted + LETTERS.slice((num.toInt).toInt, (num.toInt).toInt + 1)
        } else {
          decrypted = decrypted + to_lower_char((LETTERS.slice((num.toInt).toInt, (num.toInt).toInt + 1)).toString)
        }
        key_index = key_index + 1
        if (key_index == BigInt((key_up).length)) {
          key_index = 0
        }
      } else {
        decrypted = decrypted + symbol
      }
      i = i + 1
    }
    println(decrypted)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
