// Generated by Mochi v0.10.59 on 2025-08-06 21:53:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def letter_to_numbers(letter: String): ArrayBuffer[BigInt] = {
  var i: BigInt = 0
  while (i < BigInt((square).size)) {
    var j: BigInt = 0
    while (j < BigInt((square((i.toInt).toInt)).size)) {
      if (square((i.toInt).toInt)((j.toInt).toInt) == letter) {
        return ArrayBuffer(i + 1, j + 1)
      }
      j = j + 1
    }
    i = i + 1
  }
  return ArrayBuffer(0, 0)
}

def numbers_to_letter(index1: BigInt, index2: BigInt): String = {
  return square(((index1 - 1).toInt).toInt)(((index2 - 1).toInt).toInt)
}

def char_to_int(ch: String): BigInt = {
  if (ch == "1") {
    return 1
  }
  if (ch == "2") {
    return 2
  }
  if (ch == "3") {
    return 3
  }
  if (ch == "4") {
    return 4
  }
  if (ch == "5") {
    return 5
  }
  return 0
}

def encode(_message: String): String = {
  var message: String = _message
  message = (message.toLowerCase()).toString
  var encoded: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).size)) {
    var ch: String = message.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch == "j") {
      ch = "i"
    }
    if (ch != " ") {
      val nums: ArrayBuffer[BigInt] = letter_to_numbers(ch)
      encoded = encoded + String.valueOf(nums((0.toInt).toInt)) + String.valueOf(nums((1.toInt).toInt))
    } else {
      encoded = encoded + " "
    }
    i = i + 1
  }
  return encoded
}

def decode(message: String): String = {
  var decoded: String = ""
  var i: BigInt = 0
  while (i < BigInt((message).size)) {
    if (message.slice((i.toInt).toInt, (i.toInt).toInt + 1) == " ") {
      decoded = decoded + " "
      i = i + 1
    } else {
      val index1: BigInt = char_to_int((message.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
      val index2: BigInt = char_to_int((message.slice(((i + 1).toInt).toInt, ((i + 1).toInt).toInt + 1)).toString)
      val letter: String = numbers_to_letter(index1, index2)
      decoded = decoded + letter
      i = i + 2
    }
  }
  return decoded
}

val square: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("a", "b", "c", "d", "e"), ArrayBuffer("f", "g", "h", "i", "k"), ArrayBuffer("l", "m", "n", "o", "p"), ArrayBuffer("q", "r", "s", "t", "u"), ArrayBuffer("v", "w", "x", "y", "z"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encode("test message"))
    println(encode("Test Message"))
    println(decode("44154344 32154343112215"))
    println(decode("4415434432154343112215"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
