// Generated by Mochi v0.10.59 on 2025-08-06 21:48:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = (if (a < 0) -a else a)
  var y: BigInt = (if (b < 0) -b else b)
  while (y != 0) {
    val t: BigInt = x % y
    x = y
    y = t
  }
  return x
}

def find_mod_inverse(a: BigInt, m: BigInt): BigInt = {
  if (gcd(a, m) != 1) {
    throw new RuntimeException(String.valueOf("mod inverse of " + String.valueOf(a) + " and " + String.valueOf(m) + " does not exist"))
  }
  var u1: BigInt = 1
  var u2: BigInt = 0
  var u3: BigInt = a
  var v1: BigInt = 0
  var v2: BigInt = 1
  var v3: BigInt = m
  while (v3 != 0) {
    val q: BigInt = u3 / v3
    val t1: BigInt = u1 - q * v1
    val t2: BigInt = u2 - q * v2
    val t3: BigInt = u3 - q * v3
    u1 = v1
    u2 = v2
    u3 = v3
    v1 = t1
    v2 = t2
    v3 = t3
  }
  var res: BigInt = u1 % m
  if (res < 0) {
    res = res + m
  }
  return res
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(find_mod_inverse(3, 11)))
    println(String.valueOf(find_mod_inverse(7, 26)))
    println(String.valueOf(find_mod_inverse(11, 26)))
    println(String.valueOf(find_mod_inverse(17, 43)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
