// Generated by Mochi v0.10.59 on 2025-08-06 21:49:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def list_contains(xs: ArrayBuffer[String], x: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return true
    }
    i = i + 1
  }
  return false
}

def index_in_string(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def contains_char(s: String, ch: String): Boolean = {
  return index_in_string(s, ch) >= 0
}

def to_uppercase(s: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    val idx: BigInt = index_in_string(low_abc, ch)
    if (idx >= 0) {
      res = res + abc.slice((idx).toInt, (idx + 1).toInt)
    } else {
      res = res + ch
    }
    i = i + 1
  }
  return res
}

def plugboard_map(pb: ArrayBuffer[String], ch: String): String = {
  var i: BigInt = 0
  while (i < BigInt((pb).size)) {
    val pair: String = pb((i.toInt).toInt)
    val a: String = pair.slice((0).toInt, (1).toInt)
    val b: String = pair.slice((1).toInt, (2).toInt)
    if (ch == a) {
      return b
    }
    if (ch == b) {
      return a
    }
    i = i + 1
  }
  return ch
}

def reflector_map(ch: String): String = {
  var i: BigInt = 0
  while (i < BigInt((reflector_pairs).size)) {
    val pair: String = reflector_pairs((i.toInt).toInt)
    val a: String = pair.slice((0).toInt, (1).toInt)
    val b: String = pair.slice((1).toInt, (2).toInt)
    if (ch == a) {
      return b
    }
    if (ch == b) {
      return a
    }
    i = i + 1
  }
  return ch
}

def count_unique(xs: ArrayBuffer[String]): BigInt = {
  var unique: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if ((!list_contains(unique, xs((i.toInt).toInt))).asInstanceOf[Boolean]) {
      unique = unique :+ xs((i.toInt).toInt)
    }
    i = i + 1
  }
  return BigInt((unique).size)
}

def build_plugboard(pbstring: String): ArrayBuffer[String] = {
  if (BigInt((pbstring).size) == 0) {
    return (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
  }
  if (BigInt((pbstring).size) % 2 != 0) {
    throw new RuntimeException(String.valueOf("Odd number of symbols(" + String.valueOf(BigInt((pbstring).size)) + ")"))
  }
  var pbstring_nospace: String = ""
  var i: BigInt = 0
  while (i < BigInt((pbstring).size)) {
    val ch: String = pbstring.slice((i).toInt, (i + 1).toInt)
    if (ch != " ") {
      pbstring_nospace = pbstring_nospace + ch
    }
    i = i + 1
  }
  var seen: ArrayBuffer[String] = ArrayBuffer()
  i = 0
  while (i < BigInt((pbstring_nospace).size)) {
    val ch: String = pbstring_nospace.slice((i).toInt, (i + 1).toInt)
    if ((!contains_char(abc, ch)).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("'" + ch + "' not in list of symbols"))
    }
    if (list_contains(seen, ch)) {
      throw new RuntimeException(String.valueOf("Duplicate symbol(" + ch + ")"))
    }
    seen = seen :+ ch
    i = i + 1
  }
  var pb: ArrayBuffer[String] = ArrayBuffer()
  i = 0
  while (i < BigInt((pbstring_nospace).size) - 1) {
    val a: String = pbstring_nospace.slice((i).toInt, (i + 1).toInt)
    val b: String = pbstring_nospace.slice((i + 1).toInt, (i + 2).toInt)
    pb = pb :+ a + b
    i = i + 2
  }
  return pb
}

def validator(rotpos: ArrayBuffer[BigInt], rotsel: ArrayBuffer[String], pb: String): Any = {
  if (count_unique(rotsel) < 3) {
    throw new RuntimeException(String.valueOf("Please use 3 unique rotors (not " + String.valueOf(count_unique(rotsel)) + ")"))
  }
  if (BigInt((rotpos).size) != 3) {
    throw new RuntimeException(String.valueOf("Rotor position must have 3 values"))
  }
  val r1: BigInt = rotpos((0.toInt).toInt)
  val r2: BigInt = rotpos((1.toInt).toInt)
  val r3: BigInt = rotpos((2.toInt).toInt)
  if ((!(0 < r1 && r1 <= BigInt((abc).length)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("First rotor position is not within range of 1..26 (" + String.valueOf(r1) + ")"))
  }
  if ((!(0 < r2 && r2 <= BigInt((abc).length)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Second rotor position is not within range of 1..26 (" + String.valueOf(r2) + ")"))
  }
  if ((!(0 < r3 && r3 <= BigInt((abc).length)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Third rotor position is not within range of 1..26 (" + String.valueOf(r3) + ")"))
  }
}

def enigma(text: String, rotor_position: ArrayBuffer[BigInt], rotor_selection: ArrayBuffer[String], plugb: String): String = {
  val up_text: String = to_uppercase(text)
  val up_pb: String = to_uppercase(plugb)
  validator(rotor_position, rotor_selection, up_pb)
  val plugboard: ArrayBuffer[String] = build_plugboard(up_pb)
  var rotorpos1: BigInt = rotor_position((0.toInt).toInt) - 1
  var rotorpos2: BigInt = rotor_position((1.toInt).toInt) - 1
  var rotorpos3: BigInt = rotor_position((2.toInt).toInt) - 1
  val rotor_a: String = rotor_selection((0.toInt).toInt)
  val rotor_b: String = rotor_selection((1.toInt).toInt)
  val rotor_c: String = rotor_selection((2.toInt).toInt)
  var result: String = ""
  var i: BigInt = 0
  while (i < BigInt((up_text).size)) {
    var symbol: String = up_text.slice((i).toInt, (i + 1).toInt)
    if (contains_char(abc, symbol)) {
      symbol = plugboard_map(plugboard, symbol)
      var index: BigInt = index_in_string(abc, symbol) + rotorpos1
      symbol = rotor_a.slice((index % BigInt((abc).length)).toInt, (index % BigInt((abc).length) + 1).toInt)
      index = index_in_string(abc, symbol) + rotorpos2
      symbol = rotor_b.slice((index % BigInt((abc).length)).toInt, (index % BigInt((abc).length) + 1).toInt)
      index = index_in_string(abc, symbol) + rotorpos3
      symbol = rotor_c.slice((index % BigInt((abc).length)).toInt, (index % BigInt((abc).length) + 1).toInt)
      symbol = reflector_map(symbol)
      index = index_in_string(rotor_c, symbol) - rotorpos3
      if (index < 0) {
        index = index + BigInt((abc).length)
      }
      symbol = abc.slice((index).toInt, (index + 1).toInt)
      index = index_in_string(rotor_b, symbol) - rotorpos2
      if (index < 0) {
        index = index + BigInt((abc).length)
      }
      symbol = abc.slice((index).toInt, (index + 1).toInt)
      index = index_in_string(rotor_a, symbol) - rotorpos1
      if (index < 0) {
        index = index + BigInt((abc).length)
      }
      symbol = abc.slice((index).toInt, (index + 1).toInt)
      symbol = plugboard_map(plugboard, symbol)
      rotorpos1 = rotorpos1 + 1
      if (rotorpos1 >= BigInt((abc).length)) {
        rotorpos1 = 0
        rotorpos2 = rotorpos2 + 1
      }
      if (rotorpos2 >= BigInt((abc).length)) {
        rotorpos2 = 0
        rotorpos3 = rotorpos3 + 1
      }
      if (rotorpos3 >= BigInt((abc).length)) {
        rotorpos3 = 0
      }
    }
    result = result + symbol
    i = i + 1
  }
  return result
}

def main(): Any = {
  val message: String = "This is my Python script that emulates the Enigma machine from WWII."
  val rotor_pos: ArrayBuffer[BigInt] = ArrayBuffer(1, 1, 1)
  val pb: String = "pictures"
  val rotor_sel: ArrayBuffer[String] = ArrayBuffer(rotor2, rotor4, rotor8)
  val en: String = enigma(message, rotor_pos, rotor_sel, pb)
  println("Encrypted message: " + en)
  println("Decrypted message: " + enigma(en, rotor_pos, rotor_sel, pb))
}

val abc: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val low_abc: String = "abcdefghijklmnopqrstuvwxyz"

val rotor1: String = "EGZWVONAHDCLFQMSIPJBYUKXTR"

val rotor2: String = "FOBHMDKEXQNRAULPGSJVTYICZW"

val rotor3: String = "ZJXESIUQLHAVRMDOYGTNFWPBKC"

val rotor4: String = "RMDJXFUWGISLHVTCQNKYPBEZOA"

val rotor5: String = "SGLCPQWZHKXAREONTFBVIYJUDM"

val rotor6: String = "HVSICLTYKQUBXDWAJZOMFGPREN"

val rotor7: String = "RZWQHFMVDBKICJLNTUXAGYPSOE"

val rotor8: String = "LFKIJODBEGAMQPXVUHYSTCZRWN"

val rotor9: String = "KOAEGVDHXPQZMLFTYWJNBRCIUS"

val reflector_pairs: ArrayBuffer[String] = ArrayBuffer("AN", "BO", "CP", "DQ", "ER", "FS", "GT", "HU", "IV", "JW", "KX", "LY", "MZ")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
