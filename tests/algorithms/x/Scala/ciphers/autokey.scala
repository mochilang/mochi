// Generated by Mochi v0.10.59 on 2025-08-06 21:27:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_lowercase(s: String): String = {
  var res: String = ""
  var i: BigInt = 0
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((s).size)) {
      val c = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      var j: BigInt = 0
      var found: Boolean = false
      val _br1 = new Breaks
      _br1.breakable {
        while (j < 26) {
          if (c == UPPER.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
            res = res + LOWER.slice((j.toInt).toInt, (j.toInt).toInt + 1)
            found = true
            _br1.break()
          }
          j = j + 1
        }
      }
      if ((!found).asInstanceOf[Boolean]) {
        res = res + c
      }
      i = i + 1
    }
  }
  return res
}

def char_index(c: String): BigInt = {
  var i: BigInt = 0
  while (i < 26) {
    if (c == LOWER.slice((i.toInt).toInt, (i.toInt).toInt + 1)) {
      return i
    }
    i = i + 1
  }
  return BigInt((-1).toString.toDouble.toInt)
}

def index_char(i: BigInt): String = {
  return (LOWER.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString
}

def encrypt(_plaintext: String, key: String): String = {
  var plaintext: String = _plaintext
  if (BigInt((plaintext).size) == 0) {
    throw new RuntimeException(String.valueOf("plaintext is empty"))
  }
  if (BigInt((key).size) == 0) {
    throw new RuntimeException(String.valueOf("key is empty"))
  }
  var full_key: String = key + plaintext
  plaintext = to_lowercase(plaintext)
  full_key = to_lowercase(full_key)
  var p_i: BigInt = 0
  var k_i: BigInt = 0
  var ciphertext: String = ""
  while (p_i < BigInt((plaintext).size)) {
    val p_char = plaintext.slice((p_i.toInt).toInt, (p_i.toInt).toInt + 1)
    val p_idx: BigInt = char_index(p_char)
    if (p_idx < 0) {
      ciphertext = ciphertext + p_char
      p_i = p_i + 1
    } else {
      val k_char = full_key.slice((k_i.toInt).toInt, (k_i.toInt).toInt + 1)
      val k_idx: BigInt = char_index(k_char)
      if (k_idx < 0) {
        k_i = k_i + 1
      } else {
        val c_idx: BigInt = (p_idx + k_idx) % 26
        ciphertext = ciphertext + index_char(c_idx)
        k_i = k_i + 1
        p_i = p_i + 1
      }
    }
  }
  return ciphertext
}

def decrypt(ciphertext: String, key: String): String = {
  if (BigInt((ciphertext).size) == 0) {
    throw new RuntimeException(String.valueOf("ciphertext is empty"))
  }
  if (BigInt((key).size) == 0) {
    throw new RuntimeException(String.valueOf("key is empty"))
  }
  var current_key: String = to_lowercase(key)
  var c_i: BigInt = 0
  var k_i: BigInt = 0
  var plaintext: String = ""
  while (c_i < BigInt((ciphertext).size)) {
    val c_char = ciphertext.slice((c_i.toInt).toInt, (c_i.toInt).toInt + 1)
    val c_idx: BigInt = char_index(c_char)
    if (c_idx < 0) {
      plaintext = plaintext + c_char
    } else {
      val k_char = current_key.slice((k_i.toInt).toInt, (k_i.toInt).toInt + 1)
      val k_idx: BigInt = char_index(k_char)
      val p_idx: BigInt = (c_idx - k_idx + 26) % 26
      val p_char: String = index_char(p_idx)
      plaintext = plaintext + p_char
      current_key = current_key + p_char
      k_i = k_i + 1
    }
    c_i = c_i + 1
  }
  return plaintext
}

val LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(encrypt("hello world", "coffee"))
    println(decrypt("jsqqs avvwo", "coffee"))
    println(encrypt("coffee is good as python", "TheAlgorithms"))
    println(decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
