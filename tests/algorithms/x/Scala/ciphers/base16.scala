// Generated by Mochi v0.10.59 on 2025-08-06 21:27:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def base16_encode(data: ArrayBuffer[BigInt]): String = {
  val digits: String = "0123456789ABCDEF"
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    val b: BigInt = data((i.toInt).toInt)
    if ((b < 0 || b > 255).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("byte out of range"))
    }
    val hi: BigInt = b / 16
    val lo: BigInt = b % 16
    res = res + digits.slice((hi).toInt, (hi + 1).toInt) + digits.slice((lo).toInt, (lo + 1).toInt)
    i = i + 1
  }
  return res
}

def base16_decode(data: String): ArrayBuffer[BigInt] = {
  val digits: String = "0123456789ABCDEF"
  if (BigInt((data).size) % 2 != 0) {
    throw new RuntimeException(String.valueOf("Base16 encoded data is invalid: Data does not have an even number of hex digits."))
  }
  def hex_value(ch: String): BigInt = {
    var j: BigInt = 0
    while (j < 16) {
      if (digits.slice((j).toInt, (j + 1).toInt) == ch) {
        return j
      }
      j = j + 1
    }
    return BigInt((-1).toString.toDouble.toInt)
  }
  var out: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((data).size)) {
    val hi_char: String = data.slice((i).toInt, (i + 1).toInt)
    val lo_char: String = data.slice((i + 1).toInt, (i + 2).toInt)
    val hi = hex_value(hi_char)
    val lo = hex_value(lo_char)
    if ((BigInt(hi.toString.toDouble.toInt) < 0 || BigInt(lo.toString.toDouble.toInt) < 0).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters."))
    }
    out = out :+ BigInt(hi.toString.toDouble.toInt) * 16 + BigInt(lo.toString.toDouble.toInt)
    i = i + 2
  }
  return out
}

val example1: ArrayBuffer[BigInt] = ArrayBuffer(72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33)

val example2: ArrayBuffer[BigInt] = ArrayBuffer(72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(base16_encode(example1))
    println(base16_encode(example2))
    println(base16_encode(ArrayBuffer()))
    println(String.valueOf(base16_decode("48656C6C6F20576F726C6421")))
    println(String.valueOf(base16_decode("48454C4C4F20574F524C4421")))
    println(String.valueOf(base16_decode("")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
