// Generated by Mochi v0.10.63 on 2025-08-11 17:34:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def to_upper(s: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((s).size)) {
      val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
      var j: BigInt = BigInt(0)
      var up: String = c
      val _br1 = new Breaks
      _br1.breakable {
        while (j < BigInt((LOWER).length)) {
          if (c == LOWER.slice((j).toInt, (j + BigInt(1)).toInt)) {
            up = UPPER.slice((j).toInt, (j + BigInt(1)).toInt)
            _br1.break()
          }
          j = j + BigInt(1)
        }
      }
      res = res + up
      i = i + BigInt(1)
    }
  }
  return res
}

def char_in(chars: String, c: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((chars).size)) {
    if (chars.slice((i).toInt, (i + BigInt(1)).toInt) == c) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def remove_non_letters(message: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((message).size)) {
    val ch: String = message.slice((i).toInt, (i + BigInt(1)).toInt)
    if (char_in(LETTERS_AND_SPACE, ch)) {
      res = res + ch
    }
    i = i + BigInt(1)
  }
  return res
}

def split_spaces(text: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((text).size)) {
    val ch: String = text.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == " ") {
      res = res :+ (current)
      current = ""
    } else {
      current = current + ch
    }
    i = i + BigInt(1)
  }
  res = res :+ (current)
  return res
}

def load_dictionary(): scala.collection.mutable.Map[String,Boolean] = {
  val words: ArrayBuffer[String] = ArrayBuffer("HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG")
  var dict: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  for (w <- words) {
    dict.update(w, true)
  }
  return dict
}

def get_english_count(message: String): Double = {
  val upper: String = to_upper(message)
  val cleaned: String = remove_non_letters(upper)
  val possible: ArrayBuffer[String] = split_spaces(cleaned)
  var matches: BigInt = BigInt(0)
  var total: BigInt = BigInt(0)
  for (w <- possible) {
    if (w != "") {
      total = total + BigInt(1)
      if ((ENGLISH_WORDS.contains(w)).asInstanceOf[Boolean]) {
        matches = matches + BigInt(1)
      }
    }
  }
  if (total == BigInt(0)) {
    return 0.0
  }
  return matches.toString.toDouble / total.toString.toDouble
}

def is_english(message: String, word_percentage: BigInt, letter_percentage: BigInt): Boolean = {
  val words_match: Boolean = get_english_count(message) * 100.0 >= (word_percentage.toString.toDouble)
  val num_letters: BigInt = BigInt((remove_non_letters(message)).size)
  val letters_pct: Double = (if (BigInt((message).size) == BigInt(0)) 0.0 else num_letters.toString.toDouble / (BigInt((message).size)).toDouble * 100.0)
  val letters_match: Boolean = letters_pct >= (letter_percentage.toString.toDouble)
  return (words_match && letters_match).asInstanceOf[Boolean]
}

val LETTERS_AND_SPACE: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"

val LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val ENGLISH_WORDS: scala.collection.mutable.Map[String,Boolean] = load_dictionary()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(is_english("Hello World", BigInt(20), BigInt(85))))
    println(_str(is_english("llold HorWd", BigInt(20), BigInt(85))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
