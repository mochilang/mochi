// Generated by Mochi v0.10.70 on 2025-08-23 13:52:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private val _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/strings"
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

private def _read_file(path: String): String = {
  val f = new java.io.File(path)
  val p = if (f.exists) f else new java.io.File(_dataDir, path)
  try {
    val src = scala.io.Source.fromFile(p)
    try src.mkString finally src.close()
  } catch { case _: Throwable => "" }
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    var ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == sep) {
      res = (res :+ (current))
      current = ""
    } else {
      current = current + ch
    }
    i = i + BigInt(1)
  }
  res = (res :+ (current))
  return res
}

def insertion_sort(arr: ArrayBuffer[String]): ArrayBuffer[String] = {
  var a: ArrayBuffer[String] = arr
  var i: BigInt = BigInt(1)
  while (i < BigInt((a).size)) {
    var key: String = a.lift((i.toInt).toInt).getOrElse("")
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && a.lift((j.toInt).toInt).getOrElse("") > key) {
      a((j + BigInt(1)).toInt) = a.lift((j.toInt).toInt).getOrElse("")
      j = j - BigInt(1)
    }
    a((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return a
}

def sort_chars(word: String): String = {
  var chars: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((word).size)) {
    chars = (chars :+ (word.slice((i).toInt, (i + BigInt(1)).toInt)))
    i = i + BigInt(1)
  }
  chars = insertion_sort(chars)
  var res: String = ""
  i = BigInt(0)
  while (i < BigInt((chars).size)) {
    res = res + chars.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return res
}

def unique_sorted(words: ArrayBuffer[String]): ArrayBuffer[String] = {
  var seen: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  for (w <- words) {
    if ((w != "" && (!seen.contains(w)).asInstanceOf[Boolean])) {
      res = (res :+ (w))
      seen.update(w, true)
    }
  }
  res = insertion_sort(res)
  return res
}

def build_map(words: ArrayBuffer[String]): Any = {
  for (w <- words) {
    var sig: String = sort_chars(w)
    var arr: ArrayBuffer[String] = ArrayBuffer[String]()
    if ((word_by_signature.contains(sig))) {
      arr = word_by_signature.getOrElse(sig.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    }
    arr = (arr :+ (w))
    word_by_signature.update(sig, arr)
  }
}

def anagram(my_word: String): ArrayBuffer[String] = {
  var sig: String = sort_chars(my_word)
  if ((word_by_signature.contains(sig))) {
    return word_by_signature.getOrElse(sig.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
  }
  return ArrayBuffer[String]()
}

def main(): Any = {
  var text: String = _read_file("words.txt")
  var lines: ArrayBuffer[String] = ArrayBuffer(text.split("\n"): _*)
  var words: ArrayBuffer[String] = unique_sorted(lines)
  build_map(words)
  for (w <- words) {
    var anas: ArrayBuffer[String] = anagram(w)
    if (BigInt((anas).size) > BigInt(1)) {
      var line: String = w + ":"
      var i: BigInt = BigInt(0)
      while (i < BigInt((anas).size)) {
        if (i > BigInt(0)) {
          line = line + ","
        }
        line = line + anas.lift((i.toInt).toInt).getOrElse("")
        i = i + BigInt(1)
      }
      println(_str(line))
    }
  }
}

var word_by_signature: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
