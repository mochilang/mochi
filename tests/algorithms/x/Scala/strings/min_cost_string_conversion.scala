// Generated by Mochi v0.10.63 on 2025-08-11 15:38:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class TransformTables(var costs: ArrayBuffer[ArrayBuffer[BigInt]], var ops: ArrayBuffer[ArrayBuffer[String]])

def string_to_chars(s: String): ArrayBuffer[String] = {
  var chars: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    chars = chars :+ (s.slice((i).toInt, (i + BigInt(1)).toInt))
    i = i + BigInt(1)
  }
  return chars
}

def join_chars(chars: ArrayBuffer[String]): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((chars).size)) {
    res = res + chars.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return res
}

def insert_at(chars: ArrayBuffer[String], index: BigInt, ch: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < index) {
    res = res :+ (chars.lift((i.toInt).toInt).getOrElse(""))
    i = i + BigInt(1)
  }
  res = res :+ (ch)
  while (i < BigInt((chars).size)) {
    res = res :+ (chars.lift((i.toInt).toInt).getOrElse(""))
    i = i + BigInt(1)
  }
  return res
}

def remove_at(chars: ArrayBuffer[String], index: BigInt): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((chars).size)) {
    if (i != index) {
      res = res :+ (chars.lift((i.toInt).toInt).getOrElse(""))
    }
    i = i + BigInt(1)
  }
  return res
}

def make_matrix_int(rows: BigInt, cols: BigInt, init: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  for (_ <- (BigInt(0)).toInt until (rows).toInt) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    for (_2 <- (BigInt(0)).toInt until (cols).toInt) {
      row = row :+ (init)
    }
    matrix = matrix :+ (row)
  }
  return matrix
}

def make_matrix_string(rows: BigInt, cols: BigInt, init: String): ArrayBuffer[ArrayBuffer[String]] = {
  var matrix: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  for (_ <- (BigInt(0)).toInt until (rows).toInt) {
    var row: ArrayBuffer[String] = ArrayBuffer[String]()
    for (_2 <- (BigInt(0)).toInt until (cols).toInt) {
      row = row :+ (init)
    }
    matrix = matrix :+ (row)
  }
  return matrix
}

def compute_transform_tables(source_string: String, destination_string: String, copy_cost: BigInt, replace_cost: BigInt, delete_cost: BigInt, insert_cost: BigInt): TransformTables = {
  val source_seq: ArrayBuffer[String] = string_to_chars(source_string)
  val dest_seq: ArrayBuffer[String] = string_to_chars(destination_string)
  val m: BigInt = BigInt((source_seq).size)
  val n: BigInt = BigInt((dest_seq).size)
  var costs: ArrayBuffer[ArrayBuffer[BigInt]] = make_matrix_int(m + BigInt(1), n + BigInt(1), BigInt(0))
  var ops: ArrayBuffer[ArrayBuffer[String]] = make_matrix_string(m + BigInt(1), n + BigInt(1), "0")
  var i: BigInt = BigInt(1)
  while (i <= m) {
    costs((i).toInt)((BigInt(0)).toInt) = i * delete_cost
    ops((i).toInt)((BigInt(0)).toInt) = "D" + source_seq.lift(((i - BigInt(1)).toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt(1)
  while (j <= n) {
    costs((BigInt(0)).toInt)((j).toInt) = j * insert_cost
    ops((BigInt(0)).toInt)((j).toInt) = "I" + dest_seq.lift(((j - BigInt(1)).toInt).toInt).getOrElse("")
    j = j + BigInt(1)
  }
  i = BigInt(1)
  while (i <= m) {
    j = BigInt(1)
    while (j <= n) {
      if (source_seq.lift(((i - BigInt(1)).toInt).toInt).getOrElse("") == dest_seq.lift(((j - BigInt(1)).toInt).toInt).getOrElse("")) {
        costs((i).toInt)((j).toInt) = costs.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) + copy_cost
        ops((i).toInt)((j).toInt) = "C" + source_seq.lift(((i - BigInt(1)).toInt).toInt).getOrElse("")
      } else {
        costs((i).toInt)((j).toInt) = costs.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) + replace_cost
        ops((i).toInt)((j).toInt) = "R" + source_seq.lift(((i - BigInt(1)).toInt).toInt).getOrElse("") + dest_seq.lift(((j - BigInt(1)).toInt).toInt).getOrElse("")
      }
      if (costs.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) + delete_cost < costs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null)) {
        costs((i).toInt)((j).toInt) = costs.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) + delete_cost
        ops((i).toInt)((j).toInt) = "D" + source_seq.lift(((i - BigInt(1)).toInt).toInt).getOrElse("")
      }
      if (costs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) + insert_cost < costs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null)) {
        costs((i).toInt)((j).toInt) = costs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) + insert_cost
        ops((i).toInt)((j).toInt) = "I" + dest_seq.lift(((j - BigInt(1)).toInt).toInt).getOrElse("")
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return TransformTables(costs, ops)
}

def assemble_transformation(ops: ArrayBuffer[ArrayBuffer[String]], i: BigInt, j: BigInt): ArrayBuffer[String] = {
  if ((i == BigInt(0) && j == BigInt(0)).asInstanceOf[Boolean]) {
    return ArrayBuffer[String]()
  }
  val op: String = ops.lift((i.toInt).toInt).getOrElse(ArrayBuffer[String]()).lift((j.toInt).toInt).getOrElse("")
  val kind: String = op.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
  if ((kind == "C" || kind == "R").asInstanceOf[Boolean]) {
    var seq: ArrayBuffer[String] = assemble_transformation(ops, i - BigInt(1), j - BigInt(1))
    seq = seq :+ (op)
    return seq
  } else {
    if (kind == "D") {
      var seq: ArrayBuffer[String] = assemble_transformation(ops, i - BigInt(1), j)
      seq = seq :+ (op)
      return seq
    } else {
      var seq: ArrayBuffer[String] = assemble_transformation(ops, i, j - BigInt(1))
      seq = seq :+ (op)
      return seq
    }
  }
  return ArrayBuffer[String]()
}

def main(): Any = {
  val copy_cost: BigInt = -BigInt(1)
  val replace_cost: BigInt = BigInt(1)
  val delete_cost: BigInt = BigInt(2)
  val insert_cost: BigInt = BigInt(2)
  val src: String = "Python"
  val dst: String = "Algorithms"
  val tables: TransformTables = compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost)
  val operations: ArrayBuffer[ArrayBuffer[String]] = tables.asInstanceOf[TransformTables].ops
  val m: BigInt = BigInt((operations).size)
  val n: BigInt = BigInt((operations.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[String]())).size)
  var sequence: ArrayBuffer[String] = assemble_transformation(operations, m - BigInt(1), n - BigInt(1))
  var string_list: ArrayBuffer[String] = string_to_chars(src)
  var idx: BigInt = BigInt(0)
  var cost: BigInt = BigInt(0)
  var k: BigInt = BigInt(0)
  while (k < BigInt((sequence).size)) {
    println(join_chars(string_list))
    val op: String = sequence.lift((k.toInt).toInt).getOrElse("")
    val kind: String = op.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
    if (kind == "C") {
      cost = cost + copy_cost
    } else {
      if (kind == "R") {
        string_list((idx).toInt) = op.slice((BigInt(2)).toInt, (BigInt(3)).toInt)
        cost = cost + replace_cost
      } else {
        if (kind == "D") {
          string_list = remove_at(string_list, idx)
          cost = cost + delete_cost
        } else {
          string_list = insert_at(string_list, idx, op.slice((BigInt(1)).toInt, (BigInt(2)).toInt))
          cost = cost + insert_cost
        }
      }
    }
    idx = idx + BigInt(1)
    k = k + BigInt(1)
  }
  println(join_chars(string_list))
  println("Cost: " + _str(cost))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
