// Generated by Mochi v0.10.63 on 2025-08-11 15:38:14 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  } else {
    return b
  }
  return null
}

def max_int(a: BigInt, b: BigInt): BigInt = {
  if (a > b) {
    return a
  } else {
    return b
  }
  return null
}

def repeat_bool(n: BigInt, value: Boolean): ArrayBuffer[Boolean] = {
  var res: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res :+ (value)
    i = i + BigInt(1)
  }
  return res
}

def set_bool(xs: ArrayBuffer[Boolean], idx: BigInt, value: Boolean): ArrayBuffer[Boolean] = {
  var res: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ (value)
    } else {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(false))
    }
    i = i + BigInt(1)
  }
  return res
}

def jaro_winkler(s1: String, s2: String): Double = {
  val len1: BigInt = BigInt((s1).size)
  val len2: BigInt = BigInt((s2).size)
  val limit: BigInt = min_int(len1, len2) / BigInt(2)
  var match1: ArrayBuffer[Boolean] = repeat_bool(len1, false)
  var match2: ArrayBuffer[Boolean] = repeat_bool(len2, false)
  var matches: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (i < len1) {
      val start: BigInt = max_int(BigInt(0), i - limit)
      val end: BigInt = min_int(i + limit + BigInt(1), len2)
      var j: BigInt = start
      val _br3 = new Breaks
      _br3.breakable {
        while (j < end) {
          if ((!match2.lift((j.toInt).toInt).getOrElse(false) && s1.slice((i).toInt, (i + BigInt(1)).toInt) == s2.slice((j).toInt, (j + BigInt(1)).toInt)).asInstanceOf[Boolean]) {
            match1 = set_bool(match1, i, true)
            match2 = set_bool(match2, j, true)
            matches = matches + BigInt(1)
            _br3.break()
          }
          j = j + BigInt(1)
        }
      }
      i = i + BigInt(1)
    }
  }
  if (matches == BigInt(0)) {
    return 0.0
  }
  var transpositions: BigInt = BigInt(0)
  var k: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < len1) {
    if (match1.lift((i.toInt).toInt).getOrElse(false)) {
      while (!match2.lift((k.toInt).toInt).getOrElse(false)) {
        k = k + BigInt(1)
      }
      if (s1.slice((i).toInt, (i + BigInt(1)).toInt) != s2.slice((k).toInt, (k + BigInt(1)).toInt)) {
        transpositions = transpositions + BigInt(1)
      }
      k = k + BigInt(1)
    }
    i = i + BigInt(1)
  }
  val m: Double = matches.toString.toDouble
  val jaro: Double = (m / len1.toString.toDouble + m / len2.toString.toDouble + (m - transpositions.toString.toDouble / 2.0) / m) / 3.0
  var prefix_len: BigInt = BigInt(0)
  i = BigInt(0)
  val _br6 = new Breaks
  _br6.breakable {
    while ((i < BigInt(4) && i < len1).asInstanceOf[Boolean] && i < len2) {
      if (s1.slice((i).toInt, (i + BigInt(1)).toInt) == s2.slice((i).toInt, (i + BigInt(1)).toInt)) {
        prefix_len = prefix_len + BigInt(1)
      } else {
        _br6.break()
      }
      i = i + BigInt(1)
    }
  }
  return jaro + 0.1 * prefix_len.toString.toDouble * (1.0 - jaro)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(jaro_winkler("hello", "world")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
