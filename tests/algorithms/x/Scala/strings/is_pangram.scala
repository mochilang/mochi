// Generated by Mochi v0.10.63 on 2025-08-11 15:37:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def is_pangram(input_str: String): Boolean = {
  var letters: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((input_str).size)) {
    val c = input_str.slice((i.toInt).toInt, (i.toInt).toInt + 1).toLowerCase()
    val is_new: Boolean = !(letters.contains(c)).asInstanceOf[Boolean]
    if ((((c != " " && 'a' <= c.charAt(BigInt(0).toInt)).asInstanceOf[Boolean] && c.charAt(BigInt(0).toInt) <= 'z').asInstanceOf[Boolean] && is_new).asInstanceOf[Boolean]) {
      letters = letters :+ (c)
    }
    i = i + BigInt(1)
  }
  return BigInt((letters).size) == BigInt(26)
}

def is_pangram_faster(input_str: String): Boolean = {
  val alphabet: String = "abcdefghijklmnopqrstuvwxyz"
  var flag: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(26)) {
    flag = flag :+ (false)
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (j < BigInt((input_str).size)) {
      val c = input_str.slice((j.toInt).toInt, (j.toInt).toInt + 1).toLowerCase()
      var k: BigInt = BigInt(0)
      val _br3 = new Breaks
      _br3.breakable {
        while (k < BigInt(26)) {
          if (alphabet.slice((k.toInt).toInt, (k.toInt).toInt + 1) == c) {
            flag((k).toInt) = true
            _br3.break()
          }
          k = k + BigInt(1)
        }
      }
      j = j + BigInt(1)
    }
  }
  var t: BigInt = BigInt(0)
  while (t < BigInt(26)) {
    if (!flag.lift((t.toInt).toInt).getOrElse(false)) {
      return false
    }
    t = t + BigInt(1)
  }
  return true
}

def is_pangram_fastest(input_str: String): Boolean = {
  val s = input_str.toLowerCase()
  val alphabet: String = "abcdefghijklmnopqrstuvwxyz"
  var i: BigInt = BigInt(0)
  while (i < BigInt((alphabet).size)) {
    val letter: String = alphabet.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (!(s.contains(letter)).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

val s1: String = "The quick brown fox jumps over the lazy dog"

val s2: String = "My name is Unknown"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(is_pangram(s1)))
    println(_str(is_pangram(s2)))
    println(_str(is_pangram_faster(s1)))
    println(_str(is_pangram_faster(s2)))
    println(_str(is_pangram_fastest(s1)))
    println(_str(is_pangram_fastest(s2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
