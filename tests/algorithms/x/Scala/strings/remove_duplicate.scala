// Generated by Mochi v0.10.63 on 2025-08-11 15:39:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split_ws(s: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var word: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == " ") {
      if (word != "") {
        res = res :+ (word)
        word = ""
      }
    } else {
      word = word + ch
    }
    i = i + BigInt(1)
  }
  if (word != "") {
    res = res :+ (word)
  }
  return res
}

def contains(xs: ArrayBuffer[String], x: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == x) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def unique(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    val w: String = xs.lift((i.toInt).toInt).getOrElse("")
    if (!(res.contains(w)).asInstanceOf[Boolean]) {
      res = res :+ (w)
    }
    i = i + BigInt(1)
  }
  return res
}

def insertion_sort(arr: ArrayBuffer[String]): ArrayBuffer[String] = {
  var a: ArrayBuffer[String] = arr
  var i: BigInt = BigInt(1)
  while (i < BigInt((a).size)) {
    val key: String = a.lift((i.toInt).toInt).getOrElse("")
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && a.lift((j.toInt).toInt).getOrElse("") > key) {
      a((j + BigInt(1)).toInt) = a.lift((j.toInt).toInt).getOrElse("")
      j = j - BigInt(1)
    }
    a((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return a
}

def join_with_space(xs: ArrayBuffer[String]): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i > BigInt(0)) {
      s = s + " "
    }
    s = s + xs.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return s
}

def remove_duplicates(sentence: String): String = {
  val words: ArrayBuffer[String] = split_ws(sentence)
  val uniq: ArrayBuffer[String] = unique(words)
  val sorted_words: ArrayBuffer[String] = insertion_sort(uniq)
  return join_with_space(sorted_words)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(remove_duplicates("Python is great and Java is also great"))
    println(remove_duplicates("Python   is      great and Java is also great"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
