// Generated by Mochi v0.10.63 on 2025-08-11 17:33:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def strip_and_remove_spaces(s: String): String = {
  var start: BigInt = BigInt(0)
  var end: BigInt = BigInt((s).size) - BigInt(1)
  while (start < BigInt((s).size) && s.slice((start.toInt).toInt, (start.toInt).toInt + 1) == " ") {
    start = start + BigInt(1)
  }
  while (end >= start && s.slice((end.toInt).toInt, (end.toInt).toInt + 1) == " ") {
    end = end - BigInt(1)
  }
  var res: String = ""
  var i: BigInt = start
  while (i <= end) {
    val ch: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch != " ") {
      res = res + ch
    }
    i = i + BigInt(1)
  }
  return res
}

def check_anagrams(a: String, b: String): Boolean = {
  var s1: String = a.toLowerCase()
  var s2: String = b.toLowerCase()
  s1 = strip_and_remove_spaces(s1)
  s2 = strip_and_remove_spaces(s2)
  if (BigInt((s1).size) != BigInt((s2).size)) {
    return false
  }
  var count: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((s1).size)) {
    val c1: String = s1.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val c2: String = s2.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((count.contains(c1)).asInstanceOf[Boolean]) {
      count.update(c1, count.getOrElse(c1.toString, null).asInstanceOf[BigInt] + BigInt(1))
    } else {
      count.update(c1, BigInt(1))
    }
    if ((count.contains(c2)).asInstanceOf[Boolean]) {
      count.update(c2, count.getOrElse(c2.toString, null).asInstanceOf[BigInt] - BigInt(1))
    } else {
      count.update(c2, -BigInt(1))
    }
    i = i + BigInt(1)
  }
  for (ch <- count.keys) {
    if (count.getOrElse(ch.toString, null).asInstanceOf[BigInt] != BigInt(0)) {
      return false
    }
  }
  return true
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(check_anagrams("Silent", "Listen"))
    print_bool(check_anagrams("This is a string", "Is this a string"))
    print_bool(check_anagrams("This is    a      string", "Is     this a string"))
    print_bool(check_anagrams("There", "Their"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
