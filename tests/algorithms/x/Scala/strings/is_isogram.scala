// Generated by Mochi v0.10.63 on 2025-08-11 17:39:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  var idx: BigInt = index_of(upper, ch)
  if (idx >= BigInt(0)) {
    return BigInt(65) + idx
  }
  idx = index_of(lower, ch)
  if (idx >= BigInt(0)) {
    return BigInt(97) + idx
  }
  return -BigInt(1)
}

def chr(n: BigInt): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  if ((n >= BigInt(65) && n < BigInt(91)).asInstanceOf[Boolean]) {
    return upper.slice((n - BigInt(65)).toInt, (n - BigInt(64)).toInt)
  }
  if ((n >= BigInt(97) && n < BigInt(123)).asInstanceOf[Boolean]) {
    return lower.slice((n - BigInt(97)).toInt, (n - BigInt(96)).toInt)
  }
  return "?"
}

def to_lower_char(c: String): String = {
  val code: BigInt = ord(c)
  if ((code >= BigInt(65) && code <= BigInt(90)).asInstanceOf[Boolean]) {
    return chr(code + BigInt(32))
  }
  return c
}

def is_alpha(c: String): Boolean = {
  val code: BigInt = ord(c)
  return ((code >= BigInt(65) && code <= BigInt(90)).asInstanceOf[Boolean] || (code >= BigInt(97) && code <= BigInt(122)).asInstanceOf[Boolean]).asInstanceOf[Boolean]
}

def is_isogram(s: String): Boolean = {
  var seen: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (!is_alpha(ch)) {
      throw new RuntimeException(String.valueOf("String must only contain alphabetic characters."))
    }
    val lower: String = to_lower_char(ch)
    if (index_of(seen, lower) >= BigInt(0)) {
      return false
    }
    seen = seen + lower
    i = i + BigInt(1)
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(is_isogram("Uncopyrightable")))
    println(_str(is_isogram("allowance")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
