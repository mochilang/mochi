// Generated by Mochi v0.10.63 on 2025-08-11 15:38:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def starts_with(s: String, prefix: String): Boolean = {
  if (BigInt((s).size) < BigInt((prefix).size)) {
    return false
  }
  return s.slice((BigInt(0)).toInt, (BigInt((prefix).size)).toInt) == prefix
}

def all_digits(s: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c.charAt(BigInt(0).toInt) < '0' || c.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def is_sri_lankan_phone_number(phone: String): Boolean = {
  var p: String = phone
  if (starts_with(p, "+94")) {
    p = p.slice((BigInt(3)).toInt, (BigInt((p).size)).toInt)
  } else {
    if (starts_with(p, "0094")) {
      p = p.slice((BigInt(4)).toInt, (BigInt((p).size)).toInt)
    } else {
      if (starts_with(p, "94")) {
        p = p.slice((BigInt(2)).toInt, (BigInt((p).size)).toInt)
      } else {
        if (starts_with(p, "0")) {
          p = p.slice((BigInt(1)).toInt, (BigInt((p).size)).toInt)
        } else {
          return false
        }
      }
    }
  }
  if ((BigInt((p).size) != BigInt(9) && BigInt((p).size) != BigInt(10)).asInstanceOf[Boolean]) {
    return false
  }
  if (p.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1) != "7") {
    return false
  }
  val second: String = p.slice((BigInt(1).toInt).toInt, (BigInt(1).toInt).toInt + 1)
  val allowed: ArrayBuffer[String] = ArrayBuffer("0", "1", "2", "4", "5", "6", "7", "8")
  if (!(allowed.contains(second)).asInstanceOf[Boolean]) {
    return false
  }
  var idx: BigInt = BigInt(2)
  if (BigInt((p).size) == BigInt(10)) {
    val sep: String = p.slice((BigInt(2).toInt).toInt, (BigInt(2).toInt).toInt + 1)
    if ((sep != "-" && sep != " ").asInstanceOf[Boolean]) {
      return false
    }
    idx = BigInt(3)
  }
  if (BigInt((p).size) - idx != BigInt(7)) {
    return false
  }
  val rest: String = p.slice((idx).toInt, (BigInt((p).size)).toInt)
  return all_digits(rest)
}

val phone: String = "0094702343221"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(is_sri_lankan_phone_number(phone)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
