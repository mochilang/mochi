// Generated by Mochi v0.10.63 on 2025-08-11 17:34:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_valid(strand: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((strand).size)) {
    val ch: String = strand.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((((ch != "A" && ch != "T").asInstanceOf[Boolean] && ch != "C").asInstanceOf[Boolean] && ch != "G").asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def dna(strand: String): String = {
  if (!is_valid(strand)) {
    println("ValueError: Invalid Strand")
    return ""
  }
  var result: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((strand).size)) {
    val ch: String = strand.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == "A") {
      result = result + "T"
    } else {
      if (ch == "T") {
        result = result + "A"
      } else {
        if (ch == "C") {
          result = result + "G"
        } else {
          result = result + "C"
        }
      }
    }
    i = i + BigInt(1)
  }
  return result
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(dna("GCTA"))
    println(dna("ATGC"))
    println(dna("CTGA"))
    println(dna("GFGG"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
