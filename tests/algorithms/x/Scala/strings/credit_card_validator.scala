// Generated by Mochi v0.10.63 on 2025-08-11 17:34:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def validate_initial_digits(cc: String): Boolean = {
  return (((((cc.slice((BigInt(0)).toInt, (BigInt(2)).toInt) == "34" || cc.slice((BigInt(0)).toInt, (BigInt(2)).toInt) == "35").asInstanceOf[Boolean] || cc.slice((BigInt(0)).toInt, (BigInt(2)).toInt) == "37").asInstanceOf[Boolean] || cc.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "4").asInstanceOf[Boolean] || cc.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "5").asInstanceOf[Boolean] || cc.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "6").asInstanceOf[Boolean]
}

def luhn_validation(cc: String): Boolean = {
  var sum: BigInt = BigInt(0)
  var double_digit: Boolean = false
  var i: BigInt = BigInt((cc).size) - BigInt(1)
  while (i >= BigInt(0)) {
    var n: BigInt = BigInt((cc.slice((i).toInt, (i + BigInt(1)).toInt)))
    if (double_digit) {
      n = n * BigInt(2)
      if (n > BigInt(9)) {
        n = n - BigInt(9)
      }
    }
    sum = sum + n
    double_digit = !double_digit
    i = i - BigInt(1)
  }
  return sum % BigInt(10) == BigInt(0)
}

def is_digit_string(s: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((c.charAt(BigInt(0).toInt) < '0' || c.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def validate_credit_card_number(cc: String): Boolean = {
  val error_message: String = cc + " is an invalid credit card number because"
  if (!is_digit_string(cc)) {
    println(error_message + " it has nonnumerical characters.")
    return false
  }
  if (!(BigInt((cc).size) >= BigInt(13) && BigInt((cc).size) <= BigInt(16)).asInstanceOf[Boolean]) {
    println(error_message + " of its length.")
    return false
  }
  if (!validate_initial_digits(cc)) {
    println(error_message + " of its first two digits.")
    return false
  }
  if (!luhn_validation(cc)) {
    println(error_message + " it fails the Luhn check.")
    return false
  }
  println(cc + " is a valid credit card number.")
  return true
}

def main(): Any = {
  validate_credit_card_number("4111111111111111")
  validate_credit_card_number("32323")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
