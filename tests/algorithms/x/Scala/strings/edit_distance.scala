// Generated by Mochi v0.10.63 on 2025-08-11 17:34:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def min3(a: BigInt, b: BigInt, c: BigInt): BigInt = {
  var m: BigInt = a
  if (b < m) {
    m = b
  }
  if (c < m) {
    m = c
  }
  return m
}

def edit_distance(source: String, target: String): BigInt = {
  if (BigInt((source).size) == BigInt(0)) {
    return BigInt((target).size)
  }
  if (BigInt((target).size) == BigInt(0)) {
    return BigInt((source).size)
  }
  val last_source: String = source.slice((BigInt((source).size) - BigInt(1)).toInt, (BigInt((source).size)).toInt)
  val last_target: String = target.slice((BigInt((target).size) - BigInt(1)).toInt, (BigInt((target).size)).toInt)
  val delta: BigInt = (if (last_source == last_target) BigInt(0) else BigInt(1))
  val delete_cost: BigInt = edit_distance(source.slice((BigInt(0)).toInt, (BigInt((source).size) - BigInt(1)).toInt), target) + BigInt(1)
  val insert_cost: BigInt = edit_distance(source, target.slice((BigInt(0)).toInt, (BigInt((target).size) - BigInt(1)).toInt)) + BigInt(1)
  val replace_cost: BigInt = edit_distance(source.slice((BigInt(0)).toInt, (BigInt((source).size) - BigInt(1)).toInt), target.slice((BigInt(0)).toInt, (BigInt((target).size) - BigInt(1)).toInt)) + delta
  return min3(delete_cost, insert_cost, replace_cost)
}

def main(): Any = {
  val result: BigInt = edit_distance("ATCGCTG", "TAGCTAA")
  println(_str(result))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
