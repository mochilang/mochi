// Generated by Mochi v0.10.63 on 2025-08-11 15:44:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def make_matrix_bool(rows: BigInt, cols: BigInt, init: Boolean): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var matrix: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer[ArrayBuffer[Boolean]]()
  for (_ <- (BigInt(0)).toInt until (rows).toInt) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
    for (_2 <- (BigInt(0)).toInt until (cols).toInt) {
      row = row :+ (init)
    }
    matrix = matrix :+ (row)
  }
  return matrix
}

def match_pattern(input_string: String, pattern: String): Boolean = {
  val len_string: BigInt = BigInt((input_string).size) + BigInt(1)
  val len_pattern: BigInt = BigInt((pattern).size) + BigInt(1)
  var dp: ArrayBuffer[ArrayBuffer[Boolean]] = make_matrix_bool(len_string, len_pattern, false)
  var row0: ArrayBuffer[Boolean] = dp.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Boolean]())
  row0((BigInt(0)).toInt) = true
  dp((BigInt(0)).toInt) = row0
  var j: BigInt = BigInt(1)
  while (j < len_pattern) {
    row0 = dp.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Boolean]())
    if (pattern.slice((j - BigInt(1)).toInt, (j).toInt) == "*") {
      row0((j).toInt) = row0.lift(((j - BigInt(2)).toInt).toInt).getOrElse(false)
    } else {
      row0((j).toInt) = false
    }
    dp((BigInt(0)).toInt) = row0
    j = j + BigInt(1)
  }
  var i: BigInt = BigInt(1)
  while (i < len_string) {
    var row: ArrayBuffer[Boolean] = dp.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Boolean]())
    var j2: BigInt = BigInt(1)
    while (j2 < len_pattern) {
      val s_char: String = input_string.slice((i - BigInt(1)).toInt, (i).toInt)
      val p_char: String = pattern.slice((j2 - BigInt(1)).toInt, (j2).toInt)
      if ((s_char == p_char || p_char == ".").asInstanceOf[Boolean]) {
        row((j2).toInt) = dp.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift(((j2 - BigInt(1)).toInt).toInt).getOrElse(false)
      } else {
        if (p_char == "*") {
          var `val`: Boolean = dp.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift(((j2 - BigInt(2)).toInt).toInt).getOrElse(false)
          val prev_p: String = pattern.slice((j2 - BigInt(2)).toInt, (j2 - BigInt(1)).toInt)
          if ((!`val` && (prev_p == s_char || prev_p == ".").asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            `val` = dp.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift((j2.toInt).toInt).getOrElse(false)
          }
          row((j2).toInt) = `val`
        } else {
          row((j2).toInt) = false
        }
      }
      j2 = j2 + BigInt(1)
    }
    dp((i).toInt) = row
    i = i + BigInt(1)
  }
  return dp.lift(((len_string - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift(((len_pattern - BigInt(1)).toInt).toInt).getOrElse(false)
}

def main(): Any = {
  if (!match_pattern("aab", "c*a*b")) {
    throw new RuntimeException(String.valueOf("case1 failed"))
  }
  if (match_pattern("dabc", "*abc")) {
    throw new RuntimeException(String.valueOf("case2 failed"))
  }
  if (match_pattern("aaa", "aa")) {
    throw new RuntimeException(String.valueOf("case3 failed"))
  }
  if (!match_pattern("aaa", "a.a")) {
    throw new RuntimeException(String.valueOf("case4 failed"))
  }
  if (match_pattern("aaab", "aa*")) {
    throw new RuntimeException(String.valueOf("case5 failed"))
  }
  if (!match_pattern("aaab", ".*")) {
    throw new RuntimeException(String.valueOf("case6 failed"))
  }
  if (match_pattern("a", "bbbb")) {
    throw new RuntimeException(String.valueOf("case7 failed"))
  }
  if (match_pattern("", "bbbb")) {
    throw new RuntimeException(String.valueOf("case8 failed"))
  }
  if (match_pattern("a", "")) {
    throw new RuntimeException(String.valueOf("case9 failed"))
  }
  if (!match_pattern("", "")) {
    throw new RuntimeException(String.valueOf("case10 failed"))
  }
  println(_str(match_pattern("aab", "c*a*b")))
  println(_str(match_pattern("dabc", "*abc")))
  println(_str(match_pattern("aaa", "aa")))
  println(_str(match_pattern("aaa", "a.a")))
  println(_str(match_pattern("aaab", "aa*")))
  println(_str(match_pattern("aaab", ".*")))
  println(_str(match_pattern("a", "bbbb")))
  println(_str(match_pattern("", "bbbb")))
  println(_str(match_pattern("a", "")))
  println(_str(match_pattern("", "")))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
