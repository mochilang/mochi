// Generated by Mochi v0.10.63 on 2025-08-11 17:33:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def pow2(n: BigInt): BigInt = {
  var res: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_and(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  while (x > BigInt(0) || y > BigInt(0)) {
    if ((x % BigInt(2) == BigInt(1) && y % BigInt(2) == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
  }
  return res
}

def bit_or(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  while (x > BigInt(0) || y > BigInt(0)) {
    if ((x % BigInt(2) == BigInt(1) || y % BigInt(2) == BigInt(1)).asInstanceOf[Boolean]) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
  }
  return res
}

def char_to_index(ch: String): BigInt = {
  val letters: String = "abcdefghijklmnopqrstuvwxyz"
  var i: BigInt = BigInt(0)
  while (i < BigInt((letters).size)) {
    if (letters.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt(26)
}

def bitap_string_match(text: String, pattern: String): BigInt = {
  if (pattern == "") {
    return BigInt(0)
  }
  val m: BigInt = BigInt((pattern).size)
  if (m > BigInt((text).size)) {
    return -BigInt(1)
  }
  val limit: BigInt = pow2(m + BigInt(1))
  val all_ones: BigInt = limit - BigInt(1)
  var pattern_mask: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(27)) {
    pattern_mask = pattern_mask :+ (all_ones)
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < m) {
    val ch: String = pattern.slice((i).toInt, (i + BigInt(1)).toInt)
    val idx: BigInt = char_to_index(ch)
    pattern_mask((idx).toInt) = bit_and(pattern_mask.lift((idx.toInt).toInt).getOrElse(null), all_ones - pow2(i))
    i = i + BigInt(1)
  }
  var state: BigInt = all_ones - BigInt(1)
  i = BigInt(0)
  while (i < BigInt((text).size)) {
    val ch: String = text.slice((i).toInt, (i + BigInt(1)).toInt)
    val idx: BigInt = char_to_index(ch)
    state = bit_or(state, pattern_mask.lift((idx.toInt).toInt).getOrElse(null))
    state = state * BigInt(2) % limit
    if (bit_and(state, pow2(m)) == BigInt(0)) {
      return i - m + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def main(): Any = {
  println(_str(bitap_string_match("abdabababc", "ababc")))
  println(_str(bitap_string_match("abdabababc", "")))
  println(_str(bitap_string_match("abdabababc", "c")))
  println(_str(bitap_string_match("abdabababc", "fofosdfo")))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
