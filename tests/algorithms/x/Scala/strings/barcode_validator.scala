// Generated by Mochi v0.10.63 on 2025-08-11 17:33:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def has_alpha(s: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (((c.charAt(BigInt(0).toInt) >= 'a' && c.charAt(BigInt(0).toInt) <= 'z').asInstanceOf[Boolean] || (c.charAt(BigInt(0).toInt) >= 'A' && c.charAt(BigInt(0).toInt) <= 'Z').asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def parse_decimal(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c.charAt(BigInt(0).toInt) < '0' || c.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("Non-digit character encountered"))
    }
    value = value * BigInt(10) + BigInt(c.toString.head.asDigit)
    i = i + BigInt(1)
  }
  return value
}

def get_barcode(barcode: String): BigInt = {
  if (has_alpha(barcode)) {
    throw new RuntimeException(String.valueOf("Barcode '" + barcode + "' has alphabetic characters."))
  }
  if ((BigInt((barcode).size) > BigInt(0) && barcode.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1) == "-").asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("The entered barcode has a negative value. Try again."))
  }
  return parse_decimal(barcode)
}

def get_check_digit(barcode: BigInt): BigInt = {
  var num: BigInt = barcode / BigInt(10)
  var s: BigInt = BigInt(0)
  var position: BigInt = BigInt(0)
  while (num != BigInt(0)) {
    val mult: BigInt = (if (position % BigInt(2) == BigInt(0)) BigInt(3) else BigInt(1))
    s = s + mult * (num % BigInt(10))
    num = num / BigInt(10)
    position = position + BigInt(1)
  }
  return (BigInt(10) - s % BigInt(10)) % BigInt(10)
}

def is_valid(barcode: BigInt): Boolean = {
  return (BigInt((_str(barcode)).size) == BigInt(13) && get_check_digit(barcode) == barcode % BigInt(10)).asInstanceOf[Boolean]
}

var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var x: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(get_check_digit(BigInt("8718452538119"))))
    println(_str(get_check_digit(BigInt(87184523))))
    println(_str(get_check_digit(BigInt("87193425381086"))))
    while (x < BigInt(100)) {
      res = res :+ (get_check_digit(x))
      x = x + BigInt(10)
    }
    println(res)
    println(_str(is_valid(BigInt("8718452538119"))))
    println(_str(is_valid(BigInt(87184525))))
    println(_str(is_valid(BigInt("87193425381089"))))
    println(_str(is_valid(BigInt(0))))
    println(_str(get_barcode("8718452538119")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
