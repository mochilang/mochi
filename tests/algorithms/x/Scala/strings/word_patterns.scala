// Generated by Mochi v0.10.63 on 2025-08-11 15:44:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def find_index(xs: ArrayBuffer[String], x: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == x) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def get_word_pattern(word: String): String = {
  val w = word.toUpperCase()
  var letters: ArrayBuffer[String] = ArrayBuffer[String]()
  var numbers: ArrayBuffer[String] = ArrayBuffer[String]()
  var next_num: BigInt = BigInt(0)
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((w).size)) {
    val ch = w.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    val idx: BigInt = find_index(letters, ch)
    var num_str: String = ""
    if (idx >= BigInt(0)) {
      num_str = numbers.lift((idx.toInt).toInt).getOrElse("")
    } else {
      num_str = (_str(next_num)).toString
      letters = letters :+ (ch)
      numbers = numbers :+ (num_str)
      next_num = next_num + BigInt(1)
    }
    if (i > BigInt(0)) {
      res = res + "."
    }
    res = res + num_str
    i = i + BigInt(1)
  }
  return res
}

def main(): Any = {
  println(get_word_pattern(""))
  println(get_word_pattern(" "))
  println(get_word_pattern("pattern"))
  println(get_word_pattern("word pattern"))
  println(get_word_pattern("get word pattern"))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
