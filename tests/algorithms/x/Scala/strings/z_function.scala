// Generated by Mochi v0.10.63 on 2025-08-11 15:45:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def z_function(s: String): ArrayBuffer[BigInt] = {
  var z: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    z = z :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var l: BigInt = BigInt(0)
  var r: BigInt = BigInt(0)
  i = BigInt(1)
  while (i < BigInt((s).size)) {
    if (i <= r) {
      var min_edge: BigInt = r - i + BigInt(1)
      val zi: BigInt = z.lift(((i - l).toInt).toInt).getOrElse(BigInt(BigInt(0)))
      if (zi < min_edge) {
        min_edge = zi
      }
      z((i).toInt) = min_edge
    }
    while (go_next(i, z, s)) {
      z((i).toInt) = z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))) + BigInt(1)
    }
    if (i + z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))) - BigInt(1) > r) {
      l = i
      r = i + z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))) - BigInt(1)
    }
    i = i + BigInt(1)
  }
  return z
}

def go_next(i: BigInt, z: ArrayBuffer[BigInt], s: String): Boolean = {
  return (i + z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))) < BigInt((s).size) && s.slice((z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))).toInt).toInt, (z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))).toInt).toInt + 1) == s.slice(((i + z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0)))).toInt).toInt, ((i + z.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0)))).toInt).toInt + 1)).asInstanceOf[Boolean]
}

def find_pattern(pattern: String, input_str: String): BigInt = {
  var answer: BigInt = BigInt(0)
  val z_res: ArrayBuffer[BigInt] = z_function(pattern + input_str)
  var i: BigInt = BigInt(0)
  while (i < BigInt((z_res).size)) {
    if (z_res.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))) >= BigInt((pattern).size)) {
      answer = answer + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return answer
}

def list_eq_int(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0))) != b.lift((i.toInt).toInt).getOrElse(BigInt(BigInt(0)))) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def test_z_function(): Any = {
  val s1: String = "abracadabra"
  val expected1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(0), BigInt(4), BigInt(0), BigInt(0), BigInt(1))
  val r1: ArrayBuffer[BigInt] = z_function(s1)
  if (!list_eq_int(r1, expected1)) {
    throw new RuntimeException(String.valueOf("z_function abracadabra failed"))
  }
  val s2: String = "aaaa"
  val expected2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(3), BigInt(2), BigInt(1))
  val r2: ArrayBuffer[BigInt] = z_function(s2)
  if (!list_eq_int(r2, expected2)) {
    throw new RuntimeException(String.valueOf("z_function aaaa failed"))
  }
  val s3: String = "zxxzxxz"
  val expected3: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(4), BigInt(0), BigInt(0), BigInt(1))
  val r3: ArrayBuffer[BigInt] = z_function(s3)
  if (!list_eq_int(r3, expected3)) {
    throw new RuntimeException(String.valueOf("z_function zxxzxxz failed"))
  }
}

def test_find_pattern(): Any = {
  if (find_pattern("abr", "abracadabra") != BigInt(2)) {
    throw new RuntimeException(String.valueOf("find_pattern abr failed"))
  }
  if (find_pattern("a", "aaaa") != BigInt(4)) {
    throw new RuntimeException(String.valueOf("find_pattern aaaa failed"))
  }
  if (find_pattern("xz", "zxxzxxz") != BigInt(2)) {
    throw new RuntimeException(String.valueOf("find_pattern xz failed"))
  }
}

def main(): Any = {
  test_z_function()
  test_find_pattern()
  val r1: ArrayBuffer[BigInt] = z_function("abracadabra")
  val r2: ArrayBuffer[BigInt] = z_function("aaaa")
  val r3: ArrayBuffer[BigInt] = z_function("zxxzxxz")
  println(_str(r1))
  println(_str(r2))
  println(_str(r3))
  println(_str(find_pattern("abr", "abracadabra")))
  println(_str(find_pattern("a", "aaaa")))
  println(_str(find_pattern("xz", "zxxzxxz")))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
