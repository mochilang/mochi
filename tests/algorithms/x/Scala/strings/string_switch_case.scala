// Generated by Mochi v0.10.63 on 2025-08-11 15:39:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split_words(s: String): ArrayBuffer[String] = {
  var words: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  for (_ch <- s) {
    val ch: String = _ch.toString
    if (ch == " ") {
      if (current != "") {
        words = words :+ (current)
        current = ""
      }
    } else {
      current = current + ch
    }
  }
  if (current != "") {
    words = words :+ (current)
  }
  return words
}

def is_alnum(c: String): Boolean = {
  return (((("0123456789".contains(c)).asInstanceOf[Boolean] || ("abcdefghijklmnopqrstuvwxyz".contains(c)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || ("ABCDEFGHIJKLMNOPQRSTUVWXYZ".contains(c)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || c == " ").asInstanceOf[Boolean]
}

def split_input(text: String): ArrayBuffer[ArrayBuffer[String]] = {
  var result: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var current: String = ""
  for (_ch <- text) {
    val ch: String = _ch.toString
    if (is_alnum(ch)) {
      current = current + ch
    } else {
      if (current != "") {
        result = result :+ (split_words(current))
        current = ""
      }
    }
  }
  if (current != "") {
    result = result :+ (split_words(current))
  }
  return result
}

def capitalize(word: String): String = {
  if (BigInt((word).size) == BigInt(0)) {
    return ""
  }
  if (BigInt((word).size) == BigInt(1)) {
    return (word.toUpperCase()).toString
  }
  return (BigInt((word.slice((BigInt(0)).toInt, (BigInt(1)).toInt).toUpperCase()).toString.head.toInt) + BigInt((word.slice((BigInt(1)).toInt, (BigInt((word).size)).toInt).toLowerCase()).toString.head.toInt)).toString
}

def to_simple_case(text: String): String = {
  val parts: ArrayBuffer[ArrayBuffer[String]] = split_input(text)
  var res: String = ""
  for (sub <- parts) {
    for (w <- sub) {
      res = res + capitalize(w)
    }
  }
  return res
}

def to_complex_case(text: String, upper_flag: Boolean, sep: String): String = {
  val parts: ArrayBuffer[ArrayBuffer[String]] = split_input(text)
  var res: String = ""
  for (sub <- parts) {
    var first: Boolean = true
    for (w <- sub) {
      var word: String = (if (upper_flag) w.toUpperCase() else w.toLowerCase())
      if (first) {
        res = res + word
        first = false
      } else {
        res = res + sep + word
      }
    }
  }
  return res
}

def to_pascal_case(text: String): String = {
  return to_simple_case(text)
}

def to_camel_case(text: String): String = {
  val s: String = to_simple_case(text)
  if (BigInt((s).size) == BigInt(0)) {
    return ""
  }
  return s.slice((BigInt(0)).toInt, (BigInt(1)).toInt).toLowerCase() + s.slice((BigInt(1)).toInt, (BigInt((s).size)).toInt)
}

def to_snake_case(text: String, upper_flag: Boolean): String = {
  return to_complex_case(text, upper_flag, "_")
}

def to_kebab_case(text: String, upper_flag: Boolean): String = {
  return to_complex_case(text, upper_flag, "-")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(to_pascal_case("one two 31235three4four"))
    println(to_camel_case("one two 31235three4four"))
    println(to_snake_case("one two 31235three4four", true))
    println(to_snake_case("one two 31235three4four", false))
    println(to_kebab_case("one two 31235three4four", true))
    println(to_kebab_case("one two 31235three4four", false))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
