// Generated by Mochi v0.10.63 on 2025-08-11 15:39:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def strip(s: String): String = {
  var start: BigInt = BigInt(0)
  var end: BigInt = BigInt((s).size)
  while (start < end && s.slice((start).toInt, (start + BigInt(1)).toInt) == " ") {
    start = start + BigInt(1)
  }
  while (end > start && s.slice((end - BigInt(1)).toInt, (end).toInt) == " ") {
    end = end - BigInt(1)
  }
  return s.slice((start).toInt, (end).toInt)
}

def is_vowel(c: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((VOWELS).length)) {
    if (c == VOWELS.slice((i).toInt, (i + BigInt(1)).toInt)) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def pig_latin(word: String): String = {
  val trimmed: String = strip(word)
  if (BigInt((trimmed).size) == BigInt(0)) {
    return ""
  }
  val w = trimmed.toLowerCase()
  val first: String = w.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
  if (is_vowel(first)) {
    return w + "way"
  }
  var i: BigInt = BigInt(0)
  val _br3 = new Breaks
  _br3.breakable {
    while (i < BigInt((w).size)) {
      val ch: String = w.slice((i).toInt, (i + BigInt(1)).toInt)
      if (is_vowel(ch)) {
        _br3.break()
      }
      i = i + BigInt(1)
    }
  }
  return w.slice((i).toInt, (BigInt((w).size)).toInt) + w.slice((BigInt(0)).toInt, (i).toInt) + "ay"
}

val VOWELS: String = "aeiou"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("pig_latin('friends') = " + pig_latin("friends"))
    println("pig_latin('smile') = " + pig_latin("smile"))
    println("pig_latin('eat') = " + pig_latin("eat"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
