// Generated by Mochi v0.10.63 on 2025-08-11 15:38:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_failure_array(pattern: String): ArrayBuffer[BigInt] = {
  var failure: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0))
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(1)
  val _ct0 = new Breaks
  while (j < BigInt((pattern).length)) {
    _ct0.breakable {
      if (pattern.slice((i).toInt, (i + BigInt(1)).toInt) == pattern.slice((j).toInt, (j + BigInt(1)).toInt)) {
        i = i + BigInt(1)
      } else {
        if (i > BigInt(0)) {
          i = failure.lift(((i - BigInt(1)).toInt).toInt).getOrElse(null)
          _ct0.break()
        }
      }
      j = j + BigInt(1)
      failure = failure :+ (i)
    }
  }
  return failure
}

def knuth_morris_pratt(text: String, pattern: String): BigInt = {
  val failure: ArrayBuffer[BigInt] = get_failure_array(pattern)
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  val _ct1 = new Breaks
  while (i < BigInt((text).length)) {
    _ct1.breakable {
      if (pattern.slice((j).toInt, (j + BigInt(1)).toInt) == text.slice((i).toInt, (i + BigInt(1)).toInt)) {
        if (j == BigInt((pattern).length) - BigInt(1)) {
          return i - j
        }
        j = j + BigInt(1)
      } else {
        if (j > BigInt(0)) {
          j = failure.lift(((j - BigInt(1)).toInt).toInt).getOrElse(null)
          _ct1.break()
        }
      }
      i = i + BigInt(1)
    }
  }
  return -BigInt(1)
}

val text: String = "abcxabcdabxabcdabcdabcy"

val pattern: String = "abcdabcy"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(knuth_morris_pratt(text, pattern))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
