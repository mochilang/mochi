// Generated by Mochi v0.10.63 on 2025-08-11 17:33:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_lower(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((LOWER).length)) {
    if (LOWER.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def is_upper(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((UPPER).length)) {
    if (UPPER.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def is_digit(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((DIGITS).length)) {
    if (DIGITS.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def is_alpha(ch: String): Boolean = {
  if (is_lower(ch)) {
    return true
  }
  if (is_upper(ch)) {
    return true
  }
  return false
}

def is_alnum(ch: String): Boolean = {
  if (is_alpha(ch)) {
    return true
  }
  if (is_digit(ch)) {
    return true
  }
  return false
}

def to_lower(ch: String): String = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((UPPER).length)) {
    if (UPPER.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return LOWER.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    }
    i = i + BigInt(1)
  }
  return ch
}

def camel_to_snake_case(input_str: String): String = {
  var snake_str: String = ""
  var i: BigInt = BigInt(0)
  var prev_is_digit: Boolean = false
  var prev_is_alpha: Boolean = false
  while (i < BigInt((input_str).size)) {
    val ch: String = input_str.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (is_upper(ch)) {
      snake_str = snake_str + "_" + to_lower(ch)
    } else {
      if ((prev_is_digit && is_lower(ch)).asInstanceOf[Boolean]) {
        snake_str = snake_str + "_" + ch
      } else {
        if ((prev_is_alpha && is_digit(ch)).asInstanceOf[Boolean]) {
          snake_str = snake_str + "_" + ch
        } else {
          if (!is_alnum(ch)) {
            snake_str = snake_str + "_"
          } else {
            snake_str = snake_str + ch
          }
        }
      }
    }
    prev_is_digit = is_digit(ch)
    prev_is_alpha = is_alpha(ch)
    i = i + BigInt(1)
  }
  if ((BigInt((snake_str).size) > BigInt(0) && snake_str.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1) == "_").asInstanceOf[Boolean]) {
    snake_str = snake_str.slice((BigInt(1)).toInt, (BigInt((snake_str).size)).toInt)
  }
  return snake_str
}

def main(): Any = {
  println(camel_to_snake_case("someRandomString"))
  println(camel_to_snake_case("SomeRandomStr#ng"))
  println(camel_to_snake_case("123SomeRandom123String123"))
}

val LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val DIGITS: String = "0123456789"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
