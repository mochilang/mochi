// Generated by Mochi v0.10.63 on 2025-08-11 15:39:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Case(var text: String, var expected: Boolean)

def reverse(s: String): String = {
  var res: String = ""
  var i: BigInt = BigInt((s).size) - BigInt(1)
  while (i >= BigInt(0)) {
    res = res + s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    i = i - BigInt(1)
  }
  return res
}

def is_palindrome(s: String): Boolean = {
  var start_i: BigInt = BigInt(0)
  var end_i: BigInt = BigInt((s).size) - BigInt(1)
  while (start_i < end_i) {
    if (s.slice((start_i.toInt).toInt, (start_i.toInt).toInt + 1) == s.slice((end_i.toInt).toInt, (end_i.toInt).toInt + 1)) {
      start_i = start_i + BigInt(1)
      end_i = end_i - BigInt(1)
    } else {
      return false
    }
  }
  return true
}

def is_palindrome_traversal(s: String): Boolean = {
  val end: BigInt = BigInt((s).size) / BigInt(2)
  val n: BigInt = BigInt((s).size)
  var i: BigInt = BigInt(0)
  while (i < end) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) != s.slice(((n - i - BigInt(1)).toInt).toInt, ((n - i - BigInt(1)).toInt).toInt + 1)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def is_palindrome_recursive(s: String): Boolean = {
  if (BigInt((s).size) <= BigInt(1)) {
    return true
  }
  if (s.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1) == s.slice(((BigInt((s).size) - BigInt(1)).toInt).toInt, ((BigInt((s).size) - BigInt(1)).toInt).toInt + 1)) {
    return is_palindrome_recursive(s.slice((BigInt(1)).toInt, (BigInt((s).size) - BigInt(1)).toInt))
  }
  return false
}

def is_palindrome_slice(s: String): Boolean = {
  return s == reverse(s)
}

def main(): Any = {
  for (t <- test_data) {
    val s: String = t.asInstanceOf[Case].text
    val expected: Boolean = t.asInstanceOf[Case].expected
    val r1: Boolean = is_palindrome(s)
    val r2: Boolean = is_palindrome_traversal(s)
    val r3: Boolean = is_palindrome_recursive(s)
    val r4: Boolean = is_palindrome_slice(s)
    if ((((r1 != expected || r2 != expected).asInstanceOf[Boolean] || r3 != expected).asInstanceOf[Boolean] || r4 != expected).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("algorithm mismatch"))
    }
    println(s + " " + _str(expected))
  }
  println("a man a plan a canal panama")
}

val test_data: ArrayBuffer[Case] = ArrayBuffer(Case("MALAYALAM", true), Case("String", false), Case("rotor", true), Case("level", true), Case("A", true), Case("BB", true), Case("ABC", false), Case("amanaplanacanalpanama", true))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
