// Generated by Mochi v0.10.63 on 2025-08-11 15:40:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def to_title_case(word: String): String = {
  if (BigInt((word).size) == BigInt(0)) {
    return ""
  }
  val first: String = word.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
  val idx: BigInt = index_of(lower, first)
  var result: String = (if (idx >= BigInt(0)) upper.slice((idx).toInt, (idx + BigInt(1)).toInt) else first)
  var i: BigInt = BigInt(1)
  while (i < BigInt((word).size)) {
    val ch: String = word.slice((i).toInt, (i + BigInt(1)).toInt)
    val uidx: BigInt = index_of(upper, ch)
    if (uidx >= BigInt(0)) {
      result = result + lower.slice((uidx).toInt, (uidx + BigInt(1)).toInt)
    } else {
      result = result + ch
    }
    i = i + BigInt(1)
  }
  return result
}

def split_words(s: String): ArrayBuffer[String] = {
  var words: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch == " ") {
      if (BigInt((current).size) > BigInt(0)) {
        words = words :+ (current)
        current = ""
      }
    } else {
      current = current + ch
    }
    i = i + BigInt(1)
  }
  if (BigInt((current).size) > BigInt(0)) {
    words = words :+ (current)
  }
  return words
}

def sentence_to_title_case(sentence: String): String = {
  val words: ArrayBuffer[String] = split_words(sentence)
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((words).size)) {
    res = res + to_title_case(words.lift((i.toInt).toInt).getOrElse(""))
    if (i + BigInt(1) < BigInt((words).size)) {
      res = res + " "
    }
    i = i + BigInt(1)
  }
  return res
}

val lower: String = "abcdefghijklmnopqrstuvwxyz"

val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(to_title_case("Aakash"))
    println(to_title_case("aakash"))
    println(to_title_case("AAKASH"))
    println(to_title_case("aAkAsH"))
    println(sentence_to_title_case("Aakash Giri"))
    println(sentence_to_title_case("aakash giri"))
    println(sentence_to_title_case("AAKASH GIRI"))
    println(sentence_to_title_case("aAkAsH gIrI"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
