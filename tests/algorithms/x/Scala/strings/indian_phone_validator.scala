// Generated by Mochi v0.10.63 on 2025-08-11 17:35:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def all_digits(s: String): Boolean = {
  if (BigInt((s).size) == BigInt(0)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c.charAt(BigInt(0).toInt) < '0' || c.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def indian_phone_validator(phone: String): Boolean = {
  var s: String = phone
  if ((BigInt((s).size) >= BigInt(3) && s.slice((BigInt(0)).toInt, (BigInt(3)).toInt) == "+91").asInstanceOf[Boolean]) {
    s = s.slice((BigInt(3)).toInt, (BigInt((s).size)).toInt)
    if (BigInt((s).size) > BigInt(0)) {
      val c: String = s.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1)
      if ((c == "-" || c == " ").asInstanceOf[Boolean]) {
        s = s.slice((BigInt(1)).toInt, (BigInt((s).size)).toInt)
      }
    }
  }
  if ((BigInt((s).size) > BigInt(0) && s.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1) == "0").asInstanceOf[Boolean]) {
    s = s.slice((BigInt(1)).toInt, (BigInt((s).size)).toInt)
  }
  if ((BigInt((s).size) >= BigInt(2) && s.slice((BigInt(0)).toInt, (BigInt(2)).toInt) == "91").asInstanceOf[Boolean]) {
    s = s.slice((BigInt(2)).toInt, (BigInt((s).size)).toInt)
  }
  if (BigInt((s).size) != BigInt(10)) {
    return false
  }
  val first: String = s.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1)
  if (!((first == "7" || first == "8").asInstanceOf[Boolean] || first == "9").asInstanceOf[Boolean]) {
    return false
  }
  if (!all_digits(s)) {
    return false
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(indian_phone_validator("+91123456789")))
    println(_str(indian_phone_validator("+919876543210")))
    println(_str(indian_phone_validator("01234567896")))
    println(_str(indian_phone_validator("919876543218")))
    println(_str(indian_phone_validator("+91-1234567899")))
    println(_str(indian_phone_validator("+91-9876543218")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
