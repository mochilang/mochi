// Generated by Mochi v0.10.63 on 2025-08-11 17:35:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def ord(ch: String): BigInt = {
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val digits: String = "0123456789"
  var i: BigInt = BigInt(0)
  while (i < BigInt((lower).size)) {
    if (lower.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(97) + i
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((upper).size)) {
    if (upper.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(65) + i
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((digits).size)) {
    if (digits.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return BigInt(48) + i
    }
    i = i + BigInt(1)
  }
  if (ch == " ") {
    return BigInt(32)
  }
  if (ch == "_") {
    return BigInt(95)
  }
  if (ch == ".") {
    return BigInt(46)
  }
  if (ch == "'") {
    return BigInt(39)
  }
  return BigInt(0)
}

def lshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = BigInt(0)
  while (i < k) {
    result = result * BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def rshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = BigInt(0)
  while (i < k) {
    result = (result - result % BigInt(2)) / BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def is_contains_unique_chars(input_str: String): Boolean = {
  var bitmap: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((input_str).size)) {
    val code: BigInt = ord((input_str.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
    if (rshift(bitmap, code) % BigInt(2) == BigInt(1)) {
      return false
    }
    bitmap = bitmap + lshift(BigInt(1), code)
    i = i + BigInt(1)
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(is_contains_unique_chars("I_love.py")))
    println(_str(is_contains_unique_chars("I don't love Python")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
