// Generated by Mochi v0.10.63 on 2025-08-11 15:39:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def prefix_function(s: String): ArrayBuffer[BigInt] = {
  var pi: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    pi = pi :+ (BigInt(0))
    i = i + BigInt(1)
  }
  i = BigInt(1)
  while (i < BigInt((s).size)) {
    var j: BigInt = pi.lift(((i - BigInt(1)).toInt).toInt).getOrElse(null)
    while (j > BigInt(0) && s.slice((i.toInt).toInt, (i.toInt).toInt + 1) != s.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
      j = pi.lift(((j - BigInt(1)).toInt).toInt).getOrElse(null)
    }
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == s.slice((j.toInt).toInt, (j.toInt).toInt + 1)) {
      j = j + BigInt(1)
    }
    pi((i).toInt) = j
    i = i + BigInt(1)
  }
  return pi
}

def longest_prefix(s: String): BigInt = {
  val pi: ArrayBuffer[BigInt] = prefix_function(s)
  var max_val: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((pi).size)) {
    if (pi.lift((i.toInt).toInt).getOrElse(null) > max_val) {
      max_val = pi.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return max_val
}

def list_eq_int(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a.lift((i.toInt).toInt).getOrElse(null) != b.lift((i.toInt).toInt).getOrElse(null)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def test_prefix_function(): Any = {
  val s1: String = "aabcdaabc"
  val expected1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(2), BigInt(3), BigInt(4))
  val r1: ArrayBuffer[BigInt] = prefix_function(s1)
  if (!list_eq_int(r1, expected1)) {
    throw new RuntimeException(String.valueOf("prefix_function aabcdaabc failed"))
  }
  val s2: String = "asdasdad"
  val expected2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(0))
  val r2: ArrayBuffer[BigInt] = prefix_function(s2)
  if (!list_eq_int(r2, expected2)) {
    throw new RuntimeException(String.valueOf("prefix_function asdasdad failed"))
  }
}

def test_longest_prefix(): Any = {
  if (longest_prefix("aabcdaabc") != BigInt(4)) {
    throw new RuntimeException(String.valueOf("longest_prefix example1 failed"))
  }
  if (longest_prefix("asdasdad") != BigInt(4)) {
    throw new RuntimeException(String.valueOf("longest_prefix example2 failed"))
  }
  if (longest_prefix("abcab") != BigInt(2)) {
    throw new RuntimeException(String.valueOf("longest_prefix example3 failed"))
  }
}

def main(): Any = {
  test_prefix_function()
  test_longest_prefix()
  val r1: ArrayBuffer[BigInt] = prefix_function("aabcdaabc")
  val r2: ArrayBuffer[BigInt] = prefix_function("asdasdad")
  println(_str(r1))
  println(_str(r2))
  println(_str(longest_prefix("aabcdaabc")))
  println(_str(longest_prefix("abcab")))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
