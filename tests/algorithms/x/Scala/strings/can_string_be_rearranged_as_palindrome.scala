// Generated by Mochi v0.10.63 on 2025-08-11 17:33:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def char_to_lower(c: String): String = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((LETTERS).length)) {
    if (c == LETTERS.slice((i).toInt, (i + BigInt(1)).toInt)) {
      return LOWERCASE.slice((i).toInt, (i + BigInt(1)).toInt)
    }
    i = i + BigInt(1)
  }
  return c
}

def normalize(input_str: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((input_str).size)) {
    val ch: String = input_str.slice((i).toInt, (i + BigInt(1)).toInt)
    val lc: String = char_to_lower(ch)
    if ((lc.charAt(BigInt(0).toInt) >= 'a' && lc.charAt(BigInt(0).toInt) <= 'z').asInstanceOf[Boolean]) {
      res = res + lc
    }
    i = i + BigInt(1)
  }
  return res
}

def can_string_be_rearranged_as_palindrome_counter(input_str: String): Boolean = {
  val s: String = normalize(input_str)
  var freq: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((freq.contains(ch)).asInstanceOf[Boolean]) {
      freq.update(ch, freq.getOrElse(ch.toString, null).asInstanceOf[BigInt] + BigInt(1))
    } else {
      freq.update(ch, BigInt(1))
    }
    i = i + BigInt(1)
  }
  var odd: BigInt = BigInt(0)
  for (key <- freq.keys) {
    if (freq.getOrElse(key.toString, null).asInstanceOf[BigInt] % BigInt(2) != BigInt(0)) {
      odd = odd + BigInt(1)
    }
  }
  return odd < BigInt(2)
}

def can_string_be_rearranged_as_palindrome(input_str: String): Boolean = {
  val s: String = normalize(input_str)
  if (BigInt((s).size) == BigInt(0)) {
    return true
  }
  var character_freq_dict: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val character: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((character_freq_dict.contains(character)).asInstanceOf[Boolean]) {
      character_freq_dict.update(character, character_freq_dict.getOrElse(character.toString, null).asInstanceOf[BigInt] + BigInt(1))
    } else {
      character_freq_dict.update(character, BigInt(1))
    }
    i = i + BigInt(1)
  }
  var odd_char: BigInt = BigInt(0)
  for (character_key <- character_freq_dict.keys) {
    val character_count: BigInt = character_freq_dict.getOrElse(character_key.toString, null).asInstanceOf[BigInt]
    if (character_count % BigInt(2) != BigInt(0)) {
      odd_char = odd_char + BigInt(1)
    }
  }
  return !(odd_char > BigInt(1))
}

val LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val LOWERCASE: String = "abcdefghijklmnopqrstuvwxyz"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(can_string_be_rearranged_as_palindrome_counter("Momo"))
    println(can_string_be_rearranged_as_palindrome_counter("Mother"))
    println(can_string_be_rearranged_as_palindrome("Momo"))
    println(can_string_be_rearranged_as_palindrome("Mother"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
