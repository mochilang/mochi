// Generated by Mochi v0.10.63 on 2025-08-11 15:38:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def palindromic_string(input_string: String): String = {
  var max_length: BigInt = BigInt(0)
  var new_input_string: String = ""
  var output_string: String = ""
  val n: BigInt = BigInt((input_string).size)
  var i: BigInt = BigInt(0)
  while (i < n - BigInt(1)) {
    new_input_string = new_input_string + input_string.slice((i).toInt, (i + BigInt(1)).toInt) + "|"
    i = i + BigInt(1)
  }
  new_input_string = new_input_string + input_string.slice((n - BigInt(1)).toInt, (n).toInt)
  var left: BigInt = BigInt(0)
  var right: BigInt = BigInt(0)
  var length: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  val m: BigInt = BigInt((new_input_string).size)
  while (i < m) {
    length = length :+ (BigInt(1))
    i = i + BigInt(1)
  }
  var start: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (j < m) {
    var k: BigInt = BigInt(1)
    if (j <= right) {
      val mirror: BigInt = left + right - j
      k = length.lift((mirror.toInt).toInt).getOrElse(null) / BigInt(2)
      val diff: BigInt = right - j + BigInt(1)
      if (diff < k) {
        k = diff
      }
      if (k < BigInt(1)) {
        k = BigInt(1)
      }
    }
    while ((j - k >= BigInt(0) && j + k < m).asInstanceOf[Boolean] && new_input_string.slice((j + k).toInt, (j + k + BigInt(1)).toInt) == new_input_string.slice((j - k).toInt, (j - k + BigInt(1)).toInt)) {
      k = k + BigInt(1)
    }
    length((j).toInt) = BigInt(2) * k - BigInt(1)
    if (j + k - BigInt(1) > right) {
      left = j - k + BigInt(1)
      right = j + k - BigInt(1)
    }
    if (length.lift((j.toInt).toInt).getOrElse(null) > max_length) {
      max_length = length.lift((j.toInt).toInt).getOrElse(null)
      start = j
    }
    j = j + BigInt(1)
  }
  val s: String = new_input_string.slice((start - max_length / BigInt(2)).toInt, (start + max_length / BigInt(2) + BigInt(1)).toInt)
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((s).size)) {
    val ch: String = s.slice((idx).toInt, (idx + BigInt(1)).toInt)
    if (ch != "|") {
      output_string = output_string + ch
    }
    idx = idx + BigInt(1)
  }
  return output_string
}

def main(): Any = {
  println(palindromic_string("abbbaba"))
  println(palindromic_string("ababa"))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
