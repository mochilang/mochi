// Generated by Mochi v0.10.63 on 2025-08-11 15:37:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_upper(s: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((s).size)) {
      val ch: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
      var j: BigInt = BigInt(0)
      var converted: String = ch
      val _br1 = new Breaks
      _br1.breakable {
        while (j < BigInt((LOWER).length)) {
          if (LOWER.slice((j.toInt).toInt, (j.toInt).toInt + 1) == ch) {
            converted = UPPER.slice((j.toInt).toInt, (j.toInt).toInt + 1)
            _br1.break()
          }
          j = j + BigInt(1)
        }
      }
      res = res + converted
      i = i + BigInt(1)
    }
  }
  return res
}

def is_digit(ch: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((DIGITS).length)) {
    if (DIGITS.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def clean_id(spanish_id: String): String = {
  val upper_id: String = to_upper(spanish_id)
  var cleaned: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((upper_id).size)) {
    val ch: String = upper_id.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (ch != "-") {
      cleaned = cleaned + ch
    }
    i = i + BigInt(1)
  }
  return cleaned
}

def is_spain_national_id(spanish_id: String): Boolean = {
  val sid: String = clean_id(spanish_id)
  if (BigInt((sid).size) != BigInt(9)) {
    throw new RuntimeException(String.valueOf(ERROR_MSG))
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt(8)) {
    if (!is_digit((sid.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)) {
      throw new RuntimeException(String.valueOf(ERROR_MSG))
    }
    i = i + BigInt(1)
  }
  val number: BigInt = BigInt((sid.slice((BigInt(0)).toInt, (BigInt(8)).toInt)))
  val letter: String = sid.slice((BigInt(8).toInt).toInt, (BigInt(8).toInt).toInt + 1)
  if (is_digit(letter)) {
    throw new RuntimeException(String.valueOf(ERROR_MSG))
  }
  val expected: String = LOOKUP_LETTERS.slice(((number % BigInt(23)).toInt).toInt, ((number % BigInt(23)).toInt).toInt + 1)
  return letter == expected
}

def main(): Any = {
  println(is_spain_national_id("12345678Z"))
  println(is_spain_national_id("12345678z"))
  println(is_spain_national_id("12345678x"))
  println(is_spain_national_id("12345678I"))
  println(is_spain_national_id("12345678-Z"))
}

val DIGITS: String = "0123456789"

val UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

val LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val LOOKUP_LETTERS: String = "TRWAGMYFPDXBNJZSQVHLCKE"

val ERROR_MSG: String = "Input must be a string of 8 numbers plus letter"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
