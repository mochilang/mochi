// Generated by Mochi v0.10.63 on 2025-08-11 15:39:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def index_of_char(s: String, ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  val digits: String = "0123456789"
  var idx: BigInt = index_of_char(upper, ch)
  if (idx >= BigInt(0)) {
    return BigInt(65) + idx
  }
  idx = index_of_char(lower, ch)
  if (idx >= BigInt(0)) {
    return BigInt(97) + idx
  }
  idx = index_of_char(digits, ch)
  if (idx >= BigInt(0)) {
    return BigInt(48) + idx
  }
  if (ch == "\u00fc") {
    return BigInt(252)
  }
  if (ch == "\u00dc") {
    return BigInt(220)
  }
  if (ch == " ") {
    return BigInt(32)
  }
  return BigInt(0)
}

def rabin_karp(pattern: String, text: String): Boolean = {
  val p_len: BigInt = BigInt((pattern).size)
  val t_len: BigInt = BigInt((text).size)
  if (p_len > t_len) {
    return false
  }
  var p_hash: BigInt = BigInt(0)
  var t_hash: BigInt = BigInt(0)
  var modulus_power: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < p_len) {
    p_hash = (ord((pattern.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) + p_hash * alphabet_size) % modulus
    t_hash = (ord((text.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString) + t_hash * alphabet_size) % modulus
    if (i != p_len - BigInt(1)) {
      modulus_power = modulus_power * alphabet_size % modulus
    }
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt(0)
  val _ct2 = new Breaks
  while (j <= t_len - p_len) {
    _ct2.breakable {
      if ((t_hash == p_hash && text.slice((j).toInt, (j + p_len).toInt) == pattern).asInstanceOf[Boolean]) {
        return true
      }
      if (j == t_len - p_len) {
        j = j + BigInt(1)
        _ct2.break()
      }
      t_hash = ((t_hash - ord((text.slice((j.toInt).toInt, (j.toInt).toInt + 1)).toString) * modulus_power) * alphabet_size + ord((text.slice(((j + p_len).toInt).toInt, ((j + p_len).toInt).toInt + 1)).toString)) % modulus
      if (t_hash < BigInt(0)) {
        t_hash = t_hash + modulus
      }
      j = j + BigInt(1)
    }
  }
  return false
}

def test_rabin_karp(): Any = {
  val pattern1: String = "abc1abc12"
  val text1: String = "alskfjaldsabc1abc1abc12k23adsfabcabc"
  val text2: String = "alskfjaldsk23adsfabcabc"
  if ((!rabin_karp(pattern1, text1) || rabin_karp(pattern1, text2)).asInstanceOf[Boolean]) {
    println("Failure")
    return
  }
  val pattern2: String = "ABABX"
  val text3: String = "ABABZABABYABABX"
  if (!rabin_karp(pattern2, text3)) {
    println("Failure")
    return
  }
  val pattern3: String = "AAAB"
  val text4: String = "ABAAAAAB"
  if (!rabin_karp(pattern3, text4)) {
    println("Failure")
    return
  }
  val pattern4: String = "abcdabcy"
  val text5: String = "abcxabcdabxabcdabcdabcy"
  if (!rabin_karp(pattern4, text5)) {
    println("Failure")
    return
  }
  val pattern5: String = "L\u00fc"
  val text6: String = "L\u00fcsai"
  if (!rabin_karp(pattern5, text6)) {
    println("Failure")
    return
  }
  val pattern6: String = "Lue"
  if (rabin_karp(pattern6, text6)) {
    println("Failure")
    return
  }
  println("Success.")
  return null
}

val alphabet_size: BigInt = BigInt(256)

val modulus: BigInt = BigInt(1000003)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    test_rabin_karp()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
