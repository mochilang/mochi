// Generated by Mochi v0.10.63 on 2025-08-11 17:34:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def etaoin_index(letter: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((ETAOIN).length)) {
    if (ETAOIN.slice((i).toInt, (i + BigInt(1)).toInt) == letter) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt((ETAOIN).length)
}

def get_letter_count(message: String): scala.collection.mutable.Map[String,BigInt] = {
  var letter_count: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((LETTERS).length)) {
    val c: String = LETTERS.slice((i).toInt, (i + BigInt(1)).toInt)
    letter_count.update(c, BigInt(0))
    i = i + BigInt(1)
  }
  val msg = message.toUpperCase()
  var j: BigInt = BigInt(0)
  while (j < BigInt((msg).size)) {
    val ch: String = msg.slice((j).toInt, (j + BigInt(1)).toInt)
    if ((LETTERS.contains(ch)).asInstanceOf[Boolean]) {
      letter_count.update(ch, letter_count.getOrElse(ch.toString, null).asInstanceOf[BigInt] + BigInt(1))
    }
    j = j + BigInt(1)
  }
  return letter_count
}

def get_frequency_order(message: String): String = {
  val letter_to_freq: scala.collection.mutable.Map[String,BigInt] = get_letter_count(message)
  var max_freq: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((LETTERS).length)) {
    val letter: String = LETTERS.slice((i).toInt, (i + BigInt(1)).toInt)
    val f: BigInt = letter_to_freq.getOrElse(letter.toString, null).asInstanceOf[BigInt]
    if (f > max_freq) {
      max_freq = f
    }
    i = i + BigInt(1)
  }
  var result: String = ""
  var freq: BigInt = max_freq
  while (freq >= BigInt(0)) {
    var group: ArrayBuffer[String] = ArrayBuffer[String]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((LETTERS).length)) {
      val letter: String = LETTERS.slice((j).toInt, (j + BigInt(1)).toInt)
      if (letter_to_freq.getOrElse(letter.toString, null).asInstanceOf[BigInt] == freq) {
        group = group :+ (letter)
      }
      j = j + BigInt(1)
    }
    var g_len: BigInt = BigInt((group).size)
    var a: BigInt = BigInt(0)
    while (a < g_len) {
      var b: BigInt = BigInt(0)
      while (b < g_len - a - BigInt(1)) {
        val g1: String = group.lift((b.toInt).toInt).getOrElse("")
        val g2: String = group.lift(((b + BigInt(1)).toInt).toInt).getOrElse("")
        val idx1: BigInt = etaoin_index(g1)
        val idx2: BigInt = etaoin_index(g2)
        if (idx1 < idx2) {
          val tmp: String = group.lift((b.toInt).toInt).getOrElse("")
          group((b).toInt) = group.lift(((b + BigInt(1)).toInt).toInt).getOrElse("")
          group((b + BigInt(1)).toInt) = tmp
        }
        b = b + BigInt(1)
      }
      a = a + BigInt(1)
    }
    var g: BigInt = BigInt(0)
    while (g < BigInt((group).size)) {
      result = result + group.lift((g.toInt).toInt).getOrElse("")
      g = g + BigInt(1)
    }
    freq = freq - BigInt(1)
  }
  return result
}

def english_freq_match_score(message: String): BigInt = {
  val freq_order: String = get_frequency_order(message)
  val top: String = freq_order.slice((BigInt(0)).toInt, (BigInt(6)).toInt)
  val bottom: String = freq_order.slice((BigInt((freq_order).size) - BigInt(6)).toInt, (BigInt((freq_order).size)).toInt)
  var score: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt(6)) {
    val c: String = ETAOIN.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((top.contains(c)).asInstanceOf[Boolean]) {
      score = score + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt((ETAOIN).length) - BigInt(6)
  while (j < BigInt((ETAOIN).length)) {
    val c: String = ETAOIN.slice((j).toInt, (j + BigInt(1)).toInt)
    if ((bottom.contains(c)).asInstanceOf[Boolean]) {
      score = score + BigInt(1)
    }
    j = j + BigInt(1)
  }
  return score
}

def main(): Any = {
  println(get_frequency_order("Hello World"))
  println(english_freq_match_score("Hello World"))
}

val ETAOIN: String = "ETAOINSHRDLCUMWFGYPBVKJXQZ"

val LETTERS: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
