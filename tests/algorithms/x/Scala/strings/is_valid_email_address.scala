// Generated by Mochi v0.10.63 on 2025-08-11 15:38:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def count_char(s: String, target: String): BigInt = {
  var cnt: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) == target) {
      cnt = cnt + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return cnt
}

def char_in(c: String, allowed: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((allowed).size)) {
    if (allowed.slice((i).toInt, (i + BigInt(1)).toInt) == c) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def starts_with_char(s: String, c: String): Boolean = {
  return (BigInt((s).size) > BigInt(0) && s.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == c).asInstanceOf[Boolean]
}

def ends_with_char(s: String, c: String): Boolean = {
  return (BigInt((s).size) > BigInt(0) && s.slice((BigInt((s).size) - BigInt(1)).toInt, (BigInt((s).size)).toInt) == c).asInstanceOf[Boolean]
}

def contains_double_dot(s: String): Boolean = {
  if (BigInt((s).size) < BigInt(2)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size) - BigInt(1)) {
    if (s.slice((i).toInt, (i + BigInt(2)).toInt) == "..") {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def is_valid_email_address(email: String): Boolean = {
  if (count_char(email, "@") != BigInt(1)) {
    return false
  }
  var at_idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  val _br3 = new Breaks
  _br3.breakable {
    while (i < BigInt((email).size)) {
      if (email.slice((i).toInt, (i + BigInt(1)).toInt) == "@") {
        at_idx = i
        _br3.break()
      }
      i = i + BigInt(1)
    }
  }
  val local_part: String = email.slice((BigInt(0)).toInt, (at_idx).toInt)
  val domain: String = email.slice((at_idx + BigInt(1)).toInt, (BigInt((email).size)).toInt)
  if ((BigInt((local_part).size) > MAX_LOCAL_PART_OCTETS || BigInt((domain).size) > MAX_DOMAIN_OCTETS).asInstanceOf[Boolean]) {
    return false
  }
  i = BigInt(0)
  while (i < BigInt((local_part).size)) {
    val ch: String = local_part.slice((i).toInt, (i + BigInt(1)).toInt)
    if (!char_in(ch, ASCII_LETTERS + DIGITS + LOCAL_EXTRA)) {
      return false
    }
    i = i + BigInt(1)
  }
  if (((starts_with_char(local_part, ".") || ends_with_char(local_part, ".")).asInstanceOf[Boolean] || contains_double_dot(local_part)).asInstanceOf[Boolean]) {
    return false
  }
  i = BigInt(0)
  while (i < BigInt((domain).size)) {
    val ch: String = domain.slice((i).toInt, (i + BigInt(1)).toInt)
    if (!char_in(ch, ASCII_LETTERS + DIGITS + DOMAIN_EXTRA)) {
      return false
    }
    i = i + BigInt(1)
  }
  if ((starts_with_char(domain, "-") || ends_with_char(domain, ".")).asInstanceOf[Boolean]) {
    return false
  }
  if (((starts_with_char(domain, ".") || ends_with_char(domain, ".")).asInstanceOf[Boolean] || contains_double_dot(domain)).asInstanceOf[Boolean]) {
    return false
  }
  return true
}

val MAX_LOCAL_PART_OCTETS: BigInt = BigInt(64)

val MAX_DOMAIN_OCTETS: BigInt = BigInt(255)

val ASCII_LETTERS: String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

val DIGITS: String = "0123456789"

val LOCAL_EXTRA: String = ".(!#$%&'*+-/=?^_`{|}~)"

val DOMAIN_EXTRA: String = ".-"

val email_tests: ArrayBuffer[String] = ArrayBuffer("simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", "")

var idx: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (idx < BigInt((email_tests).size)) {
      val email: String = email_tests.lift((idx.toInt).toInt).getOrElse("")
      println(_str(is_valid_email_address(email)))
      idx = idx + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
