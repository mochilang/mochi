// Generated by Mochi v0.10.63 on 2025-08-11 15:40:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def repeat_str(s: String, count: BigInt): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < count) {
    res = res + s
    i = i + BigInt(1)
  }
  return res
}

def split_words(s: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == " ") {
      if (current != "") {
        res = res :+ (current)
        current = ""
      }
    } else {
      current = current + ch
    }
    i = i + BigInt(1)
  }
  if (current != "") {
    res = res :+ (current)
  }
  return res
}

def justify_line(line: ArrayBuffer[String], width: BigInt, max_width: BigInt): String = {
  val overall_spaces_count: BigInt = max_width - width
  val words_count: BigInt = BigInt((line).size)
  if (words_count == BigInt(1)) {
    return line.lift((BigInt(0).toInt).toInt).getOrElse("") + repeat_str(" ", overall_spaces_count)
  }
  val spaces_to_insert_between_words: BigInt = words_count - BigInt(1)
  var num_spaces_between_words_list: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  val base: BigInt = overall_spaces_count / spaces_to_insert_between_words
  val extra: BigInt = overall_spaces_count % spaces_to_insert_between_words
  var i: BigInt = BigInt(0)
  while (i < spaces_to_insert_between_words) {
    var spaces: BigInt = base
    if (i < extra) {
      spaces = spaces + BigInt(1)
    }
    num_spaces_between_words_list = num_spaces_between_words_list :+ (spaces)
    i = i + BigInt(1)
  }
  var aligned: String = ""
  i = BigInt(0)
  while (i < spaces_to_insert_between_words) {
    aligned = aligned + line.lift((i.toInt).toInt).getOrElse("") + repeat_str(" ", num_spaces_between_words_list.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  aligned = aligned + line.lift((spaces_to_insert_between_words.toInt).toInt).getOrElse("")
  return aligned
}

def text_justification(word: String, max_width: BigInt): ArrayBuffer[String] = {
  val words: ArrayBuffer[String] = split_words(word)
  var answer: ArrayBuffer[String] = ArrayBuffer[String]()
  var line: ArrayBuffer[String] = ArrayBuffer[String]()
  var width: BigInt = BigInt(0)
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((words).size)) {
    val w: String = words.lift((idx.toInt).toInt).getOrElse("")
    if (width + BigInt((w).size) + BigInt((line).size) <= max_width) {
      line = line :+ (w)
      width = width + BigInt((w).size)
    } else {
      answer = answer :+ (justify_line(line, width, max_width))
      line = ArrayBuffer(w)
      width = BigInt((w).size)
    }
    idx = idx + BigInt(1)
  }
  val remaining_spaces: BigInt = max_width - width - BigInt((line).size)
  var last_line: String = ""
  var j: BigInt = BigInt(0)
  while (j < BigInt((line).size)) {
    if (j > BigInt(0)) {
      last_line = last_line + " "
    }
    last_line = last_line + line.lift((j.toInt).toInt).getOrElse("")
    j = j + BigInt(1)
  }
  last_line = last_line + repeat_str(" ", remaining_spaces + BigInt(1))
  answer = answer :+ (last_line)
  return answer
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(text_justification("This is an example of text justification.", BigInt(16))))
    println(_str(text_justification("Two roads diverged in a yellow wood", BigInt(16))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
