// Generated by Mochi v0.10.63 on 2025-08-11 15:37:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def parse_int(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    value = value * BigInt(10) + BigInt(c.toString.head.toInt)
    i = i + BigInt(1)
  }
  return value
}

def is_polish_national_id(id: String): Boolean = {
  if (BigInt((id).size) == BigInt(0)) {
    return false
  }
  if (id.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-") {
    return false
  }
  val input_int: BigInt = parse_int(id)
  if ((input_int < BigInt(10100000) || input_int > BigInt("99923199999")).asInstanceOf[Boolean]) {
    return false
  }
  val month: BigInt = parse_int(id.slice((BigInt(2)).toInt, (BigInt(4)).toInt))
  if (!(((((month >= BigInt(1) && month <= BigInt(12)).asInstanceOf[Boolean] || (month >= BigInt(21) && month <= BigInt(32)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || (month >= BigInt(41) && month <= BigInt(52)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || (month >= BigInt(61) && month <= BigInt(72)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || (month >= BigInt(81) && month <= BigInt(92)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    return false
  }
  val day: BigInt = parse_int(id.slice((BigInt(4)).toInt, (BigInt(6)).toInt))
  if ((day < BigInt(1) || day > BigInt(31)).asInstanceOf[Boolean]) {
    return false
  }
  val multipliers: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(3), BigInt(7), BigInt(9), BigInt(1), BigInt(3), BigInt(7), BigInt(9), BigInt(1), BigInt(3))
  var subtotal: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((multipliers).size)) {
    val digit: BigInt = parse_int(id.slice((i).toInt, (i + BigInt(1)).toInt))
    subtotal = subtotal + digit * multipliers.lift((i.toInt).toInt).getOrElse(null) % BigInt(10)
    i = i + BigInt(1)
  }
  val checksum: BigInt = BigInt(10) - subtotal % BigInt(10)
  return checksum == input_int % BigInt(10)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(is_polish_national_id("02070803628")))
    println(_str(is_polish_national_id("02150803629")))
    println(_str(is_polish_national_id("02075503622")))
    println(_str(is_polish_national_id("-99012212349")))
    println(_str(is_polish_national_id("990122123499999")))
    println(_str(is_polish_national_id("02070803621")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
