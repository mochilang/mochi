// Generated by Mochi v0.10.63 on 2025-08-11 17:34:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def damerau_levenshtein_distance(first_string: String, second_string: String): BigInt = {
  val len1: BigInt = BigInt((first_string).size)
  val len2: BigInt = BigInt((second_string).size)
  var dp_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  for (_ <- (BigInt(0)).toInt until (len1 + BigInt(1)).toInt) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    for (_2 <- (BigInt(0)).toInt until (len2 + BigInt(1)).toInt) {
      row = row :+ (BigInt(0))
    }
    dp_matrix = dp_matrix :+ (row)
  }
  for (i <- (BigInt(0)).toInt until (len1 + BigInt(1)).toInt) {
    var row: ArrayBuffer[BigInt] = dp_matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    row((BigInt(0)).toInt) = BigInt(i.toString.head.asDigit)
    dp_matrix((i).toInt) = row
  }
  var first_row: ArrayBuffer[BigInt] = dp_matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
  for (j <- (BigInt(0)).toInt until (len2 + BigInt(1)).toInt) {
    first_row((j).toInt) = BigInt(j.toString.head.asDigit)
  }
  dp_matrix((BigInt(0)).toInt) = first_row
  for (i <- (BigInt(1)).toInt until (len1 + BigInt(1)).toInt) {
    var row: ArrayBuffer[BigInt] = dp_matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    val first_char: String = first_string.slice((i - BigInt(1)).toInt, (i).toInt)
    for (j <- (BigInt(1)).toInt until (len2 + BigInt(1)).toInt) {
      val second_char: String = second_string.slice((j - BigInt(1)).toInt, (j).toInt)
      val cost: BigInt = (if (first_char == second_char) BigInt(0) else BigInt(1))
      var value: BigInt = dp_matrix.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(null) + BigInt(1)
      val insertion: BigInt = row.lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) + BigInt(1)
      if (insertion < BigInt(value.toString.head.asDigit)) {
        value = insertion
      }
      val substitution: BigInt = dp_matrix.lift(((i - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(1)).toInt).toInt).getOrElse(null) + cost
      if (substitution < BigInt(value.toString.head.asDigit)) {
        value = substitution
      }
      row((j).toInt) = BigInt(value.toString.head.asDigit)
      if ((((BigInt(i.toString.head.asDigit) > BigInt(1) && BigInt(j.toString.head.asDigit) > BigInt(1)).asInstanceOf[Boolean] && first_string.slice((i - BigInt(1)).toInt, (i).toInt) == second_string.slice((j - BigInt(2)).toInt, (j - BigInt(1)).toInt)).asInstanceOf[Boolean] && first_string.slice((i - BigInt(2)).toInt, (i - BigInt(1)).toInt) == second_string.slice((j - BigInt(1)).toInt, (j).toInt)).asInstanceOf[Boolean]) {
        val transposition: BigInt = dp_matrix.lift(((i - BigInt(2)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j - BigInt(2)).toInt).toInt).getOrElse(null) + cost
        if (transposition < row.lift((j.toInt).toInt).getOrElse(null)) {
          row((j).toInt) = transposition
        }
      }
    }
    dp_matrix((i).toInt) = row
  }
  return dp_matrix.lift((len1.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((len2.toInt).toInt).getOrElse(null)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(damerau_levenshtein_distance("cat", "cut")))
    println(_str(damerau_levenshtein_distance("kitten", "sitting")))
    println(_str(damerau_levenshtein_distance("hello", "world")))
    println(_str(damerau_levenshtein_distance("book", "back")))
    println(_str(damerau_levenshtein_distance("container", "containment")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
