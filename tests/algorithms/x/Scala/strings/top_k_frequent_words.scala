// Generated by Mochi v0.10.63 on 2025-08-11 15:44:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class WordCount(var word: String, var count: BigInt)

def heapify(arr: ArrayBuffer[WordCount], index: BigInt, heap_size: BigInt): Any = {
  var largest: BigInt = index
  val left: BigInt = BigInt(2) * index + BigInt(1)
  val right: BigInt = BigInt(2) * index + BigInt(2)
  if (left < heap_size) {
    val left_item: WordCount = arr.lift((left.toInt).toInt).getOrElse(null)
    val largest_item: WordCount = arr.lift((largest.toInt).toInt).getOrElse(null)
    if (left_item.asInstanceOf[WordCount].count > largest_item.asInstanceOf[WordCount].count) {
      largest = left
    }
  }
  if (right < heap_size) {
    val right_item: WordCount = arr.lift((right.toInt).toInt).getOrElse(null)
    val largest_item2: WordCount = arr.lift((largest.toInt).toInt).getOrElse(null)
    if (right_item.asInstanceOf[WordCount].count > largest_item2.asInstanceOf[WordCount].count) {
      largest = right
    }
  }
  if (largest != index) {
    val temp: WordCount = arr.lift((largest.toInt).toInt).getOrElse(null)
    arr((largest).toInt) = arr.lift((index.toInt).toInt).getOrElse(null)
    arr((index).toInt) = temp
    heapify(arr, largest, heap_size)
  }
}

def build_max_heap(arr: ArrayBuffer[WordCount]): Any = {
  var i: BigInt = BigInt((arr).size) / BigInt(2) - BigInt(1)
  while (i >= BigInt(0)) {
    heapify(arr, i, BigInt((arr).size))
    i = i - BigInt(1)
  }
}

def top_k_frequent_words(words: ArrayBuffer[String], k_value: BigInt): ArrayBuffer[String] = {
  freq_map = scala.collection.mutable.Map()
  var i: BigInt = BigInt(0)
  while (i < BigInt((words).size)) {
    val w: String = words.lift((i.toInt).toInt).getOrElse("")
    if ((freq_map.contains(w)).asInstanceOf[Boolean]) {
      freq_map.update(w, freq_map.getOrElse(w.toString, BigInt(BigInt(0))).asInstanceOf[BigInt] + BigInt(1))
    } else {
      freq_map.update(w, BigInt(1))
    }
    i = i + BigInt(1)
  }
  var heap: ArrayBuffer[WordCount] = ArrayBuffer[WordCount]()
  for (w <- freq_map.keys) {
    heap = heap :+ (WordCount(w, freq_map.getOrElse(w, null)))
  }
  build_max_heap(heap)
  var result: ArrayBuffer[String] = ArrayBuffer[String]()
  var heap_size: BigInt = BigInt((heap).size)
  var limit: BigInt = k_value
  if (limit > heap_size) {
    limit = heap_size
  }
  var j: BigInt = BigInt(0)
  while (j < limit) {
    val item: WordCount = heap.lift((BigInt(0).toInt).toInt).getOrElse(null)
    result = result :+ (item.asInstanceOf[WordCount].word)
    heap((BigInt(0)).toInt) = heap.lift(((heap_size - BigInt(1)).toInt).toInt).getOrElse(null)
    heap((heap_size - BigInt(1)).toInt) = item
    heap_size = heap_size - BigInt(1)
    heapify(heap, BigInt(0), heap_size)
    j = j + BigInt(1)
  }
  return result
}

def main(): Any = {
  val sample: ArrayBuffer[String] = ArrayBuffer("a", "b", "c", "a", "c", "c")
  println(top_k_frequent_words(sample, BigInt(3)))
  println(top_k_frequent_words(sample, BigInt(2)))
  println(top_k_frequent_words(sample, BigInt(1)))
  println(top_k_frequent_words(sample, BigInt(0)))
}

var freq_map: Map[String,BigInt] = scala.collection.mutable.Map[String,BigInt]()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
