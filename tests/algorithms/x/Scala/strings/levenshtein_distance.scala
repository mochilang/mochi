// Generated by Mochi v0.10.63 on 2025-08-11 15:38:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def range_list(n: BigInt): ArrayBuffer[BigInt] = {
  var lst: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    lst = lst :+ (i)
    i = i + BigInt(1)
  }
  return lst
}

def min3(a: BigInt, b: BigInt, c: BigInt): BigInt = {
  var m: BigInt = a
  if (b < m) {
    m = b
  }
  if (c < m) {
    m = c
  }
  return m
}

def levenshtein_distance(first_word: String, second_word: String): BigInt = {
  if (BigInt((first_word).size) < BigInt((second_word).size)) {
    return levenshtein_distance(second_word, first_word)
  }
  if (BigInt((second_word).size) == BigInt(0)) {
    return BigInt((first_word).size)
  }
  var previous_row: ArrayBuffer[BigInt] = range_list(BigInt((second_word).size) + BigInt(1))
  var i: BigInt = BigInt(0)
  while (i < BigInt((first_word).size)) {
    val c1: String = first_word.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    var current_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    current_row = current_row :+ (i + BigInt(1))
    var j: BigInt = BigInt(0)
    while (j < BigInt((second_word).size)) {
      val c2: String = second_word.slice((j.toInt).toInt, (j.toInt).toInt + 1)
      val insertions: BigInt = previous_row.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null) + BigInt(1)
      val deletions: BigInt = current_row.lift((j.toInt).toInt).getOrElse(null) + BigInt(1)
      val substitutions: BigInt = previous_row.lift((j.toInt).toInt).getOrElse(null) + (if (c1 == c2) BigInt(0) else BigInt(1))
      val min_val: BigInt = min3(insertions, deletions, substitutions)
      current_row = current_row :+ (min_val)
      j = j + BigInt(1)
    }
    previous_row = current_row
    i = i + BigInt(1)
  }
  return previous_row.lift(((BigInt((previous_row).size) - BigInt(1)).toInt).toInt).getOrElse(null)
}

def levenshtein_distance_optimized(first_word: String, second_word: String): BigInt = {
  if (BigInt((first_word).size) < BigInt((second_word).size)) {
    return levenshtein_distance_optimized(second_word, first_word)
  }
  if (BigInt((second_word).size) == BigInt(0)) {
    return BigInt((first_word).size)
  }
  var previous_row: ArrayBuffer[BigInt] = range_list(BigInt((second_word).size) + BigInt(1))
  var i: BigInt = BigInt(0)
  while (i < BigInt((first_word).size)) {
    val c1: String = first_word.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    var current_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    current_row = current_row :+ (i + BigInt(1))
    var k: BigInt = BigInt(0)
    while (k < BigInt((second_word).size)) {
      current_row = current_row :+ (BigInt(0))
      k = k + BigInt(1)
    }
    var j: BigInt = BigInt(0)
    while (j < BigInt((second_word).size)) {
      val c2: String = second_word.slice((j.toInt).toInt, (j.toInt).toInt + 1)
      val insertions: BigInt = previous_row.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null) + BigInt(1)
      val deletions: BigInt = current_row.lift((j.toInt).toInt).getOrElse(null) + BigInt(1)
      val substitutions: BigInt = previous_row.lift((j.toInt).toInt).getOrElse(null) + (if (c1 == c2) BigInt(0) else BigInt(1))
      val min_val: BigInt = min3(insertions, deletions, substitutions)
      current_row((j + BigInt(1)).toInt) = min_val
      j = j + BigInt(1)
    }
    previous_row = current_row
    i = i + BigInt(1)
  }
  return previous_row.lift(((BigInt((previous_row).size) - BigInt(1)).toInt).toInt).getOrElse(null)
}

def main(): Any = {
  val a: String = "kitten"
  val b: String = "sitting"
  println(_str(levenshtein_distance(a, b)))
  println(_str(levenshtein_distance_optimized(a, b)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
