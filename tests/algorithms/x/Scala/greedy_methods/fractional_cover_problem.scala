// Generated by Mochi v0.10.66 on 2025-08-15 10:18:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Item(var weight: BigInt, var value: BigInt)

def ratio(item: Item): Double = {
  return (item.asInstanceOf[Item].value).toString.toDouble / (item.asInstanceOf[Item].weight).toString.toDouble
}

def fractional_cover(items: ArrayBuffer[Item], capacity: BigInt): Double = {
  if (capacity < BigInt(0)) {
    throw new RuntimeException(String.valueOf("Capacity cannot be negative"))
  }
  var total: Double = 0.0
  var remaining: BigInt = capacity
  var sorted: ArrayBuffer[Item] = ({ var _tmp = ArrayBuffer[(Double,Item)]() ; for (it <- items) { _tmp.append((-ratio(it), it)) }; var _res = _tmp.sortBy(_._1).map(_._2); _res })
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((sorted).size) && remaining > BigInt(0)) {
    var item: Item = sorted.lift((idx.toInt).toInt).getOrElse(null)
    var take: BigInt = (if (item.asInstanceOf[Item].weight < remaining) item.asInstanceOf[Item].weight else remaining)
    total = total + take.toString.toDouble * ratio(item)
    remaining = remaining - take
    idx = idx + BigInt(1)
  }
  return total
}

var items1: ArrayBuffer[Item] = ArrayBuffer(Item(BigInt(10), BigInt(60)), Item(BigInt(20), BigInt(100)), Item(BigInt(30), BigInt(120)))

var items2: ArrayBuffer[Item] = ArrayBuffer(Item(BigInt(20), BigInt(100)), Item(BigInt(30), BigInt(120)), Item(BigInt(10), BigInt(60)))

var items3: ArrayBuffer[Item] = ArrayBuffer[Item]()

var items4: ArrayBuffer[Item] = ArrayBuffer(Item(BigInt(10), BigInt(60)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(fractional_cover(items1, BigInt(50))))
    println(_str(fractional_cover(items2, BigInt(25))))
    println(_str(fractional_cover(items3, BigInt(50))))
    println(_str(fractional_cover(items4, BigInt(5))))
    println(_str(fractional_cover(items4, BigInt(1))))
    println(_str(fractional_cover(items4, BigInt(0))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
