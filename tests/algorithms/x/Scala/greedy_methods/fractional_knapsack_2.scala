// Generated by Mochi v0.10.63 on 2025-08-12 08:50:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class KnapsackResult(var max_value: Double, var fractions: ArrayBuffer[Double])

def sort_by_ratio(index: ArrayBuffer[BigInt], ratio: ArrayBuffer[Double]): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt(1)
  while (i < BigInt((index).size)) {
    val key: BigInt = index.lift((i.toInt).toInt).getOrElse(BigInt(0))
    val key_ratio: Double = ratio.lift((key.toInt).toInt).getOrElse(0.0)
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && ratio.lift((index.lift((j.toInt).toInt).getOrElse(BigInt(0)).toInt).toInt).getOrElse(0.0) < key_ratio) {
      index((j + BigInt(1)).toInt) = index.lift((j.toInt).toInt).getOrElse(BigInt(0))
      j = j - BigInt(1)
    }
    index((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return index
}

def fractional_knapsack(value: ArrayBuffer[Double], weight: ArrayBuffer[Double], _capacity: Double): KnapsackResult = {
  var capacity: Double = _capacity
  val n: BigInt = BigInt((value).size)
  var index: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    index = index :+ (i)
    i = i + BigInt(1)
  }
  var ratio: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < n) {
    ratio = ratio :+ (value.lift((i.toInt).toInt).getOrElse(0.0) / weight.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  index = sort_by_ratio(index, ratio)
  var fractions: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < n) {
    fractions = fractions :+ (0.0)
    i = i + BigInt(1)
  }
  var max_value: Double = 0.0
  var idx: BigInt = BigInt(0)
  val _br5 = new Breaks
  _br5.breakable {
    while (idx < BigInt((index).size)) {
      val item: BigInt = index.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      if (weight.lift((item.toInt).toInt).getOrElse(0.0) <= capacity) {
        fractions((item).toInt) = 1.0
        max_value = max_value + value.lift((item.toInt).toInt).getOrElse(0.0)
        capacity = capacity - weight.lift((item.toInt).toInt).getOrElse(0.0)
      } else {
        fractions((item).toInt) = capacity / weight.lift((item.toInt).toInt).getOrElse(0.0)
        max_value = max_value + value.lift((item.toInt).toInt).getOrElse(0.0) * capacity / weight.lift((item.toInt).toInt).getOrElse(0.0)
        _br5.break()
      }
      idx = idx + BigInt(1)
    }
  }
  return KnapsackResult(max_value, fractions)
}

val v: ArrayBuffer[Double] = ArrayBuffer(1.0, 3.0, 5.0, 7.0, 9.0)

val w: ArrayBuffer[Double] = ArrayBuffer(0.9, 0.7, 0.5, 0.3, 0.1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(fractional_knapsack(v, w, 5.0))
    println(fractional_knapsack(ArrayBuffer(1.0, 3.0, 5.0, 7.0), ArrayBuffer(0.9, 0.7, 0.5, 0.3), 30.0))
    println(fractional_knapsack((ArrayBuffer[Double]()).asInstanceOf[ArrayBuffer[Double]], (ArrayBuffer[Double]()).asInstanceOf[ArrayBuffer[Double]], 30.0))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
