// Generated by Mochi v0.10.63 on 2025-08-12 08:51:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def insertion_sort(a: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt(1)
  while (i < BigInt((a).size)) {
    val key: BigInt = a.lift((i.toInt).toInt).getOrElse(BigInt(0))
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && a.lift((j.toInt).toInt).getOrElse(BigInt(0)) > key) {
      a((j + BigInt(1)).toInt) = a.lift((j.toInt).toInt).getOrElse(BigInt(0))
      j = j - BigInt(1)
    }
    a((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return a
}

def minimum_waiting_time(queries: ArrayBuffer[BigInt]): BigInt = {
  val n: BigInt = BigInt((queries).size)
  if ((n == BigInt(0) || n == BigInt(1)).asInstanceOf[Boolean]) {
    return BigInt(0)
  }
  val sorted: ArrayBuffer[BigInt] = insertion_sort(queries)
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < n) {
    total = total + sorted.lift((i.toInt).toInt).getOrElse(BigInt(0)) * (n - i - BigInt(1))
    i = i + BigInt(1)
  }
  return total
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(minimum_waiting_time(ArrayBuffer(BigInt(3), BigInt(2), BigInt(1), BigInt(2), BigInt(6))))
    println(minimum_waiting_time(ArrayBuffer(BigInt(3), BigInt(2), BigInt(1))))
    println(minimum_waiting_time(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4))))
    println(minimum_waiting_time(ArrayBuffer(BigInt(5), BigInt(5), BigInt(5), BigInt(5))))
    println(minimum_waiting_time(ArrayBuffer[BigInt]()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
