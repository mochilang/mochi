// Generated by Mochi v0.10.66 on 2025-08-15 15:28:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class HeapItem(var value: BigInt, var list_idx: BigInt, var elem_idx: BigInt)

def smallest_range(nums: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var heap: ArrayBuffer[HeapItem] = ArrayBuffer[HeapItem]()
  var current_max: BigInt = -INF
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    var first_val: BigInt = nums.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    heap = (heap :+ HeapItem(first_val, i, BigInt(0)))
    if (first_val > current_max) {
      current_max = first_val
    }
    i = i + BigInt(1)
  }
  var best: ArrayBuffer[BigInt] = ArrayBuffer(-INF, INF)
  val _br1 = new Breaks
  _br1.breakable {
    while (BigInt((heap).size) > BigInt(0)) {
      var min_idx: BigInt = BigInt(0)
      var j: BigInt = BigInt(1)
      while (j < BigInt((heap).size)) {
        var hj: HeapItem = heap.lift((j.toInt).toInt).getOrElse(null)
        var hmin: HeapItem = heap.lift((min_idx.toInt).toInt).getOrElse(null)
        if (hj.asInstanceOf[HeapItem].value < hmin.asInstanceOf[HeapItem].value) {
          min_idx = j
        }
        j = j + BigInt(1)
      }
      var item: HeapItem = heap.lift((min_idx.toInt).toInt).getOrElse(null)
      var new_heap: ArrayBuffer[HeapItem] = ArrayBuffer[HeapItem]()
      var k: BigInt = BigInt(0)
      while (k < BigInt((heap).size)) {
        if (k != min_idx) {
          new_heap = (new_heap :+ heap.lift((k.toInt).toInt).getOrElse(null))
        }
        k = k + BigInt(1)
      }
      heap = new_heap
      var current_min: BigInt = item.asInstanceOf[HeapItem].value
      if (current_max - current_min < best.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) - best.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) {
        best = ArrayBuffer(current_min, current_max)
      }
      if (item.asInstanceOf[HeapItem].elem_idx == BigInt((nums.lift((item.asInstanceOf[HeapItem].list_idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1)) {
        _br1.break()
      }
      var next_val: BigInt = nums.lift((item.asInstanceOf[HeapItem].list_idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((item.asInstanceOf[HeapItem].elem_idx + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      heap = (heap :+ HeapItem(next_val, item.asInstanceOf[HeapItem].list_idx, item.asInstanceOf[HeapItem].elem_idx + BigInt(1)))
      if (next_val > current_max) {
        current_max = next_val
      }
    }
  }
  return best
}

def list_to_string(arr: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    s = s + _str(arr.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    if (i < BigInt((arr).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  return s + "]"
}

def main(): Any = {
  var result1: ArrayBuffer[BigInt] = smallest_range(ArrayBuffer(ArrayBuffer(BigInt(4), BigInt(10), BigInt(15), BigInt(24), BigInt(26)), ArrayBuffer(BigInt(0), BigInt(9), BigInt(12), BigInt(20)), ArrayBuffer(BigInt(5), BigInt(18), BigInt(22), BigInt(30))))
  println(_str(list_to_string(result1)))
  var result2: ArrayBuffer[BigInt] = smallest_range(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(3))))
  println(_str(list_to_string(result2)))
}

var INF: BigInt = BigInt(1000000000)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
