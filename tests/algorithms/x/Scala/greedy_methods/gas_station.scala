// Generated by Mochi v0.10.63 on 2025-08-12 08:51:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class GasStation(var gas_quantity: BigInt, var cost: BigInt)

def get_gas_stations(gas_quantities: ArrayBuffer[BigInt], costs: ArrayBuffer[BigInt]): ArrayBuffer[GasStation] = {
  var stations: ArrayBuffer[GasStation] = ArrayBuffer[GasStation]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((gas_quantities).size)) {
    stations = stations :+ (GasStation(gas_quantities.lift((i.toInt).toInt).getOrElse(BigInt(0)), costs.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  return stations
}

def can_complete_journey(gas_stations: ArrayBuffer[GasStation]): BigInt = {
  var total_gas: BigInt = BigInt(0)
  var total_cost: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((gas_stations).size)) {
    total_gas = total_gas + gas_stations.lift((i.toInt).toInt).getOrElse(null).gas_quantity
    total_cost = total_cost + gas_stations.lift((i.toInt).toInt).getOrElse(null).cost
    i = i + BigInt(1)
  }
  if (total_gas < total_cost) {
    return -BigInt(1)
  }
  var start: BigInt = BigInt(0)
  var net: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((gas_stations).size)) {
    val station: GasStation = gas_stations.lift((i.toInt).toInt).getOrElse(null)
    net = net + station.gas_quantity - station.cost
    if (net < BigInt(0)) {
      start = i + BigInt(1)
      net = BigInt(0)
    }
    i = i + BigInt(1)
  }
  return start
}

val example1: ArrayBuffer[GasStation] = get_gas_stations(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(5), BigInt(1), BigInt(2)))

val example2: ArrayBuffer[GasStation] = get_gas_stations(ArrayBuffer(BigInt(2), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(3)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(can_complete_journey(example1)))
    println(_str(can_complete_journey(example2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
