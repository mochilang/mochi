// Generated by Mochi v0.10.59 on 2025-08-07 11:25:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Item(var value: Double, var weight: Double)

def sort_by_ratio_desc(arr: ArrayBuffer[Item]): ArrayBuffer[Item] = {
  var i: BigInt = BigInt(1)
  val _br0 = new Breaks
  _br0.breakable {
    while (i < BigInt((arr).size)) {
      val key: Item = arr((i.toInt).toInt)
      var j: BigInt = i - BigInt(1)
      val _br1 = new Breaks
      _br1.breakable {
        while (j >= BigInt(0)) {
          val current: Item = arr((j.toInt).toInt)
          if (current.asInstanceOf[Item].value / current.asInstanceOf[Item].weight < key.asInstanceOf[Item].value / key.asInstanceOf[Item].weight) {
            arr((j + BigInt(1)).toInt) = current
            j = j - BigInt(1)
          } else {
            _br1.break()
          }
        }
      }
      arr((j + BigInt(1)).toInt) = key
      i = i + BigInt(1)
    }
  }
  return arr
}

def sum_first(arr: ArrayBuffer[Double], k: BigInt): Double = {
  var s: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < k && i < BigInt((arr).size)) {
    s = s + arr((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return s
}

def frac_knapsack(vl: ArrayBuffer[Double], wt: ArrayBuffer[Double], w: Double, n: BigInt): Double = {
  var items: ArrayBuffer[Item] = ArrayBuffer[Item]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((vl).size) && i < BigInt((wt).size)) {
    items = items :+ Item(vl((i.toInt).toInt), wt((i.toInt).toInt))
    i = i + BigInt(1)
  }
  items = sort_by_ratio_desc(items)
  var values: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var weights: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((items).size)) {
    val itm: Item = items((i.toInt).toInt)
    values = values :+ itm.asInstanceOf[Item].value
    weights = weights :+ itm.asInstanceOf[Item].weight
    i = i + BigInt(1)
  }
  var acc: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var total: Double = 0.0
  i = BigInt(0)
  while (i < BigInt((weights).size)) {
    total = total + weights((i.toInt).toInt)
    acc = acc :+ total
    i = i + BigInt(1)
  }
  var k: BigInt = BigInt(0)
  while (k < BigInt((acc).size) && w >= acc((k.toInt).toInt)) {
    k = k + BigInt(1)
  }
  if (k == BigInt(0)) {
    return 0.0
  }
  if (k >= BigInt((values).size)) {
    return sum_first(values, BigInt((values).size))
  }
  if (k != n) {
    return sum_first(values, k) + (w - acc(((k - BigInt(1)).toInt).toInt)) * values((k.toInt).toInt) / weights((k.toInt).toInt)
  }
  return sum_first(values, k)
}

val vl: ArrayBuffer[Double] = ArrayBuffer(60.0, 100.0, 120.0)

val wt: ArrayBuffer[Double] = ArrayBuffer(10.0, 20.0, 30.0)

val result: Double = frac_knapsack(vl, wt, 50.0, BigInt(3))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
