// Generated by Mochi v0.10.66 on 2025-08-15 15:28:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def index_of_min(xs: ArrayBuffer[BigInt]): BigInt = {
  var min_idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(1)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) < xs.lift((min_idx.toInt).toInt).getOrElse(BigInt(0))) {
      min_idx = i
    }
    i = i + BigInt(1)
  }
  return min_idx
}

def remove_at(xs: ArrayBuffer[BigInt], idx: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = (res :+ xs.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    }
    i = i + BigInt(1)
  }
  return res
}

def optimal_merge_pattern(files: ArrayBuffer[BigInt]): BigInt = {
  var arr: ArrayBuffer[BigInt] = files
  var optimal_merge_cost: BigInt = BigInt(0)
  while (BigInt((arr).size) > BigInt(1)) {
    var temp: BigInt = BigInt(0)
    var k: BigInt = BigInt(0)
    while (k < BigInt(2)) {
      var min_idx: BigInt = index_of_min(arr)
      temp = temp + arr.lift((min_idx.toInt).toInt).getOrElse(BigInt(0))
      arr = remove_at(arr, min_idx)
      k = k + BigInt(1)
    }
    arr = (arr :+ temp)
    optimal_merge_cost = optimal_merge_cost + temp
  }
  return optimal_merge_cost
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(optimal_merge_pattern(ArrayBuffer(BigInt(2), BigInt(3), BigInt(4)))))
    println(_str(optimal_merge_pattern(ArrayBuffer(BigInt(5), BigInt(10), BigInt(20), BigInt(30), BigInt(30)))))
    println(_str(optimal_merge_pattern(ArrayBuffer(BigInt(8), BigInt(8), BigInt(8), BigInt(8), BigInt(8)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
