// Generated by Mochi v0.10.71 on 2025-08-24 09:41:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Result(var start: BigInt, var end: BigInt, var sum: Double)

def max_cross_sum(arr: ArrayBuffer[Double], low: BigInt, mid: BigInt, high: BigInt): Result = {
  var left_sum: Double = -1e+18
  var max_left: BigInt = BigInt(-1)
  var sum: Double = 0.0
  var i: BigInt = mid
  while (i >= low) {
    sum = sum + arr.lift((i.toInt).toInt).getOrElse(0.0)
    if (sum > left_sum) {
      left_sum = sum
      max_left = i
    }
    i = i - BigInt(1)
  }
  var right_sum: Double = -1e+18
  var max_right: BigInt = BigInt(-1)
  sum = 0.0
  i = mid + BigInt(1)
  while (i <= high) {
    sum = sum + arr.lift((i.toInt).toInt).getOrElse(0.0)
    if (sum > right_sum) {
      right_sum = sum
      max_right = i
    }
    i = i + BigInt(1)
  }
  return Result(max_left, max_right, left_sum + right_sum)
}

def max_subarray(arr: ArrayBuffer[Double], low: BigInt, high: BigInt): Result = {
  if (BigInt((arr).size) == BigInt(0)) {
    return Result(BigInt(-1), BigInt(-1), 0.0)
  }
  if (low == high) {
    return Result(low, high, arr.lift((low.toInt).toInt).getOrElse(0.0))
  }
  var mid: BigInt = (low + high) / BigInt(2)
  var left: Result = max_subarray(arr, low, mid)
  var right: Result = max_subarray(arr, mid + BigInt(1), high)
  var cross: Result = max_cross_sum(arr, low, mid, high)
  if ((left.asInstanceOf[Result].sum >= right.asInstanceOf[Result].sum && left.asInstanceOf[Result].sum >= cross.asInstanceOf[Result].sum)) {
    return left
  }
  if ((right.asInstanceOf[Result].sum >= left.asInstanceOf[Result].sum && right.asInstanceOf[Result].sum >= cross.asInstanceOf[Result].sum)) {
    return right
  }
  return cross
}

def show(res: Result): Any = {
  println(_str("[" + _str(res.asInstanceOf[Result].start) + ", " + _str(res.asInstanceOf[Result].end) + ", " + _str(res.asInstanceOf[Result].sum) + "]"))
}

def main(): Any = {
  var nums1: ArrayBuffer[Double] = ArrayBuffer(-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0)
  var res1: Result = max_subarray(nums1, BigInt(0), BigInt((nums1).size) - BigInt(1))
  show(res1)
  var nums2: ArrayBuffer[Double] = ArrayBuffer(2.0, 8.0, 9.0)
  var res2: Result = max_subarray(nums2, BigInt(0), BigInt((nums2).size) - BigInt(1))
  show(res2)
  var nums3: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0)
  var res3: Result = max_subarray(nums3, BigInt(0), BigInt((nums3).size) - BigInt(1))
  show(res3)
  var nums4: ArrayBuffer[Double] = ArrayBuffer(-1.0, 0.0, 1.0)
  var res4: Result = max_subarray(nums4, BigInt(0), BigInt((nums4).size) - BigInt(1))
  show(res4)
  var nums5: ArrayBuffer[Double] = ArrayBuffer(-2.0, -3.0, -1.0, -4.0, -6.0)
  var res5: Result = max_subarray(nums5, BigInt(0), BigInt((nums5).size) - BigInt(1))
  show(res5)
  var nums6: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var res6: Result = max_subarray(nums6, BigInt(0), BigInt(0))
  show(res6)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
