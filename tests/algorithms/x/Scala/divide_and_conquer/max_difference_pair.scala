// Generated by Mochi v0.10.59 on 2025-08-07 00:56:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def min_slice(a: ArrayBuffer[BigInt], start: BigInt, end: BigInt): BigInt = {
  var m: BigInt = a((start.toInt).toInt)
  var i: BigInt = start + 1
  while (i < end) {
    if (a((i.toInt).toInt) < m) {
      m = a((i.toInt).toInt)
    }
    i = i + 1
  }
  return m
}

def max_slice(a: ArrayBuffer[BigInt], start: BigInt, end: BigInt): BigInt = {
  var m: BigInt = a((start.toInt).toInt)
  var i: BigInt = start + 1
  while (i < end) {
    if (a((i.toInt).toInt) > m) {
      m = a((i.toInt).toInt)
    }
    i = i + 1
  }
  return m
}

def max_diff_range(a: ArrayBuffer[BigInt], start: BigInt, end: BigInt): ArrayBuffer[BigInt] = {
  if (end - start == 1) {
    val v: BigInt = a((start.toInt).toInt)
    return ArrayBuffer(v, v)
  }
  val mid: BigInt = (start + end) / 2
  val left: ArrayBuffer[BigInt] = max_diff_range(a, start, mid)
  val right: ArrayBuffer[BigInt] = max_diff_range(a, mid, end)
  val small1: BigInt = left((0.toInt).toInt)
  val big1: BigInt = left((1.toInt).toInt)
  val small2: BigInt = right((0.toInt).toInt)
  val big2: BigInt = right((1.toInt).toInt)
  val min_left: BigInt = min_slice(a, start, mid)
  val max_right: BigInt = max_slice(a, mid, end)
  val cross_diff: BigInt = max_right - min_left
  val left_diff: BigInt = big1 - small1
  val right_diff: BigInt = big2 - small2
  if ((right_diff > cross_diff && right_diff > left_diff).asInstanceOf[Boolean]) {
    return ArrayBuffer(small2, big2)
  } else {
    if (left_diff > cross_diff) {
      return ArrayBuffer(small1, big1)
    } else {
      return ArrayBuffer(min_left, max_right)
    }
  }
  return ArrayBuffer[BigInt]()
}

def max_difference(a: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  return max_diff_range(a, 0, BigInt((a).size))
}

def main(): Any = {
  val result: ArrayBuffer[BigInt] = max_difference(ArrayBuffer(5, 11, 2, 1, 7, 9, 0, 7))
  println(String.valueOf(result))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
