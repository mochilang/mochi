// Generated by Mochi v0.10.59 on 2025-08-07 00:56:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def subarray(xs: ArrayBuffer[BigInt], start: BigInt, end: BigInt): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var k: BigInt = start
  while (k < end) {
    result = result :+ xs((k.toInt).toInt)
    k = k + 1
  }
  return result
}

def merge(left_half: ArrayBuffer[BigInt], right_half: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  var j: BigInt = 0
  while (i < BigInt((left_half).size) && j < BigInt((right_half).size)) {
    if (left_half((i.toInt).toInt) < right_half((j.toInt).toInt)) {
      result = result :+ left_half((i.toInt).toInt)
      i = i + 1
    } else {
      result = result :+ right_half((j.toInt).toInt)
      j = j + 1
    }
  }
  while (i < BigInt((left_half).size)) {
    result = result :+ left_half((i.toInt).toInt)
    i = i + 1
  }
  while (j < BigInt((right_half).size)) {
    result = result :+ right_half((j.toInt).toInt)
    j = j + 1
  }
  return result
}

def merge_sort(array: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((array).size) <= 1) {
    return array
  }
  val middle: BigInt = BigInt((array).size) / 2
  val left_half: ArrayBuffer[BigInt] = subarray(array, 0, middle)
  val right_half: ArrayBuffer[BigInt] = subarray(array, middle, BigInt((array).size))
  val sorted_left: ArrayBuffer[BigInt] = merge_sort(left_half)
  val sorted_right: ArrayBuffer[BigInt] = merge_sort(right_half)
  return merge(sorted_left, sorted_right)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(merge_sort(ArrayBuffer(5, 3, 1, 4, 2))))
    println(String.valueOf(merge_sort(ArrayBuffer(BigInt((-2).toString.toDouble.toInt), 3, BigInt((-10).toString.toDouble.toInt), 11, 99, 100000, 100, BigInt((-200).toString.toDouble.toInt)))))
    println(String.valueOf(merge_sort(ArrayBuffer(BigInt((-200).toString.toDouble.toInt)))))
    println(String.valueOf(merge_sort(ArrayBuffer())))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
