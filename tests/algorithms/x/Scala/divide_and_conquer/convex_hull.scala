// Generated by Mochi v0.10.59 on 2025-08-07 00:55:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: BigInt, var y: BigInt)

def cross(o: Point, a: Point, b: Point): BigInt = {
  return (a.asInstanceOf[Point].x - o.asInstanceOf[Point].x) * (b.asInstanceOf[Point].y - o.asInstanceOf[Point].y) - (a.asInstanceOf[Point].y - o.asInstanceOf[Point].y) * (b.asInstanceOf[Point].x - o.asInstanceOf[Point].x)
}

def sortPoints(ps: ArrayBuffer[Point]): ArrayBuffer[Point] = {
  var arr: ArrayBuffer[Point] = ps
  var n: BigInt = BigInt((arr).size)
  var i: BigInt = 0
  while (i < n) {
    var j: BigInt = 0
    while (j < n - 1) {
      val p: Point = arr((j.toInt).toInt)
      val q: Point = arr(((j + 1).toInt).toInt)
      if ((p.asInstanceOf[Point].x > q.asInstanceOf[Point].x || (p.asInstanceOf[Point].x == q.asInstanceOf[Point].x && p.asInstanceOf[Point].y > q.asInstanceOf[Point].y).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        arr((j).toInt) = q
        arr((j + 1).toInt) = p
      }
      j = j + 1
    }
    i = i + 1
  }
  return arr
}

def convex_hull(_ps: ArrayBuffer[Point]): ArrayBuffer[Point] = {
  var ps: ArrayBuffer[Point] = _ps
  ps = sortPoints(ps)
  var lower: ArrayBuffer[Point] = ArrayBuffer()
  for (p <- ps) {
    while (BigInt((lower).size) >= 2 && cross(lower(((BigInt((lower).size) - 2).toInt).toInt), lower(((BigInt((lower).size) - 1).toInt).toInt), p) <= 0) {
      lower = lower.slice((0).toInt, (BigInt((lower).size) - 1).toInt)
    }
    lower = lower :+ p
  }
  var upper: ArrayBuffer[Point] = ArrayBuffer()
  var i: BigInt = BigInt((ps).size) - 1
  while (i >= 0) {
    val p: Point = ps((i.toInt).toInt)
    while (BigInt((upper).size) >= 2 && cross(upper(((BigInt((upper).size) - 2).toInt).toInt), upper(((BigInt((upper).size) - 1).toInt).toInt), p) <= 0) {
      upper = upper.slice((0).toInt, (BigInt((upper).size) - 1).toInt)
    }
    upper = upper :+ p
    i = i - 1
  }
  var hull: ArrayBuffer[Point] = lower.slice((0).toInt, (BigInt((lower).size) - 1).toInt)
  var j: BigInt = 0
  while (j < BigInt((upper).size) - 1) {
    hull = hull :+ upper((j.toInt).toInt)
    j = j + 1
  }
  return hull
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
