// Generated by Mochi v0.10.59 on 2025-08-07 00:57:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def default_matrix_multiplication(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  return ArrayBuffer(ArrayBuffer(a((0.toInt).toInt)((0.toInt).toInt) * b((0.toInt).toInt)((0.toInt).toInt) + a((0.toInt).toInt)((1.toInt).toInt) * b((1.toInt).toInt)((0.toInt).toInt), a((0.toInt).toInt)((0.toInt).toInt) * b((0.toInt).toInt)((1.toInt).toInt) + a((0.toInt).toInt)((1.toInt).toInt) * b((1.toInt).toInt)((1.toInt).toInt)), ArrayBuffer(a((1.toInt).toInt)((0.toInt).toInt) * b((0.toInt).toInt)((0.toInt).toInt) + a((1.toInt).toInt)((1.toInt).toInt) * b((1.toInt).toInt)((0.toInt).toInt), a((1.toInt).toInt)((0.toInt).toInt) * b((0.toInt).toInt)((1.toInt).toInt) + a((1.toInt).toInt)((1.toInt).toInt) * b((1.toInt).toInt)((1.toInt).toInt)))
}

def matrix_addition(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((matrix_a).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((matrix_a((i.toInt).toInt)).size)) {
      row = row :+ matrix_a((i.toInt).toInt)((j.toInt).toInt) + matrix_b((i.toInt).toInt)((j.toInt).toInt)
      j = j + 1
    }
    result = result :+ row
    i = i + 1
  }
  return result
}

def matrix_subtraction(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((matrix_a).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((matrix_a((i.toInt).toInt)).size)) {
      row = row :+ matrix_a((i.toInt).toInt)((j.toInt).toInt) - matrix_b((i.toInt).toInt)((j.toInt).toInt)
      j = j + 1
    }
    result = result :+ row
    i = i + 1
  }
  return result
}

def split_matrix(a: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  val n: BigInt = BigInt((a).size)
  val mid: BigInt = n / 2
  var top_left: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var top_right: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var bot_left: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var bot_right: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < mid) {
    var left_row: ArrayBuffer[BigInt] = ArrayBuffer()
    var right_row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < mid) {
      left_row = left_row :+ a((i.toInt).toInt)((j.toInt).toInt)
      right_row = right_row :+ a((i.toInt).toInt)(((j + mid).toInt).toInt)
      j = j + 1
    }
    top_left = top_left :+ left_row
    top_right = top_right :+ right_row
    i = i + 1
  }
  i = mid
  while (i < n) {
    var left_row: ArrayBuffer[BigInt] = ArrayBuffer()
    var right_row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < mid) {
      left_row = left_row :+ a((i.toInt).toInt)((j.toInt).toInt)
      right_row = right_row :+ a((i.toInt).toInt)(((j + mid).toInt).toInt)
      j = j + 1
    }
    bot_left = bot_left :+ left_row
    bot_right = bot_right :+ right_row
    i = i + 1
  }
  return ArrayBuffer(top_left, top_right, bot_left, bot_right)
}

def matrix_dimensions(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  return ArrayBuffer(BigInt((matrix).size), BigInt((matrix((0.toInt).toInt)).size))
}

def next_power_of_two(n: BigInt): BigInt = {
  var p: BigInt = 1
  while (p < n) {
    p = p * 2
  }
  return p
}

def pad_matrix(mat: ArrayBuffer[ArrayBuffer[BigInt]], rows: BigInt, cols: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < cols) {
      var v: BigInt = 0
      if ((i < BigInt((mat).size) && j < BigInt((mat((0.toInt).toInt)).size)).asInstanceOf[Boolean]) {
        v = mat((i.toInt).toInt)((j.toInt).toInt)
      }
      row = row :+ v
      j = j + 1
    }
    res = res :+ row
    i = i + 1
  }
  return res
}

def actual_strassen(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (matrix_dimensions(matrix_a)((0.toInt).toInt) == 2) {
    return default_matrix_multiplication(matrix_a, matrix_b)
  }
  val parts_a: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = split_matrix(matrix_a)
  val a: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a((0.toInt).toInt)
  val b: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a((1.toInt).toInt)
  val c: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a((2.toInt).toInt)
  val d: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a((3.toInt).toInt)
  val parts_b: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = split_matrix(matrix_b)
  val e: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b((0.toInt).toInt)
  val f: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b((1.toInt).toInt)
  val g: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b((2.toInt).toInt)
  val h: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b((3.toInt).toInt)
  val t1: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(a, matrix_subtraction(f, h))
  val t2: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_addition(a, b), h)
  val t3: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_addition(c, d), e)
  val t4: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(d, matrix_subtraction(g, e))
  val t5: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_addition(a, d), matrix_addition(e, h))
  val t6: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h))
  val t7: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f))
  val top_left: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6)
  val top_right: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_addition(t1, t2)
  val bot_left: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_addition(t3, t4)
  val bot_right: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7)
  var new_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((top_right).size)) {
    new_matrix = new_matrix :+ (top_left((i.toInt).toInt) ++ top_right((i.toInt).toInt)).asInstanceOf[ArrayBuffer[BigInt]]
    i = i + 1
  }
  i = 0
  while (i < BigInt((bot_right).size)) {
    new_matrix = new_matrix :+ (bot_left((i.toInt).toInt) ++ bot_right((i.toInt).toInt)).asInstanceOf[ArrayBuffer[BigInt]]
    i = i + 1
  }
  return new_matrix
}

def strassen(matrix1: ArrayBuffer[ArrayBuffer[BigInt]], matrix2: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val dims1: ArrayBuffer[BigInt] = matrix_dimensions(matrix1)
  val dims2: ArrayBuffer[BigInt] = matrix_dimensions(matrix2)
  if (dims1((1.toInt).toInt) != dims2((0.toInt).toInt)) {
    return ArrayBuffer()
  }
  val maximum: BigInt = BigInt((ArrayBuffer(dims1((0.toInt).toInt), dims1((1.toInt).toInt), dims2((0.toInt).toInt), dims2((1.toInt).toInt)).max).toString.toDouble.toInt)
  val size: BigInt = next_power_of_two(maximum)
  val new_matrix1: ArrayBuffer[ArrayBuffer[BigInt]] = pad_matrix(matrix1, size, size)
  val new_matrix2: ArrayBuffer[ArrayBuffer[BigInt]] = pad_matrix(matrix2, size, size)
  val result_padded: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(new_matrix1, new_matrix2)
  var final_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < dims1((0.toInt).toInt)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < dims2((1.toInt).toInt)) {
      row = row :+ result_padded((i.toInt).toInt)((j.toInt).toInt)
      j = j + 1
    }
    final_matrix = final_matrix :+ row
    i = i + 1
  }
  return final_matrix
}

def main(): Any = {
  val matrix1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(2, 3, 4, 5), ArrayBuffer(6, 4, 3, 1), ArrayBuffer(2, 3, 6, 7), ArrayBuffer(3, 1, 2, 4), ArrayBuffer(2, 3, 4, 5), ArrayBuffer(6, 4, 3, 1), ArrayBuffer(2, 3, 6, 7), ArrayBuffer(3, 1, 2, 4), ArrayBuffer(2, 3, 4, 5), ArrayBuffer(6, 2, 3, 1))
  val matrix2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 2, 1, 1), ArrayBuffer(16, 2, 3, 3), ArrayBuffer(2, 2, 7, 7), ArrayBuffer(13, 11, 22, 4))
  val res: ArrayBuffer[ArrayBuffer[BigInt]] = strassen(matrix1, matrix2)
  println(res)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
