// Generated by Mochi v0.10.71 on 2025-08-24 09:42:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def default_matrix_multiplication(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  return ArrayBuffer(ArrayBuffer(a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) + a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) + a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))), ArrayBuffer(a.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) + a.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), a.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) + a.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) * b.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))))
}

def matrix_addition(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((matrix_a).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((matrix_a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      row = ({row += (matrix_a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)) + matrix_b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))); row})
      j = j + BigInt(1)
    }
    result = ({result += (row); result})
    i = i + BigInt(1)
  }
  return result
}

def matrix_subtraction(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((matrix_a).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((matrix_a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      row = ({row += (matrix_a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)) - matrix_b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))); row})
      j = j + BigInt(1)
    }
    result = ({result += (row); result})
    i = i + BigInt(1)
  }
  return result
}

def split_matrix(a: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  var n: BigInt = BigInt((a).size)
  var mid: BigInt = n / BigInt(2)
  var top_left: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var top_right: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var bot_left: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var bot_right: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < mid) {
    var left_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var right_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < mid) {
      left_row = ({left_row += (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))); left_row})
      right_row = ({right_row += (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + mid).toInt).toInt).getOrElse(BigInt(0))); right_row})
      j = j + BigInt(1)
    }
    top_left = ({top_left += (left_row); top_left})
    top_right = ({top_right += (right_row); top_right})
    i = i + BigInt(1)
  }
  i = mid
  while (i < n) {
    var left_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var right_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < mid) {
      left_row = ({left_row += (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))); left_row})
      right_row = ({right_row += (a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + mid).toInt).toInt).getOrElse(BigInt(0))); right_row})
      j = j + BigInt(1)
    }
    bot_left = ({bot_left += (left_row); bot_left})
    bot_right = ({bot_right += (right_row); bot_right})
    i = i + BigInt(1)
  }
  return ArrayBuffer(top_left, top_right, bot_left, bot_right)
}

def matrix_dimensions(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  return ArrayBuffer(BigInt((matrix).size), BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size))
}

def next_power_of_two(n: BigInt): BigInt = {
  var p: BigInt = BigInt(1)
  while (p < n) {
    p = p * BigInt(2)
  }
  return p
}

def pad_matrix(mat: ArrayBuffer[ArrayBuffer[BigInt]], rows: BigInt, cols: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      var v: BigInt = BigInt(0)
      if ((i < BigInt((mat).size) && j < BigInt((mat.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size))) {
        v = mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
      }
      row = ({row += (v); row})
      j = j + BigInt(1)
    }
    res = ({res += (row); res})
    i = i + BigInt(1)
  }
  return res
}

def actual_strassen(matrix_a: ArrayBuffer[ArrayBuffer[BigInt]], matrix_b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (matrix_dimensions(matrix_a).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) == BigInt(2)) {
    return default_matrix_multiplication(matrix_a, matrix_b)
  }
  var parts_a: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = split_matrix(matrix_a)
  var a: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var b: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var c: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var d: ArrayBuffer[ArrayBuffer[BigInt]] = parts_a.lift((BigInt(3).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var parts_b: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = split_matrix(matrix_b)
  var e: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var f: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var g: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b.lift((BigInt(2).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var h: ArrayBuffer[ArrayBuffer[BigInt]] = parts_b.lift((BigInt(3).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())
  var t1: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(a, matrix_subtraction(f, h))
  var t2: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_addition(a, b), h)
  var t3: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_addition(c, d), e)
  var t4: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(d, matrix_subtraction(g, e))
  var t5: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_addition(a, d), matrix_addition(e, h))
  var t6: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h))
  var t7: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f))
  var top_left: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6)
  var top_right: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_addition(t1, t2)
  var bot_left: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_addition(t3, t4)
  var bot_right: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7)
  var new_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((top_right).size)) {
    new_matrix = ({new_matrix += (((top_left.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) ++ top_right.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]]); new_matrix})
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((bot_right).size)) {
    new_matrix = ({new_matrix += (((bot_left.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) ++ bot_right.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]]); new_matrix})
    i = i + BigInt(1)
  }
  return new_matrix
}

def strassen(matrix1: ArrayBuffer[ArrayBuffer[BigInt]], matrix2: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var dims1: ArrayBuffer[BigInt] = matrix_dimensions(matrix1)
  var dims2: ArrayBuffer[BigInt] = matrix_dimensions(matrix2)
  if (dims1.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) != dims2.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) {
    return ArrayBuffer[ArrayBuffer[BigInt]]()
  }
  var maximum: BigInt = BigInt((ArrayBuffer(dims1.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), dims1.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)), dims2.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), dims2.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).max).toString.toDouble.toInt)
  var size: BigInt = next_power_of_two(maximum)
  var new_matrix1: ArrayBuffer[ArrayBuffer[BigInt]] = pad_matrix(matrix1, size, size)
  var new_matrix2: ArrayBuffer[ArrayBuffer[BigInt]] = pad_matrix(matrix2, size, size)
  var result_padded: ArrayBuffer[ArrayBuffer[BigInt]] = actual_strassen(new_matrix1, new_matrix2)
  var final_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < dims1.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < dims2.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))) {
      row = ({row += (result_padded.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))); row})
      j = j + BigInt(1)
    }
    final_matrix = ({final_matrix += (row); final_matrix})
    i = i + BigInt(1)
  }
  return final_matrix
}

def main(): Any = {
  var matrix1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2), BigInt(3), BigInt(4), BigInt(5)), ArrayBuffer(BigInt(6), BigInt(4), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(6), BigInt(7)), ArrayBuffer(BigInt(3), BigInt(1), BigInt(2), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(4), BigInt(5)), ArrayBuffer(BigInt(6), BigInt(4), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(6), BigInt(7)), ArrayBuffer(BigInt(3), BigInt(1), BigInt(2), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(4), BigInt(5)), ArrayBuffer(BigInt(6), BigInt(2), BigInt(3), BigInt(1)))
  var matrix2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(2), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(16), BigInt(2), BigInt(3), BigInt(3)), ArrayBuffer(BigInt(2), BigInt(2), BigInt(7), BigInt(7)), ArrayBuffer(BigInt(13), BigInt(11), BigInt(22), BigInt(4)))
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = strassen(matrix1, matrix2)
  println(_str(res))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
