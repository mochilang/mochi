// Generated by Mochi v0.10.71 on 2025-08-24 09:40:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def pivot(lst: ArrayBuffer[BigInt]): BigInt = {
  return lst.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
}

def kth_number(lst: ArrayBuffer[BigInt], k: BigInt): BigInt = {
  var p: BigInt = pivot(lst)
  var small: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var big: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    var e: BigInt = lst.lift((i.toInt).toInt).getOrElse(BigInt(0))
    if (e < p) {
      small = ({small += (e); small})
    } else {
      if (e > p) {
        big = ({big += (e); big})
      }
    }
    i = i + BigInt(1)
  }
  if (BigInt((small).size) == k - BigInt(1)) {
    return p
  } else {
    if (BigInt((small).size) < k - BigInt(1)) {
      return kth_number(big, k - BigInt((small).size) - BigInt(1))
    } else {
      return kth_number(small, k)
    }
  }
  return BigInt(0)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(kth_number(ArrayBuffer(BigInt(2), BigInt(1), BigInt(3), BigInt(4), BigInt(5)), BigInt(3)))))
    println(_str(_str(kth_number(ArrayBuffer(BigInt(2), BigInt(1), BigInt(3), BigInt(4), BigInt(5)), BigInt(1)))))
    println(_str(_str(kth_number(ArrayBuffer(BigInt(2), BigInt(1), BigInt(3), BigInt(4), BigInt(5)), BigInt(5)))))
    println(_str(_str(kth_number(ArrayBuffer(BigInt(3), BigInt(2), BigInt(5), BigInt(6), BigInt(7), BigInt(8)), BigInt(2)))))
    println(_str(_str(kth_number(ArrayBuffer(BigInt(25), BigInt(21), BigInt(98), BigInt(100), BigInt(76), BigInt(22), BigInt(43), BigInt(60), BigInt(89), BigInt(87)), BigInt(4)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
