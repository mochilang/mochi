// Generated by Mochi v0.10.59 on 2025-08-07 00:56:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pivot(lst: ArrayBuffer[BigInt]): BigInt = {
  return lst((0.toInt).toInt)
}

def kth_number(lst: ArrayBuffer[BigInt], k: BigInt): BigInt = {
  val p: BigInt = pivot(lst)
  var small: ArrayBuffer[BigInt] = ArrayBuffer()
  var big: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((lst).size)) {
    val e: BigInt = lst((i.toInt).toInt)
    if (e < p) {
      small = small :+ e
    } else {
      if (e > p) {
        big = big :+ e
      }
    }
    i = i + 1
  }
  if (BigInt((small).size) == k - 1) {
    return p
  } else {
    if (BigInt((small).size) < k - 1) {
      return kth_number(big, k - BigInt((small).size) - 1)
    } else {
      return kth_number(small, k)
    }
  }
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(kth_number(ArrayBuffer(2, 1, 3, 4, 5), 3)))
    println(String.valueOf(kth_number(ArrayBuffer(2, 1, 3, 4, 5), 1)))
    println(String.valueOf(kth_number(ArrayBuffer(2, 1, 3, 4, 5), 5)))
    println(String.valueOf(kth_number(ArrayBuffer(3, 2, 5, 6, 7, 8), 2)))
    println(String.valueOf(kth_number(ArrayBuffer(25, 21, 98, 100, 76, 22, 43, 60, 89, 87), 4)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
