// Generated by Mochi v0.10.71 on 2025-08-24 09:40:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return 0.0 - x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def euclidean_distance_sqr(p1: ArrayBuffer[Double], p2: ArrayBuffer[Double]): Double = {
  var dx: Double = p1.lift((BigInt(0).toInt).toInt).getOrElse(0.0) - p2.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var dy: Double = p1.lift((BigInt(1).toInt).toInt).getOrElse(0.0) - p2.lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  return dx * dx + dy * dy
}

def column_based_sort(arr: ArrayBuffer[ArrayBuffer[Double]], column: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var points: ArrayBuffer[ArrayBuffer[Double]] = arr
  var i: BigInt = BigInt(0)
  while (i < BigInt((points).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((points).size) - BigInt(1)) {
      if (points.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((column.toInt).toInt).getOrElse(0.0) > points.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((column.toInt).toInt).getOrElse(0.0)) {
        var tmp: ArrayBuffer[Double] = points.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]())
        points((j).toInt) = points.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[Double]())
        points((j + BigInt(1)).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return points
}

def dis_between_closest_pair(points: ArrayBuffer[ArrayBuffer[Double]], count: BigInt, _min_dis: Double): Double = {
  var min_dis: Double = _min_dis
  var i: BigInt = BigInt(0)
  while (i < count - BigInt(1)) {
    var j: BigInt = i + BigInt(1)
    while (j < count) {
      var current: Double = euclidean_distance_sqr(points.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), points.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
      if (current < min_dis) {
        min_dis = current
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return min_dis
}

def dis_between_closest_in_strip(points: ArrayBuffer[ArrayBuffer[Double]], count: BigInt, _min_dis: Double): Double = {
  var min_dis: Double = _min_dis
  var i_start: BigInt = BigInt(0)
  if (BigInt(6) < count - BigInt(1)) {
    i_start = BigInt(6)
  } else {
    i_start = count - BigInt(1)
  }
  var i: BigInt = i_start
  while (i < count) {
    var j_start: BigInt = BigInt(0)
    if (i - BigInt(6) > BigInt(0)) {
      j_start = i - BigInt(6)
    }
    var j: BigInt = j_start
    while (j < i) {
      var current: Double = euclidean_distance_sqr(points.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), points.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
      if (current < min_dis) {
        min_dis = current
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return min_dis
}

def closest_pair_of_points_sqr(px: ArrayBuffer[ArrayBuffer[Double]], py: ArrayBuffer[ArrayBuffer[Double]], count: BigInt): Double = {
  if (count <= BigInt(3)) {
    return dis_between_closest_pair(px, count, 1e+18)
  }
  var mid: BigInt = count / BigInt(2)
  var left: Double = closest_pair_of_points_sqr(px, py.slice((BigInt(0)).toInt, (mid).toInt), mid)
  var right: Double = closest_pair_of_points_sqr(py, py.slice((mid).toInt, (count).toInt), count - mid)
  var best: Double = left
  if (right < best) {
    best = right
  }
  var strip: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((px).size)) {
    if (Math.abs(px.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) - px.lift((mid.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)) < best) {
      strip = ({strip += (px.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())); strip})
    }
    i = i + BigInt(1)
  }
  var strip_best: Double = dis_between_closest_in_strip(strip, BigInt((strip).size), best)
  if (strip_best < best) {
    best = strip_best
  }
  return best
}

def closest_pair_of_points(points: ArrayBuffer[ArrayBuffer[Double]], count: BigInt): Double = {
  var points_sorted_on_x: ArrayBuffer[ArrayBuffer[Double]] = column_based_sort(points, BigInt(0))
  var points_sorted_on_y: ArrayBuffer[ArrayBuffer[Double]] = column_based_sort(points, BigInt(1))
  var dist_sqr: Double = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count)
  return sqrtApprox(dist_sqr)
}

var points: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 3.0), ArrayBuffer(12.0, 30.0), ArrayBuffer(40.0, 50.0), ArrayBuffer(5.0, 1.0), ArrayBuffer(12.0, 10.0), ArrayBuffer(3.0, 4.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str("Distance: " + _str(closest_pair_of_points(points, BigInt((points).size)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
