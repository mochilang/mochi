// Generated by Mochi v0.10.59 on 2025-08-07 00:56:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class InvResult(var arr: ArrayBuffer[BigInt], var inv: BigInt)

def slice_list(arr: ArrayBuffer[BigInt], start: BigInt, end: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var k: BigInt = start
  while (k < end) {
    res = res :+ arr((k.toInt).toInt)
    k = k + 1
  }
  return res
}

def count_inversions_bf(arr: ArrayBuffer[BigInt]): BigInt = {
  val n: BigInt = BigInt((arr).size)
  var inv: BigInt = 0
  var i: BigInt = 0
  while (i < n - 1) {
    var j: BigInt = i + 1
    while (j < n) {
      if (arr((i.toInt).toInt) > arr((j.toInt).toInt)) {
        inv = inv + 1
      }
      j = j + 1
    }
    i = i + 1
  }
  return inv
}

def count_cross_inversions(p: ArrayBuffer[BigInt], q: ArrayBuffer[BigInt]): InvResult = {
  var r: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  var j: BigInt = 0
  var inv: BigInt = 0
  while (i < BigInt((p).size) && j < BigInt((q).size)) {
    if (p((i.toInt).toInt) > q((j.toInt).toInt)) {
      inv = inv + (BigInt((p).size) - i)
      r = r :+ q((j.toInt).toInt)
      j = j + 1
    } else {
      r = r :+ p((i.toInt).toInt)
      i = i + 1
    }
  }
  if (i < BigInt((p).size)) {
    r = (r ++ slice_list(p, i, BigInt((p).size))).asInstanceOf[ArrayBuffer[BigInt]]
  } else {
    r = (r ++ slice_list(q, j, BigInt((q).size))).asInstanceOf[ArrayBuffer[BigInt]]
  }
  return InvResult(r, inv)
}

def count_inversions_recursive(arr: ArrayBuffer[BigInt]): InvResult = {
  if (BigInt((arr).size) <= 1) {
    return InvResult(arr, 0)
  }
  val mid: BigInt = BigInt((arr).size) / 2
  val p: ArrayBuffer[BigInt] = slice_list(arr, 0, mid)
  val q: ArrayBuffer[BigInt] = slice_list(arr, mid, BigInt((arr).size))
  val res_p: InvResult = count_inversions_recursive(p)
  val res_q: InvResult = count_inversions_recursive(q)
  val res_cross: InvResult = count_cross_inversions(res_p.asInstanceOf[InvResult].arr, res_q.asInstanceOf[InvResult].arr)
  val total: BigInt = res_p.asInstanceOf[InvResult].inv + res_q.asInstanceOf[InvResult].inv + res_cross.asInstanceOf[InvResult].inv
  return InvResult(res_cross.asInstanceOf[InvResult].arr, total)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var arr_1: ArrayBuffer[Any] = ArrayBuffer(10, 2, 1, 5, 5, 2, 11)
    val nbf: BigInt = count_inversions_bf(arr_1)
    val nrec: BigInt = (count_inversions_recursive(arr_1)).asInstanceOf[InvResult].inv
    println((List("number of inversions = ", nbf)).mkString(" "))
    arr_1 = ArrayBuffer(1, 2, 2, 5, 5, 10, 11)
    val nbf2: BigInt = count_inversions_bf(arr_1)
    val nrec2: BigInt = (count_inversions_recursive(arr_1)).asInstanceOf[InvResult].inv
    println((List("number of inversions = ", nbf2)).mkString(" "))
    arr_1 = ArrayBuffer()
    val nbf3: BigInt = count_inversions_bf(arr_1.asInstanceOf[ArrayBuffer[BigInt]])
    val nrec3: BigInt = (count_inversions_recursive(arr_1.asInstanceOf[ArrayBuffer[BigInt]])).asInstanceOf[InvResult].inv
    println((List("number of inversions = ", nbf3)).mkString(" "))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
