// Generated by Mochi v0.10.59 on 2025-08-07 11:13:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_radians(deg: Double): Double = {
  return deg * PI / 180.0
}

def sin_approx(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble
    val k2: Double = k1 + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def cos_approx(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble - 1.0
    val k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def sqrt_approx(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def lamberts_ellipsoidal_distance(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double = {
  val phi1: Double = to_radians(lat1)
  val phi2: Double = to_radians(lat2)
  val lambda1: Double = to_radians(lon1)
  val lambda2: Double = to_radians(lon2)
  val x: Double = (lambda2 - lambda1) * cos_approx((phi1 + phi2) / 2.0)
  val y: Double = phi2 - phi1
  return EQUATORIAL_RADIUS * sqrt_approx(x * x + y * y)
}

val PI: Double = 3.141592653589793

val EQUATORIAL_RADIUS: Double = 6378137.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(lamberts_ellipsoidal_distance(37.774856, -122.424227, 37.864742, -119.537521))
    println(lamberts_ellipsoidal_distance(37.774856, -122.424227, 40.713019, -74.012647))
    println(lamberts_ellipsoidal_distance(37.774856, -122.424227, 45.443012, 12.313071))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
