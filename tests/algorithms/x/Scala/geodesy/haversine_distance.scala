// Generated by Mochi v0.10.59 on 2025-08-07 11:13:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_radians(deg: Double): Double = {
  return deg * PI / 180.0
}

def sin_taylor(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble
    val k2: Double = k1 + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def cos_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = 1
  while (i < 10) {
    val k1: Double = 2.0 * i.toString.toDouble - 1.0
    val k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + 1
  }
  return sum
}

def tan_approx(x: Double): Double = {
  return sin_taylor(x) / cos_taylor(x)
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def atanApprox(x: Double): Double = {
  if (x > 1.0) {
    return PI / 2.0 - x / (x * x + 0.28)
  }
  if (x < -1.0) {
    return -PI / 2.0 - x / (x * x + 0.28)
  }
  return x / (1.0 + 0.28 * x * x)
}

def atan2Approx(y: Double, x: Double): Double = {
  if (x > 0.0) {
    val `val`: Double = atanApprox(y / x)
    return `val`
  }
  if (x < 0.0) {
    if (y >= 0.0) {
      return atanApprox(y / x) + PI
    }
    return atanApprox(y / x) - PI
  }
  if (y > 0.0) {
    return PI / 2.0
  }
  if (y < 0.0) {
    return -PI / 2.0
  }
  return 0.0
}

def asinApprox(x: Double): Double = {
  val denom: Double = sqrtApprox(1.0 - x * x)
  val res: Double = atan2Approx(x, denom)
  return res
}

def haversine_distance(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double = {
  val flattening: Double = (AXIS_A - AXIS_B) / AXIS_A
  val phi_1: Double = atanApprox((1.0 - flattening) * tan_approx(to_radians(lat1)))
  val phi_2: Double = atanApprox((1.0 - flattening) * tan_approx(to_radians(lat2)))
  val lambda_1: Double = to_radians(lon1)
  val lambda_2: Double = to_radians(lon2)
  var sin_sq_phi: Double = sin_taylor((phi_2 - phi_1) / 2.0)
  var sin_sq_lambda: Double = sin_taylor((lambda_2 - lambda_1) / 2.0)
  sin_sq_phi = sin_sq_phi * sin_sq_phi
  sin_sq_lambda = sin_sq_lambda * sin_sq_lambda
  val h_value: Double = sqrtApprox(sin_sq_phi + cos_taylor(phi_1) * cos_taylor(phi_2) * sin_sq_lambda)
  return 2.0 * RADIUS * asinApprox(h_value)
}

val PI: Double = 3.141592653589793

val AXIS_A: Double = 6378137.0

val AXIS_B: Double = 6356752.314245

val RADIUS: Double = 6378137.0

val SAN_FRANCISCO: ArrayBuffer[Double] = ArrayBuffer(37.774856, -122.424227)

val YOSEMITE: ArrayBuffer[Double] = ArrayBuffer(37.864742, -119.537521)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(haversine_distance(SAN_FRANCISCO((0.toInt).toInt), SAN_FRANCISCO((1.toInt).toInt), YOSEMITE((0.toInt).toInt), YOSEMITE((1.toInt).toInt))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
