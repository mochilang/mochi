// Generated by Mochi v0.10.63 on 2025-08-11 17:30:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def quick_sort_3partition(_arr: ArrayBuffer[BigInt], left: BigInt, right: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = _arr
  if (right <= left) {
    return arr
  }
  var a: BigInt = left
  var i: BigInt = left
  var b: BigInt = right
  val pivot: BigInt = arr.lift((left.toInt).toInt).getOrElse(null)
  while (i <= b) {
    if (arr.lift((i.toInt).toInt).getOrElse(null) < pivot) {
      val temp: BigInt = arr.lift((a.toInt).toInt).getOrElse(null)
      arr((a).toInt) = arr.lift((i.toInt).toInt).getOrElse(null)
      arr((i).toInt) = temp
      a = a + BigInt(1)
      i = i + BigInt(1)
    } else {
      if (arr.lift((i.toInt).toInt).getOrElse(null) > pivot) {
        val temp: BigInt = arr.lift((b.toInt).toInt).getOrElse(null)
        arr((b).toInt) = arr.lift((i.toInt).toInt).getOrElse(null)
        arr((i).toInt) = temp
        b = b - BigInt(1)
      } else {
        i = i + BigInt(1)
      }
    }
  }
  arr = quick_sort_3partition(arr, left, a - BigInt(1))
  arr = quick_sort_3partition(arr, b + BigInt(1), right)
  return arr
}

def quick_sort_lomuto_partition(_arr: ArrayBuffer[BigInt], left: BigInt, right: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = _arr
  if (left < right) {
    val pivot_index: BigInt = lomuto_partition(arr, left, right)
    arr = quick_sort_lomuto_partition(arr, left, pivot_index - BigInt(1))
    arr = quick_sort_lomuto_partition(arr, pivot_index + BigInt(1), right)
  }
  return arr
}

def lomuto_partition(arr: ArrayBuffer[BigInt], left: BigInt, right: BigInt): BigInt = {
  val pivot: BigInt = arr.lift((right.toInt).toInt).getOrElse(null)
  var store_index: BigInt = left
  var i: BigInt = left
  while (i < right) {
    if (arr.lift((i.toInt).toInt).getOrElse(null) < pivot) {
      val temp: BigInt = arr.lift((store_index.toInt).toInt).getOrElse(null)
      arr((store_index).toInt) = arr.lift((i.toInt).toInt).getOrElse(null)
      arr((i).toInt) = temp
      store_index = store_index + BigInt(1)
    }
    i = i + BigInt(1)
  }
  val temp: BigInt = arr.lift((right.toInt).toInt).getOrElse(null)
  arr((right).toInt) = arr.lift((store_index.toInt).toInt).getOrElse(null)
  arr((store_index).toInt) = temp
  return store_index
}

def three_way_radix_quicksort(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((arr).size) <= BigInt(1)) {
    return arr
  }
  val pivot: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
  var less: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var equal: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var greater: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    val `val`: BigInt = arr.lift((i.toInt).toInt).getOrElse(null)
    if (`val` < pivot) {
      less = less :+ (`val`)
    } else {
      if (`val` > pivot) {
        greater = greater :+ (`val`)
      } else {
        equal = equal :+ (`val`)
      }
    }
    i = i + BigInt(1)
  }
  val sorted_less: ArrayBuffer[BigInt] = three_way_radix_quicksort(less)
  val sorted_greater: ArrayBuffer[BigInt] = three_way_radix_quicksort(greater)
  var result: ArrayBuffer[Any] = sorted_less ++ equal
  result = (result ++ sorted_greater).asInstanceOf[ArrayBuffer[Any]]
  return result.asInstanceOf[ArrayBuffer[BigInt]]
}

var array1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5), -BigInt(1), -BigInt(1), BigInt(5), BigInt(5), BigInt(24), BigInt(0))

var array2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(9), BigInt(0), BigInt(2), BigInt(6))

var array3: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var nums1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(1), BigInt(2))

var nums2: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var nums3: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(2), BigInt(5), BigInt(0), -BigInt(4))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    array1 = quick_sort_3partition(array1, BigInt(0), BigInt((array1).size) - BigInt(1))
    println(_str(array1))
    array2 = quick_sort_3partition(array2, BigInt(0), BigInt((array2).size) - BigInt(1))
    println(_str(array2))
    array3 = quick_sort_3partition(array3, BigInt(0), BigInt((array3).size) - BigInt(1))
    println(_str(array3))
    nums1 = quick_sort_lomuto_partition(nums1, BigInt(0), BigInt((nums1).size) - BigInt(1))
    println(_str(nums1))
    nums2 = quick_sort_lomuto_partition(nums2, BigInt(0), BigInt((nums2).size) - BigInt(1))
    println(_str(nums2))
    nums3 = quick_sort_lomuto_partition(nums3, BigInt(0), BigInt((nums3).size) - BigInt(1))
    println(_str(nums3))
    println(_str(three_way_radix_quicksort(ArrayBuffer[BigInt]())))
    println(_str(three_way_radix_quicksort(ArrayBuffer(BigInt(1)))))
    println(_str(three_way_radix_quicksort(ArrayBuffer(-BigInt(5), -BigInt(2), BigInt(1), -BigInt(2), BigInt(0), BigInt(1)))))
    println(_str(three_way_radix_quicksort(ArrayBuffer(BigInt(1), BigInt(2), BigInt(5), BigInt(1), BigInt(2), BigInt(0), BigInt(0), BigInt(5), BigInt(2), -BigInt(1)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
