// Generated by Mochi v0.10.63 on 2025-08-11 16:33:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def circle_sort_util(collection: ArrayBuffer[BigInt], low: BigInt, high: BigInt): Boolean = {
  var swapped: Boolean = false
  if (low == high) {
    return swapped
  }
  var left: BigInt = low
  var right: BigInt = high
  while (left < right) {
    if (collection.lift((left.toInt).toInt).getOrElse(null) > collection.lift((right.toInt).toInt).getOrElse(null)) {
      val tmp: BigInt = collection.lift((left.toInt).toInt).getOrElse(null)
      collection((left).toInt) = collection.lift((right.toInt).toInt).getOrElse(null)
      collection((right).toInt) = tmp
      swapped = true
    }
    left = left + BigInt(1)
    right = right - BigInt(1)
  }
  if ((left == right && collection.lift((left.toInt).toInt).getOrElse(null) > collection.lift(((right + BigInt(1)).toInt).toInt).getOrElse(null)).asInstanceOf[Boolean]) {
    val tmp2: BigInt = collection.lift((left.toInt).toInt).getOrElse(null)
    collection((left).toInt) = collection.lift(((right + BigInt(1)).toInt).toInt).getOrElse(null)
    collection((right + BigInt(1)).toInt) = tmp2
    swapped = true
  }
  val mid: BigInt = low + (high - low) / BigInt(2)
  val left_swap: Boolean = circle_sort_util(collection, low, mid)
  val right_swap: Boolean = circle_sort_util(collection, mid + BigInt(1), high)
  if (((swapped || left_swap).asInstanceOf[Boolean] || right_swap).asInstanceOf[Boolean]) {
    return true
  } else {
    return false
  }
  return false
}

def circle_sort(collection: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((collection).size) < BigInt(2)) {
    return collection
  }
  var is_not_sorted: Boolean = true
  while (is_not_sorted) {
    is_not_sorted = circle_sort_util(collection, BigInt(0), BigInt((collection).size) - BigInt(1))
  }
  return collection
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(circle_sort(ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2)))))
    println(_str(circle_sort(ArrayBuffer[BigInt]())))
    println(_str(circle_sort(ArrayBuffer(-BigInt(2), BigInt(5), BigInt(0), -BigInt(45)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
