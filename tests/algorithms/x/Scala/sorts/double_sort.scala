// Generated by Mochi v0.10.63 on 2025-08-11 16:33:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def double_sort(collection: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val no_of_elements: BigInt = BigInt((collection).size)
  val passes: BigInt = (no_of_elements - BigInt(1)) / BigInt(2) + BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < passes) {
    var j: BigInt = BigInt(0)
    while (j < no_of_elements - BigInt(1)) {
      if (collection.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null) < collection.lift((j.toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = collection.lift((j.toInt).toInt).getOrElse(null)
        collection((j).toInt) = collection.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)
        collection((j + BigInt(1)).toInt) = tmp
      }
      if (collection.lift(((no_of_elements - BigInt(1) - j).toInt).toInt).getOrElse(null) < collection.lift(((no_of_elements - BigInt(2) - j).toInt).toInt).getOrElse(null)) {
        val tmp2: BigInt = collection.lift(((no_of_elements - BigInt(1) - j).toInt).toInt).getOrElse(null)
        collection((no_of_elements - BigInt(1) - j).toInt) = collection.lift(((no_of_elements - BigInt(2) - j).toInt).toInt).getOrElse(null)
        collection((no_of_elements - BigInt(2) - j).toInt) = tmp2
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return collection
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(double_sort(ArrayBuffer(BigInt((-BigInt(1)).toString.head.asDigit), BigInt((-BigInt(2)).toString.head.asDigit), BigInt((-BigInt(3)).toString.head.asDigit), BigInt((-BigInt(4)).toString.head.asDigit), BigInt((-BigInt(5)).toString.head.asDigit), BigInt((-BigInt(6)).toString.head.asDigit), BigInt((-BigInt(7)).toString.head.asDigit)))))
    println(_str(double_sort(ArrayBuffer[BigInt]())))
    println(_str(double_sort(ArrayBuffer(BigInt((-BigInt(1)).toString.head.asDigit), BigInt((-BigInt(2)).toString.head.asDigit), BigInt((-BigInt(3)).toString.head.asDigit), BigInt((-BigInt(4)).toString.head.asDigit), BigInt((-BigInt(5)).toString.head.asDigit), BigInt((-BigInt(6)).toString.head.asDigit)))))
    println(_str(double_sort(ArrayBuffer(-BigInt(3), BigInt(10), BigInt(16), -BigInt(42), BigInt(29))) == ArrayBuffer(-BigInt(42), -BigInt(3), BigInt(10), BigInt(16), BigInt(29))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
