// Generated by Mochi v0.10.63 on 2025-08-11 17:37:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def copy_list(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = BigInt(0)
  while (k < BigInt((xs).size)) {
    res = res :+ (xs.lift((k.toInt).toInt).getOrElse(BigInt(0)))
    k = k + BigInt(1)
  }
  return res
}

def insertion_sort(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = copy_list(xs)
  var idx: BigInt = BigInt(1)
  while (idx < BigInt((arr).size)) {
    val value: BigInt = arr.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    var jdx: BigInt = idx - BigInt(1)
    while (jdx >= BigInt(0) && arr.lift((jdx.toInt).toInt).getOrElse(BigInt(0)) > value) {
      arr((jdx + BigInt(1)).toInt) = arr.lift((jdx.toInt).toInt).getOrElse(BigInt(0))
      jdx = jdx - BigInt(1)
    }
    arr((jdx + BigInt(1)).toInt) = value
    idx = idx + BigInt(1)
  }
  return arr
}

def merge(left: ArrayBuffer[BigInt], right: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (i < BigInt((left).size) && j < BigInt((right).size)) {
    if (left.lift((i.toInt).toInt).getOrElse(BigInt(0)) < right.lift((j.toInt).toInt).getOrElse(BigInt(0))) {
      result = result :+ (left.lift((i.toInt).toInt).getOrElse(BigInt(0)))
      i = i + BigInt(1)
    } else {
      result = result :+ (right.lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
  }
  while (i < BigInt((left).size)) {
    result = result :+ (left.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  while (j < BigInt((right).size)) {
    result = result :+ (right.lift((j.toInt).toInt).getOrElse(BigInt(0)))
    j = j + BigInt(1)
  }
  return result
}

def tim_sort(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((xs).size)
  var runs: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var sorted_runs: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var current: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  current = current :+ (xs.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
  var i: BigInt = BigInt(1)
  while (i < n) {
    if (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) < xs.lift(((i - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))) {
      runs = runs :+ (copy_list(current))
      current = ArrayBuffer()
      current = current :+ ((xs.lift((i.toInt).toInt).getOrElse(BigInt(0))).asInstanceOf[Any])
    } else {
      current = current :+ (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    }
    i = i + BigInt(1)
  }
  runs = runs :+ (copy_list(current))
  var r: BigInt = BigInt(0)
  while (r < BigInt((runs).size)) {
    sorted_runs = sorted_runs :+ (insertion_sort(runs.lift((r.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())))
    r = r + BigInt(1)
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  r = BigInt(0)
  while (r < BigInt((sorted_runs).size)) {
    result = merge(result, sorted_runs.lift((r.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    r = r + BigInt(1)
  }
  return result
}

def list_to_string(xs: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var k: BigInt = BigInt(0)
  while (k < BigInt((xs).size)) {
    s = s + _str(xs.lift((k.toInt).toInt).getOrElse(BigInt(0)))
    if (k < BigInt((xs).size) - BigInt(1)) {
      s = s + ", "
    }
    k = k + BigInt(1)
  }
  return s + "]"
}

val sample: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5), BigInt(9), BigInt(10), BigInt(3), -BigInt(4), BigInt(5), BigInt(178), BigInt(92), BigInt(46), -BigInt(18), BigInt(0), BigInt(7))

val sorted_sample: ArrayBuffer[BigInt] = tim_sort(sample)

val sample2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(2), BigInt(1))

val sorted_sample2: ArrayBuffer[BigInt] = tim_sort(sample2)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(list_to_string(sorted_sample))
    println(list_to_string(sorted_sample2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
