// Generated by Mochi v0.10.63 on 2025-08-11 17:32:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def topological_sort(start: String, visited: scala.collection.mutable.Map[String,Boolean], _sort: ArrayBuffer[String]): ArrayBuffer[String] = {
  var sort: ArrayBuffer[String] = _sort
  visited.update(start, true)
  val neighbors: ArrayBuffer[String] = edges.getOrElse(start.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((neighbors).size)) {
    val neighbor: String = neighbors.lift((i.toInt).toInt).getOrElse("")
    if (!(visited.contains(neighbor)).asInstanceOf[Boolean]) {
      sort = topological_sort(neighbor, visited, sort)
    }
    i = i + BigInt(1)
  }
  sort = sort :+ (start)
  if (BigInt((visited).size) != BigInt((vertices).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((vertices).size)) {
      val v: String = vertices.lift((j.toInt).toInt).getOrElse("")
      if (!(visited.contains(v)).asInstanceOf[Boolean]) {
        sort = topological_sort(v, visited, sort)
      }
      j = j + BigInt(1)
    }
  }
  return sort
}

def main(): Any = {
  val result: ArrayBuffer[String] = topological_sort("a", (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]], ArrayBuffer[String]())
  println(_str(result))
}

val edges: scala.collection.mutable.Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("a" -> (ArrayBuffer("c", "b")), "b" -> (ArrayBuffer("d", "e")), "c" -> (ArrayBuffer()), "d" -> (ArrayBuffer()), "e" -> (ArrayBuffer()))

val vertices: ArrayBuffer[String] = ArrayBuffer("a", "b", "c", "d", "e")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
