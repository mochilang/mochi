// Generated by Mochi v0.10.63 on 2025-08-11 16:33:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def int_to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def floor_int(x: Double): BigInt = {
  var i: BigInt = BigInt(0)
  while (int_to_float(i + BigInt(1)) <= x) {
    i = i + BigInt(1)
  }
  return i
}

def set_at_float(xs: ArrayBuffer[Double], idx: BigInt, value: Double): ArrayBuffer[Double] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ (value)
    } else {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(0.0))
    }
    i = i + BigInt(1)
  }
  return res
}

def set_at_list_float(xs: ArrayBuffer[ArrayBuffer[Double]], idx: BigInt, value: ArrayBuffer[Double]): ArrayBuffer[ArrayBuffer[Double]] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ (value)
    } else {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
    }
    i = i + BigInt(1)
  }
  return res
}

def sort_float(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = xs
  var i: BigInt = BigInt(1)
  while (i < BigInt((res).size)) {
    val key: Double = res.lift((i.toInt).toInt).getOrElse(0.0)
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && res.lift((j.toInt).toInt).getOrElse(0.0) > key) {
      res = set_at_float(res, j + BigInt(1), res.lift((j.toInt).toInt).getOrElse(0.0))
      j = j - BigInt(1)
    }
    res = set_at_float(res, j + BigInt(1), key)
    i = i + BigInt(1)
  }
  return res
}

def bucket_sort_with_count(xs: ArrayBuffer[Double], bucket_count: BigInt): ArrayBuffer[Double] = {
  if ((BigInt((xs).size) == BigInt(0) || bucket_count <= BigInt(0)).asInstanceOf[Boolean]) {
    return ArrayBuffer[Double]()
  }
  var min_value: Double = xs.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var max_value: Double = xs.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var i: BigInt = BigInt(1)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(0.0) < min_value) {
      min_value = xs.lift((i.toInt).toInt).getOrElse(0.0)
    }
    if (xs.lift((i.toInt).toInt).getOrElse(0.0) > max_value) {
      max_value = xs.lift((i.toInt).toInt).getOrElse(0.0)
    }
    i = i + BigInt(1)
  }
  if (max_value == min_value) {
    return xs
  }
  val bucket_size: Double = (max_value - min_value) / int_to_float(bucket_count)
  var buckets: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  i = BigInt(0)
  while (i < bucket_count) {
    buckets = buckets :+ (ArrayBuffer[Double]())
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((xs).size)) {
    val `val`: Double = xs.lift((i.toInt).toInt).getOrElse(0.0)
    var idx: BigInt = floor_int((`val` - min_value) / bucket_size)
    if (idx < BigInt(0)) {
      idx = BigInt(0)
    }
    if (idx >= bucket_count) {
      idx = bucket_count - BigInt(1)
    }
    var bucket: ArrayBuffer[Double] = buckets.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    bucket = bucket :+ (`val`)
    buckets = set_at_list_float(buckets, idx, bucket)
    i = i + BigInt(1)
  }
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((buckets).size)) {
    val sorted_bucket: ArrayBuffer[Double] = sort_float(buckets.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()))
    var j: BigInt = BigInt(0)
    while (j < BigInt((sorted_bucket).size)) {
      result = result :+ (sorted_bucket.lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return result
}

def bucket_sort(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  return bucket_sort_with_count(xs, BigInt(10))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(bucket_sort(ArrayBuffer(-1.0, 2.0, -5.0, 0.0))))
    println(_str(bucket_sort(ArrayBuffer(9.0, 8.0, 7.0, 6.0, -12.0))))
    println(_str(bucket_sort(ArrayBuffer(0.4, 1.2, 0.1, 0.2, -0.9))))
    println(_str(bucket_sort(ArrayBuffer[Double]())))
    println(_str(bucket_sort(ArrayBuffer(-10000000000.0, 10000000000.0))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
