// Generated by Mochi v0.10.63 on 2025-08-11 17:29:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def odd_even_sort(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    arr = arr :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((arr).size)
  var sorted: Boolean = false
  while (sorted == false) {
    sorted = true
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1)) {
      if (arr.lift((j.toInt).toInt).getOrElse(null) > arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = arr.lift((j.toInt).toInt).getOrElse(null)
        arr((j).toInt) = arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)
        arr((j + BigInt(1)).toInt) = tmp
        sorted = false
      }
      j = j + BigInt(2)
    }
    j = BigInt(1)
    while (j < n - BigInt(1)) {
      if (arr.lift((j.toInt).toInt).getOrElse(null) > arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = arr.lift((j.toInt).toInt).getOrElse(null)
        arr((j).toInt) = arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)
        arr((j + BigInt(1)).toInt) = tmp
        sorted = false
      }
      j = j + BigInt(2)
    }
  }
  return arr
}

def print_list(xs: ArrayBuffer[BigInt]): Any = {
  var i: BigInt = BigInt(0)
  var out: String = ""
  while (i < BigInt((xs).size)) {
    if (i > BigInt(0)) {
      out = out + " "
    }
    out = out + _str(xs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  println(out)
}

def test_odd_even_sort(): Any = {
  val a: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5), BigInt(4), BigInt(3), BigInt(2), BigInt(1))
  val r1: ArrayBuffer[BigInt] = odd_even_sort(a)
  if (((((r1.lift((BigInt(0).toInt).toInt).getOrElse(null) != BigInt(1) || r1.lift((BigInt(1).toInt).toInt).getOrElse(null) != BigInt(2)).asInstanceOf[Boolean] || r1.lift((BigInt(2).toInt).toInt).getOrElse(null) != BigInt(3)).asInstanceOf[Boolean] || r1.lift((BigInt(3).toInt).toInt).getOrElse(null) != BigInt(4)).asInstanceOf[Boolean] || r1.lift((BigInt(4).toInt).toInt).getOrElse(null) != BigInt(5)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("case1 failed"))
  }
  val b: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  val r2: ArrayBuffer[BigInt] = odd_even_sort(b)
  if (BigInt((r2).size) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("case2 failed"))
  }
  val c: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(10), -BigInt(1), BigInt(10), BigInt(2))
  val r3: ArrayBuffer[BigInt] = odd_even_sort(c)
  if ((((r3.lift((BigInt(0).toInt).toInt).getOrElse(null) != -BigInt(10) || r3.lift((BigInt(1).toInt).toInt).getOrElse(null) != -BigInt(1)).asInstanceOf[Boolean] || r3.lift((BigInt(2).toInt).toInt).getOrElse(null) != BigInt(2)).asInstanceOf[Boolean] || r3.lift((BigInt(3).toInt).toInt).getOrElse(null) != BigInt(10)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("case3 failed"))
  }
  val d: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4))
  val r4: ArrayBuffer[BigInt] = odd_even_sort(d)
  if ((((r4.lift((BigInt(0).toInt).toInt).getOrElse(null) != BigInt(1) || r4.lift((BigInt(1).toInt).toInt).getOrElse(null) != BigInt(2)).asInstanceOf[Boolean] || r4.lift((BigInt(2).toInt).toInt).getOrElse(null) != BigInt(3)).asInstanceOf[Boolean] || r4.lift((BigInt(3).toInt).toInt).getOrElse(null) != BigInt(4)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("case4 failed"))
  }
}

def main(): Any = {
  test_odd_even_sort()
  val sample: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5), BigInt(4), BigInt(3), BigInt(2), BigInt(1))
  val sorted: ArrayBuffer[BigInt] = odd_even_sort(sample)
  print_list(sorted)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
