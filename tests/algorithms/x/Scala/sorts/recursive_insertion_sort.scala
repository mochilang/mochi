// Generated by Mochi v0.10.63 on 2025-08-11 17:31:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def insert_next(collection: ArrayBuffer[BigInt], index: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = collection
  if ((index >= BigInt((arr).size) || arr.lift(((index - BigInt(1)).toInt).toInt).getOrElse(null) <= arr.lift((index.toInt).toInt).getOrElse(null)).asInstanceOf[Boolean]) {
    return arr
  }
  var j: BigInt = index - BigInt(1)
  val temp: BigInt = arr.lift((j.toInt).toInt).getOrElse(null)
  arr((j).toInt) = arr.lift((index.toInt).toInt).getOrElse(null)
  arr((index).toInt) = temp
  return insert_next(arr, index + BigInt(1))
}

def rec_insertion_sort(collection: ArrayBuffer[BigInt], n: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = collection
  if ((BigInt((arr).size) <= BigInt(1) || n <= BigInt(1)).asInstanceOf[Boolean]) {
    return arr
  }
  arr = insert_next(arr, n - BigInt(1))
  return rec_insertion_sort(arr, n - BigInt(1))
}

def test_rec_insertion_sort(): Any = {
  var col1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(1))
  col1 = rec_insertion_sort(col1, BigInt((col1).size))
  if (((col1.lift((BigInt(0).toInt).toInt).getOrElse(null) != BigInt(1) || col1.lift((BigInt(1).toInt).toInt).getOrElse(null) != BigInt(1)).asInstanceOf[Boolean] || col1.lift((BigInt(2).toInt).toInt).getOrElse(null) != BigInt(2)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  var col2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(1), BigInt(0), -BigInt(1), -BigInt(2))
  col2 = rec_insertion_sort(col2, BigInt((col2).size))
  if (col2.lift((BigInt(0).toInt).toInt).getOrElse(null) != BigInt(-2)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  if (col2.lift((BigInt(1).toInt).toInt).getOrElse(null) != BigInt(-1)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  if (col2.lift((BigInt(2).toInt).toInt).getOrElse(null) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  if (col2.lift((BigInt(3).toInt).toInt).getOrElse(null) != BigInt(1)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  if (col2.lift((BigInt(4).toInt).toInt).getOrElse(null) != BigInt(2)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  var col3: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1))
  col3 = rec_insertion_sort(col3, BigInt((col3).size))
  if (col3.lift((BigInt(0).toInt).toInt).getOrElse(null) != BigInt(1)) {
    throw new RuntimeException(String.valueOf("test3 failed"))
  }
}

def main(): Any = {
  test_rec_insertion_sort()
  var numbers: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(5), BigInt(3), BigInt(4), BigInt(1), BigInt(2))
  numbers = rec_insertion_sort(numbers, BigInt((numbers).size))
  println(_str(numbers))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
