// Generated by Mochi v0.10.63 on 2025-08-11 17:31:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def subarray(xs: ArrayBuffer[BigInt], start: BigInt, end: BigInt): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = start
  while (k < end) {
    result = result :+ (xs.lift((k.toInt).toInt).getOrElse(null))
    k = k + BigInt(1)
  }
  return result
}

def merge(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((arr).size) > BigInt(1)) {
    val middle_length: BigInt = BigInt((arr).size) / BigInt(2)
    val left_array: ArrayBuffer[BigInt] = subarray(arr, BigInt(0), middle_length)
    val right_array: ArrayBuffer[BigInt] = subarray(arr, middle_length, BigInt((arr).size))
    val left_size: BigInt = BigInt((left_array).size)
    val right_size: BigInt = BigInt((right_array).size)
    merge(left_array)
    merge(right_array)
    var left_index: BigInt = BigInt(0)
    var right_index: BigInt = BigInt(0)
    var index: BigInt = BigInt(0)
    while (left_index < left_size && right_index < right_size) {
      if (left_array.lift((left_index.toInt).toInt).getOrElse(null) < right_array.lift((right_index.toInt).toInt).getOrElse(null)) {
        arr((index).toInt) = left_array.lift((left_index.toInt).toInt).getOrElse(null)
        left_index = left_index + BigInt(1)
      } else {
        arr((index).toInt) = right_array.lift((right_index.toInt).toInt).getOrElse(null)
        right_index = right_index + BigInt(1)
      }
      index = index + BigInt(1)
    }
    while (left_index < left_size) {
      arr((index).toInt) = left_array.lift((left_index.toInt).toInt).getOrElse(null)
      left_index = left_index + BigInt(1)
      index = index + BigInt(1)
    }
    while (right_index < right_size) {
      arr((index).toInt) = right_array.lift((right_index.toInt).toInt).getOrElse(null)
      right_index = right_index + BigInt(1)
      index = index + BigInt(1)
    }
  }
  return arr
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(merge(ArrayBuffer(BigInt(10), BigInt(9), BigInt(8), BigInt(7), BigInt(6), BigInt(5), BigInt(4), BigInt(3), BigInt(2), BigInt(1)))))
    println(_str(merge(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5), BigInt(6), BigInt(7), BigInt(8), BigInt(9), BigInt(10)))))
    println(_str(merge(ArrayBuffer(BigInt(10), BigInt(22), BigInt(1), BigInt(2), BigInt(3), BigInt(9), BigInt(15), BigInt(23)))))
    println(_str(merge(ArrayBuffer(BigInt(100)))))
    println(_str(merge(ArrayBuffer[BigInt]())))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
