// Generated by Mochi v0.10.63 on 2025-08-11 17:28:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def binary_search_insertion_from(sorted_list: ArrayBuffer[BigInt], item: BigInt, start: BigInt): ArrayBuffer[BigInt] = {
  var left: BigInt = start
  var right: BigInt = BigInt((sorted_list).size) - BigInt(1)
  val _br0 = new Breaks
  _br0.breakable {
    while (left <= right) {
      val middle: BigInt = (left + right) / BigInt(2)
      if (left == right) {
        if (sorted_list.lift((middle.toInt).toInt).getOrElse(null) < item) {
          left = middle + BigInt(1)
        }
        _br0.break()
      } else {
        if (sorted_list.lift((middle.toInt).toInt).getOrElse(null) < item) {
          left = middle + BigInt(1)
        } else {
          right = middle - BigInt(1)
        }
      }
    }
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < left) {
    result = result :+ (sorted_list.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  result = result :+ (item)
  while (i < BigInt((sorted_list).size)) {
    result = result :+ (sorted_list.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return result
}

def binary_search_insertion(sorted_list: ArrayBuffer[BigInt], item: BigInt): ArrayBuffer[BigInt] = {
  return binary_search_insertion_from(sorted_list, item, BigInt(0))
}

def merge(left: ArrayBuffer[ArrayBuffer[BigInt]], right: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (i < BigInt((left).size) && j < BigInt((right).size)) {
    if (left.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(null) < right.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(null)) {
      result = result :+ (left.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
      i = i + BigInt(1)
    } else {
      result = result :+ (right.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
      j = j + BigInt(1)
    }
  }
  while (i < BigInt((left).size)) {
    result = result :+ (left.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    i = i + BigInt(1)
  }
  while (j < BigInt((right).size)) {
    result = result :+ (right.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    j = j + BigInt(1)
  }
  return result
}

def sortlist_2d(list_2d: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val length: BigInt = BigInt((list_2d).size)
  if (length <= BigInt(1)) {
    return list_2d
  }
  val middle: BigInt = length / BigInt(2)
  var left: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < middle) {
    left = left :+ (list_2d.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    i = i + BigInt(1)
  }
  var right: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var j: BigInt = middle
  while (j < length) {
    right = right :+ (list_2d.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    j = j + BigInt(1)
  }
  return merge(sortlist_2d(left), sortlist_2d(right))
}

def merge_insertion_sort(collection: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((collection).size) <= BigInt(1)) {
    return collection
  }
  var two_paired_list: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var has_last_odd_item: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((collection).size)) {
    if (i == BigInt((collection).size) - BigInt(1)) {
      has_last_odd_item = true
    } else {
      val a: BigInt = collection.lift((i.toInt).toInt).getOrElse(null)
      val b: BigInt = collection.lift(((i + BigInt(1)).toInt).toInt).getOrElse(null)
      if (a < b) {
        two_paired_list = two_paired_list :+ (ArrayBuffer(BigInt(a.toString.head.asDigit), BigInt(b.toString.head.asDigit)))
      } else {
        two_paired_list = two_paired_list :+ (ArrayBuffer(BigInt(b.toString.head.asDigit), BigInt(a.toString.head.asDigit)))
      }
    }
    i = i + BigInt(2)
  }
  var sorted_list_2d: ArrayBuffer[ArrayBuffer[BigInt]] = sortlist_2d(two_paired_list)
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((sorted_list_2d).size)) {
    result = result :+ (sorted_list_2d.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  result = result :+ (sorted_list_2d.lift(((BigInt((sorted_list_2d).size) - BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(null))
  if (has_last_odd_item) {
    result = binary_search_insertion(result, collection.lift(((BigInt((collection).size) - BigInt(1)).toInt).toInt).getOrElse(null))
  }
  var inserted_before: Boolean = false
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((sorted_list_2d).size) - BigInt(1)) {
    if ((has_last_odd_item && result.lift((idx.toInt).toInt).getOrElse(null) == collection.lift(((BigInt((collection).size) - BigInt(1)).toInt).toInt).getOrElse(null)).asInstanceOf[Boolean]) {
      inserted_before = true
    }
    val pivot: BigInt = sorted_list_2d.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(null)
    if (inserted_before) {
      result = binary_search_insertion_from(result, pivot, idx + BigInt(2))
    } else {
      result = binary_search_insertion_from(result, pivot, idx + BigInt(1))
    }
    idx = idx + BigInt(1)
  }
  return result
}

def main(): Any = {
  val example1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2))
  val example2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(99))
  val example3: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(2), -BigInt(5), -BigInt(45))
  println(_str(merge_insertion_sort(example1)))
  println(_str(merge_insertion_sort(example2)))
  println(_str(merge_insertion_sort(example3)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
