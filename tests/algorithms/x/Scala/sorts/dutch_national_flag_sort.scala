// Generated by Mochi v0.10.63 on 2025-08-11 16:33:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def dutch_national_flag_sort(seq: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var a: ArrayBuffer[BigInt] = seq
  var low: BigInt = BigInt(0)
  var mid: BigInt = BigInt(0)
  var high: BigInt = BigInt((a).size) - BigInt(1)
  while (mid <= high) {
    val v: BigInt = a.lift((mid.toInt).toInt).getOrElse(null)
    if (v == BigInt(0)) {
      val tmp: BigInt = a.lift((low.toInt).toInt).getOrElse(null)
      a((low).toInt) = v
      a((mid).toInt) = tmp
      low = low + BigInt(1)
      mid = mid + BigInt(1)
    } else {
      if (v == BigInt(1)) {
        mid = mid + BigInt(1)
      } else {
        if (v == BigInt(2)) {
          val tmp2: BigInt = a.lift((high.toInt).toInt).getOrElse(null)
          a((high).toInt) = v
          a((mid).toInt) = tmp2
          high = high - BigInt(1)
        } else {
          throw new RuntimeException(String.valueOf("The elements inside the sequence must contains only (0, 1, 2) values"))
        }
      }
    }
  }
  return a
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(dutch_national_flag_sort(ArrayBuffer[BigInt]()))
    println(dutch_national_flag_sort(ArrayBuffer(BigInt(0))))
    println(dutch_national_flag_sort(ArrayBuffer(BigInt(2), BigInt(1), BigInt(0), BigInt(0), BigInt(1), BigInt(2))))
    println(dutch_national_flag_sort(ArrayBuffer(BigInt(0), BigInt(1), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(1), BigInt(2), BigInt(0), BigInt(0), BigInt(0), BigInt(1))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
