// Generated by Mochi v0.10.63 on 2025-08-11 17:32:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Node(var value: BigInt, var left: BigInt, var right: BigInt)

case class TreeState(var nodes: ArrayBuffer[Node], var root: BigInt)

def new_node(state: TreeState, value: BigInt): BigInt = {
  state.asInstanceOf[TreeState].nodes = state.asInstanceOf[TreeState].nodes :+ (Node(value, -BigInt(1), -BigInt(1)))
  return BigInt((state.asInstanceOf[TreeState].nodes).size) - BigInt(1)
}

def insert(state: TreeState, value: BigInt): Any = {
  if (state.asInstanceOf[TreeState].root == -BigInt(1)) {
    state.asInstanceOf[TreeState].root = new_node(state, value)
    return
  }
  var current: BigInt = state.asInstanceOf[TreeState].root
  var nodes: ArrayBuffer[Node] = state.asInstanceOf[TreeState].nodes
  while (true) {
    var node: Node = nodes.lift((current.toInt).toInt).getOrElse(null)
    if (value < node.asInstanceOf[Node].value) {
      if (node.asInstanceOf[Node].left == -BigInt(1)) {
        val idx: BigInt = new_node(state, value)
        nodes = state.asInstanceOf[TreeState].nodes
        node.asInstanceOf[Node].left = idx
        nodes((current).toInt) = node
        state.asInstanceOf[TreeState].nodes = nodes
        return
      }
      current = node.asInstanceOf[Node].left
    } else {
      if (value > node.asInstanceOf[Node].value) {
        if (node.asInstanceOf[Node].right == -BigInt(1)) {
          val idx: BigInt = new_node(state, value)
          nodes = state.asInstanceOf[TreeState].nodes
          node.asInstanceOf[Node].right = idx
          nodes((current).toInt) = node
          state.asInstanceOf[TreeState].nodes = nodes
          return
        }
        current = node.asInstanceOf[Node].right
      } else {
        return
      }
    }
  }
  return null
}

def inorder(state: TreeState, idx: BigInt): ArrayBuffer[BigInt] = {
  if (idx == -BigInt(1)) {
    return ArrayBuffer[BigInt]()
  }
  val node: Node = state.asInstanceOf[TreeState].nodes.lift((idx.toInt).toInt).getOrElse(null)
  var result: ArrayBuffer[BigInt] = inorder(state, node.asInstanceOf[Node].left)
  result = result :+ (node.asInstanceOf[Node].value)
  val right_part: ArrayBuffer[BigInt] = inorder(state, node.asInstanceOf[Node].right)
  var i: BigInt = BigInt(0)
  while (i < BigInt((right_part).size)) {
    result = result :+ (right_part.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return result
}

def tree_sort(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var state: TreeState = TreeState(ArrayBuffer(), -BigInt(1))
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    insert(state, arr.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  if (state.asInstanceOf[TreeState].root == -BigInt(1)) {
    return ArrayBuffer[BigInt]()
  }
  return inorder(state, state.asInstanceOf[TreeState].root)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(tree_sort(ArrayBuffer[BigInt]())))
    println(_str(tree_sort(ArrayBuffer(BigInt(1)))))
    println(_str(tree_sort(ArrayBuffer(BigInt(1), BigInt(2)))))
    println(_str(tree_sort(ArrayBuffer(BigInt(5), BigInt(2), BigInt(7)))))
    println(_str(tree_sort(ArrayBuffer(BigInt(5), -BigInt(4), BigInt(9), BigInt(2), BigInt(7)))))
    println(_str(tree_sort(ArrayBuffer(BigInt(5), BigInt(6), BigInt(1), -BigInt(1), BigInt(4), BigInt(37), BigInt(2), BigInt(7)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
