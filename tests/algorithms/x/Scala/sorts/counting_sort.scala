// Generated by Mochi v0.10.63 on 2025-08-11 16:33:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def max_val(arr: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
  var i: BigInt = BigInt(1)
  while (i < BigInt((arr).size)) {
    if (arr.lift((i.toInt).toInt).getOrElse(null) > m) {
      m = arr.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return m
}

def min_val(arr: ArrayBuffer[BigInt]): BigInt = {
  var m: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
  var i: BigInt = BigInt(1)
  while (i < BigInt((arr).size)) {
    if (arr.lift((i.toInt).toInt).getOrElse(null) < m) {
      m = arr.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return m
}

def counting_sort(collection: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((collection).size) == BigInt(0)) {
    return ArrayBuffer[BigInt]()
  }
  val coll_len: BigInt = BigInt((collection).size)
  val coll_max: BigInt = max_val(collection)
  val coll_min: BigInt = min_val(collection)
  val counting_arr_length: BigInt = coll_max + BigInt(1) - coll_min
  var counting_arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < counting_arr_length) {
    counting_arr = counting_arr :+ (BigInt(0))
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < coll_len) {
    val number: BigInt = collection.lift((i.toInt).toInt).getOrElse(null)
    counting_arr((number - coll_min).toInt) = counting_arr.lift(((number - coll_min).toInt).toInt).getOrElse(null) + BigInt(1)
    i = i + BigInt(1)
  }
  i = BigInt(1)
  while (i < counting_arr_length) {
    counting_arr((i).toInt) = counting_arr.lift((i.toInt).toInt).getOrElse(null) + counting_arr.lift(((i - BigInt(1)).toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  var ordered: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < coll_len) {
    ordered = ordered :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var idx: BigInt = coll_len - BigInt(1)
  while (idx >= BigInt(0)) {
    val number: BigInt = collection.lift((idx.toInt).toInt).getOrElse(null)
    val pos: BigInt = counting_arr.lift(((number - coll_min).toInt).toInt).getOrElse(null) - BigInt(1)
    ordered((pos).toInt) = number
    counting_arr((number - coll_min).toInt) = counting_arr.lift(((number - coll_min).toInt).toInt).getOrElse(null) - BigInt(1)
    idx = idx - BigInt(1)
  }
  return ordered
}

def chr(code: BigInt): String = {
  if (code == BigInt(10)) {
    return "\n"
  }
  if (code == BigInt(13)) {
    return "\r"
  }
  if (code == BigInt(9)) {
    return "\t"
  }
  if ((code >= BigInt(32) && code < BigInt(127)).asInstanceOf[Boolean]) {
    return ascii_chars.slice((code - BigInt(32)).toInt, (code - BigInt(31)).toInt)
  }
  return ""
}

def ord(ch: String): BigInt = {
  if (ch == "\n") {
    return BigInt(10)
  }
  if (ch == "\r") {
    return BigInt(13)
  }
  if (ch == "\t") {
    return BigInt(9)
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((ascii_chars).length)) {
    if (ascii_chars.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return BigInt(32) + i
    }
    i = i + BigInt(1)
  }
  return BigInt(0)
}

def counting_sort_string(s: String): String = {
  var codes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    codes = codes :+ (ord(s.slice((i).toInt, (i + BigInt(1)).toInt)))
    i = i + BigInt(1)
  }
  val sorted_codes: ArrayBuffer[BigInt] = counting_sort(codes)
  var res: String = ""
  i = BigInt(0)
  while (i < BigInt((sorted_codes).size)) {
    res = res + chr(sorted_codes.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return res
}

val ascii_chars: String = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

val example1: ArrayBuffer[BigInt] = counting_sort(ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2)))

val example2: ArrayBuffer[BigInt] = counting_sort(ArrayBuffer[BigInt]())

val example3: ArrayBuffer[BigInt] = counting_sort(ArrayBuffer(BigInt((-BigInt(2)).toString.head.asDigit), BigInt((-BigInt(5)).toString.head.asDigit), BigInt((-BigInt(45)).toString.head.asDigit)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(example1))
    println(_str(example2))
    println(_str(example3))
    println(counting_sort_string("thisisthestring"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
