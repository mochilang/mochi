// Generated by Mochi v0.10.63 on 2025-08-11 16:34:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def heapify(arr: ArrayBuffer[BigInt], index: BigInt, heap_size: BigInt): Any = {
  var largest: BigInt = index
  val left_index: BigInt = BigInt(2) * index + BigInt(1)
  val right_index: BigInt = BigInt(2) * index + BigInt(2)
  if ((left_index < heap_size && arr.lift((left_index.toInt).toInt).getOrElse(null) > arr.lift((largest.toInt).toInt).getOrElse(null)).asInstanceOf[Boolean]) {
    largest = left_index
  }
  if ((right_index < heap_size && arr.lift((right_index.toInt).toInt).getOrElse(null) > arr.lift((largest.toInt).toInt).getOrElse(null)).asInstanceOf[Boolean]) {
    largest = right_index
  }
  if (largest != index) {
    val temp: BigInt = arr.lift((largest.toInt).toInt).getOrElse(null)
    arr((largest).toInt) = arr.lift((index.toInt).toInt).getOrElse(null)
    arr((index).toInt) = temp
    heapify(arr, largest, heap_size)
  }
}

def heap_sort(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((arr).size)
  var i: BigInt = n / BigInt(2) - BigInt(1)
  while (i >= BigInt(0)) {
    heapify(arr, i, n)
    i = i - BigInt(1)
  }
  i = n - BigInt(1)
  while (i > BigInt(0)) {
    val temp: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
    arr((BigInt(0)).toInt) = arr.lift((i.toInt).toInt).getOrElse(null)
    arr((i).toInt) = temp
    heapify(arr, BigInt(0), i)
    i = i - BigInt(1)
  }
  return arr
}

var data: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(7), BigInt(9), BigInt(28), BigInt(123), -BigInt(5), BigInt(8), -BigInt(30), -BigInt(200), BigInt(0), BigInt(4))

var result: ArrayBuffer[BigInt] = heap_sort(data)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(result)
    if (_str(result) != _str(ArrayBuffer(-BigInt(200), -BigInt(30), -BigInt(5), BigInt(0), BigInt(3), BigInt(4), BigInt(7), BigInt(8), BigInt(9), BigInt(28), BigInt(123)))) {
      throw new RuntimeException(String.valueOf("Assertion error"))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
