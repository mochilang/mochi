// Generated by Mochi v0.10.63 on 2025-08-11 16:33:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def subarray(xs: ArrayBuffer[BigInt], start: BigInt, end: BigInt): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = start
  while (k < end) {
    result = result :+ (xs.lift((k.toInt).toInt).getOrElse(null))
    k = k + BigInt(1)
  }
  return result
}

def merge(left_half: ArrayBuffer[BigInt], right_half: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (i < BigInt((left_half).size) && j < BigInt((right_half).size)) {
    if (left_half.lift((i.toInt).toInt).getOrElse(null) < right_half.lift((j.toInt).toInt).getOrElse(null)) {
      result = result :+ (left_half.lift((i.toInt).toInt).getOrElse(null))
      i = i + BigInt(1)
    } else {
      result = result :+ (right_half.lift((j.toInt).toInt).getOrElse(null))
      j = j + BigInt(1)
    }
  }
  while (i < BigInt((left_half).size)) {
    result = result :+ (left_half.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  while (j < BigInt((right_half).size)) {
    result = result :+ (right_half.lift((j.toInt).toInt).getOrElse(null))
    j = j + BigInt(1)
  }
  return result
}

def merge_sort(array: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((array).size) <= BigInt(1)) {
    return array
  }
  val middle: BigInt = BigInt((array).size) / BigInt(2)
  val left_half: ArrayBuffer[BigInt] = subarray(array, BigInt(0), middle)
  val right_half: ArrayBuffer[BigInt] = subarray(array, middle, BigInt((array).size))
  val sorted_left: ArrayBuffer[BigInt] = merge_sort(left_half)
  val sorted_right: ArrayBuffer[BigInt] = merge_sort(right_half)
  return merge(sorted_left, sorted_right)
}

def split_into_blocks(data: ArrayBuffer[BigInt], block_size: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var blocks: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((data).size)) {
    val end: BigInt = (if (i + block_size < BigInt((data).size)) i + block_size else BigInt((data).size))
    val block: ArrayBuffer[BigInt] = subarray(data, i, end)
    val sorted_block: ArrayBuffer[BigInt] = merge_sort(block)
    blocks = blocks :+ (sorted_block)
    i = end
  }
  return blocks
}

def merge_blocks(blocks: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  val num_blocks: BigInt = BigInt((blocks).size)
  var indices: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < num_blocks) {
    indices = indices :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var done: Boolean = false
  while (!done) {
    done = true
    var min_val: BigInt = BigInt(0)
    var min_block: BigInt = BigInt(-1)
    var j: BigInt = BigInt(0)
    while (j < num_blocks) {
      val idx: BigInt = indices.lift((j.toInt).toInt).getOrElse(null)
      if (idx < BigInt((blocks.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
        val `val`: BigInt = blocks.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((idx.toInt).toInt).getOrElse(null)
        if ((min_block == BigInt(-1) || `val` < min_val).asInstanceOf[Boolean]) {
          min_val = `val`
          min_block = j
        }
        done = false
      }
      j = j + BigInt(1)
    }
    if (!done) {
      result = result :+ (min_val)
      indices((min_block).toInt) = indices.lift((min_block.toInt).toInt).getOrElse(null) + BigInt(1)
    }
  }
  return result
}

def external_sort(data: ArrayBuffer[BigInt], block_size: BigInt): ArrayBuffer[BigInt] = {
  val blocks: ArrayBuffer[ArrayBuffer[BigInt]] = split_into_blocks(data, block_size)
  return merge_blocks(blocks)
}

def main(): Any = {
  val data: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(7), BigInt(1), BigInt(5), BigInt(3), BigInt(9), BigInt(2), BigInt(6), BigInt(4), BigInt(8), BigInt(0))
  val sorted_data: ArrayBuffer[BigInt] = external_sort(data, BigInt(3))
  println(sorted_data)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
