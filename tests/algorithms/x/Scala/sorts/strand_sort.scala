// Generated by Mochi v0.10.63 on 2025-08-11 17:32:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def merge(xs: ArrayBuffer[BigInt], ys: ArrayBuffer[BigInt], reverse: Boolean): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  while (i < BigInt((xs).size) && j < BigInt((ys).size)) {
    if (reverse) {
      if (xs.lift((i.toInt).toInt).getOrElse(null) > ys.lift((j.toInt).toInt).getOrElse(null)) {
        result = result :+ (xs.lift((i.toInt).toInt).getOrElse(null))
        i = i + BigInt(1)
      } else {
        result = result :+ (ys.lift((j.toInt).toInt).getOrElse(null))
        j = j + BigInt(1)
      }
    } else {
      if (xs.lift((i.toInt).toInt).getOrElse(null) < ys.lift((j.toInt).toInt).getOrElse(null)) {
        result = result :+ (xs.lift((i.toInt).toInt).getOrElse(null))
        i = i + BigInt(1)
      } else {
        result = result :+ (ys.lift((j.toInt).toInt).getOrElse(null))
        j = j + BigInt(1)
      }
    }
  }
  while (i < BigInt((xs).size)) {
    result = result :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  while (j < BigInt((ys).size)) {
    result = result :+ (ys.lift((j.toInt).toInt).getOrElse(null))
    j = j + BigInt(1)
  }
  return result
}

def strand_sort_rec(arr: ArrayBuffer[BigInt], reverse: Boolean, _solution: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var solution: ArrayBuffer[BigInt] = _solution
  if (BigInt((arr).size) == BigInt(0)) {
    return solution
  }
  var sublist: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var remaining: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  sublist = sublist :+ (arr.lift((BigInt(0).toInt).toInt).getOrElse(null))
  var last: BigInt = arr.lift((BigInt(0).toInt).toInt).getOrElse(null)
  var k: BigInt = BigInt(1)
  while (k < BigInt((arr).size)) {
    val item: BigInt = arr.lift((k.toInt).toInt).getOrElse(null)
    if (reverse) {
      if (item < last) {
        sublist = sublist :+ (item)
        last = item
      } else {
        remaining = remaining :+ (item)
      }
    } else {
      if (item > last) {
        sublist = sublist :+ (item)
        last = item
      } else {
        remaining = remaining :+ (item)
      }
    }
    k = k + BigInt(1)
  }
  solution = merge(solution, sublist, reverse)
  return strand_sort_rec(remaining, reverse, solution)
}

def strand_sort(arr: ArrayBuffer[BigInt], reverse: Boolean): ArrayBuffer[BigInt] = {
  return strand_sort_rec(arr, reverse, ArrayBuffer[BigInt]())
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(strand_sort(ArrayBuffer(BigInt(4), BigInt(3), BigInt(5), BigInt(1), BigInt(2)), false)))
    println(_str(strand_sort(ArrayBuffer(BigInt(4), BigInt(3), BigInt(5), BigInt(1), BigInt(2)), true)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
