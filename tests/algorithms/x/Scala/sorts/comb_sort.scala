// Generated by Mochi v0.10.63 on 2025-08-11 16:33:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def comb_sort(data: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val shrink_factor: Double = 1.3
  var gap: BigInt = BigInt((data).size)
  var completed: Boolean = false
  while (!completed) {
    gap = BigInt((gap.toString.toDouble / shrink_factor).toString.head.asDigit)
    if (gap <= BigInt(1)) {
      gap = BigInt(1)
      completed = true
    }
    var index: BigInt = BigInt(0)
    while (index + gap < BigInt((data).size)) {
      if (data.lift((index.toInt).toInt).getOrElse(null) > data.lift(((index + gap).toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = data.lift((index.toInt).toInt).getOrElse(null)
        data((index).toInt) = data.lift(((index + gap).toInt).toInt).getOrElse(null)
        data((index + gap).toInt) = tmp
        completed = false
      }
      index = index + BigInt(1)
    }
  }
  return data
}

def main(): Any = {
  println(comb_sort(ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2))))
  println(comb_sort(ArrayBuffer[BigInt]()))
  println(comb_sort(ArrayBuffer(BigInt(99), BigInt(45), -BigInt(7), BigInt(8), BigInt(2), BigInt(0), -BigInt(15), BigInt(3))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
