// Generated by Mochi v0.10.63 on 2025-08-11 17:30:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def make_buckets(): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var buckets: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < RADIX) {
    buckets = buckets :+ (ArrayBuffer[BigInt]())
    i = i + BigInt(1)
  }
  return buckets
}

def max_value(xs: ArrayBuffer[BigInt]): BigInt = {
  var max_val: BigInt = xs.lift((BigInt(0).toInt).toInt).getOrElse(null)
  var i: BigInt = BigInt(1)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(null) > max_val) {
      max_val = xs.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return max_val
}

def radix_sort(list_of_ints: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var placement: BigInt = BigInt(1)
  val max_digit: BigInt = max_value(list_of_ints)
  while (placement <= max_digit) {
    var buckets: ArrayBuffer[ArrayBuffer[BigInt]] = make_buckets()
    var i: BigInt = BigInt(0)
    while (i < BigInt((list_of_ints).size)) {
      val value: BigInt = list_of_ints.lift((i.toInt).toInt).getOrElse(null)
      val tmp: BigInt = value / placement % RADIX
      buckets((tmp).toInt) = buckets.lift((tmp.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) :+ (value)
      i = i + BigInt(1)
    }
    var a: BigInt = BigInt(0)
    var b: BigInt = BigInt(0)
    while (b < RADIX) {
      var bucket: ArrayBuffer[BigInt] = buckets.lift((b.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var j: BigInt = BigInt(0)
      while (j < BigInt((bucket).size)) {
        list_of_ints((a).toInt) = bucket.lift((j.toInt).toInt).getOrElse(null)
        a = a + BigInt(1)
        j = j + BigInt(1)
      }
      b = b + BigInt(1)
    }
    placement = placement * RADIX
  }
  return list_of_ints
}

val RADIX: BigInt = BigInt(10)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(radix_sort(ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2)))))
    println(_str(radix_sort(ArrayBuffer(BigInt(1), BigInt(100), BigInt(10), BigInt(1000)))))
    println(_str(radix_sort(ArrayBuffer(BigInt(15), BigInt(14), BigInt(13), BigInt(12), BigInt(11), BigInt(10), BigInt(9), BigInt(8), BigInt(7), BigInt(6), BigInt(5), BigInt(4), BigInt(3), BigInt(2), BigInt(1), BigInt(0)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
