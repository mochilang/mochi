// Generated by Mochi v0.10.63 on 2025-08-11 16:33:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def set_at_int(xs: ArrayBuffer[BigInt], idx: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i == idx) {
      res = res :+ (value)
    } else {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    }
    i = i + BigInt(1)
  }
  return res
}

def comp_and_swap(arr: ArrayBuffer[BigInt], i: BigInt, j: BigInt, dir: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = arr
  val xi: BigInt = arr.lift((i.toInt).toInt).getOrElse(null)
  val xj: BigInt = arr.lift((j.toInt).toInt).getOrElse(null)
  if (((dir == BigInt(1) && xi > xj).asInstanceOf[Boolean] || (dir == BigInt(0) && xi < xj).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    res = set_at_int(res, i, xj)
    res = set_at_int(res, j, xi)
  }
  return res
}

def bitonic_merge(arr: ArrayBuffer[BigInt], low: BigInt, length: BigInt, dir: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = arr
  if (length > BigInt(1)) {
    val mid: BigInt = length / BigInt(2)
    var k: BigInt = low
    while (k < low + mid) {
      res = comp_and_swap(res, k, k + mid, dir)
      k = k + BigInt(1)
    }
    res = bitonic_merge(res, low, mid, dir)
    res = bitonic_merge(res, low + mid, mid, dir)
  }
  return res
}

def bitonic_sort(arr: ArrayBuffer[BigInt], low: BigInt, length: BigInt, dir: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = arr
  if (length > BigInt(1)) {
    val mid: BigInt = length / BigInt(2)
    res = bitonic_sort(res, low, mid, BigInt(1))
    res = bitonic_sort(res, low + mid, mid, BigInt(0))
    res = bitonic_merge(res, low, length, dir)
  }
  return res
}

def main(): Any = {
  val data: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(12), BigInt(34), BigInt(92), -BigInt(23), BigInt(0), -BigInt(121), -BigInt(167), BigInt(145))
  val asc: ArrayBuffer[BigInt] = bitonic_sort(data, BigInt(0), BigInt((data).size), BigInt(1))
  println(_str(asc))
  val desc: ArrayBuffer[BigInt] = bitonic_merge(asc, BigInt(0), BigInt((asc).size), BigInt(0))
  println(_str(desc))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
