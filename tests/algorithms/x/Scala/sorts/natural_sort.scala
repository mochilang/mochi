// Generated by Mochi v0.10.63 on 2025-08-11 17:29:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def index_of(s: String, ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (s.slice((i.toInt).toInt, (i.toInt).toInt + 1) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def is_digit(ch: String): Boolean = {
  return index_of(DIGITS, ch) >= BigInt(0)
}

def to_lower(ch: String): String = {
  var idx: BigInt = index_of(UPPER, ch)
  if (idx >= BigInt(0)) {
    return LOWER.slice((idx).toInt, (idx + BigInt(1)).toInt)
  }
  return ch
}

def pad_left(s: String, width: BigInt): String = {
  var res: String = s
  while (BigInt((res).size) < width) {
    res = "0" + res
  }
  return res
}

def alphanum_key(s: String): ArrayBuffer[String] = {
  var key: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (i < BigInt((s).size)) {
      if (is_digit((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)) {
        var num: String = ""
        while (i < BigInt((s).size) && is_digit((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)) {
          num = num + s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
          i = i + BigInt(1)
        }
        val len_str: String = pad_left((_str(BigInt((num).size))).toString, BigInt(3))
        key = key :+ ("#" + len_str + num)
      } else {
        var seg: String = ""
        val _br4 = new Breaks
        _br4.breakable {
          while (i < BigInt((s).size)) {
            if (is_digit((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)) {
              _br4.break()
            }
            seg = seg + to_lower((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString)
            i = i + BigInt(1)
          }
        }
        key = key :+ (seg)
      }
    }
  }
  return key
}

def compare_keys(a: ArrayBuffer[String], b: ArrayBuffer[String]): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size) && i < BigInt((b).size)) {
    if (a.lift((i.toInt).toInt).getOrElse("") < b.lift((i.toInt).toInt).getOrElse("")) {
      return -BigInt(1)
    }
    if (a.lift((i.toInt).toInt).getOrElse("") > b.lift((i.toInt).toInt).getOrElse("")) {
      return BigInt(1)
    }
    i = i + BigInt(1)
  }
  if (BigInt((a).size) < BigInt((b).size)) {
    return -BigInt(1)
  }
  if (BigInt((a).size) > BigInt((b).size)) {
    return BigInt(1)
  }
  return BigInt(0)
}

def natural_sort(arr: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var keys: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer[ArrayBuffer[String]]()
  var k: BigInt = BigInt(0)
  while (k < BigInt((arr).size)) {
    res = res :+ (arr.lift((k.toInt).toInt).getOrElse(""))
    keys = keys :+ (alphanum_key(arr.lift((k.toInt).toInt).getOrElse("")))
    k = k + BigInt(1)
  }
  var i: BigInt = BigInt(1)
  while (i < BigInt((res).size)) {
    val current: String = res.lift((i.toInt).toInt).getOrElse("")
    val current_key: ArrayBuffer[String] = keys.lift((i.toInt).toInt).getOrElse(ArrayBuffer[String]())
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && compare_keys(keys.lift((j.toInt).toInt).getOrElse(ArrayBuffer[String]()), current_key) > BigInt(0)) {
      res((j + BigInt(1)).toInt) = res.lift((j.toInt).toInt).getOrElse("")
      keys((j + BigInt(1)).toInt) = keys.lift((j.toInt).toInt).getOrElse(ArrayBuffer[String]())
      j = j - BigInt(1)
    }
    res((j + BigInt(1)).toInt) = current
    keys((j + BigInt(1)).toInt) = current_key
    i = i + BigInt(1)
  }
  return res
}

val DIGITS: String = "0123456789"

val LOWER: String = "abcdefghijklmnopqrstuvwxyz"

val UPPER: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

var example1: ArrayBuffer[String] = ArrayBuffer("2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in")

var example2: ArrayBuffer[String] = ArrayBuffer("Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(natural_sort(example1)))
    println(_str(natural_sort(example2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
