// Generated by Mochi v0.10.63 on 2025-08-11 17:29:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def get_bit_length(n: BigInt): BigInt = {
  if (n == BigInt(0)) {
    return BigInt(1)
  }
  var length: BigInt = BigInt(0)
  var num: BigInt = n
  while (num > BigInt(0)) {
    length = length + BigInt(1)
    num = num / BigInt(2)
  }
  return length
}

def max_bit_length(nums: ArrayBuffer[BigInt]): BigInt = {
  var i: BigInt = BigInt(0)
  var max_len: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    val l: BigInt = get_bit_length(nums.lift((i.toInt).toInt).getOrElse(null))
    if (l > max_len) {
      max_len = l
    }
    i = i + BigInt(1)
  }
  return max_len
}

def get_bit(num: BigInt, pos: BigInt): BigInt = {
  var n: BigInt = num
  var i: BigInt = BigInt(0)
  while (i < pos) {
    n = n / BigInt(2)
    i = i + BigInt(1)
  }
  return n % BigInt(2)
}

def _msd_radix_sort(nums: ArrayBuffer[BigInt], bit_position: BigInt): ArrayBuffer[BigInt] = {
  if ((bit_position == BigInt(0) || BigInt((nums).size) <= BigInt(1)).asInstanceOf[Boolean]) {
    return nums
  }
  var zeros: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var ones: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    val num: BigInt = nums.lift((i.toInt).toInt).getOrElse(null)
    if (get_bit(num, bit_position - BigInt(1)) == BigInt(1)) {
      ones = ones :+ (num)
    } else {
      zeros = zeros :+ (num)
    }
    i = i + BigInt(1)
  }
  zeros = _msd_radix_sort(zeros, bit_position - BigInt(1))
  ones = _msd_radix_sort(ones, bit_position - BigInt(1))
  var res: ArrayBuffer[BigInt] = zeros
  i = BigInt(0)
  while (i < BigInt((ones).size)) {
    res = res :+ (ones.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return res
}

def msd_radix_sort(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((nums).size) == BigInt(0)) {
    return ArrayBuffer[BigInt]()
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    if (nums.lift((i.toInt).toInt).getOrElse(null) < BigInt(0)) {
      throw new RuntimeException(String.valueOf("All numbers must be positive"))
    }
    i = i + BigInt(1)
  }
  val bits: BigInt = max_bit_length(nums)
  val result: ArrayBuffer[BigInt] = _msd_radix_sort(nums, bits)
  return result
}

def msd_radix_sort_inplace(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  return msd_radix_sort(nums)
}

var ex1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(40), BigInt(12), BigInt(1), BigInt(100), BigInt(4))

var sorted1: ArrayBuffer[BigInt] = msd_radix_sort(ex1)

var ex2: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()

var sorted2: ArrayBuffer[BigInt] = msd_radix_sort(ex2)

var ex3: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(123), BigInt(345), BigInt(123), BigInt(80))

var sorted3: ArrayBuffer[BigInt] = msd_radix_sort(ex3)

var ex4: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1209), BigInt(834598), BigInt(1), BigInt(540402), BigInt(45))

var sorted4: ArrayBuffer[BigInt] = msd_radix_sort(ex4)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(sorted1))
    println(_str(sorted2))
    println(_str(sorted3))
    println(_str(sorted4))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
