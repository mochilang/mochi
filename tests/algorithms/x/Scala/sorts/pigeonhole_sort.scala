// Generated by Mochi v0.10.63 on 2025-08-11 17:30:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def pigeonhole_sort(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((arr).size) == BigInt(0)) {
    return arr
  }
  val min_val: BigInt = BigInt((arr.min).toString.head.asDigit)
  val max_val: BigInt = BigInt((arr.max).toString.head.asDigit)
  val size: BigInt = max_val - min_val + BigInt(1)
  var holes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < size) {
    holes = holes :+ (BigInt(0))
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((arr).size)) {
    val x: BigInt = arr.lift((i.toInt).toInt).getOrElse(null)
    val index: BigInt = x - min_val
    holes((index).toInt) = holes.lift((index.toInt).toInt).getOrElse(null) + BigInt(1)
    i = i + BigInt(1)
  }
  var sorted_index: BigInt = BigInt(0)
  var count: BigInt = BigInt(0)
  while (count < size) {
    while (holes.lift((count.toInt).toInt).getOrElse(null) > BigInt(0)) {
      arr((sorted_index).toInt) = count + min_val
      holes((count).toInt) = holes.lift((count.toInt).toInt).getOrElse(null) - BigInt(1)
      sorted_index = sorted_index + BigInt(1)
    }
    count = count + BigInt(1)
  }
  return arr
}

val example: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(8), BigInt(3), BigInt(2), BigInt(7), BigInt(4), BigInt(6), BigInt(8))

val result: ArrayBuffer[BigInt] = pigeonhole_sort(example)

var output: String = "Sorted order is:"

var j: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (j < BigInt((result).size)) {
      output = output + " " + _str(result.lift((j.toInt).toInt).getOrElse(null))
      j = j + BigInt(1)
    }
    println(output)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
