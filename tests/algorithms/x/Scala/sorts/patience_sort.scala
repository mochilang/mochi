// Generated by Mochi v0.10.63 on 2025-08-11 17:30:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def bisect_left(stacks: ArrayBuffer[ArrayBuffer[BigInt]], value: BigInt): BigInt = {
  var low: BigInt = BigInt(0)
  var high: BigInt = BigInt((stacks).size)
  while (low < high) {
    val mid: BigInt = (low + high) / BigInt(2)
    val stack: ArrayBuffer[BigInt] = stacks.lift((mid.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    val top_idx: BigInt = BigInt((stack).size) - BigInt(1)
    val top: BigInt = stack.lift((top_idx.toInt).toInt).getOrElse(null)
    if (top < value) {
      low = mid + BigInt(1)
    } else {
      high = mid
    }
  }
  return low
}

def reverse_list(src: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt((src).size) - BigInt(1)
  while (i >= BigInt(0)) {
    res = res :+ (src.lift((i.toInt).toInt).getOrElse(null))
    i = i - BigInt(1)
  }
  return res
}

def patience_sort(collection: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var stacks: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((collection).size)) {
    val element: BigInt = collection.lift((i.toInt).toInt).getOrElse(null)
    val idx: BigInt = bisect_left(stacks, element)
    if (idx != BigInt((stacks).size)) {
      val stack: ArrayBuffer[BigInt] = stacks.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      stacks((idx).toInt) = stack :+ (element)
    } else {
      var new_stack: ArrayBuffer[BigInt] = ArrayBuffer(element)
      stacks = stacks :+ (new_stack)
    }
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((stacks).size)) {
    stacks((i).toInt) = reverse_list(stacks.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()))
    i = i + BigInt(1)
  }
  var indices: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((stacks).size)) {
    indices = indices :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var total: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((stacks).size)) {
    total = total + BigInt((stacks.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
    i = i + BigInt(1)
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var count: BigInt = BigInt(0)
  while (count < total) {
    var min_val: BigInt = BigInt(0)
    var min_stack: BigInt = -BigInt(1)
    var j: BigInt = BigInt(0)
    while (j < BigInt((stacks).size)) {
      val idx: BigInt = indices.lift((j.toInt).toInt).getOrElse(null)
      if (idx < BigInt((stacks.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
        val `val`: BigInt = stacks.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((idx.toInt).toInt).getOrElse(null)
        if (min_stack < BigInt(0)) {
          min_val = `val`
          min_stack = j
        } else {
          if (`val` < min_val) {
            min_val = `val`
            min_stack = j
          }
        }
      }
      j = j + BigInt(1)
    }
    result = result :+ (min_val)
    indices((min_stack).toInt) = indices.lift((min_stack.toInt).toInt).getOrElse(null) + BigInt(1)
    count = count + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((result).size)) {
    collection((i).toInt) = result.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  return collection
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(patience_sort(ArrayBuffer(BigInt(1), BigInt(9), BigInt(5), BigInt(21), BigInt(17), BigInt(6)))))
    println(_str(patience_sort(ArrayBuffer[BigInt]())))
    println(_str(patience_sort(ArrayBuffer(BigInt((-BigInt(3)).toString.head.asDigit), BigInt((-BigInt(17)).toString.head.asDigit), BigInt((-BigInt(48)).toString.head.asDigit)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
