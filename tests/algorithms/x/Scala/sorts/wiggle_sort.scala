// Generated by Mochi v0.10.63 on 2025-08-11 17:32:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def swap(xs: ArrayBuffer[Double], i: BigInt, j: BigInt): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var k: BigInt = BigInt(0)
  while (k < BigInt((xs).size)) {
    if (k == i) {
      res = res :+ (xs.lift((j.toInt).toInt).getOrElse(0.0))
    } else {
      if (k == j) {
        res = res :+ (xs.lift((i.toInt).toInt).getOrElse(0.0))
      } else {
        res = res :+ (xs.lift((k.toInt).toInt).getOrElse(0.0))
      }
    }
    k = k + BigInt(1)
  }
  return res
}

def wiggle_sort(nums: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var i: BigInt = BigInt(0)
  var res: ArrayBuffer[Double] = nums
  while (i < BigInt((res).size)) {
    val j: BigInt = (if (i == BigInt(0)) BigInt((res).size) - BigInt(1) else i - BigInt(1))
    val prev: Double = res.lift((j.toInt).toInt).getOrElse(0.0)
    val curr: Double = res.lift((i.toInt).toInt).getOrElse(0.0)
    if (i % BigInt(2) == BigInt(1) == prev > curr) {
      res = swap(res, j, i)
    }
    i = i + BigInt(1)
  }
  return res
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(wiggle_sort(ArrayBuffer(3.0, 5.0, 2.0, 1.0, 6.0, 4.0))))
    println(_str(wiggle_sort(ArrayBuffer(0.0, 5.0, 3.0, 2.0, 2.0))))
    println(_str(wiggle_sort((ArrayBuffer[Double]()).asInstanceOf[ArrayBuffer[Double]])))
    println(_str(wiggle_sort(ArrayBuffer((-2.0).toString.toDouble, (-5.0).toString.toDouble, (-45.0).toString.toDouble))))
    println(_str(wiggle_sort(ArrayBuffer((-2.1).toString.toDouble, (-5.68).toString.toDouble, (-45.11).toString.toDouble))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
