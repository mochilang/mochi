// Generated by Mochi v0.10.63 on 2025-08-11 17:32:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def list_min(xs: ArrayBuffer[BigInt]): BigInt = {
  var i: BigInt = BigInt(1)
  var m: BigInt = xs.lift((BigInt(0).toInt).toInt).getOrElse(null)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(null) < m) {
      m = xs.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return m
}

def list_max(xs: ArrayBuffer[BigInt]): BigInt = {
  var i: BigInt = BigInt(1)
  var m: BigInt = xs.lift((BigInt(0).toInt).toInt).getOrElse(null)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(null) > m) {
      m = xs.lift((i.toInt).toInt).getOrElse(null)
    }
    i = i + BigInt(1)
  }
  return m
}

def remove_once(xs: ArrayBuffer[BigInt], value: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var removed: Boolean = false
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if ((!removed && xs.lift((i.toInt).toInt).getOrElse(null) == value).asInstanceOf[Boolean]) {
      removed = true
    } else {
      res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    }
    i = i + BigInt(1)
  }
  return res
}

def reverse_list(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt((xs).size) - BigInt(1)
  while (i >= BigInt(0)) {
    res = res :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    i = i - BigInt(1)
  }
  return res
}

def merge_sort(collection: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var start: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var end: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var coll: ArrayBuffer[BigInt] = collection
  while (BigInt((coll).size) > BigInt(1)) {
    val mn: BigInt = list_min(coll)
    val mx: BigInt = list_max(coll)
    start = start :+ (mn)
    end = end :+ (mx)
    coll = remove_once(coll, mn)
    coll = remove_once(coll, mx)
  }
  end = reverse_list(end)
  return (start ++ coll ++ end).asInstanceOf[ArrayBuffer[BigInt]]
}

def test_merge_sort(): Any = {
  if (merge_sort(ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2))) != ArrayBuffer(BigInt(0), BigInt(2), BigInt(2), BigInt(3), BigInt(5))) {
    throw new RuntimeException(String.valueOf("case1 failed"))
  }
  if (merge_sort(ArrayBuffer[BigInt]()) != ArrayBuffer()) {
    throw new RuntimeException(String.valueOf("case2 failed"))
  }
  if (merge_sort(ArrayBuffer(BigInt((-BigInt(2)).toString.head.asDigit), BigInt((-BigInt(5)).toString.head.asDigit), BigInt((-BigInt(45)).toString.head.asDigit))) != ArrayBuffer(-BigInt(45), -BigInt(5), -BigInt(2))) {
    throw new RuntimeException(String.valueOf("case3 failed"))
  }
}

def main(): Any = {
  test_merge_sort()
  println(_str(merge_sort(ArrayBuffer(BigInt(0), BigInt(5), BigInt(3), BigInt(2), BigInt(2)))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
