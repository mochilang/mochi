// Generated by Mochi v0.10.63 on 2025-08-11 16:34:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def merge(a: ArrayBuffer[BigInt], low: BigInt, mid: BigInt, high: BigInt): ArrayBuffer[BigInt] = {
  var left: ArrayBuffer[BigInt] = a.slice((low).toInt, (mid).toInt)
  var right: ArrayBuffer[BigInt] = a.slice((mid).toInt, (high + BigInt(1)).toInt)
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (BigInt((left).size) > BigInt(0) && BigInt((right).size) > BigInt(0)) {
    if (left.lift((BigInt(0).toInt).toInt).getOrElse(null) <= right.lift((BigInt(0).toInt).toInt).getOrElse(null)) {
      result = result :+ (left.lift((BigInt(0).toInt).toInt).getOrElse(null))
      left = left.slice((BigInt(1)).toInt, (BigInt((left).size)).toInt)
    } else {
      result = result :+ (right.lift((BigInt(0).toInt).toInt).getOrElse(null))
      right = right.slice((BigInt(1)).toInt, (BigInt((right).size)).toInt)
    }
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((left).size)) {
    result = result :+ (left.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((right).size)) {
    result = result :+ (right.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((result).size)) {
    a((low + i).toInt) = result.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  return a
}

def iter_merge_sort(items: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((items).size)
  if (n <= BigInt(1)) {
    return items
  }
  var arr: ArrayBuffer[BigInt] = items.slice((BigInt(0)).toInt, (BigInt((items).size)).toInt)
  var p: BigInt = BigInt(2)
  val _br4 = new Breaks
  _br4.breakable {
    while (p <= n) {
      var i: BigInt = BigInt(0)
      while (i < n) {
        var high: BigInt = i + p - BigInt(1)
        if (high >= n) {
          high = n - BigInt(1)
        }
        val low: BigInt = i
        val mid: BigInt = (low + high + BigInt(1)) / BigInt(2)
        arr = merge(arr, low, mid, high)
        i = i + p
      }
      if (p * BigInt(2) >= n) {
        val mid2: BigInt = i - p
        arr = merge(arr, BigInt(0), mid2, n - BigInt(1))
        _br4.break()
      }
      p = p * BigInt(2)
    }
  }
  return arr
}

def list_to_string(arr: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    s = s + _str(arr.lift((i.toInt).toInt).getOrElse(null))
    if (i < BigInt((arr).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  return s + "]"
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(list_to_string(iter_merge_sort(ArrayBuffer(BigInt(5), BigInt(9), BigInt(8), BigInt(7), BigInt(1), BigInt(2), BigInt(7)))))
    println(list_to_string(iter_merge_sort(ArrayBuffer(BigInt(1)))))
    println(list_to_string(iter_merge_sort(ArrayBuffer(BigInt(2), BigInt(1)))))
    println(list_to_string(iter_merge_sort(ArrayBuffer(BigInt(4), BigInt(3), BigInt(2), BigInt(1)))))
    println(list_to_string(iter_merge_sort(ArrayBuffer(BigInt(5), BigInt(4), BigInt(3), BigInt(2), BigInt(1)))))
    println(list_to_string(iter_merge_sort(ArrayBuffer(BigInt((-BigInt(2)).toString.head.asDigit), BigInt((-BigInt(9)).toString.head.asDigit), BigInt((-BigInt(1)).toString.head.asDigit), BigInt((-BigInt(4)).toString.head.asDigit)))))
    println(list_to_string(iter_merge_sort(ArrayBuffer[BigInt]())))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
