// Generated by Mochi v0.10.63 on 2025-08-11 16:31:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def split(s: String, sep: String): ArrayBuffer[String] = {
  var parts: ArrayBuffer[String] = ArrayBuffer[String]()
  var cur: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (((BigInt((sep).size) > BigInt(0) && i + BigInt((sep).size) <= BigInt((s).size)).asInstanceOf[Boolean] && s.slice((i).toInt, (i + BigInt((sep).size)).toInt) == sep).asInstanceOf[Boolean]) {
      parts = parts :+ (cur)
      cur = ""
      i = i + BigInt((sep).size)
    } else {
      cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
      i = i + BigInt(1)
    }
  }
  parts = parts :+ (cur)
  return parts
}

def join(xs: ArrayBuffer[String], sep: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i > BigInt(0)) {
      res = res + sep
    }
    res = res + xs.lift((i.toInt).toInt).getOrElse("")
    i = i + BigInt(1)
  }
  return res
}

def repeat(s: String, n: BigInt): String = {
  var out: String = ""
  var i: BigInt = BigInt(0)
  while (i < n) {
    out = out + s
    i = i + BigInt(1)
  }
  return out
}

def replace_char(s: String, old: String, `new`: String): String = {
  var out: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if (c == old) {
      out = out + `new`
    } else {
      out = out + c
    }
    i = i + BigInt(1)
  }
  return out
}

def contains(s: String, sub: String): Boolean = {
  if (BigInt((sub).size) == BigInt(0)) {
    return true
  }
  var i: BigInt = BigInt(0)
  while (i + BigInt((sub).size) <= BigInt((s).size)) {
    if (s.slice((i).toInt, (i + BigInt((sub).size)).toInt) == sub) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def file_extension(name: String): String = {
  var i: BigInt = BigInt((name).size) - BigInt(1)
  while (i >= BigInt(0)) {
    if (name.slice((i).toInt, (i + BigInt(1)).toInt) == ".") {
      return name.slice((i).toInt, (BigInt((name).size)).toInt)
    }
    i = i - BigInt(1)
  }
  return ""
}

def remove_extension(name: String): String = {
  var i: BigInt = BigInt((name).size) - BigInt(1)
  while (i >= BigInt(0)) {
    if (name.slice((i).toInt, (i + BigInt(1)).toInt) == ".") {
      return name.slice((BigInt(0)).toInt, (i).toInt)
    }
    i = i - BigInt(1)
  }
  return name
}

def title_case(s: String): String = {
  var out: String = ""
  var cap: Boolean = true
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if (c == " ") {
      out = out + c
      cap = true
    } else {
      if (cap) {
        out = out + c.toUpperCase()
        cap = false
      } else {
        out = out + c.toLowerCase()
      }
    }
    i = i + BigInt(1)
  }
  return out
}

def count_char(s: String, ch: String): BigInt = {
  var cnt: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      cnt = cnt + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return cnt
}

def md_prefix(level: BigInt): String = {
  if (level == BigInt(0)) {
    return "\n##"
  }
  return _repeat("  ", level) + "*"
}

def print_path(old_path: String, new_path: String): String = {
  val old_parts = ArrayBuffer(old_path.split("/"): _*)
  val new_parts = ArrayBuffer(new_path.split("/"): _*)
  var i: BigInt = BigInt(0)
  while (i < BigInt((new_parts).size)) {
    if (((i >= BigInt((old_parts).size) || old_parts.lift((i.toInt).toInt).getOrElse("") != new_parts.lift((i.toInt).toInt).getOrElse("")).asInstanceOf[Boolean] && new_parts.lift((i.toInt).toInt).getOrElse("") != "").asInstanceOf[Boolean]) {
      val title: String = title_case(replace_char(new_parts.lift((i.toInt).toInt).getOrElse(""), "_", " "))
      println(md_prefix(i) + " " + title)
    }
    i = i + BigInt(1)
  }
  return new_path
}

def sort_strings(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var arr: ArrayBuffer[String] = xs
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    var min_idx: BigInt = i
    var j: BigInt = i + BigInt(1)
    while (j < BigInt((arr).size)) {
      if (arr.lift((j.toInt).toInt).getOrElse("") < arr.lift((min_idx.toInt).toInt).getOrElse("")) {
        min_idx = j
      }
      j = j + BigInt(1)
    }
    val tmp: String = arr.lift((i.toInt).toInt).getOrElse("")
    arr((i).toInt) = arr.lift((min_idx.toInt).toInt).getOrElse("")
    arr((min_idx).toInt) = tmp
    i = i + BigInt(1)
  }
  return arr
}

def good_file_paths(paths: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  val _ct12 = new Breaks
  for (p <- paths) {
    _ct12.breakable {
      val parts = ArrayBuffer(p.split("/"): _*)
      var skip: Boolean = false
      var k: BigInt = BigInt(0)
      while (k < BigInt((parts).size) - BigInt(1)) {
        val part: String = parts.lift((k.toInt).toInt).getOrElse("")
        if ((((part == "scripts" || part.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == ".").asInstanceOf[Boolean] || part.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "_").asInstanceOf[Boolean] || (part.contains("venv")).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          skip = true
        }
        k = k + BigInt(1)
      }
      if (skip) {
        _ct12.break()
      }
      val filename: String = parts.lift(((BigInt((parts).size) - BigInt(1)).toInt).toInt).getOrElse("")
      if (filename == "__init__.py") {
        _ct12.break()
      }
      val ext: String = file_extension(filename)
      if ((ext == ".py" || ext == ".ipynb").asInstanceOf[Boolean]) {
        res = res :+ (p)
      }
    }
  }
  return res
}

def print_directory_md(paths: ArrayBuffer[String]): Any = {
  var files: ArrayBuffer[String] = sort_strings(good_file_paths(paths))
  var old_path: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((files).size)) {
    val fp: String = files.lift((i.toInt).toInt).getOrElse("")
    val parts = ArrayBuffer(fp.split("/"): _*)
    val filename: String = parts.lift(((BigInt((parts).size) - BigInt(1)).toInt).toInt).getOrElse("")
    var filepath: String = ""
    if (BigInt((parts).size) > BigInt(1)) {
      filepath = join(parts.slice((BigInt(0)).toInt, (BigInt((parts).size) - BigInt(1)).toInt), "/")
    }
    if (filepath != old_path) {
      old_path = print_path(old_path, filepath)
    }
    var indent: BigInt = BigInt(0)
    if (BigInt((filepath).size) > BigInt(0)) {
      indent = count_char(filepath, "/") + BigInt(1)
    }
    val url: String = replace_char(fp, " ", "%20")
    val name: String = title_case(replace_char(remove_extension(filename), "_", " "))
    println(md_prefix(indent) + " [" + name + "](" + url + ")")
    i = i + BigInt(1)
  }
}

val sample: ArrayBuffer[String] = ArrayBuffer("data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_directory_md(sample)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
