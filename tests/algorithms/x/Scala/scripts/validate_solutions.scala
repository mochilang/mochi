// Generated by Mochi v0.10.63 on 2025-08-11 16:31:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

private def _sha256(bytes: Array[Byte]): ArrayBuffer[BigInt] = {
  val md = java.security.MessageDigest.getInstance("SHA-256")
  md.update(bytes)
  val sum = md.digest()
  ArrayBuffer(sum.map(b => BigInt(b & 0xff)): _*)
}

def byte_to_hex(b: BigInt): String = {
  val hi: BigInt = b / BigInt(16)
  val lo: BigInt = b % BigInt(16)
  return HEX.slice((hi.toInt).toInt, (hi.toInt).toInt + 1) + HEX.slice((lo.toInt).toInt, (lo.toInt).toInt + 1)
}

def bytes_to_hex(bs: ArrayBuffer[BigInt]): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((bs).size)) {
    res = res + byte_to_hex(bs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return res
}

def sha256_hex(s: String): String = {
  return bytes_to_hex((_sha256(s.getBytes())).asInstanceOf[ArrayBuffer[BigInt]])
}

def solution_001(): String = {
  var total: BigInt = BigInt(0)
  var n: BigInt = BigInt(0)
  while (n < BigInt(1000)) {
    if ((n % BigInt(3) == BigInt(0) || n % BigInt(5) == BigInt(0)).asInstanceOf[Boolean]) {
      total = total + n
    }
    n = n + BigInt(1)
  }
  return (_str(total)).toString
}

val HEX: String = "0123456789abcdef"

val expected: String = sha256_hex("233168")

val answer: String = solution_001()

val computed: String = sha256_hex(answer)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    if (computed == expected) {
      println("Problem 001 passed")
    } else {
      println("Problem 001 failed: " + computed + " != " + expected)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
