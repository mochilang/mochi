// Generated by Mochi v0.10.63 on 2025-08-11 16:31:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def indexOf(s: String, sub: String): BigInt = {
  val n: BigInt = BigInt((s).size)
  val m: BigInt = BigInt((sub).size)
  var i: BigInt = BigInt(0)
  while (i <= n - m) {
    if (s.slice((i).toInt, (i + m).toInt) == sub) {
      return i
    }
    i = i + BigInt(1)
  }
  return -BigInt(1)
}

def contains(s: String, sub: String): Boolean = {
  return BigInt(s.indexOf(sub)) >= BigInt(0)
}

def validate(files: ArrayBuffer[String]): BigInt = {
  var upper: ArrayBuffer[String] = ArrayBuffer[String]()
  var space: ArrayBuffer[String] = ArrayBuffer[String]()
  var hyphen: ArrayBuffer[String] = ArrayBuffer[String]()
  var nodir: ArrayBuffer[String] = ArrayBuffer[String]()
  for (f <- files) {
    if (f != f.toLowerCase()) {
      upper = upper :+ (f)
    }
    if ((f.contains(" ")).asInstanceOf[Boolean]) {
      space = space :+ (f)
    }
    if (((f.contains("-")).asInstanceOf[Boolean] && f.contains("/site-packages/") == false).asInstanceOf[Boolean]) {
      hyphen = hyphen :+ (f)
    }
    if (!(f.contains("/")).asInstanceOf[Boolean]) {
      nodir = nodir :+ (f)
    }
  }
  if (BigInt((upper).size) > BigInt(0)) {
    println(_str(BigInt((upper).size)) + " files contain uppercase characters:")
    for (f <- upper) {
      println(f)
    }
    println("")
  }
  if (BigInt((space).size) > BigInt(0)) {
    println(_str(BigInt((space).size)) + " files contain space characters:")
    for (f <- space) {
      println(f)
    }
    println("")
  }
  if (BigInt((hyphen).size) > BigInt(0)) {
    println(_str(BigInt((hyphen).size)) + " files contain hyphen characters:")
    for (f <- hyphen) {
      println(f)
    }
    println("")
  }
  if (BigInt((nodir).size) > BigInt(0)) {
    println(_str(BigInt((nodir).size)) + " files are not in a directory:")
    for (f <- nodir) {
      println(f)
    }
    println("")
  }
  return BigInt((upper).size) + BigInt((space).size) + BigInt((hyphen).size) + BigInt((nodir).size)
}

def main(): Any = {
  val files: ArrayBuffer[String] = ArrayBuffer("scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py")
  val bad: BigInt = validate(files)
  println(_str(bad))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
