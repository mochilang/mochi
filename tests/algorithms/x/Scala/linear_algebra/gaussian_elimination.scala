// Generated by Mochi v0.10.63 on 2025-08-12 08:54:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def retroactive_resolution(coefficients: ArrayBuffer[ArrayBuffer[Double]], vector: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((coefficients).size)
  var x: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var inner: ArrayBuffer[Double] = ArrayBuffer[Double]()
    inner = inner :+ (0.0)
    x = x :+ (inner)
    i = i + BigInt(1)
  }
  var r: BigInt = rows - BigInt(1)
  while (r >= BigInt(0)) {
    var total: Double = 0.0
    var c: BigInt = r + BigInt(1)
    while (c < rows) {
      total = total + coefficients.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0) * x.lift((c.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
      c = c + BigInt(1)
    }
    x((r).toInt)((BigInt(0)).toInt) = (vector.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0) - total) / coefficients.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((r.toInt).toInt).getOrElse(0.0)
    r = r - BigInt(1)
  }
  return x
}

def gaussian_elimination(coefficients: ArrayBuffer[ArrayBuffer[Double]], vector: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((coefficients).size)
  val columns: BigInt = BigInt((coefficients.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  if (rows != columns) {
    return ArrayBuffer[ArrayBuffer[Double]]()
  }
  var augmented: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < columns) {
      row = row :+ (coefficients.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    row = row :+ (vector.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0))
    augmented = augmented :+ (row)
    i = i + BigInt(1)
  }
  var row_idx: BigInt = BigInt(0)
  while (row_idx < rows - BigInt(1)) {
    val pivot: Double = augmented.lift((row_idx.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row_idx.toInt).toInt).getOrElse(0.0)
    var col: BigInt = row_idx + BigInt(1)
    while (col < rows) {
      val factor: Double = augmented.lift((col.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row_idx.toInt).toInt).getOrElse(0.0) / pivot
      var k: BigInt = row_idx
      while (k < columns + BigInt(1)) {
        augmented((col).toInt)((k).toInt) = augmented.lift((col.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) - factor * augmented.lift((row_idx.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      col = col + BigInt(1)
    }
    row_idx = row_idx + BigInt(1)
  }
  var coeffs: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var vec: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var r: BigInt = BigInt(0)
  while (r < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c: BigInt = BigInt(0)
    while (c < columns) {
      row = row :+ (augmented.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0))
      c = c + BigInt(1)
    }
    coeffs = coeffs :+ (row)
    vec = vec :+ (ArrayBuffer((augmented.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((columns.toInt).toInt).getOrElse(0.0)).toString.toDouble))
    r = r + BigInt(1)
  }
  val x: ArrayBuffer[ArrayBuffer[Double]] = retroactive_resolution(coeffs, vec)
  return x
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(gaussian_elimination(ArrayBuffer(ArrayBuffer(1.0, -4.0, -2.0), ArrayBuffer(5.0, 2.0, -2.0), ArrayBuffer(1.0, -1.0, 0.0)), ArrayBuffer(ArrayBuffer(-2.0), ArrayBuffer(-3.0), ArrayBuffer(4.0))))
    println(gaussian_elimination(ArrayBuffer(ArrayBuffer(1.0, 2.0), ArrayBuffer(5.0, 2.0)), ArrayBuffer(ArrayBuffer(5.0), ArrayBuffer(5.0))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
