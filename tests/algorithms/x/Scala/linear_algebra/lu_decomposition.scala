// Generated by Mochi v0.10.59 on 2025-08-07 12:40:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class LU(var lower: ArrayBuffer[ArrayBuffer[Double]], var upper: ArrayBuffer[ArrayBuffer[Double]])

def lu_decomposition(mat: ArrayBuffer[ArrayBuffer[Double]]): LU = {
  val n: BigInt = BigInt((mat).size)
  if (n == BigInt(0)) {
    return LU(ArrayBuffer(), ArrayBuffer())
  }
  val m: BigInt = BigInt((mat((BigInt(0).toInt).toInt)).size)
  if (n != m) {
    throw new RuntimeException(String.valueOf("Matrix must be square"))
  }
  var lower: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var upper: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var lrow: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var urow: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      lrow = lrow :+ 0.0
      urow = urow :+ 0.0
      j = j + BigInt(1)
    }
    lower = lower :+ lrow
    upper = upper :+ urow
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    var j1: BigInt = BigInt(0)
    while (j1 < i) {
      var total: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < i) {
        total = total + lower((i.toInt).toInt)((k.toInt).toInt) * upper((k.toInt).toInt)((j1.toInt).toInt)
        k = k + BigInt(1)
      }
      if (upper((j1.toInt).toInt)((j1.toInt).toInt) == 0.0) {
        throw new RuntimeException(String.valueOf("No LU decomposition exists"))
      }
      lower((i).toInt)((j1).toInt) = (mat((i.toInt).toInt)((j1.toInt).toInt) - total) / upper((j1.toInt).toInt)((j1.toInt).toInt)
      j1 = j1 + BigInt(1)
    }
    lower((i).toInt)((i).toInt) = 1.0
    var j2: BigInt = i
    while (j2 < n) {
      var total2: Double = 0.0
      var k2: BigInt = BigInt(0)
      while (k2 < i) {
        total2 = total2 + lower((i.toInt).toInt)((k2.toInt).toInt) * upper((k2.toInt).toInt)((j2.toInt).toInt)
        k2 = k2 + BigInt(1)
      }
      upper((i).toInt)((j2).toInt) = mat((i.toInt).toInt)((j2.toInt).toInt) - total2
      j2 = j2 + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return LU(lower, upper)
}

def print_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat((i.toInt).toInt)).size)) {
      line = line + String.valueOf(mat((i.toInt).toInt)((j.toInt).toInt))
      if (j + BigInt(1) < BigInt((mat((i.toInt).toInt)).size)) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(line)
    i = i + BigInt(1)
  }
}

val matrix: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, -2.0, 1.0), ArrayBuffer(0.0, 1.0, 2.0), ArrayBuffer(5.0, 3.0, 1.0))

val result: LU = lu_decomposition(matrix)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_matrix(result.lower)
    print_matrix(result.upper)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
