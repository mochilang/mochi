// Generated by Mochi v0.10.59 on 2025-08-07 12:40:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def invert_matrix(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((matrix).size)
  var aug: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ matrix((i.toInt).toInt)((j.toInt).toInt)
      j = j + BigInt(1)
    }
    var k: BigInt = BigInt(0)
    while (k < n) {
      if (i == k) {
        row = row :+ 1.0
      } else {
        row = row :+ 0.0
      }
      k = k + BigInt(1)
    }
    aug = aug :+ row
    i = i + BigInt(1)
  }
  var col: BigInt = BigInt(0)
  val _br3 = new Breaks
  _br3.breakable {
    while (col < n) {
      var pivot_row: BigInt = col
      var r: BigInt = col
      val _br4 = new Breaks
      _br4.breakable {
        while (r < n) {
          if (aug((r.toInt).toInt)((col.toInt).toInt) != 0.0) {
            pivot_row = r
            _br4.break()
          }
          r = r + BigInt(1)
        }
      }
      if (aug((pivot_row.toInt).toInt)((col.toInt).toInt) == 0.0) {
        throw new RuntimeException(String.valueOf("Matrix is not invertible"))
      }
      if (pivot_row != col) {
        val temp: ArrayBuffer[Double] = aug((col.toInt).toInt)
        aug((col).toInt) = aug((pivot_row.toInt).toInt)
        aug((pivot_row).toInt) = temp
      }
      val pivot: Double = aug((col.toInt).toInt)((col.toInt).toInt)
      var c: BigInt = BigInt(0)
      while (c < BigInt(2) * n) {
        aug((col).toInt)((c).toInt) = aug((col.toInt).toInt)((c.toInt).toInt) / pivot
        c = c + BigInt(1)
      }
      var r2: BigInt = BigInt(0)
      while (r2 < n) {
        if (r2 != col) {
          val factor: Double = aug((r2.toInt).toInt)((col.toInt).toInt)
          var c2: BigInt = BigInt(0)
          while (c2 < BigInt(2) * n) {
            aug((r2).toInt)((c2).toInt) = aug((r2.toInt).toInt)((c2.toInt).toInt) - factor * aug((col.toInt).toInt)((c2.toInt).toInt)
            c2 = c2 + BigInt(1)
          }
        }
        r2 = r2 + BigInt(1)
      }
      col = col + BigInt(1)
    }
  }
  var inv: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var r3: BigInt = BigInt(0)
  while (r3 < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c3: BigInt = BigInt(0)
    while (c3 < n) {
      row = row :+ aug((r3.toInt).toInt)(((c3 + n).toInt).toInt)
      c3 = c3 + BigInt(1)
    }
    inv = inv :+ row
    r3 = r3 + BigInt(1)
  }
  return inv
}

var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(4.0, 7.0), ArrayBuffer(2.0, 6.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Original Matrix:")
    println(mat)
    println("Inverted Matrix:")
    println(invert_matrix(mat))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
