// Generated by Mochi v0.10.59 on 2025-08-07 12:40:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def absf(x: Double): Double = {
  return (if (x < 0.0) -x else x)
}

def strictly_diagonally_dominant(matrix: ArrayBuffer[ArrayBuffer[Double]]): Boolean = {
  var n: BigInt = BigInt((matrix).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    var sum: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i != j) {
        sum = sum + absf(matrix((i.toInt).toInt)((j.toInt).toInt))
      }
      j = j + BigInt(1)
    }
    if (absf(matrix((i.toInt).toInt)((i.toInt).toInt)) <= sum) {
      throw new RuntimeException(String.valueOf("Coefficient matrix is not strictly diagonally dominant"))
    }
    i = i + BigInt(1)
  }
  return true
}

def jacobi_iteration_method(coefficient: ArrayBuffer[ArrayBuffer[Double]], constant: ArrayBuffer[Double], init_val: ArrayBuffer[Double], iterations: BigInt): ArrayBuffer[Double] = {
  val n: BigInt = BigInt((coefficient).size)
  if (n == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Coefficient matrix cannot be empty"))
  }
  if (BigInt((constant).size) != n) {
    throw new RuntimeException(String.valueOf("Constant vector length must equal number of rows in coefficient matrix"))
  }
  if (BigInt((init_val).size) != n) {
    throw new RuntimeException(String.valueOf("Initial values count must match matrix size"))
  }
  var r: BigInt = BigInt(0)
  while (r < n) {
    if (BigInt((coefficient((r.toInt).toInt)).size) != n) {
      throw new RuntimeException(String.valueOf("Coefficient matrix must be square"))
    }
    r = r + BigInt(1)
  }
  if (iterations <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Iterations must be at least 1"))
  }
  strictly_diagonally_dominant(coefficient)
  var x: ArrayBuffer[Double] = init_val
  var k: BigInt = BigInt(0)
  while (k < iterations) {
    var new_x: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < n) {
      var sum: Double = 0.0
      var j: BigInt = BigInt(0)
      while (j < n) {
        if (i != j) {
          sum = sum + coefficient((i.toInt).toInt)((j.toInt).toInt) * x((j.toInt).toInt)
        }
        j = j + BigInt(1)
      }
      var value: Double = (constant((i.toInt).toInt) - sum) / coefficient((i.toInt).toInt)((i.toInt).toInt)
      new_x = new_x :+ value
      i = i + BigInt(1)
    }
    x = new_x
    k = k + BigInt(1)
  }
  return x
}

val coefficient: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(4.0, 1.0, 1.0), ArrayBuffer(1.0, 5.0, 2.0), ArrayBuffer(1.0, 2.0, 4.0))

val constant: ArrayBuffer[Double] = ArrayBuffer(2.0, -6.0, -4.0)

val init_val: ArrayBuffer[Double] = ArrayBuffer(0.5, -0.5, -0.5)

val iterations: BigInt = BigInt(3)

val result: ArrayBuffer[Double] = jacobi_iteration_method(coefficient, constant, init_val, iterations)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
