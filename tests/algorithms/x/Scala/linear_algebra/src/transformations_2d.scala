// Generated by Mochi v0.10.59 on 2025-08-07 12:42:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble).toString.toDouble > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def modf(x: Double, m: Double): Double = {
  return x - Math.floor(x / m) * m
}

def sin_taylor(angle: Double): Double = {
  var x: Double = modf(angle, 2.0 * PI)
  if (x > PI) {
    x = x - 2.0 * PI
  }
  var term: Double = x
  var sum: Double = x
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    val k1: Double = 2.0 * i.toString.toDouble
    val k2: Double = k1 + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def cos_taylor(angle: Double): Double = {
  var x: Double = modf(angle, 2.0 * PI)
  if (x > PI) {
    x = x - 2.0 * PI
  }
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    val k1: Double = 2.0 * i.toString.toDouble - 1.0
    val k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def matrix_to_string(m: ArrayBuffer[ArrayBuffer[Double]]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((m).size)) {
    var row: ArrayBuffer[Double] = m((i.toInt).toInt)
    s = s + "["
    var j: BigInt = BigInt(0)
    while (j < BigInt((row).size)) {
      s = s + String.valueOf(row((j.toInt).toInt))
      if (j < BigInt((row).size) - BigInt(1)) {
        s = s + ", "
      }
      j = j + BigInt(1)
    }
    s = s + "]"
    if (i < BigInt((m).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def scaling(f: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  return ArrayBuffer(ArrayBuffer(f, 0.0), ArrayBuffer(0.0, f))
}

def rotation(angle: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val c: Double = cos_taylor(angle)
  val s: Double = sin_taylor(angle)
  return ArrayBuffer(ArrayBuffer(c, -s), ArrayBuffer(s, c))
}

def projection(angle: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val c: Double = cos_taylor(angle)
  val s: Double = sin_taylor(angle)
  val cs: Double = c * s
  return ArrayBuffer(ArrayBuffer(c * c, cs), ArrayBuffer(cs, s * s))
}

def reflection(angle: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val c: Double = cos_taylor(angle)
  val s: Double = sin_taylor(angle)
  val cs: Double = c * s
  return ArrayBuffer(ArrayBuffer(2.0 * c - 1.0, 2.0 * cs), ArrayBuffer(2.0 * cs, 2.0 * s - 1.0))
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("    scaling(5) = " + matrix_to_string(scaling(5.0)))
    println("  rotation(45) = " + matrix_to_string(rotation(45.0)))
    println("projection(45) = " + matrix_to_string(projection(45.0)))
    println("reflection(45) = " + matrix_to_string(reflection(45.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
