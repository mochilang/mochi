// Generated by Mochi v0.10.59 on 2025-08-07 12:41:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class OptionMatrix(var value: ArrayBuffer[ArrayBuffer[Double]], var ok: Boolean)

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i == j) {
        row = row :+ 1.0
      } else {
        row = row :+ 0.0
      }
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return mat
}

def transpose(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((mat).size)
  val cols: BigInt = BigInt((mat((BigInt(0).toInt).toInt)).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var j: BigInt = BigInt(0)
  while (j < cols) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = BigInt(0)
    while (i < rows) {
      row = row :+ mat((i.toInt).toInt)((j.toInt).toInt)
      i = i + BigInt(1)
    }
    res = res :+ row
    j = j + BigInt(1)
  }
  return res
}

def matmul(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((b((BigInt(0).toInt).toInt)).size)
  val inner: BigInt = BigInt((a((BigInt(0).toInt).toInt)).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < inner) {
        sum = sum + a((i.toInt).toInt)((k.toInt).toInt) * b((k.toInt).toInt)((j.toInt).toInt)
        k = k + BigInt(1)
      }
      row = row :+ sum
      j = j + BigInt(1)
    }
    res = res :+ row
    i = i + BigInt(1)
  }
  return res
}

def mat_sub(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val rows: BigInt = BigInt((a).size)
  val cols: BigInt = BigInt((a((BigInt(0).toInt).toInt)).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row = row :+ a((i.toInt).toInt)((j.toInt).toInt) - b((i.toInt).toInt)((j.toInt).toInt)
      j = j + BigInt(1)
    }
    res = res :+ row
    i = i + BigInt(1)
  }
  return res
}

def inverse(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((mat).size)
  val id: ArrayBuffer[ArrayBuffer[Double]] = identity(n)
  var aug: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row = mat((i.toInt).toInt) ++ id((i.toInt).toInt)
    aug = aug :+ row.asInstanceOf[ArrayBuffer[Double]]
    i = i + BigInt(1)
  }
  var col: BigInt = BigInt(0)
  while (col < n) {
    var pivot_row: ArrayBuffer[Double] = aug((col.toInt).toInt)
    val pivot: Double = pivot_row((col.toInt).toInt)
    if (pivot == 0.0) {
      throw new RuntimeException(String.valueOf("matrix is singular"))
    }
    var j: BigInt = BigInt(0)
    while (j < BigInt(2) * n) {
      pivot_row((j).toInt) = pivot_row((j.toInt).toInt) / pivot
      j = j + BigInt(1)
    }
    aug((col).toInt) = pivot_row
    var r: BigInt = BigInt(0)
    while (r < n) {
      if (r != col) {
        var row_r: ArrayBuffer[Double] = aug((r.toInt).toInt)
        val factor: Double = row_r((col.toInt).toInt)
        j = BigInt(0)
        while (j < BigInt(2) * n) {
          row_r((j).toInt) = row_r((j.toInt).toInt) - factor * pivot_row((j.toInt).toInt)
          j = j + BigInt(1)
        }
        aug((r).toInt) = row_r
      }
      r = r + BigInt(1)
    }
    col = col + BigInt(1)
  }
  var inv: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var r: BigInt = BigInt(0)
  while (r < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var c: BigInt = n
    while (c < BigInt(2) * n) {
      row = row :+ aug((r.toInt).toInt)((c.toInt).toInt)
      c = c + BigInt(1)
    }
    inv = inv :+ row
    r = r + BigInt(1)
  }
  return inv
}

def schur_complement(mat_a: ArrayBuffer[ArrayBuffer[Double]], mat_b: ArrayBuffer[ArrayBuffer[Double]], mat_c: ArrayBuffer[ArrayBuffer[Double]], pseudo_inv: OptionMatrix): ArrayBuffer[ArrayBuffer[Double]] = {
  val a_rows: BigInt = BigInt((mat_a).size)
  val a_cols: BigInt = BigInt((mat_a((BigInt(0).toInt).toInt)).size)
  if (a_rows != a_cols) {
    throw new RuntimeException(String.valueOf("Matrix A must be square"))
  }
  if (a_rows != BigInt((mat_b).size)) {
    throw new RuntimeException(String.valueOf("Expected the same number of rows for A and B"))
  }
  if (BigInt((mat_b((BigInt(0).toInt).toInt)).size) != BigInt((mat_c((BigInt(0).toInt).toInt)).size)) {
    throw new RuntimeException(String.valueOf("Expected the same number of columns for B and C"))
  }
  var a_inv: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  if (pseudo_inv.asInstanceOf[OptionMatrix].ok) {
    a_inv = pseudo_inv.asInstanceOf[OptionMatrix].value
  } else {
    a_inv = inverse(mat_a)
  }
  val bt: ArrayBuffer[ArrayBuffer[Double]] = transpose(mat_b)
  val a_inv_b: ArrayBuffer[ArrayBuffer[Double]] = matmul(a_inv, mat_b)
  val bt_a_inv_b: ArrayBuffer[ArrayBuffer[Double]] = matmul(bt, a_inv_b)
  return mat_sub(mat_c, bt_a_inv_b)
}

def print_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    val row: ArrayBuffer[Double] = mat((i.toInt).toInt)
    while (j < BigInt((row).size)) {
      line = line + String.valueOf(row((j.toInt).toInt))
      if (j + BigInt(1) < BigInt((row).size)) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(line)
    i = i + BigInt(1)
  }
}

def main(): Any = {
  val a: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 2.0), ArrayBuffer(2.0, 1.0))
  val b: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 3.0), ArrayBuffer(3.0, 0.0))
  val c: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 1.0), ArrayBuffer(6.0, 3.0))
  val none: OptionMatrix = OptionMatrix(ArrayBuffer(), false)
  val s: ArrayBuffer[ArrayBuffer[Double]] = schur_complement(a, b, c, none)
  print_matrix(s)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
