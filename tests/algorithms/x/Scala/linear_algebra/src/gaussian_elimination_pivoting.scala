// Generated by Mochi v0.10.59 on 2025-08-07 12:41:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def panic(msg: String): Any = {
  println(msg)
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def copy_matrix(src: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((src).size)) {
    var row_src: ArrayBuffer[Double] = src((i.toInt).toInt)
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((row_src).size)) {
      row = row :+ row_src((j.toInt).toInt)
      j = j + BigInt(1)
    }
    res = res :+ row
    i = i + BigInt(1)
  }
  return res
}

def solve_linear_system(matrix: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Double] = {
  var ab: ArrayBuffer[ArrayBuffer[Double]] = copy_matrix(matrix)
  var num_rows: BigInt = BigInt((ab).size)
  var num_cols: BigInt = BigInt((ab((BigInt(0).toInt).toInt)).size) - BigInt(1)
  if (num_rows != num_cols) {
    throw new RuntimeException(String.valueOf("Matrix is not square"))
    return ArrayBuffer[Double]()
  }
  var column_num: BigInt = BigInt(0)
  while (column_num < num_rows) {
    var i: BigInt = column_num
    while (i < num_cols) {
      if (abs_float(ab((i.toInt).toInt)((column_num.toInt).toInt)) > abs_float(ab((column_num.toInt).toInt)((column_num.toInt).toInt))) {
        var temp: ArrayBuffer[Double] = ab((column_num.toInt).toInt)
        ab((column_num).toInt) = ab((i.toInt).toInt)
        ab((i).toInt) = temp
      }
      i = i + BigInt(1)
    }
    if (abs_float(ab((column_num.toInt).toInt)((column_num.toInt).toInt)) < 0.00000001) {
      throw new RuntimeException(String.valueOf("Matrix is singular"))
      return ArrayBuffer[Double]()
    }
    if (column_num != BigInt(0)) {
      i = column_num
      while (i < num_rows) {
        var factor: Double = ab((i.toInt).toInt)(((column_num - BigInt(1)).toInt).toInt) / ab(((column_num - BigInt(1)).toInt).toInt)(((column_num - BigInt(1)).toInt).toInt)
        var j: BigInt = BigInt(0)
        while (j < BigInt((ab((i.toInt).toInt)).size)) {
          ab((i).toInt)((j).toInt) = ab((i.toInt).toInt)((j.toInt).toInt) - factor * ab(((column_num - BigInt(1)).toInt).toInt)((j.toInt).toInt)
          j = j + BigInt(1)
        }
        i = i + BigInt(1)
      }
    }
    column_num = column_num + BigInt(1)
  }
  var x_lst: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var t: BigInt = BigInt(0)
  while (t < num_rows) {
    x_lst = x_lst :+ 0.0
    t = t + BigInt(1)
  }
  column_num = num_rows - BigInt(1)
  while (column_num >= BigInt(0)) {
    var x: Double = ab((column_num.toInt).toInt)((num_cols.toInt).toInt) / ab((column_num.toInt).toInt)((column_num.toInt).toInt)
    x_lst((column_num).toInt) = x
    var i: BigInt = column_num - BigInt(1)
    while (i >= BigInt(0)) {
      ab((i).toInt)((num_cols).toInt) = ab((i.toInt).toInt)((num_cols.toInt).toInt) - ab((i.toInt).toInt)((column_num.toInt).toInt) * x
      i = i - BigInt(1)
    }
    column_num = column_num - BigInt(1)
  }
  return x_lst
}

var example_matrix: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(5.0, -5.0, -3.0, 4.0, -11.0), ArrayBuffer(1.0, -4.0, 6.0, -4.0, -10.0), ArrayBuffer(-2.0, -5.0, 4.0, -5.0, -12.0), ArrayBuffer(-3.0, -3.0, 5.0, -5.0, 8.0))

var solution: ArrayBuffer[Double] = solve_linear_system(example_matrix)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Matrix:")
    println(String.valueOf(example_matrix))
    println(String.valueOf(solution))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
