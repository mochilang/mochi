// Generated by Mochi v0.10.63 on 2025-08-12 08:55:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class PowerResult(var eigenvalue: Double, var eigenvector: ArrayBuffer[Double])

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x == 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    sum = sum + a.lift((i.toInt).toInt).getOrElse(0.0) * b.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return sum
}

def mat_vec_mult(mat: ArrayBuffer[ArrayBuffer[Double]], vec: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    res = res :+ (dot(mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()), vec))
    i = i + BigInt(1)
  }
  return res
}

def norm(vec: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((vec).size)) {
    sum = sum + vec.lift((i.toInt).toInt).getOrElse(0.0) * vec.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  var root: Double = sqrtApprox(sum)
  return root
}

def normalize(vec: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val n: Double = norm(vec)
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((vec).size)) {
    res = res :+ (vec.lift((i.toInt).toInt).getOrElse(0.0) / n)
    i = i + BigInt(1)
  }
  return res
}

def power_iteration(matrix: ArrayBuffer[ArrayBuffer[Double]], vector: ArrayBuffer[Double], error_tol: Double, max_iterations: BigInt): PowerResult = {
  var v: ArrayBuffer[Double] = normalize(vector)
  var lambda_prev: Double = 0.0
  var lambda: Double = 0.0
  var err: Double = 1000000000000.0
  var iterations: BigInt = BigInt(0)
  while (err > error_tol && iterations < max_iterations) {
    val w: ArrayBuffer[Double] = mat_vec_mult(matrix, v)
    v = normalize(w)
    val mv: ArrayBuffer[Double] = mat_vec_mult(matrix, v)
    lambda = dot(v, mv)
    val denom: Double = (if (lambda != 0.0) Math.abs(lambda) else 1.0)
    err = Math.abs(lambda - lambda_prev) / denom
    lambda_prev = lambda
    iterations = iterations + BigInt(1)
  }
  return PowerResult(lambda, v)
}

val input_matrix: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(41.0, 4.0, 20.0), ArrayBuffer(4.0, 26.0, 30.0), ArrayBuffer(20.0, 30.0, 50.0))

val vector: ArrayBuffer[Double] = ArrayBuffer(41.0, 4.0, 20.0)

val result: PowerResult = power_iteration(input_matrix, vector, 0.000000000001, BigInt(100))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(result.eigenvalue))
    println(_str(result.eigenvector))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
