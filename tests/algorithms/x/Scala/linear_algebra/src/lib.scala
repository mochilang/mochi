// Generated by Mochi v0.10.59 on 2025-08-07 12:41:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Vector(var components: ArrayBuffer[Double])

case class Matrix(var data: ArrayBuffer[ArrayBuffer[Double]], var width: BigInt, var height: BigInt)

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def random_int(a: BigInt, b: BigInt): BigInt = {
  val r: BigInt = rand() % (b - a + BigInt(1))
  return a + r
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def arcsin_taylor(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var n: BigInt = BigInt(1)
  while (n < BigInt(10)) {
    val num: Double = (2.0 * n.toString.toDouble - 1.0) * (2.0 * n.toString.toDouble - 1.0) * x * x * term
    val den: Double = 2.0 * n.toString.toDouble * (2.0 * n.toString.toDouble + 1.0)
    term = num / den
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def acos_taylor(x: Double): Double = {
  return PI / 2.0 - arcsin_taylor(x)
}

def vector_len(v: Vector): BigInt = {
  return BigInt((v.asInstanceOf[Vector].components).size)
}

def vector_to_string(v: Vector): String = {
  var s: String = "("
  var i: BigInt = BigInt(0)
  while (i < BigInt((v.asInstanceOf[Vector].components).size)) {
    s = s + String.valueOf(v.asInstanceOf[Vector].components((i.toInt).toInt))
    if (i < BigInt((v.asInstanceOf[Vector].components).size) - BigInt(1)) {
      s = s + ","
    }
    i = i + BigInt(1)
  }
  s = s + ")"
  return s
}

def vector_add(a: Vector, b: Vector): Vector = {
  val size: BigInt = vector_len(a)
  if (size != vector_len(b)) {
    return Vector(ArrayBuffer())
  }
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < size) {
    res = res :+ (a.asInstanceOf[Vector].components((i.toInt).toInt) + b.asInstanceOf[Vector].components((i.toInt).toInt)).toString.toDouble
    i = i + BigInt(1)
  }
  return Vector(res)
}

def vector_sub(a: Vector, b: Vector): Vector = {
  val size: BigInt = vector_len(a)
  if (size != vector_len(b)) {
    return Vector(ArrayBuffer())
  }
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < size) {
    res = res :+ (a.asInstanceOf[Vector].components((i.toInt).toInt) - b.asInstanceOf[Vector].components((i.toInt).toInt)).toString.toDouble
    i = i + BigInt(1)
  }
  return Vector(res)
}

def vector_eq(a: Vector, b: Vector): Boolean = {
  if (vector_len(a) != vector_len(b)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < vector_len(a)) {
    if (a.asInstanceOf[Vector].components((i.toInt).toInt) != b.asInstanceOf[Vector].components((i.toInt).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def vector_mul_scalar(v: Vector, s: Double): Vector = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < vector_len(v)) {
    res = res :+ v.asInstanceOf[Vector].components((i.toInt).toInt) * s
    i = i + BigInt(1)
  }
  return Vector(res)
}

def vector_dot(a: Vector, b: Vector): Double = {
  val size: BigInt = vector_len(a)
  if (size != vector_len(b)) {
    return 0.0
  }
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < size) {
    sum = sum + a.asInstanceOf[Vector].components((i.toInt).toInt) * b.asInstanceOf[Vector].components((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return sum
}

def vector_copy(v: Vector): Vector = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < vector_len(v)) {
    res = res :+ v.asInstanceOf[Vector].components((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return Vector(res)
}

def vector_component(v: Vector, idx: BigInt): Double = {
  return v.asInstanceOf[Vector].components((idx.toInt).toInt)
}

def vector_change_component(v: Vector, pos: BigInt, value: Double): Vector = {
  var comps: ArrayBuffer[Double] = v.asInstanceOf[Vector].components
  comps((pos).toInt) = value
  return Vector(comps)
}

def vector_euclidean_length(v: Vector): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((v.asInstanceOf[Vector].components).size)) {
    sum = sum + v.asInstanceOf[Vector].components((i.toInt).toInt) * v.asInstanceOf[Vector].components((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var result: Double = sqrtApprox(sum)
  return result
}

def vector_angle(a: Vector, b: Vector, deg: Boolean): Double = {
  val num: Double = vector_dot(a, b)
  val den: Double = vector_euclidean_length(a) * vector_euclidean_length(b)
  var ang: Double = acos_taylor(num / den)
  if (deg) {
    ang = ang * 180.0 / PI
  }
  return ang
}

def zero_vector(d: BigInt): Vector = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < d) {
    res = res :+ 0.0
    i = i + BigInt(1)
  }
  return Vector(res)
}

def unit_basis_vector(d: BigInt, pos: BigInt): Vector = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < d) {
    if (i == pos) {
      res = res :+ 1.0
    } else {
      res = res :+ 0.0
    }
    i = i + BigInt(1)
  }
  return Vector(res)
}

def axpy(s: Double, x: Vector, y: Vector): Vector = {
  return vector_add(vector_mul_scalar(x, s), y)
}

def random_vector(n: BigInt, a: BigInt, b: BigInt): Vector = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res :+ (random_int(a, b)).toString.toDouble
    i = i + BigInt(1)
  }
  return Vector(res)
}

def matrix_to_string(m: Matrix): String = {
  var ans: String = ""
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].height) {
    ans = ans + "|"
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].width) {
      ans = ans + String.valueOf(m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt))
      if (j < m.asInstanceOf[Matrix].width - BigInt(1)) {
        ans = ans + ","
      }
      j = j + BigInt(1)
    }
    ans = ans + "|\n"
    i = i + BigInt(1)
  }
  return ans
}

def matrix_add(a: Matrix, b: Matrix): Matrix = {
  if ((a.asInstanceOf[Matrix].width != b.asInstanceOf[Matrix].width || a.asInstanceOf[Matrix].height != b.asInstanceOf[Matrix].height).asInstanceOf[Boolean]) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].height) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < a.asInstanceOf[Matrix].width) {
      row = row :+ (a.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) + b.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)).toString.toDouble
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return Matrix(mat, a.asInstanceOf[Matrix].width, a.asInstanceOf[Matrix].height)
}

def matrix_sub(a: Matrix, b: Matrix): Matrix = {
  if ((a.asInstanceOf[Matrix].width != b.asInstanceOf[Matrix].width || a.asInstanceOf[Matrix].height != b.asInstanceOf[Matrix].height).asInstanceOf[Boolean]) {
    return Matrix(ArrayBuffer(), BigInt(0), BigInt(0))
  }
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < a.asInstanceOf[Matrix].height) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < a.asInstanceOf[Matrix].width) {
      row = row :+ (a.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) - b.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)).toString.toDouble
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return Matrix(mat, a.asInstanceOf[Matrix].width, a.asInstanceOf[Matrix].height)
}

def matrix_mul_vector(m: Matrix, v: Vector): Vector = {
  if (BigInt((v.asInstanceOf[Vector].components).size) != m.asInstanceOf[Matrix].width) {
    return Vector(ArrayBuffer())
  }
  var res: Vector = zero_vector(m.asInstanceOf[Matrix].height)
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].height) {
    var sum: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].width) {
      sum = sum + m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) * v.asInstanceOf[Vector].components((j.toInt).toInt)
      j = j + BigInt(1)
    }
    res = vector_change_component(res, i, sum)
    i = i + BigInt(1)
  }
  return res
}

def matrix_mul_scalar(m: Matrix, s: Double): Matrix = {
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].height) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < m.asInstanceOf[Matrix].width) {
      row = row :+ m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt) * s
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return Matrix(mat, m.asInstanceOf[Matrix].width, m.asInstanceOf[Matrix].height)
}

def matrix_component(m: Matrix, x: BigInt, y: BigInt): Double = {
  return m.asInstanceOf[Matrix].data((x.toInt).toInt)((y.toInt).toInt)
}

def matrix_change_component(m: Matrix, x: BigInt, y: BigInt, value: Double): Matrix = {
  var data: ArrayBuffer[ArrayBuffer[Double]] = m.asInstanceOf[Matrix].data
  data((x).toInt)((y).toInt) = value
  return Matrix(data, m.asInstanceOf[Matrix].width, m.asInstanceOf[Matrix].height)
}

def matrix_minor(m: Matrix, x: BigInt, y: BigInt): Double = {
  if (m.asInstanceOf[Matrix].height != m.asInstanceOf[Matrix].width) {
    return 0.0
  }
  var minor: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m.asInstanceOf[Matrix].height) {
    if (i != x) {
      var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var j: BigInt = BigInt(0)
      while (j < m.asInstanceOf[Matrix].width) {
        if (j != y) {
          row = row :+ m.asInstanceOf[Matrix].data((i.toInt).toInt)((j.toInt).toInt)
        }
        j = j + BigInt(1)
      }
      minor = minor :+ row
    }
    i = i + BigInt(1)
  }
  val sub: Matrix = Matrix(minor, m.asInstanceOf[Matrix].width - BigInt(1), m.asInstanceOf[Matrix].height - BigInt(1))
  return matrix_determinant(sub)
}

def matrix_cofactor(m: Matrix, x: BigInt, y: BigInt): Double = {
  val sign: Double = (if ((x + y) % BigInt(2) == BigInt(0)) 1.0 else -1.0)
  return sign * matrix_minor(m, x, y)
}

def matrix_determinant(m: Matrix): Double = {
  if (m.asInstanceOf[Matrix].height != m.asInstanceOf[Matrix].width) {
    return 0.0
  }
  if (m.asInstanceOf[Matrix].height == BigInt(0)) {
    return 0.0
  }
  if (m.asInstanceOf[Matrix].height == BigInt(1)) {
    return m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt)
  }
  if (m.asInstanceOf[Matrix].height == BigInt(2)) {
    return (m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) * m.asInstanceOf[Matrix].data((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) - m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) * m.asInstanceOf[Matrix].data((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt)).toString.toDouble
  }
  var sum: Double = 0.0
  var y: BigInt = BigInt(0)
  while (y < m.asInstanceOf[Matrix].width) {
    sum = sum + m.asInstanceOf[Matrix].data((BigInt(0).toInt).toInt)((y.toInt).toInt) * matrix_cofactor(m, BigInt(0), y)
    y = y + BigInt(1)
  }
  return sum
}

def square_zero_matrix(n: BigInt): Matrix = {
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ 0.0
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return Matrix(mat, n, n)
}

def random_matrix(w: BigInt, h: BigInt, a: BigInt, b: BigInt): Matrix = {
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < w) {
      row = row :+ (random_int(a, b)).toString.toDouble
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return Matrix(mat, w, h)
}

def main(): Any = {
  val v1: Vector = Vector(ArrayBuffer(1.0, 2.0, 3.0))
  val v2: Vector = Vector(ArrayBuffer(4.0, 5.0, 6.0))
  println(vector_to_string(vector_add(v1, v2)))
  println(String.valueOf(vector_dot(v1, v2)))
  println(String.valueOf(vector_euclidean_length(v1)))
  val m: Matrix = Matrix(ArrayBuffer(ArrayBuffer(1.0, 2.0), ArrayBuffer(3.0, 4.0)), BigInt(2), BigInt(2))
  println(String.valueOf(matrix_determinant(m)))
}

val PI: Double = 3.141592653589793

var seed: BigInt = BigInt(123456789)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
