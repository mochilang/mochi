// Generated by Mochi v0.10.63 on 2025-08-12 08:55:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rank_of_matrix(matrix: ArrayBuffer[ArrayBuffer[Double]]): BigInt = {
  val rows: BigInt = BigInt((matrix).size)
  if (rows == BigInt(0)) {
    return BigInt(0)
  }
  val columns: BigInt = (if (BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) > BigInt(0)) BigInt((matrix.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) else BigInt(0))
  var rank: BigInt = (if (rows < columns) rows else columns)
  var row: BigInt = BigInt(0)
  val _br0 = new Breaks
  _br0.breakable {
    while (row < rank) {
      if (matrix.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0) != 0.0) {
        var col: BigInt = row + BigInt(1)
        while (col < rows) {
          val mult: Double = matrix.lift((col.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0) / matrix.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0)
          var i: BigInt = row
          while (i < columns) {
            matrix((col).toInt)((i).toInt) = matrix.lift((col.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0) - mult * matrix.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((i.toInt).toInt).getOrElse(0.0)
            i = i + BigInt(1)
          }
          col = col + BigInt(1)
        }
      } else {
        var reduce: Boolean = true
        var i: BigInt = row + BigInt(1)
        val _br3 = new Breaks
        _br3.breakable {
          while (i < rows) {
            if (matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0) != 0.0) {
              val temp: ArrayBuffer[Double] = matrix.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]())
              matrix((row).toInt) = matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
              matrix((i).toInt) = temp
              reduce = false
              _br3.break()
            }
            i = i + BigInt(1)
          }
        }
        if (reduce) {
          rank = rank - BigInt(1)
          var j: BigInt = BigInt(0)
          while (j < rows) {
            matrix((j).toInt)((row).toInt) = matrix.lift((j.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((rank.toInt).toInt).getOrElse(0.0)
            j = j + BigInt(1)
          }
        }
        row = row - BigInt(1)
      }
      row = row + BigInt(1)
    }
  }
  return rank
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
