// Generated by Mochi v0.10.63 on 2025-08-12 08:55:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def contains_int(xs: ArrayBuffer[BigInt], x: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) == x) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if (ch == sep) {
      res = res :+ (current)
      current = ""
    } else {
      current = current + ch
    }
    i = i + BigInt(1)
  }
  res = res :+ (current)
  return res
}

def pow_int_float(base: BigInt, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base.toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def points_to_polynomial(coordinates: ArrayBuffer[ArrayBuffer[BigInt]]): String = {
  if (BigInt((coordinates).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("The program cannot work out a fitting polynomial."))
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((coordinates).size)) {
    if (BigInt((coordinates.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) != BigInt(2)) {
      throw new RuntimeException(String.valueOf("The program cannot work out a fitting polynomial."))
    }
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt(0)
  while (j < BigInt((coordinates).size)) {
    var k: BigInt = j + BigInt(1)
    while (k < BigInt((coordinates).size)) {
      if ((coordinates.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) == coordinates.lift((k.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) && coordinates.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) == coordinates.lift((k.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).asInstanceOf[Boolean]) {
        throw new RuntimeException(String.valueOf("The program cannot work out a fitting polynomial."))
      }
      k = k + BigInt(1)
    }
    j = j + BigInt(1)
  }
  var set_x: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((coordinates).size)) {
    val x_val: BigInt = coordinates.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    if (!contains_int(set_x, x_val)) {
      set_x = set_x :+ (x_val)
    }
    i = i + BigInt(1)
  }
  if (BigInt((set_x).size) == BigInt(1)) {
    return "x=" + _str(coordinates.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)))
  }
  if (BigInt((set_x).size) != BigInt((coordinates).size)) {
    throw new RuntimeException(String.valueOf("The program cannot work out a fitting polynomial."))
  }
  val n: BigInt = BigInt((coordinates).size)
  var matrix: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var row: BigInt = BigInt(0)
  while (row < n) {
    var line: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var col: BigInt = BigInt(0)
    while (col < n) {
      val power: Double = pow_int_float(coordinates.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), n - (col + BigInt(1)))
      line = line :+ (power)
      col = col + BigInt(1)
    }
    matrix = matrix :+ (line)
    row = row + BigInt(1)
  }
  var vector: ArrayBuffer[Double] = ArrayBuffer[Double]()
  row = BigInt(0)
  while (row < n) {
    vector = vector :+ ((coordinates.lift((row.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).toDouble)
    row = row + BigInt(1)
  }
  var count: BigInt = BigInt(0)
  while (count < n) {
    var number: BigInt = BigInt(0)
    while (number < n) {
      if (count != number) {
        val fraction: Double = matrix.lift((number.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((count.toInt).toInt).getOrElse(0.0) / matrix.lift((count.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((count.toInt).toInt).getOrElse(0.0)
        var cc: BigInt = BigInt(0)
        while (cc < n) {
          matrix((number).toInt)((cc).toInt) = matrix.lift((number.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((cc.toInt).toInt).getOrElse(0.0) - matrix.lift((count.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((cc.toInt).toInt).getOrElse(0.0) * fraction
          cc = cc + BigInt(1)
        }
        vector((number).toInt) = vector.lift((number.toInt).toInt).getOrElse(0.0) - vector.lift((count.toInt).toInt).getOrElse(0.0) * fraction
      }
      number = number + BigInt(1)
    }
    count = count + BigInt(1)
  }
  var solution: ArrayBuffer[String] = ArrayBuffer[String]()
  count = BigInt(0)
  while (count < n) {
    val value: Double = vector.lift((count.toInt).toInt).getOrElse(0.0) / matrix.lift((count.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((count.toInt).toInt).getOrElse(0.0)
    solution = solution :+ ((_str(value)).toString)
    count = count + BigInt(1)
  }
  var solved: String = "f(x)="
  count = BigInt(0)
  while (count < n) {
    var parts: ArrayBuffer[String] = ArrayBuffer(solution.lift((count.toInt).toInt).getOrElse("").split("e"): _*)
    var coeff: String = solution.lift((count.toInt).toInt).getOrElse("")
    if (BigInt((parts).size) > BigInt(1)) {
      coeff = parts.lift((BigInt(0).toInt).toInt).getOrElse("") + "*10^" + parts.lift((BigInt(1).toInt).toInt).getOrElse("")
    }
    solved = solved + "x^" + _str(n - (count + BigInt(1))) + "*" + coeff
    if (count + BigInt(1) != n) {
      solved = solved + "+"
    }
    count = count + BigInt(1)
  }
  return solved
}

def main(): Any = {
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(0)), ArrayBuffer(BigInt(2), BigInt(0)), ArrayBuffer(BigInt(3), BigInt(0)))))
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(1)), ArrayBuffer(BigInt(3), BigInt(1)))))
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(4)), ArrayBuffer(BigInt(3), BigInt(9)))))
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(3)), ArrayBuffer(BigInt(2), BigInt(6)), ArrayBuffer(BigInt(3), BigInt(11)))))
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), -BigInt(3)), ArrayBuffer(BigInt(2), -BigInt(6)), ArrayBuffer(BigInt(3), -BigInt(11)))))
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer(BigInt(1), BigInt(3)))))
  println(points_to_polynomial(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(5)), ArrayBuffer(BigInt(2), BigInt(2)), ArrayBuffer(BigInt(3), BigInt(9)))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
