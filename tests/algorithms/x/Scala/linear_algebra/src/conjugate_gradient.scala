// Generated by Mochi v0.10.63 on 2025-08-12 08:54:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def zeros(n: BigInt): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res :+ (0.0)
    i = i + BigInt(1)
  }
  return res
}

def dot(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    sum = sum + a.lift((i.toInt).toInt).getOrElse(0.0) * b.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  return sum
}

def mat_vec_mul(m: ArrayBuffer[ArrayBuffer[Double]], v: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((m).size)) {
    var s: Double = 0.0
    var j: BigInt = BigInt(0)
    while (j < BigInt((m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      s = s + m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * v.lift((j.toInt).toInt).getOrElse(0.0)
      j = j + BigInt(1)
    }
    res = res :+ (s)
    i = i + BigInt(1)
  }
  return res
}

def vec_add(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    res = res :+ (a.lift((i.toInt).toInt).getOrElse(0.0) + b.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return res
}

def vec_sub(a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    res = res :+ (a.lift((i.toInt).toInt).getOrElse(0.0) - b.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return res
}

def scalar_mul(s: Double, v: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((v).size)) {
    res = res :+ (s * v.lift((i.toInt).toInt).getOrElse(0.0))
    i = i + BigInt(1)
  }
  return res
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def norm(v: ArrayBuffer[Double]): Double = {
  return sqrtApprox(dot(v, v))
}

def conjugate_gradient(A: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[Double], max_iterations: BigInt, tol: Double): ArrayBuffer[Double] = {
  val n: BigInt = BigInt((b).size)
  var x: ArrayBuffer[Double] = zeros(n)
  var r: ArrayBuffer[Double] = vec_sub(b, mat_vec_mul(A, x))
  var p: ArrayBuffer[Double] = r
  var rs_old: Double = dot(r, r)
  var i: BigInt = BigInt(0)
  val _br8 = new Breaks
  _br8.breakable {
    while (i < max_iterations) {
      val Ap: ArrayBuffer[Double] = mat_vec_mul(A, p)
      val alpha: Double = rs_old / dot(p, Ap)
      x = vec_add(x, scalar_mul(alpha, p))
      r = vec_sub(r, scalar_mul(alpha, Ap))
      val rs_new: Double = dot(r, r)
      if (sqrtApprox(rs_new) < tol) {
        _br8.break()
      }
      val beta: Double = rs_new / rs_old
      p = vec_add(r, scalar_mul(beta, p))
      rs_old = rs_new
      i = i + BigInt(1)
    }
  }
  return x
}

val A: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(8.73256573, -5.02034289, -2.68709226), ArrayBuffer(-5.02034289, 3.78188322, 0.91980451), ArrayBuffer(-2.68709226, 0.91980451, 1.94746467))

val b: ArrayBuffer[Double] = ArrayBuffer(-5.80872761, 3.23807431, 1.95381422)

val x: ArrayBuffer[Double] = conjugate_gradient(A, b, BigInt(1000), 0.00000001)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(x.lift((BigInt(0).toInt).toInt).getOrElse(0.0)))
    println(_str(x.lift((BigInt(1).toInt).toInt).getOrElse(0.0)))
    println(_str(x.lift((BigInt(2).toInt).toInt).getOrElse(0.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
