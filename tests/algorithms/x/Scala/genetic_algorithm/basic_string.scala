// Generated by Mochi v0.10.59 on 2025-08-07 11:13:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class PairString(var first: String, var second: String)

def evaluate(item: String, target: String): BigInt = {
  var score: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((item).size) && i < BigInt((target).size)) {
    if (item.slice((i).toInt, (i + 1).toInt) == target.slice((i).toInt, (i + 1).toInt)) {
      score = score + 1
    }
    i = i + 1
  }
  return score
}

def crossover(parent1: String, parent2: String): PairString = {
  val cut: BigInt = BigInt((parent1).size) / 2
  val child1: String = parent1.slice((0).toInt, (cut).toInt) + parent2.slice((cut).toInt, (BigInt((parent2).size)).toInt)
  val child2: String = parent2.slice((0).toInt, (cut).toInt) + parent1.slice((cut).toInt, (BigInt((parent1).size)).toInt)
  return PairString(child1, child2)
}

def mutate(child: String, genes: ArrayBuffer[String]): String = {
  if (BigInt((child).size) == 0) {
    return child
  }
  val gene: String = genes((0.toInt).toInt)
  return child.slice((0).toInt, (BigInt((child).size) - 1).toInt) + gene
}

def main(): Any = {
  println(String.valueOf(evaluate("Helxo Worlx", "Hello World")))
  val pair: PairString = crossover("123456", "abcdef")
  println(pair.asInstanceOf[PairString].first)
  println(pair.asInstanceOf[PairString].second)
  val mut: String = mutate("123456", ArrayBuffer("A", "B", "C", "D", "E", "F"))
  println(mut)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
