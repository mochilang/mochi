// Generated by Mochi v0.10.59 on 2025-08-07 12:42:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pivot(t: ArrayBuffer[ArrayBuffer[Double]], row: BigInt, col: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var pivotRow: ArrayBuffer[Double] = ArrayBuffer[Double]()
  val pivotVal: Double = t((row.toInt).toInt)((col.toInt).toInt)
  for (j <- (BigInt(0)).toInt until (BigInt((t((row.toInt).toInt)).size)).toInt) {
    pivotRow = pivotRow :+ t((row.toInt).toInt)((j.toInt).toInt) / pivotVal
  }
  t((row).toInt) = pivotRow
  for (i <- (BigInt(0)).toInt until (BigInt((t).size)).toInt) {
    if (i != row) {
      val factor: Double = t((i.toInt).toInt)((col.toInt).toInt)
      var newRow: ArrayBuffer[Double] = ArrayBuffer[Double]()
      for (j <- (BigInt(0)).toInt until (BigInt((t((i.toInt).toInt)).size)).toInt) {
        val value: Double = t((i.toInt).toInt)((j.toInt).toInt) - factor * pivotRow((j.toInt).toInt)
        newRow = newRow :+ value
      }
      t((i).toInt) = newRow
    }
  }
  return t
}

def findPivot(t: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[BigInt] = {
  var col: BigInt = BigInt(0)
  var minVal: Double = 0.0
  for (j <- (BigInt(0)).toInt until (BigInt((t((BigInt(0).toInt).toInt)).size) - BigInt(1)).toInt) {
    val v: Double = t((BigInt(0).toInt).toInt)((j.toInt).toInt)
    if (v < minVal) {
      minVal = v
      col = BigInt(j.toString.toDouble.toInt)
    }
  }
  if (minVal >= 0.0) {
    return ArrayBuffer(BigInt((-BigInt(1)).toString.toDouble.toInt), BigInt((-BigInt(1)).toString.toDouble.toInt))
  }
  var row: BigInt = -BigInt(1)
  var minRatio: Double = 0.0
  var first: Boolean = true
  for (i <- (BigInt(1)).toInt until (BigInt((t).size)).toInt) {
    val coeff: Double = t((i.toInt).toInt)((col.toInt).toInt)
    if (coeff > 0.0) {
      val rhs: Double = t((i.toInt).toInt)(((BigInt((t((i.toInt).toInt)).size) - BigInt(1)).toInt).toInt)
      val ratio: Double = rhs / coeff
      if ((first || ratio < minRatio).asInstanceOf[Boolean]) {
        minRatio = ratio
        row = BigInt(i.toString.toDouble.toInt)
        first = false
      }
    }
  }
  return ArrayBuffer(row, col)
}

def interpret(t: ArrayBuffer[ArrayBuffer[Double]], nVars: BigInt): scala.collection.mutable.Map[String,Double] = {
  val lastCol: BigInt = BigInt((t((BigInt(0).toInt).toInt)).size) - BigInt(1)
  var p: Double = t((BigInt(0).toInt).toInt)((lastCol.toInt).toInt)
  if (p < 0.0) {
    p = -p
  }
  var result: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  result.update("P", p)
  for (i <- (BigInt(0)).toInt until (nVars).toInt) {
    var nzRow: BigInt = -BigInt(1)
    var nzCount: BigInt = BigInt(0)
    for (r <- (BigInt(0)).toInt until (BigInt((t).size)).toInt) {
      val `val`: Double = t((r.toInt).toInt)((i.toInt).toInt)
      if (`val` != 0.0) {
        nzCount = nzCount + BigInt(1)
        nzRow = BigInt(r.toString.toDouble.toInt)
      }
    }
    if ((nzCount == BigInt(1) && t((nzRow.toInt).toInt)((i.toInt).toInt) == 1.0).asInstanceOf[Boolean]) {
      result.update("x" + String.valueOf(i + BigInt(1)), t((nzRow.toInt).toInt)((lastCol.toInt).toInt))
    }
  }
  return result
}

def simplex(tab: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var t: ArrayBuffer[ArrayBuffer[Double]] = tab
  val _br7 = new Breaks
  _br7.breakable {
    while (true) {
      val p: ArrayBuffer[BigInt] = findPivot(t)
      val row: BigInt = p((BigInt(0).toInt).toInt)
      val col: BigInt = p((BigInt(1).toInt).toInt)
      if (row < BigInt(0)) {
        _br7.break()
      }
      t = pivot(t, row, col)
    }
  }
  return t
}

var tableau: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(-1.0, -1.0, 0.0, 0.0, 0.0), ArrayBuffer(1.0, 3.0, 1.0, 0.0, 4.0), ArrayBuffer(3.0, 1.0, 0.0, 1.0, 4.0))

var finalTab: ArrayBuffer[ArrayBuffer[Double]] = simplex(tableau)

val res: scala.collection.mutable.Map[String,Double] = interpret(finalTab, BigInt(2))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("P: " + String.valueOf(res.getOrElse("P", 0.0).asInstanceOf[Double]))
    for (i <- (BigInt(0)).toInt until (BigInt(2)).toInt) {
      val key: String = "x" + String.valueOf(i + BigInt(1))
      if ((res.contains(key)).asInstanceOf[Boolean]) {
        println(key + ": " + String.valueOf(res.getOrElse(key.toString, 0.0).asInstanceOf[Double]))
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
