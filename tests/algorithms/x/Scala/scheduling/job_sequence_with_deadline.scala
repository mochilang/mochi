// Generated by Mochi v0.10.63 on 2025-08-11 16:31:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def max_tasks(tasks_info: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var order: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((tasks_info).size)) {
    order = order :+ (i)
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((order).size)
  i = BigInt(0)
  while (i < n) {
    var j: BigInt = i + BigInt(1)
    while (j < n) {
      if (tasks_info.lift((order.lift((j.toInt).toInt).getOrElse(null).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(null) > tasks_info.lift((order.lift((i.toInt).toInt).getOrElse(null).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = order.lift((i.toInt).toInt).getOrElse(null)
        order((i).toInt) = order.lift((j.toInt).toInt).getOrElse(null)
        order((j).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var pos: BigInt = BigInt(1)
  i = BigInt(0)
  while (i < n) {
    val id: BigInt = order.lift((i.toInt).toInt).getOrElse(null)
    val deadline: BigInt = tasks_info.lift((id.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(null)
    if (deadline >= pos) {
      result = result :+ (id)
    }
    i = i + BigInt(1)
    pos = pos + BigInt(1)
  }
  return result
}

def main(): Any = {
  val ex1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(4), BigInt(20)), ArrayBuffer(BigInt(1), BigInt(10)), ArrayBuffer(BigInt(1), BigInt(40)), ArrayBuffer(BigInt(1), BigInt(30)))
  val ex2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(10)), ArrayBuffer(BigInt(2), BigInt(20)), ArrayBuffer(BigInt(3), BigInt(30)), ArrayBuffer(BigInt(2), BigInt(40)))
  println(_str(max_tasks(ex1)))
  println(_str(max_tasks(ex2)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
