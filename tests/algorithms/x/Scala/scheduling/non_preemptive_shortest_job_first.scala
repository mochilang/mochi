// Generated by Mochi v0.10.63 on 2025-08-11 16:31:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def calculate_waitingtime(arrival_time: ArrayBuffer[BigInt], burst_time: ArrayBuffer[BigInt], no_of_processes: BigInt): ArrayBuffer[BigInt] = {
  var waiting_time: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var remaining_time: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < no_of_processes) {
    waiting_time = waiting_time :+ (BigInt(0))
    remaining_time = remaining_time :+ (burst_time.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var completed: BigInt = BigInt(0)
  var total_time: BigInt = BigInt(0)
  while (completed != no_of_processes) {
    var ready_process: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var target_process: BigInt = -BigInt(1)
    var j: BigInt = BigInt(0)
    while (j < no_of_processes) {
      if ((arrival_time.lift((j.toInt).toInt).getOrElse(null) <= total_time && remaining_time.lift((j.toInt).toInt).getOrElse(null) > BigInt(0)).asInstanceOf[Boolean]) {
        ready_process = ready_process :+ (j)
      }
      j = j + BigInt(1)
    }
    if (BigInt((ready_process).size) > BigInt(0)) {
      target_process = ready_process.lift((BigInt(0).toInt).toInt).getOrElse(null)
      var k: BigInt = BigInt(0)
      while (k < BigInt((ready_process).size)) {
        val idx: BigInt = ready_process.lift((k.toInt).toInt).getOrElse(null)
        if (remaining_time.lift((idx.toInt).toInt).getOrElse(null) < remaining_time.lift((target_process.toInt).toInt).getOrElse(null)) {
          target_process = idx
        }
        k = k + BigInt(1)
      }
      total_time = total_time + burst_time.lift((target_process.toInt).toInt).getOrElse(null)
      completed = completed + BigInt(1)
      remaining_time((target_process).toInt) = BigInt(0)
      waiting_time((target_process).toInt) = total_time - arrival_time.lift((target_process.toInt).toInt).getOrElse(null) - burst_time.lift((target_process.toInt).toInt).getOrElse(null)
    } else {
      total_time = total_time + BigInt(1)
    }
  }
  return waiting_time
}

def calculate_turnaroundtime(burst_time: ArrayBuffer[BigInt], no_of_processes: BigInt, waiting_time: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var turn_around_time: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < no_of_processes) {
    turn_around_time = turn_around_time :+ (burst_time.lift((i.toInt).toInt).getOrElse(null) + waiting_time.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return turn_around_time
}

def average(values: ArrayBuffer[BigInt]): Double = {
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((values).size)) {
    total = total + values.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  return total.toString.toDouble / (BigInt((values).size)).toDouble
}

val no_of_processes: BigInt = BigInt(4)

val burst_time: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(5), BigInt(3), BigInt(7))

val arrival_time: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0))

val waiting_time: ArrayBuffer[BigInt] = calculate_waitingtime(arrival_time, burst_time, no_of_processes)

val turn_around_time: ArrayBuffer[BigInt] = calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)

var i: BigInt = BigInt(0)

val avg_wait: Double = average(waiting_time)

val avg_turn: Double = average(turn_around_time)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("[TEST CASE 01]")
    println("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")
    while (i < no_of_processes) {
      val pid: BigInt = i + BigInt(1)
      println(_str(pid) + "\t" + _str(burst_time.lift((i.toInt).toInt).getOrElse(null)) + "\t\t\t" + _str(arrival_time.lift((i.toInt).toInt).getOrElse(null)) + "\t\t\t\t" + _str(waiting_time.lift((i.toInt).toInt).getOrElse(null)) + "\t\t\t\t" + _str(turn_around_time.lift((i.toInt).toInt).getOrElse(null)))
      i = i + BigInt(1)
    }
    println("\nAverage waiting time = " + _str(avg_wait))
    println("Average turnaround time = " + _str(avg_turn))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
