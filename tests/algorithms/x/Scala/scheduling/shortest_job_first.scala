// Generated by Mochi v0.10.63 on 2025-08-11 16:31:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def calculate_waitingtime(arrival_time: ArrayBuffer[BigInt], burst_time: ArrayBuffer[BigInt], no_of_processes: BigInt): ArrayBuffer[BigInt] = {
  var remaining_time: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < no_of_processes) {
    remaining_time = remaining_time :+ (burst_time.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var waiting_time: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < no_of_processes) {
    waiting_time = waiting_time :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var complete: BigInt = BigInt(0)
  var increment_time: BigInt = BigInt(0)
  var minm: BigInt = BigInt(1000000000)
  var short: BigInt = BigInt(0)
  var check: Boolean = false
  val _ct2 = new Breaks
  while (complete != no_of_processes) {
    _ct2.breakable {
      var j: BigInt = BigInt(0)
      while (j < no_of_processes) {
        if (((arrival_time.lift((j.toInt).toInt).getOrElse(null) <= increment_time && remaining_time.lift((j.toInt).toInt).getOrElse(null) > BigInt(0)).asInstanceOf[Boolean] && remaining_time.lift((j.toInt).toInt).getOrElse(null) < minm).asInstanceOf[Boolean]) {
          minm = remaining_time.lift((j.toInt).toInt).getOrElse(null)
          short = j
          check = true
        }
        j = j + BigInt(1)
      }
      if (!check) {
        increment_time = increment_time + BigInt(1)
        _ct2.break()
      }
      remaining_time((short).toInt) = remaining_time.lift((short.toInt).toInt).getOrElse(null) - BigInt(1)
      minm = remaining_time.lift((short.toInt).toInt).getOrElse(null)
      if (minm == BigInt(0)) {
        minm = BigInt(1000000000)
      }
      if (remaining_time.lift((short.toInt).toInt).getOrElse(null) == BigInt(0)) {
        complete = complete + BigInt(1)
        check = false
        val finish_time: BigInt = increment_time + BigInt(1)
        val finar: BigInt = finish_time - arrival_time.lift((short.toInt).toInt).getOrElse(null)
        waiting_time((short).toInt) = finar - burst_time.lift((short.toInt).toInt).getOrElse(null)
        if (waiting_time.lift((short.toInt).toInt).getOrElse(null) < BigInt(0)) {
          waiting_time((short).toInt) = BigInt(0)
        }
      }
      increment_time = increment_time + BigInt(1)
    }
  }
  return waiting_time
}

def calculate_turnaroundtime(burst_time: ArrayBuffer[BigInt], no_of_processes: BigInt, waiting_time: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var turn_around_time: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < no_of_processes) {
    turn_around_time = turn_around_time :+ (burst_time.lift((i.toInt).toInt).getOrElse(null) + waiting_time.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return turn_around_time
}

def to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def calculate_average_times(waiting_time: ArrayBuffer[BigInt], turn_around_time: ArrayBuffer[BigInt], no_of_processes: BigInt): Any = {
  var total_waiting_time: BigInt = BigInt(0)
  var total_turn_around_time: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < no_of_processes) {
    total_waiting_time = total_waiting_time + waiting_time.lift((i.toInt).toInt).getOrElse(null)
    total_turn_around_time = total_turn_around_time + turn_around_time.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  val avg_wait: BigInt = BigInt(((total_waiting_time.toString()).toDouble).toString.head.asDigit) / BigInt(((no_of_processes.toString()).toDouble).toString.head.asDigit)
  val avg_turn: BigInt = BigInt(((total_turn_around_time.toString()).toDouble).toString.head.asDigit) / BigInt(((no_of_processes.toString()).toDouble).toString.head.asDigit)
  println("Average waiting time = " + _str(avg_wait))
  println("Average turn around time = " + _str(avg_turn))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(calculate_waitingtime(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(3), BigInt(3), BigInt(5), BigInt(1)), BigInt(4)))
    println(calculate_waitingtime(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(1)), BigInt(3)))
    println(calculate_waitingtime(ArrayBuffer(BigInt(2), BigInt(3)), ArrayBuffer(BigInt(5), BigInt(1)), BigInt(2)))
    println(calculate_turnaroundtime(ArrayBuffer(BigInt(3), BigInt(3), BigInt(5), BigInt(1)), BigInt(4), ArrayBuffer(BigInt(0), BigInt(3), BigInt(5), BigInt(0))))
    println(calculate_turnaroundtime(ArrayBuffer(BigInt(3), BigInt(3)), BigInt(2), ArrayBuffer(BigInt(0), BigInt(3))))
    println(calculate_turnaroundtime(ArrayBuffer(BigInt(8), BigInt(10), BigInt(1)), BigInt(3), ArrayBuffer(BigInt(1), BigInt(0), BigInt(3))))
    calculate_average_times(ArrayBuffer(BigInt(0), BigInt(3), BigInt(5), BigInt(0)), ArrayBuffer(BigInt(3), BigInt(6), BigInt(10), BigInt(1)), BigInt(4))
    calculate_average_times(ArrayBuffer(BigInt(2), BigInt(3)), ArrayBuffer(BigInt(3), BigInt(6)), BigInt(2))
    calculate_average_times(ArrayBuffer(BigInt(10), BigInt(4), BigInt(3)), ArrayBuffer(BigInt(2), BigInt(7), BigInt(6)), BigInt(3))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
