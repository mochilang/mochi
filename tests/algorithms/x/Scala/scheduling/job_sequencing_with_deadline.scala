// Generated by Mochi v0.10.63 on 2025-08-11 16:31:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Job(var id: BigInt, var deadline: BigInt, var profit: BigInt)

def sort_jobs_by_profit(jobs: ArrayBuffer[Job]): ArrayBuffer[Job] = {
  var js: ArrayBuffer[Job] = jobs
  var i: BigInt = BigInt(0)
  while (i < BigInt((js).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((js).size) - i - BigInt(1)) {
      val a: Job = js.lift((j.toInt).toInt).getOrElse(null)
      val b: Job = js.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)
      if (a.asInstanceOf[Job].profit < b.asInstanceOf[Job].profit) {
        js((j).toInt) = b
        js((j + BigInt(1)).toInt) = a
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return js
}

def max_deadline(jobs: ArrayBuffer[Job]): BigInt = {
  var max_d: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((jobs).size)) {
    val job: Job = jobs.lift((i.toInt).toInt).getOrElse(null)
    val d: BigInt = job.asInstanceOf[Job].deadline
    if (d > max_d) {
      max_d = d
    }
    i = i + BigInt(1)
  }
  return max_d
}

def job_sequencing_with_deadlines(jobs: ArrayBuffer[Job]): ArrayBuffer[BigInt] = {
  var js: ArrayBuffer[Job] = sort_jobs_by_profit(jobs)
  val max_d: BigInt = max_deadline(js)
  var time_slots: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var t: BigInt = BigInt(0)
  while (t < max_d) {
    time_slots = time_slots :+ (BigInt(-1))
    t = t + BigInt(1)
  }
  var count: BigInt = BigInt(0)
  var max_profit: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  val _br4 = new Breaks
  _br4.breakable {
    while (i < BigInt((js).size)) {
      val job: Job = js.lift((i.toInt).toInt).getOrElse(null)
      var j: BigInt = job.asInstanceOf[Job].deadline - BigInt(1)
      val _br5 = new Breaks
      _br5.breakable {
        while (j >= BigInt(0)) {
          if (time_slots.lift((j.toInt).toInt).getOrElse(null) == BigInt(-1)) {
            time_slots((j).toInt) = job.asInstanceOf[Job].id
            count = count + BigInt(1)
            max_profit = max_profit + job.asInstanceOf[Job].profit
            _br5.break()
          }
          j = j - BigInt(1)
        }
      }
      i = i + BigInt(1)
    }
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  result = result :+ (count)
  result = result :+ (max_profit)
  return result
}

var jobs1: ArrayBuffer[Job] = ArrayBuffer[Job]()

var jobs2: ArrayBuffer[Job] = ArrayBuffer[Job]()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    jobs1 = jobs1 :+ (Job(BigInt(1), BigInt(4), BigInt(20)))
    jobs1 = jobs1 :+ (Job(BigInt(2), BigInt(1), BigInt(10)))
    jobs1 = jobs1 :+ (Job(BigInt(3), BigInt(1), BigInt(40)))
    jobs1 = jobs1 :+ (Job(BigInt(4), BigInt(1), BigInt(30)))
    println(_str(job_sequencing_with_deadlines(jobs1)))
    jobs2 = jobs2 :+ (Job(BigInt(1), BigInt(2), BigInt(100)))
    jobs2 = jobs2 :+ (Job(BigInt(2), BigInt(1), BigInt(19)))
    jobs2 = jobs2 :+ (Job(BigInt(3), BigInt(2), BigInt(27)))
    jobs2 = jobs2 :+ (Job(BigInt(4), BigInt(1), BigInt(25)))
    jobs2 = jobs2 :+ (Job(BigInt(5), BigInt(1), BigInt(15)))
    println(_str(job_sequencing_with_deadlines(jobs2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
