// Generated by Mochi v0.10.63 on 2025-08-11 16:31:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def calculate_waiting_times(burst_times: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  val quantum: BigInt = BigInt(2)
  var rem: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((burst_times).size)) {
    rem = rem :+ (burst_times.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var waiting: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((burst_times).size)) {
    waiting = waiting :+ (BigInt(0))
    i = i + BigInt(1)
  }
  var t: BigInt = BigInt(0)
  while (true) {
    var done: Boolean = true
    var j: BigInt = BigInt(0)
    while (j < BigInt((burst_times).size)) {
      if (rem.lift((j.toInt).toInt).getOrElse(null) > BigInt(0)) {
        done = false
        if (rem.lift((j.toInt).toInt).getOrElse(null) > quantum) {
          t = t + quantum
          rem((j).toInt) = rem.lift((j.toInt).toInt).getOrElse(null) - quantum
        } else {
          t = t + rem.lift((j.toInt).toInt).getOrElse(null)
          waiting((j).toInt) = t - burst_times.lift((j.toInt).toInt).getOrElse(null)
          rem((j).toInt) = BigInt(0)
        }
      }
      j = j + BigInt(1)
    }
    if (done) {
      return waiting
    }
  }
  return waiting
}

def calculate_turn_around_times(burst_times: ArrayBuffer[BigInt], waiting_times: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((burst_times).size)) {
    result = result :+ (burst_times.lift((i.toInt).toInt).getOrElse(null) + waiting_times.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  return result
}

def mean(values: ArrayBuffer[BigInt]): Double = {
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((values).size)) {
    total = total + values.lift((i.toInt).toInt).getOrElse(null)
    i = i + BigInt(1)
  }
  return total.toString.toDouble / (BigInt((values).size)).toDouble
}

def format_float_5(x: Double): String = {
  val scaled: BigInt = BigInt((x * 100000.0 + 0.5).toInt)
  val int_part: BigInt = scaled / BigInt(100000)
  val frac_part: BigInt = scaled % BigInt(100000)
  var frac_str: String = _str(frac_part)
  while (BigInt((frac_str).size) < BigInt(5)) {
    frac_str = "0" + frac_str
  }
  return _str(int_part) + "." + frac_str
}

def main(): Any = {
  val burst_times: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(5), BigInt(7))
  val waiting_times: ArrayBuffer[BigInt] = calculate_waiting_times(burst_times)
  val turn_around_times: ArrayBuffer[BigInt] = calculate_turn_around_times(burst_times, waiting_times)
  println("Process ID \tBurst Time \tWaiting Time \tTurnaround Time")
  var i: BigInt = BigInt(0)
  while (i < BigInt((burst_times).size)) {
    val line: String = "  " + _str(i + BigInt(1)) + "\t\t  " + _str(burst_times.lift((i.toInt).toInt).getOrElse(null)) + "\t\t  " + _str(waiting_times.lift((i.toInt).toInt).getOrElse(null)) + "\t\t  " + _str(turn_around_times.lift((i.toInt).toInt).getOrElse(null))
    println(line)
    i = i + BigInt(1)
  }
  println("")
  println("Average waiting time = " + format_float_5(mean(waiting_times)))
  println("Average turn around time = " + format_float_5(mean(turn_around_times)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
