// Generated by Mochi v0.10.69 on 2025-08-19 16:44:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Particle(var x: Double, var y: Double, var z: Double, var mass: Double)

case class Coord3D(var x: Double, var y: Double, var z: Double)

def round2(x: Double): Double = {
  var scaled: Double = x * 100.0
  var rounded: Double = (BigInt((scaled + 0.5).toInt)).toDouble
  return rounded / 100.0
}

def center_of_mass(ps: ArrayBuffer[Particle]): Coord3D = {
  if (BigInt((ps).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("No particles provided"))
  }
  var i: BigInt = BigInt(0)
  var total_mass: Double = 0.0
  while (i < BigInt((ps).size)) {
    var p: Particle = ps.lift((i.toInt).toInt).getOrElse(null)
    if (p.asInstanceOf[Particle].mass <= 0.0) {
      throw new RuntimeException(String.valueOf("Mass of all particles must be greater than 0"))
    }
    total_mass = total_mass + p.asInstanceOf[Particle].mass
    i = i + BigInt(1)
  }
  var sum_x: Double = 0.0
  var sum_y: Double = 0.0
  var sum_z: Double = 0.0
  i = BigInt(0)
  while (i < BigInt((ps).size)) {
    var p: Particle = ps.lift((i.toInt).toInt).getOrElse(null)
    sum_x = sum_x + p.x * p.asInstanceOf[Particle].mass
    sum_y = sum_y + p.y * p.asInstanceOf[Particle].mass
    sum_z = sum_z + p.z * p.asInstanceOf[Particle].mass
    i = i + BigInt(1)
  }
  var cm_x: Double = round2(sum_x / total_mass)
  var cm_y: Double = round2(sum_y / total_mass)
  var cm_z: Double = round2(sum_z / total_mass)
  return Coord3D(cm_x, cm_y, cm_z)
}

def coord_to_string(c: Coord3D): String = {
  return "Coord3D(x=" + _str(c.x) + ", y=" + _str(c.y) + ", z=" + _str(c.z) + ")"
}

var r1: Coord3D = center_of_mass(ArrayBuffer(Particle(1.5, 4.0, 3.4, 4.0), Particle(5.0, 6.8, 7.0, 8.1), Particle(9.4, 10.1, 11.6, 12.0)))

var r2: Coord3D = center_of_mass(ArrayBuffer(Particle(1.0, 2.0, 3.0, 4.0), Particle(5.0, 6.0, 7.0, 8.0), Particle(9.0, 10.0, 11.0, 12.0)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(coord_to_string(r1)))
    println(_str(coord_to_string(r2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
