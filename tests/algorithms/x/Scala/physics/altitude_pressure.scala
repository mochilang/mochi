// Generated by Mochi v0.10.64 on 2025-08-12 14:38:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def ln(x: Double): Double = {
  if (x <= 0.0) {
    throw new RuntimeException(String.valueOf("ln domain error"))
  }
  val y: Double = (x - 1.0) / (x + 1.0)
  val y2: Double = y * y
  var term: Double = y
  var sum: Double = 0.0
  var k: BigInt = BigInt(0)
  while (k < BigInt(10)) {
    val denom: Double = ((BigInt(2) * k + BigInt(1)).toString()).toDouble
    sum = sum + term / denom
    term = term * y2
    k = k + BigInt(1)
  }
  return 2.0 * sum
}

def exp(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(20)) {
    term = term * x / (n.toString()).toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def pow_float(base: Double, exponent: Double): Double = {
  return math.exp(exponent * math.log(base))
}

def get_altitude_at_pressure(pressure: Double): Double = {
  if (pressure > 101325.0) {
    throw new RuntimeException(String.valueOf("Value Higher than Pressure at Sea Level !"))
  }
  if (pressure < 0.0) {
    throw new RuntimeException(String.valueOf("Atmospheric Pressure can not be negative !"))
  }
  val ratio: Double = pressure / 101325.0
  return 44330.0 * (1.0 - pow_float(ratio, 1.0 / 5.5255))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(get_altitude_at_pressure(100000.0)))
    println(_str(get_altitude_at_pressure(101325.0)))
    println(_str(get_altitude_at_pressure(80000.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
