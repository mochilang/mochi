// Generated by Mochi v0.10.62 on 2025-08-09 10:40:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def beta(velocity: Double): Double = {
  if (velocity > c) {
    throw new RuntimeException(String.valueOf("Speed must not exceed light speed 299,792,458 [m/s]!"))
  }
  if (velocity < 1.0) {
    throw new RuntimeException(String.valueOf("Speed must be greater than or equal to 1!"))
  }
  return velocity / c
}

def gamma(velocity: Double): Double = {
  val b: Double = beta(velocity)
  return 1.0 / sqrtApprox(1.0 - b * b)
}

def transformation_matrix(velocity: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val g: Double = gamma(velocity)
  val b: Double = beta(velocity)
  return ArrayBuffer(ArrayBuffer(g, -g * b, 0.0, 0.0), ArrayBuffer(-g * b, g, 0.0, 0.0), ArrayBuffer(0.0, 0.0, 1.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0, 1.0))
}

def mat_vec_mul(mat: ArrayBuffer[ArrayBuffer[Double]], vec: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt(4)) {
    val row: ArrayBuffer[Double] = mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    val value: Double = row.lift((BigInt(0).toInt).toInt).getOrElse(0.0) * vec.lift((BigInt(0).toInt).toInt).getOrElse(0.0) + row.lift((BigInt(1).toInt).toInt).getOrElse(0.0) * vec.lift((BigInt(1).toInt).toInt).getOrElse(0.0) + row.lift((BigInt(2).toInt).toInt).getOrElse(0.0) * vec.lift((BigInt(2).toInt).toInt).getOrElse(0.0) + row.lift((BigInt(3).toInt).toInt).getOrElse(0.0) * vec.lift((BigInt(3).toInt).toInt).getOrElse(0.0)
    res = (res ++ ArrayBuffer(value)).asInstanceOf[ArrayBuffer[Double]]
    i = i + BigInt(1)
  }
  return res
}

def transform(velocity: Double, event: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  val g: Double = gamma(velocity)
  val b: Double = beta(velocity)
  val ct: Double = event.lift((BigInt(0).toInt).toInt).getOrElse(0.0) * c
  val x: Double = event.lift((BigInt(1).toInt).toInt).getOrElse(0.0)
  return ArrayBuffer(g * ct - g * b * x, -g * b * ct + g * x, event.lift((BigInt(2).toInt).toInt).getOrElse(0.0), event.lift((BigInt(3).toInt).toInt).getOrElse(0.0))
}

val c: Double = 299792458.0

val v: ArrayBuffer[Double] = transform(29979245.0, ArrayBuffer(1.0, 2.0, 3.0, 4.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(beta(c)))
    println(_str(beta(199792458.0)))
    println(_str(beta(100000.0)))
    println(_str(gamma(4.0)))
    println(_str(gamma(100000.0)))
    println(_str(gamma(30000000.0)))
    println(_str(transformation_matrix(29979245.0)))
    println(_str(v))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
