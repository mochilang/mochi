// Generated by Mochi v0.10.64 on 2025-08-12 14:41:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def _mod(x: Double, m: Double): Double = {
  return x - (BigInt((x / m).toString.toDouble.toInt)).toDouble * m
}

def sin_approx(x: Double): Double = {
  val y: Double = _mod(x + PI, TWO_PI) - PI
  val y2: Double = y * y
  val y3: Double = y2 * y
  val y5: Double = y3 * y2
  val y7: Double = y5 * y2
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
}

def cos_approx(x: Double): Double = {
  val y: Double = _mod(x + PI, TWO_PI) - PI
  val y2: Double = y * y
  val y4: Double = y2 * y2
  val y6: Double = y4 * y2
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
}

def polar_force(magnitude: Double, angle: Double, radian_mode: Boolean): ArrayBuffer[Double] = {
  val theta: Double = (if (radian_mode) angle else angle * PI / 180.0)
  return ArrayBuffer(magnitude * cos_approx(theta), magnitude * sin_approx(theta))
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  } else {
    return x
  }
  return 0.0
}

def in_static_equilibrium(forces: ArrayBuffer[ArrayBuffer[Double]], location: ArrayBuffer[ArrayBuffer[Double]], eps: Double): Boolean = {
  var sum_moments: Double = 0.0
  var i: BigInt = BigInt(0)
  val n: BigInt = BigInt((forces).size)
  while (i < n) {
    val r: ArrayBuffer[Double] = location.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    val f: ArrayBuffer[Double] = forces.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())
    val moment: Double = r.lift((BigInt(0).toInt).toInt).getOrElse(0.0) * f.lift((BigInt(1).toInt).toInt).getOrElse(0.0) - r.lift((BigInt(1).toInt).toInt).getOrElse(0.0) * f.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
    sum_moments = sum_moments + moment
    i = i + BigInt(1)
  }
  return abs_float(sum_moments) < eps
}

val PI: Double = 3.141592653589793

val TWO_PI: Double = 6.283185307179586

val forces1: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 1.0), ArrayBuffer(-1.0, 2.0))

val location1: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 0.0), ArrayBuffer(10.0, 0.0))

val forces2: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(polar_force(718.4, 150.0, false), polar_force(879.54, 45.0, false), polar_force(100.0, -90.0, false))

val location2: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(0.0, 0.0), ArrayBuffer(0.0, 0.0))

val forces3: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(polar_force(30.0 * 9.81, 15.0, false), polar_force(215.0, 135.0, false), polar_force(264.0, 60.0, false))

val location3: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(0.0, 0.0), ArrayBuffer(0.0, 0.0))

val forces4: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, -2000.0), ArrayBuffer(0.0, -1200.0), ArrayBuffer(0.0, 15600.0), ArrayBuffer(0.0, -12400.0))

val location4: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(6.0, 0.0), ArrayBuffer(10.0, 0.0), ArrayBuffer(12.0, 0.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(in_static_equilibrium(forces1, location1, 0.1)))
    println(_str(in_static_equilibrium(forces2, location2, 0.1)))
    println(_str(in_static_equilibrium(forces3, location3, 0.1)))
    println(_str(in_static_equilibrium(forces4, location4, 0.1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
