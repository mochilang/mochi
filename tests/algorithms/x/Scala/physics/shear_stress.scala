// Generated by Mochi v0.10.64 on 2025-08-12 12:39:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Result(var name: String, var value: Double)

def shear_stress(stress: Double, tangential_force: Double, area: Double): Result = {
  var zeros: BigInt = BigInt(0)
  if (stress == 0.0) {
    zeros = zeros + BigInt(1)
  }
  if (tangential_force == 0.0) {
    zeros = zeros + BigInt(1)
  }
  if (area == 0.0) {
    zeros = zeros + BigInt(1)
  }
  if (zeros != BigInt(1)) {
    throw new RuntimeException(String.valueOf("You cannot supply more or less than 2 values"))
  } else {
    if (stress < 0.0) {
      throw new RuntimeException(String.valueOf("Stress cannot be negative"))
    } else {
      if (tangential_force < 0.0) {
        throw new RuntimeException(String.valueOf("Tangential Force cannot be negative"))
      } else {
        if (area < 0.0) {
          throw new RuntimeException(String.valueOf("Area cannot be negative"))
        } else {
          if (stress == 0.0) {
            return Result("stress", tangential_force / area)
          } else {
            if (tangential_force == 0.0) {
              return Result("tangential_force", stress * area)
            } else {
              return Result("area", tangential_force / stress)
            }
          }
        }
      }
    }
  }
  return null
}

def str_result(r: Result): String = {
  return "Result(name='" + r.asInstanceOf[Result].name + "', value=" + _str(r.asInstanceOf[Result].value) + ")"
}

val r1: Result = shear_stress(25.0, 100.0, 0.0)

val r2: Result = shear_stress(0.0, 1600.0, 200.0)

val r3: Result = shear_stress(1000.0, 0.0, 1200.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(str_result(r1))
    println(str_result(r2))
    println(str_result(r3))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
