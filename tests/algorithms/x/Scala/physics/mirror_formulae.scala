// Generated by Mochi v0.10.69 on 2025-08-19 16:45:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def isclose(a: Double, b: Double, tolerance: Double): Boolean = {
  return abs_float(a - b) < tolerance
}

def focal_length(distance_of_object: Double, distance_of_image: Double): Double = {
  if ((distance_of_object == 0.0 || distance_of_image == 0.0)) {
    throw new RuntimeException(String.valueOf("Invalid inputs. Enter non zero values with respect to the sign convention."))
  }
  return 1.0 / (1.0 / distance_of_object + 1.0 / distance_of_image)
}

def object_distance(focal_length: Double, distance_of_image: Double): Double = {
  if ((distance_of_image == 0.0 || focal_length == 0.0)) {
    throw new RuntimeException(String.valueOf("Invalid inputs. Enter non zero values with respect to the sign convention."))
  }
  return 1.0 / (1.0 / focal_length - 1.0 / distance_of_image)
}

def image_distance(focal_length: Double, distance_of_object: Double): Double = {
  if ((distance_of_object == 0.0 || focal_length == 0.0)) {
    throw new RuntimeException(String.valueOf("Invalid inputs. Enter non zero values with respect to the sign convention."))
  }
  return 1.0 / (1.0 / focal_length - 1.0 / distance_of_object)
}

def test_focal_length(): Any = {
  var f1: Double = focal_length(10.0, 20.0)
  if (!isclose(f1, 6.66666666666666, 0.00000001)) {
    throw new RuntimeException(String.valueOf("focal_length test1 failed"))
  }
  var f2: Double = focal_length(9.5, 6.7)
  if (!isclose(f2, 3.929012346, 0.00000001)) {
    throw new RuntimeException(String.valueOf("focal_length test2 failed"))
  }
}

def test_object_distance(): Any = {
  var u1: Double = object_distance(30.0, 20.0)
  if (!isclose(u1, -60.0, 0.00000001)) {
    throw new RuntimeException(String.valueOf("object_distance test1 failed"))
  }
  var u2: Double = object_distance(10.5, 11.7)
  if (!isclose(u2, 102.375, 0.00000001)) {
    throw new RuntimeException(String.valueOf("object_distance test2 failed"))
  }
}

def test_image_distance(): Any = {
  var v1: Double = image_distance(10.0, 40.0)
  if (!isclose(v1, 13.33333333, 0.00000001)) {
    throw new RuntimeException(String.valueOf("image_distance test1 failed"))
  }
  var v2: Double = image_distance(1.5, 6.7)
  if (!isclose(v2, 1.932692308, 0.00000001)) {
    throw new RuntimeException(String.valueOf("image_distance test2 failed"))
  }
}

def main(): Any = {
  test_focal_length()
  test_object_distance()
  test_image_distance()
  println(_str(_str(focal_length(10.0, 20.0))))
  println(_str(_str(object_distance(30.0, 20.0))))
  println(_str(_str(image_distance(10.0, 40.0))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
