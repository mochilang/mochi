// Generated by Mochi v0.10.69 on 2025-08-19 16:46:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class Result(var kind: String, var value: Double)

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def gravitational_law(force: Double, mass_1: Double, mass_2: Double, distance: Double): Result = {
  var zero_count: BigInt = BigInt(0)
  if (force == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (mass_1 == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (mass_2 == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (distance == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (zero_count != BigInt(1)) {
    throw new RuntimeException(String.valueOf("One and only one argument must be 0"))
  }
  if (force < 0.0) {
    throw new RuntimeException(String.valueOf("Gravitational force can not be negative"))
  }
  if (distance < 0.0) {
    throw new RuntimeException(String.valueOf("Distance can not be negative"))
  }
  if (mass_1 < 0.0) {
    throw new RuntimeException(String.valueOf("Mass can not be negative"))
  }
  if (mass_2 < 0.0) {
    throw new RuntimeException(String.valueOf("Mass can not be negative"))
  }
  var product_of_mass: Double = mass_1 * mass_2
  if (force == 0.0) {
    var f: Double = GRAVITATIONAL_CONSTANT * product_of_mass / (distance * distance)
    return Result("force", f)
  }
  if (mass_1 == 0.0) {
    var m1: Double = force * (distance * distance) / (GRAVITATIONAL_CONSTANT * mass_2)
    return Result("mass_1", m1)
  }
  if (mass_2 == 0.0) {
    var m2: Double = force * (distance * distance) / (GRAVITATIONAL_CONSTANT * mass_1)
    return Result("mass_2", m2)
  }
  var d: Double = sqrtApprox(GRAVITATIONAL_CONSTANT * product_of_mass / force)
  return Result("distance", d)
}

var GRAVITATIONAL_CONSTANT: Double = 0.000000000066743

var r1: Result = gravitational_law(0.0, 5.0, 10.0, 20.0)

var r2: Result = gravitational_law(7367.382, 0.0, 74.0, 3048.0)

var r3: Result = gravitational_law(100.0, 5.0, 0.0, 3.0)

var r4: Result = gravitational_law(100.0, 5.0, 10.0, 0.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(r1.kind + " " + _str(r1.value)))
    println(_str(r2.kind + " " + _str(r2.value)))
    println(_str(r3.kind + " " + _str(r3.value)))
    println(_str(r4.kind + " " + _str(r4.value)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
