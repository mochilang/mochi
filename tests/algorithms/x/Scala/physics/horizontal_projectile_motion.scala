// Generated by Mochi v0.10.62 on 2025-08-09 10:40:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def _mod(x: Double, m: Double): Double = {
  return x - (BigInt((x / m).toString.toDouble.toInt)).toDouble * m
}

def sin(x: Double): Double = {
  val y: Double = _mod(x + PI, TWO_PI) - PI
  val y2: Double = y * y
  val y3: Double = y2 * y
  val y5: Double = y3 * y2
  val y7: Double = y5 * y2
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
}

def deg_to_rad(deg: Double): Double = {
  return deg * PI / 180.0
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * 10.0
    i = i + BigInt(1)
  }
  return result
}

def round(x: Double, n: BigInt): Double = {
  val m: Double = pow10(n)
  val y = Math.floor(x * m + 0.5)
  return y / m
}

def check_args(init_velocity: Double, angle: Double): Any = {
  if ((angle > 90.0 || angle < 1.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid angle. Range is 1-90 degrees."))
  }
  if (init_velocity < 0.0) {
    throw new RuntimeException(String.valueOf("Invalid velocity. Should be a positive number."))
  }
}

def horizontal_distance(init_velocity: Double, angle: Double): Double = {
  check_args(init_velocity, angle)
  val radians: Double = deg_to_rad(2.0 * angle)
  return round(init_velocity * init_velocity * sin(radians) / g, BigInt(2))
}

def max_height(init_velocity: Double, angle: Double): Double = {
  check_args(init_velocity, angle)
  val radians: Double = deg_to_rad(angle)
  val s: Double = sin(radians)
  return round(init_velocity * init_velocity * s * s / (2.0 * g), BigInt(2))
}

def total_time(init_velocity: Double, angle: Double): Double = {
  check_args(init_velocity, angle)
  val radians: Double = deg_to_rad(angle)
  return round(2.0 * init_velocity * sin(radians) / g, BigInt(2))
}

val PI: Double = 3.141592653589793

val TWO_PI: Double = 6.283185307179586

val g: Double = 9.80665

val v0: Double = 25.0

val angle: Double = 20.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(horizontal_distance(v0, angle))
    println(max_height(v0, angle))
    println(total_time(v0, angle))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
