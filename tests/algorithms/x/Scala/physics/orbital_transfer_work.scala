// Generated by Mochi v0.10.69 on 2025-08-19 16:46:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  if (n >= BigInt(0)) {
    var i: BigInt = BigInt(0)
    while (i < n) {
      p = p * 10.0
      i = i + BigInt(1)
    }
  } else {
    var i: BigInt = BigInt(0)
    while (i > n) {
      p = p / 10.0
      i = i - BigInt(1)
    }
  }
  return p
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  var f: Double = i.toString.toDouble
  if (f > x) {
    return (i - BigInt(1)).toDouble
  }
  return f
}

def format_scientific_3(x: Double): String = {
  if (x == 0.0) {
    return "0.000e+00"
  }
  var sign: String = ""
  var num: Double = x
  if (num < 0.0) {
    sign = "-"
    num = -num
  }
  var exp: BigInt = BigInt(0)
  while (num >= 10.0) {
    num = num / 10.0
    exp = exp + BigInt(1)
  }
  while (num < 1.0) {
    num = num * 10.0
    exp = exp - BigInt(1)
  }
  var temp: Double = Math.floor(num * 1000.0 + 0.5)
  var scaled: BigInt = BigInt(temp.toString.toDouble.toInt)
  if (scaled == BigInt(10000)) {
    scaled = BigInt(1000)
    exp = exp + BigInt(1)
  }
  var int_part: BigInt = scaled / BigInt(1000)
  var frac_part: BigInt = scaled % BigInt(1000)
  var frac_str: String = _str(frac_part)
  while (BigInt((frac_str).size) < BigInt(3)) {
    frac_str = "0" + frac_str
  }
  var mantissa: String = _str(int_part) + "." + frac_str
  var exp_sign: String = "+"
  var exp_abs: BigInt = exp
  if (exp < BigInt(0)) {
    exp_sign = "-"
    exp_abs = -exp
  }
  var exp_str: String = _str(exp_abs)
  if (exp_abs < BigInt(10)) {
    exp_str = "0" + exp_str
  }
  return sign + mantissa + "e" + exp_sign + exp_str
}

def orbital_transfer_work(mass_central: Double, mass_object: Double, r_initial: Double, r_final: Double): String = {
  var G: Double = 6.6743 * pow10(BigInt(-11))
  if ((r_initial <= 0.0 || r_final <= 0.0)) {
    throw new RuntimeException(String.valueOf("Orbital radii must be greater than zero."))
  }
  var work: Double = G * mass_central * mass_object / 2.0 * (1.0 / r_initial - 1.0 / r_final)
  return format_scientific_3(work)
}

def test_orbital_transfer_work(): Any = {
  if (orbital_transfer_work(5.972 * pow10(BigInt(24)), 1000.0, 6.371 * pow10(BigInt(6)), 7.0 * pow10(BigInt(6))) != "2.811e+09") {
    throw new RuntimeException(String.valueOf("case1 failed"))
  }
  if (orbital_transfer_work(5.972 * pow10(BigInt(24)), 500.0, 7.0 * pow10(BigInt(6)), 6.371 * pow10(BigInt(6))) != "-1.405e+09") {
    throw new RuntimeException(String.valueOf("case2 failed"))
  }
  if (orbital_transfer_work(1.989 * pow10(BigInt(30)), 1000.0, 1.5 * pow10(BigInt(11)), 2.28 * pow10(BigInt(11))) != "1.514e+11") {
    throw new RuntimeException(String.valueOf("case3 failed"))
  }
}

def main(): Any = {
  test_orbital_transfer_work()
  println(_str(orbital_transfer_work(5.972 * pow10(BigInt(24)), 1000.0, 6.371 * pow10(BigInt(6)), 7.0 * pow10(BigInt(6)))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
