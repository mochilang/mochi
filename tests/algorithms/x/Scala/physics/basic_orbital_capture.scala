// Generated by Mochi v0.10.64 on 2025-08-12 14:38:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def pow10(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * 10.0
    i = i + BigInt(1)
  }
  return result
}

def sqrt(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def capture_radii(target_body_radius: Double, target_body_mass: Double, projectile_velocity: Double): Double = {
  if (target_body_mass < 0.0) {
    throw new RuntimeException(String.valueOf("Mass cannot be less than 0"))
  }
  if (target_body_radius < 0.0) {
    throw new RuntimeException(String.valueOf("Radius cannot be less than 0"))
  }
  if (projectile_velocity > C) {
    throw new RuntimeException(String.valueOf("Cannot go beyond speed of light"))
  }
  val escape_velocity_squared: Double = 2.0 * G * target_body_mass / target_body_radius
  val denom: Double = projectile_velocity * projectile_velocity
  val capture_radius: Double = target_body_radius * sqrt(1.0 + escape_velocity_squared / denom)
  return capture_radius
}

def capture_area(capture_radius: Double): Double = {
  if (capture_radius < 0.0) {
    throw new RuntimeException(String.valueOf("Cannot have a capture radius less than 0"))
  }
  val sigma: Double = PI * capture_radius * capture_radius
  return sigma
}

def run_tests(): Any = {
  val r: Double = capture_radii(6.957 * pow10(BigInt(8)), 1.99 * pow10(BigInt(30)), 25000.0)
  if (Math.abs(r - 1.720959069143714 * pow10(BigInt(10))) > 1.0) {
    throw new RuntimeException(String.valueOf("capture_radii failed"))
  }
  val a: Double = capture_area(r)
  if (Math.abs(a - 9.304455331801812 * pow10(BigInt(20))) > 1.0) {
    throw new RuntimeException(String.valueOf("capture_area failed"))
  }
}

def main(): Any = {
  run_tests()
  val r: Double = capture_radii(6.957 * pow10(BigInt(8)), 1.99 * pow10(BigInt(30)), 25000.0)
  println(_str(r))
  println(_str(capture_area(r)))
}

val G: Double = 0.000000000066743

val C: Double = 299792458.0

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
