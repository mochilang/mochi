// Generated by Mochi v0.10.62 on 2025-08-09 10:39:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(100)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def casimir_force(force: Double, area: Double, distance: Double): scala.collection.mutable.Map[String,Double] = {
  var zero_count: BigInt = BigInt(0)
  if (force == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (area == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (distance == 0.0) {
    zero_count = zero_count + BigInt(1)
  }
  if (zero_count != BigInt(1)) {
    throw new RuntimeException(String.valueOf("One and only one argument must be 0"))
  }
  if (force < 0.0) {
    throw new RuntimeException(String.valueOf("Magnitude of force can not be negative"))
  }
  if (distance < 0.0) {
    throw new RuntimeException(String.valueOf("Distance can not be negative"))
  }
  if (area < 0.0) {
    throw new RuntimeException(String.valueOf("Area can not be negative"))
  }
  if (force == 0.0) {
    val num: Double = REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT * PI * PI * area
    val den: Double = 240.0 * distance * distance * distance * distance
    val f: Double = num / den
    return (scala.collection.mutable.Map("force" -> (f))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  }
  if (area == 0.0) {
    val num: Double = 240.0 * force * distance * distance * distance * distance
    val den: Double = REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT * PI * PI
    val a: Double = num / den
    return (scala.collection.mutable.Map("area" -> (a))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  }
  val num: Double = REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT * PI * PI * area
  val den: Double = 240.0 * force
  val inner: Double = num / den
  val d: Double = sqrtApprox(sqrtApprox(inner))
  return (scala.collection.mutable.Map("distance" -> (d))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
}

def main(): Any = {
  println(_str(casimir_force(0.0, 4.0, 0.03)))
  println(_str(casimir_force(0.0000000002635, 0.0023, 0.0)))
  println(_str(casimir_force(0.000000000000000002737, 0.0, 0.0023746)))
}

val PI: Double = 3.141592653589793

val REDUCED_PLANCK_CONSTANT: Double = 0.0000000000000000000000000000000001054571817

val SPEED_OF_LIGHT: Double = 300000000.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
