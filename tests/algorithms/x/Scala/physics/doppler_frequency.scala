// Generated by Mochi v0.10.64 on 2025-08-12 14:40:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def doppler_effect(org_freq: Double, wave_vel: Double, obs_vel: Double, src_vel: Double): Double = {
  if (wave_vel == src_vel) {
    throw new RuntimeException(String.valueOf("division by zero implies vs=v and observer in front of the source"))
  }
  val doppler_freq: Double = org_freq * (wave_vel + obs_vel) / (wave_vel - src_vel)
  if (doppler_freq <= 0.0) {
    throw new RuntimeException(String.valueOf("non-positive frequency implies vs>v or v0>v (in the opposite direction)"))
  }
  return doppler_freq
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def almost_equal(a: Double, b: Double, tol: Double): Boolean = {
  return absf(a - b) <= tol
}

def test_doppler_effect(): Any = {
  if (!almost_equal(doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 0.0000001)) {
    throw new RuntimeException(String.valueOf("test 1 failed"))
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, -10.0, 0.0), 96.96969696969697, 0.0000001)) {
    throw new RuntimeException(String.valueOf("test 2 failed"))
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 0.0000001)) {
    throw new RuntimeException(String.valueOf("test 3 failed"))
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, 0.0, -10.0), 97.05882352941177, 0.0000001)) {
    throw new RuntimeException(String.valueOf("test 4 failed"))
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 0.0000001)) {
    throw new RuntimeException(String.valueOf("test 5 failed"))
  }
  if (!almost_equal(doppler_effect(100.0, 330.0, -10.0, -10.0), 94.11764705882354, 0.0000001)) {
    throw new RuntimeException(String.valueOf("test 6 failed"))
  }
}

def main(): Any = {
  test_doppler_effect()
  println(doppler_effect(100.0, 330.0, 10.0, 0.0))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
