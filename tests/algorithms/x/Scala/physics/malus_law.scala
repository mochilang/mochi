// Generated by Mochi v0.10.64 on 2025-08-12 14:41:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def _mod(x: Double, m: Double): Double = {
  return x - Math.floor(x / m) * m
}

def cos(x: Double): Double = {
  val y: Double = _mod(x + PI, TWO_PI) - PI
  val y2: Double = y * y
  val y4: Double = y2 * y2
  val y6: Double = y4 * y2
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
}

def radians(deg: Double): Double = {
  return deg * PI / 180.0
}

def abs_val(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def malus_law(initial_intensity: Double, angle: Double): Double = {
  if (initial_intensity < 0.0) {
    throw new RuntimeException(String.valueOf("The value of intensity cannot be negative"))
  }
  if ((angle < 0.0 || angle > 360.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("In Malus Law, the angle is in the range 0-360 degrees"))
  }
  val theta: Double = radians(angle)
  val c: Double = cos(theta)
  return initial_intensity * (c * c)
}

def main(): Any = {
  println(_str(malus_law(100.0, 60.0)))
}

val PI: Double = 3.141592653589793

val TWO_PI: Double = 6.283185307179586

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
