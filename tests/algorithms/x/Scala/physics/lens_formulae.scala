// Generated by Mochi v0.10.62 on 2025-08-09 10:40:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def focal_length_of_lens(object_distance_from_lens: Double, image_distance_from_lens: Double): Double = {
  if ((object_distance_from_lens == 0.0 || image_distance_from_lens == 0.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid inputs. Enter non zero values with respect to the sign convention."))
  }
  return 1.0 / (1.0 / image_distance_from_lens - 1.0 / object_distance_from_lens)
}

def object_distance(focal_length_of_lens: Double, image_distance_from_lens: Double): Double = {
  if ((image_distance_from_lens == 0.0 || focal_length_of_lens == 0.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid inputs. Enter non zero values with respect to the sign convention."))
  }
  return 1.0 / (1.0 / image_distance_from_lens - 1.0 / focal_length_of_lens)
}

def image_distance(focal_length_of_lens: Double, object_distance_from_lens: Double): Double = {
  if ((object_distance_from_lens == 0.0 || focal_length_of_lens == 0.0).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid inputs. Enter non zero values with respect to the sign convention."))
  }
  return 1.0 / (1.0 / object_distance_from_lens + 1.0 / focal_length_of_lens)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(focal_length_of_lens(10.0, 4.0)))
    println(_str(focal_length_of_lens(2.7, 5.8)))
    println(_str(object_distance(10.0, 40.0)))
    println(_str(object_distance(6.2, 1.5)))
    println(_str(image_distance(50.0, 40.0)))
    println(_str(image_distance(5.3, 7.9)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
