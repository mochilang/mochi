// Generated by Mochi v0.10.62 on 2025-08-09 10:39:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var k: BigInt = BigInt(0)
  if (n >= BigInt(0)) {
    while (k < n) {
      p = p * 10.0
      k = k + BigInt(1)
    }
  } else {
    val m: BigInt = -n
    while (k < m) {
      p = p / 10.0
      k = k + BigInt(1)
    }
  }
  return p
}

def sqrt_newton(n: Double): Double = {
  if (n == 0.0) {
    return 0.0
  }
  var x: Double = n
  var j: BigInt = BigInt(0)
  while (j < BigInt(20)) {
    x = (x + n / x) / 2.0
    j = j + BigInt(1)
  }
  return x
}

def round3(x: Double): Double = {
  var y: Double = x * 1000.0 + 0.5
  var yi: BigInt = BigInt(y.toString.toDouble.toInt)
  if ((yi.toString.toDouble) > y) {
    yi = yi - BigInt(1)
  }
  return yi.toString.toDouble / 1000.0
}

def escape_velocity(mass: Double, radius: Double): Double = {
  if (radius == 0.0) {
    throw new RuntimeException(String.valueOf("Radius cannot be zero."))
  }
  val G: Double = 6.6743 * pow10(-BigInt(11))
  val velocity: Double = sqrt_newton(2.0 * G * mass / radius)
  return round3(velocity)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(escape_velocity(5.972 * pow10(BigInt(24)), 6.371 * pow10(BigInt(6))))
    println(escape_velocity(7.348 * pow10(BigInt(22)), 1.737 * pow10(BigInt(6))))
    println(escape_velocity(1.898 * pow10(BigInt(27)), 6.9911 * pow10(BigInt(7))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
