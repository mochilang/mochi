// Generated by Mochi v0.10.69 on 2025-08-19 16:45:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def pow(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def sqrt_approx(x: Double): Double = {
  if (x == 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def hubble_parameter(hubble_constant: Double, radiation_density: Double, matter_density: Double, dark_energy: Double, redshift: Double): Double = {
  var parameters: ArrayBuffer[Double] = ArrayBuffer(redshift, radiation_density, matter_density, dark_energy)
  var i: BigInt = BigInt(0)
  while (i < BigInt((parameters).size)) {
    if (parameters.lift((i.toInt).toInt).getOrElse(0.0) < 0.0) {
      throw new RuntimeException(String.valueOf("All input parameters must be positive"))
    }
    i = i + BigInt(1)
  }
  i = BigInt(1)
  while (i < BigInt(4)) {
    if (parameters.lift((i.toInt).toInt).getOrElse(0.0) > 1.0) {
      throw new RuntimeException(String.valueOf("Relative densities cannot be greater than one"))
    }
    i = i + BigInt(1)
  }
  var curvature: Double = 1.0 - (matter_density + radiation_density + dark_energy)
  var zp1: Double = redshift + 1.0
  var e2: Double = radiation_density * pow(zp1, BigInt(4)) + matter_density * pow(zp1, BigInt(3)) + curvature * pow(zp1, BigInt(2)) + dark_energy
  return hubble_constant * sqrt_approx(e2)
}

def test_hubble_parameter(): Any = {
  var h: Double = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)
  if ((h < 68.2999 || h > 68.3001)) {
    throw new RuntimeException(String.valueOf("hubble_parameter test failed"))
  }
}

def main(): Any = {
  test_hubble_parameter()
  println(_str(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
