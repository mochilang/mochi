// Generated by Mochi v0.10.69 on 2025-08-19 16:44:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def round6(x: Double): Double = {
  var factor: Double = 1000000.0
  return (BigInt((x * factor + 0.5).toInt).toString()).toDouble / factor
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def validate(values: ArrayBuffer[Double]): Boolean = {
  if (BigInt((values).size) == BigInt(0)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((values).size)) {
    if (values.lift((i.toInt).toInt).getOrElse(0.0) <= 0.0) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def effusion_ratio(m1: Double, m2: Double): Double = {
  if (!validate(ArrayBuffer(m1, m2))) {
    println(_str("ValueError: Molar mass values must greater than 0."))
    return 0.0
  }
  return round6(sqrtApprox(m2 / m1))
}

def first_effusion_rate(rate: Double, m1: Double, m2: Double): Double = {
  if (!validate(ArrayBuffer(rate, m1, m2))) {
    println(_str("ValueError: Molar mass and effusion rate values must greater than 0."))
    return 0.0
  }
  return round6(rate * sqrtApprox(m2 / m1))
}

def second_effusion_rate(rate: Double, m1: Double, m2: Double): Double = {
  if (!validate(ArrayBuffer(rate, m1, m2))) {
    println(_str("ValueError: Molar mass and effusion rate values must greater than 0."))
    return 0.0
  }
  return round6(rate / sqrtApprox(m2 / m1))
}

def first_molar_mass(mass: Double, r1: Double, r2: Double): Double = {
  if (!validate(ArrayBuffer(mass, r1, r2))) {
    println(_str("ValueError: Molar mass and effusion rate values must greater than 0."))
    return 0.0
  }
  var ratio: Double = r1 / r2
  return round6(mass / (ratio * ratio))
}

def second_molar_mass(mass: Double, r1: Double, r2: Double): Double = {
  if (!validate(ArrayBuffer(mass, r1, r2))) {
    println(_str("ValueError: Molar mass and effusion rate values must greater than 0."))
    return 0.0
  }
  var ratio: Double = r1 / r2
  return round6(ratio * ratio / mass)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(effusion_ratio(2.016, 4.002)))
    println(_str(first_effusion_rate(1.0, 2.016, 4.002)))
    println(_str(second_effusion_rate(1.0, 2.016, 4.002)))
    println(_str(first_molar_mass(2.0, 1.408943, 0.709752)))
    println(_str(second_molar_mass(2.0, 1.408943, 0.709752)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
