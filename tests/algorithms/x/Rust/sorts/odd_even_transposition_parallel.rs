// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn odd_even_transposition(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = xs.clone();
    let mut n = (arr.len() as i64);
    let mut phase: i64 = 0;
    while (phase < n) {
        let mut start: i64 = if ((phase % 2) == 0) { 0 } else { 1 };
        let mut i: i64 = start;
        while ((i + 1) < n) {
            if (arr[i as usize] > arr[(i + 1) as usize]) {
                let mut tmp: i64 = arr[i as usize];
                arr[i as usize] = arr[(i + 1) as usize];
                arr[(i + 1) as usize] = tmp;
            }
            i = (i + 2);
        }
        phase = (phase + 1);
    }
    return arr
};
    fn mochi_main() {
    let mut data: Vec<i64> = vec![10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
    println!("{}", "Initial List");
    println!("{}", format!("{:?}", data));
    let mut sorted: Vec<i64> = odd_even_transposition(data.clone());
    println!("{}", "Sorted List");
    println!("{}", format!("{:?}", sorted));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
