// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_example: Vec<i64> = Vec::new();
static mut g_output: String = String::new();
static mut g_j: i64 = 0;
fn main() {
    unsafe {
        g_example = vec![8, 3, 2, 7, 4, 6, 8];
        g_output = String::from("Sorted order is:").clone();
        g_j = 0;
                let _start: i64 = _now();
        unsafe fn pigeonhole_sort(mut arr: Vec<i64>) -> Vec<i64> {
    if ((arr.len() as i64) == 0) {
        return arr
    }
    let mut min_val: i64 = ({ let tmp = arr.clone(); *tmp.iter().min().unwrap_or(&0) } as i64);
    let mut max_val: i64 = ({ let tmp = arr.clone(); *tmp.iter().max().unwrap_or(&0) } as i64);
    let mut size: i64 = ((max_val - min_val) + 1);
    let mut holes: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        holes = { let mut _v = holes.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (arr.len() as i64)) {
        let mut x: i64 = arr[i as usize];
        let mut index: i64 = (x - min_val);
        holes[index as usize] = (holes[index as usize] + 1);
        i = (i + 1);
    }
    let mut sorted_index: i64 = 0;
    let mut count: i64 = 0;
    while (count < size) {
        while (holes[count as usize] > 0) {
            arr[sorted_index as usize] = (count + min_val);
            holes[count as usize] = (holes[count as usize] - 1);
            sorted_index = (sorted_index + 1);
        }
        count = (count + 1);
    }
    return arr
};
        let mut result: Vec<i64> = pigeonhole_sort(g_example.clone());
        while (g_j < (result.len() as i64)) {
            g_output = format!("{}{}", format!("{}{}", g_output, " "), result[g_j as usize].to_string());
            g_j = (g_j + 1);
        }
        println!("{}", g_output);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
