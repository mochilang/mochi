// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_ex1: Vec<i64> = Vec::new();
static mut g_ex2: Vec<i64> = Vec::new();
static mut g_ex3: Vec<i64> = Vec::new();
static mut g_ex4: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_ex1 = vec![40, 12, 1, 100, 4];
        g_ex2 = vec![];
        g_ex3 = vec![123, 345, 123, 80];
        g_ex4 = vec![1209, 834598, 1, 540402, 45];
                let _start: i64 = _now();
        unsafe fn get_bit_length(mut n: i64) -> i64 {
    if (n == 0) {
        return 1
    }
    let mut length: i64 = 0;
    let mut num: i64 = n;
    while (num > 0) {
        length = (length + 1);
        num = (num / 2);
    }
    return length
};
        unsafe fn max_bit_length(mut nums: Vec<i64>) -> i64 {
    let mut i: i64 = 0;
    let mut max_len: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut l: i64 = get_bit_length(nums[i as usize]);
        if (l > max_len) {
            max_len = l;
        }
        i = (i + 1);
    }
    return max_len
};
        unsafe fn get_bit(mut num: i64, mut pos: i64) -> i64 {
    let mut n: i64 = num;
    let mut i: i64 = 0;
    while (i < pos) {
        n = (n / 2);
        i = (i + 1);
    }
    return (n % 2)
};
        unsafe fn _msd_radix_sort(mut nums: Vec<i64>, mut bit_position: i64) -> Vec<i64> {
    if ((bit_position == 0) || ((nums.len() as i64) <= 1)) {
        return nums
    }
    let mut zeros: Vec<i64> = vec![];
    let mut ones: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut num: i64 = nums[i as usize];
        if (get_bit(num, (bit_position - 1)) == 1) {
            ones = { let mut _v = ones.clone(); _v.push(num); _v };
        } else {
            zeros = { let mut _v = zeros.clone(); _v.push(num); _v };
        }
        i = (i + 1);
    }
    zeros = _msd_radix_sort(zeros.clone(), (bit_position - 1));
    ones = _msd_radix_sort(ones.clone(), (bit_position - 1));
    let mut res: Vec<i64> = zeros.clone();
    i = 0;
    while (i < (ones.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(ones[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn msd_radix_sort(mut nums: Vec<i64>) -> Vec<i64> {
    if ((nums.len() as i64) == 0) {
        return vec![]
    }
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        if (nums[i as usize] < 0) {
            panic!("All numbers must be positive");
        }
        i = (i + 1);
    }
    let mut bits: i64 = max_bit_length(nums.clone());
    let mut result: Vec<i64> = _msd_radix_sort(nums.clone(), bits);
    return result
};
        unsafe fn msd_radix_sort_inplace(mut nums: Vec<i64>) -> Vec<i64> {
    return msd_radix_sort(nums.clone())
};
        let mut sorted1: Vec<i64> = msd_radix_sort(g_ex1.clone());
        println!("{}", format!("{:?}", sorted1));
        let mut sorted2: Vec<i64> = msd_radix_sort(g_ex2.clone());
        println!("{}", format!("{:?}", sorted2));
        let mut sorted3: Vec<i64> = msd_radix_sort(g_ex3.clone());
        println!("{}", format!("{:?}", sorted3));
        let mut sorted4: Vec<i64> = msd_radix_sort(g_ex4.clone());
        println!("{}", format!("{:?}", sorted4));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
