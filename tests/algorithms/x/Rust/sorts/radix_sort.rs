// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_RADIX: i64 = 10;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn make_buckets() -> Vec<Vec<i64>> {
    let mut buckets: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < unsafe { g_RADIX.clone() }) {
        buckets = { let mut _v = buckets.clone(); _v.push(vec![]); _v };
        i = (i + 1);
    }
    return buckets
};
        fn max_value(mut xs: Vec<i64>) -> i64 {
    let mut max_val: i64 = xs[0 as usize];
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] > max_val) {
            max_val = xs[i as usize];
        }
        i = (i + 1);
    }
    return max_val
};
        let mut radix_sort = |mut list_of_ints: Vec<i64>| -> Vec<i64> {
    let mut placement: i64 = 1;
    let max_digit: i64 = max_value(list_of_ints.clone());
    while (placement <= max_digit) {
        let mut buckets: Vec<Vec<i64>> = make_buckets();
        let mut i: i64 = 0;
        while (i < (list_of_ints.len() as i64)) {
            let value: i64 = list_of_ints[i as usize];
            let tmp: i64 = ((value / placement) % unsafe { g_RADIX.clone() });
            buckets[tmp as usize] = { let mut _v = buckets[tmp as usize].clone().clone(); _v.push(value); _v };
            i = (i + 1);
        }
        let mut a: i64 = 0;
        let mut b: i64 = 0;
        while (b < unsafe { g_RADIX.clone() }) {
            let mut bucket: Vec<i64> = buckets[b as usize].clone();
            let mut j: i64 = 0;
            while (j < (bucket.len() as i64)) {
                list_of_ints[a as usize] = bucket[j as usize];
                a = (a + 1);
                j = (j + 1);
            }
            b = (b + 1);
        }
        placement = (placement * unsafe { g_RADIX.clone() });
    }
    return list_of_ints
};
        println!("{}", format!("{:?}", radix_sort(vec![0, 5, 3, 2, 2])));
        println!("{}", format!("{:?}", radix_sort(vec![1, 100, 10, 1000])));
        println!("{}", format!("{:?}", radix_sort(vec![15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
