// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn quick_sort_3partition(mut arr: Vec<i64>, mut left: i64, mut right: i64) -> Vec<i64> {
    if (right <= left) {
        return arr
    }
    let mut a: i64 = left;
    let mut i: i64 = left;
    let mut b: i64 = right;
    let pivot: i64 = arr[left as usize];
    while (i <= b) {
        if (arr[i as usize] < pivot) {
            let temp: i64 = arr[a as usize];
            arr[a as usize] = arr[i as usize];
            arr[i as usize] = temp;
            a = (a + 1);
            i = (i + 1);
        } else if (arr[i as usize] > pivot) {
            let temp: i64 = arr[b as usize];
            arr[b as usize] = arr[i as usize];
            arr[i as usize] = temp;
            b = (b - 1);
        } else {
            i = (i + 1);
        }
    }
    arr = quick_sort_3partition(arr.clone(), left, (a - 1));
    arr = quick_sort_3partition(arr.clone(), (b + 1), right);
    return arr
};
    let mut quick_sort_lomuto_partition = {
fn quick_sort_lomuto_partition(mut lomuto_partition: fn(), mut arr: Vec<i64>, mut left: i64, mut right: i64) -> Vec<i64> {
    if (left < right) {
        let pivot_index: i64 = lomuto_partition(&mut arr.clone(), left, right);
        arr = quick_sort_lomuto_partition(lomuto_partition, arr.clone(), left, (pivot_index - 1));
        arr = quick_sort_lomuto_partition(lomuto_partition, arr.clone(), (pivot_index + 1), right);
    }
    return arr
}
|mut arr: Vec<i64>, mut left: i64, mut right: i64| -> Vec<i64> { quick_sort_lomuto_partition(lomuto_partition, arr, left, right) }
};
    fn lomuto_partition(arr: &mut Vec<i64>, mut left: i64, mut right: i64) -> i64 {
    let pivot: i64 = arr[right as usize];
    let mut store_index: i64 = left;
    let mut i: i64 = left;
    while (i < right) {
        if (arr[i as usize] < pivot) {
            let temp: i64 = arr[store_index as usize];
            (*arr)[store_index as usize] = arr[i as usize];
            (*arr)[i as usize] = temp;
            store_index = (store_index + 1);
        }
        i = (i + 1);
    }
    let temp: i64 = arr[right as usize];
    (*arr)[right as usize] = arr[store_index as usize];
    (*arr)[store_index as usize] = temp;
    return store_index
};
    fn three_way_radix_quicksort(mut arr: Vec<i64>) -> Vec<i64> {
    if ((arr.len() as i64) <= 1) {
        return arr
    }
    let pivot: i64 = arr[0 as usize];
    let mut less: Vec<i64> = vec![];
    let mut equal: Vec<i64> = vec![];
    let mut greater: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let val: i64 = arr[i as usize];
        if (val < pivot) {
            less = { let mut _v = less.clone(); _v.push(val); _v };
        } else if (val > pivot) {
            greater = { let mut _v = greater.clone(); _v.push(val); _v };
        } else {
            equal = { let mut _v = equal.clone(); _v.push(val); _v };
        }
        i = (i + 1);
    }
    let sorted_less: Vec<i64> = three_way_radix_quicksort(less.clone());
    let sorted_greater: Vec<i64> = three_way_radix_quicksort(greater.clone());
    let mut result = vec![sorted_less.clone(), equal.clone()].concat();
    result = vec![result, sorted_greater.clone()].concat();
    return result
};
    let mut array1: Vec<i64> = vec![5, -1, -1, 5, 5, 24, 0];
    array1 = quick_sort_3partition(array1.clone(), 0, ((array1.len() as i64) - 1));
    println!("{}", format!("{:?}", array1));
    let mut array2: Vec<i64> = vec![9, 0, 2, 6];
    array2 = quick_sort_3partition(array2.clone(), 0, ((array2.len() as i64) - 1));
    println!("{}", format!("{:?}", array2));
    let mut array3: Vec<i64> = vec![];
    array3 = quick_sort_3partition(array3.clone(), 0, ((array3.len() as i64) - 1));
    println!("{}", format!("{:?}", array3));
    let mut nums1: Vec<i64> = vec![0, 5, 3, 1, 2];
    nums1 = quick_sort_lomuto_partition(nums1.clone(), 0, ((nums1.len() as i64) - 1));
    println!("{}", format!("{:?}", nums1));
    let mut nums2: Vec<i64> = vec![];
    nums2 = quick_sort_lomuto_partition(nums2.clone(), 0, ((nums2.len() as i64) - 1));
    println!("{}", format!("{:?}", nums2));
    let mut nums3: Vec<i64> = vec![-2, 5, 0, -4];
    nums3 = quick_sort_lomuto_partition(nums3.clone(), 0, ((nums3.len() as i64) - 1));
    println!("{}", format!("{:?}", nums3));
    println!("{}", format!("{:?}", three_way_radix_quicksort(vec![])));
    println!("{}", format!("{:?}", three_way_radix_quicksort(vec![1])));
    println!("{}", format!("{:?}", three_way_radix_quicksort(vec![-5, -2, 1, -2, 0, 1])));
    println!("{}", format!("{:?}", three_way_radix_quicksort(vec![1, 2, 5, 1, 2, 0, 0, 5, 2, -1])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
