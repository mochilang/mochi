// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bisect_left(mut stacks: Vec<Vec<i64>>, mut value: i64) -> i64 {
    let mut low: i64 = 0;
    let mut high = (stacks.len() as i64);
    while (low < high) {
        let mut mid: i64 = ((low + high) / 2);
        let mut stack: Vec<i64> = stacks[mid as usize].clone();
        let mut top_idx = ((stack.len() as i64) - 1);
        let mut top: i64 = stack[top_idx as usize];
        if (top < value) {
            low = (mid + 1);
        } else {
            high = mid;
        }
    }
    return low
};
    fn reverse_list(mut src: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i = ((src.len() as i64) - 1);
    while (i >= 0) {
        res = { let mut _v = res.clone(); _v.push(src[i as usize]); _v };
        i = (i - 1);
    }
    return res
};
    fn patience_sort(mut collection: Vec<i64>) -> Vec<i64> {
    let mut stacks: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (collection.len() as i64)) {
        let mut element: i64 = collection[i as usize];
        let mut idx: i64 = bisect_left(stacks.clone(), element);
        if (idx != (stacks.len() as i64)) {
            let mut stack: Vec<i64> = stacks[idx as usize].clone();
            stacks[idx as usize] = { let mut _v = stack.clone(); _v.push(element); _v };
        } else {
            let mut new_stack: Vec<i64> = vec![element];
            stacks = { let mut _v = stacks.clone(); _v.push(new_stack.clone()); _v };
        }
        i = (i + 1);
    }
    i = 0;
    while (i < (stacks.len() as i64)) {
        stacks[i as usize] = reverse_list(stacks[i as usize].clone());
        i = (i + 1);
    }
    let mut indices: Vec<i64> = vec![];
    i = 0;
    while (i < (stacks.len() as i64)) {
        indices = { let mut _v = indices.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut total: i64 = 0;
    i = 0;
    while (i < (stacks.len() as i64)) {
        total = (total + (stacks[i as usize].clone().len() as i64));
        i = (i + 1);
    }
    let mut result: Vec<i64> = vec![];
    let mut count: i64 = 0;
    while (count < total) {
        let mut min_val: i64 = 0;
        let mut min_stack: i64 = -1;
        let mut j: i64 = 0;
        while (j < (stacks.len() as i64)) {
            let mut idx: i64 = indices[j as usize];
            if (idx < (stacks[j as usize].clone().len() as i64)) {
                let mut val: i64 = stacks[j as usize].clone()[idx as usize];
                if (min_stack < 0) {
                    min_val = val;
                    min_stack = j;
                } else if (val < min_val) {
                    min_val = val;
                    min_stack = j;
                }
            }
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(min_val); _v };
        indices[min_stack as usize] = (indices[min_stack as usize] + 1);
        count = (count + 1);
    }
    i = 0;
    while (i < (result.len() as i64)) {
        collection[i as usize] = result[i as usize];
        i = (i + 1);
    }
    return collection
};
    println!("{}", format!("{:?}", patience_sort(vec![1, 9, 5, 21, 17, 6])));
    println!("{}", format!("{:?}", patience_sort(vec![])));
    println!("{}", format!("{:?}", patience_sort(vec![-3, -17, -48])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
