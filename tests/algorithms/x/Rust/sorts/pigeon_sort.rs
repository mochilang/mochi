// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_list(mut n: i64, mut value: i64) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        result = { let mut _v = result.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return result
};
    fn min_value(mut arr: Vec<i64>) -> i64 {
    let mut m: i64 = arr[0 as usize];
    let mut i: i64 = 1;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize] < m) {
            m = arr[i as usize];
        }
        i = (i + 1);
    }
    return m
};
    fn max_value(mut arr: Vec<i64>) -> i64 {
    let mut m: i64 = arr[0 as usize];
    let mut i: i64 = 1;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize] > m) {
            m = arr[i as usize];
        }
        i = (i + 1);
    }
    return m
};
    fn pigeon_sort(mut array: Vec<i64>) -> Vec<i64> {
    if ((array.len() as i64) == 0) {
        return array
    }
    let mut mn: i64 = min_value(array.clone());
    let mut mx: i64 = max_value(array.clone());
    let mut holes_range: i64 = ((mx - mn) + 1);
    let mut holes: Vec<i64> = make_list(holes_range, 0);
    let mut holes_repeat: Vec<i64> = make_list(holes_range, 0);
    let mut i: i64 = 0;
    while (i < (array.len() as i64)) {
        let mut index: i64 = (array[i as usize] - mn);
        holes[index as usize] = array[i as usize];
        holes_repeat[index as usize] = (holes_repeat[index as usize] + 1);
        i = (i + 1);
    }
    let mut array_index: i64 = 0;
    let mut h: i64 = 0;
    while (h < holes_range) {
        while (holes_repeat[h as usize] > 0) {
            array[array_index as usize] = holes[h as usize];
            array_index = (array_index + 1);
            holes_repeat[h as usize] = (holes_repeat[h as usize] - 1);
        }
        h = (h + 1);
    }
    return array
};
    println!("{}", format!("{:?}", pigeon_sort(vec![0, 5, 3, 2, 2])));
    println!("{}", format!("{:?}", pigeon_sort(vec![])));
    println!("{}", format!("{:?}", pigeon_sort(vec![-2, -5, -45])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
