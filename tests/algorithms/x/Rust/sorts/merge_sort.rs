// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn subarray(mut xs: Vec<i64>, mut start: i64, mut end: i64) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = start;
    while (i < end) {
        result = { let mut _v = result.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn merge(mut left: Vec<i64>, mut right: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    while ((i < (left.len() as i64)) && (j < (right.len() as i64))) {
        if (left[i as usize] <= right[j as usize]) {
            result = { let mut _v = result.clone(); _v.push(left[i as usize]); _v };
            i = (i + 1);
        } else {
            result = { let mut _v = result.clone(); _v.push(right[j as usize]); _v };
            j = (j + 1);
        }
    }
    while (i < (left.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(left[i as usize]); _v };
        i = (i + 1);
    }
    while (j < (right.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(right[j as usize]); _v };
        j = (j + 1);
    }
    return result
};
    fn merge_sort(mut collection: Vec<i64>) -> Vec<i64> {
    if ((collection.len() as i64) <= 1) {
        return collection
    }
    let mut mid_index = ((collection.len() as i64) / 2);
    let mut left: Vec<i64> = subarray(collection.clone(), 0, mid_index);
    let mut right: Vec<i64> = subarray(collection.clone(), mid_index, (collection.len() as i64));
    let mut sorted_left: Vec<i64> = merge_sort(left.clone());
    let mut sorted_right: Vec<i64> = merge_sort(right.clone());
    return merge(sorted_left.clone(), sorted_right.clone())
};
    println!("{}", format!("{:?}", merge_sort(vec![0, 5, 3, 2, 2])));
    println!("{}", format!("{:?}", merge_sort(vec![])));
    println!("{}", format!("{:?}", merge_sort(vec![-2, -5, -45])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
