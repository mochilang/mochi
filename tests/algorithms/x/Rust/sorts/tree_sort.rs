// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    value: i64,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct TreeState {
    nodes: Vec<Node>,
    root: i64,
}
impl std::fmt::Display for TreeState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, ", ")?;
        write!(f, "\"root\": {}", self.root)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_node(state: &mut TreeState, mut value: i64) -> i64 {
    (*state).nodes = { let mut _v = state.nodes.clone().clone(); _v.push(Node {value: value, left: -1, right: -1}); _v };
    return ((state.nodes.clone().len() as i64) - 1)
};
    fn insert(state: &mut TreeState, mut value: i64) {
    if (state.root == -1) {
        (*state).root = new_node(state, value);
        return
    }
    let mut current: i64 = state.root;
    let mut nodes: Vec<Node> = state.nodes.clone();
    loop {
        let mut node: Node = nodes[current as usize].clone();
        if (value < node.value) {
            if (node.left == -1) {
                let mut idx: i64 = new_node(state, value);
                nodes = state.nodes.clone();
                node.left = idx;
                nodes[current as usize] = node.clone();
                (*state).nodes = nodes.clone();
                return
            }
            current = node.left;
        } else if (value > node.value) {
            if (node.right == -1) {
                let mut idx: i64 = new_node(state, value);
                nodes = state.nodes.clone();
                node.right = idx;
                nodes[current as usize] = node.clone();
                (*state).nodes = nodes.clone();
                return
            }
            current = node.right;
        } else {
            return
        }
    }
};
    fn inorder(state: &TreeState, mut idx: i64) -> Vec<i64> {
    if (idx == -1) {
        return vec![]
    }
    let mut node: Node = state.nodes.clone()[idx as usize].clone();
    let mut result: Vec<i64> = inorder(state, node.left);
    result = { let mut _v = result.clone(); _v.push(node.value); _v };
    let mut right_part: Vec<i64> = inorder(state, node.right);
    let mut i: i64 = 0;
    while (i < (right_part.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(right_part[i as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn tree_sort(mut arr: Vec<i64>) -> Vec<i64> {
    let mut state: TreeState = TreeState {nodes: vec![], root: -1};
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        insert(&mut state, arr[i as usize]);
        i = (i + 1);
    }
    if (state.root == -1) {
        return vec![]
    }
    return inorder(&state, state.root)
};
    println!("{}", format!("{:?}", tree_sort(vec![])));
    println!("{}", format!("{:?}", tree_sort(vec![1])));
    println!("{}", format!("{:?}", tree_sort(vec![1, 2])));
    println!("{}", format!("{:?}", tree_sort(vec![5, 2, 7])));
    println!("{}", format!("{:?}", tree_sort(vec![5, -4, 9, 2, 7])));
    println!("{}", format!("{:?}", tree_sort(vec![5, 6, 1, -1, 4, 37, 2, 7])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
