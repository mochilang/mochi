// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn insertion_sort(mut a: Vec<i64>, mut start: i64, mut end_: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = a.clone();
    let mut i: i64 = start;
    while (i < end_) {
        let key: i64 = arr[i as usize];
        let mut j: i64 = i;
        while ((j > start) && (arr[(j - 1) as usize] > key)) {
            arr[j as usize] = arr[(j - 1) as usize];
            j = (j - 1);
        }
        arr[j as usize] = key;
        i = (i + 1);
    }
    return arr
};
    fn heapify(mut a: Vec<i64>, mut index: i64, mut heap_size: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = a.clone();
    let mut largest: i64 = index;
    let left: i64 = ((2 * index) + 1);
    let right: i64 = ((2 * index) + 2);
    if ((left < heap_size) && (arr[left as usize] > arr[largest as usize])) {
        largest = left;
    }
    if ((right < heap_size) && (arr[right as usize] > arr[largest as usize])) {
        largest = right;
    }
    if (largest != index) {
        let temp: i64 = arr[index as usize];
        arr[index as usize] = arr[largest as usize];
        arr[largest as usize] = temp;
        arr = heapify(arr.clone(), largest, heap_size);
    }
    return arr
};
    let mut heap_sort = |mut a: Vec<i64>| -> Vec<i64> {
    let mut arr: Vec<i64> = a.clone();
    let n: i64 = (arr.len() as i64);
    if (n <= 1) {
        return arr
    }
    let mut i: i64 = (n / 2);
    loop {
        arr = heapify(arr.clone(), i, n);
        if (i == 0) {
            break
        }
        i = (i - 1);
    }
    i = (n - 1);
    while (i > 0) {
        let temp: i64 = arr[0 as usize];
        arr[0 as usize] = arr[i as usize];
        arr[i as usize] = temp;
        arr = heapify(arr.clone(), 0, i);
        i = (i - 1);
    }
    return arr
};
    fn median_of_3(mut arr: Vec<i64>, mut first: i64, mut middle: i64, mut last: i64) -> i64 {
    let a: i64 = arr[first as usize];
    let b: i64 = arr[middle as usize];
    let c: i64 = arr[last as usize];
    if (((a > b) && (a < c)) || ((a < b) && (a > c))) {
        return a
    } else if (((b > a) && (b < c)) || ((b < a) && (b > c))) {
        return b
    } else {
        return c
    }
};
    fn partition(arr: &mut Vec<i64>, mut low: i64, mut high: i64, mut pivot: i64) -> i64 {
    let mut i: i64 = low;
    let mut j: i64 = high;
    loop {
        while (arr[i as usize] < pivot) {
            i = (i + 1);
        }
        j = (j - 1);
        while (pivot < arr[j as usize]) {
            j = (j - 1);
        }
        if (i >= j) {
            return i
        }
        let temp: i64 = arr[i as usize];
        (*arr)[i as usize] = arr[j as usize];
        (*arr)[j as usize] = temp;
        i = (i + 1);
    }
};
    fn int_log2(mut n: i64) -> i64 {
    let mut v: i64 = n;
    let mut r: i64 = 0;
    while (v > 1) {
        v = (v / 2);
        r = (r + 1);
    }
    return r
};
    let mut intro_sort = {
fn intro_sort(heap_sort: &mut dyn FnMut(Vec<i64>) -> Vec<i64>, insertion_sort: &mut dyn FnMut(Vec<i64>, i64, i64) -> Vec<i64>, median_of_3: &mut dyn FnMut(Vec<i64>, i64, i64, i64) -> i64, partition: &mut dyn FnMut(&mut Vec<i64>, i64, i64, i64) -> i64, mut arr: Vec<i64>, mut start: i64, mut end_: i64, mut size_threshold: i64, mut max_depth: i64) -> Vec<i64> {
    let mut array: Vec<i64> = arr.clone();
    let mut s: i64 = start;
    let mut e: i64 = end_;
    let mut depth: i64 = max_depth;
    while ((e - s) > size_threshold) {
        if (depth == 0) {
            return heap_sort(array.clone())
        }
        depth = (depth - 1);
        let pivot: i64 = median_of_3(array.clone(), s, ((s + ((e - s) / 2)) + 1), (e - 1));
        let p: i64 = partition(&mut array, s, e, pivot);
        array = intro_sort(heap_sort, insertion_sort, median_of_3, partition, array.clone(), p, e, size_threshold, depth);
        e = p;
    }
    let res: Vec<i64> = insertion_sort(array.clone(), s, e);
    let _: i64 = (res.len() as i64);
    return res
}
|mut arr: Vec<i64>, mut start: i64, mut end_: i64, mut size_threshold: i64, mut max_depth: i64| -> Vec<i64> { intro_sort(&mut heap_sort, &mut insertion_sort, &mut median_of_3, &mut partition, arr, start, end_, size_threshold, max_depth) }
};
    let mut intro_sort_main = |mut arr: Vec<i64>| {
    if ((arr.len() as i64) == 0) {
        println!("{:?}", format!("{:?}", arr));
        return
    }
    let max_depth: i64 = (2 * int_log2((arr.len() as i64)));
    let sorted: Vec<i64> = intro_sort(arr.clone(), 0, (arr.len() as i64), 16, max_depth);
    println!("{:?}", format!("{:?}", sorted));
};
    let example1: Vec<i64> = vec![4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12];
    intro_sort_main(example1.clone());
    let example2: Vec<i64> = vec![21, 15, 11, 45, -2, -11, 46];
    intro_sort_main(example2.clone());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
