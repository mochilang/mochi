// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn subarray(mut xs: Vec<i64>, mut start: i64, mut end: i64) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut k: i64 = start;
    while (k < end) {
        result = { let mut _v = result.clone(); _v.push(xs[k as usize]); _v };
        k = (k + 1);
    }
    return result
};
    fn merge(mut arr: Vec<i64>) -> Vec<i64> {
    if ((arr.len() as i64) > 1) {
        let mut middle_length = ((arr.len() as i64) / 2);
        let mut left_array: Vec<i64> = subarray(arr.clone(), 0, middle_length);
        let mut right_array: Vec<i64> = subarray(arr.clone(), middle_length, (arr.len() as i64));
        let mut left_size = (left_array.len() as i64);
        let mut right_size = (right_array.len() as i64);
        merge(left_array.clone());
        merge(right_array.clone());
        let mut left_index: i64 = 0;
        let mut right_index: i64 = 0;
        let mut index: i64 = 0;
        while ((left_index < left_size) && (right_index < right_size)) {
            if (left_array[left_index as usize] < right_array[right_index as usize]) {
                arr[index as usize] = left_array[left_index as usize];
                left_index = (left_index + 1);
            } else {
                arr[index as usize] = right_array[right_index as usize];
                right_index = (right_index + 1);
            }
            index = (index + 1);
        }
        while (left_index < left_size) {
            arr[index as usize] = left_array[left_index as usize];
            left_index = (left_index + 1);
            index = (index + 1);
        }
        while (right_index < right_size) {
            arr[index as usize] = right_array[right_index as usize];
            right_index = (right_index + 1);
            index = (index + 1);
        }
    }
    return arr
};
    println!("{}", format!("{:?}", merge(vec![10, 9, 8, 7, 6, 5, 4, 3, 2, 1])));
    println!("{}", format!("{:?}", merge(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10])));
    println!("{}", format!("{:?}", merge(vec![10, 22, 1, 2, 3, 9, 15, 23])));
    println!("{}", format!("{:?}", merge(vec![100])));
    println!("{}", format!("{:?}", merge(vec![])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
