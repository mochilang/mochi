// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn concat(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    for x in a.iter().cloned() {
        result = { let mut _v = result.clone(); _v.push(x); _v };
    }
    for x in b.iter().cloned() {
        result = { let mut _v = result.clone(); _v.push(x); _v };
    }
    return result
};
    fn quick_sort(mut data: Vec<i64>) -> Vec<i64> {
    if ((data.len() as i64) <= 1) {
        return data
    }
    let mut pivot: i64 = data[0 as usize];
    let mut left: Vec<i64> = vec![];
    let mut right: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (data.len() as i64)) {
        let mut e: i64 = data[i as usize];
        if (e <= pivot) {
            left = { let mut _v = left.clone(); _v.push(e); _v };
        } else {
            right = { let mut _v = right.clone(); _v.push(e); _v };
        }
        i = (i + 1);
    }
    let mut sorted_left: Vec<i64> = quick_sort(left.clone());
    let mut sorted_right: Vec<i64> = quick_sort(right.clone());
    let mut left_pivot: Vec<i64> = { let mut _v = sorted_left.clone(); _v.push(pivot); _v };
    return vec![left_pivot.clone(), sorted_right.clone()].concat()
};
    println!("{}", format!("{:?}", quick_sort(vec![2, 1, 0])));
    println!("{}", format!("{:?}", quick_sort(vec![3, 5, 2, 4, 1])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
