// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn merge(mut a: Vec<i64>, mut low: i64, mut mid: i64, mut high: i64) -> Vec<i64> {
    let mut left: Vec<i64> = a[low as usize..mid as usize].to_vec();
    let mut right: Vec<i64> = a[mid as usize..(high + 1) as usize].to_vec();
    let mut result: Vec<i64> = vec![];
    while (((left.len() as i64) > 0) && ((right.len() as i64) > 0)) {
        if (left[0 as usize] <= right[0 as usize]) {
            result = { let mut _v = result.clone(); _v.push(left[0 as usize]); _v };
            left = left[1 as usize..].to_vec();
        } else {
            result = { let mut _v = result.clone(); _v.push(right[0 as usize]); _v };
            right = right[1 as usize..].to_vec();
        }
    }
    let mut i: i64 = 0;
    while (i < (left.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(left[i as usize]); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (right.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(right[i as usize]); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (result.len() as i64)) {
        a[(low + i) as usize] = result[i as usize];
        i = (i + 1);
    }
    return a
};
    let mut iter_merge_sort = |mut items: Vec<i64>| -> Vec<i64> {
    let n: i64 = (items.len() as i64);
    if (n <= 1) {
        return items
    }
    let mut arr: Vec<i64> = items[0 as usize..].to_vec();
    let mut p: i64 = 2;
    while (p <= n) {
        let mut i: i64 = 0;
        while (i < n) {
            let mut high: i64 = ((i + p) - 1);
            if (high >= n) {
                high = (n - 1);
            }
            let low: i64 = i;
            let mid: i64 = (((low + high) + 1) / 2);
            arr = merge(arr.clone(), low, mid, high);
            i = (i + p);
        }
        if ((p * 2) >= n) {
            let mid2: i64 = (i - p);
            arr = merge(arr.clone(), 0, mid2, (n - 1));
            break
        }
        p = (p * 2);
    }
    return arr
};
    fn list_to_string(mut arr: Vec<i64>) -> String {
    let mut s: String = String::from("[");
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        s = format!("{}{}", s, arr[i as usize].to_string());
        if (i < ((arr.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    return format!("{}{}", s, "]").clone()
};
    println!("{}", list_to_string(iter_merge_sort(vec![5, 9, 8, 7, 1, 2, 7])));
    println!("{}", list_to_string(iter_merge_sort(vec![1])));
    println!("{}", list_to_string(iter_merge_sort(vec![2, 1])));
    println!("{}", list_to_string(iter_merge_sort(vec![4, 3, 2, 1])));
    println!("{}", list_to_string(iter_merge_sort(vec![5, 4, 3, 2, 1])));
    println!("{}", list_to_string(iter_merge_sort(vec![-2, -9, -1, -4])));
    println!("{}", list_to_string(iter_merge_sort(vec![])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
