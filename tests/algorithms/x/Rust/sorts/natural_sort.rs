// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_DIGITS: String = String::new();
static mut g_LOWER: String = String::new();
static mut g_UPPER: String = String::new();
static mut g_example1: Vec<String> = Vec::new();
static mut g_example2: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_DIGITS = String::from("0123456789").clone();
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_example1 = vec![String::from("2 ft 7 in").clone(), String::from("1 ft 5 in").clone(), String::from("10 ft 2 in").clone(), String::from("2 ft 11 in").clone(), String::from("7 ft 6 in").clone()];
        g_example2 = vec![String::from("Elm11").clone(), String::from("Elm12").clone(), String::from("Elm2").clone(), String::from("elm0").clone(), String::from("elm1").clone(), String::from("elm10").clone(), String::from("elm13").clone(), String::from("elm9").clone()];
                let _start: i64 = _now();
        unsafe fn index_of(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn is_digit(ch: &str) -> bool {
    return (index_of(&g_DIGITS, ch) >= 0)
};
        unsafe fn to_lower(ch: &str) -> String {
    let mut idx: i64 = index_of(&g_UPPER, ch);
    if (idx >= 0) {
        return g_LOWER.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>()
    }
    return ch.to_string().clone()
};
        unsafe fn pad_left(s: &str, mut width: i64) -> String {
    let mut res: String = s.to_string().clone();
    while ((res.len() as i64) < width) {
        res = format!("{}{}", "0", res);
    }
    return res.clone()
};
        unsafe fn alphanum_key(s: &str) -> Vec<String> {
    let mut key: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if is_digit(&s.chars().nth(i as usize).unwrap().to_string()) {
            let mut num: String = String::from("").clone();
            while ((i < (s.len() as i64)) && is_digit(&s.chars().nth(i as usize).unwrap().to_string())) {
                num = format!("{}{}", num, s.chars().nth(i as usize).unwrap().to_string());
                i = (i + 1);
            }
            let mut len_str: String = pad_left(&(num.len() as i64).to_string(), 3).clone();
            key = { let mut _v = key.clone(); _v.push(format!("{}{}", format!("{}{}", "#", len_str), num)); _v };
        } else {
            let mut seg: String = String::from("").clone();
            while (i < (s.len() as i64)) {
                if is_digit(&s.chars().nth(i as usize).unwrap().to_string()) {
                    break
                }
                seg = format!("{}{}", seg, to_lower(&s.chars().nth(i as usize).unwrap().to_string()));
                i = (i + 1);
            }
            key = { let mut _v = key.clone(); _v.push(seg.clone()); _v };
        }
    }
    return key
};
        unsafe fn compare_keys(mut a: Vec<String>, mut b: Vec<String>) -> i64 {
    let mut i: i64 = 0;
    while ((i < (a.len() as i64)) && (i < (b.len() as i64))) {
        if (a[i as usize].clone().as_str() < b[i as usize].clone().as_str()) {
            return -1
        }
        if (a[i as usize].clone().as_str() > b[i as usize].clone().as_str()) {
            return 1
        }
        i = (i + 1);
    }
    if ((a.len() as i64) < (b.len() as i64)) {
        return -1
    }
    if ((a.len() as i64) > (b.len() as i64)) {
        return 1
    }
    return 0
};
        unsafe fn natural_sort(mut arr: Vec<String>) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut keys: Vec<Vec<String>> = vec![];
    let mut k: i64 = 0;
    while (k < (arr.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(arr[k as usize].clone()); _v };
        keys = { let mut _v = keys.clone(); _v.push(alphanum_key(&arr[k as usize].clone())); _v };
        k = (k + 1);
    }
    let mut i: i64 = 1;
    while (i < (res.len() as i64)) {
        let mut current: String = res[i as usize].clone().clone();
        let mut current_key: Vec<String> = keys[i as usize].clone();
        let mut j: i64 = (i - 1);
        while ((j >= 0) && (compare_keys(keys[j as usize].clone(), current_key.clone()) > 0)) {
            res[(j + 1) as usize] = res[j as usize].clone();
            keys[(j + 1) as usize] = keys[j as usize].clone();
            j = (j - 1);
        }
        res[(j + 1) as usize] = current.clone();
        keys[(j + 1) as usize] = current_key.clone();
        i = (i + 1);
    }
    return res
};
        println!("{}", format!("{:?}", natural_sort(g_example1.clone())));
        println!("{}", format!("{:?}", natural_sort(g_example2.clone())));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
