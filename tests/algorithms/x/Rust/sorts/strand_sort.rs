// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn merge(mut xs: Vec<i64>, mut ys: Vec<i64>, mut reverse: bool) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    while ((i < (xs.len() as i64)) && (j < (ys.len() as i64))) {
        if reverse {
            if (xs[i as usize] > ys[j as usize]) {
                result = { let mut _v = result.clone(); _v.push(xs[i as usize]); _v };
                i = (i + 1);
            } else {
                result = { let mut _v = result.clone(); _v.push(ys[j as usize]); _v };
                j = (j + 1);
            }
        } else {
            if (xs[i as usize] < ys[j as usize]) {
                result = { let mut _v = result.clone(); _v.push(xs[i as usize]); _v };
                i = (i + 1);
            } else {
                result = { let mut _v = result.clone(); _v.push(ys[j as usize]); _v };
                j = (j + 1);
            }
        }
    }
    while (i < (xs.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    while (j < (ys.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(ys[j as usize]); _v };
        j = (j + 1);
    }
    return result
};
    fn strand_sort_rec(mut arr: Vec<i64>, mut reverse: bool, mut solution: Vec<i64>) -> Vec<i64> {
    if ((arr.len() as i64) == 0) {
        return solution
    }
    let mut sublist: Vec<i64> = vec![];
    let mut remaining: Vec<i64> = vec![];
    sublist = { let mut _v = sublist.clone(); _v.push(arr[0 as usize]); _v };
    let mut last: i64 = arr[0 as usize];
    let mut k: i64 = 1;
    while (k < (arr.len() as i64)) {
        let mut item: i64 = arr[k as usize];
        if reverse {
            if (item < last) {
                sublist = { let mut _v = sublist.clone(); _v.push(item); _v };
                last = item;
            } else {
                remaining = { let mut _v = remaining.clone(); _v.push(item); _v };
            }
        } else {
            if (item > last) {
                sublist = { let mut _v = sublist.clone(); _v.push(item); _v };
                last = item;
            } else {
                remaining = { let mut _v = remaining.clone(); _v.push(item); _v };
            }
        }
        k = (k + 1);
    }
    solution = merge(solution.clone(), sublist.clone(), reverse);
    return strand_sort_rec(remaining.clone(), reverse, solution.clone())
};
    fn strand_sort(mut arr: Vec<i64>, mut reverse: bool) -> Vec<i64> {
    return strand_sort_rec(arr.clone(), reverse, vec![])
};
    println!("{}", format!("{:?}", strand_sort(vec![4, 3, 5, 1, 2], false)));
    println!("{}", format!("{:?}", strand_sort(vec![4, 3, 5, 1, 2], true)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
