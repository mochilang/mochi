// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn binary_search_insertion_from(mut sorted_list: Vec<i64>, mut item: i64, mut start: i64) -> Vec<i64> {
    let mut left: i64 = start;
    let mut right = ((sorted_list.len() as i64) - 1);
    while (left <= right) {
        let mut middle: i64 = ((left + right) / 2);
        if (left == right) {
            if (sorted_list[middle as usize] < item) {
                left = (middle + 1);
            }
            break
        } else if (sorted_list[middle as usize] < item) {
            left = (middle + 1);
        } else {
            right = (middle - 1);
        }
    }
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < left) {
        result = { let mut _v = result.clone(); _v.push(sorted_list[i as usize]); _v };
        i = (i + 1);
    }
    result = { let mut _v = result.clone(); _v.push(item); _v };
    while (i < (sorted_list.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(sorted_list[i as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn binary_search_insertion(mut sorted_list: Vec<i64>, mut item: i64) -> Vec<i64> {
    return binary_search_insertion_from(sorted_list.clone(), item, 0)
};
    fn merge(mut left: Vec<Vec<i64>>, mut right: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    while ((i < (left.len() as i64)) && (j < (right.len() as i64))) {
        if (left[i as usize].clone()[0 as usize] < right[j as usize].clone()[0 as usize]) {
            result = { let mut _v = result.clone(); _v.push(left[i as usize].clone()); _v };
            i = (i + 1);
        } else {
            result = { let mut _v = result.clone(); _v.push(right[j as usize].clone()); _v };
            j = (j + 1);
        }
    }
    while (i < (left.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(left[i as usize].clone()); _v };
        i = (i + 1);
    }
    while (j < (right.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(right[j as usize].clone()); _v };
        j = (j + 1);
    }
    return result
};
    fn sortlist_2d(mut list_2d: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut length = (list_2d.len() as i64);
    if (length <= 1) {
        return list_2d
    }
    let mut middle: i64 = (length / 2);
    let mut left: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < middle) {
        left = { let mut _v = left.clone(); _v.push(list_2d[i as usize].clone()); _v };
        i = (i + 1);
    }
    let mut right: Vec<Vec<i64>> = vec![];
    let mut j: i64 = middle;
    while (j < length) {
        right = { let mut _v = right.clone(); _v.push(list_2d[j as usize].clone()); _v };
        j = (j + 1);
    }
    return merge(sortlist_2d(left.clone()), sortlist_2d(right.clone()))
};
    fn merge_insertion_sort(mut collection: Vec<i64>) -> Vec<i64> {
    if ((collection.len() as i64) <= 1) {
        return collection
    }
    let mut two_paired_list: Vec<Vec<i64>> = vec![];
    let mut has_last_odd_item: bool = false;
    let mut i: i64 = 0;
    while (i < (collection.len() as i64)) {
        if (i == ((collection.len() as i64) - 1)) {
            has_last_odd_item = true;
        } else {
            let mut a: i64 = collection[i as usize];
            let mut b: i64 = collection[(i + 1) as usize];
            if (a < b) {
                two_paired_list = { let mut _v = two_paired_list.clone(); _v.push(vec![a, b]); _v };
            } else {
                two_paired_list = { let mut _v = two_paired_list.clone(); _v.push(vec![b, a]); _v };
            }
        }
        i = (i + 2);
    }
    let mut sorted_list_2d: Vec<Vec<i64>> = sortlist_2d(two_paired_list.clone());
    let mut result: Vec<i64> = vec![];
    i = 0;
    while (i < (sorted_list_2d.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(sorted_list_2d[i as usize].clone()[0 as usize]); _v };
        i = (i + 1);
    }
    result = { let mut _v = result.clone(); _v.push(sorted_list_2d[((sorted_list_2d.len() as i64) - 1) as usize].clone()[1 as usize]); _v };
    if has_last_odd_item {
        result = binary_search_insertion(result.clone(), collection[((collection.len() as i64) - 1) as usize]);
    }
    let mut inserted_before: bool = false;
    let mut idx: i64 = 0;
    while (idx < ((sorted_list_2d.len() as i64) - 1)) {
        if (has_last_odd_item && (result[idx as usize] == collection[((collection.len() as i64) - 1) as usize])) {
            inserted_before = true;
        }
        let mut pivot: i64 = sorted_list_2d[idx as usize].clone()[1 as usize];
        if inserted_before {
            result = binary_search_insertion_from(result.clone(), pivot, (idx + 2));
        } else {
            result = binary_search_insertion_from(result.clone(), pivot, (idx + 1));
        }
        idx = (idx + 1);
    }
    return result
};
    fn mochi_main() {
    let mut example1: Vec<i64> = vec![0, 5, 3, 2, 2];
    let mut example2: Vec<i64> = vec![99];
    let mut example3: Vec<i64> = vec![-2, -5, -45];
    println!("{}", format!("{:?}", merge_insertion_sort(example1.clone())));
    println!("{}", format!("{:?}", merge_insertion_sort(example2.clone())));
    println!("{}", format!("{:?}", merge_insertion_sort(example3.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
