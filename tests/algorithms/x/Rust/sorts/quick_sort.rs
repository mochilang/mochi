// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn quick_sort(mut items: Vec<i64>) -> Vec<i64> {
    if ((items.len() as i64) < 2) {
        return items
    }
    let mut pivot: i64 = items[0 as usize];
    let mut lesser: Vec<i64> = vec![];
    let mut greater: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (items.len() as i64)) {
        let mut item: i64 = items[i as usize];
        if (item <= pivot) {
            lesser = { let mut _v = lesser.clone(); _v.push(item); _v };
        } else {
            greater = { let mut _v = greater.clone(); _v.push(item); _v };
        }
        i = (i + 1);
    }
    return vec![vec![quick_sort(lesser.clone()).clone(), vec![pivot].clone()].concat().clone(), quick_sort(greater.clone()).clone()].concat()
};
    println!("{}", format!("{} {}", "sorted1:", format!("{:?}", quick_sort(vec![0, 5, 3, 2, 2]))).trim_end());
    println!("{}", format!("{} {}", "sorted2:", format!("{:?}", quick_sort(vec![]))).trim_end());
    println!("{}", format!("{} {}", "sorted3:", format!("{:?}", quick_sort(vec![-2, 5, 0, -45]))).trim_end());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
