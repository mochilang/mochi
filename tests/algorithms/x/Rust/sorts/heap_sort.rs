// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn heapify(arr: &mut Vec<i64>, mut index: i64, mut heap_size: i64) {
    let mut largest: i64 = index;
    let left_index: i64 = ((2 * index) + 1);
    let right_index: i64 = ((2 * index) + 2);
    if ((left_index < heap_size) && (arr[left_index as usize] > arr[largest as usize])) {
        largest = left_index;
    }
    if ((right_index < heap_size) && (arr[right_index as usize] > arr[largest as usize])) {
        largest = right_index;
    }
    if (largest != index) {
        let temp: i64 = arr[largest as usize];
        (*arr)[largest as usize] = arr[index as usize];
        (*arr)[index as usize] = temp;
        heapify(arr, largest, heap_size);
    }
};
    let mut heap_sort = |mut arr: Vec<i64>| -> Vec<i64> {
    let n: i64 = (arr.len() as i64);
    let mut i: i64 = ((n / 2) - 1);
    while (i >= 0) {
        heapify(&mut arr, i, n);
        i = (i - 1);
    }
    i = (n - 1);
    while (i > 0) {
        let temp: i64 = arr[0 as usize];
        arr[0 as usize] = arr[i as usize];
        arr[i as usize] = temp;
        heapify(&mut arr, 0, i);
        i = (i - 1);
    }
    return arr
};
    let mut data: Vec<i64> = vec![3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4];
    let mut result: Vec<i64> = heap_sort(data.clone());
    println!("{:?}", format!("{:?}", result));
    if (format!("{:?}", result).as_str() != format!("{:?}", vec![-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123]).as_str()) {
        panic!("Assertion error");
    }
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
