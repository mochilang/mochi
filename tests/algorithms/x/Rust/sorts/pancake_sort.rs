// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn flip(mut arr: Vec<i64>, mut k: i64) -> Vec<i64> {
    let mut start: i64 = 0;
    let mut end: i64 = k;
    while (start < end) {
        let mut temp: i64 = arr[start as usize];
        arr[start as usize] = arr[end as usize];
        arr[end as usize] = temp;
        start = (start + 1);
        end = (end - 1);
    }
    return arr
};
    fn find_max_index(mut arr: Vec<i64>, mut n: i64) -> i64 {
    let mut mi: i64 = 0;
    let mut i: i64 = 1;
    while (i < n) {
        if (arr[i as usize] > arr[mi as usize]) {
            mi = i;
        }
        i = (i + 1);
    }
    return mi
};
    fn pancake_sort(mut arr: Vec<i64>) -> Vec<i64> {
    let mut cur = (arr.len() as i64);
    while (cur > 1) {
        let mut mi: i64 = find_max_index(arr.clone(), cur);
        arr = flip(arr.clone(), mi);
        arr = flip(arr.clone(), (cur - 1));
        cur = (cur - 1);
    }
    return arr
};
    fn mochi_main() {
    let mut data: Vec<i64> = vec![3, 6, 1, 10, 2];
    let mut sorted: Vec<i64> = pancake_sort(data.clone());
    println!("{}", format!("{:?}", sorted));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
