// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_edges: LazyLock<Mutex<HashMap<String, Vec<String>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("a"), format!("{}", vec![String::from("c").clone(), String::from("b").clone()])), (String::from("b"), format!("{}", vec![String::from("d").clone(), String::from("e").clone()])), (String::from("c"), format!("{}", vec![])), (String::from("d"), format!("{}", vec![])), (String::from("e"), format!("{}", vec![]))])));
static mut g_vertices: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_vertices = vec![String::from("a").clone().clone(), String::from("b").clone().clone(), String::from("c").clone().clone(), String::from("d").clone().clone(), String::from("e").clone().clone()];
                let _start: i64 = _now();
        unsafe fn topological_sort(start: &str, visited: &mut HashMap<String, bool>, mut sort: Vec<String>) -> Vec<String> {
    (*visited).insert((*start).to_string(), true);
    let mut neighbors: Vec<String> = g_edges.get(start).cloned().unwrap_or_default();
    let mut i: i64 = 0;
    while (i < (neighbors.len() as i64)) {
        let mut neighbor: String = neighbors[i as usize].clone().clone();
        if !visited.contains_key(&neighbor) {
            sort = topological_sort(&neighbor, visited, sort.clone());
        }
        i = (i + 1);
    }
    sort = { let mut _v = sort.clone(); _v.push(start.to_string()); _v };
    if ((visited.len() as i64) != (g_vertices.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (g_vertices.len() as i64)) {
            let mut v: String = g_vertices[j as usize].clone().clone();
            if !visited.contains_key(&v) {
                sort = topological_sort(&v, visited, sort.clone());
            }
            j = (j + 1);
        }
    }
    return sort
};
        unsafe fn mochi_main() {
    let mut result: Vec<String> = topological_sort(&"a", &mut HashMap::new(), vec![]);
    println!("{}", format!("{:?}", result));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
