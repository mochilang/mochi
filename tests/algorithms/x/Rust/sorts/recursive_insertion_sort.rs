// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn insert_next(mut collection: Vec<i64>, mut index: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = collection.clone();
    if ((index >= (arr.len() as i64)) || (arr[(index - 1) as usize] <= arr[index as usize])) {
        return arr
    }
    let mut j: i64 = (index - 1);
    let mut temp: i64 = arr[j as usize];
    arr[j as usize] = arr[index as usize];
    arr[index as usize] = temp;
    return insert_next(arr.clone(), (index + 1))
};
    fn rec_insertion_sort(mut collection: Vec<i64>, mut n: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = collection.clone();
    if (((arr.len() as i64) <= 1) || (n <= 1)) {
        return arr
    }
    arr = insert_next(arr.clone(), (n - 1));
    return rec_insertion_sort(arr.clone(), (n - 1))
};
    fn test_rec_insertion_sort() {
    let mut col1: Vec<i64> = vec![1, 2, 1];
    col1 = rec_insertion_sort(col1.clone(), (col1.len() as i64));
    if (((col1[0 as usize] != 1) || (col1[1 as usize] != 1)) || (col1[2 as usize] != 2)) {
        panic!("test1 failed");
    }
    let mut col2: Vec<i64> = vec![2, 1, 0, -1, -2];
    col2 = rec_insertion_sort(col2.clone(), (col2.len() as i64));
    if (col2[0 as usize] != (0 - 2)) {
        panic!("test2 failed");
    }
    if (col2[1 as usize] != (0 - 1)) {
        panic!("test2 failed");
    }
    if (col2[2 as usize] != 0) {
        panic!("test2 failed");
    }
    if (col2[3 as usize] != 1) {
        panic!("test2 failed");
    }
    if (col2[4 as usize] != 2) {
        panic!("test2 failed");
    }
    let mut col3: Vec<i64> = vec![1];
    col3 = rec_insertion_sort(col3.clone(), (col3.len() as i64));
    if (col3[0 as usize] != 1) {
        panic!("test3 failed");
    }
};
    fn mochi_main() {
    test_rec_insertion_sort();
    let mut numbers: Vec<i64> = vec![5, 3, 4, 1, 2];
    numbers = rec_insertion_sort(numbers.clone(), (numbers.len() as i64));
    println!("{}", format!("{:?}", numbers));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
