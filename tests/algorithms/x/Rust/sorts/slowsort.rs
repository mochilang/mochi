// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seq1: Vec<i64> = Vec::new();
static mut g_seq2: Vec<i64> = Vec::new();
static mut g_seq3: Vec<i64> = Vec::new();
static mut g_seq4: Vec<i64> = Vec::new();
static mut g_seq5: Vec<i64> = Vec::new();
static mut g_seq6: Vec<i64> = Vec::new();
static mut g_seq7: Vec<i64> = Vec::new();
static mut g_seq8: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_seq1 = vec![1, 6, 2, 5, 3, 4, 4, 5];
        g_seq2 = vec![];
        g_seq3 = vec![2];
        g_seq4 = vec![1, 2, 3, 4];
        g_seq5 = vec![4, 3, 2, 1];
        g_seq6 = vec![9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        g_seq7 = vec![9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        g_seq8 = vec![9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
                let _start: i64 = _now();
        unsafe fn swap(seq: &mut Vec<i64>, mut i: i64, mut j: i64) {
    let mut temp: i64 = seq[i as usize];
    (*seq)[i as usize] = seq[j as usize];
    (*seq)[j as usize] = temp;
};
        unsafe fn slowsort_recursive(mut seq: Vec<i64>, mut start: i64, mut end_index: i64) {
    if (start >= end_index) {
        return
    }
    let mut mid: i64 = ((start + end_index) / 2);
    slowsort_recursive(seq.clone(), start, mid);
    slowsort_recursive(seq.clone(), (mid + 1), end_index);
    if (seq[end_index as usize] < seq[mid as usize]) {
        swap(&mut seq, end_index, mid);
    }
    slowsort_recursive(seq.clone(), start, (end_index - 1));
};
        unsafe fn slow_sort(mut seq: Vec<i64>) -> Vec<i64> {
    if ((seq.len() as i64) > 0) {
        slowsort_recursive(seq.clone(), 0, ((seq.len() as i64) - 1));
    }
    return seq
};
        println!("{}", format!("{:?}", slow_sort(g_seq1.clone())));
        println!("{}", format!("{:?}", slow_sort(g_seq2.clone())));
        println!("{}", format!("{:?}", slow_sort(g_seq3.clone())));
        println!("{}", format!("{:?}", slow_sort(g_seq4.clone())));
        println!("{}", format!("{:?}", slow_sort(g_seq5.clone())));
        slowsort_recursive(g_seq6.clone(), 2, 7);
        println!("{}", format!("{:?}", g_seq6));
        slowsort_recursive(g_seq7.clone(), 0, 4);
        println!("{}", format!("{:?}", g_seq7));
        slowsort_recursive(g_seq8.clone(), 5, ((g_seq8.len() as i64) - 1));
        println!("{}", format!("{:?}", g_seq8));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
