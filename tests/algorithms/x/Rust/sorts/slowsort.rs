// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn swap(seq: &mut Vec<i64>, mut i: i64, mut j: i64) {
    let temp: i64 = seq[i as usize];
    (*seq)[i as usize] = seq[j as usize];
    (*seq)[j as usize] = temp;
};
    let mut slowsort_recursive = {
fn slowsort_recursive(mut swap: fn(&mut Vec<i64>, i64, i64), mut seq: Vec<i64>, mut start: i64, mut end_index: i64) {
    if (start >= end_index) {
        return
    }
    let mid: i64 = ((start + end_index) / 2);
    slowsort_recursive(swap, seq.clone(), start, mid);
    slowsort_recursive(swap, seq.clone(), (mid + 1), end_index);
    if (seq[end_index as usize] < seq[mid as usize]) {
        swap(&mut seq, end_index, mid);
    }
    slowsort_recursive(swap, seq.clone(), start, (end_index - 1));
}
|mut seq: Vec<i64>, mut start: i64, mut end_index: i64| { slowsort_recursive(swap, seq, start, end_index) }
};
    let mut slow_sort = |mut seq: Vec<i64>| -> Vec<i64> {
    if ((seq.len() as i64) > 0) {
        slowsort_recursive(seq.clone(), 0, ((seq.len() as i64) - 1));
    }
    return seq
};
    let seq1: Vec<i64> = vec![1, 6, 2, 5, 3, 4, 4, 5];
    println!("{}", format!("{:?}", slow_sort(seq1.clone())));
    let mut seq2: Vec<i64> = vec![];
    println!("{}", format!("{:?}", slow_sort(seq2.clone())));
    let seq3: Vec<i64> = vec![2];
    println!("{}", format!("{:?}", slow_sort(seq3.clone())));
    let seq4: Vec<i64> = vec![1, 2, 3, 4];
    println!("{}", format!("{:?}", slow_sort(seq4.clone())));
    let seq5: Vec<i64> = vec![4, 3, 2, 1];
    println!("{}", format!("{:?}", slow_sort(seq5.clone())));
    let seq6: Vec<i64> = vec![9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
    slowsort_recursive(seq6.clone(), 2, 7);
    println!("{}", format!("{:?}", seq6));
    let seq7: Vec<i64> = vec![9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
    slowsort_recursive(seq7.clone(), 0, 4);
    println!("{}", format!("{:?}", seq7));
    let seq8: Vec<i64> = vec![9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
    slowsort_recursive(seq8.clone(), 5, ((seq8.len() as i64) - 1));
    println!("{}", format!("{:?}", seq8));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
