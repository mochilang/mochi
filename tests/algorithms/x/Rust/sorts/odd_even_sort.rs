// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn odd_even_sort(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    let mut n = (arr.len() as i64);
    let mut sorted: bool = false;
    while (sorted == false) {
        sorted = true;
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let mut tmp: i64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = tmp;
                sorted = false;
            }
            j = (j + 2);
        }
        j = 1;
        while (j < (n - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let mut tmp: i64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = tmp;
                sorted = false;
            }
            j = (j + 2);
        }
    }
    return arr
};
    fn print_list(mut xs: Vec<i64>) {
    let mut i: i64 = 0;
    let mut out: String = String::from("").clone();
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            out = format!("{}{}", out, " ");
        }
        out = format!("{}{}", out, xs[i as usize].to_string());
        i = (i + 1);
    }
    println!("{}", out);
};
    fn test_odd_even_sort() {
    let mut a: Vec<i64> = vec![5, 4, 3, 2, 1];
    let mut r1: Vec<i64> = odd_even_sort(a.clone());
    if (((((r1[0 as usize] != 1) || (r1[1 as usize] != 2)) || (r1[2 as usize] != 3)) || (r1[3 as usize] != 4)) || (r1[4 as usize] != 5)) {
        panic!("case1 failed");
    }
    let mut b: Vec<i64> = vec![];
    let mut r2: Vec<i64> = odd_even_sort(b.clone());
    if ((r2.len() as i64) != 0) {
        panic!("case2 failed");
    }
    let mut c: Vec<i64> = vec![-10, -1, 10, 2];
    let mut r3: Vec<i64> = odd_even_sort(c.clone());
    if ((((r3[0 as usize] != -10) || (r3[1 as usize] != -1)) || (r3[2 as usize] != 2)) || (r3[3 as usize] != 10)) {
        panic!("case3 failed");
    }
    let mut d: Vec<i64> = vec![1, 2, 3, 4];
    let mut r4: Vec<i64> = odd_even_sort(d.clone());
    if ((((r4[0 as usize] != 1) || (r4[1 as usize] != 2)) || (r4[2 as usize] != 3)) || (r4[3 as usize] != 4)) {
        panic!("case4 failed");
    }
};
    fn mochi_main() {
    test_odd_even_sort();
    let mut sample: Vec<i64> = vec![5, 4, 3, 2, 1];
    let mut sorted: Vec<i64> = odd_even_sort(sample.clone());
    print_list(sorted.clone());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
