// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn swap(mut xs: Vec<f64>, mut i: i64, mut j: i64) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut k: i64 = 0;
    while (k < (xs.len() as i64)) {
        if (k == i) {
            res = { let mut _v = res.clone(); _v.push(xs[j as usize]); _v };
        } else if (k == j) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[k as usize]); _v };
        }
        k = (k + 1);
    }
    return res
};
    fn wiggle_sort(mut nums: Vec<f64>) -> Vec<f64> {
    let mut i: i64 = 0;
    let mut res: Vec<f64> = nums.clone();
    while (i < (res.len() as i64)) {
        let mut j = if (i == 0) { ((res.len() as i64) - 1) } else { (i - 1) };
        let mut prev: f64 = res[j as usize];
        let mut curr: f64 = res[i as usize];
        if ((((i % 2) == 1) as f64) == (prev > curr)) {
            res = swap(res.clone(), j, i);
        }
        i = (i + 1);
    }
    return res
};
    println!("{}", format!("{:?}", wiggle_sort(vec![3.0, 5.0, 2.0, 1.0, 6.0, 4.0])));
    println!("{}", format!("{:?}", wiggle_sort(vec![0.0, 5.0, 3.0, 2.0, 2.0])));
    println!("{}", format!("{:?}", wiggle_sort(vec![])));
    println!("{}", format!("{:?}", wiggle_sort(vec![-2.0, -5.0, -45.0])));
    println!("{}", format!("{:?}", wiggle_sort(vec![-2.1, -5.68, -45.11])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
