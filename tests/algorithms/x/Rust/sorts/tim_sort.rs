// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_sample: Vec<i64> = Vec::new();
static mut g_sample2: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_sample = vec![5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7];
        g_sample2 = vec![3, 2, 1];
                let _start: i64 = _now();
        unsafe fn copy_list(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut k: i64 = 0;
    while (k < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(xs[k as usize]); _v };
        k = (k + 1);
    }
    return res
};
        unsafe fn insertion_sort(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = copy_list(xs.clone());
    let mut idx: i64 = 1;
    while (idx < (arr.len() as i64)) {
        let mut value: i64 = arr[idx as usize];
        let mut jdx: i64 = (idx - 1);
        while ((jdx >= 0) && (arr[jdx as usize] > value)) {
            arr[(jdx + 1) as usize] = arr[jdx as usize];
            jdx = (jdx - 1);
        }
        arr[(jdx + 1) as usize] = value;
        idx = (idx + 1);
    }
    return arr
};
        unsafe fn merge(mut left: Vec<i64>, mut right: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    while ((i < (left.len() as i64)) && (j < (right.len() as i64))) {
        if (left[i as usize] < right[j as usize]) {
            result = { let mut _v = result.clone(); _v.push(left[i as usize]); _v };
            i = (i + 1);
        } else {
            result = { let mut _v = result.clone(); _v.push(right[j as usize]); _v };
            j = (j + 1);
        }
    }
    while (i < (left.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(left[i as usize]); _v };
        i = (i + 1);
    }
    while (j < (right.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(right[j as usize]); _v };
        j = (j + 1);
    }
    return result
};
        unsafe fn tim_sort(mut xs: Vec<i64>) -> Vec<i64> {
    let mut n = (xs.len() as i64);
    let mut runs: Vec<Vec<i64>> = vec![];
    let mut sorted_runs: Vec<Vec<i64>> = vec![];
    let mut current: Vec<i64> = vec![];
    current = { let mut _v = current.clone(); _v.push(xs[0 as usize]); _v };
    let mut i: i64 = 1;
    while (i < n) {
        if (xs[i as usize] < xs[(i - 1) as usize]) {
            runs = { let mut _v = runs.clone(); _v.push(copy_list(current.clone())); _v };
            current = vec![];
            current = { let mut _v = current.clone(); _v.push(xs[i as usize]); _v };
        } else {
            current = { let mut _v = current.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    runs = { let mut _v = runs.clone(); _v.push(copy_list(current.clone())); _v };
    let mut r: i64 = 0;
    while (r < (runs.len() as i64)) {
        sorted_runs = { let mut _v = sorted_runs.clone(); _v.push(insertion_sort(runs[r as usize].clone())); _v };
        r = (r + 1);
    }
    let mut result: Vec<i64> = vec![];
    r = 0;
    while (r < (sorted_runs.len() as i64)) {
        result = merge(result.clone(), sorted_runs[r as usize].clone());
        r = (r + 1);
    }
    return result
};
        unsafe fn list_to_string(mut xs: Vec<i64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut k: i64 = 0;
    while (k < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[k as usize].to_string());
        if (k < ((xs.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        k = (k + 1);
    }
    return format!("{}{}", s, "]").clone()
};
        let mut sorted_sample: Vec<i64> = tim_sort(g_sample.clone());
        println!("{}", list_to_string(sorted_sample.clone()));
        let mut sorted_sample2: Vec<i64> = tim_sort(g_sample2.clone());
        println!("{}", list_to_string(sorted_sample2.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
