// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn isqrt(mut n: i64) -> i64 {
    let mut r: i64 = 0;
    while (((r + 1) * (r + 1)) <= n) {
        r = (r + 1);
    }
    return r
};
    fn is_prime(mut number: i64) -> bool {
    if ((1 < number) && (number < 4)) {
        return true
    } else if (((number < 2) || ((number % 2) == 0)) || ((number % 3) == 0)) {
        return false
    }
    let limit: i64 = isqrt(number);
    let mut i: i64 = 5;
    while (i <= limit) {
        if (((number % i) == 0) || ((number % (i + 2)) == 0)) {
            return false
        }
        i = (i + 6);
    }
    return true
};
    fn solution(mut nth: i64) -> i64 {
    let mut count: i64 = 0;
    let mut number: i64 = 1;
    while ((count != nth) && (number < 3)) {
        number = (number + 1);
        if is_prime(number) {
            count = (count + 1);
        }
    }
    while (count != nth) {
        number = (number + 2);
        if is_prime(number) {
            count = (count + 1);
        }
    }
    return number
};
    fn mochi_main() {
    println!("{}", format!("{}{}", "solution() = ", solution(10001).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
