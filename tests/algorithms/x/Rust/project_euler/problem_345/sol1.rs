// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_MATRIX_2: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_MATRIX_2 = vec![String::from("7 53 183 439 863 497 383 563 79 973 287 63 343 169 583").clone().clone(), String::from("627 343 773 959 943 767 473 103 699 303 957 703 583 639 913").clone().clone(), String::from("447 283 463 29 23 487 463 993 119 883 327 493 423 159 743").clone().clone(), String::from("217 623 3 399 853 407 103 983 89 463 290 516 212 462 350").clone().clone(), String::from("960 376 682 962 300 780 486 502 912 800 250 346 172 812 350").clone().clone(), String::from("870 456 192 162 593 473 915 45 989 873 823 965 425 329 803").clone().clone(), String::from("973 965 905 919 133 673 665 235 509 613 673 815 165 992 326").clone().clone(), String::from("322 148 972 962 286 255 941 541 265 323 925 281 601 95 973").clone().clone(), String::from("445 721 11 525 473 65 511 164 138 672 18 428 154 448 848").clone().clone(), String::from("414 456 310 312 798 104 566 520 302 248 694 976 430 392 198").clone().clone(), String::from("184 829 373 181 631 101 969 613 840 740 778 458 284 760 390").clone().clone(), String::from("821 461 843 513 17 901 711 993 293 157 274 94 192 156 574").clone().clone(), String::from("34 124 4 878 450 476 712 914 838 669 875 299 823 329 699").clone().clone(), String::from("815 559 813 459 522 788 168 586 966 232 308 833 251 631 107").clone().clone(), String::from("813 883 451 509 615 77 281 613 459 205 380 274 302 35 805").clone().clone()];
                let _start: i64 = _now();
        unsafe fn parse_row(row_str: &str) -> Vec<i64> {
    let mut nums: Vec<i64> = vec![];
    let mut current: i64 = 0;
    let mut has_digit: bool = false;
    let mut i: i64 = 0;
    while (i < (row_str.len() as i64)) {
        let mut ch: String = { let tmp = &row_str; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == " ") {
            if has_digit {
                nums = { let mut _v = nums.clone(); _v.push(current); _v };
                current = 0;
                has_digit = false;
            }
        } else {
            current = ((current * 10) + { let n: i64 = ch.parse().unwrap(); n });
            has_digit = true;
        }
        i = (i + 1);
    }
    if has_digit {
        nums = { let mut _v = nums.clone(); _v.push(current); _v };
    }
    return nums
};
        unsafe fn parse_matrix(mut matrix_str: Vec<String>) -> Vec<Vec<i64>> {
    let mut matrix: Vec<Vec<i64>> = vec![];
    for row_str in matrix_str.iter().cloned() {
        let mut row: Vec<i64> = parse_row(&row_str);
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
    }
    return matrix
};
        unsafe fn bitcount(mut x: i64) -> i64 {
    let mut count: i64 = 0;
    let mut y: i64 = x;
    while (y > 0) {
        if ((y % 2) == 1) {
            count = (count + 1);
        }
        y = (y / 2);
    }
    return count
};
        unsafe fn build_powers(mut n: i64) -> Vec<i64> {
    let mut powers: Vec<i64> = vec![];
    let mut i: i64 = 0;
    let mut current: i64 = 1;
    while (i <= n) {
        powers = { let mut _v = powers.clone(); _v.push(current); _v };
        current = (current * 2);
        i = (i + 1);
    }
    return powers
};
        unsafe fn solution(mut matrix_str: Vec<String>) -> i64 {
    let mut arr: Vec<Vec<i64>> = parse_matrix(matrix_str.clone());
    let mut n = (arr.len() as i64);
    let mut powers: Vec<i64> = build_powers(n);
    let mut size: i64 = powers[n as usize];
    let mut dp: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        dp = { let mut _v = dp.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut mask: i64 = 0;
    while (mask < size) {
        let mut row: i64 = bitcount(mask);
        if (row < n) {
            let mut col: i64 = 0;
            while (col < n) {
                if (((mask / powers[col as usize]) % 2) == 0) {
                    let mut new_mask: i64 = (mask + powers[col as usize]);
                    let mut value: i64 = (dp[mask as usize] + arr[row as usize].clone()[col as usize]);
                    if (value > dp[new_mask as usize]) {
                        dp[new_mask as usize] = value;
                    }
                }
                col = (col + 1);
            }
        }
        mask = (mask + 1);
    }
    return dp[(size - 1) as usize]
};
        let mut result: i64 = solution(g_MATRIX_2.clone());
        println!("{}", format!("{}{}", "solution() = ", result.to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
