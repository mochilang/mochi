// Generated by Mochi transpiler v0.10.70
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn read_file(path: &str) -> String {
    std::fs::read_to_string(path).unwrap_or_else(|_| String::new())
}
fn ord(s: &str) -> i64 {
    s.chars().next().map(|c| c as i64).unwrap_or(0)
}
fn main() {
        let _start: i64 = _now();
    fn triangular_numbers(mut limit: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut n: i64 = 1;
    while (n <= limit) {
        res = { let mut _v = res.clone(); _v.push(((n * (n + 1)) / 2)); _v };
        n = (n + 1);
    }
    return res
};
    fn parse_words(mut text: String) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut current: String = String::new();
    let mut i: i64 = 0;
    while (i < (text.len() as i64)) {
        let c: String = text.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        if (c.as_str() == ",") {
            words = { let mut _v = words.clone(); _v.push(current.clone()); _v };
            current = String::new();
        } else if (c.as_str() == "\"") {
        } else if ((c.as_str() == "\r") || (c.as_str() == "\n")) {
        } else {
            current = format!("{}{}", current, c);
        }
        i = (i + 1);
    }
    if ((current.len() as i64) > 0) {
        words = { let mut _v = words.clone(); _v.push(current.clone()); _v };
    }
    return words
};
    fn word_value(mut word: String) -> i64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (word.len() as i64)) {
        total = ((total + ord(word.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().as_str())) - 64);
        i = (i + 1);
    }
    return total
};
    fn contains(mut xs: Vec<i64>, mut target: i64) -> bool {
    for x in xs.iter().cloned() {
        if (x == target) {
            return true
        }
    }
    return false
};
    fn solution() -> i64 {
    let text: String = read_file("words.txt").clone();
    let words: Vec<String> = parse_words(text.clone());
    let tri: Vec<i64> = triangular_numbers(100);
    let mut count: i64 = 0;
    for w in words.iter().cloned() {
        let v: i64 = word_value(w.clone());
        if contains(tri.clone(), v) {
            count = (count + 1);
        }
    }
    return count
};
    println!("{}", solution().to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
