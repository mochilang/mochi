// Generated by Mochi transpiler v0.10.71
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    let grid: Vec<Vec<i64>> = vec![vec![8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8].clone(), vec![49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0].clone(), vec![81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65].clone(), vec![52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91].clone(), vec![22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80].clone(), vec![24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50].clone(), vec![32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70].clone(), vec![67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21].clone(), vec![24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72].clone(), vec![21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95].clone(), vec![78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92].clone(), vec![16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57].clone(), vec![86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58].clone(), vec![19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40].clone(), vec![4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66].clone(), vec![88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69].clone(), vec![4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36].clone(), vec![20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16].clone(), vec![20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54].clone(), vec![1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48].clone()];
    let mut max_product_four = |mut grid: Vec<Vec<i64>>| -> i64 {
    let mut maximum: i64 = 0;
    let mut i: i64 = 0;
    while (i < 20) {
        let mut j: i64 = 0;
        while (j < 17) {
            let temp: i64 = (((grid[i as usize].clone()[j as usize] * grid[i as usize].clone()[(j + 1) as usize]) * grid[i as usize].clone()[(j + 2) as usize]) * grid[i as usize].clone()[(j + 3) as usize]);
            if (temp > maximum) {
                maximum = temp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    i = 0;
    while (i < 17) {
        let mut j: i64 = 0;
        while (j < 20) {
            let temp: i64 = (((grid[i as usize].clone()[j as usize] * grid[(i + 1) as usize].clone()[j as usize]) * grid[(i + 2) as usize].clone()[j as usize]) * grid[(i + 3) as usize].clone()[j as usize]);
            if (temp > maximum) {
                maximum = temp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    i = 0;
    while (i < 17) {
        let mut j: i64 = 0;
        while (j < 17) {
            let temp: i64 = (((grid[i as usize].clone()[j as usize] * grid[(i + 1) as usize].clone()[(j + 1) as usize]) * grid[(i + 2) as usize].clone()[(j + 2) as usize]) * grid[(i + 3) as usize].clone()[(j + 3) as usize]);
            if (temp > maximum) {
                maximum = temp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    i = 0;
    while (i < 17) {
        let mut j: i64 = 3;
        while (j < 20) {
            let temp: i64 = (((grid[i as usize].clone()[j as usize] * grid[(i + 1) as usize].clone()[(j - 1) as usize]) * grid[(i + 2) as usize].clone()[(j - 2) as usize]) * grid[(i + 3) as usize].clone()[(j - 3) as usize]);
            if (temp > maximum) {
                maximum = temp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return maximum
};
    println!("{}", max_product_four(grid.clone()).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
