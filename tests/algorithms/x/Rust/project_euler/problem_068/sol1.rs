// Generated by Mochi transpiler v0.10.70
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn range_desc(mut start: i64, mut end: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = start;
    while (i >= end) {
        res = { let mut _v = res.clone(); _v.push(i); _v };
        i = (i - 1);
    }
    return res
};
    fn range_asc(mut start: i64, mut end: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = start;
    while (i <= end) {
        res = { let mut _v = res.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    return res
};
    fn concat_lists(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = a.clone();
    let mut i: i64 = 0;
    while (i < (b.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(b[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn swap(mut xs: Vec<i64>, mut i: i64, mut j: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut k: i64 = 0;
    while (k < (xs.len() as i64)) {
        if (k == i) {
            res = { let mut _v = res.clone(); _v.push(xs[j as usize]); _v };
        } else if (k == j) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[k as usize]); _v };
        }
        k = (k + 1);
    }
    return res
};
    fn generate_gon_ring(mut gon_side: i64, mut perm: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    result = { let mut _v = result.clone(); _v.push(perm[0 as usize]); _v };
    result = { let mut _v = result.clone(); _v.push(perm[1 as usize]); _v };
    result = { let mut _v = result.clone(); _v.push(perm[2 as usize]); _v };
    let mut extended: Vec<i64> = { let mut _v = perm.clone(); _v.push(perm[1 as usize]); _v };
    let magic_number: i64 = if (gon_side < 5) { 1 } else { 2 };
    let mut i: i64 = 1;
    while (i < (((extended.len() as i64) / 3) + magic_number)) {
        result = { let mut _v = result.clone(); _v.push(extended[((2 * i) + 1) as usize]); _v };
        result = { let mut _v = result.clone(); _v.push(result[((3 * i) - 1) as usize]); _v };
        result = { let mut _v = result.clone(); _v.push(extended[((2 * i) + 2) as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn min_outer(mut numbers: Vec<i64>) -> i64 {
    let mut min_val: i64 = numbers[0 as usize];
    let mut i: i64 = 3;
    while (i < (numbers.len() as i64)) {
        if (numbers[i as usize] < min_val) {
            min_val = numbers[i as usize];
        }
        i = (i + 3);
    }
    return min_val
};
    fn is_magic_gon(mut numbers: Vec<i64>) -> bool {
    if (((numbers.len() as i64) % 3) != 0) {
        return false
    }
    if (min_outer(numbers.clone()) != numbers[0 as usize]) {
        return false
    }
    let total: i64 = ((numbers[0 as usize] + numbers[1 as usize]) + numbers[2 as usize]);
    let mut i: i64 = 3;
    while (i < (numbers.len() as i64)) {
        if (((numbers[i as usize] + numbers[(i + 1) as usize]) + numbers[(i + 2) as usize]) != total) {
            return false
        }
        i = (i + 3);
    }
    return true
};
    fn permute_search(mut nums: Vec<i64>, mut start: i64, mut gon_side: i64, mut current_max: String) -> String {
    if (start == (nums.len() as i64)) {
        let ring: Vec<i64> = generate_gon_ring(gon_side, nums.clone());
        if is_magic_gon(ring.clone()) {
            let mut s: String = String::new();
            let mut k: i64 = 0;
            while (k < (ring.len() as i64)) {
                s = format!("{}{}", s, ring[k as usize].to_string());
                k = (k + 1);
            }
            if (s.as_str() > current_max.as_str()) {
                return s
            }
        }
        return current_max
    }
    let mut res: String = current_max.clone();
    let mut i: i64 = start;
    while (i < (nums.len() as i64)) {
        let swapped: Vec<i64> = swap(nums.clone(), start, i);
        let candidate: String = permute_search(swapped.clone(), (start + 1), gon_side, res.clone()).clone();
        if (candidate.as_str() > res.as_str()) {
            res = candidate.clone();
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn solution(mut gon_side: i64) -> String {
    if ((gon_side < 3) || (gon_side > 5)) {
        return String::new()
    }
    let small: Vec<i64> = range_desc((gon_side + 1), 1);
    let big: Vec<i64> = range_asc((gon_side + 2), (gon_side * 2));
    let numbers: Vec<i64> = concat_lists(small.clone(), big.clone());
    let max_str: String = permute_search(numbers.clone(), 0, gon_side, String::new()).clone();
    return max_str.clone()
};
    println!("{}", solution(5));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
