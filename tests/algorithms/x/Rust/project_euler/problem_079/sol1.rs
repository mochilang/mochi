// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_logins1: Vec<String> = Vec::new();
static mut g_logins2: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_logins1 = vec![String::from("135").clone().clone(), String::from("259").clone().clone(), String::from("235").clone().clone(), String::from("189").clone().clone(), String::from("690").clone().clone(), String::from("168").clone().clone(), String::from("120").clone().clone(), String::from("136").clone().clone(), String::from("289").clone().clone(), String::from("589").clone().clone(), String::from("160").clone().clone(), String::from("165").clone().clone(), String::from("580").clone().clone(), String::from("369").clone().clone(), String::from("250").clone().clone(), String::from("280").clone().clone()];
        g_logins2 = vec![String::from("426").clone().clone(), String::from("281").clone().clone(), String::from("061").clone().clone(), String::from("819").clone().clone(), String::from("268").clone().clone(), String::from("406").clone().clone(), String::from("420").clone().clone(), String::from("428").clone().clone(), String::from("209").clone().clone(), String::from("689").clone().clone(), String::from("019").clone().clone(), String::from("421").clone().clone(), String::from("469").clone().clone(), String::from("261").clone().clone(), String::from("681").clone().clone(), String::from("201").clone().clone()];
                let _start: i64 = _now();
        unsafe fn parse_int(s: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
        unsafe fn join(mut xs: Vec<String>) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].clone());
        i = (i + 1);
    }
    return s.clone()
};
        unsafe fn contains(mut xs: Vec<String>, c: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == c) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn index_of(mut xs: Vec<String>, c: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == c) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn remove_at(mut xs: Vec<String>, mut idx: i64) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i != idx) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
        unsafe fn unique_chars(mut logins: Vec<String>) -> Vec<String> {
    let mut chars: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (logins.len() as i64)) {
        let mut login: String = logins[i as usize].clone().clone();
        let mut j: i64 = 0;
        while (j < (login.len() as i64)) {
            let mut c: String = login.chars().nth(j as usize).unwrap().to_string().clone();
            if !contains(chars.clone(), &c) {
                chars = { let mut _v = chars.clone(); _v.push(c.clone()); _v };
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return chars
};
        unsafe fn satisfies(mut permutation: Vec<String>, mut logins: Vec<String>) -> bool {
    let mut i: i64 = 0;
    while (i < (logins.len() as i64)) {
        let mut login: String = logins[i as usize].clone().clone();
        let mut i0: i64 = index_of(permutation.clone(), &login.chars().nth(0 as usize).unwrap().to_string());
        let mut i1: i64 = index_of(permutation.clone(), &login.chars().nth(1 as usize).unwrap().to_string());
        let mut i2: i64 = index_of(permutation.clone(), &login.chars().nth(2 as usize).unwrap().to_string());
        if !((i0 < i1) && (i1 < i2)) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn search(mut chars: Vec<String>, current: &mut Vec<String>, logins: &mut Vec<String>) -> String {
    if ((chars.len() as i64) == 0) {
        if satisfies(current.clone(), logins.clone()) {
            return join(current.clone())
        }
        return String::from("")
    }
    let mut i: i64 = 0;
    while (i < (chars.len() as i64)) {
        let mut c: String = chars[i as usize].clone().clone();
        let mut rest: Vec<String> = remove_at(chars.clone(), i);
        let mut next: Vec<String> = { let mut _v = current.clone(); _v.push(c.clone()); _v };
        let mut res: String = search(rest.clone(), &mut next, logins).clone();
        if (res.as_str() != "") {
            return res
        }
        i = (i + 1);
    }
    return String::from("").clone()
};
        unsafe fn find_secret_passcode(mut logins: Vec<String>) -> i64 {
    let mut chars: Vec<String> = unique_chars(logins.clone());
    let mut s: String = search(chars.clone(), &mut vec![], &mut logins).clone();
    if (s.as_str() == "") {
        return -1
    }
    return parse_int(&s)
};
        println!("{}", find_secret_passcode(g_logins1.clone()).to_string());
        println!("{}", find_secret_passcode(g_logins2.clone()).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
