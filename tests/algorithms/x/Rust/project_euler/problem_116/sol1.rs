// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn solution(mut length: i64) -> i64 {
    let mut ways: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i <= length) {
        let mut row: Vec<i64> = vec![];
        row = { let mut _v = row.clone(); _v.push(0); _v };
        row = { let mut _v = row.clone(); _v.push(0); _v };
        row = { let mut _v = row.clone(); _v.push(0); _v };
        ways = { let mut _v = ways.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut row_length: i64 = 0;
    while (row_length <= length) {
        let mut tile_length: i64 = 2;
        while (tile_length <= 4) {
            let mut tile_start: i64 = 0;
            while (tile_start <= (row_length - tile_length)) {
                let mut remaining: i64 = ((row_length - tile_start) - tile_length);
                ways[row_length as usize][(tile_length - 2) as usize] = ((ways[row_length as usize].clone()[(tile_length - 2) as usize] + ways[remaining as usize].clone()[(tile_length - 2) as usize]) + 1);
                tile_start = (tile_start + 1);
            }
            tile_length = (tile_length + 1);
        }
        row_length = (row_length + 1);
    }
    let mut total: i64 = 0;
    let mut j: i64 = 0;
    while (j < 3) {
        total = (total + ways[length as usize].clone()[j as usize]);
        j = (j + 1);
    }
    return total
};
    println!("{}", solution(5));
    println!("{}", solution(50));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
