// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<i64>, mut value: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == value) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn solution(mut n: i64) -> i64 {
    let mut zmulti: Vec<i64> = vec![];
    let mut xmulti: Vec<i64> = vec![];
    let mut temp: i64 = 1;
    loop {
        let result: i64 = (3 * temp);
        if (result < n) {
            zmulti = { let mut _v = zmulti.clone(); _v.push(result); _v };
            temp = (temp + 1);
        } else {
            break
        }
    }
    temp = 1;
    loop {
        let result: i64 = (5 * temp);
        if (result < n) {
            xmulti = { let mut _v = xmulti.clone(); _v.push(result); _v };
            temp = (temp + 1);
        } else {
            break
        }
    }
    let mut collection: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (zmulti.len() as i64)) {
        let v: i64 = zmulti[i as usize];
        if !contains(collection.clone(), v) {
            collection = { let mut _v = collection.clone(); _v.push(v); _v };
        }
        i = (i + 1);
    }
    i = 0;
    while (i < (xmulti.len() as i64)) {
        let v: i64 = xmulti[i as usize];
        if !contains(collection.clone(), v) {
            collection = { let mut _v = collection.clone(); _v.push(v); _v };
        }
        i = (i + 1);
    }
    let mut total: i64 = 0;
    i = 0;
    while (i < (collection.len() as i64)) {
        total = (total + collection[i as usize]);
        i = (i + 1);
    }
    return total
};
    fn test_solution() {
    if (solution(3) != 0) {
        panic!("solution(3) failed");
    }
    if (solution(4) != 3) {
        panic!("solution(4) failed");
    }
    if (solution(10) != 23) {
        panic!("solution(10) failed");
    }
    if (solution(600) != 83700) {
        panic!("solution(600) failed");
    }
};
    fn mochi_main() {
    test_solution();
    println!("{}", format!("{}{}", "solution() = ", solution(1000).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
