// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_j: i64 = 0;
fn main() {
    unsafe {
        g_j = 0;
                let _start: i64 = _now();
        unsafe fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = if (a < 0) { -a } else { a };
    let mut y: i64 = if (b < 0) { -b } else { b };
    while (y != 0) {
        let mut t: i64 = (x % y);
        x = y;
        y = t;
    }
    return x
};
        unsafe fn extended_gcd(mut a: i64, mut b: i64) -> Vec<i64> {
    if (b == 0) {
        return vec![a, 1, 0]
    }
    let mut res: Vec<i64> = extended_gcd(b, (a % b));
    let mut d: i64 = res[0 as usize];
    let mut p: i64 = res[1 as usize];
    let mut q: i64 = res[2 as usize];
    let mut x: i64 = q;
    let mut y: i64 = (p - (q * (a / b)));
    return vec![d, x, y]
};
        unsafe fn diophantine(mut a: i64, mut b: i64, mut c: i64) -> Vec<i64> {
    let mut d: i64 = gcd(a, b);
    if ((c % d) != 0) {
        panic!("No solution");
    }
    let mut eg: Vec<i64> = extended_gcd(a, b);
    let mut r: i64 = (c / d);
    let mut x: i64 = (eg[1 as usize] * r);
    let mut y: i64 = (eg[2 as usize] * r);
    return vec![x, y]
};
        unsafe fn diophantine_all_soln(mut a: i64, mut b: i64, mut c: i64, mut n: i64) -> Vec<Vec<i64>> {
    let mut base: Vec<i64> = diophantine(a, b, c);
    let mut x0: i64 = base[0 as usize];
    let mut y0: i64 = base[1 as usize];
    let mut d: i64 = gcd(a, b);
    let mut p: i64 = (a / d);
    let mut q: i64 = (b / d);
    let mut sols: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut x: i64 = (x0 + (i * q));
        let mut y: i64 = (y0 - (i * p));
        sols = { let mut _v = sols.clone(); _v.push(vec![x, y]); _v };
        i = (i + 1);
    }
    return sols
};
        let mut s1: Vec<i64> = diophantine(10, 6, 14);
        println!("{}", format!("{:?}", s1));
        let mut sols: Vec<Vec<i64>> = diophantine_all_soln(10, 6, 14, 4);
        while (g_j < (sols.len() as i64)) {
            println!("{}", format!("{:?}", sols[g_j as usize].clone()));
            g_j = (g_j + 1);
        }
        println!("{}", format!("{:?}", diophantine(391, 299, -69)));
        println!("{}", format!("{:?}", extended_gcd(10, 6)));
        println!("{}", format!("{:?}", extended_gcd(7, 5)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
