// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_img: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_img = vec![vec![1, 1, 1, 1, 1], vec![1, 255, 255, 255, 1], vec![1, 255, 0, 255, 1], vec![1, 255, 255, 255, 1], vec![1, 1, 1, 1, 1]];
                let _start: i64 = _now();
        unsafe fn zeros(mut h: i64, mut w: i64) -> Vec<Vec<f64>> {
    let mut m: Vec<Vec<f64>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<f64> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
            x = (x + 1);
        }
        m = { let mut _v = m.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return m
};
        unsafe fn gradient(mut img: Vec<Vec<i64>>) -> Vec<Vec<Vec<f64>>> {
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut dx: Vec<Vec<f64>> = zeros(h, w);
    let mut dy: Vec<Vec<f64>> = zeros(h, w);
    let mut y: i64 = 1;
    while (y < (h - 1)) {
        let mut x: i64 = 1;
        while (x < (w - 1)) {
            dx[y as usize][x as usize] = ((img[y as usize].clone()[(x + 1) as usize] as f64) - (img[y as usize].clone()[(x - 1) as usize] as f64));
            dy[y as usize][x as usize] = ((img[(y + 1) as usize].clone()[x as usize] as f64) - (img[(y - 1) as usize].clone()[x as usize] as f64));
            x = (x + 1);
        }
        y = (y + 1);
    }
    return vec![dx, dy]
};
        unsafe fn harris(mut img: Vec<Vec<i64>>, mut k: f64, mut window: i64, mut thresh: f64) -> Vec<Vec<i64>> {
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut grads: Vec<Vec<Vec<f64>>> = gradient(img.clone());
    let mut dx: Vec<Vec<f64>> = grads[0 as usize].clone();
    let mut dy: Vec<Vec<f64>> = grads[1 as usize].clone();
    let mut ixx: Vec<Vec<f64>> = zeros(h, w);
    let mut iyy: Vec<Vec<f64>> = zeros(h, w);
    let mut ixy: Vec<Vec<f64>> = zeros(h, w);
    let mut y: i64 = 0;
    while (y < h) {
        let mut x: i64 = 0;
        while (x < w) {
            let mut gx: f64 = dx[y as usize].clone()[x as usize];
            let mut gy: f64 = dy[y as usize].clone()[x as usize];
            ixx[y as usize][x as usize] = (gx * gx);
            iyy[y as usize][x as usize] = (gy * gy);
            ixy[y as usize][x as usize] = (gx * gy);
            x = (x + 1);
        }
        y = (y + 1);
    }
    let mut offset: i64 = (window / 2);
    let mut corners: Vec<Vec<i64>> = vec![];
    y = offset;
    while (y < (h - offset)) {
        let mut x: i64 = offset;
        while (x < (w - offset)) {
            let mut wxx: f64 = 0.0;
            let mut wyy: f64 = 0.0;
            let mut wxy: f64 = 0.0;
            let mut yy: i64 = (y - offset);
            while (yy <= (y + offset)) {
                let mut xx: i64 = (x - offset);
                while (xx <= (x + offset)) {
                    wxx = (wxx + ixx[yy as usize].clone()[xx as usize]);
                    wyy = (wyy + iyy[yy as usize].clone()[xx as usize]);
                    wxy = (wxy + ixy[yy as usize].clone()[xx as usize]);
                    xx = (xx + 1);
                }
                yy = (yy + 1);
            }
            let mut det: f64 = ((wxx * wyy) - (wxy * wxy));
            let mut trace: f64 = (wxx + wyy);
            let mut r: f64 = (det - (k * (trace * trace)));
            if (r > thresh) {
                corners = { let mut _v = corners.clone(); _v.push(vec![x, y]); _v };
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return corners
};
        let mut corners: Vec<Vec<i64>> = harris(g_img.clone().clone(), 0.04, 3, 10000000000.0);
        println!("{:?}", corners);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
