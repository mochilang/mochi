// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_image: Vec<Vec<i64>> = Vec::new();
static mut g_idx: i64 = 0;
fn main() {
    unsafe {
        g_image = vec![vec![0, 1, 0], vec![1, 0, 1], vec![0, 1, 0]];
        g_idx = 0;
                let _start: i64 = _now();
        unsafe fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
        unsafe fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn ln(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut e: f64 = 2.718281828;
    let mut n: i64 = 0;
    let mut y: f64 = x;
    while (y >= e) {
        y = (y / e);
        n = (n + 1);
    }
    while (y <= (1.0 / e)) {
        y = (y * e);
        n = (n - 1);
    }
    y = (y - 1.0);
    let mut term: f64 = y;
    let mut result: f64 = 0.0;
    let mut k: i64 = 1;
    while (k <= 20) {
        if ((k % 2) == 1) {
            result = (result + (term / (1.0 * (k as f64))));
        } else {
            result = (result - (term / (1.0 * (k as f64))));
        }
        term = (term * y);
        k = (k + 1);
    }
    return (result + (1.0 * (n as f64)))
};
        unsafe fn matrix_concurrency(mut image: Vec<Vec<i64>>, mut coord: Vec<i64>) -> Vec<Vec<f64>> {
    let mut offset_x: i64 = coord[0 as usize];
    let mut offset_y: i64 = coord[1 as usize];
    let mut max_val: i64 = 0;
    for r in 0..(image.len() as i64) {
        for c in 0..(image[r as usize].clone().len() as i64) {
            if (image[r as usize].clone()[c as usize] > max_val) {
                max_val = image[r as usize].clone()[c as usize];
            }
        }
    }
    let mut size: i64 = (max_val + 1);
    let mut matrix: Vec<Vec<f64>> = vec![];
    for i in 0..size {
        let mut row: Vec<f64> = vec![];
        for j in 0..size {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
        }
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
    }
    for x in 1..((image.len() as i64) - 1) {
        for y in 1..((image[x as usize].clone().len() as i64) - 1) {
            let mut base: i64 = image[x as usize].clone()[y as usize];
            let mut offset: i64 = image[(x + offset_x) as usize].clone()[(y + offset_y) as usize];
            matrix[base as usize][offset as usize] = (matrix[base as usize].clone()[offset as usize] + 1.0);
        }
    }
    let mut total: f64 = 0.0;
    for i in 0..size {
        for j in 0..size {
            total = (total + matrix[i as usize].clone()[j as usize]);
        }
    }
    if (total == 0.0) {
        return matrix
    }
    for i in 0..size {
        for j in 0..size {
            matrix[i as usize][j as usize] = (matrix[i as usize].clone()[j as usize] / total);
        }
    }
    return matrix
};
        unsafe fn haralick_descriptors(mut matrix: Vec<Vec<f64>>) -> Vec<f64> {
    let mut rows = (matrix.len() as i64);
    let mut cols = (matrix[0 as usize].clone().len() as i64);
    let mut maximum_prob: f64 = 0.0;
    let mut correlation: f64 = 0.0;
    let mut energy: f64 = 0.0;
    let mut contrast: f64 = 0.0;
    let mut dissimilarity: f64 = 0.0;
    let mut inverse_difference: f64 = 0.0;
    let mut homogeneity: f64 = 0.0;
    let mut entropy: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < rows) {
        let mut j: i64 = 0;
        while (j < cols) {
            let mut val: f64 = matrix[i as usize].clone()[j as usize];
            if (val > maximum_prob) {
                maximum_prob = val;
            }
            correlation = (correlation + (((1.0 * (i as f64)) * (j as f64)) * val));
            energy = (energy + (val * val));
            let mut diff: i64 = (i - j);
            let mut adiff: i64 = abs_int(diff);
            contrast = (contrast + (val * ((1.0 * (diff as f64)) * (diff as f64))));
            dissimilarity = (dissimilarity + (val * (1.0 * (adiff as f64))));
            inverse_difference = (inverse_difference + (val / (1.0 + (1.0 * (adiff as f64)))));
            homogeneity = (homogeneity + (val / (1.0 + ((1.0 * (diff as f64)) * (diff as f64)))));
            if (val > 0.0) {
                entropy = (entropy - (val * ln(val)));
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return vec![maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy]
};
        let mut glcm: Vec<Vec<f64>> = matrix_concurrency(g_image.clone().clone(), vec![0, 1]);
        let mut descriptors: Vec<f64> = haralick_descriptors(glcm.clone());
        while (g_idx < (descriptors.len() as i64)) {
            println!("{}", descriptors[g_idx as usize].to_string());
            g_idx = (g_idx + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
