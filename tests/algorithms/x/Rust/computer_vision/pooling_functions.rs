// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn maxpooling(mut arr: Vec<Vec<i64>>, mut size: i64, mut stride: i64) -> Vec<Vec<i64>> {
    let mut n = (arr.len() as i64);
    if ((n == 0) || ((arr[0 as usize].clone().len() as i64) != n)) {
        panic!("The input array is not a square matrix");
    }
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while ((i + size) <= n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while ((j + size) <= n) {
            let mut max_val: i64 = arr[i as usize].clone()[j as usize];
            let mut r: i64 = i;
            while (r < (i + size)) {
                let mut c: i64 = j;
                while (c < (j + size)) {
                    let mut val: i64 = arr[r as usize].clone()[c as usize];
                    if (val > max_val) {
                        max_val = val;
                    }
                    c = (c + 1);
                }
                r = (r + 1);
            }
            row = { let mut _v = row.clone(); _v.push(max_val); _v };
            j = (j + stride);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + stride);
    }
    return result
};
    fn avgpooling(mut arr: Vec<Vec<i64>>, mut size: i64, mut stride: i64) -> Vec<Vec<i64>> {
    let mut n = (arr.len() as i64);
    if ((n == 0) || ((arr[0 as usize].clone().len() as i64) != n)) {
        panic!("The input array is not a square matrix");
    }
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while ((i + size) <= n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while ((j + size) <= n) {
            let mut sum: i64 = 0;
            let mut r: i64 = i;
            while (r < (i + size)) {
                let mut c: i64 = j;
                while (c < (j + size)) {
                    sum = (sum + arr[r as usize].clone()[c as usize]);
                    c = (c + 1);
                }
                r = (r + 1);
            }
            row = { let mut _v = row.clone(); _v.push((sum / (size * size))); _v };
            j = (j + stride);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + stride);
    }
    return result
};
    fn print_matrix(mut mat: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut line: String = String::from("");
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, mat[i as usize].clone()[j as usize].to_string());
            if (j < ((mat[i as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    fn mochi_main() {
    let mut arr1: Vec<Vec<i64>> = vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12], vec![13, 14, 15, 16]];
    let mut arr2: Vec<Vec<i64>> = vec![vec![147, 180, 122], vec![241, 76, 32], vec![126, 13, 157]];
    print_matrix(maxpooling(arr1.clone(), 2, 2));
    print_matrix(maxpooling(arr2.clone(), 2, 1));
    print_matrix(avgpooling(arr1.clone(), 2, 2));
    print_matrix(avgpooling(arr2.clone(), 2, 1));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
