// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_img: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_img = vec![vec![10, 200, 50], vec![100, 150, 30], vec![90, 80, 220]];
                let _start: i64 = _now();
        unsafe fn mean_threshold(mut image: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut height = (image.len() as i64);
    let mut width = (image[0 as usize].clone().len() as i64);
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < height) {
        let mut j: i64 = 0;
        while (j < width) {
            total = (total + image[i as usize].clone()[j as usize]);
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut mean: i64 = (total / (height * width));
    i = 0;
    while (i < height) {
        let mut j: i64 = 0;
        while (j < width) {
            if (image[i as usize].clone()[j as usize] > mean) {
                image[i as usize][j as usize] = 255;
            } else {
                image[i as usize][j as usize] = 0;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return image
};
        unsafe fn print_image(mut image: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (image.len() as i64)) {
        println!("{:?}", image[i as usize].clone());
        i = (i + 1);
    }
};
        let mut result: Vec<Vec<i64>> = mean_threshold(g_img.clone().clone());
        print_image(result.clone());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
