// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_image: Vec<Vec<i64>> = Vec::new();
static mut g_boxes: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_image = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];
        g_boxes = vec![vec![0.0, 0.25, 0.25, 0.5, 0.5], vec![1.0, 0.75, 0.75, 0.5, 0.5]];
                let _start: i64 = _now();
        unsafe fn flip_horizontal_image(mut img: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut flipped: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (img.len() as i64)) {
        let mut row: Vec<i64> = img[i as usize].clone();
        let mut j = ((row.len() as i64) - 1);
        let mut new_row: Vec<i64> = vec![];
        while (j >= 0) {
            new_row = { let mut _v = new_row.clone(); _v.push(row[j as usize]); _v };
            j = (j - 1);
        }
        flipped = { let mut _v = flipped.clone(); _v.push(new_row.clone()); _v };
        i = (i + 1);
    }
    return flipped
};
        unsafe fn flip_vertical_image(mut img: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut flipped: Vec<Vec<i64>> = vec![];
    let mut i = ((img.len() as i64) - 1);
    while (i >= 0) {
        flipped = { let mut _v = flipped.clone(); _v.push(img[i as usize].clone()); _v };
        i = (i - 1);
    }
    return flipped
};
        unsafe fn flip_horizontal_boxes(mut boxes: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (boxes.len() as i64)) {
        let mut b: Vec<f64> = boxes[i as usize].clone();
        let mut x_new: f64 = (1.0 - b[1 as usize]);
        result = { let mut _v = result.clone(); _v.push(vec![b[0 as usize], x_new, b[2 as usize], b[3 as usize], b[4 as usize]]); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn flip_vertical_boxes(mut boxes: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (boxes.len() as i64)) {
        let mut b: Vec<f64> = boxes[i as usize].clone();
        let mut y_new: f64 = (1.0 - b[2 as usize]);
        result = { let mut _v = result.clone(); _v.push(vec![b[0 as usize], b[1 as usize], y_new, b[3 as usize], b[4 as usize]]); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn print_image(mut img: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (img.len() as i64)) {
        let mut row: Vec<i64> = img[i as usize].clone();
        let mut j: i64 = 0;
        let mut line: String = String::from("").clone();
        while (j < (row.len() as i64)) {
            line = format!("{}{}", format!("{}{}", line, row[j as usize].to_string()), " ");
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
        println!("{}", "Original image:");
        print_image(g_image.clone().clone());
        println!("{}", format!("{:?}", g_boxes.clone()));
        println!("{}", "Horizontal flip:");
        let mut h_img: Vec<Vec<i64>> = flip_horizontal_image(g_image.clone().clone());
        let mut h_boxes: Vec<Vec<f64>> = flip_horizontal_boxes(g_boxes.clone().clone());
        print_image(h_img.clone());
        println!("{}", format!("{:?}", h_boxes));
        println!("{}", "Vertical flip:");
        let mut v_img: Vec<Vec<i64>> = flip_vertical_image(g_image.clone().clone());
        let mut v_boxes: Vec<Vec<f64>> = flip_vertical_boxes(g_boxes.clone().clone());
        print_image(v_img.clone());
        println!("{}", format!("{:?}", v_boxes));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
