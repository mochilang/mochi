// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_image: Vec<Vec<f64>> = Vec::new();
static mut g_kernel: Vec<Vec<f64>> = Vec::new();
static mut g_weights: Vec<f64> = Vec::new();
static mut g_bias: f64 = 0.0;
fn main() {
    unsafe {
        g_image = vec![vec![0.0, 1.0, 1.0, 0.0, 0.0, 0.0], vec![0.0, 1.0, 1.0, 0.0, 0.0, 0.0], vec![0.0, 0.0, 1.0, 1.0, 0.0, 0.0], vec![0.0, 0.0, 1.0, 1.0, 0.0, 0.0], vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0], vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];
        g_kernel = vec![vec![1.0, 0.0, -1.0], vec![1.0, 0.0, -1.0], vec![1.0, 0.0, -1.0]];
        g_weights = vec![0.5, -0.4, 0.3, 0.1];
        g_bias = 0.0;
                let _start: i64 = _now();
        unsafe fn conv2d(mut image: Vec<Vec<f64>>, mut kernel: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut rows = (image.len() as i64);
    let mut cols = (image[0 as usize].clone().len() as i64);
    let mut k = (kernel.len() as i64);
    let mut output: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i <= (rows - k)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j <= (cols - k)) {
            let mut sum: f64 = 0.0;
            let mut ki: i64 = 0;
            while (ki < k) {
                let mut kj: i64 = 0;
                while (kj < k) {
                    sum = (sum + (image[(i + ki) as usize].clone()[(j + kj) as usize] * kernel[ki as usize].clone()[kj as usize]));
                    kj = (kj + 1);
                }
                ki = (ki + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        output = { let mut _v = output.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return output
};
        unsafe fn relu_matrix(mut m: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut out: Vec<Vec<f64>> = vec![];
    for row in m.iter() {
        let mut new_row: Vec<f64> = vec![];
        for v in row.iter().cloned() {
            if (v > 0.0) {
                new_row = { let mut _v = new_row.clone(); _v.push(v); _v };
            } else {
                new_row = { let mut _v = new_row.clone(); _v.push(0.0); _v };
            }
        }
        out = { let mut _v = out.clone(); _v.push(new_row.clone()); _v };
    }
    return out
};
        unsafe fn max_pool2x2(mut m: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut rows = (m.len() as i64);
    let mut cols = (m[0 as usize].clone().len() as i64);
    let mut out: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut new_row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            let mut max_val: f64 = m[i as usize].clone()[j as usize];
            if (m[i as usize].clone()[(j + 1) as usize] > max_val) {
                max_val = m[i as usize].clone()[(j + 1) as usize];
            }
            if (m[(i + 1) as usize].clone()[j as usize] > max_val) {
                max_val = m[(i + 1) as usize].clone()[j as usize];
            }
            if (m[(i + 1) as usize].clone()[(j + 1) as usize] > max_val) {
                max_val = m[(i + 1) as usize].clone()[(j + 1) as usize];
            }
            new_row = { let mut _v = new_row.clone(); _v.push(max_val); _v };
            j = (j + 2);
        }
        out = { let mut _v = out.clone(); _v.push(new_row.clone()); _v };
        i = (i + 2);
    }
    return out
};
        unsafe fn flatten(mut m: Vec<Vec<f64>>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    for row in m.iter() {
        for v in row.iter().cloned() {
            res = { let mut _v = res.clone(); _v.push(v); _v };
        }
    }
    return res
};
        unsafe fn dense(mut inputs: Vec<f64>, mut weights: Vec<f64>, mut bias: f64) -> f64 {
    let mut s: f64 = bias;
    let mut i: i64 = 0;
    while (i < (inputs.len() as i64)) {
        s = (s + (inputs[i as usize] * weights[i as usize]));
        i = (i + 1);
    }
    return s
};
        unsafe fn exp_approx(mut x: f64) -> f64 {
    let mut sum: f64 = 1.0;
    let mut term: f64 = 1.0;
    let mut i: i64 = 1;
    while (i <= 10) {
        term = ((term * x) / (i as f64));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        unsafe fn sigmoid(mut x: f64) -> f64 {
    return (1.0 / (1.0 + exp_approx(-x)))
};
        let mut conv: Vec<Vec<f64>> = conv2d(g_image.clone().clone(), g_kernel.clone().clone());
        let mut activated: Vec<Vec<f64>> = relu_matrix(conv.clone());
        let mut pooled: Vec<Vec<f64>> = max_pool2x2(activated.clone());
        let mut flat: Vec<f64> = flatten(pooled.clone());
        let mut output: f64 = dense(flat.clone(), g_weights.clone().clone(), g_bias);
        let mut probability: f64 = sigmoid(output);
        if (probability >= 0.5) {
            println!("{}", "Abnormality detected");
        } else {
            println!("{}", "Normal");
        }
        println!("{}", "Probability:");
        println!("{}", format!("{:?}", probability));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
