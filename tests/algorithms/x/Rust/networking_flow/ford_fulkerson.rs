// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_INF: i64 = 1000000000;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn breadth_first_search(mut graph: Vec<Vec<i64>>, mut source: i64, mut sink: i64, parent: &mut Vec<i64>) -> bool {
    let mut visited: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < (graph.len() as i64)) {
        visited = { let mut _v = visited.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    let mut queue: Vec<i64> = vec![];
    queue = { let mut _v = queue.clone(); _v.push(source); _v };
    visited[source as usize] = true;
    let mut head: i64 = 0;
    while (head < (queue.len() as i64)) {
        let u: i64 = queue[head as usize];
        head = (head + 1);
        let row: Vec<i64> = graph[u as usize].clone();
        let mut ind: i64 = 0;
        while (ind < (row.len() as i64)) {
            let capacity: i64 = row[ind as usize];
            if ((visited[ind as usize] == false) && (capacity > 0)) {
                queue = { let mut _v = queue.clone(); _v.push(ind); _v };
                visited[ind as usize] = true;
                (*parent)[ind as usize] = u;
            }
            ind = (ind + 1);
        }
    }
    return visited[sink as usize]
};
        fn ford_fulkerson(graph: &mut Vec<Vec<i64>>, mut source: i64, mut sink: i64) -> i64 {
    let mut parent: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (graph.len() as i64)) {
        parent = { let mut _v = parent.clone(); _v.push(-1); _v };
        i = (i + 1);
    }
    let mut max_flow: i64 = 0;
    while breadth_first_search(graph.clone(), source, sink, &mut parent) {
        let mut path_flow: i64 = unsafe { g_INF.clone() };
        let mut s: i64 = sink;
        while (s != source) {
            let prev: i64 = parent[s as usize];
            let cap: i64 = graph[prev as usize].clone()[s as usize];
            if (cap < path_flow) {
                path_flow = cap;
            }
            s = prev;
        }
        max_flow = (max_flow + path_flow);
        let mut v: i64 = sink;
        while (v != source) {
            let u: i64 = parent[v as usize];
            (*graph)[u as usize][v as usize] = (graph[u as usize].clone()[v as usize] - path_flow);
            (*graph)[v as usize][u as usize] = (graph[v as usize].clone()[u as usize] + path_flow);
            v = u;
        }
        let mut j: i64 = 0;
        while (j < (parent.len() as i64)) {
            parent[j as usize] = -1;
            j = (j + 1);
        }
    }
    return max_flow
};
        let mut graph: Vec<Vec<i64>> = vec![vec![0, 16, 13, 0, 0, 0].clone(), vec![0, 0, 10, 12, 0, 0].clone(), vec![0, 4, 0, 0, 14, 0].clone(), vec![0, 0, 9, 0, 0, 20].clone(), vec![0, 0, 0, 7, 0, 4].clone(), vec![0, 0, 0, 0, 0, 0].clone()];
        println!("{}", ford_fulkerson(&mut graph, 0, 5).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
