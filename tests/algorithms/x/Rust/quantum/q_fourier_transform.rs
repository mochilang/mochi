// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn to_bits(mut n: i64, mut width: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut num: i64 = n;
    let mut w: i64 = width;
    while (w > 0) {
        res = format!("{}{}", (num % 2).to_string(), res).to_string();
        num = (num / 2);
        w = (w - 1);
    }
    return res.clone()
};
    fn quantum_fourier_transform(mut number_of_qubits: i64) -> HashMap<String, i64> {
    if (number_of_qubits <= 0) {
        panic!("number of qubits must be > 0.");
    }
    if (number_of_qubits > 10) {
        panic!("number of qubits too large to simulate(>10).");
    }
    let mut shots: i64 = 10000;
    let mut states: i64 = 1;
    let mut p: i64 = 0;
    while (p < number_of_qubits) {
        states = (states * 2);
        p = (p + 1);
    }
    let mut per_state: i64 = (shots / states);
    let mut counts: HashMap<String, i64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < states) {
        counts.insert(to_bits(i, number_of_qubits).clone(), per_state);
        i = (i + 1);
    }
    return counts
};
    println!("{}", format!("{}{}", "Total count for quantum fourier transform state is: ", format!("{:?}", quantum_fourier_transform(3))));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
