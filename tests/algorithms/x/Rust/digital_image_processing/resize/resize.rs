// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn zeros3d(mut h: i64, mut w: i64, mut c: i64) -> Vec<Vec<Vec<i64>>> {
    let mut arr: Vec<Vec<Vec<i64>>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<Vec<i64>> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            let mut pixel: Vec<i64> = vec![];
            let mut k: i64 = 0;
            while (k < c) {
                pixel = { let mut _v = pixel.clone(); _v.push(0); _v };
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(pixel.clone()); _v };
            x = (x + 1);
        }
        arr = { let mut _v = arr.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return arr
};
    fn resize_nn(mut img: Vec<Vec<Vec<i64>>>, mut dst_w: i64, mut dst_h: i64) -> Vec<Vec<Vec<i64>>> {
    let mut src_h = (img.len() as i64);
    let mut src_w = (img[0 as usize].clone().len() as i64);
    let mut channels = (img[0 as usize].clone()[0 as usize].clone().len() as i64);
    let mut ratio_x: f64 = ((src_w as f64) / (dst_w as f64));
    let mut ratio_y: f64 = ((src_h as f64) / (dst_h as f64));
    let mut out: Vec<Vec<Vec<i64>>> = zeros3d(dst_h, dst_w, channels);
    let mut i: i64 = 0;
    while (i < dst_h) {
        let mut j: i64 = 0;
        while (j < dst_w) {
            let mut src_x: i64 = ((ratio_x * (j as f64)) as i64);
            let mut src_y: i64 = ((ratio_y * (i as f64)) as i64);
            out[i as usize][j as usize] = img[src_y as usize].clone()[src_x as usize].clone();
            j = (j + 1);
        }
        i = (i + 1);
    }
    return out
};
    fn mochi_main() {
    let mut img: Vec<Vec<Vec<i64>>> = vec![vec![vec![0, 0, 0], vec![255, 255, 255]], vec![vec![255, 0, 0], vec![0, 255, 0]]];
    let mut resized: Vec<Vec<Vec<i64>>> = resize_nn(img.clone(), 4, 4);
    println!("{:?}", resized);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
