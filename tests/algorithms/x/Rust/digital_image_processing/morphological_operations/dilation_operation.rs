// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn rgb_to_gray(mut rgb: Vec<Vec<Vec<i64>>>) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (rgb.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (rgb[i as usize].clone().len() as i64)) {
            let mut r: i64 = rgb[i as usize].clone()[j as usize].clone()[0 as usize];
            let mut g: i64 = rgb[i as usize].clone()[j as usize].clone()[1 as usize];
            let mut b: i64 = rgb[i as usize].clone()[j as usize].clone()[2 as usize];
            let mut gray: f64 = (((0.2989 * (1.0 * (r as f64))) + (0.587 * (1.0 * (g as f64)))) + (0.114 * (1.0 * (b as f64))));
            row = { let mut _v = row.clone(); _v.push(gray); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn gray_to_binary(mut gray: Vec<Vec<f64>>) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (gray.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (gray[i as usize].clone().len() as i64)) {
            let mut v: f64 = gray[i as usize].clone()[j as usize];
            if ((v > 127.0) && (v <= 255.0)) {
                row = { let mut _v = row.clone(); _v.push(1); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            }
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn dilation(mut image: Vec<Vec<i64>>, mut kernel: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut img_h = (image.len() as i64);
    let mut img_w = (image[0 as usize].clone().len() as i64);
    let mut k_h = (kernel.len() as i64);
    let mut k_w = (kernel[0 as usize].clone().len() as i64);
    let mut pad_h: i64 = (k_h / 2);
    let mut pad_w: i64 = (k_w / 2);
    let mut p_h: i64 = (img_h + (2 * pad_h));
    let mut p_w: i64 = (img_w + (2 * pad_w));
    let mut padded: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < p_h) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < p_w) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        padded = { let mut _v = padded.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < img_h) {
        let mut j: i64 = 0;
        while (j < img_w) {
            padded[(pad_h + i) as usize][(pad_w + j) as usize] = image[i as usize].clone()[j as usize];
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut output: Vec<Vec<i64>> = vec![];
    i = 0;
    while (i < img_h) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < img_w) {
            let mut sum: i64 = 0;
            let mut ky: i64 = 0;
            while (ky < k_h) {
                let mut kx: i64 = 0;
                while (kx < k_w) {
                    if (kernel[ky as usize].clone()[kx as usize] == 1) {
                        sum = (sum + padded[(i + ky) as usize].clone()[(j + kx) as usize]);
                    }
                    kx = (kx + 1);
                }
                ky = (ky + 1);
            }
            if (sum > 0) {
                row = { let mut _v = row.clone(); _v.push(1); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            }
            j = (j + 1);
        }
        output = { let mut _v = output.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return output
};
    fn print_float_matrix(mut mat: Vec<Vec<f64>>) {
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut line: String = String::from("");
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, mat[i as usize].clone()[j as usize].to_string());
            if (j < ((mat[i as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    fn print_int_matrix(mut mat: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut line: String = String::from("");
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, mat[i as usize].clone()[j as usize].to_string());
            if (j < ((mat[i as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    fn mochi_main() {
    let mut rgb_example: Vec<Vec<Vec<i64>>> = vec![vec![vec![127, 255, 0]]];
    print_float_matrix(rgb_to_gray(rgb_example.clone()));
    let mut gray_example: Vec<Vec<f64>> = vec![vec![26.0, 255.0, 14.0], vec![5.0, 147.0, 20.0], vec![1.0, 200.0, 0.0]];
    print_int_matrix(gray_to_binary(gray_example.clone()));
    let mut binary_image: Vec<Vec<i64>> = vec![vec![0, 1, 0], vec![0, 1, 0], vec![0, 1, 0]];
    let mut kernel: Vec<Vec<i64>> = vec![vec![0, 1, 0], vec![1, 1, 1], vec![0, 1, 0]];
    print_int_matrix(dilation(binary_image.clone(), kernel.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
