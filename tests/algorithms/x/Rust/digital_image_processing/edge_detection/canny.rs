// Generated by Mochi transpiler v0.10.61
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_GAUSSIAN_KERNEL: Vec<Vec<f64>> = Vec::new();
static mut g_SOBEL_GX: Vec<Vec<f64>> = Vec::new();
static mut g_SOBEL_GY: Vec<Vec<f64>> = Vec::new();
static mut g_image: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_GAUSSIAN_KERNEL = vec![vec![0.0625, 0.125, 0.0625], vec![0.125, 0.25, 0.125], vec![0.0625, 0.125, 0.0625]];
        g_SOBEL_GX = vec![vec![-1.0, 0.0, 1.0], vec![-2.0, 0.0, 2.0], vec![-1.0, 0.0, 1.0]];
        g_SOBEL_GY = vec![vec![1.0, 2.0, 1.0], vec![0.0, 0.0, 0.0], vec![-1.0, -2.0, -1.0]];
        g_image = vec![vec![0.0, 0.0, 0.0, 0.0, 0.0], vec![0.0, 255.0, 255.0, 255.0, 0.0], vec![0.0, 255.0, 255.0, 255.0, 0.0], vec![0.0, 255.0, 255.0, 255.0, 0.0], vec![0.0, 0.0, 0.0, 0.0, 0.0]];
                let _start: i64 = _now();
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn atanApprox(mut x: f64) -> f64 {
    if (x > 1.0) {
        return ((g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    if (x < -1.0) {
        return ((-g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    return (x / (1.0 + ((0.28 * x) * x)))
};
        unsafe fn atan2Approx(mut y: f64, mut x: f64) -> f64 {
    if (x > 0.0) {
        let mut r: f64 = atanApprox((y / x));
        return r
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return (atanApprox((y / x)) + g_PI)
        }
        return (atanApprox((y / x)) - g_PI)
    }
    if (y > 0.0) {
        return (g_PI / 2.0)
    }
    if (y < 0.0) {
        return (-g_PI / 2.0)
    }
    return 0.0
};
        unsafe fn deg(mut rad: f64) -> f64 {
    return ((rad * 180.0) / g_PI)
};
        unsafe fn zero_matrix(mut h: i64, mut w: i64) -> Vec<Vec<f64>> {
    let mut out: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < h) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < w) {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
            j = (j + 1);
        }
        out = { let mut _v = out.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return out
};
        unsafe fn convolve(mut img: Vec<Vec<f64>>, mut kernel: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut k = (kernel.len() as i64);
    let mut pad: i64 = (k / 2);
    let mut out: Vec<Vec<f64>> = zero_matrix(h, w);
    let mut y: i64 = pad;
    while (y < (h - pad)) {
        let mut x: i64 = pad;
        while (x < (w - pad)) {
            let mut sum: f64 = 0.0;
            let mut ky: i64 = 0;
            while (ky < k) {
                let mut kx: i64 = 0;
                while (kx < k) {
                    let mut pixel: f64 = img[((y - pad) + ky) as usize].clone()[((x - pad) + kx) as usize];
                    let mut weight: f64 = kernel[ky as usize].clone()[kx as usize];
                    sum = (sum + (pixel * weight));
                    kx = (kx + 1);
                }
                ky = (ky + 1);
            }
            out[y as usize][x as usize] = sum;
            x = (x + 1);
        }
        y = (y + 1);
    }
    return out
};
        unsafe fn gaussian_blur(mut img: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    return convolve(img.clone(), g_GAUSSIAN_KERNEL.clone().clone())
};
        unsafe fn sobel_filter(mut img: Vec<Vec<f64>>) -> HashMap<String, Vec<Vec<f64>>> {
    let mut gx: Vec<Vec<f64>> = convolve(img.clone(), g_SOBEL_GX.clone().clone());
    let mut gy: Vec<Vec<f64>> = convolve(img.clone(), g_SOBEL_GY.clone().clone());
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut grad: Vec<Vec<f64>> = zero_matrix(h, w);
    let mut dir: Vec<Vec<f64>> = zero_matrix(h, w);
    let mut i: i64 = 0;
    while (i < h) {
        let mut j: i64 = 0;
        while (j < w) {
            let mut gxx: f64 = gx[i as usize].clone()[j as usize];
            let mut gyy: f64 = gy[i as usize].clone()[j as usize];
            grad[i as usize][j as usize] = sqrtApprox(((gxx * gxx) + (gyy * gyy)));
            dir[i as usize][j as usize] = (deg(atan2Approx(gyy, gxx)) + 180.0);
            j = (j + 1);
        }
        i = (i + 1);
    }
    return HashMap::from([(String::from("grad"), grad), (String::from("dir"), dir)])
};
        unsafe fn suppress_non_maximum(mut h: i64, mut w: i64, mut direction: Vec<Vec<f64>>, mut grad: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut dest: Vec<Vec<f64>> = zero_matrix(h, w);
    let mut r: i64 = 1;
    while (r < (h - 1)) {
        let mut c: i64 = 1;
        while (c < (w - 1)) {
            let mut angle: f64 = direction[r as usize].clone()[c as usize];
            let mut q: f64 = 0.0;
            let mut p: f64 = 0.0;
            if ((((angle >= 0.0) && (angle < 22.5)) || ((angle >= 157.5) && (angle <= 180.0))) || (angle >= 337.5)) {
                q = grad[r as usize].clone()[(c + 1) as usize];
                p = grad[r as usize].clone()[(c - 1) as usize];
            } else if (((angle >= 22.5) && (angle < 67.5)) || ((angle >= 202.5) && (angle < 247.5))) {
                q = grad[(r + 1) as usize].clone()[(c - 1) as usize];
                p = grad[(r - 1) as usize].clone()[(c + 1) as usize];
            } else if (((angle >= 67.5) && (angle < 112.5)) || ((angle >= 247.5) && (angle < 292.5))) {
                q = grad[(r + 1) as usize].clone()[c as usize];
                p = grad[(r - 1) as usize].clone()[c as usize];
            } else {
                q = grad[(r - 1) as usize].clone()[(c - 1) as usize];
                p = grad[(r + 1) as usize].clone()[(c + 1) as usize];
            }
            if ((grad[r as usize].clone()[c as usize] >= q) && (grad[r as usize].clone()[c as usize] >= p)) {
                dest[r as usize][c as usize] = grad[r as usize].clone()[c as usize];
            }
            c = (c + 1);
        }
        r = (r + 1);
    }
    return dest
};
        unsafe fn double_threshold(mut h: i64, mut w: i64, img: &mut Vec<Vec<f64>>, mut low: f64, mut high: f64, mut weak: f64, mut strong: f64) {
    let mut r: i64 = 0;
    while (r < h) {
        let mut c: i64 = 0;
        while (c < w) {
            let mut v: f64 = img[r as usize].clone()[c as usize];
            if (v >= high) {
                (*img)[r as usize][c as usize] = strong;
            } else if (v < low) {
                (*img)[r as usize][c as usize] = 0.0;
            } else {
                (*img)[r as usize][c as usize] = weak;
            }
            c = (c + 1);
        }
        r = (r + 1);
    }
};
        unsafe fn track_edge(mut h: i64, mut w: i64, img: &mut Vec<Vec<f64>>, mut weak: f64, mut strong: f64) {
    let mut r: i64 = 1;
    while (r < (h - 1)) {
        let mut c: i64 = 1;
        while (c < (w - 1)) {
            if (img[r as usize].clone()[c as usize] == weak) {
                if ((((((((img[(r + 1) as usize].clone()[c as usize] == strong) || (img[(r - 1) as usize].clone()[c as usize] == strong)) || (img[r as usize].clone()[(c + 1) as usize] == strong)) || (img[r as usize].clone()[(c - 1) as usize] == strong)) || (img[(r - 1) as usize].clone()[(c - 1) as usize] == strong)) || (img[(r - 1) as usize].clone()[(c + 1) as usize] == strong)) || (img[(r + 1) as usize].clone()[(c - 1) as usize] == strong)) || (img[(r + 1) as usize].clone()[(c + 1) as usize] == strong)) {
                    (*img)[r as usize][c as usize] = strong;
                } else {
                    (*img)[r as usize][c as usize] = 0.0;
                }
            }
            c = (c + 1);
        }
        r = (r + 1);
    }
};
        unsafe fn canny(mut image: Vec<Vec<f64>>, mut low: f64, mut high: f64, mut weak: f64, mut strong: f64) -> Vec<Vec<f64>> {
    let mut blurred: Vec<Vec<f64>> = gaussian_blur(image.clone());
    let mut sob: HashMap<String, Vec<Vec<f64>>> = sobel_filter(blurred.clone());
    let mut grad: Vec<Vec<f64>> = sob.get("grad").cloned().unwrap_or_default();
    let mut direction: Vec<Vec<f64>> = sob.get("dir").cloned().unwrap_or_default();
    let mut h = (image.len() as i64);
    let mut w = (image[0 as usize].clone().len() as i64);
    let mut suppressed: Vec<Vec<f64>> = suppress_non_maximum(h, w, direction.clone(), grad.clone());
    double_threshold(h, w, &mut suppressed, low, high, weak, strong);
    track_edge(h, w, &mut suppressed, weak, strong);
    return suppressed
};
        unsafe fn print_image(mut img: Vec<Vec<f64>>) {
    let mut r: i64 = 0;
    while (r < (img.len() as i64)) {
        let mut c: i64 = 0;
        let mut line: String = String::from("").clone();
        while (c < (img[r as usize].clone().len() as i64)) {
            line = format!("{}{}", format!("{}{}", line, (img[r as usize].clone()[c as usize] as i64).to_string()), " ");
            c = (c + 1);
        }
        println!("{}", line);
        r = (r + 1);
    }
};
        let mut edges: Vec<Vec<f64>> = canny(g_image.clone().clone(), 20.0, 40.0, 128.0, 255.0);
        print_image(edges.clone());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
