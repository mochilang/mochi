// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ndvi(mut red: f64, mut nir: f64) -> f64 {
    return ((nir - red) / (nir + red))
};
    fn bndvi(mut blue: f64, mut nir: f64) -> f64 {
    return ((nir - blue) / (nir + blue))
};
    fn gndvi(mut green: f64, mut nir: f64) -> f64 {
    return ((nir - green) / (nir + green))
};
    fn ndre(mut redEdge: f64, mut nir: f64) -> f64 {
    return ((nir - redEdge) / (nir + redEdge))
};
    fn ccci(mut red: f64, mut redEdge: f64, mut nir: f64) -> f64 {
    return (ndre(redEdge, nir) / ndvi(red, nir))
};
    fn cvi(mut red: f64, mut green: f64, mut nir: f64) -> f64 {
    return ((nir * red) / (green * green))
};
    fn gli(mut red: f64, mut green: f64, mut blue: f64) -> f64 {
    return ((((2.0 * green) - red) - blue) / (((2.0 * green) + red) + blue))
};
    fn dvi(mut red: f64, mut nir: f64) -> f64 {
    return (nir / red)
};
    fn calc(index: &str, mut red: f64, mut green: f64, mut blue: f64, mut redEdge: f64, mut nir: f64) -> f64 {
    if (index == "NDVI") {
        return ndvi(red, nir)
    }
    if (index == "BNDVI") {
        return bndvi(blue, nir)
    }
    if (index == "GNDVI") {
        return gndvi(green, nir)
    }
    if (index == "NDRE") {
        return ndre(redEdge, nir)
    }
    if (index == "CCCI") {
        return ccci(red, redEdge, nir)
    }
    if (index == "CVI") {
        return cvi(red, green, nir)
    }
    if (index == "GLI") {
        return gli(red, green, blue)
    }
    if (index == "DVI") {
        return dvi(red, nir)
    }
    return 0.0
};
    fn mochi_main() {
    let mut red: f64 = 50.0;
    let mut green: f64 = 30.0;
    let mut blue: f64 = 10.0;
    let mut redEdge: f64 = 40.0;
    let mut nir: f64 = 100.0;
    println!("{}", format!("{}{}", "NDVI=", ndvi(red, nir).to_string()));
    println!("{}", format!("{}{}", "CCCI=", ccci(red, redEdge, nir).to_string()));
    println!("{}", format!("{}{}", "CVI=", cvi(red, green, nir).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
