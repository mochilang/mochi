// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn get_greyscale(mut blue: i64, mut green: i64, mut red: i64) -> i64 {
    let mut b: f64 = (blue as f64);
    let mut g: f64 = (green as f64);
    let mut r: f64 = (red as f64);
    return ((((0.114 * b) + (0.587 * g)) + (0.299 * r)) as i64)
};
    fn zeros(mut h: i64, mut w: i64) -> Vec<Vec<i64>> {
    let mut table: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < h) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < w) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        table = { let mut _v = table.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return table
};
    fn burkes_dither(mut img: Vec<Vec<Vec<i64>>>, mut threshold: i64) -> Vec<Vec<i64>> {
    let mut height = (img.len() as i64);
    let mut width = (img[0 as usize].clone().len() as i64);
    let mut error_table: Vec<Vec<i64>> = zeros((height + 1), (width + 4));
    let mut output: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < height) {
        let mut row: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < width) {
            let mut px: Vec<i64> = img[y as usize].clone()[x as usize].clone();
            let mut grey: i64 = get_greyscale(px[0 as usize], px[1 as usize], px[2 as usize]);
            let mut total: i64 = (grey + error_table[y as usize].clone()[(x + 2) as usize]);
            let mut new_val: i64 = 0;
            let mut current_error: i64 = 0;
            if (threshold > total) {
                new_val = 0;
                current_error = total;
            } else {
                new_val = 255;
                current_error = (total - 255);
            }
            row = { let mut _v = row.clone(); _v.push(new_val); _v };
            error_table[y as usize][(x + 3) as usize] = (error_table[y as usize].clone()[(x + 3) as usize] + ((8 * current_error) / 32));
            error_table[y as usize][(x + 4) as usize] = (error_table[y as usize].clone()[(x + 4) as usize] + ((4 * current_error) / 32));
            error_table[(y + 1) as usize][(x + 2) as usize] = (error_table[(y + 1) as usize].clone()[(x + 2) as usize] + ((8 * current_error) / 32));
            error_table[(y + 1) as usize][(x + 3) as usize] = (error_table[(y + 1) as usize].clone()[(x + 3) as usize] + ((4 * current_error) / 32));
            error_table[(y + 1) as usize][(x + 4) as usize] = (error_table[(y + 1) as usize].clone()[(x + 4) as usize] + ((2 * current_error) / 32));
            error_table[(y + 1) as usize][(x + 1) as usize] = (error_table[(y + 1) as usize].clone()[(x + 1) as usize] + ((4 * current_error) / 32));
            error_table[(y + 1) as usize][x as usize] = (error_table[(y + 1) as usize].clone()[x as usize] + ((2 * current_error) / 32));
            x = (x + 1);
        }
        output = { let mut _v = output.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return output
};
    fn mochi_main() {
    let mut img: Vec<Vec<Vec<i64>>> = vec![vec![vec![0, 0, 0], vec![64, 64, 64], vec![128, 128, 128], vec![192, 192, 192]], vec![vec![255, 255, 255], vec![200, 200, 200], vec![150, 150, 150], vec![100, 100, 100]], vec![vec![30, 144, 255], vec![255, 0, 0], vec![0, 255, 0], vec![0, 0, 255]], vec![vec![50, 100, 150], vec![80, 160, 240], vec![70, 140, 210], vec![60, 120, 180]]];
    let mut result: Vec<Vec<i64>> = burkes_dither(img.clone(), 128);
    let mut y: i64 = 0;
    while (y < (result.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < (result[y as usize].clone().len() as i64)) {
            line = format!("{}{}", line, result[y as usize].clone()[x as usize].to_string());
            if (x < ((result[y as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
