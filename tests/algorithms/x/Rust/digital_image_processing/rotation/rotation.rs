// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_img: Vec<Vec<i64>> = Vec::new();
static mut g_pts1: Vec<Vec<f64>> = Vec::new();
static mut g_pts2: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_img = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];
        g_pts1 = vec![vec![0.0, 0.0], vec![2.0, 0.0], vec![0.0, 2.0]];
        g_pts2 = vec![vec![0.0, 2.0], vec![0.0, 0.0], vec![2.0, 2.0]];
                let _start: i64 = _now();
        unsafe fn mat_inverse3(mut m: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut a: f64 = m[0 as usize].clone()[0 as usize];
    let mut b: f64 = m[0 as usize].clone()[1 as usize];
    let mut c: f64 = m[0 as usize].clone()[2 as usize];
    let mut d: f64 = m[1 as usize].clone()[0 as usize];
    let mut e: f64 = m[1 as usize].clone()[1 as usize];
    let mut f: f64 = m[1 as usize].clone()[2 as usize];
    let mut g: f64 = m[2 as usize].clone()[0 as usize];
    let mut h: f64 = m[2 as usize].clone()[1 as usize];
    let mut i: f64 = m[2 as usize].clone()[2 as usize];
    let mut det: f64 = (((a * ((e * i) - (f * h))) - (b * ((d * i) - (f * g)))) + (c * ((d * h) - (e * g))));
    if (det == 0.0) {
        panic!("singular matrix");
    }
    let mut adj00: f64 = ((e * i) - (f * h));
    let mut adj01: f64 = ((c * h) - (b * i));
    let mut adj02: f64 = ((b * f) - (c * e));
    let mut adj10: f64 = ((f * g) - (d * i));
    let mut adj11: f64 = ((a * i) - (c * g));
    let mut adj12: f64 = ((c * d) - (a * f));
    let mut adj20: f64 = ((d * h) - (e * g));
    let mut adj21: f64 = ((b * g) - (a * h));
    let mut adj22: f64 = ((a * e) - (b * d));
    let mut inv: Vec<Vec<f64>> = vec![];
    inv = { let mut _v = inv.clone(); _v.push(vec![(adj00 / det), (adj01 / det), (adj02 / det)]); _v };
    inv = { let mut _v = inv.clone(); _v.push(vec![(adj10 / det), (adj11 / det), (adj12 / det)]); _v };
    inv = { let mut _v = inv.clone(); _v.push(vec![(adj20 / det), (adj21 / det), (adj22 / det)]); _v };
    return inv
};
        unsafe fn mat_vec_mul(mut m: Vec<Vec<f64>>, mut v: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < 3) {
        let mut val: f64 = (((m[i as usize].clone()[0 as usize] * v[0 as usize]) + (m[i as usize].clone()[1 as usize] * v[1 as usize])) + (m[i as usize].clone()[2 as usize] * v[2 as usize]));
        res = { let mut _v = res.clone(); _v.push(val); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn create_matrix(mut rows: i64, mut cols: i64, mut value: i64) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut r: i64 = 0;
    while (r < rows) {
        let mut row: Vec<i64> = vec![];
        let mut c: i64 = 0;
        while (c < cols) {
            row = { let mut _v = row.clone(); _v.push(value); _v };
            c = (c + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return result
};
        unsafe fn round_to_int(mut x: f64) -> i64 {
    if (x >= 0.0) {
        return ((x + 0.5) as i64)
    }
    return ((x - 0.5) as i64)
};
        unsafe fn get_rotation(mut img: Vec<Vec<i64>>, mut pt1: Vec<Vec<f64>>, mut pt2: Vec<Vec<f64>>, mut rows: i64, mut cols: i64) -> Vec<Vec<i64>> {
    let mut src: Vec<Vec<f64>> = vec![vec![pt1[0 as usize].clone()[0 as usize], pt1[0 as usize].clone()[1 as usize], 1.0], vec![pt1[1 as usize].clone()[0 as usize], pt1[1 as usize].clone()[1 as usize], 1.0], vec![pt1[2 as usize].clone()[0 as usize], pt1[2 as usize].clone()[1 as usize], 1.0]];
    let mut inv: Vec<Vec<f64>> = mat_inverse3(src.clone());
    let mut vecx: Vec<f64> = vec![pt2[0 as usize].clone()[0 as usize], pt2[1 as usize].clone()[0 as usize], pt2[2 as usize].clone()[0 as usize]];
    let mut vecy: Vec<f64> = vec![pt2[0 as usize].clone()[1 as usize], pt2[1 as usize].clone()[1 as usize], pt2[2 as usize].clone()[1 as usize]];
    let mut avec: Vec<f64> = mat_vec_mul(inv.clone(), vecx.clone());
    let mut bvec: Vec<f64> = mat_vec_mul(inv.clone(), vecy.clone());
    let mut a0: f64 = avec[0 as usize];
    let mut a1: f64 = avec[1 as usize];
    let mut a2: f64 = avec[2 as usize];
    let mut b0: f64 = bvec[0 as usize];
    let mut b1: f64 = bvec[1 as usize];
    let mut b2: f64 = bvec[2 as usize];
    let mut out: Vec<Vec<i64>> = create_matrix(rows, cols, 0);
    let mut y: i64 = 0;
    while (y < rows) {
        let mut x: i64 = 0;
        while (x < cols) {
            let mut xf: f64 = (((a0 * (1.0 * (x as f64))) + (a1 * (1.0 * (y as f64)))) + a2);
            let mut yf: f64 = (((b0 * (1.0 * (x as f64))) + (b1 * (1.0 * (y as f64)))) + b2);
            let mut sx: i64 = round_to_int(xf);
            let mut sy: i64 = round_to_int(yf);
            if ((((sx >= 0) && (sx < cols)) && (sy >= 0)) && (sy < rows)) {
                out[sy as usize][sx as usize] = img[y as usize].clone()[x as usize];
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return out
};
        let mut rotated: Vec<Vec<i64>> = get_rotation(g_img.clone().clone(), g_pts1.clone().clone(), g_pts2.clone().clone(), 3, 3);
        println!("{}", format!("{:?}", rotated));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
