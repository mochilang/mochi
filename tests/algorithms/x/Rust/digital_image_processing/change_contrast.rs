// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_image: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_image = vec![vec![100, 125, 150], vec![175, 200, 225], vec![50, 75, 100]];
                let _start: i64 = _now();
        unsafe fn change_contrast(mut img: Vec<Vec<i64>>, mut level: i64) -> Vec<Vec<i64>> {
    let mut factor: f64 = ((259.0 * ((level as f64) + 255.0)) / (255.0 * (259.0 - (level as f64))));
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (img.len() as i64)) {
        let mut row: Vec<i64> = img[i as usize].clone();
        let mut new_row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (row.len() as i64)) {
            let mut c: i64 = row[j as usize];
            let mut contrasted: i64 = ((128.0 + (factor * ((c as f64) - 128.0))) as i64);
            let mut clamped: i64 = if (contrasted < 0) { 0 } else if (contrasted > 255) { 255 } else { contrasted };
            new_row = { let mut _v = new_row.clone(); _v.push(clamped); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(new_row.clone()); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn print_image(mut img: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (img.len() as i64)) {
        let mut row: Vec<i64> = img[i as usize].clone();
        let mut j: i64 = 0;
        let mut line: String = String::from("").clone();
        while (j < (row.len() as i64)) {
            line = format!("{}{}", format!("{}{}", line, row[j as usize].to_string()), " ");
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
        println!("{}", "Original image:");
        print_image(g_image.clone().clone());
        let mut contrasted: Vec<Vec<i64>> = change_contrast(g_image.clone().clone(), 170);
        println!("{}", "After contrast:");
        print_image(contrasted.clone());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
