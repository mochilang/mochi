// Generated by Mochi transpiler v0.10.61
fn int(x: i64) -> i64 { x }
static mut g_image: Vec<Vec<Vec<i64>>> = Vec::new();
unsafe fn normalize(mut value: i64) -> i64 {
    if (value > 255) {
        return 255
    }
    return value
}

unsafe fn to_grayscale(mut blue: i64, mut green: i64, mut red: i64) -> i64 {
    let mut gs: f64 = (((0.2126 * (red as f64)) + (0.587 * (green as f64))) + (0.114 * (blue as f64)));
    return (gs as i64)
}

unsafe fn make_sepia(mut img: Vec<Vec<Vec<i64>>>, mut factor: i64) -> Vec<Vec<Vec<i64>>> {
    let mut pixel_h: i64 = (img.len() as i64);
    let mut pixel_v: i64 = (img[0 as usize].clone().len() as i64);
    let mut i: i64 = 0;
    while (i < pixel_h) {
        let mut j: i64 = 0;
        while (j < pixel_v) {
            let mut pixel: Vec<i64> = img[i as usize].clone()[j as usize].clone();
            let mut grey: i64 = to_grayscale(pixel[0 as usize], pixel[1 as usize], pixel[2 as usize]);
            img[i as usize][j as usize] = vec![normalize(grey), normalize((grey + factor)), normalize((grey + (2 * factor)))];
            j = (j + 1);
        }
        i = (i + 1);
    }
    return img
}

fn main() {
    unsafe {
        g_image = vec![vec![vec![10, 20, 30], vec![40, 50, 60]], vec![vec![70, 80, 90], vec![200, 150, 100]]];
        let mut sepia: Vec<Vec<Vec<i64>>> = make_sepia(g_image.clone().clone(), 20);
        println!("{}", format!("{:?}", sepia));
    }
}
