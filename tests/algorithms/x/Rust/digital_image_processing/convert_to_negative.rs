// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn convert_to_negative(mut img: Vec<Vec<Vec<i64>>>) -> Vec<Vec<Vec<i64>>> {
    let mut result: Vec<Vec<Vec<i64>>> = vec![];
    let mut i: i64 = 0;
    while (i < (img.len() as i64)) {
        let mut row: Vec<Vec<i64>> = vec![];
        let mut j: i64 = 0;
        while (j < (img[i as usize].clone().len() as i64)) {
            let mut pixel: Vec<i64> = img[i as usize].clone()[j as usize].clone();
            let mut r: i64 = (255 - pixel[0 as usize]);
            let mut g: i64 = (255 - pixel[1 as usize]);
            let mut b: i64 = (255 - pixel[2 as usize]);
            row = { let mut _v = row.clone(); _v.push(vec![r, g, b]); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn mochi_main() {
    let mut image: Vec<Vec<Vec<i64>>> = vec![vec![vec![10, 20, 30], vec![0, 0, 0]], vec![vec![255, 255, 255], vec![100, 150, 200]]];
    let mut neg: Vec<Vec<Vec<i64>>> = convert_to_negative(image.clone());
    println!("{:?}", neg);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
