// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn insertion_sort(mut a: Vec<i64>) -> Vec<i64> {
    let mut i: i64 = 1;
    while (i < (a.len() as i64)) {
        let mut key: i64 = a[i as usize];
        let mut j: i64 = (i - 1);
        while ((j >= 0) && (a[j as usize] > key)) {
            a[(j + 1) as usize] = a[j as usize];
            j = (j - 1);
        }
        a[(j + 1) as usize] = key;
        i = (i + 1);
    }
    return a
};
    fn median_filter(mut gray_img: Vec<Vec<i64>>, mut mask: i64) -> Vec<Vec<i64>> {
    let mut rows = (gray_img.len() as i64);
    let mut cols = (gray_img[0 as usize].clone().len() as i64);
    let mut bd: i64 = (mask / 2);
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = bd;
    while (i < (rows - bd)) {
        let mut j: i64 = bd;
        while (j < (cols - bd)) {
            let mut kernel: Vec<i64> = vec![];
            let mut x: i64 = (i - bd);
            while (x <= (i + bd)) {
                let mut y: i64 = (j - bd);
                while (y <= (j + bd)) {
                    kernel = { let mut _v = kernel.clone(); _v.push(gray_img[x as usize].clone()[y as usize]); _v };
                    y = (y + 1);
                }
                x = (x + 1);
            }
            kernel = insertion_sort(kernel.clone());
            let mut idx: i64 = ((mask * mask) / 2);
            result[i as usize][j as usize] = kernel[idx as usize];
            j = (j + 1);
        }
        i = (i + 1);
    }
    return result
};
    fn mochi_main() {
    let mut img: Vec<Vec<i64>> = vec![vec![10, 10, 10, 10, 10], vec![10, 255, 10, 255, 10], vec![10, 10, 10, 10, 10], vec![10, 255, 10, 255, 10], vec![10, 10, 10, 10, 10]];
    let mut filtered: Vec<Vec<i64>> = median_filter(img.clone(), 3);
    println!("{:?}", filtered);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
