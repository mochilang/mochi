// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
                let _start: i64 = _now();
        unsafe fn to_radians(mut deg: f64) -> f64 {
    return ((deg * g_PI) / 180.0)
};
        unsafe fn sin_taylor(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut i: i64 = 1;
    while (i < 10) {
        let mut k1: f64 = (2.0 * (i as f64));
        let mut k2: f64 = (k1 + 1.0);
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        unsafe fn cos_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 10) {
        let mut k1: f64 = ((2.0 * (i as f64)) - 1.0);
        let mut k2: f64 = (2.0 * (i as f64));
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        unsafe fn exp_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: f64 = 1.0;
    while (i < 20.0) {
        term = ((term * x) / i);
        sum = (sum + term);
        i = (i + 1.0);
    }
    return sum
};
        unsafe fn gabor_filter_kernel(mut ksize: i64, mut sigma: f64, mut theta: f64, mut lambd: f64, mut gamma: f64, mut psi: f64) -> Vec<Vec<f64>> {
    let mut size: i64 = ksize;
    if ((size % 2) == 0) {
        size = (size + 1);
    }
    let mut gabor: Vec<Vec<f64>> = vec![];
    let mut y: i64 = 0;
    while (y < size) {
        let mut row: Vec<f64> = vec![];
        let mut x: i64 = 0;
        while (x < size) {
            let mut px: f64 = ((x - (size / 2)) as f64);
            let mut py: f64 = ((y - (size / 2)) as f64);
            let mut rad: f64 = to_radians(theta);
            let mut cos_theta: f64 = cos_taylor(rad);
            let mut sin_theta: f64 = sin_taylor(rad);
            let mut x_rot: f64 = ((cos_theta * px) + (sin_theta * py));
            let mut y_rot: f64 = ((-sin_theta * px) + (cos_theta * py));
            let mut exponent: f64 = (-((x_rot * x_rot) + (((gamma * gamma) * y_rot) * y_rot)) / ((2.0 * sigma) * sigma));
            let mut value: f64 = (exp_taylor(exponent) * cos_taylor(((((2.0 * g_PI) * x_rot) / lambd) + psi)));
            row = { let mut _v = row.clone(); _v.push(value); _v };
            x = (x + 1);
        }
        gabor = { let mut _v = gabor.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return gabor
};
        let mut kernel: Vec<Vec<f64>> = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0);
        println!("{:?}", kernel);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
