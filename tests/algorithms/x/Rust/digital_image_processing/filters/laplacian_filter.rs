// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_image: Vec<Vec<i64>> = Vec::new();
static mut g_r: i64 = 0;
fn main() {
    unsafe {
        g_image = vec![vec![0, 0, 0, 0, 0], vec![0, 10, 10, 10, 0], vec![0, 10, 10, 10, 0], vec![0, 10, 10, 10, 0], vec![0, 0, 0, 0, 0]];
        g_r = 0;
                let _start: i64 = _now();
        unsafe fn make_matrix(mut rows: i64, mut cols: i64, mut value: i64) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row = { let mut _v = row.clone(); _v.push(value); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn my_laplacian(mut src: Vec<Vec<i64>>, mut ksize: i64) -> Vec<Vec<i64>> {
    let mut kernel: Vec<Vec<i64>> = vec![];
    if (ksize == 1) {
        kernel = vec![vec![0, -1, 0], vec![-1, 4, -1], vec![0, -1, 0]];
    } else if (ksize == 3) {
        kernel = vec![vec![0, 1, 0], vec![1, -4, 1], vec![0, 1, 0]];
    } else if (ksize == 5) {
        kernel = vec![vec![0, 0, -1, 0, 0], vec![0, -1, -2, -1, 0], vec![-1, -2, 16, -2, -1], vec![0, -1, -2, -1, 0], vec![0, 0, -1, 0, 0]];
    } else if (ksize == 7) {
        kernel = vec![vec![0, 0, 0, -1, 0, 0, 0], vec![0, 0, -2, -3, -2, 0, 0], vec![0, -2, -7, -10, -7, -2, 0], vec![-1, -3, -10, 68, -10, -3, -1], vec![0, -2, -7, -10, -7, -2, 0], vec![0, 0, -2, -3, -2, 0, 0], vec![0, 0, 0, -1, 0, 0, 0]];
    } else {
        panic!("ksize must be in (1, 3, 5, 7)");
    }
    let mut rows = (src.len() as i64);
    let mut cols = (src[0 as usize].clone().len() as i64);
    let mut k = (kernel.len() as i64);
    let mut pad: i64 = (k / 2);
    let mut output: Vec<Vec<i64>> = make_matrix(rows, cols, 0);
    let mut i: i64 = 0;
    while (i < rows) {
        let mut j: i64 = 0;
        while (j < cols) {
            let mut sum: i64 = 0;
            let mut ki: i64 = 0;
            while (ki < k) {
                let mut kj: i64 = 0;
                while (kj < k) {
                    let mut ii: i64 = ((i + ki) - pad);
                    let mut jj: i64 = ((j + kj) - pad);
                    let mut val: i64 = 0;
                    if ((((ii >= 0) && (ii < rows)) && (jj >= 0)) && (jj < cols)) {
                        val = src[ii as usize].clone()[jj as usize];
                    }
                    sum = (sum + (val * kernel[ki as usize].clone()[kj as usize]));
                    kj = (kj + 1);
                }
                ki = (ki + 1);
            }
            output[i as usize][j as usize] = sum;
            j = (j + 1);
        }
        i = (i + 1);
    }
    return output
};
        let mut result: Vec<Vec<i64>> = my_laplacian(g_image.clone().clone(), 3);
        while (g_r < (result.len() as i64)) {
            let mut row_str: String = String::from("[").clone();
            let mut c: i64 = 0;
            while (c < (result[g_r as usize].clone().len() as i64)) {
                row_str = format!("{}{}", row_str, result[g_r as usize].clone()[c as usize].to_string());
                if ((c + 1) < (result[g_r as usize].clone().len() as i64)) {
                    row_str = format!("{}{}", row_str, ", ");
                }
                c = (c + 1);
            }
            row_str = format!("{}{}", row_str, "]");
            println!("{}", row_str);
            g_r = (g_r + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
