// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
                let _start: i64 = _now();
        unsafe fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn atanApprox(mut x: f64) -> f64 {
    if (x > 1.0) {
        return ((g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    if (x < -1.0) {
        return ((-g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    return (x / (1.0 + ((0.28 * x) * x)))
};
        unsafe fn atan2Approx(mut y: f64, mut x: f64) -> f64 {
    if (x == 0.0) {
        if (y > 0.0) {
            return (g_PI / 2.0)
        }
        if (y < 0.0) {
            return (-g_PI / 2.0)
        }
        return 0.0
    }
    let mut a: f64 = atanApprox((y / x));
    if (x > 0.0) {
        return a
    }
    if (y >= 0.0) {
        return (a + g_PI)
    }
    return (a - g_PI)
};
        unsafe fn zeros(mut h: i64, mut w: i64) -> Vec<Vec<f64>> {
    let mut m: Vec<Vec<f64>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<f64> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
            x = (x + 1);
        }
        m = { let mut _v = m.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return m
};
        unsafe fn pad_edge(mut img: Vec<Vec<f64>>, mut pad: i64) -> Vec<Vec<f64>> {
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut out: Vec<Vec<f64>> = zeros((h + (pad * 2)), (w + (pad * 2)));
    let mut y: i64 = 0;
    while (y < (h + (pad * 2))) {
        let mut x: i64 = 0;
        while (x < (w + (pad * 2))) {
            let mut sy: i64 = (y - pad);
            if (sy < 0) {
                sy = 0;
            }
            if (sy >= h) {
                sy = (h - 1);
            }
            let mut sx: i64 = (x - pad);
            if (sx < 0) {
                sx = 0;
            }
            if (sx >= w) {
                sx = (w - 1);
            }
            out[y as usize][x as usize] = img[sy as usize].clone()[sx as usize];
            x = (x + 1);
        }
        y = (y + 1);
    }
    return out
};
        unsafe fn img_convolve(mut img: Vec<Vec<f64>>, mut kernel: Vec<Vec<i64>>) -> Vec<Vec<f64>> {
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut k = (kernel.len() as i64);
    let mut pad: i64 = (k / 2);
    let mut padded: Vec<Vec<f64>> = pad_edge(img.clone(), pad);
    let mut out: Vec<Vec<f64>> = zeros(h, w);
    let mut y: i64 = 0;
    while (y < h) {
        let mut x: i64 = 0;
        while (x < w) {
            let mut sum: f64 = 0.0;
            let mut i: i64 = 0;
            while (i < k) {
                let mut j: i64 = 0;
                while (j < k) {
                    sum = (sum + (padded[(y + i) as usize].clone()[(x + j) as usize] * (kernel[i as usize].clone()[j as usize] as f64)));
                    j = (j + 1);
                }
                i = (i + 1);
            }
            out[y as usize][x as usize] = sum;
            x = (x + 1);
        }
        y = (y + 1);
    }
    return out
};
        unsafe fn abs_matrix(mut mat: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut h = (mat.len() as i64);
    let mut w = (mat[0 as usize].clone().len() as i64);
    let mut out: Vec<Vec<f64>> = zeros(h, w);
    let mut y: i64 = 0;
    while (y < h) {
        let mut x: i64 = 0;
        while (x < w) {
            let mut v: f64 = mat[y as usize].clone()[x as usize];
            if (v < 0.0) {
                out[y as usize][x as usize] = -v;
            } else {
                out[y as usize][x as usize] = v;
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return out
};
        unsafe fn max_matrix(mut mat: Vec<Vec<f64>>) -> f64 {
    let mut max_val: f64 = mat[0 as usize].clone()[0 as usize];
    let mut y: i64 = 0;
    while (y < (mat.len() as i64)) {
        let mut x: i64 = 0;
        while (x < (mat[0 as usize].clone().len() as i64)) {
            if (mat[y as usize].clone()[x as usize] > max_val) {
                max_val = mat[y as usize].clone()[x as usize];
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return max_val
};
        unsafe fn scale_matrix(mut mat: Vec<Vec<f64>>, mut factor: f64) -> Vec<Vec<f64>> {
    let mut h = (mat.len() as i64);
    let mut w = (mat[0 as usize].clone().len() as i64);
    let mut out: Vec<Vec<f64>> = zeros(h, w);
    let mut y: i64 = 0;
    while (y < h) {
        let mut x: i64 = 0;
        while (x < w) {
            out[y as usize][x as usize] = (mat[y as usize].clone()[x as usize] * factor);
            x = (x + 1);
        }
        y = (y + 1);
    }
    return out
};
        unsafe fn sobel_filter(mut image: Vec<Vec<i64>>) -> Vec<Vec<Vec<f64>>> {
    let mut h = (image.len() as i64);
    let mut w = (image[0 as usize].clone().len() as i64);
    let mut img: Vec<Vec<f64>> = vec![];
    let mut y0: i64 = 0;
    while (y0 < h) {
        let mut row: Vec<f64> = vec![];
        let mut x0: i64 = 0;
        while (x0 < w) {
            row = { let mut _v = row.clone(); _v.push((image[y0 as usize].clone()[x0 as usize] as f64)); _v };
            x0 = (x0 + 1);
        }
        img = { let mut _v = img.clone(); _v.push(row.clone()); _v };
        y0 = (y0 + 1);
    }
    let mut kernel_x: Vec<Vec<i64>> = vec![vec![-1, 0, 1], vec![-2, 0, 2], vec![-1, 0, 1]];
    let mut kernel_y: Vec<Vec<i64>> = vec![vec![1, 2, 1], vec![0, 0, 0], vec![-1, -2, -1]];
    let mut dst_x: Vec<Vec<f64>> = abs_matrix(img_convolve(img.clone(), kernel_x.clone()));
    let mut dst_y: Vec<Vec<f64>> = abs_matrix(img_convolve(img.clone(), kernel_y.clone()));
    let mut max_x: f64 = max_matrix(dst_x.clone());
    let mut max_y: f64 = max_matrix(dst_y.clone());
    dst_x = scale_matrix(dst_x.clone(), (255.0 / max_x));
    dst_y = scale_matrix(dst_y.clone(), (255.0 / max_y));
    let mut mag: Vec<Vec<f64>> = zeros(h, w);
    let mut theta: Vec<Vec<f64>> = zeros(h, w);
    let mut y: i64 = 0;
    while (y < h) {
        let mut x: i64 = 0;
        while (x < w) {
            let mut gx: f64 = dst_x[y as usize].clone()[x as usize];
            let mut gy: f64 = dst_y[y as usize].clone()[x as usize];
            mag[y as usize][x as usize] = sqrtApprox(((gx * gx) + (gy * gy)));
            theta[y as usize][x as usize] = atan2Approx(gy, gx);
            x = (x + 1);
        }
        y = (y + 1);
    }
    let mut max_m: f64 = max_matrix(mag.clone());
    mag = scale_matrix(mag.clone(), (255.0 / max_m));
    return vec![mag, theta]
};
        unsafe fn print_matrix_int(mut mat: Vec<Vec<f64>>) {
    let mut y: i64 = 0;
    while (y < (mat.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < (mat[y as usize].clone().len() as i64)) {
            line = format!("{}{}", line, (mat[y as usize].clone()[x as usize] as i64).to_string());
            if (x < ((mat[y as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
};
        unsafe fn print_matrix_float(mut mat: Vec<Vec<f64>>) {
    let mut y: i64 = 0;
    while (y < (mat.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < (mat[y as usize].clone().len() as i64)) {
            line = format!("{}{}", line, mat[y as usize].clone()[x as usize].to_string());
            if (x < ((mat[y as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
};
        unsafe fn mochi_main() {
    let mut img: Vec<Vec<i64>> = vec![vec![10, 10, 10, 10, 10], vec![10, 50, 50, 50, 10], vec![10, 50, 80, 50, 10], vec![10, 50, 50, 50, 10], vec![10, 10, 10, 10, 10]];
    let mut res: Vec<Vec<Vec<f64>>> = sobel_filter(img.clone());
    let mut mag: Vec<Vec<f64>> = res[0 as usize].clone();
    let mut theta: Vec<Vec<f64>> = res[1 as usize].clone();
    print_matrix_int(mag.clone());
    print_matrix_float(theta.clone());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
