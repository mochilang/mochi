// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_image: Vec<Vec<i64>> = Vec::new();
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_image = vec![vec![10, 10, 10, 10, 10], vec![10, 20, 30, 20, 10], vec![10, 30, 40, 30, 10], vec![10, 20, 30, 20, 10], vec![10, 10, 10, 10, 10]];
        g_i = 0;
                let _start: i64 = _now();
        unsafe fn get_neighbors_pixel(mut image: Vec<Vec<i64>>, mut x: i64, mut y: i64, mut center: i64) -> i64 {
    if ((x < 0) || (y < 0)) {
        return 0
    }
    if ((x >= (image.len() as i64)) || (y >= (image[0 as usize].clone().len() as i64))) {
        return 0
    }
    if (image[x as usize].clone()[y as usize] >= center) {
        return 1
    }
    return 0
};
        unsafe fn local_binary_value(mut image: Vec<Vec<i64>>, mut x: i64, mut y: i64) -> i64 {
    let mut center: i64 = image[x as usize].clone()[y as usize];
    let mut powers: Vec<i64> = vec![1, 2, 4, 8, 16, 32, 64, 128];
    let mut neighbors: Vec<i64> = vec![get_neighbors_pixel(image.clone(), (x - 1), (y + 1), center), get_neighbors_pixel(image.clone(), x, (y + 1), center), get_neighbors_pixel(image.clone(), (x - 1), y, center), get_neighbors_pixel(image.clone(), (x + 1), (y + 1), center), get_neighbors_pixel(image.clone(), (x + 1), y, center), get_neighbors_pixel(image.clone(), (x + 1), (y - 1), center), get_neighbors_pixel(image.clone(), x, (y - 1), center), get_neighbors_pixel(image.clone(), (x - 1), (y - 1), center)];
    let mut sum: i64 = 0;
    let mut i: i64 = 0;
    while (i < (neighbors.len() as i64)) {
        sum = (sum + (neighbors[i as usize] * powers[i as usize]));
        i = (i + 1);
    }
    return sum
};
        while (g_i < (g_image.clone().len() as i64)) {
            let mut j: i64 = 0;
            let mut line: String = String::from("").clone();
            while (j < (g_image.clone()[0 as usize].clone().len() as i64)) {
                let mut value: i64 = local_binary_value(g_image.clone().clone(), g_i, j);
                line = format!("{}{}", line, value.to_string());
                if (j < ((g_image.clone()[0 as usize].clone().len() as i64) - 1)) {
                    line = format!("{}{}", line, " ");
                }
                j = (j + 1);
            }
            println!("{}", line);
            g_i = (g_i + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
