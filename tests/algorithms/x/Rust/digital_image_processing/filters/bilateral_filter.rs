// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_img: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_img = vec![vec![0.2, 0.3, 0.4], vec![0.3, 0.4, 0.5], vec![0.4, 0.5, 0.6]];
                let _start: i64 = _now();
        unsafe fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn expApprox(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 10) {
        term = ((term * x) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn vec_gaussian(mut mat: Vec<Vec<f64>>, mut variance: f64) -> Vec<Vec<f64>> {
    let mut i: i64 = 0;
    let mut out: Vec<Vec<f64>> = vec![];
    while (i < (mat.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            let mut v: f64 = mat[i as usize].clone()[j as usize];
            let mut e: f64 = (-(v * v) / (2.0 * variance));
            row = { let mut v = row.clone(); v.extend(vec![expApprox(e)]); v };
            j = (j + 1);
        }
        out = { let mut v = out.clone(); v.extend(vec![row]); v };
        i = (i + 1);
    }
    return out
};
        unsafe fn get_slice(mut img: Vec<Vec<f64>>, mut x: i64, mut y: i64, mut kernel_size: i64) -> Vec<Vec<f64>> {
    let mut half: i64 = (kernel_size / 2);
    let mut i: i64 = (x - half);
    let mut slice: Vec<Vec<f64>> = vec![];
    while (i <= (x + half)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = (y - half);
        while (j <= (y + half)) {
            row = { let mut v = row.clone(); v.extend(vec![img[i as usize].clone()[j as usize]]); v };
            j = (j + 1);
        }
        slice = { let mut v = slice.clone(); v.extend(vec![row]); v };
        i = (i + 1);
    }
    return slice
};
        unsafe fn get_gauss_kernel(mut kernel_size: i64, mut spatial_variance: f64) -> Vec<Vec<f64>> {
    let mut arr: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < kernel_size) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < kernel_size) {
            let mut di: f64 = ((i - (kernel_size / 2)) as f64);
            let mut dj: f64 = ((j - (kernel_size / 2)) as f64);
            let mut dist: f64 = sqrtApprox(((di * di) + (dj * dj)));
            row = { let mut v = row.clone(); v.extend(vec![dist]); v };
            j = (j + 1);
        }
        arr = { let mut v = arr.clone(); v.extend(vec![row]); v };
        i = (i + 1);
    }
    return vec_gaussian(arr.clone(), spatial_variance)
};
        unsafe fn elementwise_sub(mut mat: Vec<Vec<f64>>, mut value: f64) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            row = { let mut v = row.clone(); v.extend(vec![(mat[i as usize].clone()[j as usize] - value)]); v };
            j = (j + 1);
        }
        res = { let mut v = res.clone(); v.extend(vec![row]); v };
        i = (i + 1);
    }
    return res
};
        unsafe fn elementwise_mul(mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (a[i as usize].clone().len() as i64)) {
            row = { let mut v = row.clone(); v.extend(vec![(a[i as usize].clone()[j as usize] * b[i as usize].clone()[j as usize])]); v };
            j = (j + 1);
        }
        res = { let mut v = res.clone(); v.extend(vec![row]); v };
        i = (i + 1);
    }
    return res
};
        unsafe fn matrix_sum(mut mat: Vec<Vec<f64>>) -> f64 {
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            total = (total + mat[i as usize].clone()[j as usize]);
            j = (j + 1);
        }
        i = (i + 1);
    }
    return total
};
        unsafe fn bilateral_filter(mut img: Vec<Vec<f64>>, mut spatial_variance: f64, mut intensity_variance: f64, mut kernel_size: i64) -> f64 {
    let mut gauss_ker: Vec<Vec<f64>> = get_gauss_kernel(kernel_size, spatial_variance);
    let mut img_s: Vec<Vec<f64>> = img.clone();
    let mut center: f64 = img_s[(kernel_size / 2) as usize].clone()[(kernel_size / 2) as usize];
    let mut img_i: Vec<Vec<f64>> = elementwise_sub(img_s.clone(), center);
    let mut img_ig: Vec<Vec<f64>> = vec_gaussian(img_i.clone(), intensity_variance);
    let mut weights: Vec<Vec<f64>> = elementwise_mul(gauss_ker.clone(), img_ig.clone());
    let mut vals: Vec<Vec<f64>> = elementwise_mul(img_s.clone(), weights.clone());
    let mut sum_weights: f64 = matrix_sum(weights.clone());
    let mut val: f64 = 0.0;
    if (sum_weights != 0.0) {
        val = (matrix_sum(vals.clone()) / sum_weights);
    }
    return val
};
        let mut result: f64 = bilateral_filter(g_img.clone().clone(), 1.0, 1.0, 3);
        println!("{}", format!("{:?}", result));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
