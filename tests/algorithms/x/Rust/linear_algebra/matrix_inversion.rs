// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn invert_matrix(mut matrix: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let n: i64 = (matrix.len() as i64);
    let mut aug: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(matrix[i as usize].clone()[j as usize]); _v };
            j = (j + 1);
        }
        let mut k: i64 = 0;
        while (k < n) {
            if (i == k) {
                row = { let mut _v = row.clone(); _v.push(1.0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
            k = (k + 1);
        }
        aug = { let mut _v = aug.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut col: i64 = 0;
    while (col < n) {
        let mut pivot_row: i64 = col;
        let mut r: i64 = col;
        while (r < n) {
            if (aug[r as usize].clone()[col as usize] != 0.0) {
                pivot_row = r;
                break
            }
            r = (r + 1);
        }
        if (aug[pivot_row as usize].clone()[col as usize] == 0.0) {
            panic!("Matrix is not invertible");
        }
        if (pivot_row != col) {
            let temp: Vec<f64> = aug[col as usize].clone();
            aug[col as usize] = aug[pivot_row as usize].clone();
            aug[pivot_row as usize] = temp.clone();
        }
        let pivot: f64 = aug[col as usize].clone()[col as usize];
        let mut c: i64 = 0;
        while (c < (2 * n)) {
            aug[col as usize][c as usize] = (aug[col as usize].clone()[c as usize] / pivot);
            c = (c + 1);
        }
        let mut r2: i64 = 0;
        while (r2 < n) {
            if (r2 != col) {
                let factor: f64 = aug[r2 as usize].clone()[col as usize];
                let mut c2: i64 = 0;
                while (c2 < (2 * n)) {
                    aug[r2 as usize][c2 as usize] = (aug[r2 as usize].clone()[c2 as usize] - (factor * aug[col as usize].clone()[c2 as usize]));
                    c2 = (c2 + 1);
                }
            }
            r2 = (r2 + 1);
        }
        col = (col + 1);
    }
    let mut inv: Vec<Vec<f64>> = vec![];
    let mut r3: i64 = 0;
    while (r3 < n) {
        let mut row: Vec<f64> = vec![];
        let mut c3: i64 = 0;
        while (c3 < n) {
            row = { let mut _v = row.clone(); _v.push(aug[r3 as usize].clone()[(c3 + n) as usize]); _v };
            c3 = (c3 + 1);
        }
        inv = { let mut _v = inv.clone(); _v.push(row.clone()); _v };
        r3 = (r3 + 1);
    }
    return inv
};
    let mut mat: Vec<Vec<f64>> = vec![vec![4.0, 7.0].clone(), vec![2.0, 6.0].clone()];
    println!("{}", "Original Matrix:");
    println!("{:?}", format!("{:?}", mat));
    println!("{}", "Inverted Matrix:");
    println!("{:?}", format!("{:?}", invert_matrix(mat.clone())));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
