// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_iterations: i64 = 3;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn absf(mut x: f64) -> f64 {
    return if (x < 0.0) { -x } else { x }
};
        fn strictly_diagonally_dominant(mut matrix: Vec<Vec<f64>>) -> bool {
    let mut n: i64 = (matrix.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut sum: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < n) {
            if (i != j) {
                sum = (sum + absf(matrix[i as usize].clone()[j as usize]));
            }
            j = (j + 1);
        }
        if (absf(matrix[i as usize].clone()[i as usize]) <= sum) {
            panic!("Coefficient matrix is not strictly diagonally dominant");
        }
        i = (i + 1);
    }
    return true
};
        fn jacobi_iteration_method(mut coefficient: Vec<Vec<f64>>, mut constant: Vec<f64>, mut init_val: Vec<f64>, mut iterations: i64) -> Vec<f64> {
    let n: i64 = (coefficient.len() as i64);
    if (n == 0) {
        panic!("Coefficient matrix cannot be empty");
    }
    if ((constant.len() as i64) != n) {
        panic!("Constant vector length must equal number of rows in coefficient matrix");
    }
    if ((init_val.len() as i64) != n) {
        panic!("Initial values count must match matrix size");
    }
    let mut r: i64 = 0;
    while (r < n) {
        if ((coefficient[r as usize].clone().len() as i64) != n) {
            panic!("Coefficient matrix must be square");
        }
        r = (r + 1);
    }
    if (iterations <= 0) {
        panic!("Iterations must be at least 1");
    }
    strictly_diagonally_dominant(coefficient.clone());
    let mut x: Vec<f64> = init_val.clone();
    let mut k: i64 = 0;
    while (k < iterations) {
        let mut new_x: Vec<f64> = vec![];
        let mut i: i64 = 0;
        while (i < n) {
            let mut sum: f64 = 0.0;
            let mut j: i64 = 0;
            while (j < n) {
                if (i != j) {
                    sum = (sum + (coefficient[i as usize].clone()[j as usize] * x[j as usize]));
                }
                j = (j + 1);
            }
            let mut value: f64 = ((constant[i as usize] - sum) / coefficient[i as usize].clone()[i as usize]);
            new_x = { let mut _v = new_x.clone(); _v.push(value); _v };
            i = (i + 1);
        }
        x = new_x.clone();
        k = (k + 1);
    }
    return x
};
        let coefficient: Vec<Vec<f64>> = vec![vec![4.0, 1.0, 1.0].clone(), vec![1.0, 5.0, 2.0].clone(), vec![1.0, 2.0, 4.0].clone()];
        let constant: Vec<f64> = vec![2.0, -6.0, -4.0];
        let init_val: Vec<f64> = vec![0.5, -0.5, -0.5];
        let result: Vec<f64> = jacobi_iteration_method(coefficient.clone(), constant.clone(), init_val.clone(), unsafe { g_iterations.clone() });
        println!("{}", { let tmp = result.clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
