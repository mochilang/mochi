// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LU {
    lower: Vec<Vec<f64>>,
    upper: Vec<Vec<f64>>,
}
impl std::fmt::Display for LU {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"lower\": {:?}", self.lower)?;
        write!(f, ", ")?;
        write!(f, "\"upper\": {:?}", self.upper)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn lu_decomposition(mut mat: Vec<Vec<f64>>) -> LU {
    let n: i64 = (mat.len() as i64);
    if (n == 0) {
        return LU {lower: vec![], upper: vec![]}
    }
    let m: i64 = (mat[0 as usize].clone().len() as i64);
    if (n != m) {
        panic!("Matrix must be square");
    }
    let mut lower: Vec<Vec<f64>> = vec![];
    let mut upper: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut lrow: Vec<f64> = vec![];
        let mut urow: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            lrow = { let mut _v = lrow.clone(); _v.push(0.0); _v };
            urow = { let mut _v = urow.clone(); _v.push(0.0); _v };
            j = (j + 1);
        }
        lower = { let mut _v = lower.clone(); _v.push(lrow.clone()); _v };
        upper = { let mut _v = upper.clone(); _v.push(urow.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        let mut j1: i64 = 0;
        while (j1 < i) {
            let mut total: f64 = 0.0;
            let mut k: i64 = 0;
            while (k < i) {
                total = (total + (lower[i as usize].clone()[k as usize] * upper[k as usize].clone()[j1 as usize]));
                k = (k + 1);
            }
            if (upper[j1 as usize].clone()[j1 as usize] == 0.0) {
                panic!("No LU decomposition exists");
            }
            lower[i as usize][j1 as usize] = ((mat[i as usize].clone()[j1 as usize] - total) / upper[j1 as usize].clone()[j1 as usize]);
            j1 = (j1 + 1);
        }
        lower[i as usize][i as usize] = 1.0;
        let mut j2: i64 = i;
        while (j2 < n) {
            let mut total2: f64 = 0.0;
            let mut k2: i64 = 0;
            while (k2 < i) {
                total2 = (total2 + (lower[i as usize].clone()[k2 as usize] * upper[k2 as usize].clone()[j2 as usize]));
                k2 = (k2 + 1);
            }
            upper[i as usize][j2 as usize] = (mat[i as usize].clone()[j2 as usize] - total2);
            j2 = (j2 + 1);
        }
        i = (i + 1);
    }
    return LU {lower: lower.clone(), upper: upper.clone()}
};
    fn print_matrix(mut mat: Vec<Vec<f64>>) {
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut line: String = String::new();
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, mat[i as usize].clone()[j as usize].to_string());
            if ((j + 1) < (mat[i as usize].clone().len() as i64)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    let matrix: Vec<Vec<f64>> = vec![vec![2.0, -2.0, 1.0].clone(), vec![0.0, 1.0, 2.0].clone(), vec![5.0, 3.0, 1.0].clone()];
    let result: LU = lu_decomposition(matrix.clone());
    print_matrix(result.lower.clone().clone());
    print_matrix(result.upper.clone().clone());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
