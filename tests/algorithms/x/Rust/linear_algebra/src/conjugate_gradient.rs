// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn zeros(mut n: i64) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    return res
};
    fn dot(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        sum = (sum + (a[i as usize] * b[i as usize]));
        i = (i + 1);
    }
    return sum
};
    fn mat_vec_mul(mut m: Vec<Vec<f64>>, mut v: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (m.len() as i64)) {
        let mut s: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < (m[i as usize].clone().len() as i64)) {
            s = (s + (m[i as usize].clone()[j as usize] * v[j as usize]));
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(s); _v };
        i = (i + 1);
    }
    return res
};
    fn vec_add(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((a[i as usize] + b[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
    fn vec_sub(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((a[i as usize] - b[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
    fn scalar_mul(mut s: f64, mut v: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((s * v[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
    fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn norm(mut v: Vec<f64>) -> f64 {
    return sqrtApprox(dot(v.clone(), v.clone()))
};
    fn conjugate_gradient(mut A: Vec<Vec<f64>>, mut b: Vec<f64>, mut max_iterations: i64, mut tol: f64) -> Vec<f64> {
    let n: i64 = (b.len() as i64);
    let mut x: Vec<f64> = zeros(n);
    let mut r: Vec<f64> = vec_sub(b.clone(), mat_vec_mul(A.clone(), x.clone()));
    let mut p: Vec<f64> = r.clone();
    let mut rs_old: f64 = dot(r.clone(), r.clone());
    let mut i: i64 = 0;
    while (i < max_iterations) {
        let Ap: Vec<f64> = mat_vec_mul(A.clone(), p.clone());
        let alpha: f64 = (rs_old / dot(p.clone(), Ap.clone()));
        x = vec_add(x.clone(), scalar_mul(alpha, p.clone()));
        r = vec_sub(r.clone(), scalar_mul(alpha, Ap.clone()));
        let rs_new: f64 = dot(r.clone(), r.clone());
        if (sqrtApprox(rs_new) < tol) {
            break
        }
        let beta: f64 = (rs_new / rs_old);
        p = vec_add(r.clone(), scalar_mul(beta, p.clone()));
        rs_old = rs_new;
        i = (i + 1);
    }
    return x
};
    let A: Vec<Vec<f64>> = vec![vec![8.73256573, -5.02034289, -2.68709226].clone(), vec![-5.02034289, 3.78188322, 0.91980451].clone(), vec![-2.68709226, 0.91980451, 1.94746467].clone()];
    let b: Vec<f64> = vec![-5.80872761, 3.23807431, 1.95381422];
    let x: Vec<f64> = conjugate_gradient(A.clone(), b.clone(), 1000, 0.00000001);
    println!("{}", x[0 as usize].to_string());
    println!("{}", x[1 as usize].to_string());
    println!("{}", x[2 as usize].to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
