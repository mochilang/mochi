// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn panic(mut msg: String) {
    println!("{}", msg);
};
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn copy_matrix(mut src: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (src.len() as i64)) {
        let mut row_src: Vec<f64> = src[i as usize].clone();
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (row_src.len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(row_src[j as usize]); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
    fn solve_linear_system(mut matrix: Vec<Vec<f64>>) -> Vec<f64> {
    let mut ab: Vec<Vec<f64>> = copy_matrix(matrix.clone());
    let mut num_rows: i64 = (ab.len() as i64);
    let mut num_cols: i64 = ((ab[0 as usize].clone().len() as i64) - 1);
    if (num_rows != num_cols) {
        panic!("{}", String::from("Matrix is not square"));
        return vec![]
    }
    let mut column_num: i64 = 0;
    while (column_num < num_rows) {
        let mut i: i64 = column_num;
        while (i < num_cols) {
            if (abs_float(ab[i as usize].clone()[column_num as usize]) > abs_float(ab[column_num as usize].clone()[column_num as usize])) {
                let mut temp: Vec<f64> = ab[column_num as usize].clone();
                ab[column_num as usize] = ab[i as usize].clone();
                ab[i as usize] = temp.clone();
            }
            i = (i + 1);
        }
        if (abs_float(ab[column_num as usize].clone()[column_num as usize]) < 0.00000001) {
            panic!("{}", String::from("Matrix is singular"));
            return vec![]
        }
        if (column_num != 0) {
            i = column_num;
            while (i < num_rows) {
                let mut factor: f64 = (ab[i as usize].clone()[(column_num - 1) as usize] / ab[(column_num - 1) as usize].clone()[(column_num - 1) as usize]);
                let mut j: i64 = 0;
                while (j < (ab[i as usize].clone().len() as i64)) {
                    ab[i as usize][j as usize] = (ab[i as usize].clone()[j as usize] - (factor * ab[(column_num - 1) as usize].clone()[j as usize]));
                    j = (j + 1);
                }
                i = (i + 1);
            }
        }
        column_num = (column_num + 1);
    }
    let mut x_lst: Vec<f64> = vec![];
    let mut t: i64 = 0;
    while (t < num_rows) {
        x_lst = { let mut _v = x_lst.clone(); _v.push(0.0); _v };
        t = (t + 1);
    }
    column_num = (num_rows - 1);
    while (column_num >= 0) {
        let mut x: f64 = (ab[column_num as usize].clone()[num_cols as usize] / ab[column_num as usize].clone()[column_num as usize]);
        x_lst[column_num as usize] = x;
        let mut i: i64 = (column_num - 1);
        while (i >= 0) {
            ab[i as usize][num_cols as usize] = (ab[i as usize].clone()[num_cols as usize] - (ab[i as usize].clone()[column_num as usize] * x));
            i = (i - 1);
        }
        column_num = (column_num - 1);
    }
    return x_lst
};
    let mut example_matrix: Vec<Vec<f64>> = vec![vec![5.0, -5.0, -3.0, 4.0, -11.0].clone(), vec![1.0, -4.0, 6.0, -4.0, -10.0].clone(), vec![-2.0, -5.0, 4.0, -5.0, -12.0].clone(), vec![-3.0, -3.0, 5.0, -5.0, 8.0].clone()];
    println!("{}", "Matrix:");
    println!("{}", format!("{:?}", example_matrix));
    let mut solution: Vec<f64> = solve_linear_system(example_matrix.clone());
    println!("{}", format!("{:?}", solution));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
