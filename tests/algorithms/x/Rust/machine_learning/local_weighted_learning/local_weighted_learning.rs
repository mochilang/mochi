// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_x_train: Vec<Vec<f64>> = Vec::new();
static mut g_y_train: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_x_train = vec![vec![16.99, 10.34].clone(), vec![21.01, 23.68].clone(), vec![24.59, 25.69].clone()];
        g_y_train = vec![1.01, 1.66, 3.5];
                let _start: i64 = _now();
        unsafe fn expApprox(mut x: f64) -> f64 {
    if (x < 0.0) {
        return (1.0 / expApprox(-x))
    }
    if (x > 1.0) {
        let mut half: f64 = expApprox((x / 2.0));
        return (half * half)
    }
    let mut sum: f64 = 1.0;
    let mut term: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 20) {
        term = ((term * x) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn transpose(mut mat: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut rows: i64 = (mat.len() as i64);
    let mut cols: i64 = (mat[0 as usize].clone().len() as i64);
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < cols) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < rows) {
            row = { let mut _v = row.clone(); _v.push(mat[j as usize].clone()[i as usize]); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn matMul(mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut a_rows: i64 = (a.len() as i64);
    let mut a_cols: i64 = (a[0 as usize].clone().len() as i64);
    let mut b_cols: i64 = (b[0 as usize].clone().len() as i64);
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a_rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < b_cols) {
            let mut sum: f64 = 0.0;
            let mut k: i64 = 0;
            while (k < a_cols) {
                sum = (sum + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn matInv(mut mat: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut n: i64 = (mat.len() as i64);
    let mut aug: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(mat[i as usize].clone()[j as usize]); _v };
            j = (j + 1);
        }
        j = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1.0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
            j = (j + 1);
        }
        aug = { let mut _v = aug.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut col: i64 = 0;
    while (col < n) {
        let mut pivot: f64 = aug[col as usize].clone()[col as usize];
        if (pivot == 0.0) {
            panic!("Matrix is singular");
        }
        let mut j: i64 = 0;
        while (j < (2 * n)) {
            aug[col as usize][j as usize] = (aug[col as usize].clone()[j as usize] / pivot);
            j = (j + 1);
        }
        let mut r: i64 = 0;
        while (r < n) {
            if (r != col) {
                let mut factor: f64 = aug[r as usize].clone()[col as usize];
                j = 0;
                while (j < (2 * n)) {
                    aug[r as usize][j as usize] = (aug[r as usize].clone()[j as usize] - (factor * aug[col as usize].clone()[j as usize]));
                    j = (j + 1);
                }
            }
            r = (r + 1);
        }
        col = (col + 1);
    }
    let mut inv: Vec<Vec<f64>> = vec![];
    i = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(aug[i as usize].clone()[(j + n) as usize]); _v };
            j = (j + 1);
        }
        inv = { let mut _v = inv.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return inv
};
        unsafe fn weight_matrix(mut point: Vec<f64>, mut x_train: Vec<Vec<f64>>, mut tau: f64) -> Vec<Vec<f64>> {
    let mut m: i64 = (x_train.len() as i64);
    let mut weights: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1.0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
            j = (j + 1);
        }
        weights = { let mut _v = weights.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < m) {
        let mut diff_sq: f64 = 0.0;
        let mut k: i64 = 0;
        while (k < (point.len() as i64)) {
            let mut diff: f64 = (point[k as usize] - x_train[j as usize].clone()[k as usize]);
            diff_sq = (diff_sq + (diff * diff));
            k = (k + 1);
        }
        weights[j as usize][j as usize] = expApprox((-diff_sq / ((2.0 * tau) * tau)));
        j = (j + 1);
    }
    return weights
};
        unsafe fn local_weight(mut point: Vec<f64>, mut x_train: Vec<Vec<f64>>, mut y_train: Vec<f64>, mut tau: f64) -> Vec<Vec<f64>> {
    let mut w: Vec<Vec<f64>> = weight_matrix(point.clone(), x_train.clone(), tau);
    let mut x_t: Vec<Vec<f64>> = transpose(x_train.clone());
    let mut x_t_w: Vec<Vec<f64>> = matMul(x_t.clone(), w.clone());
    let mut x_t_w_x: Vec<Vec<f64>> = matMul(x_t_w.clone(), x_train.clone());
    let mut inv_part: Vec<Vec<f64>> = matInv(x_t_w_x.clone());
    let mut y_col: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (y_train.len() as i64)) {
        y_col = { let mut _v = y_col.clone(); _v.push(vec![y_train[i as usize]]); _v };
        i = (i + 1);
    }
    let mut x_t_w_y: Vec<Vec<f64>> = matMul(x_t_w.clone(), y_col.clone());
    return matMul(inv_part.clone(), x_t_w_y.clone())
};
        unsafe fn local_weight_regression(mut x_train: Vec<Vec<f64>>, mut y_train: Vec<f64>, mut tau: f64) -> Vec<f64> {
    let mut m: i64 = (x_train.len() as i64);
    let mut preds: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < m) {
        let mut theta: Vec<Vec<f64>> = local_weight(x_train[i as usize].clone(), x_train.clone(), y_train.clone(), tau);
        let mut weights_vec: Vec<f64> = vec![];
        let mut k: i64 = 0;
        while (k < (theta.len() as i64)) {
            weights_vec = { let mut _v = weights_vec.clone(); _v.push(theta[k as usize].clone()[0 as usize]); _v };
            k = (k + 1);
        }
        let mut pred: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < (x_train[i as usize].clone().len() as i64)) {
            pred = (pred + (x_train[i as usize].clone()[j as usize] * weights_vec[j as usize]));
            j = (j + 1);
        }
        preds = { let mut _v = preds.clone(); _v.push(pred); _v };
        i = (i + 1);
    }
    return preds
};
        let mut preds: Vec<f64> = local_weight_regression(g_x_train.clone(), g_y_train.clone(), 0.6);
        println!("{:?}", preds);;
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
