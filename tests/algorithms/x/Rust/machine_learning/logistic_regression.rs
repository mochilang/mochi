// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_x: Vec<Vec<f64>> = Vec::new();
static mut g_y: Vec<f64> = Vec::new();
static mut g_alpha: f64 = 0.0;
static mut g_iterations: i64 = 0;
fn main() {
    unsafe {
        g_x = vec![vec![0.5, 1.5].clone(), vec![1.0, 1.0].clone(), vec![1.5, 0.5].clone(), vec![3.0, 3.5].clone(), vec![3.5, 3.0].clone(), vec![4.0, 4.0].clone()];
        g_y = vec![0.0, 0.0, 0.0, 1.0, 1.0, 1.0];
        g_alpha = 0.1;
        g_iterations = 1000;
                let _start: i64 = _now();
        unsafe fn expApprox(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut is_neg: bool = false;
    if (x < 0.0) {
        is_neg = true;
        y = -x;
    }
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 30) {
        term = ((term * y) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    if is_neg {
        return (1.0 / sum)
    }
    return sum
};
        unsafe fn sigmoid(mut z: f64) -> f64 {
    return (1.0 / (1.0 + expApprox(-z)))
};
        unsafe fn dot(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut s: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        s = (s + (a[i as usize] * b[i as usize]));
        i = (i + 1);
    }
    return s
};
        unsafe fn zeros(mut n: i64) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn logistic_reg(mut alpha: f64, mut x: Vec<Vec<f64>>, mut y: Vec<f64>, mut iterations: i64) -> Vec<f64> {
    let mut m: i64 = (x.len() as i64);
    let mut n: i64 = (x[0 as usize].clone().len() as i64);
    let mut theta: Vec<f64> = zeros(n);
    let mut iter: i64 = 0;
    while (iter < iterations) {
        let mut grad: Vec<f64> = zeros(n);
        let mut i: i64 = 0;
        while (i < m) {
            let mut z: f64 = dot(x[i as usize].clone(), theta.clone());
            let mut h: f64 = sigmoid(z);
            let mut k: i64 = 0;
            while (k < n) {
                grad[k as usize] = (grad[k as usize] + ((h - y[i as usize]) * x[i as usize].clone()[k as usize]));
                k = (k + 1);
            }
            i = (i + 1);
        }
        let mut k2: i64 = 0;
        while (k2 < n) {
            theta[k2 as usize] = (theta[k2 as usize] - ((alpha * grad[k2 as usize]) / (m as f64)));
            k2 = (k2 + 1);
        }
        iter = (iter + 1);
    }
    return theta
};
        let mut theta: Vec<f64> = logistic_reg(g_alpha, g_x.clone(), g_y.clone(), g_iterations);
        for i in 0..(theta.len() as i64) {
            println!("{}", format!("{:?}", theta[i as usize]));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
