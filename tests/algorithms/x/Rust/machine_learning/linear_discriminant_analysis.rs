// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static g_PI: f64 = 3.141592653589793;
static g_TWO_PI: f64 = 6.283185307179586;
static mut g_seed: i64 = 1;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return unsafe { g_seed.clone() }
};
        fn random() -> f64 {
    return ((rand() as f64) / 2147483648.0)
};
        fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - ((((x / m) as i64) as f64) * m))
};
        let mut cos = |x: f64| -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y4: f64 = (y2 * y2);
    let y6: f64 = (y4 * y2);
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
};
        fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn ln(mut x: f64) -> f64 {
    return x.ln()
};
        let mut gaussian_distribution = |mean: f64, std_dev: f64, instance_count: i64| -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < instance_count) {
        let u1: f64 = random();
        let u2: f64 = random();
        let r: f64 = sqrtApprox((-2.0 * ln(u1)));
        let theta: f64 = (unsafe { g_TWO_PI.clone() } * u2);
        let z: f64 = (r * cos(theta));
        res = { let mut _v = res.clone(); _v.push((mean + (z * std_dev))); _v };
        i = (i + 1);
    }
    return res
};
        fn y_generator(mut class_count: i64, mut instance_count: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut k: i64 = 0;
    while (k < class_count) {
        let mut i: i64 = 0;
        while (i < instance_count[k as usize]) {
            res = { let mut _v = res.clone(); _v.push(k); _v };
            i = (i + 1);
        }
        k = (k + 1);
    }
    return res
};
        fn calculate_mean(mut instance_count: i64, mut items: Vec<f64>) -> f64 {
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < instance_count) {
        total = (total + items[i as usize]);
        i = (i + 1);
    }
    return (total / (instance_count as f64))
};
        fn calculate_probabilities(mut instance_count: i64, mut total_count: i64) -> f64 {
    return ((instance_count as f64) / (total_count as f64))
};
        fn calculate_variance(mut items: Vec<Vec<f64>>, mut means: Vec<f64>, mut total_count: i64) -> f64 {
    let mut squared_diff: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (items.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (items[i as usize].clone().len() as i64)) {
            let diff: f64 = (items[i as usize].clone()[j as usize] - means[i as usize]);
            squared_diff = { let mut _v = squared_diff.clone(); _v.push((diff * diff)); _v };
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut sum_sq: f64 = 0.0;
    let mut k: i64 = 0;
    while (k < (squared_diff.len() as i64)) {
        sum_sq = (sum_sq + squared_diff[k as usize]);
        k = (k + 1);
    }
    let n_classes: i64 = (means.len() as i64);
    return ((1.0 / ((total_count - n_classes) as f64)) * sum_sq)
};
        let mut predict_y_values = |x_items: Vec<Vec<f64>>, means: Vec<f64>, variance: f64, probabilities: Vec<f64>| -> Vec<i64> {
    let mut results: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (x_items.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (x_items[i as usize].clone().len() as i64)) {
            let mut temp: Vec<f64> = vec![];
            let mut k: i64 = 0;
            while (k < (x_items.len() as i64)) {
                let discr: f64 = (((x_items[i as usize].clone()[j as usize] * (means[k as usize] / variance)) - ((means[k as usize] * means[k as usize]) / (2.0 * variance))) + ln(probabilities[k as usize]));
                temp = { let mut _v = temp.clone(); _v.push(discr); _v };
                k = (k + 1);
            }
            let mut max_idx: i64 = 0;
            let mut max_val: f64 = temp[0 as usize];
            let mut t: i64 = 1;
            while (t < (temp.len() as i64)) {
                if (temp[t as usize] > max_val) {
                    max_val = temp[t as usize];
                    max_idx = t;
                }
                t = (t + 1);
            }
            results = { let mut _v = results.clone(); _v.push(max_idx); _v };
            j = (j + 1);
        }
        i = (i + 1);
    }
    return results
};
        fn accuracy(mut actual_y: Vec<i64>, mut predicted_y: Vec<i64>) -> f64 {
    let mut correct: i64 = 0;
    let mut i: i64 = 0;
    while (i < (actual_y.len() as i64)) {
        if (actual_y[i as usize] == predicted_y[i as usize]) {
            correct = (correct + 1);
        }
        i = (i + 1);
    }
    return (((correct as f64) / ((actual_y.len() as i64) as f64)) * 100.0)
};
        let mut mochi_main = || {
    unsafe { g_seed = 1 };
    let counts: Vec<i64> = vec![20, 20, 20];
    let means: Vec<f64> = vec![5.0, 10.0, 15.0];
    let std_dev: f64 = 1.0;
    let mut x: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (counts.len() as i64)) {
        x = { let mut _v = x.clone(); _v.push(gaussian_distribution(means[i as usize], std_dev, counts[i as usize])); _v };
        i = (i + 1);
    }
    let y: Vec<i64> = y_generator((counts.len() as i64), counts.clone());
    let mut actual_means: Vec<f64> = vec![];
    i = 0;
    while (i < (counts.len() as i64)) {
        actual_means = { let mut _v = actual_means.clone(); _v.push(calculate_mean(counts[i as usize], x[i as usize].clone())); _v };
        i = (i + 1);
    }
    let mut total_count: i64 = 0;
    i = 0;
    while (i < (counts.len() as i64)) {
        total_count = (total_count + counts[i as usize]);
        i = (i + 1);
    }
    let mut probabilities: Vec<f64> = vec![];
    i = 0;
    while (i < (counts.len() as i64)) {
        probabilities = { let mut _v = probabilities.clone(); _v.push(calculate_probabilities(counts[i as usize], total_count)); _v };
        i = (i + 1);
    }
    let variance: f64 = calculate_variance(x.clone(), actual_means.clone(), total_count);
    let predicted: Vec<i64> = predict_y_values(x.clone(), actual_means.clone(), variance, probabilities.clone());
    println!("{:?}", format!("{:?}", predicted));
    println!("{}", format!("{:?}", accuracy(y.clone(), predicted.clone())));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
