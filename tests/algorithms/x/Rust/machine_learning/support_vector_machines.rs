// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SVC {
    weights: Vec<f64>,
    bias: f64,
    lr: f64,
    lambda: f64,
    epochs: i64,
}
impl std::fmt::Display for SVC {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"weights\": {:?}", self.weights)?;
        write!(f, ", ")?;
        write!(f, "\"bias\": {}", self.bias)?;
        write!(f, ", ")?;
        write!(f, "\"lr\": {}", self.lr)?;
        write!(f, ", ")?;
        write!(f, "\"lambda\": {}", self.lambda)?;
        write!(f, ", ")?;
        write!(f, "\"epochs\": {}", self.epochs)?;
        write!(f, "}}")
    }
}

static mut g_xs: Vec<Vec<f64>> = Vec::new();
static mut g_ys: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_xs = vec![vec![0.0, 1.0].clone(), vec![0.0, 2.0].clone(), vec![1.0, 1.0].clone(), vec![1.0, 2.0].clone()];
        g_ys = vec![1, 1, -1, -1];
                let _start: i64 = _now();
        unsafe fn dot(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut s: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        s = (s + (a[i as usize] * b[i as usize]));
        i = (i + 1);
    }
    return s
};
        unsafe fn new_svc(mut lr: f64, mut lambda: f64, mut epochs: i64) -> SVC {
    return SVC {weights: vec![], bias: 0.0, lr: lr, lambda: lambda, epochs: epochs}
};
        unsafe fn fit(model: &SVC, mut xs: Vec<Vec<f64>>, mut ys: Vec<i64>) -> SVC {
    let mut n_features: i64 = (xs[0 as usize].clone().len() as i64);
    let mut w: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n_features) {
        w = { let mut _v = w.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    let mut b: f64 = 0.0;
    let mut epoch: i64 = 0;
    while (epoch < model.epochs) {
        let mut j: i64 = 0;
        while (j < (xs.len() as i64)) {
            let mut x: Vec<f64> = xs[j as usize].clone();
            let mut y: f64 = (ys[j as usize] as f64);
            let mut prod: f64 = (dot(w.clone(), x.clone()) + b);
            if ((y * prod) < 1.0) {
                let mut k: i64 = 0;
                while (k < (w.len() as i64)) {
                    w[k as usize] = (w[k as usize] + (model.lr * ((y * x[k as usize]) - ((2.0 * model.lambda) * w[k as usize]))));
                    k = (k + 1);
                }
                b = (b + (model.lr * y));
            } else {
                let mut k: i64 = 0;
                while (k < (w.len() as i64)) {
                    w[k as usize] = (w[k as usize] - (model.lr * ((2.0 * model.lambda) * w[k as usize])));
                    k = (k + 1);
                }
            }
            j = (j + 1);
        }
        epoch = (epoch + 1);
    }
    return SVC {weights: w, bias: b, lr: model.lr, lambda: model.lambda, epochs: model.epochs}
};
        unsafe fn predict(model: &SVC, mut x: Vec<f64>) -> i64 {
    let mut s: f64 = (dot(model.weights.clone().clone(), x.clone()) + model.bias);
    if (s >= 0.0) {
        return 1
    } else {
        return -1
    }
};
        let mut base: SVC = new_svc(0.01, 0.01, 1000);
        let mut model: SVC = fit(&base, g_xs.clone(), g_ys.clone());
        println!("{}", predict(&model, vec![0.0, 1.0]));
        println!("{}", predict(&model, vec![1.0, 1.0]));
        println!("{}", predict(&model, vec![2.0, 2.0]));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
