// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
#[derive(Debug, Clone)]
enum Tree {
    Leaf { prediction: f64 },
    Branch { decision_boundary: f64, left: Box<Tree>, right: Box<Tree> },
}

static g_PI: f64 = 3.141592653589793;
static g_TWO_PI: f64 = 6.283185307179586;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - ((((x / m) as i64) as f64) * m))
};
        let mut sin = |x: f64| -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y3: f64 = (y2 * y);
    let y5: f64 = (y3 * y2);
    let y7: f64 = (y5 * y2);
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
};
        let mut seed: i64 = 123456789;
        let mut rand = || -> f64 {
    seed = (((1103515245 * seed) + 12345) % 2147483648);
    return ((seed as f64) / 2147483648.0)
};
        let mut mean = |vals: Vec<f64>| -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (vals.len() as i64)) {
        sum = (sum + vals[i as usize]);
        i = (i + 1);
    }
    return (sum / ((vals.len() as i64) as f64))
};
        let mut mean_squared_error = |labels: Vec<f64>, prediction: f64| -> f64 {
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (labels.len() as i64)) {
        let diff: f64 = (labels[i as usize] - prediction);
        total = (total + (diff * diff));
        i = (i + 1);
    }
    return (total / ((labels.len() as i64) as f64))
};
        let mut train_tree = {
fn train_tree(mean: &mut impl FnMut(Vec<f64>) -> f64, mean_squared_error: &mut impl FnMut(Vec<f64>, f64) -> f64, x: Vec<f64>, y: Vec<f64>, depth: i64, min_leaf_size: i64) -> Tree {
    if ((x.len() as i64) < (2 * min_leaf_size)) {
        return Tree::Leaf { prediction: mean(y.clone()) }
    }
    if (depth == 1) {
        return Tree::Leaf { prediction: mean(y.clone()) }
    }
    let mut best_split: i64 = 0;
    let mut min_error: f64 = (mean_squared_error(x.clone(), mean(y.clone())) * 2.0);
    let mut i: i64 = 0;
    while (i < (x.len() as i64)) {
        if ((x[0 as usize..i as usize].to_vec().len() as i64) < min_leaf_size) {
            i = i;
        } else {
            if ((x[i as usize..].to_vec().len() as i64) < min_leaf_size) {
                i = i;
            } else {
                let err_left: f64 = mean_squared_error(x[0 as usize..i as usize].to_vec(), mean(y[0 as usize..i as usize].to_vec()));
                let err_right: f64 = mean_squared_error(x[i as usize..].to_vec(), mean(y[i as usize..].to_vec()));
                let err: f64 = (err_left + err_right);
                if (err < min_error) {
                    best_split = i;
                    min_error = err;
                }
            }
        }
        i = (i + 1);
    }
    if (best_split != 0) {
        let left_x: Vec<f64> = x[0 as usize..best_split as usize].to_vec();
        let left_y: Vec<f64> = y[0 as usize..best_split as usize].to_vec();
        let right_x: Vec<f64> = x[best_split as usize..].to_vec();
        let right_y: Vec<f64> = y[best_split as usize..].to_vec();
        let boundary: f64 = x[best_split as usize];
        let left_tree: Tree = train_tree(mean, mean_squared_error, left_x.clone(), left_y.clone(), (depth - 1), min_leaf_size);
        let right_tree: Tree = train_tree(mean, mean_squared_error, right_x.clone(), right_y.clone(), (depth - 1), min_leaf_size);
        return Tree::Branch { decision_boundary: boundary, left: Box::new(left_tree.clone()), right: Box::new(right_tree.clone()) }
    }
    return Tree::Leaf { prediction: mean(y.clone()) }
}
|x: Vec<f64>, y: Vec<f64>, depth: i64, min_leaf_size: i64| -> Tree { train_tree(&mut mean, &mut mean_squared_error, x, y, depth, min_leaf_size) }
};
        fn predict(mut tree: Tree, mut value: f64) -> f64 {
    return match tree { Tree::Leaf { prediction: p } => p, Tree::Branch { decision_boundary: b, left: l, right: r } => if (value >= (b as f64)) { predict(*r.clone(), value) } else { predict(*l.clone(), value) }, }
};
        let mut mochi_main = || {
    let mut x: Vec<f64> = vec![];
    let mut v: f64 = -1.0;
    while (v < 1.0) {
        x = { let mut _v = x.clone(); _v.push(v); _v };
        v = (v + 0.005);
    }
    let mut y: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (x.len() as i64)) {
        y = { let mut _v = y.clone(); _v.push(sin(x[i as usize])); _v };
        i = (i + 1);
    }
    let tree: Tree = train_tree(x.clone(), y.clone(), 10, 10);
    let mut test_cases: Vec<f64> = vec![];
    i = 0;
    while (i < 10) {
        test_cases = { let mut _v = test_cases.clone(); _v.push(((rand() * 2.0) - 1.0)); _v };
        i = (i + 1);
    }
    let mut predictions: Vec<f64> = vec![];
    i = 0;
    while (i < (test_cases.len() as i64)) {
        predictions = { let mut _v = predictions.clone(); _v.push(predict(tree.clone(), test_cases[i as usize])); _v };
        i = (i + 1);
    }
    let mut sum_err: f64 = 0.0;
    i = 0;
    while (i < (test_cases.len() as i64)) {
        let diff: f64 = (predictions[i as usize] - test_cases[i as usize]);
        sum_err = (sum_err + (diff * diff));
        i = (i + 1);
    }
    let avg_error: f64 = (sum_err / ((test_cases.len() as i64) as f64));
    println!("{}", format!("{}{}", "Test values: ", format!("{:?}", test_cases)));
    println!("{}", format!("{}{}", "Predictions: ", format!("{:?}", predictions)));
    println!("{}", format!("{}{}", "Average error: ", avg_error.to_string()));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
