// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn get_winner(mut weights: Vec<Vec<f64>>, mut sample: Vec<i64>) -> i64 {
    let mut d0: f64 = 0.0;
    let mut d1: f64 = 0.0;
    for i in 0..(sample.len() as i64) {
        let mut diff0: f64 = ((sample[i as usize] as f64) - weights[0 as usize].clone()[i as usize]);
        let mut diff1: f64 = ((sample[i as usize] as f64) - weights[1 as usize].clone()[i as usize]);
        d0 = (d0 + (diff0 * diff0));
        d1 = (d1 + (diff1 * diff1));
        return if (d0 > d1) { 0 } else { 1 }
    }
    return 0
};
    fn update(mut weights: Vec<Vec<f64>>, mut sample: Vec<i64>, mut j: i64, mut alpha: f64) -> Vec<Vec<f64>> {
    for i in 0..(weights.len() as i64) {
        weights[j as usize][i as usize] = (weights[j as usize].clone()[i as usize] + (alpha * ((sample[i as usize] as f64) - weights[j as usize].clone()[i as usize])));
    }
    return weights
};
    fn list_to_string(mut xs: Vec<f64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if (i < ((xs.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn matrix_to_string(mut m: Vec<Vec<f64>>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (m.len() as i64)) {
        s = format!("{}{}", s, list_to_string(m[i as usize].clone()));
        if (i < ((m.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn mochi_main() {
    let mut training_samples: Vec<Vec<i64>> = vec![vec![1, 1, 0, 0].clone(), vec![0, 0, 0, 1].clone(), vec![1, 0, 0, 0].clone(), vec![0, 0, 1, 1].clone()];
    let mut weights: Vec<Vec<f64>> = vec![vec![0.2, 0.6, 0.5, 0.9].clone(), vec![0.8, 0.4, 0.7, 0.3].clone()];
    let mut epochs: i64 = 3;
    let mut alpha: f64 = 0.5;
    for _ in 0..epochs {
        for j in 0..(training_samples.len() as i64) {
            let mut sample: Vec<i64> = training_samples[j as usize].clone();
            let mut winner: i64 = get_winner(weights.clone(), sample.clone());
            weights = update(weights.clone(), sample.clone(), winner, alpha);
        }
    }
    let mut sample: Vec<i64> = vec![0, 0, 0, 1];
    let mut winner: i64 = get_winner(weights.clone(), sample.clone());
    println!("{}", format!("{}{}", "Clusters that the test sample belongs to : ", winner.to_string()));
    println!("{}", format!("{}{}", "Weights that have been trained : ", matrix_to_string(weights.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
