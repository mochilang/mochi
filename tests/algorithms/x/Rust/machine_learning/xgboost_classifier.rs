// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Stump {
    feature: i64,
    threshold: f64,
    left: f64,
    right: f64,
}
impl std::fmt::Display for Stump {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"feature\": {}", self.feature)?;
        write!(f, ", ")?;
        write!(f, "\"threshold\": {}", self.threshold)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn mean(mut xs: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        sum = (sum + xs[i as usize]);
        i = (i + 1);
    }
    return (sum / (((xs.len() as i64) as f64) * 1.0))
};
    fn stump_predict(s: &Stump, mut x: Vec<f64>) -> f64 {
    if (x[s.feature as usize] < s.threshold) {
        return s.left
    }
    return s.right
};
    fn train_stump(mut features: Vec<Vec<f64>>, mut residuals: Vec<f64>) -> Stump {
    let mut best_feature: i64 = 0;
    let mut best_threshold: f64 = 0.0;
    let mut best_error: f64 = 1000000000.0;
    let mut best_left: f64 = 0.0;
    let mut best_right: f64 = 0.0;
    let mut num_features: i64 = (features[0 as usize].clone().len() as i64);
    let mut f: i64 = 0;
    while (f < num_features) {
        let mut i: i64 = 0;
        while (i < (features.len() as i64)) {
            let mut threshold: f64 = features[i as usize].clone()[f as usize];
            let mut left: Vec<f64> = vec![];
            let mut right: Vec<f64> = vec![];
            let mut j: i64 = 0;
            while (j < (features.len() as i64)) {
                if (features[j as usize].clone()[f as usize] < threshold) {
                    left = vec![left.clone(), vec![residuals[j as usize]].clone()].concat();
                } else {
                    right = vec![right.clone(), vec![residuals[j as usize]].clone()].concat();
                }
                j = (j + 1);
            }
            if (((left.len() as i64) != 0) && ((right.len() as i64) != 0)) {
                let mut left_mean: f64 = mean(left.clone());
                let mut right_mean: f64 = mean(right.clone());
                let mut err: f64 = 0.0;
                j = 0;
                while (j < (features.len() as i64)) {
                    let mut pred: f64 = if (features[j as usize].clone()[f as usize] < threshold) { left_mean } else { right_mean };
                    let mut diff: f64 = (residuals[j as usize] - pred);
                    err = (err + (diff * diff));
                    j = (j + 1);
                }
                if (err < best_error) {
                    best_error = err;
                    best_feature = f;
                    best_threshold = threshold;
                    best_left = left_mean;
                    best_right = right_mean;
                }
            }
            i = (i + 1);
        }
        f = (f + 1);
    }
    return Stump {feature: best_feature, threshold: best_threshold, left: best_left, right: best_right}
};
    fn boost(mut features: Vec<Vec<f64>>, mut targets: Vec<i64>, mut rounds: i64) -> Vec<Stump> {
    let mut model: Vec<Stump> = vec![];
    let mut preds: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (targets.len() as i64)) {
        preds = vec![preds.clone(), vec![0.0].clone()].concat();
        i = (i + 1);
    }
    let mut r: i64 = 0;
    while (r < rounds) {
        let mut residuals: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (targets.len() as i64)) {
            residuals = vec![residuals.clone(), vec![((targets[j as usize] as f64) - preds[j as usize])].clone()].concat();
            j = (j + 1);
        }
        let mut stump: Stump = train_stump(features.clone(), residuals.clone());
        model = vec![model.clone(), vec![stump.clone()].clone()].concat();
        j = 0;
        while (j < (preds.len() as i64)) {
            preds[j as usize] = (preds[j as usize] + stump_predict(&stump, features[j as usize].clone()));
            j = (j + 1);
        }
        r = (r + 1);
    }
    return model
};
    fn predict(mut model: Vec<Stump>, mut x: Vec<f64>) -> f64 {
    let mut score: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (model.len() as i64)) {
        let mut s: Stump = model[i as usize].clone();
        if (x[s.feature as usize] < s.threshold) {
            score = (score + s.left);
        } else {
            score = (score + s.right);
        }
        i = (i + 1);
    }
    return score
};
    fn mochi_main() {
    let mut features: Vec<Vec<f64>> = vec![vec![5.1, 3.5].clone(), vec![4.9, 3.0].clone(), vec![6.2, 3.4].clone(), vec![5.9, 3.0].clone()];
    let mut targets: Vec<i64> = vec![0, 0, 1, 1];
    let mut model: Vec<Stump> = boost(features.clone(), targets.clone(), 3);
    let mut out: String = String::from("");
    let mut i: i64 = 0;
    while (i < (features.len() as i64)) {
        let mut s: f64 = predict(model.clone(), features[i as usize].clone());
        let mut label: i64 = if (s >= 0.5) { 1 } else { 0 };
        if (i == 0) {
            out = label.to_string().to_string();
        } else {
            out = format!("{}{}", format!("{}{}", out, " "), label.to_string());
        }
        i = (i + 1);
    }
    println!("{}", out);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
