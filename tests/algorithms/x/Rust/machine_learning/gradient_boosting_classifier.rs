// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Stump {
    feature: i64,
    threshold: f64,
    left: f64,
    right: f64,
}
impl std::fmt::Display for Stump {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"feature\": {}", self.feature)?;
        write!(f, ", ")?;
        write!(f, "\"threshold\": {}", self.threshold)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn exp_approx(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 10) {
        term = ((term * x) / (i as f64));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    fn signf(mut x: f64) -> f64 {
    if (x >= 0.0) {
        return 1.0
    }
    return -1.0
};
    let mut gradient = |target: Vec<f64>, preds: Vec<f64>| -> Vec<f64> {
    let n: i64 = (target.len() as i64);
    let mut residuals: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let t: f64 = target[i as usize];
        let y: f64 = preds[i as usize];
        let exp_val: f64 = exp_approx((t * y));
        let res: f64 = (-t / (1.0 + exp_val));
        residuals = { let mut _v = residuals.clone(); _v.push(res); _v };
        i = (i + 1);
    }
    return residuals
};
    fn predict_raw(mut models: Vec<Stump>, mut features: Vec<Vec<f64>>, mut learning_rate: f64) -> Vec<f64> {
    let n: i64 = (features.len() as i64);
    let mut preds: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        preds = { let mut _v = preds.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    let mut m: i64 = 0;
    while (m < (models.len() as i64)) {
        let stump: Stump = models[m as usize].clone();
        i = 0;
        while (i < n) {
            let value: f64 = features[i as usize].clone()[stump.feature as usize];
            if (value <= stump.threshold) {
                preds[i as usize] = (preds[i as usize] + (learning_rate * stump.left));
            } else {
                preds[i as usize] = (preds[i as usize] + (learning_rate * stump.right));
            }
            i = (i + 1);
        }
        m = (m + 1);
    }
    return preds
};
    let mut predict = |models: Vec<Stump>, features: Vec<Vec<f64>>, learning_rate: f64| -> Vec<f64> {
    let raw: Vec<f64> = predict_raw(models.clone(), features.clone(), learning_rate);
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (raw.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(signf(raw[i as usize])); _v };
        i = (i + 1);
    }
    return result
};
    fn train_stump(mut features: Vec<Vec<f64>>, mut residuals: Vec<f64>) -> Stump {
    let n_samples: i64 = (features.len() as i64);
    let n_features: i64 = (features[0 as usize].clone().len() as i64);
    let mut best_feature: i64 = 0;
    let mut best_threshold: f64 = 0.0;
    let mut best_error: f64 = 1000000000.0;
    let mut best_left: f64 = 0.0;
    let mut best_right: f64 = 0.0;
    let mut j: i64 = 0;
    while (j < n_features) {
        let mut t_index: i64 = 0;
        while (t_index < n_samples) {
            let t: f64 = features[t_index as usize].clone()[j as usize];
            let mut sum_left: f64 = 0.0;
            let mut count_left: i64 = 0;
            let mut sum_right: f64 = 0.0;
            let mut count_right: i64 = 0;
            let mut i: i64 = 0;
            while (i < n_samples) {
                if (features[i as usize].clone()[j as usize] <= t) {
                    sum_left = (sum_left + residuals[i as usize]);
                    count_left = (count_left + 1);
                } else {
                    sum_right = (sum_right + residuals[i as usize]);
                    count_right = (count_right + 1);
                }
                i = (i + 1);
            }
            let mut left_val: f64 = 0.0;
            if (count_left != 0) {
                left_val = (sum_left / (count_left as f64));
            }
            let mut right_val: f64 = 0.0;
            if (count_right != 0) {
                right_val = (sum_right / (count_right as f64));
            }
            let mut error: f64 = 0.0;
            i = 0;
            while (i < n_samples) {
                let pred: f64 = if (features[i as usize].clone()[j as usize] <= t) { left_val } else { right_val };
                let diff: f64 = (residuals[i as usize] - pred);
                error = (error + (diff * diff));
                i = (i + 1);
            }
            if (error < best_error) {
                best_error = error;
                best_feature = j;
                best_threshold = t;
                best_left = left_val;
                best_right = right_val;
            }
            t_index = (t_index + 1);
        }
        j = (j + 1);
    }
    return Stump {feature: best_feature, threshold: best_threshold, left: best_left, right: best_right}
};
    let mut fit = |n_estimators: i64, learning_rate: f64, features: Vec<Vec<f64>>, target: Vec<f64>| -> Vec<Stump> {
    let mut models: Vec<Stump> = vec![];
    let mut m: i64 = 0;
    while (m < n_estimators) {
        let preds: Vec<f64> = predict_raw(models.clone(), features.clone(), learning_rate);
        let grad: Vec<f64> = gradient(target.clone(), preds.clone());
        let mut residuals: Vec<f64> = vec![];
        let mut i: i64 = 0;
        while (i < (grad.len() as i64)) {
            residuals = { let mut _v = residuals.clone(); _v.push(-grad[i as usize]); _v };
            i = (i + 1);
        }
        let stump: Stump = train_stump(features.clone(), residuals.clone());
        models = { let mut _v = models.clone(); _v.push(stump.clone()); _v };
        m = (m + 1);
    }
    return models
};
    fn accuracy(mut preds: Vec<f64>, mut target: Vec<f64>) -> f64 {
    let n: i64 = (target.len() as i64);
    let mut correct: i64 = 0;
    let mut i: i64 = 0;
    while (i < n) {
        if (preds[i as usize] == target[i as usize]) {
            correct = (correct + 1);
        }
        i = (i + 1);
    }
    return ((correct as f64) / (n as f64))
};
    let features: Vec<Vec<f64>> = vec![vec![1.0].clone(), vec![2.0].clone(), vec![3.0].clone(), vec![4.0].clone()];
    let target: Vec<f64> = vec![-1.0, -1.0, 1.0, 1.0];
    let models: Vec<Stump> = fit(5, 0.5, features.clone(), target.clone());
    let predictions: Vec<f64> = predict(models.clone(), features.clone(), 0.5);
    let acc: f64 = accuracy(predictions.clone(), target.clone());
    println!("{}", format!("{}{}", "Accuracy: ", acc.to_string()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
