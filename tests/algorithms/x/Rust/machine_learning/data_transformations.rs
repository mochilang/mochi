// Generated by Mochi transpiler v0.10.63
fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
}

fn pow10(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
}

fn round(mut x: f64, mut n: i64) -> f64 {
    let mut m: f64 = pow10(n);
    let mut y: f64 = (floor(((x * m) + 0.5)) as f64);
    return (y / m)
}

fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
}

fn mean(mut data: Vec<f64>) -> f64 {
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    let mut n = (data.len() as i64);
    while (i < n) {
        total = (total + data[i as usize]);
        i = (i + 1);
    }
    return (total / (n as f64))
}

fn stdev(mut data: Vec<f64>) -> f64 {
    let mut n = (data.len() as i64);
    if (n <= 1) {
        panic!("data length must be > 1");
    }
    let mut m: f64 = mean(data.clone());
    let mut sum_sq: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < n) {
        let mut diff: f64 = (data[i as usize] - m);
        sum_sq = (sum_sq + (diff * diff));
        i = (i + 1);
    }
    return sqrtApprox((sum_sq / ((n - 1) as f64)))
}

fn normalization(mut data: Vec<f64>, mut ndigits: i64) -> Vec<f64> {
    let mut x_min: f64 = ({ let tmp = data.clone(); let mut it = tmp.iter(); let first = *it.next().unwrap_or(&Default::default()); it.fold(first, |a, b| if *b < a { *b } else { a }) } as f64);
    let mut x_max: f64 = ({ let tmp = data.clone(); let mut it = tmp.iter(); let first = *it.next().unwrap_or(&Default::default()); it.fold(first, |a, b| if *b > a { *b } else { a }) } as f64);
    let mut denom: f64 = (x_max - x_min);
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    let mut n = (data.len() as i64);
    while (i < n) {
        let mut norm: f64 = ((data[i as usize] - x_min) / denom);
        result = { let mut _v = result.clone(); _v.push(round(norm, ndigits)); _v };
        i = (i + 1);
    }
    return result
}

fn standardization(mut data: Vec<f64>, mut ndigits: i64) -> Vec<f64> {
    let mut mu: f64 = mean(data.clone());
    let mut sigma: f64 = stdev(data.clone());
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    let mut n = (data.len() as i64);
    while (i < n) {
        let mut z: f64 = ((data[i as usize] - mu) / sigma);
        result = { let mut _v = result.clone(); _v.push(round(z, ndigits)); _v };
        i = (i + 1);
    }
    return result
}

fn main() {
    println!("{}", format!("{:?}", normalization(vec![2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)));
    println!("{}", format!("{:?}", normalization(vec![5.0, 10.0, 15.0, 20.0, 25.0], 3)));
    println!("{}", format!("{:?}", standardization(vec![2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)));
    println!("{}", format!("{:?}", standardization(vec![5.0, 10.0, 15.0, 20.0, 25.0], 3)));
}
