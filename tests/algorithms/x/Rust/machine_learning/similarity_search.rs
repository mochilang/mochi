// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Neighbor {
    vector: Vec<f64>,
    distance: f64,
}
impl std::fmt::Display for Neighbor {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"vector\": {:?}", self.vector)?;
        write!(f, ", ")?;
        write!(f, "\"distance\": {}", self.distance)?;
        write!(f, "}}")
    }
}

static mut g_dataset: Vec<Vec<f64>> = Vec::new();
static mut g_value_array: Vec<Vec<f64>> = Vec::new();
static mut g_k: i64 = 0;
fn main() {
    unsafe {
        g_dataset = vec![vec![0.0, 0.0, 0.0].clone(), vec![1.0, 1.0, 1.0].clone(), vec![2.0, 2.0, 2.0].clone()];
        g_value_array = vec![vec![0.0, 0.0, 0.0].clone(), vec![0.0, 0.0, 1.0].clone()];
        g_k = 0;
                let _start: i64 = _now();
        unsafe fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn euclidean(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut diff: f64 = (a[i as usize] - b[i as usize]);
        sum = (sum + (diff * diff));
        i = (i + 1);
    }
    let mut res: f64 = sqrt(sum);
    return res
};
        unsafe fn similarity_search(mut dataset: Vec<Vec<f64>>, mut value_array: Vec<Vec<f64>>) -> Vec<Neighbor> {
    let mut dim: i64 = (dataset[0 as usize].clone().len() as i64);
    if (dim != (value_array[0 as usize].clone().len() as i64)) {
        return vec![]
    }
    let mut result: Vec<Neighbor> = vec![];
    let mut i: i64 = 0;
    while (i < (value_array.len() as i64)) {
        let mut value: Vec<f64> = value_array[i as usize].clone();
        let mut dist: f64 = euclidean(value.clone(), dataset[0 as usize].clone());
        let mut vec: Vec<f64> = dataset[0 as usize].clone();
        let mut j: i64 = 1;
        while (j < (dataset.len() as i64)) {
            let mut d: f64 = euclidean(value.clone(), dataset[j as usize].clone());
            if (d < dist) {
                dist = d;
                vec = dataset[j as usize].clone();
            }
            j = (j + 1);
        }
        let mut nb: Neighbor = Neighbor {vector: vec, distance: dist};
        result = { let mut _v = result.clone(); _v.push(nb.clone()); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn cosine_similarity(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut dot: f64 = 0.0;
    let mut norm_a: f64 = 0.0;
    let mut norm_b: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        dot = (dot + (a[i as usize] * b[i as usize]));
        norm_a = (norm_a + (a[i as usize] * a[i as usize]));
        norm_b = (norm_b + (b[i as usize] * b[i as usize]));
        i = (i + 1);
    }
    if ((norm_a == 0.0) || (norm_b == 0.0)) {
        return 0.0
    }
    return (dot / (sqrt(norm_a) * sqrt(norm_b)))
};
        let mut neighbors: Vec<Neighbor> = similarity_search(g_dataset.clone(), g_value_array.clone());
        while (g_k < (neighbors.len() as i64)) {
            let mut n: Neighbor = neighbors[g_k as usize].clone();
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "[", format!("{:?}", n.vector.clone())), ", "), n.distance.to_string()), "]"));
            g_k = (g_k + 1);
        }
        println!("{}", cosine_similarity(vec![1.0, 2.0], vec![6.0, 32.0]).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
