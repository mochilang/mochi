// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LOWER: String = String::new();
static mut g_UPPER: String = String::new();
static mut g_PUNCT: String = String::new();
static mut g_corpus: String = String::new();
fn main() {
    unsafe {
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_PUNCT = String::from("!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~").clone();
        g_corpus = String::from("This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus.").clone();
                let _start: i64 = _now();
        unsafe fn to_lowercase(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        let mut j: i64 = 0;
        let mut found: bool = false;
        while (j < (g_UPPER.len() as i64)) {
            if (c.as_str() == g_UPPER.chars().nth(j as usize).unwrap().to_string().as_str()) {
                res = format!("{}{}", res, g_LOWER.chars().nth(j as usize).unwrap().to_string());
                found = true;
                break
            }
            j = (j + 1);
        }
        if !found {
            res = format!("{}{}", res, c);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn is_punct(c: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_PUNCT.len() as i64)) {
        if (c == g_PUNCT.chars().nth(i as usize).unwrap().to_string()) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn clean_text(text: &str, mut keep_newlines: bool) -> String {
    let mut lower: String = to_lowercase(text).clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (lower.len() as i64)) {
        let mut ch: String = lower.chars().nth(i as usize).unwrap().to_string().clone();
        if is_punct(&ch) {
        } else if (ch.as_str() == "\n") {
            if keep_newlines {
                res = format!("{}{}", res, "\n");
            }
        } else {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn split(s: &str, sep: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch == sep) {
            res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
            current = String::from("");
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    return res
};
        unsafe fn contains(s: &str, sub: &str) -> bool {
    let mut n: i64 = (s.len() as i64);
    let mut m: i64 = (sub.len() as i64);
    if (m == 0) {
        return true
    }
    let mut i: i64 = 0;
    while (i <= (n - m)) {
        let mut j: i64 = 0;
        let mut is_match: bool = true;
        while (j < m) {
            if (s.chars().nth((i + j) as usize).unwrap().to_string().as_str() != sub.chars().nth(j as usize).unwrap().to_string().as_str()) {
                is_match = false;
                break
            }
            j = (j + 1);
        }
        if is_match {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        unsafe fn round3(mut x: f64) -> f64 {
    return (floor(((x * 1000.0) + 0.5)) / 1000.0)
};
        unsafe fn ln(mut x: f64) -> f64 {
    let mut t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut k: i64 = 1;
    while (k <= 99) {
        sum = (sum + (term / (k as f64)));
        term = ((term * t) * t);
        k = (k + 2);
    }
    return (2.0 * sum)
};
        unsafe fn log10(mut x: f64) -> f64 {
    return (ln(x) / ln(10.0))
};
        unsafe fn term_frequency(term: &str, document: &str) -> i64 {
    let mut clean: String = clean_text(document, false).clone();
    let mut tokens: Vec<String> = clean.split(" ").map(|x| x.to_string()).collect::<Vec<String>>();
    let mut t: String = to_lowercase(term).clone();
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (tokens.len() as i64)) {
        if ((tokens[i as usize].clone().as_str() != "") && (tokens[i as usize].clone().as_str() == t.as_str())) {
            count = (count + 1);
        }
        i = (i + 1);
    }
    return count
};
        unsafe fn document_frequency(term: &str, corpus: &str) -> Vec<i64> {
    let mut clean: String = clean_text(corpus, true).clone();
    let mut docs: Vec<String> = clean.split("\n").map(|x| x.to_string()).collect::<Vec<String>>();
    let mut t: String = to_lowercase(term).clone();
    let mut matches: i64 = 0;
    let mut i: i64 = 0;
    while (i < (docs.len() as i64)) {
        if contains(&docs[i as usize].clone(), &t) {
            matches = (matches + 1);
        }
        i = (i + 1);
    }
    return vec![matches, (docs.len() as i64)]
};
        unsafe fn inverse_document_frequency(mut df: i64, mut n: i64, mut smoothing: bool) -> f64 {
    if smoothing {
        if (n == 0) {
            panic!("log10(0) is undefined.");
        }
        let mut ratio: f64 = ((n as f64) / (1.0 + (df as f64)));
        let mut l: f64 = log10(ratio);
        let mut result: f64 = round3((1.0 + l));
        println!("{}", format!("{:?}", result));
        return result
    }
    if (df == 0) {
        panic!("df must be > 0");
    }
    if (n == 0) {
        panic!("log10(0) is undefined.");
    }
    let mut ratio: f64 = ((n as f64) / (df as f64));
    let mut l: f64 = log10(ratio);
    let mut result: f64 = round3(l);
    println!("{}", format!("{:?}", result));
    return result
};
        unsafe fn tf_idf(mut tf: i64, mut idf: f64) -> f64 {
    let mut prod: f64 = ((tf as f64) * idf);
    let mut result: f64 = round3(prod);
    println!("{}", format!("{:?}", result));
    return result
};
        println!("{}", term_frequency(&"to", &"To be, or not to be"));
        println!("{}", format!("{:?}", document_frequency(&"first", &g_corpus)));
        let mut idf_val: f64 = inverse_document_frequency(1, 3, false);
        tf_idf(2, idf_val);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
