// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_sample_rate: i64 = 0;
static mut g_size: i64 = 0;
static mut g_audio: Vec<f64> = Vec::new();
static mut g_n: i64 = 0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_sample_rate = 8000;
        g_size = 16;
        g_audio = vec![];
        g_n = 0;
                let _start: i64 = _now();
        unsafe fn sinApprox(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut n: i64 = 1;
    while (n <= 10) {
        let mut denom: f64 = (((2 * n) * ((2 * n) + 1)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn cosApprox(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n <= 10) {
        let mut denom: f64 = ((((2 * n) - 1) * (2 * n)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn expApprox(mut x: f64) -> f64 {
    let mut sum: f64 = 1.0;
    let mut term: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 10) {
        term = ((term * x) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn ln(mut x: f64) -> f64 {
    let mut t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        sum = (sum + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (2.0 * sum)
};
        unsafe fn log10(mut x: f64) -> f64 {
    return (ln(x) / ln(10.0))
};
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        unsafe fn normalize(mut audio: Vec<f64>) -> Vec<f64> {
    let mut max_val: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (audio.len() as i64)) {
        let mut v: f64 = absf(audio[i as usize]);
        if (v > max_val) {
            max_val = v;
        }
        i = (i + 1);
    }
    let mut res: Vec<f64> = vec![];
    i = 0;
    while (i < (audio.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((audio[i as usize] / max_val)); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn dft(mut frame: Vec<f64>, mut bins: i64) -> Vec<f64> {
    let mut N: i64 = (frame.len() as i64);
    let mut spec: Vec<f64> = vec![];
    let mut k: i64 = 0;
    while (k < bins) {
        let mut real: f64 = 0.0;
        let mut imag: f64 = 0.0;
        let mut n: i64 = 0;
        while (n < N) {
            let mut angle: f64 = ((((-2.0 * g_PI) * (k as f64)) * (n as f64)) / (N as f64));
            real = (real + (frame[n as usize] * cosApprox(angle)));
            imag = (imag + (frame[n as usize] * sinApprox(angle)));
            n = (n + 1);
        }
        spec = { let mut _v = spec.clone(); _v.push(((real * real) + (imag * imag))); _v };
        k = (k + 1);
    }
    return spec
};
        unsafe fn triangular_filters(mut bins: i64, mut spectrum_size: i64) -> Vec<Vec<f64>> {
    let mut filters: Vec<Vec<f64>> = vec![];
    let mut b: i64 = 0;
    while (b < bins) {
        let mut center: i64 = (((b + 1) * spectrum_size) / (bins + 1));
        let mut filt: Vec<f64> = vec![];
        let mut i: i64 = 0;
        while (i < spectrum_size) {
            let mut v: f64 = 0.0;
            if (i <= center) {
                v = ((i as f64) / (center as f64));
            } else {
                v = (((spectrum_size - i) as f64) / ((spectrum_size - center) as f64));
            }
            filt = { let mut _v = filt.clone(); _v.push(v); _v };
            i = (i + 1);
        }
        filters = { let mut _v = filters.clone(); _v.push(filt.clone()); _v };
        b = (b + 1);
    }
    return filters
};
        unsafe fn dot(mut mat: Vec<Vec<f64>>, mut vec: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut sum: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < (vec.len() as i64)) {
            sum = (sum + (mat[i as usize].clone()[j as usize] * vec[j as usize]));
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(sum); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn discrete_cosine_transform(mut dct_filter_num: i64, mut filter_num: i64) -> Vec<Vec<f64>> {
    let mut basis: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < dct_filter_num) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < filter_num) {
            if (i == 0) {
                row = { let mut _v = row.clone(); _v.push((1.0 / sqrtApprox((filter_num as f64)))); _v };
            } else {
                let mut angle: f64 = ((((((2 * j) + 1) as f64) * (i as f64)) * g_PI) / (2.0 * (filter_num as f64)));
                row = { let mut _v = row.clone(); _v.push((cosApprox(angle) * sqrtApprox((2.0 / (filter_num as f64))))); _v };
            }
            j = (j + 1);
        }
        basis = { let mut _v = basis.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return basis
};
        unsafe fn mfcc(mut audio: Vec<f64>, mut bins: i64, mut dct_num: i64) -> Vec<f64> {
    let mut norm: Vec<f64> = normalize(audio.clone());
    let mut spec: Vec<f64> = dft(norm.clone(), (bins + 2));
    let mut filters: Vec<Vec<f64>> = triangular_filters(bins, (spec.len() as i64));
    let mut energies: Vec<f64> = dot(filters.clone(), spec.clone());
    let mut logfb: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (energies.len() as i64)) {
        logfb = { let mut _v = logfb.clone(); _v.push((10.0 * log10((energies[i as usize] + 0.0000000001)))); _v };
        i = (i + 1);
    }
    let mut dct_basis: Vec<Vec<f64>> = discrete_cosine_transform(dct_num, bins);
    let mut res: Vec<f64> = dot(dct_basis.clone(), logfb.clone());
    if ((res.len() as i64) == 0) {
        res = vec![0.0, 0.0, 0.0];
    }
    return res
};
        while (g_n < g_size) {
            let mut t: f64 = ((g_n as f64) / (g_sample_rate as f64));
            g_audio = { let mut _v = g_audio.clone(); _v.push(sinApprox((((2.0 * g_PI) * 440.0) * t))); _v };
            g_n = (g_n + 1);
        }
        let mut coeffs: Vec<f64> = mfcc(g_audio.clone(), 5, 3);
        for c in coeffs.iter().cloned() {
            println!("{}", format!("{:?}", c));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
