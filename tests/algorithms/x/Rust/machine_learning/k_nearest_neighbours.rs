// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct PointLabel {
    point: Vec<f64>,
    label: i64,
}
impl std::fmt::Display for PointLabel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"label\": {}", self.label)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct KNN {
    data: Vec<PointLabel>,
    labels: Vec<String>,
}
impl std::fmt::Display for KNN {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"labels\": {:?}", self.labels)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct DistLabel {
    dist: f64,
    label: i64,
}
impl std::fmt::Display for DistLabel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"dist\": {}", self.dist)?;
        write!(f, ", ")?;
        write!(f, "\"label\": {}", self.label)?;
        write!(f, "}}")
    }
}

static mut g_train_X: Vec<Vec<f64>> = Vec::new();
static mut g_train_y: Vec<i64> = Vec::new();
static mut g_classes: Vec<String> = Vec::new();
static mut g_point: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_train_X = vec![vec![0.0, 0.0].clone(), vec![1.0, 0.0].clone(), vec![0.0, 1.0].clone(), vec![0.5, 0.5].clone(), vec![3.0, 3.0].clone(), vec![2.0, 3.0].clone(), vec![3.0, 2.0].clone()];
        g_train_y = vec![0, 0, 0, 0, 1, 1, 1];
        g_classes = vec![String::from("A").clone().clone(), String::from("B").clone().clone()];
        g_point = vec![1.2, 1.2];
                let _start: i64 = _now();
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn make_knn(mut train_data: Vec<Vec<f64>>, mut train_target: Vec<i64>, mut class_labels: Vec<String>) -> KNN {
    let mut items: Vec<PointLabel> = vec![];
    let mut i: i64 = 0;
    while (i < (train_data.len() as i64)) {
        let mut pl: PointLabel = PointLabel {point: train_data[i as usize].clone(), label: train_target[i as usize]};
        items = { let mut _v = items.clone(); _v.push(pl.clone()); _v };
        i = (i + 1);
    }
    return KNN {data: items, labels: class_labels}
};
        unsafe fn euclidean_distance(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut diff: f64 = (a[i as usize] - b[i as usize]);
        sum = (sum + (diff * diff));
        i = (i + 1);
    }
    return sqrtApprox(sum)
};
        unsafe fn classify(knn: &KNN, mut pred_point: Vec<f64>, mut k: i64) -> String {
    let mut distances: Vec<DistLabel> = vec![];
    let mut i: i64 = 0;
    while (i < (knn.data.clone().len() as i64)) {
        let mut d: f64 = euclidean_distance(knn.data.clone()[i as usize].clone().point.clone().clone(), pred_point.clone());
        distances = { let mut _v = distances.clone(); _v.push(DistLabel {dist: d, label: knn.data.clone()[i as usize].clone().label}); _v };
        i = (i + 1);
    }
    let mut votes: Vec<i64> = vec![];
    let mut count: i64 = 0;
    while (count < k) {
        let mut min_index: i64 = 0;
        let mut j: i64 = 1;
        while (j < (distances.len() as i64)) {
            if (distances[j as usize].clone().dist < distances[min_index as usize].clone().dist) {
                min_index = j;
            }
            j = (j + 1);
        }
        votes = { let mut _v = votes.clone(); _v.push(distances[min_index as usize].clone().label); _v };
        distances[min_index as usize].dist = 1000000000000000000.0;
        count = (count + 1);
    }
    let mut tally: Vec<i64> = vec![];
    let mut t: i64 = 0;
    while (t < (knn.labels.clone().len() as i64)) {
        tally = { let mut _v = tally.clone(); _v.push(0); _v };
        t = (t + 1);
    }
    let mut v: i64 = 0;
    while (v < (votes.len() as i64)) {
        let mut lbl: i64 = votes[v as usize];
        tally[lbl as usize] = (tally[lbl as usize] + 1);
        v = (v + 1);
    }
    let mut max_idx: i64 = 0;
    let mut m: i64 = 1;
    while (m < (tally.len() as i64)) {
        if (tally[m as usize] > tally[max_idx as usize]) {
            max_idx = m;
        }
        m = (m + 1);
    }
    return knn.labels.clone()[max_idx as usize].clone().clone()
};
        let mut knn: KNN = make_knn(g_train_X.clone(), g_train_y.clone(), g_classes.clone());
        println!("{}", classify(&knn, g_point.clone(), 5));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
