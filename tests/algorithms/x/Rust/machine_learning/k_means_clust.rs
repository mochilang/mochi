// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct KMeansResult {
    centroids: Vec<Vec<f64>>,
    assignments: Vec<i64>,
    heterogeneity: Vec<f64>,
}
impl std::fmt::Display for KMeansResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"centroids\": {:?}", self.centroids)?;
        write!(f, ", ")?;
        write!(f, "\"assignments\": {:?}", self.assignments)?;
        write!(f, ", ")?;
        write!(f, "\"heterogeneity\": {:?}", self.heterogeneity)?;
        write!(f, "}}")
    }
}

static mut g_data: Vec<Vec<f64>> = Vec::new();
static mut g_k: i64 = 0;
fn main() {
    unsafe {
        g_data = vec![vec![1.0, 2.0].clone(), vec![1.5, 1.8].clone(), vec![5.0, 8.0].clone(), vec![8.0, 8.0].clone(), vec![1.0, 0.6].clone(), vec![9.0, 11.0].clone()];
        g_k = 3;
                let _start: i64 = _now();
        unsafe fn distance_sq(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    for i in 0..(a.len() as i64) {
        let mut diff: f64 = (a[i as usize] - b[i as usize]);
        sum = (sum + (diff * diff));
    }
    return sum
};
        unsafe fn assign_clusters(mut data: Vec<Vec<f64>>, mut centroids: Vec<Vec<f64>>) -> Vec<i64> {
    let mut assignments: Vec<i64> = vec![];
    for i in 0..(data.len() as i64) {
        let mut best_idx: i64 = 0;
        let mut best: f64 = distance_sq(data[i as usize].clone(), centroids[0 as usize].clone());
        for j in 1..(centroids.len() as i64) {
            let mut dist: f64 = distance_sq(data[i as usize].clone(), centroids[j as usize].clone());
            if (dist < best) {
                best = dist;
                best_idx = j;
            }
        }
        assignments = { let mut _v = assignments.clone(); _v.push(best_idx); _v };
    }
    return assignments
};
        unsafe fn revise_centroids(mut data: Vec<Vec<f64>>, mut k: i64, mut assignment: Vec<i64>) -> Vec<Vec<f64>> {
    let mut dim: i64 = (data[0 as usize].clone().len() as i64);
    let mut sums: Vec<Vec<f64>> = vec![];
    let mut counts: Vec<i64> = vec![];
    for i in 0..k {
        let mut row: Vec<f64> = vec![];
        for j in 0..dim {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
        }
        sums = { let mut _v = sums.clone(); _v.push(row.clone()); _v };
        counts = { let mut _v = counts.clone(); _v.push(0); _v };
    }
    for i in 0..(data.len() as i64) {
        let mut c: i64 = assignment[i as usize];
        counts[c as usize] = (counts[c as usize] + 1);
        for j in 0..dim {
            sums[c as usize][j as usize] = (sums[c as usize].clone()[j as usize] + data[i as usize].clone()[j as usize]);
        }
    }
    let mut centroids: Vec<Vec<f64>> = vec![];
    for i in 0..k {
        let mut row: Vec<f64> = vec![];
        if (counts[i as usize] > 0) {
            for j in 0..dim {
                row = { let mut _v = row.clone(); _v.push((sums[i as usize].clone()[j as usize] / (counts[i as usize] as f64))); _v };
            }
        } else {
            for j in 0..dim {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
        }
        centroids = { let mut _v = centroids.clone(); _v.push(row.clone()); _v };
    }
    return centroids
};
        unsafe fn compute_heterogeneity(mut data: Vec<Vec<f64>>, mut centroids: Vec<Vec<f64>>, mut assignment: Vec<i64>) -> f64 {
    let mut total: f64 = 0.0;
    for i in 0..(data.len() as i64) {
        let mut c: i64 = assignment[i as usize];
        total = (total + distance_sq(data[i as usize].clone(), centroids[c as usize].clone()));
    }
    return total
};
        unsafe fn lists_equal(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    for i in 0..(a.len() as i64) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
    }
    return true
};
        unsafe fn kmeans(mut data: Vec<Vec<f64>>, mut k: i64, mut initial_centroids: Vec<Vec<f64>>, mut max_iter: i64) -> KMeansResult {
    let mut centroids: Vec<Vec<f64>> = initial_centroids.clone();
    let mut assignment: Vec<i64> = vec![];
    let mut prev: Vec<i64> = vec![];
    let mut heterogeneity: Vec<f64> = vec![];
    let mut iter: i64 = 0;
    while (iter < max_iter) {
        assignment = assign_clusters(data.clone(), centroids.clone());
        centroids = revise_centroids(data.clone(), k, assignment.clone());
        let mut h: f64 = compute_heterogeneity(data.clone(), centroids.clone(), assignment.clone());
        heterogeneity = { let mut _v = heterogeneity.clone(); _v.push(h); _v };
        if ((iter > 0) && lists_equal(prev.clone(), assignment.clone())) {
            break
        }
        prev = assignment.clone();
        iter = (iter + 1);
    }
    return KMeansResult {centroids: centroids, assignments: assignment, heterogeneity: heterogeneity}
};
        let mut initial_centroids: Vec<Vec<f64>> = vec![g_data[0 as usize].clone().clone(), g_data[2 as usize].clone().clone(), g_data[5 as usize].clone().clone()];
        let mut result: KMeansResult = kmeans(g_data.clone(), g_k, initial_centroids.clone(), 10);
        println!("{}", format!("{:?}", result.centroids.clone()));
        println!("{}", format!("{:?}", result.assignments.clone()));
        println!("{}", format!("{:?}", result.heterogeneity.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
