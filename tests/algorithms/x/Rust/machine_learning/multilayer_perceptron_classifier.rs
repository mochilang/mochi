// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_X: Vec<Vec<f64>> = Vec::new();
static mut g_Y: Vec<f64> = Vec::new();
static mut g_test_data: Vec<Vec<f64>> = Vec::new();
static mut g_w1: Vec<Vec<f64>> = Vec::new();
static mut g_b1: Vec<f64> = Vec::new();
static mut g_w2: Vec<f64> = Vec::new();
static mut g_b2: f64 = 0.0;
fn main() {
    unsafe {
        g_X = vec![vec![0.0, 0.0].clone(), vec![1.0, 1.0].clone(), vec![1.0, 0.0].clone(), vec![0.0, 1.0].clone()];
        g_Y = vec![0.0, 1.0, 0.0, 0.0];
        g_test_data = vec![vec![0.0, 0.0].clone(), vec![0.0, 1.0].clone(), vec![1.0, 1.0].clone()];
        g_w1 = vec![vec![0.5, -0.5].clone(), vec![0.5, 0.5].clone()];
        g_b1 = vec![0.0, 0.0];
        g_w2 = vec![0.5, -0.5];
        g_b2 = 0.0;
                let _start: i64 = _now();
        unsafe fn exp_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: f64 = 1.0;
    while (i < 20.0) {
        term = ((term * x) / i);
        sum = (sum + term);
        i = (i + 1.0);
    }
    return sum
};
        unsafe fn sigmoid(mut x: f64) -> f64 {
    return (1.0 / (1.0 + exp_taylor(-x)))
};
        unsafe fn train(mut epochs: i64, mut lr: f64) {
    let mut e: i64 = 0;
    while (e < epochs) {
        let mut i: i64 = 0;
        while (i < (g_X.len() as i64)) {
            let mut x0: f64 = g_X[i as usize].clone()[0 as usize];
            let mut x1: f64 = g_X[i as usize].clone()[1 as usize];
            let mut target: f64 = g_Y[i as usize];
            let mut z1: f64 = (((g_w1[0 as usize].clone()[0 as usize] * x0) + (g_w1[1 as usize].clone()[0 as usize] * x1)) + g_b1[0 as usize]);
            let mut z2: f64 = (((g_w1[0 as usize].clone()[1 as usize] * x0) + (g_w1[1 as usize].clone()[1 as usize] * x1)) + g_b1[1 as usize]);
            let mut h1: f64 = sigmoid(z1);
            let mut h2: f64 = sigmoid(z2);
            let mut z3: f64 = (((g_w2[0 as usize] * h1) + (g_w2[1 as usize] * h2)) + g_b2);
            let mut out: f64 = sigmoid(z3);
            let mut error: f64 = (out - target);
            let mut d1: f64 = (((h1 * (1.0 - h1)) * g_w2[0 as usize]) * error);
            let mut d2: f64 = (((h2 * (1.0 - h2)) * g_w2[1 as usize]) * error);
            g_w2[0 as usize] = (g_w2[0 as usize] - ((lr * error) * h1));
            g_w2[1 as usize] = (g_w2[1 as usize] - ((lr * error) * h2));
            g_b2 = (g_b2 - (lr * error));
            g_w1[0 as usize][0 as usize] = (g_w1[0 as usize].clone()[0 as usize] - ((lr * d1) * x0));
            g_w1[1 as usize][0 as usize] = (g_w1[1 as usize].clone()[0 as usize] - ((lr * d1) * x1));
            g_b1[0 as usize] = (g_b1[0 as usize] - (lr * d1));
            g_w1[0 as usize][1 as usize] = (g_w1[0 as usize].clone()[1 as usize] - ((lr * d2) * x0));
            g_w1[1 as usize][1 as usize] = (g_w1[1 as usize].clone()[1 as usize] - ((lr * d2) * x1));
            g_b1[1 as usize] = (g_b1[1 as usize] - (lr * d2));
            i = (i + 1);
        }
        e = (e + 1);
    }
};
        unsafe fn predict(mut samples: Vec<Vec<f64>>) -> Vec<i64> {
    let mut preds: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (samples.len() as i64)) {
        let mut x0: f64 = samples[i as usize].clone()[0 as usize];
        let mut x1: f64 = samples[i as usize].clone()[1 as usize];
        let mut z1: f64 = (((g_w1[0 as usize].clone()[0 as usize] * x0) + (g_w1[1 as usize].clone()[0 as usize] * x1)) + g_b1[0 as usize]);
        let mut z2: f64 = (((g_w1[0 as usize].clone()[1 as usize] * x0) + (g_w1[1 as usize].clone()[1 as usize] * x1)) + g_b1[1 as usize]);
        let mut h1: f64 = sigmoid(z1);
        let mut h2: f64 = sigmoid(z2);
        let mut z3: f64 = (((g_w2[0 as usize] * h1) + (g_w2[1 as usize] * h2)) + g_b2);
        let mut out: f64 = sigmoid(z3);
        let mut label: i64 = 0;
        if (out >= 0.5) {
            label = 1;
        }
        preds = { let mut _v = preds.clone(); _v.push(label); _v };
        i = (i + 1);
    }
    return preds
};
        unsafe fn wrapper(mut y: Vec<i64>) -> Vec<i64> {
    return y
};
        train(4000, 0.5);
        let mut preds: Vec<i64> = wrapper(predict(g_test_data.clone()));
        println!("{}", format!("{:?}", preds));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
