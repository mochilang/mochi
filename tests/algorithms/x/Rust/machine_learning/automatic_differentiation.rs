// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Dual {
    value: f64,
    deriv: f64,
}
impl std::fmt::Display for Dual {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"deriv\": {}", self.deriv)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn dual(mut v: f64, mut d: f64) -> Dual {
    return Dual {value: v, deriv: d}
};
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut res: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        res = (res * base);
        i = (i + 1);
    }
    return res
};
    fn add(mut a: Dual, mut b: Dual) -> Dual {
    return Dual {value: (a.value + b.value), deriv: (a.deriv + b.deriv)}
};
    fn sub(mut a: Dual, mut b: Dual) -> Dual {
    return Dual {value: (a.value - b.value), deriv: (a.deriv - b.deriv)}
};
    fn mul(mut a: Dual, mut b: Dual) -> Dual {
    return Dual {value: (a.value * b.value), deriv: ((a.deriv * b.value) + (b.deriv * a.value))}
};
    fn div(mut a: Dual, mut b: Dual) -> Dual {
    return Dual {value: (a.value / b.value), deriv: (((a.deriv * b.value) - (b.deriv * a.value)) / (b.value * b.value))}
};
    fn power(mut a: Dual, mut p: i64) -> Dual {
    return Dual {value: pow_float(a.value, p), deriv: (((1.0 * (p as f64)) * pow_float(a.value, (p - 1))) * a.deriv)}
};
    fn mochi_main() {
    let a: Dual = dual(2.0, 1.0);
    let b: Dual = dual(1.0, 0.0);
    let c: Dual = add(a.clone(), b.clone());
    let d: Dual = mul(a.clone(), b.clone());
    let e: Dual = div(c.clone(), d.clone());
    println!("{}", e.deriv.to_string());
    let x: Dual = dual(2.0, 1.0);
    let y: Dual = power(x.clone(), 3);
    println!("{}", y.deriv.to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
