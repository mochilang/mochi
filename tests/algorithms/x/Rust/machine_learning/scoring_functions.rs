// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return (0.0 - x)
    }
    return x
};
    fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn ln_series(mut x: f64) -> f64 {
    let mut t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        sum = (sum + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (2.0 * sum)
};
    fn ln(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut k: i64 = 0;
    while (y >= 10.0) {
        y = (y / 10.0);
        k = (k + 1);
    }
    while (y < 1.0) {
        y = (y * 10.0);
        k = (k - 1);
    }
    return (ln_series(y) + ((k as f64) * ln_series(10.0)))
};
    fn mae(mut predict: Vec<f64>, mut actual: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (predict.len() as i64)) {
        let mut diff: f64 = (predict[i as usize] - actual[i as usize]);
        sum = (sum + absf(diff));
        i = (i + 1);
    }
    return (sum / ((predict.len() as i64) as f64))
};
    fn mse(mut predict: Vec<f64>, mut actual: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (predict.len() as i64)) {
        let mut diff: f64 = (predict[i as usize] - actual[i as usize]);
        sum = (sum + (diff * diff));
        i = (i + 1);
    }
    return (sum / ((predict.len() as i64) as f64))
};
    fn rmse(mut predict: Vec<f64>, mut actual: Vec<f64>) -> f64 {
    return sqrtApprox(mse(predict.clone(), actual.clone()))
};
    fn rmsle(mut predict: Vec<f64>, mut actual: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (predict.len() as i64)) {
        let mut lp: f64 = ln((predict[i as usize] + 1.0));
        let mut la: f64 = ln((actual[i as usize] + 1.0));
        let mut diff: f64 = (lp - la);
        sum = (sum + (diff * diff));
        i = (i + 1);
    }
    return sqrtApprox((sum / ((predict.len() as i64) as f64)))
};
    fn mbd(mut predict: Vec<f64>, mut actual: Vec<f64>) -> f64 {
    let mut diff_sum: f64 = 0.0;
    let mut actual_sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (predict.len() as i64)) {
        diff_sum = (diff_sum + (predict[i as usize] - actual[i as usize]));
        actual_sum = (actual_sum + actual[i as usize]);
        i = (i + 1);
    }
    let mut n: f64 = ((predict.len() as i64) as f64);
    let mut numerator: f64 = (diff_sum / n);
    let mut denominator: f64 = (actual_sum / n);
    return ((numerator / denominator) * 100.0)
};
    fn manual_accuracy(mut predict: Vec<f64>, mut actual: Vec<f64>) -> f64 {
    let mut correct: i64 = 0;
    let mut i: i64 = 0;
    while (i < (predict.len() as i64)) {
        if (predict[i as usize] == actual[i as usize]) {
            correct = (correct + 1);
        }
        i = (i + 1);
    }
    return ((correct as f64) / ((predict.len() as i64) as f64))
};
    fn mochi_main() {
    let mut actual: Vec<f64> = vec![1.0, 2.0, 3.0];
    let mut predict: Vec<f64> = vec![1.0, 4.0, 3.0];
    println!("{}", mae(predict.clone(), actual.clone()).to_string());
    println!("{}", mse(predict.clone(), actual.clone()).to_string());
    println!("{}", rmse(predict.clone(), actual.clone()).to_string());
    println!("{}", rmsle(vec![10.0, 2.0, 30.0], vec![10.0, 10.0, 30.0]).to_string());
    println!("{}", mbd(vec![2.0, 3.0, 4.0], vec![1.0, 2.0, 3.0]).to_string());
    println!("{}", mbd(vec![0.0, 1.0, 1.0], vec![1.0, 2.0, 3.0]).to_string());
    println!("{}", manual_accuracy(predict.clone(), actual.clone()).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
