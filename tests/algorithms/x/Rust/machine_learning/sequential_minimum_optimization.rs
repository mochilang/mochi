// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_samples: Vec<Vec<f64>> = Vec::new();
static mut g_labels: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_samples = vec![vec![2.0, 2.0].clone(), vec![1.5, 1.5].clone(), vec![0.0, 0.0].clone(), vec![0.5, 0.0].clone()];
        g_labels = vec![1.0, 1.0, -1.0, -1.0];
                let _start: i64 = _now();
        unsafe fn dot(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        sum = (sum + (a[i as usize] * b[i as usize]));
        i = (i + 1);
    }
    return sum
};
        unsafe fn maxf(mut a: f64, mut b: f64) -> f64 {
    if (a > b) {
        return a
    }
    return b
};
        unsafe fn minf(mut a: f64, mut b: f64) -> f64 {
    if (a < b) {
        return a
    }
    return b
};
        unsafe fn absf(mut x: f64) -> f64 {
    if (x >= 0.0) {
        return x
    }
    return (0.0 - x)
};
        unsafe fn predict_raw(mut samples: Vec<Vec<f64>>, mut labels: Vec<f64>, mut alphas: Vec<f64>, mut b: f64, mut x: Vec<f64>) -> f64 {
    let mut res: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (samples.len() as i64)) {
        res = (res + ((alphas[i as usize] * labels[i as usize]) * dot(samples[i as usize].clone(), x.clone())));
        i = (i + 1);
    }
    return (res + b)
};
        unsafe fn smo_train(mut samples: Vec<Vec<f64>>, mut labels: Vec<f64>, mut c: f64, mut tol: f64, mut max_passes: i64) -> Vec<Vec<f64>> {
    let mut m: i64 = (samples.len() as i64);
    let mut alphas: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < m) {
        alphas = { let mut _v = alphas.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    let mut b: f64 = 0.0;
    let mut passes: i64 = 0;
    while (passes < max_passes) {
        let mut num_changed: i64 = 0;
        let mut i1: i64 = 0;
        while (i1 < m) {
            let mut Ei: f64 = (predict_raw(samples.clone(), labels.clone(), alphas.clone(), b, samples[i1 as usize].clone()) - labels[i1 as usize]);
            if ((((labels[i1 as usize] * Ei) < (0.0 - tol)) && (alphas[i1 as usize] < c)) || (((labels[i1 as usize] * Ei) > tol) && (alphas[i1 as usize] > 0.0))) {
                let mut i2: i64 = ((i1 + 1) % m);
                let mut Ej: f64 = (predict_raw(samples.clone(), labels.clone(), alphas.clone(), b, samples[i2 as usize].clone()) - labels[i2 as usize]);
                let mut alpha1_old: f64 = alphas[i1 as usize];
                let mut alpha2_old: f64 = alphas[i2 as usize];
                let mut L: f64 = 0.0;
                let mut H: f64 = 0.0;
                if (labels[i1 as usize] != labels[i2 as usize]) {
                    L = maxf(0.0, (alpha2_old - alpha1_old));
                    H = minf(c, ((c + alpha2_old) - alpha1_old));
                } else {
                    L = maxf(0.0, ((alpha2_old + alpha1_old) - c));
                    H = minf(c, (alpha2_old + alpha1_old));
                }
                if (L == H) {
                    i1 = (i1 + 1);
                    continue
                }
                let mut eta: f64 = (((2.0 * dot(samples[i1 as usize].clone(), samples[i2 as usize].clone())) - dot(samples[i1 as usize].clone(), samples[i1 as usize].clone())) - dot(samples[i2 as usize].clone(), samples[i2 as usize].clone()));
                if (eta >= 0.0) {
                    i1 = (i1 + 1);
                    continue
                }
                alphas[i2 as usize] = (alpha2_old - ((labels[i2 as usize] * (Ei - Ej)) / eta));
                if (alphas[i2 as usize] > H) {
                    alphas[i2 as usize] = H;
                }
                if (alphas[i2 as usize] < L) {
                    alphas[i2 as usize] = L;
                }
                if (absf((alphas[i2 as usize] - alpha2_old)) < 0.00001) {
                    i1 = (i1 + 1);
                    continue
                }
                alphas[i1 as usize] = (alpha1_old + ((labels[i1 as usize] * labels[i2 as usize]) * (alpha2_old - alphas[i2 as usize])));
                let mut b1: f64 = (((b - Ei) - ((labels[i1 as usize] * (alphas[i1 as usize] - alpha1_old)) * dot(samples[i1 as usize].clone(), samples[i1 as usize].clone()))) - ((labels[i2 as usize] * (alphas[i2 as usize] - alpha2_old)) * dot(samples[i1 as usize].clone(), samples[i2 as usize].clone())));
                let mut b2: f64 = (((b - Ej) - ((labels[i1 as usize] * (alphas[i1 as usize] - alpha1_old)) * dot(samples[i1 as usize].clone(), samples[i2 as usize].clone()))) - ((labels[i2 as usize] * (alphas[i2 as usize] - alpha2_old)) * dot(samples[i2 as usize].clone(), samples[i2 as usize].clone())));
                if ((alphas[i1 as usize] > 0.0) && (alphas[i1 as usize] < c)) {
                    b = b1;
                } else if ((alphas[i2 as usize] > 0.0) && (alphas[i2 as usize] < c)) {
                    b = b2;
                } else {
                    b = ((b1 + b2) / 2.0);
                }
                num_changed = (num_changed + 1);
            }
            i1 = (i1 + 1);
        }
        if (num_changed == 0) {
            passes = (passes + 1);
        } else {
            passes = 0;
        }
    }
    return vec![alphas.clone(), vec![b].clone()]
};
        unsafe fn predict(mut samples: Vec<Vec<f64>>, mut labels: Vec<f64>, mut model: Vec<Vec<f64>>, mut x: Vec<f64>) -> f64 {
    let mut alphas: Vec<f64> = model[0 as usize].clone();
    let mut b: f64 = model[1 as usize].clone()[0 as usize];
    let mut val: f64 = predict_raw(samples.clone(), labels.clone(), alphas.clone(), b, x.clone());
    if (val >= 0.0) {
        return 1.0
    }
    return -1.0
};
        let mut model: Vec<Vec<f64>> = smo_train(g_samples.clone(), g_labels.clone(), 1.0, 0.001, 10);
        println!("{}", format!("{:?}", predict(g_samples.clone(), g_labels.clone(), model.clone(), vec![1.5, 1.0])));
        println!("{}", format!("{:?}", predict(g_samples.clone(), g_labels.clone(), model.clone(), vec![0.2, 0.1])));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
