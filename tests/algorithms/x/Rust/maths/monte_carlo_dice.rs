// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    let mut lcg_seed: i64 = 1;
    let mut lcg_rand = || -> i64 {
    lcg_seed = (((lcg_seed * 1103515245) + 12345) % 2147483648);
    return lcg_seed
};
    let mut roll = || -> i64 {
    let rv: f64 = (lcg_rand() as f64);
    let r: f64 = ((rv * 6.0) / 2147483648.0);
    return (1 + (r as i64))
};
    let mut round2 = |x: f64| -> f64 {
    let y: f64 = ((x * 100.0) + 0.5);
    let z: i64 = (y as i64);
    return ((z as f64) / 100.0)
};
    let mut throw_dice = |num_throws: i64, num_dice: i64| -> Vec<f64> {
    let mut count_of_sum: Vec<i64> = vec![];
    let max_sum: i64 = ((num_dice * 6) + 1);
    let mut i: i64 = 0;
    while (i < max_sum) {
        count_of_sum = { let mut _v = count_of_sum.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut t: i64 = 0;
    while (t < num_throws) {
        let mut s: i64 = 0;
        let mut d: i64 = 0;
        while (d < num_dice) {
            s = (s + roll());
            d = (d + 1);
        }
        count_of_sum[s as usize] = (count_of_sum[s as usize] + 1);
        t = (t + 1);
    }
    let mut probability: Vec<f64> = vec![];
    i = num_dice;
    while (i < max_sum) {
        let p: f64 = (((count_of_sum[i as usize] as f64) * 100.0) / (num_throws as f64));
        probability = { let mut _v = probability.clone(); _v.push(round2(p)); _v };
        i = (i + 1);
    }
    return probability
};
    let mut mochi_main = || {
    lcg_seed = 1;
    let result: Vec<f64> = throw_dice(10000, 2);
    println!("{}", format!("{:?}", result));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
