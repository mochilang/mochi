// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ceil_int(mut x: f64) -> i64 {
    let mut n: i64 = (x as i64);
    if ((n as f64) < x) {
        n = (n + 1);
    }
    return n
};
    fn explicit_euler(ode_func: &mut impl FnMut(f64, f64) -> f64, mut y0: f64, mut x0: f64, mut step_size: f64, mut x_end: f64) -> Vec<f64> {
    let n: i64 = ceil_int(((x_end - x0) / step_size));
    let mut y: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        y = { let mut _v = y.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    y[0 as usize] = y0;
    let mut x: f64 = x0;
    let mut k: i64 = 0;
    while (k < n) {
        y[(k + 1) as usize] = (y[k as usize] + (step_size * ode_func(x, y[k as usize])));
        x = (x + step_size);
        k = (k + 1);
    }
    return y
};
    fn abs_float(mut a: f64) -> f64 {
    if (a < 0.0) {
        return -a
    }
    return a
};
    fn test_explicit_euler() {
    let mut f = move |x: f64, y: f64| -> f64 { y };
    let ys: Vec<f64> = explicit_euler(&mut f, 1.0, 0.0, 0.01, 5.0);
    let last: f64 = ys[((ys.len() as i64) - 1) as usize];
    if (abs_float((last - 144.77277243257308)) > 0.001) {
        panic!("explicit_euler failed");
    }
};
    fn mochi_main() {
    test_explicit_euler();
    let mut f = move |x: f64, y: f64| -> f64 { y };
    let ys: Vec<f64> = explicit_euler(&mut f, 1.0, 0.0, 0.01, 5.0);
    println!("{}", format!("{:?}", ys[((ys.len() as i64) - 1) as usize]));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
