// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<i64>, mut value: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == value) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn sumset(mut set_a: Vec<i64>, mut set_b: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (set_a.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (set_b.len() as i64)) {
            let s: i64 = (set_a[i as usize] + set_b[j as usize]);
            if !contains(result.clone(), s) {
                result = { let mut _v = result.clone(); _v.push(s); _v };
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return result
};
    fn mochi_main() {
    let set_a: Vec<i64> = vec![1, 2, 3];
    let set_b: Vec<i64> = vec![4, 5, 6];
    println!("{}", format!("{:?}", sumset(set_a.clone(), set_b.clone())));
    let set_c: Vec<i64> = vec![4, 5, 6, 7];
    println!("{}", format!("{:?}", sumset(set_a.clone(), set_c.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
