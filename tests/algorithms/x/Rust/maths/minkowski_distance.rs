// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_val(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn nth_root(mut value: f64, mut n: i64) -> f64 {
    if (value == 0.0) {
        return 0.0
    }
    let mut x: f64 = (value / (n as f64));
    let mut i: i64 = 0;
    while (i < 20) {
        let num: f64 = ((((n - 1) as f64) * x) + (value / pow_float(x, (n - 1))));
        x = (num / (n as f64));
        i = (i + 1);
    }
    return x
};
    fn minkowski_distance(mut point_a: Vec<f64>, mut point_b: Vec<f64>, mut order: i64) -> f64 {
    if (order < 1) {
        panic!("The order must be greater than or equal to 1.");
    }
    if ((point_a.len() as i64) != (point_b.len() as i64)) {
        panic!("Both points must have the same dimension.");
    }
    let mut total: f64 = 0.0;
    let mut idx: i64 = 0;
    while (idx < (point_a.len() as i64)) {
        let diff: f64 = abs_val((point_a[idx as usize] - point_b[idx as usize]));
        total = (total + pow_float(diff, order));
        idx = (idx + 1);
    }
    return nth_root(total, order)
};
    fn test_minkowski() {
    if (abs_val((minkowski_distance(vec![1.0, 1.0], vec![2.0, 2.0], 1) - 2.0)) > 0.0001) {
        panic!("minkowski_distance test1 failed");
    }
    if (abs_val((minkowski_distance(vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0], 2) - 8.0)) > 0.0001) {
        panic!("minkowski_distance test2 failed");
    }
};
    fn mochi_main() {
    test_minkowski();
    println!("{}", format!("{:?}", minkowski_distance(vec![5.0], vec![0.0], 3)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
