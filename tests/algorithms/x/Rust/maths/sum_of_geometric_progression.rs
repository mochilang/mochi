// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut exponent: i64 = exp;
    if (exponent < 0) {
        exponent = -exponent;
        let mut i: i64 = 0;
        while (i < exponent) {
            result = (result * base);
            i = (i + 1);
        }
        return (1.0 / result)
    }
    let mut i: i64 = 0;
    while (i < exponent) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn sum_of_geometric_progression(mut first_term: i64, mut common_ratio: i64, mut num_of_terms: i64) -> f64 {
    if (common_ratio == 1) {
        return ((num_of_terms * first_term) as f64)
    }
    let a: f64 = (first_term as f64);
    let r: f64 = (common_ratio as f64);
    return ((a / (1.0 - r)) * (1.0 - pow_float(r, num_of_terms)))
};
    fn test_sum() {
    if (sum_of_geometric_progression(1, 2, 10) != 1023.0) {
        panic!("example1 failed");
    }
    if (sum_of_geometric_progression(1, 10, 5) != 11111.0) {
        panic!("example2 failed");
    }
    if (sum_of_geometric_progression(-1, 2, 10) != -1023.0) {
        panic!("example3 failed");
    }
};
    fn mochi_main() {
    test_sum();
    println!("{}", format!("{:?}", sum_of_geometric_progression(1, 2, 10)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
