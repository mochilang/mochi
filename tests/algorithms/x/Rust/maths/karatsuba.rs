// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn int_pow(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn karatsuba(mut a: i64, mut b: i64) -> i64 {
    if (((a.to_string().len() as i64) == 1) || ((b.to_string().len() as i64) == 1)) {
        return (a * b)
    }
    let mut m1: i64 = (a.to_string().len() as i64);
    let lb: i64 = (b.to_string().len() as i64);
    if (lb > m1) {
        m1 = lb;
    }
    let m2: i64 = (m1 / 2);
    let power: i64 = int_pow(10, m2);
    let a1: i64 = (a / power);
    let a2: i64 = (a % power);
    let b1: i64 = (b / power);
    let b2: i64 = (b % power);
    let x: i64 = karatsuba(a2, b2);
    let y: i64 = karatsuba((a1 + a2), (b1 + b2));
    let z: i64 = karatsuba(a1, b1);
    let result: i64 = (((z * int_pow(10, (2 * m2))) + (((y - z) - x) * power)) + x);
    return result
};
    fn mochi_main() {
    println!("{}", karatsuba(15463, 23489).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
