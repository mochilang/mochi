// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn geometric_series(mut nth_term: f64, mut start_term_a: f64, mut common_ratio_r: f64) -> Vec<f64> {
    let n: i64 = (nth_term as i64);
    if (((n <= 0) || (start_term_a == 0.0)) || (common_ratio_r == 0.0)) {
        return vec![]
    }
    let mut series: Vec<f64> = vec![];
    let mut current: f64 = start_term_a;
    let mut i: i64 = 0;
    while (i < n) {
        series = { let mut _v = series.clone(); _v.push(current); _v };
        current = (current * common_ratio_r);
        i = (i + 1);
    }
    return series
};
    println!("{}", { let tmp = geometric_series(4.0, 2.0, 2.0).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = geometric_series(4.0, 2.0, -2.0).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = geometric_series(4.0, -2.0, 2.0).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = geometric_series(-4.0, 2.0, 2.0).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = geometric_series(0.0, 100.0, 500.0).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = geometric_series(1.0, 1.0, 1.0).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
