// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_harmonic_series(mut series: Vec<f64>) -> bool {
    if ((series.len() as i64) == 0) {
        panic!("Input list must be a non empty list");
    }
    if ((series.len() as i64) == 1) {
        if (series[0 as usize] == 0.0) {
            panic!("Input series cannot have 0 as an element");
        }
        return true
    }
    let mut rec_series: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (series.len() as i64)) {
        let val: f64 = series[i as usize];
        if (val == 0.0) {
            panic!("Input series cannot have 0 as an element");
        }
        rec_series = { let mut _v = rec_series.clone(); _v.push((1.0 / val)); _v };
        i = (i + 1);
    }
    let common_diff: f64 = (rec_series[1 as usize] - rec_series[0 as usize]);
    let mut idx: i64 = 2;
    while (idx < (rec_series.len() as i64)) {
        if ((rec_series[idx as usize] - rec_series[(idx - 1) as usize]) != common_diff) {
            return false
        }
        idx = (idx + 1);
    }
    return true
};
    fn harmonic_mean(mut series: Vec<f64>) -> f64 {
    if ((series.len() as i64) == 0) {
        panic!("Input list must be a non empty list");
    }
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (series.len() as i64)) {
        total = (total + (1.0 / series[i as usize]));
        i = (i + 1);
    }
    return (((series.len() as i64) as f64) / total)
};
    println!("{}", if is_harmonic_series(vec![1.0, (2.0 / 3.0), (1.0 / 2.0), (2.0 / 5.0), (1.0 / 3.0)]) { 1 } else { 0 });
    println!("{}", if is_harmonic_series(vec![1.0, (2.0 / 3.0), (2.0 / 5.0), (1.0 / 3.0)]) { 1 } else { 0 });
    println!("{}", format!("{:?}", harmonic_mean(vec![1.0, 4.0, 4.0])));
    println!("{}", format!("{:?}", harmonic_mean(vec![3.0, 6.0, 9.0, 12.0])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
