// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow_string(mut base: i64, mut exp: i64) -> String {
    if (exp >= 0) {
        let mut res: i64 = 1;
        let mut i: i64 = 0;
        while (i < exp) {
            res = (res * base);
            i = (i + 1);
        }
        return res.to_string().to_string()
    }
    let mut e: i64 = -exp;
    let mut res: f64 = 1.0;
    let mut b: f64 = ((base as f64) * 1.0);
    let mut i: i64 = 0;
    while (i < e) {
        res = (res * b);
        i = (i + 1);
    }
    let value: f64 = (1.0 / res);
    return value.to_string().to_string().clone()
};
    fn p_series(mut nth_term: i64, mut power: i64) -> Vec<String> {
    let mut series: Vec<String> = vec![];
    if (nth_term <= 0) {
        return series
    }
    let mut i: i64 = 1;
    while (i <= nth_term) {
        if (i == 1) {
            series = { let mut _v = series.clone(); _v.push("1".to_string()); _v };
        } else {
            series = { let mut _v = series.clone(); _v.push(format!("{}{}", "1 / ", pow_string(i, power))); _v };
        }
        i = (i + 1);
    }
    return series
};
    println!("{:?}", format!("{:?}", p_series(5, 2)));
    println!("{:?}", format!("{:?}", p_series(-5, 2)));
    println!("{:?}", format!("{:?}", p_series(5, -2)));
    println!("{:?}", format!("{:?}", p_series(0, 0)));
    println!("{:?}", format!("{:?}", p_series(1, 1)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
