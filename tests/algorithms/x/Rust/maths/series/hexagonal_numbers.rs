// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn hexagonal_numbers(mut length: i64) -> Vec<i64> {
    if (length <= 0) {
        panic!("Length must be a positive integer.");
    }
    let mut res: Vec<i64> = vec![];
    let mut n: i64 = 0;
    while (n < length) {
        res = { let mut _v = res.clone(); _v.push((n * ((2 * n) - 1))); _v };
        n = (n + 1);
    }
    return res
};
    fn test_hexagonal_numbers() {
    let expected5: Vec<i64> = vec![0, 1, 6, 15, 28];
    let result5: Vec<i64> = hexagonal_numbers(5);
    if (result5 != expected5) {
        panic!("hexagonal_numbers(5) failed");
    }
    let expected10: Vec<i64> = vec![0, 1, 6, 15, 28, 45, 66, 91, 120, 153];
    let result10: Vec<i64> = hexagonal_numbers(10);
    if (result10 != expected10) {
        panic!("hexagonal_numbers(10) failed");
    }
};
    test_hexagonal_numbers();
    println!("{}", format!("{:?}", hexagonal_numbers(5)));
    println!("{}", format!("{:?}", hexagonal_numbers(10)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
