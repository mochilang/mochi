// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
mod math {
    pub const pi: f64 = std::f64::consts::PI;
    pub const e: f64 = std::f64::consts::E;
    pub fn sqrt(x: f64) -> f64 { x.sqrt() }
    pub fn pow(x: f64, y: f64) -> f64 { x.powf(y) }
    pub fn sin(x: f64) -> f64 { x.sin() }
    pub fn log(x: f64) -> f64 { x.ln() }
}
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_geometric_series(mut series: Vec<f64>) -> bool {
    if ((series.len() as i64) == 0) {
        panic!("Input list must be a non empty list");
    }
    if ((series.len() as i64) == 1) {
        return true
    }
    if (series[0 as usize] == 0.0) {
        return false
    }
    let ratio: f64 = (series[1 as usize] / series[0 as usize]);
    let mut i: i64 = 0;
    while (i < ((series.len() as i64) - 1)) {
        if (series[i as usize] == 0.0) {
            return false
        }
        if ((series[(i + 1) as usize] / series[i as usize]) != ratio) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn geometric_mean(mut series: Vec<f64>) -> f64 {
    if ((series.len() as i64) == 0) {
        panic!("Input list must be a non empty list");
    }
    let mut product: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < (series.len() as i64)) {
        product = (product * series[i as usize]);
        i = (i + 1);
    }
    let n: i64 = (series.len() as i64);
    return math::pow(product, (1.0 / (n as f64)))
};
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    let mut nth_root = |value: f64, n: i64| -> f64 {
    if (value == 0.0) {
        return 0.0
    }
    let mut low: f64 = 0.0;
    let mut high: f64 = value;
    if (value < 1.0) {
        high = 1.0;
    }
    let mut mid: f64 = ((low + high) / 2.0);
    let mut i: i64 = 0;
    while (i < 40) {
        let mp: f64 = pow_float(mid, n);
        if (mp > value) {
            high = mid;
        } else {
            low = mid;
        }
        mid = ((low + high) / 2.0);
        i = (i + 1);
    }
    return mid
};
    let mut test_geometric = || {
    let a: Vec<f64> = vec![2.0, 4.0, 8.0];
    if !is_geometric_series(a.clone()) {
        panic!("expected geometric series");
    }
    let b: Vec<f64> = vec![1.0, 2.0, 3.0];
    if is_geometric_series(b.clone()) {
        panic!("expected non geometric series");
    }
};
    let mut mochi_main = || {
    test_geometric();
    println!("{}", format!("{:?}", geometric_mean(vec![2.0, 4.0, 8.0])));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
