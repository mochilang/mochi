// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn factorial(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("factorial() not defined for negative values");
    }
    let mut value: i64 = 1;
    let mut i: i64 = 1;
    while (i <= n) {
        value = (value * i);
        i = (i + 1);
    }
    return value
};
    fn factorial_recursive(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("factorial() not defined for negative values");
    }
    if (n <= 1) {
        return 1
    }
    return (n * factorial_recursive((n - 1)))
};
    fn test_zero() {
    if (factorial(0) != 1) {
        panic!("factorial(0) failed");
    }
    if (factorial_recursive(0) != 1) {
        panic!("factorial_recursive(0) failed");
    }
};
    fn test_positive_integers() {
    if (factorial(1) != 1) {
        panic!("factorial(1) failed");
    }
    if (factorial_recursive(1) != 1) {
        panic!("factorial_recursive(1) failed");
    }
    if (factorial(5) != 120) {
        panic!("factorial(5) failed");
    }
    if (factorial_recursive(5) != 120) {
        panic!("factorial_recursive(5) failed");
    }
    if (factorial(7) != 5040) {
        panic!("factorial(7) failed");
    }
    if (factorial_recursive(7) != 5040) {
        panic!("factorial_recursive(7) failed");
    }
};
    fn test_large_number() {
    if (factorial(10) != 3628800) {
        panic!("factorial(10) failed");
    }
    if (factorial_recursive(10) != 3628800) {
        panic!("factorial_recursive(10) failed");
    }
};
    fn run_tests() {
    test_zero();
    test_positive_integers();
    test_large_number();
};
    fn mochi_main() {
    run_tests();
    println!("{}", factorial(6));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
