// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
}

fn powf(mut x: f64, mut n: i64) -> f64 {
    let mut res: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        res = (res * x);
        i = (i + 1);
    }
    return res
}

fn roundf(mut x: f64) -> i64 {
    if (x >= 0.0) {
        return ((x + 0.5) as i64)
    }
    return ((x - 0.5) as i64)
}

fn fib_iterative(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    if (n == 0) {
        return vec![0]
    }
    let mut fib: Vec<i64> = vec![0, 1];
    let mut i: i64 = 2;
    while (i <= n) {
        fib = { let mut _v = fib.clone(); _v.push((fib[(i - 1) as usize] + fib[(i - 2) as usize])); _v };
        i = (i + 1);
    }
    return fib
}

fn fib_recursive_term(mut i: i64) -> i64 {
    if (i < 0) {
        panic!("n is negative");
    }
    if (i < 2) {
        return i
    }
    return (fib_recursive_term((i - 1)) + fib_recursive_term((i - 2)))
}

fn fib_recursive(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        res = { let mut _v = res.clone(); _v.push(fib_recursive_term(i)); _v };
        i = (i + 1);
    }
    return res
}

fn main() {
    let mut fib_cache_global: HashMap<i64, i64> = HashMap::new();
    let mut fib_recursive_cached_term = {
fn fib_recursive_cached_term(fib_cache_global: &mut HashMap<i64, i64>, i: i64) -> i64 {
    if (i < 0) {
        panic!("n is negative");
    }
    if (i < 2) {
        return i
    }
    if fib_cache_global.contains_key(&i) {
        return fib_cache_global.get(&i).cloned().unwrap_or_default()
    }
    let val: i64 = (fib_recursive_cached_term(fib_cache_global.clone(), (i - 1)) + fib_recursive_cached_term(fib_cache_global.clone(), (i - 2)));
    fib_cache_global.insert(i.clone(), val.clone());
    return val
}
|i: i64| -> i64 { fib_recursive_cached_term(&mut fib_cache_global, i) }
};
    let mut fib_recursive_cached = |n: i64| -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    let mut res: Vec<i64> = vec![];
    let mut j: i64 = 0;
    while (j <= n) {
        res = { let mut _v = res.clone(); _v.push(fib_recursive_cached_term(j)); _v };
        j = (j + 1);
    }
    return res
};
    let mut fib_memo_cache: HashMap<i64, i64> = HashMap::from([(0, 0), (1, 1), (2, 1)]);
    let mut fib_memoization_term = {
fn fib_memoization_term(fib_memo_cache: &mut HashMap<i64, i64>, num: i64) -> i64 {
    if fib_memo_cache.contains_key(&num) {
        return fib_memo_cache.get(&num).cloned().unwrap_or_default()
    }
    let value: i64 = (fib_memoization_term(fib_memo_cache.clone(), (num - 1)) + fib_memoization_term(fib_memo_cache.clone(), (num - 2)));
    fib_memo_cache.insert(num.clone(), value.clone());
    return value
}
|num: i64| -> i64 { fib_memoization_term(&mut fib_memo_cache, num) }
};
    let mut fib_memoization = |n: i64| -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    let mut out: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        out = { let mut _v = out.clone(); _v.push(fib_memoization_term(i)); _v };
        i = (i + 1);
    }
    return out
};
    let mut fib_binet = |n: i64| -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    if (n >= 1475) {
        panic!("n is too large");
    }
    let sqrt5: f64 = sqrt(5.0);
    let phi: f64 = ((1.0 + sqrt5) / 2.0);
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        let val: i64 = roundf((powf(phi, i) / sqrt5));
        res = { let mut _v = res.clone(); _v.push(val); _v };
        i = (i + 1);
    }
    return res
};
    let mut matrix_mul = |a: Vec<Vec<i64>>, b: Vec<Vec<i64>>| -> Vec<Vec<i64>> {
    let a00: i64 = ((a[0 as usize].clone()[0 as usize] * b[0 as usize].clone()[0 as usize]) + (a[0 as usize].clone()[1 as usize] * b[1 as usize].clone()[0 as usize]));
    let a01: i64 = ((a[0 as usize].clone()[0 as usize] * b[0 as usize].clone()[1 as usize]) + (a[0 as usize].clone()[1 as usize] * b[1 as usize].clone()[1 as usize]));
    let a10: i64 = ((a[1 as usize].clone()[0 as usize] * b[0 as usize].clone()[0 as usize]) + (a[1 as usize].clone()[1 as usize] * b[1 as usize].clone()[0 as usize]));
    let a11: i64 = ((a[1 as usize].clone()[0 as usize] * b[0 as usize].clone()[1 as usize]) + (a[1 as usize].clone()[1 as usize] * b[1 as usize].clone()[1 as usize]));
    return vec![vec![a00, a01].clone(), vec![a10, a11].clone()]
};
    let mut matrix_pow = {
fn matrix_pow(matrix_mul: i64, m: Vec<Vec<i64>>, power: i64) -> Vec<Vec<i64>> {
    if (power < 0) {
        panic!("power is negative");
    }
    let mut result: Vec<Vec<i64>> = vec![vec![1, 0].clone(), vec![0, 1].clone()];
    let mut base: Vec<Vec<i64>> = m.clone();
    let mut p: i64 = power;
    while (p > 0) {
        if ((p % 2) == 1) {
            result = matrix_mul(result, base);
        }
        base = matrix_mul(base, base);
        p = (p / 2);
    }
    return result
}
|m: Vec<Vec<i64>>, power: i64| -> Vec<Vec<i64>> { matrix_pow(matrix_mul, m, power) }
};
    let mut fib_matrix = {
fn fib_matrix(matrix_pow: i64, n: i64) -> i64 {
    if (n < 0) {
        panic!("n is negative");
    }
    if (n == 0) {
        return 0
    }
    let m: Vec<Vec<i64>> = vec![vec![1, 1].clone(), vec![1, 0].clone()];
    let res = matrix_pow(m, (n - 1));
    return res[0 as usize][0 as usize]
}
|n: i64| -> i64 { fib_matrix(matrix_pow, n) }
};
    let mut run_tests = {
fn run_tests(fib_binet: i64, fib_matrix: i64, fib_memoization: i64, fib_recursive_cached: i64) -> i64 {
    let expected: Vec<i64> = vec![0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];
    let it: Vec<i64> = fib_iterative(10);
    let rec: Vec<i64> = fib_recursive(10);
    let cache = fib_recursive_cached(10);
    let memo = fib_memoization(10);
    let bin = fib_binet(10);
    let m = fib_matrix(10);
    if (it != expected) {
        panic!("iterative failed");
    }
    if (rec != expected) {
        panic!("recursive failed");
    }
    if (cache != expected) {
        panic!("cached failed");
    }
    if (memo != expected) {
        panic!("memoization failed");
    }
    if (bin != expected) {
        panic!("binet failed");
    }
    if (m != 55) {
        panic!("matrix failed");
    }
    return m
}
|| -> i64 { run_tests(fib_binet, fib_matrix, fib_memoization, fib_recursive_cached) }
};
    println!("{}", run_tests().to_string());
}
