// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_fib_cache_global: LazyLock<Mutex<HashMap<i64, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
static g_fib_memo_cache: LazyLock<Mutex<HashMap<i64, i64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(0, 0), (1, 1), (2, 1)])));
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn powf(mut x: f64, mut n: i64) -> f64 {
    let mut res: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        res = (res * x);
        i = (i + 1);
    }
    return res
};
        fn roundf(mut x: f64) -> i64 {
    if (x >= 0.0) {
        return ((x + 0.5) as i64)
    }
    return ((x - 0.5) as i64)
};
        fn fib_iterative(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    if (n == 0) {
        return vec![0]
    }
    let mut fib: Vec<i64> = vec![0, 1];
    let mut i: i64 = 2;
    while (i <= n) {
        fib = { let mut _v = fib.clone(); _v.push((fib[(i - 1) as usize] + fib[(i - 2) as usize])); _v };
        i = (i + 1);
    }
    return fib
};
        fn fib_recursive_term(mut i: i64) -> i64 {
    if (i < 0) {
        panic!("n is negative");
    }
    if (i < 2) {
        return i
    }
    return (fib_recursive_term((i - 1)) + fib_recursive_term((i - 2)))
};
        fn fib_recursive(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        res = { let mut _v = res.clone(); _v.push(fib_recursive_term(i)); _v };
        i = (i + 1);
    }
    return res
};
        fn fib_recursive_cached_term(mut i: i64) -> i64 {
    if (i < 0) {
        panic!("n is negative");
    }
    if (i < 2) {
        return i
    }
    if g_fib_cache_global.lock().unwrap().contains_key(&i) {
        return { let _map = g_fib_cache_global.lock().unwrap(); _map.get(&i).cloned().unwrap_or_default() }
    }
    let val: i64 = (fib_recursive_cached_term((i - 1)) + fib_recursive_cached_term((i - 2)));
    { let mut _map = g_fib_cache_global.lock().unwrap(); let _val = val; _map.insert(i.clone(), _val); };
    return val
};
        fn fib_recursive_cached(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    let mut res: Vec<i64> = vec![];
    let mut j: i64 = 0;
    while (j <= n) {
        res = { let mut _v = res.clone(); _v.push(fib_recursive_cached_term(j)); _v };
        j = (j + 1);
    }
    return res
};
        fn fib_memoization_term(mut num: i64) -> i64 {
    if g_fib_memo_cache.lock().unwrap().contains_key(&num) {
        return { let _map = g_fib_memo_cache.lock().unwrap(); _map.get(&num).cloned().unwrap_or_default() }
    }
    let value: i64 = (fib_memoization_term((num - 1)) + fib_memoization_term((num - 2)));
    { let mut _map = g_fib_memo_cache.lock().unwrap(); let _val = value; _map.insert(num.clone(), _val); };
    return value
};
        fn fib_memoization(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    let mut out: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        out = { let mut _v = out.clone(); _v.push(fib_memoization_term(i)); _v };
        i = (i + 1);
    }
    return out
};
        fn fib_binet(mut n: i64) -> Vec<i64> {
    if (n < 0) {
        panic!("n is negative");
    }
    if (n >= 1475) {
        panic!("n is too large");
    }
    let sqrt5: f64 = sqrt(5.0);
    let phi: f64 = ((1.0 + sqrt5) / 2.0);
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        let val: i64 = roundf((powf(phi, i) / sqrt5));
        res = { let mut _v = res.clone(); _v.push(val); _v };
        i = (i + 1);
    }
    return res
};
        fn matrix_mul(mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let a00: i64 = ((a[0 as usize].clone()[0 as usize] * b[0 as usize].clone()[0 as usize]) + (a[0 as usize].clone()[1 as usize] * b[1 as usize].clone()[0 as usize]));
    let a01: i64 = ((a[0 as usize].clone()[0 as usize] * b[0 as usize].clone()[1 as usize]) + (a[0 as usize].clone()[1 as usize] * b[1 as usize].clone()[1 as usize]));
    let a10: i64 = ((a[1 as usize].clone()[0 as usize] * b[0 as usize].clone()[0 as usize]) + (a[1 as usize].clone()[1 as usize] * b[1 as usize].clone()[0 as usize]));
    let a11: i64 = ((a[1 as usize].clone()[0 as usize] * b[0 as usize].clone()[1 as usize]) + (a[1 as usize].clone()[1 as usize] * b[1 as usize].clone()[1 as usize]));
    return vec![vec![a00, a01].clone(), vec![a10, a11].clone()]
};
        fn matrix_pow(mut m: Vec<Vec<i64>>, mut power: i64) -> Vec<Vec<i64>> {
    if (power < 0) {
        panic!("power is negative");
    }
    let mut result: Vec<Vec<i64>> = vec![vec![1, 0].clone(), vec![0, 1].clone()];
    let mut base: Vec<Vec<i64>> = m.clone();
    let mut p: i64 = power;
    while (p > 0) {
        if ((p % 2) == 1) {
            result = matrix_mul(result.clone(), base.clone());
        }
        base = matrix_mul(base.clone(), base.clone());
        p = (p / 2);
    }
    return result
};
        fn fib_matrix(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("n is negative");
    }
    if (n == 0) {
        return 0
    }
    let m: Vec<Vec<i64>> = vec![vec![1, 1].clone(), vec![1, 0].clone()];
    let res: Vec<Vec<i64>> = matrix_pow(m.clone(), (n - 1));
    return res[0 as usize].clone()[0 as usize]
};
        fn run_tests() -> i64 {
    let expected: Vec<i64> = vec![0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];
    let it: Vec<i64> = fib_iterative(10);
    let rec: Vec<i64> = fib_recursive(10);
    let cache: Vec<i64> = fib_recursive_cached(10);
    let memo: Vec<i64> = fib_memoization(10);
    let bin: Vec<i64> = fib_binet(10);
    let m: i64 = fib_matrix(10);
    if (it != expected) {
        panic!("iterative failed");
    }
    if (rec != expected) {
        panic!("recursive failed");
    }
    if (cache != expected) {
        panic!("cached failed");
    }
    if (memo != expected) {
        panic!("memoization failed");
    }
    if (bin != expected) {
        panic!("binet failed");
    }
    if (m != 55) {
        panic!("matrix failed");
    }
    return m
};
        println!("{}", run_tests().to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
