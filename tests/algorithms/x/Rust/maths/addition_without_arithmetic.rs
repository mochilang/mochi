// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_MAX: i64 = 0;
static mut g_HALF: i64 = 0;
fn main() {
    unsafe {
        g_MAX = 4294967296;
        g_HALF = 2147483648;
                let _start: i64 = _now();
        unsafe fn to_unsigned(mut n: i64) -> i64 {
    if (n < 0) {
        return (g_MAX + n)
    }
    return n
};
        unsafe fn from_unsigned(mut n: i64) -> i64 {
    if (n >= g_HALF) {
        return (n - g_MAX)
    }
    return n
};
        unsafe fn bit_and(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    let mut i: i64 = 0;
    while (i < 32) {
        if (((x % 2) == 1) && ((y % 2) == 1)) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
        i = (i + 1);
    }
    return res
};
        unsafe fn bit_xor(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    let mut i: i64 = 0;
    while (i < 32) {
        let mut abit: i64 = (x % 2);
        let mut bbit: i64 = (y % 2);
        if (((abit + bbit) % 2) == 1) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
        i = (i + 1);
    }
    return res
};
        unsafe fn lshift1(mut num: i64) -> i64 {
    return ((num * 2) % g_MAX)
};
        unsafe fn add(mut a: i64, mut b: i64) -> i64 {
    let mut first: i64 = to_unsigned(a);
    let mut second: i64 = to_unsigned(b);
    while (second != 0) {
        let mut carry: i64 = bit_and(first, second);
        first = bit_xor(first, second);
        second = lshift1(carry);
    }
    let mut result: i64 = from_unsigned(first);
    return result
};
        println!("{}", add(3, 5).to_string());
        println!("{}", add(13, 5).to_string());
        println!("{}", add(-7, 2).to_string());
        println!("{}", add(0, -7).to_string());
        println!("{}", add(-321, 0).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
