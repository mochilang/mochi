// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_i = 10;
                let _start: i64 = _now();
        fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    } else {
        return x
    }
};
        fn trapezoidal_area(f: &mut impl FnMut(f64) -> f64, mut x_start: f64, mut x_end: f64, mut steps: i64) -> f64 {
    let mut step: f64 = ((x_end - x_start) / (steps as f64));
    let mut x1: f64 = x_start;
    let mut fx1: f64 = f(x_start);
    let mut area: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < steps) {
        let mut x2: f64 = (x1 + step);
        let mut fx2: f64 = f(x2);
        area = (area + ((abs_float((fx2 + fx1)) * step) / 2.0));
        x1 = x2;
        fx1 = fx2;
        i = (i + 1);
    }
    return area
};
        fn f(mut x: f64) -> f64 {
    return (((x * x) * x) + (x * x))
};
        println!("{}", "f(x) = x^3 + x^2");
        println!("{}", "The area between the curve, x = -5, x = 5 and the x axis is:");
        while (g_i <= 100000) {
            let mut result: f64 = trapezoidal_area(&mut f, -5.0, 5.0, g_i);
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "with ", g_i.to_string()), " steps: "), result.to_string()));
            g_i = (g_i * 10);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
