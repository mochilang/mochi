// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn normalize_index(mut index: i64, mut n: i64) -> i64 {
    if (index < 0) {
        return (n + index)
    }
    return index
};
    fn find_max_iterative(mut nums: Vec<f64>) -> f64 {
    if ((nums.len() as i64) == 0) {
        panic!("find_max_iterative() arg is an empty sequence");
    }
    let mut max_num: f64 = nums[0 as usize];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let x: f64 = nums[i as usize];
        if (x > max_num) {
            max_num = x;
        }
        i = (i + 1);
    }
    return max_num
};
    fn find_max_recursive(mut nums: Vec<f64>, mut left: i64, mut right: i64) -> f64 {
    let n: i64 = (nums.len() as i64);
    if (n == 0) {
        panic!("find_max_recursive() arg is an empty sequence");
    }
    if ((((left >= n) || (left < (0 - n))) || (right >= n)) || (right < (0 - n))) {
        panic!("list index out of range");
    }
    let mut l: i64 = normalize_index(left, n);
    let mut r: i64 = normalize_index(right, n);
    if (l == r) {
        return nums[l as usize]
    }
    let mid: i64 = ((l + r) / 2);
    let left_max: f64 = find_max_recursive(nums.clone(), l, mid);
    let right_max: f64 = find_max_recursive(nums.clone(), (mid + 1), r);
    if (left_max >= right_max) {
        return left_max
    }
    return right_max
};
    fn test_find_max() {
    let arr: Vec<f64> = vec![2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0];
    if (find_max_iterative(arr.clone()) != 94.0) {
        panic!("find_max_iterative failed");
    }
    if (find_max_recursive(arr.clone(), 0, ((arr.len() as i64) - 1)) != 94.0) {
        panic!("find_max_recursive failed");
    }
    if (find_max_recursive(arr.clone(), -(arr.len() as i64), -1) != 94.0) {
        panic!("negative index handling failed");
    }
};
    fn mochi_main() {
    test_find_max();
    let nums: Vec<f64> = vec![2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0];
    println!("{}", format!("{:?}", find_max_iterative(nums.clone())));
    println!("{}", format!("{:?}", find_max_recursive(nums.clone(), 0, ((nums.len() as i64) - 1))));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
