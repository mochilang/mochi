// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn pow_int(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn nth_root(mut x: f64, mut n: i64) -> f64 {
    if (x == 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        let mut denom: f64 = pow_int(guess, (n - 1));
        guess = (((((n - 1) as f64) * guess) + (x / denom)) / (n as f64));
        i = (i + 1);
    }
    return guess
};
    fn round_nearest(mut x: f64) -> f64 {
    if (x >= 0.0) {
        let n: i64 = ((x + 0.5) as i64);
        return (n as f64)
    }
    let n: i64 = ((x - 0.5) as i64);
    return (n as f64)
};
    fn compute_geometric_mean(mut nums: Vec<f64>) -> f64 {
    if ((nums.len() as i64) == 0) {
        panic!("no numbers");
    }
    let mut product: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        product = (product * nums[i as usize]);
        i = (i + 1);
    }
    if ((product < 0.0) && (((nums.len() as i64) % 2) == 0)) {
        panic!("Cannot Compute Geometric Mean for these numbers.");
    }
    let mut mean: f64 = nth_root(abs(product), (nums.len() as i64));
    if (product < 0.0) {
        mean = -mean;
    }
    let possible: f64 = round_nearest(mean);
    if (pow_int(possible, (nums.len() as i64)) == product) {
        mean = possible;
    }
    return mean
};
    fn test_compute_geometric_mean() {
    let eps: f64 = 0.0001;
    let m1: f64 = compute_geometric_mean(vec![2.0, 8.0]);
    if (abs((m1 - 4.0)) > eps) {
        panic!("test1 failed");
    }
    let m2: f64 = compute_geometric_mean(vec![5.0, 125.0]);
    if (abs((m2 - 25.0)) > eps) {
        panic!("test2 failed");
    }
    let m3: f64 = compute_geometric_mean(vec![1.0, 0.0]);
    if (abs((m3 - 0.0)) > eps) {
        panic!("test3 failed");
    }
    let m4: f64 = compute_geometric_mean(vec![1.0, 5.0, 25.0, 5.0]);
    if (abs((m4 - 5.0)) > eps) {
        panic!("test4 failed");
    }
    let m5: f64 = compute_geometric_mean(vec![-5.0, 25.0, 1.0]);
    if (abs((m5 + 5.0)) > eps) {
        panic!("test5 failed");
    }
};
    fn mochi_main() {
    test_compute_geometric_mean();
    println!("{}", format!("{:?}", compute_geometric_mean(vec![-3.0, -27.0])));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
