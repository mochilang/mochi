// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn r#mod(mut a: i64, mut n: i64) -> i64 {
    let r: i64 = (a % n);
    if (r < 0) {
        return (r + n)
    }
    return r
};
    fn greatest_common_divisor(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = if (a < 0) { -a } else { a };
    let mut y: i64 = if (b < 0) { -b } else { b };
    while (y != 0) {
        let t: i64 = (x % y);
        x = y;
        y = t;
    }
    return x
};
    fn extended_gcd(mut a: i64, mut b: i64) -> Vec<i64> {
    if (b == 0) {
        return vec![a, 1, 0]
    }
    let res: Vec<i64> = extended_gcd(b, (a % b));
    let d: i64 = res[0 as usize];
    let p: i64 = res[1 as usize];
    let q: i64 = res[2 as usize];
    let x: i64 = q;
    let y: i64 = (p - (q * (a / b)));
    return vec![d, x, y]
};
    fn extended_euclid(mut a: i64, mut b: i64) -> Vec<i64> {
    if (b == 0) {
        return vec![1, 0]
    }
    let res: Vec<i64> = extended_euclid(b, (a % b));
    let x: i64 = res[1 as usize];
    let y: i64 = (res[0 as usize] - ((a / b) * res[1 as usize]));
    return vec![x, y]
};
    let mut invert_modulo = |a: i64, n: i64| -> i64 {
    let res: Vec<i64> = extended_euclid(a, n);
    let inv: i64 = res[0 as usize];
    return r#mod(inv, n)
};
    let mut modular_division = |a: i64, b: i64, n: i64| -> i64 {
    if (n <= 1) {
        panic!("n must be > 1");
    }
    if (a <= 0) {
        panic!("a must be > 0");
    }
    if (greatest_common_divisor(a, n) != 1) {
        panic!("gcd(a,n) != 1");
    }
    let eg: Vec<i64> = extended_gcd(n, a);
    let s: i64 = eg[2 as usize];
    return r#mod((b * s), n)
};
    let mut modular_division2 = |a: i64, b: i64, n: i64| -> i64 {
    let s: i64 = invert_modulo(a, n);
    return r#mod((b * s), n)
};
    let mut tests = || {
    if (modular_division(4, 8, 5) != 2) {
        panic!("md1");
    }
    if (modular_division(3, 8, 5) != 1) {
        panic!("md2");
    }
    if (modular_division(4, 11, 5) != 4) {
        panic!("md3");
    }
    if (modular_division2(4, 8, 5) != 2) {
        panic!("md21");
    }
    if (modular_division2(3, 8, 5) != 1) {
        panic!("md22");
    }
    if (modular_division2(4, 11, 5) != 4) {
        panic!("md23");
    }
    if (invert_modulo(2, 5) != 3) {
        panic!("inv");
    }
    let eg: Vec<i64> = extended_gcd(10, 6);
    if (((eg[0 as usize] != 2) || (eg[1 as usize] != -1)) || (eg[2 as usize] != 2)) {
        panic!("eg");
    }
    let eu: Vec<i64> = extended_euclid(10, 6);
    if ((eu[0 as usize] != -1) || (eu[1 as usize] != 2)) {
        panic!("eu");
    }
    if (greatest_common_divisor(121, 11) != 11) {
        panic!("gcd");
    }
};
    let mut mochi_main = || {
    tests();
    println!("{}", modular_division(4, 8, 5).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
