// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Complex {
    re: f64,
    im: f64,
}
impl std::fmt::Display for Complex {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"re\": {}", self.re)?;
        write!(f, ", ")?;
        write!(f, "\"im\": {}", self.im)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn add(mut a: Complex, mut b: Complex) -> Complex {
    return Complex {re: (a.re + b.re), im: (a.im + b.im)}
};
    fn sub(mut a: Complex, mut b: Complex) -> Complex {
    return Complex {re: (a.re - b.re), im: (a.im - b.im)}
};
    fn div_real(mut a: Complex, mut r: f64) -> Complex {
    return Complex {re: (a.re / r), im: (a.im / r)}
};
    fn sqrt_newton(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    let mut sqrt_to_complex = |d: f64| -> Complex {
    if (d >= 0.0) {
        return Complex {re: sqrt_newton(d), im: 0.0}
    }
    return Complex {re: 0.0, im: sqrt_newton(-d)}
};
    let mut quadratic_roots = |a: f64, b: f64, c: f64| -> Vec<Complex> {
    if (a == 0.0) {
        println!("{}", "ValueError: coefficient 'a' must not be zero");
        return vec![]
    }
    let delta: f64 = ((b * b) - ((4.0 * a) * c));
    let sqrt_d: Complex = sqrt_to_complex(delta);
    let minus_b: Complex = Complex {re: -b, im: 0.0};
    let two_a: f64 = (2.0 * a);
    let root1: Complex = div_real(add(minus_b.clone(), sqrt_d.clone()), two_a);
    let root2: Complex = div_real(sub(minus_b.clone(), sqrt_d.clone()), two_a);
    return vec![root1.clone(), root2.clone()]
};
    fn root_str(mut r: Complex) -> String {
    if (r.im == 0.0) {
        return r.re.to_string().to_string()
    }
    let mut s = r.re.to_string();
    if (r.im >= 0.0) {
        s = format!("{}{}", format!("{}{}", format!("{}{}", s, "+"), r.im.to_string()), "i");
    } else {
        s = format!("{}{}", format!("{}{}", s, r.im.to_string()), "i");
    }
    return s.clone()
};
    let mut mochi_main = || {
    let roots: Vec<Complex> = quadratic_roots(5.0, 6.0, 1.0);
    if ((roots.len() as i64) == 2) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "The solutions are: ", root_str(roots[0 as usize].clone())), " and "), root_str(roots[1 as usize].clone())));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
