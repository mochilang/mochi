// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn find_min_iterative(mut nums: Vec<f64>) -> f64 {
    if ((nums.len() as i64) == 0) {
        panic!("find_min_iterative() arg is an empty sequence");
    }
    let mut min_num: f64 = nums[0 as usize];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let num: f64 = nums[i as usize];
        if (num < min_num) {
            min_num = num;
        }
        i = (i + 1);
    }
    return min_num
};
    fn find_min_recursive(mut nums: Vec<f64>, mut left: i64, mut right: i64) -> f64 {
    let n: i64 = (nums.len() as i64);
    if (n == 0) {
        panic!("find_min_recursive() arg is an empty sequence");
    }
    if ((((left >= n) || (left < (0 - n))) || (right >= n)) || (right < (0 - n))) {
        panic!("list index out of range");
    }
    let mut l: i64 = left;
    let mut r: i64 = right;
    if (l < 0) {
        l = (n + l);
    }
    if (r < 0) {
        r = (n + r);
    }
    if (l == r) {
        return nums[l as usize]
    }
    let mid: i64 = ((l + r) / 2);
    let left_min: f64 = find_min_recursive(nums.clone(), l, mid);
    let right_min: f64 = find_min_recursive(nums.clone(), (mid + 1), r);
    if (left_min <= right_min) {
        return left_min
    }
    return right_min
};
    fn test_find_min() {
    let a: Vec<f64> = vec![3.0, 2.0, 1.0];
    if (find_min_iterative(a.clone()) != 1.0) {
        panic!("iterative test1 failed");
    }
    if (find_min_recursive(a.clone(), 0, ((a.len() as i64) - 1)) != 1.0) {
        panic!("recursive test1 failed");
    }
    let b: Vec<f64> = vec![-3.0, -2.0, -1.0];
    if (find_min_iterative(b.clone()) != -3.0) {
        panic!("iterative test2 failed");
    }
    if (find_min_recursive(b.clone(), 0, ((b.len() as i64) - 1)) != -3.0) {
        panic!("recursive test2 failed");
    }
    let c: Vec<f64> = vec![3.0, -3.0, 0.0];
    if (find_min_iterative(c.clone()) != -3.0) {
        panic!("iterative test3 failed");
    }
    if (find_min_recursive(c.clone(), 0, ((c.len() as i64) - 1)) != -3.0) {
        panic!("recursive test3 failed");
    }
    let d: Vec<f64> = vec![1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0];
    if (find_min_recursive(d.clone(), (0 - (d.len() as i64)), (0 - 1)) != 1.0) {
        panic!("negative index test failed");
    }
};
    fn mochi_main() {
    test_find_min();
    let sample: Vec<f64> = vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0];
    println!("{}", find_min_iterative(sample.clone()).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
