// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_int(mut x: i64) -> i64 {
    if (x < 0) {
        return -x
    }
    return x
};
    let mut gcd_iter = |a: i64, b: i64| -> i64 {
    let mut x: i64 = abs_int(a);
    let mut y: i64 = abs_int(b);
    while (y != 0) {
        let t: i64 = y;
        y = (x % y);
        x = t;
    }
    return x
};
    fn is_prime(mut n: i64) -> bool {
    if (n <= 1) {
        return false
    }
    let mut d: i64 = 2;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 1);
    }
    return true
};
    fn sieve_er(mut n: i64) -> Vec<i64> {
    let mut nums: Vec<i64> = vec![];
    let mut i: i64 = 2;
    while (i <= n) {
        nums = { let mut _v = nums.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    let mut idx: i64 = 0;
    while (idx < (nums.len() as i64)) {
        let mut j: i64 = (idx + 1);
        while (j < (nums.len() as i64)) {
            if (nums[idx as usize] != 0) {
                if ((nums[j as usize] % nums[idx as usize]) == 0) {
                    nums[j as usize] = 0;
                }
            }
            j = (j + 1);
        }
        idx = (idx + 1);
    }
    let mut res: Vec<i64> = vec![];
    let mut k: i64 = 0;
    while (k < (nums.len() as i64)) {
        let v: i64 = nums[k as usize];
        if (v != 0) {
            res = { let mut _v = res.clone(); _v.push(v); _v };
        }
        k = (k + 1);
    }
    return res
};
    let mut get_prime_numbers = |n: i64| -> Vec<i64> {
    let mut ans: Vec<i64> = vec![];
    let mut num: i64 = 2;
    while (num <= n) {
        if is_prime(num) {
            ans = { let mut _v = ans.clone(); _v.push(num); _v };
        }
        num = (num + 1);
    }
    return ans
};
    let mut prime_factorization = |number: i64| -> Vec<i64> {
    if (number == 0) {
        return vec![0]
    }
    if (number == 1) {
        return vec![1]
    }
    let mut ans: Vec<i64> = vec![];
    if is_prime(number) {
        ans = { let mut _v = ans.clone(); _v.push(number); _v };
        return ans
    }
    let mut quotient: i64 = number;
    let mut factor: i64 = 2;
    while (quotient != 1) {
        if (is_prime(factor) && ((quotient % factor) == 0)) {
            ans = { let mut _v = ans.clone(); _v.push(factor); _v };
            quotient = (quotient / factor);
        } else {
            factor = (factor + 1);
        }
    }
    return ans
};
    let mut greatest_prime_factor = |number: i64| -> i64 {
    let factors: Vec<i64> = prime_factorization(number);
    let mut m: i64 = factors[0 as usize];
    let mut i: i64 = 1;
    while (i < (factors.len() as i64)) {
        if (factors[i as usize] > m) {
            m = factors[i as usize];
        }
        i = (i + 1);
    }
    return m
};
    let mut smallest_prime_factor = |number: i64| -> i64 {
    let factors: Vec<i64> = prime_factorization(number);
    let mut m: i64 = factors[0 as usize];
    let mut i: i64 = 1;
    while (i < (factors.len() as i64)) {
        if (factors[i as usize] < m) {
            m = factors[i as usize];
        }
        i = (i + 1);
    }
    return m
};
    let mut kg_v = |number1: i64, number2: i64| -> i64 {
    if ((number1 < 1) || (number2 < 1)) {
        panic!("numbers must be positive");
    }
    let g: i64 = gcd_iter(number1, number2);
    return ((number1 / g) * number2)
};
    fn is_even(mut number: i64) -> bool {
    return ((number % 2) == 0)
};
    fn is_odd(mut number: i64) -> bool {
    return ((number % 2) != 0)
};
    let mut goldbach = |number: i64| -> Vec<i64> {
    if (!is_even(number) || (number <= 2)) {
        panic!("number must be even and > 2");
    }
    let primes: Vec<i64> = get_prime_numbers(number);
    let mut i: i64 = 0;
    while (i < (primes.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (primes.len() as i64)) {
            if ((primes[i as usize] + primes[j as usize]) == number) {
                return vec![primes[i as usize], primes[j as usize]]
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return vec![]
};
    let mut get_prime = |n: i64| -> i64 {
    if (n < 0) {
        panic!("n must be non-negative");
    }
    let mut index: i64 = 0;
    let mut ans: i64 = 2;
    while (index < n) {
        index = (index + 1);
        ans = (ans + 1);
        while !is_prime(ans) {
            ans = (ans + 1);
        }
    }
    return ans
};
    let mut get_primes_between = |p1: i64, p2: i64| -> Vec<i64> {
    let bad1: bool = !is_prime(p1);
    let bad2: bool = !is_prime(p2);
    if ((bad1 || bad2) || (p1 >= p2)) {
        panic!("arguments must be prime and p1 < p2");
    }
    let mut num: i64 = (p1 + 1);
    while (num < p2) {
        if is_prime(num) {
            break
        }
        num = (num + 1);
    }
    let mut ans: Vec<i64> = vec![];
    while (num < p2) {
        ans = { let mut _v = ans.clone(); _v.push(num); _v };
        num = (num + 1);
        while (num < p2) {
            if is_prime(num) {
                break
            }
            num = (num + 1);
        }
    }
    return ans
};
    fn get_divisors(mut n: i64) -> Vec<i64> {
    if (n < 1) {
        panic!("n must be >= 1");
    }
    let mut ans: Vec<i64> = vec![];
    let mut d: i64 = 1;
    while (d <= n) {
        if ((n % d) == 0) {
            ans = { let mut _v = ans.clone(); _v.push(d); _v };
        }
        d = (d + 1);
    }
    return ans
};
    let mut is_perfect_number = |number: i64| -> bool {
    if (number <= 1) {
        panic!("number must be > 1");
    }
    let divisors: Vec<i64> = get_divisors(number);
    let mut sum: i64 = 0;
    let mut i: i64 = 0;
    while (i < ((divisors.len() as i64) - 1)) {
        sum = (sum + divisors[i as usize]);
        i = (i + 1);
    }
    return (sum == number)
};
    let mut simplify_fraction = |numerator: i64, denominator: i64| -> Vec<i64> {
    if (denominator == 0) {
        panic!("denominator cannot be zero");
    }
    let g: i64 = gcd_iter(abs_int(numerator), abs_int(denominator));
    return vec![(numerator / g), (denominator / g)]
};
    fn factorial(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("n must be >= 0");
    }
    let mut ans: i64 = 1;
    let mut i: i64 = 1;
    while (i <= n) {
        ans = (ans * i);
        i = (i + 1);
    }
    return ans
};
    fn fib(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("n must be >= 0");
    }
    if (n <= 1) {
        return 1
    }
    let mut tmp: i64 = 0;
    let mut fib1: i64 = 1;
    let mut ans: i64 = 1;
    let mut i: i64 = 0;
    while (i < (n - 1)) {
        tmp = ans;
        ans = (ans + fib1);
        fib1 = tmp;
        i = (i + 1);
    }
    return ans
};
    println!("{}", is_prime(97).to_string());
    println!("{}", format!("{:?}", sieve_er(20)));
    println!("{}", format!("{:?}", get_prime_numbers(20)));
    println!("{}", format!("{:?}", prime_factorization(287)));
    println!("{}", greatest_prime_factor(287).to_string());
    println!("{}", smallest_prime_factor(287).to_string());
    println!("{}", kg_v(8, 10).to_string());
    println!("{}", format!("{:?}", goldbach(28)));
    println!("{}", get_prime(8).to_string());
    println!("{}", format!("{:?}", get_primes_between(3, 23)));
    println!("{}", format!("{:?}", get_divisors(28)));
    println!("{}", is_perfect_number(28).to_string());
    println!("{}", format!("{:?}", simplify_fraction(10, 20)));
    println!("{}", factorial(5).to_string());
    println!("{}", fib(10).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
