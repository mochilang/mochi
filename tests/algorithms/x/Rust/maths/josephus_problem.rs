// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn josephus_recursive(mut num_people: i64, mut step_size: i64) -> i64 {
    if ((num_people <= 0) || (step_size <= 0)) {
        panic!("num_people or step_size is not a positive integer.");
    }
    if (num_people == 1) {
        return 0
    }
    return ((josephus_recursive((num_people - 1), step_size) + step_size) % num_people)
};
    fn find_winner(mut num_people: i64, mut step_size: i64) -> i64 {
    return (josephus_recursive(num_people, step_size) + 1)
};
    fn remove_at(mut xs: Vec<i64>, mut idx: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i != idx) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn josephus_iterative(mut num_people: i64, mut step_size: i64) -> i64 {
    if ((num_people <= 0) || (step_size <= 0)) {
        panic!("num_people or step_size is not a positive integer.");
    }
    let mut circle: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i <= num_people) {
        circle = { let mut _v = circle.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    let mut current: i64 = 0;
    while ((circle.len() as i64) > 1) {
        current = (((current + step_size) - 1) % (circle.len() as i64));
        circle = remove_at(circle.clone(), current);
    }
    return circle[0 as usize]
};
    let r: i64 = josephus_recursive(7, 3);
    println!("{}", r.to_string());
    println!("{}", find_winner(7, 3).to_string());
    println!("{}", josephus_iterative(7, 3).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
