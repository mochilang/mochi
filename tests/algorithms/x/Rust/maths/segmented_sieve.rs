// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    }
    return b
};
    fn int_sqrt(mut n: i64) -> i64 {
    let mut r: i64 = 0;
    while (((r + 1) * (r + 1)) <= n) {
        r = (r + 1);
    }
    return r
};
    let mut sieve = |n: i64| -> Vec<i64> {
    if (n <= 0) {
        panic!("Number must instead be a positive integer");
    }
    let mut in_prime: Vec<i64> = vec![];
    let mut start: i64 = 2;
    let end: i64 = int_sqrt(n);
    let mut temp: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (end + 1)) {
        temp = { let mut _v = temp.clone(); _v.push(1); _v };
        i = (i + 1);
    }
    let mut prime: Vec<i64> = vec![];
    while (start <= end) {
        if (temp[start as usize] == 1) {
            in_prime = { let mut _v = in_prime.clone(); _v.push(start); _v };
            let mut j: i64 = (start * start);
            while (j <= end) {
                temp[j as usize] = 0;
                j = (j + start);
            }
        }
        start = (start + 1);
    }
    i = 0;
    while (i < (in_prime.len() as i64)) {
        prime = { let mut _v = prime.clone(); _v.push(in_prime[i as usize]); _v };
        i = (i + 1);
    }
    let mut low: i64 = (end + 1);
    let mut high: i64 = min_int((2 * end), n);
    while (low <= n) {
        let mut tempSeg: Vec<i64> = vec![];
        let mut size: i64 = ((high - low) + 1);
        let mut k: i64 = 0;
        while (k < size) {
            tempSeg = { let mut _v = tempSeg.clone(); _v.push(1); _v };
            k = (k + 1);
        }
        let mut idx: i64 = 0;
        while (idx < (in_prime.len() as i64)) {
            let each: i64 = in_prime[idx as usize];
            let mut t: i64 = ((low / each) * each);
            if (t < low) {
                t = (t + each);
            }
            let mut j2: i64 = t;
            while (j2 <= high) {
                tempSeg[(j2 - low) as usize] = 0;
                j2 = (j2 + each);
            }
            idx = (idx + 1);
        }
        let mut j3: i64 = 0;
        while (j3 < (tempSeg.len() as i64)) {
            if (tempSeg[j3 as usize] == 1) {
                prime = { let mut _v = prime.clone(); _v.push((j3 + low)); _v };
            }
            j3 = (j3 + 1);
        }
        low = (high + 1);
        high = min_int((high + end), n);
    }
    return prime
};
    fn lists_equal(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut m: i64 = 0;
    while (m < (a.len() as i64)) {
        if (a[m as usize] != b[m as usize]) {
            return false
        }
        m = (m + 1);
    }
    return true
};
    let mut test_sieve = || {
    let e1: Vec<i64> = sieve(8);
    if !lists_equal(e1.clone(), vec![2, 3, 5, 7]) {
        panic!("sieve(8) failed");
    }
    let e2: Vec<i64> = sieve(27);
    if !lists_equal(e2.clone(), vec![2, 3, 5, 7, 11, 13, 17, 19, 23]) {
        panic!("sieve(27) failed");
    }
};
    let mut mochi_main = || {
    test_sieve();
    println!("{}", format!("{:?}", sieve(30)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
