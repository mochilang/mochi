// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn parse_decimal(mut s: String) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() < "0") || (c.as_str() > "9")) {
            panic!("invalid literal");
        }
        value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
    fn zeller_day(mut date_input: String) -> String {
    let days: HashMap<i64, String> = HashMap::from([(0, String::from("Sunday")), (1, String::from("Monday")), (2, String::from("Tuesday")), (3, String::from("Wednesday")), (4, String::from("Thursday")), (5, String::from("Friday")), (6, String::from("Saturday"))]);
    if ((date_input.len() as i64) != 10) {
        panic!("Must be 10 characters long");
    }
    let m: i64 = parse_decimal(date_input.chars().skip(0 as usize).take((2 - 0) as usize).collect::<String>());
    if ((m <= 0) || (m >= 13)) {
        panic!("Month must be between 1 - 12");
    }
    let sep1: String = date_input.chars().nth(2 as usize).unwrap().to_string().clone();
    if ((sep1.as_str() != "-") && (sep1.as_str() != "/")) {
        panic!("Date separator must be '-' or '/'");
    }
    let d: i64 = parse_decimal(date_input.chars().skip(3 as usize).take((5 - 3) as usize).collect::<String>());
    if ((d <= 0) || (d >= 32)) {
        panic!("Date must be between 1 - 31");
    }
    let sep2: String = date_input.chars().nth(5 as usize).unwrap().to_string().clone();
    if ((sep2.as_str() != "-") && (sep2.as_str() != "/")) {
        panic!("Date separator must be '-' or '/'");
    }
    let y: i64 = parse_decimal(date_input.chars().skip(6 as usize).take((10 - 6) as usize).collect::<String>());
    if ((y <= 45) || (y >= 8500)) {
        panic!("Year out of range. There has to be some sort of limit...right?");
    }
    let mut year: i64 = y;
    let mut month: i64 = m;
    if (month <= 2) {
        year = (year - 1);
        month = (month + 12);
    }
    let c: i64 = (year / 100);
    let k: i64 = (year % 100);
    let t: i64 = (((2.6 * (month as f64)) - 5.39) as i64);
    let u: i64 = (c / 4);
    let v: i64 = (k / 4);
    let x: i64 = (d + k);
    let z: i64 = (((t + u) + v) + x);
    let w: i64 = (z - (2 * c));
    let mut f: i64 = (w % 7);
    if (f < 0) {
        f = (f + 7);
    }
    return days.get(&f).cloned().unwrap_or_default().clone()
};
    fn zeller(mut date_input: String) -> String {
    let day: String = zeller_day(date_input.clone()).clone();
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Your date ", date_input), ", is a "), day), "!").clone()
};
    fn test_zeller() {
    let inputs: Vec<String> = vec![String::from("01-31-2010").clone().clone(), String::from("02-01-2010").clone().clone(), String::from("11-26-2024").clone().clone(), String::from("07-04-1776").clone().clone()];
    let expected: Vec<String> = vec![String::from("Sunday").clone().clone(), String::from("Monday").clone().clone(), String::from("Tuesday").clone().clone(), String::from("Thursday").clone().clone()];
    let mut i: i64 = 0;
    while (i < (inputs.len() as i64)) {
        let res: String = zeller_day(inputs[i as usize].clone()).clone();
        if (res.as_str() != expected[i as usize].clone().as_str()) {
            panic!("zeller test failed");
        }
        i = (i + 1);
    }
};
    fn mochi_main() {
    test_zeller();
    println!("{}", zeller(String::from("01-31-2010")));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
