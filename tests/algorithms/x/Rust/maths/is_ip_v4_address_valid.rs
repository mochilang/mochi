// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split_by_dot(s: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (c.as_str() == ".") {
            res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
            current = String::from("");
        } else {
            current = format!("{}{}", current, c);
        }
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    return res
};
    fn is_digit_str(s: &str) -> bool {
    if ((s.len() as i64) == 0) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() < "0") || (c.as_str() > "9")) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn parse_decimal(s: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
    fn is_ip_v4_address_valid(ip: &str) -> bool {
    let octets: Vec<String> = split_by_dot(ip);
    if ((octets.len() as i64) != 4) {
        return false
    }
    let mut i: i64 = 0;
    while (i < 4) {
        let oct: String = octets[i as usize].clone().clone();
        if !is_digit_str(&oct) {
            return false
        }
        let number: i64 = parse_decimal(&oct);
        if ((number.to_string().len() as i64) != (oct.len() as i64)) {
            return false
        }
        if ((number < 0) || (number > 255)) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    println!("{}", is_ip_v4_address_valid(&"192.168.0.23").to_string());
    println!("{}", is_ip_v4_address_valid(&"192.256.15.8").to_string());
    println!("{}", is_ip_v4_address_valid(&"172.100.0.8").to_string());
    println!("{}", is_ip_v4_address_valid(&"255.256.0.256").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.33333333.4").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.-3.4").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.3").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.3.4.5").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.A.4").to_string());
    println!("{}", is_ip_v4_address_valid(&"0.0.0.0").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.3.").to_string());
    println!("{}", is_ip_v4_address_valid(&"1.2.3.05").to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
