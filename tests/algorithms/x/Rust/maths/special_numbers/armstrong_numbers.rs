// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow_int(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn armstrong_number(mut n: i64) -> bool {
    if (n < 1) {
        return false
    }
    let mut digits: i64 = 0;
    let mut temp: i64 = n;
    while (temp > 0) {
        temp = (temp / 10);
        digits = (digits + 1);
    }
    let mut total: i64 = 0;
    temp = n;
    while (temp > 0) {
        let rem: i64 = (temp % 10);
        total = (total + pow_int(rem, digits));
        temp = (temp / 10);
    }
    return (total == n)
};
    fn pluperfect_number(mut n: i64) -> bool {
    if (n < 1) {
        return false
    }
    let mut digit_histogram: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 10) {
        digit_histogram = { let mut _v = digit_histogram.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut digit_total: i64 = 0;
    let mut temp: i64 = n;
    while (temp > 0) {
        let rem: i64 = (temp % 10);
        digit_histogram[rem as usize] = (digit_histogram[rem as usize] + 1);
        digit_total = (digit_total + 1);
        temp = (temp / 10);
    }
    let mut total: i64 = 0;
    i = 0;
    while (i < 10) {
        if (digit_histogram[i as usize] > 0) {
            total = (total + (digit_histogram[i as usize] * pow_int(i, digit_total)));
        }
        i = (i + 1);
    }
    return (total == n)
};
    fn narcissistic_number(mut n: i64) -> bool {
    if (n < 1) {
        return false
    }
    let mut digits: i64 = 0;
    let mut temp: i64 = n;
    while (temp > 0) {
        temp = (temp / 10);
        digits = (digits + 1);
    }
    temp = n;
    let mut total: i64 = 0;
    while (temp > 0) {
        let rem: i64 = (temp % 10);
        total = (total + pow_int(rem, digits));
        temp = (temp / 10);
    }
    return (total == n)
};
    println!("{}", if armstrong_number(371) { 1 } else { 0 });
    println!("{}", if armstrong_number(200) { 1 } else { 0 });
    println!("{}", if pluperfect_number(371) { 1 } else { 0 });
    println!("{}", if pluperfect_number(200) { 1 } else { 0 });
    println!("{}", if narcissistic_number(371) { 1 } else { 0 });
    println!("{}", if narcissistic_number(200) { 1 } else { 0 });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
