// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn binomial_coefficient(mut total_elements: i64, mut elements_to_choose: i64) -> i64 {
    if ((elements_to_choose == 0) || (elements_to_choose == total_elements)) {
        return 1
    }
    let mut k: i64 = elements_to_choose;
    if (k > (total_elements - k)) {
        k = (total_elements - k);
    }
    let mut coefficient: i64 = 1;
    let mut i: i64 = 0;
    while (i < k) {
        coefficient = (coefficient * (total_elements - i));
        coefficient = (coefficient / (i + 1));
        i = (i + 1);
    }
    return coefficient
};
    let mut bell_numbers = |max_set_length: i64| -> Vec<i64> {
    if (max_set_length < 0) {
        panic!("max_set_length must be non-negative");
    }
    let mut bell: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= max_set_length) {
        bell = { let mut _v = bell.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    bell[0 as usize] = 1;
    i = 1;
    while (i <= max_set_length) {
        let mut j: i64 = 0;
        while (j < i) {
            bell[i as usize] = (bell[i as usize] + (binomial_coefficient((i - 1), j) * bell[j as usize]));
            j = (j + 1);
        }
        i = (i + 1);
    }
    return bell
};
    let mut mochi_main = || {
    println!("{}", format!("{:?}", bell_numbers(5)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
