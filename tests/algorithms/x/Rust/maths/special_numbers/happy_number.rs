// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_happy_number(mut num: i64) -> bool {
    if (num <= 0) {
        panic!("num must be a positive integer");
    }
    let mut seen: Vec<i64> = vec![];
    let mut n: i64 = num;
    while (n != 1) {
        let mut i: i64 = 0;
        while (i < (seen.len() as i64)) {
            if (seen[i as usize] == n) {
                return false
            }
            i = (i + 1);
        }
        seen = { let mut _v = seen.clone(); _v.push(n); _v };
        let mut total: i64 = 0;
        let mut temp: i64 = n;
        while (temp > 0) {
            let digit: i64 = (temp % 10);
            total = (total + (digit * digit));
            temp = (temp / 10);
        }
        n = total;
    }
    return true
};
    fn test_is_happy_number() {
    if !is_happy_number(19) {
        panic!("19 should be happy");
    }
    if is_happy_number(2) {
        panic!("2 should be unhappy");
    }
    if !is_happy_number(23) {
        panic!("23 should be happy");
    }
    if !is_happy_number(1) {
        panic!("1 should be happy");
    }
};
    fn mochi_main() {
    test_is_happy_number();
    println!("{}", if is_happy_number(19) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
