// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bubble_sort(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = xs.clone();
    let mut n: i64 = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < ((n - i) - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let tmp: i64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = tmp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn factors(mut num: i64) -> Vec<i64> {
    let mut values: Vec<i64> = vec![1];
    let mut i: i64 = 2;
    while ((i * i) <= num) {
        if ((num % i) == 0) {
            values = { let mut _v = values.clone(); _v.push(i); _v };
            let d: i64 = (num / i);
            if (d != i) {
                values = { let mut _v = values.clone(); _v.push(d); _v };
            }
        }
        i = (i + 1);
    }
    return bubble_sort(values.clone())
};
    fn sum_list(mut xs: Vec<i64>) -> i64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        total = (total + xs[i as usize]);
        i = (i + 1);
    }
    return total
};
    fn abundant(mut n: i64) -> bool {
    return (sum_list(factors(n)) > n)
};
    fn semi_perfect(mut number: i64) -> bool {
    if (number <= 0) {
        return true
    }
    let values: Vec<i64> = factors(number);
    let mut possible: Vec<bool> = vec![];
    let mut j: i64 = 0;
    while (j <= number) {
        possible = { let mut _v = possible.clone(); _v.push((j == 0)); _v };
        j = (j + 1);
    }
    let mut idx: i64 = 0;
    while (idx < (values.len() as i64)) {
        let v: i64 = values[idx as usize];
        let mut s: i64 = number;
        while (s >= v) {
            if possible[(s - v) as usize] {
                possible[s as usize] = true;
            }
            s = (s - 1);
        }
        idx = (idx + 1);
    }
    return possible[number as usize]
};
    fn weird(mut number: i64) -> bool {
    return (abundant(number) && (semi_perfect(number) == false))
};
    fn run_tests() {
    if (factors(12) != vec![1, 2, 3, 4, 6]) {
        panic!("factors 12 failed");
    }
    if (factors(1) != vec![1]) {
        panic!("factors 1 failed");
    }
    if (factors(100) != vec![1, 2, 4, 5, 10, 20, 25, 50]) {
        panic!("factors 100 failed");
    }
    if (abundant(0) != true) {
        panic!("abundant 0 failed");
    }
    if (abundant(1) != false) {
        panic!("abundant 1 failed");
    }
    if (abundant(12) != true) {
        panic!("abundant 12 failed");
    }
    if (abundant(13) != false) {
        panic!("abundant 13 failed");
    }
    if (abundant(20) != true) {
        panic!("abundant 20 failed");
    }
    if (semi_perfect(0) != true) {
        panic!("semi_perfect 0 failed");
    }
    if (semi_perfect(1) != true) {
        panic!("semi_perfect 1 failed");
    }
    if (semi_perfect(12) != true) {
        panic!("semi_perfect 12 failed");
    }
    if (semi_perfect(13) != false) {
        panic!("semi_perfect 13 failed");
    }
    if (weird(0) != false) {
        panic!("weird 0 failed");
    }
    if (weird(70) != true) {
        panic!("weird 70 failed");
    }
    if (weird(77) != false) {
        panic!("weird 77 failed");
    }
};
    fn mochi_main() {
    run_tests();
    let nums: Vec<i64> = vec![69, 70, 71];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let n: i64 = nums[i as usize];
        if weird(n) {
            println!("{}", format!("{}{}", n.to_string(), " is weird."));
        } else {
            println!("{}", format!("{}{}", n.to_string(), " is not weird."));
        }
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
