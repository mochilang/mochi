// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn panic(mut msg: String) {
};
    fn char_to_value(mut c: String) -> i64 {
    let digits: String = String::from("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut i: i64 = 0;
    while (i < (digits.len() as i64)) {
        if (digits.chars().nth(i as usize).unwrap().to_string().as_str() == c.as_str()) {
            return i
        }
        i = (i + 1);
    }
    panic!("{}", String::from("invalid digit"));
};
    fn int_to_base(mut number: i64, mut base: i64) -> String {
    if ((base < 2) || (base > 36)) {
        panic!("{}", String::from("'base' must be between 2 and 36 inclusive"));
    }
    if (number < 0) {
        panic!("{}", String::from("number must be a positive integer"));
    }
    let digits: String = String::from("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut n: i64 = number;
    let mut result: String = String::from("").clone();
    while (n > 0) {
        let remainder: i64 = (n % base);
        result = format!("{}{}", digits.chars().nth(remainder as usize).unwrap().to_string(), result);
        n = (n / base);
    }
    if (result.as_str() == "") {
        result = String::from("0");
    }
    return result.clone()
};
    fn base_to_int(mut num_str: String, mut base: i64) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (num_str.len() as i64)) {
        let c: String = num_str.chars().nth(i as usize).unwrap().to_string().clone();
        value = ((value * base) + char_to_value(c.clone()));
        i = (i + 1);
    }
    return value
};
    fn sum_of_digits(mut num: i64, mut base: i64) -> String {
    if ((base < 2) || (base > 36)) {
        panic!("{}", String::from("'base' must be between 2 and 36 inclusive"));
    }
    let num_str: String = int_to_base(num, base).clone();
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (num_str.len() as i64)) {
        let c: String = num_str.chars().nth(i as usize).unwrap().to_string().clone();
        total = (total + char_to_value(c.clone()));
        i = (i + 1);
    }
    return int_to_base(total, base).clone()
};
    fn harshad_numbers_in_base(mut limit: i64, mut base: i64) -> Vec<String> {
    if ((base < 2) || (base > 36)) {
        panic!("{}", String::from("'base' must be between 2 and 36 inclusive"));
    }
    if (limit < 0) {
        return vec![]
    }
    let mut numbers: Vec<String> = vec![];
    let mut i: i64 = 1;
    while (i < limit) {
        let s: String = sum_of_digits(i, base).clone();
        let divisor: i64 = base_to_int(s.clone(), base);
        if ((i % divisor) == 0) {
            numbers = { let mut _v = numbers.clone(); _v.push(int_to_base(i, base)); _v };
        }
        i = (i + 1);
    }
    return numbers
};
    fn is_harshad_number_in_base(mut num: i64, mut base: i64) -> bool {
    if ((base < 2) || (base > 36)) {
        panic!("{}", String::from("'base' must be between 2 and 36 inclusive"));
    }
    if (num < 0) {
        return false
    }
    let n: String = int_to_base(num, base).clone();
    let d: String = sum_of_digits(num, base).clone();
    let n_val: i64 = base_to_int(n.clone(), base);
    let d_val: i64 = base_to_int(d.clone(), base);
    return ((n_val % d_val) == 0)
};
    fn mochi_main() {
    println!("{}", int_to_base(0, 21));
    println!("{}", int_to_base(23, 2));
    println!("{}", int_to_base(58, 5));
    println!("{}", int_to_base(167, 16));
    println!("{}", sum_of_digits(103, 12));
    println!("{}", sum_of_digits(1275, 4));
    println!("{}", sum_of_digits(6645, 2));
    println!("{:?}", format!("{:?}", harshad_numbers_in_base(15, 2)));
    println!("{:?}", format!("{:?}", harshad_numbers_in_base(12, 34)));
    println!("{:?}", format!("{:?}", harshad_numbers_in_base(12, 4)));
    println!("{}", if is_harshad_number_in_base(18, 10) { 1 } else { 0 });
    println!("{}", if is_harshad_number_in_base(21, 10) { 1 } else { 0 });
    println!("{}", if is_harshad_number_in_base(-21, 5) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
