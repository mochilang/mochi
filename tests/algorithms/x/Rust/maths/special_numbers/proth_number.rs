// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow2(mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * 2);
        i = (i + 1);
    }
    return result
};
    fn proth(mut number: i64) -> i64 {
    if (number < 1) {
        panic!("Input value must be > 0");
    }
    if (number == 1) {
        return 3
    }
    if (number == 2) {
        return 5
    }
    let temp: i64 = (number / 3);
    let mut pow: i64 = 1;
    let mut block_index: i64 = 1;
    while (pow <= temp) {
        pow = (pow * 2);
        block_index = (block_index + 1);
    }
    let mut proth_list: Vec<i64> = vec![3, 5];
    let mut proth_index: i64 = 2;
    let mut increment: i64 = 3;
    let mut block: i64 = 1;
    while (block < block_index) {
        let mut i: i64 = 0;
        while (i < increment) {
            let next_val: i64 = (pow2((block + 1)) + proth_list[(proth_index - 1) as usize]);
            proth_list = { let mut _v = proth_list.clone(); _v.push(next_val); _v };
            proth_index = (proth_index + 1);
            i = (i + 1);
        }
        increment = (increment * 2);
        block = (block + 1);
    }
    return proth_list[(number - 1) as usize]
};
    fn mochi_main() {
    let mut n: i64 = 1;
    while (n <= 10) {
        let value: i64 = proth(n);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "The ", n.to_string()), "th Proth number: "), value.to_string()));
        n = (n + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
