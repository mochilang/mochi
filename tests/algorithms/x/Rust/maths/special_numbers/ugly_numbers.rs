// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ugly_numbers(mut n: i64) -> i64 {
    if (n <= 0) {
        return 1
    }
    let mut ugly_nums: Vec<i64> = vec![];
    ugly_nums = { let mut _v = ugly_nums.clone(); _v.push(1); _v };
    let mut i2: i64 = 0;
    let mut i3: i64 = 0;
    let mut i5: i64 = 0;
    let mut next_2: i64 = 2;
    let mut next_3: i64 = 3;
    let mut next_5: i64 = 5;
    let mut count: i64 = 1;
    while (count < n) {
        let next_num: i64 = if (next_2 < next_3) { if (next_2 < next_5) { next_2 } else { next_5 } } else { if (next_3 < next_5) { next_3 } else { next_5 } };
        ugly_nums = { let mut _v = ugly_nums.clone(); _v.push(next_num); _v };
        if (next_num == next_2) {
            i2 = (i2 + 1);
            next_2 = (ugly_nums[i2 as usize] * 2);
        }
        if (next_num == next_3) {
            i3 = (i3 + 1);
            next_3 = (ugly_nums[i3 as usize] * 3);
        }
        if (next_num == next_5) {
            i5 = (i5 + 1);
            next_5 = (ugly_nums[i5 as usize] * 5);
        }
        count = (count + 1);
    }
    return ugly_nums[((ugly_nums.len() as i64) - 1) as usize]
};
    println!("{}", ugly_numbers(100).to_string());
    println!("{}", ugly_numbers(0).to_string());
    println!("{}", ugly_numbers(20).to_string());
    println!("{}", ugly_numbers(-5).to_string());
    println!("{}", ugly_numbers(200).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
