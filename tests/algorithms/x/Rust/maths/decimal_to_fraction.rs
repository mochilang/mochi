// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
#[derive(Debug, Clone, Default)]
struct Fraction {
    numerator: i64,
    denominator: i64,
}
impl std::fmt::Display for Fraction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"numerator\": {}", self.numerator)?;
        write!(f, ", ")?;
        write!(f, "\"denominator\": {}", self.denominator)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn pow10(mut n: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 10);
        i = (i + 1);
    }
    return result
};
    fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    if (x < 0) {
        x = -x;
    }
    if (y < 0) {
        y = -y;
    }
    while (y != 0) {
        let r: i64 = (x % y);
        x = y;
        y = r;
    }
    return x
};
    fn parse_decimal(s: &str) -> Fraction {
    if ((s.len() as i64) == 0) {
        panic!("invalid number");
    }
    let mut idx: i64 = 0;
    let mut sign: i64 = 1;
    let first: String = { let tmp = &s; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
    if (first.as_str() == "-") {
        sign = -1;
        idx = 1;
    } else if (first.as_str() == "+") {
        idx = 1;
    }
    let mut int_part: String = String::from("").clone();
    while (idx < (s.len() as i64)) {
        let c: String = { let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.clone();
        if ((c.as_str() >= "0") && (c.as_str() <= "9")) {
            int_part = format!("{}{}", int_part, c);
            idx = (idx + 1);
        } else {
            break
        }
    }
    let mut frac_part: String = String::from("").clone();
    if ((idx < (s.len() as i64)) && ({ let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() == ".")) {
        idx = (idx + 1);
        while (idx < (s.len() as i64)) {
            let c: String = { let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.clone();
            if ((c.as_str() >= "0") && (c.as_str() <= "9")) {
                frac_part = format!("{}{}", frac_part, c);
                idx = (idx + 1);
            } else {
                break
            }
        }
    }
    let mut exp: i64 = 0;
    if ((idx < (s.len() as i64)) && (({ let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() == "e") || ({ let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() == "E"))) {
        idx = (idx + 1);
        let mut exp_sign: i64 = 1;
        if ((idx < (s.len() as i64)) && ({ let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() == "-")) {
            exp_sign = -1;
            idx = (idx + 1);
        } else if ((idx < (s.len() as i64)) && ({ let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() == "+")) {
            idx = (idx + 1);
        }
        let mut exp_str: String = String::from("").clone();
        while (idx < (s.len() as i64)) {
            let c: String = { let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.clone();
            if ((c.as_str() >= "0") && (c.as_str() <= "9")) {
                exp_str = format!("{}{}", exp_str, c);
                idx = (idx + 1);
            } else {
                panic!("invalid number");
            }
        }
        if ((exp_str.len() as i64) == 0) {
            panic!("invalid number");
        }
        exp = (exp_sign * { let n: i64 = exp_str.parse().unwrap(); n });
    }
    if (idx != (s.len() as i64)) {
        panic!("invalid number");
    }
    if ((int_part.len() as i64) == 0) {
        int_part = String::from("0");
    }
    let mut num_str: String = format!("{}{}", int_part, frac_part).clone();
    let mut numerator = { let n: i64 = num_str.parse().unwrap(); n };
    if (sign == (0 - 1)) {
        numerator = (0 - numerator);
    }
    let mut denominator: i64 = pow10((frac_part.len() as i64));
    if (exp > 0) {
        numerator = (numerator * pow10(exp));
    } else if (exp < 0) {
        denominator = (denominator * pow10(-exp));
    }
    return Fraction {numerator: numerator, denominator: denominator}
};
    fn reduce(fr: &Fraction) -> Fraction {
    let g: i64 = gcd(fr.numerator, fr.denominator);
    return Fraction {numerator: (fr.numerator / g), denominator: (fr.denominator / g)}
};
    fn decimal_to_fraction_str(s: &str) -> Fraction {
    return reduce(&parse_decimal(s))
};
    fn decimal_to_fraction(mut x: f64) -> Fraction {
    return decimal_to_fraction_str(&x.to_string())
};
    fn assert_fraction(name: &str, fr: &Fraction, mut num: i64, mut den: i64) {
    if ((fr.numerator != num) || (fr.denominator != den)) {
        panic!("{}", name);
    }
};
    fn test_decimal_to_fraction() {
    assert_fraction(&"case1", &decimal_to_fraction(2.0), 2, 1);
    assert_fraction(&"case2", &decimal_to_fraction(89.0), 89, 1);
    assert_fraction(&"case3", &decimal_to_fraction_str(&"67"), 67, 1);
    assert_fraction(&"case4", &decimal_to_fraction_str(&"45.0"), 45, 1);
    assert_fraction(&"case5", &decimal_to_fraction(1.5), 3, 2);
    assert_fraction(&"case6", &decimal_to_fraction_str(&"6.25"), 25, 4);
    assert_fraction(&"case7", &decimal_to_fraction(0.0), 0, 1);
    assert_fraction(&"case8", &decimal_to_fraction(-2.5), -5, 2);
    assert_fraction(&"case9", &decimal_to_fraction(0.125), 1, 8);
    assert_fraction(&"case10", &decimal_to_fraction(1000000.25), 4000001, 4);
    assert_fraction(&"case11", &decimal_to_fraction(1.3333), 13333, 10000);
    assert_fraction(&"case12", &decimal_to_fraction_str(&"1.23e2"), 123, 1);
    assert_fraction(&"case13", &decimal_to_fraction_str(&"0.500"), 1, 2);
};
    fn mochi_main() {
    test_decimal_to_fraction();
    let fr: Fraction = decimal_to_fraction(1.5);
    println!("{}", format!("{}{}", format!("{}{}", fr.numerator.to_string(), "/"), fr.denominator.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
