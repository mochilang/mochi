// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exp_approx(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 20) {
        term = ((term * x) / (i as f64));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    fn softmax(mut vec: Vec<f64>) -> Vec<f64> {
    let mut exps: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (vec.len() as i64)) {
        exps = { let mut _v = exps.clone(); _v.push(exp_approx(vec[i as usize])); _v };
        i = (i + 1);
    }
    let mut total: f64 = 0.0;
    i = 0;
    while (i < (exps.len() as i64)) {
        total = (total + exps[i as usize]);
        i = (i + 1);
    }
    let mut result: Vec<f64> = vec![];
    i = 0;
    while (i < (exps.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push((exps[i as usize] / total)); _v };
        i = (i + 1);
    }
    return result
};
    fn abs_val(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn approx_equal(mut a: f64, mut b: f64) -> bool {
    return (abs_val((a - b)) < 0.0001)
};
    fn test_softmax() {
    let s1: Vec<f64> = softmax(vec![1.0, 2.0, 3.0, 4.0]);
    let mut sum1: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (s1.len() as i64)) {
        sum1 = (sum1 + s1[i as usize]);
        i = (i + 1);
    }
    if !approx_equal(sum1, 1.0) {
        panic!("sum test failed");
    }
    let s2: Vec<f64> = softmax(vec![5.0, 5.0]);
    if !(approx_equal(s2[0 as usize], 0.5) && approx_equal(s2[1 as usize], 0.5)) {
        panic!("equal elements test failed");
    }
    let s3: Vec<f64> = softmax(vec![0.0]);
    if !approx_equal(s3[0 as usize], 1.0) {
        panic!("zero vector test failed");
    }
};
    fn mochi_main() {
    test_softmax();
    println!("{}", format!("{:?}", softmax(vec![1.0, 2.0, 3.0, 4.0])));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
