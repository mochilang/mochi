// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn greatest_common_divisor(mut a: i64, mut b: i64) -> i64 {
    let x: i64 = abs_int(a);
    let y: i64 = abs_int(b);
    if (x == 0) {
        return y
    }
    return greatest_common_divisor((y % x), x)
};
    fn gcd_by_iterative(mut x: i64, mut y: i64) -> i64 {
    let mut a: i64 = abs_int(x);
    let mut b: i64 = abs_int(y);
    while (b != 0) {
        let temp: i64 = b;
        b = (a % b);
        a = temp;
    }
    return a
};
    println!("{}", greatest_common_divisor(24, 40).to_string());
    println!("{}", greatest_common_divisor(1, 1).to_string());
    println!("{}", greatest_common_divisor(1, 800).to_string());
    println!("{}", greatest_common_divisor(11, 37).to_string());
    println!("{}", greatest_common_divisor(3, 5).to_string());
    println!("{}", greatest_common_divisor(16, 4).to_string());
    println!("{}", greatest_common_divisor(-3, 9).to_string());
    println!("{}", greatest_common_divisor(9, -3).to_string());
    println!("{}", greatest_common_divisor(3, -9).to_string());
    println!("{}", greatest_common_divisor(-3, -9).to_string());
    println!("{}", gcd_by_iterative(24, 40).to_string());
    println!("{}", (greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)).to_string());
    println!("{}", gcd_by_iterative(-3, -9).to_string());
    println!("{}", gcd_by_iterative(3, -9).to_string());
    println!("{}", gcd_by_iterative(1, -800).to_string());
    println!("{}", gcd_by_iterative(11, 37).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
