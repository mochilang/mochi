// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_n: i64 = 0;
fn main() {
    unsafe {
        g_n = 50;
                let _start: i64 = _now();
        fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn factorial_float(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 2;
    while (i <= n) {
        result = (result * (i as f64));
        i = (i + 1);
    }
    return result
};
        fn pi(mut n: i64) -> f64 {
    if (n < 1) {
        panic!("Undefined for non-natural numbers");
    }
    let mut iterations: i64 = ((n + 13) / 14);
    let mut constant_term: f64 = (426880.0 * sqrtApprox(10005.0));
    let mut exponential_term: f64 = 1.0;
    let mut linear_term: f64 = 13591409.0;
    let mut partial_sum: f64 = linear_term;
    let mut k: i64 = 1;
    while (k < iterations) {
        let mut k6: i64 = (6 * k);
        let mut k3: i64 = (3 * k);
        let mut fact6k: f64 = factorial_float(k6);
        let mut fact3k: f64 = factorial_float(k3);
        let mut factk: f64 = factorial_float(k);
        let mut multinomial: f64 = (fact6k / (((fact3k * factk) * factk) * factk));
        linear_term = (linear_term + 545140134.0);
        exponential_term = (exponential_term * -262537412640768000.0);
        partial_sum = (partial_sum + ((multinomial * linear_term) / exponential_term));
        k = (k + 1);
    }
    return (constant_term / partial_sum)
};
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "The first ", g_n.to_string()), " digits of pi is: "), pi(g_n).to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
