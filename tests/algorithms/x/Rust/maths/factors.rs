// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn reverse(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = ((xs.len() as i64) - 1);
    while (i >= 0) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i - 1);
    }
    return res
};
    fn factors_of_a_number(mut num: i64) -> Vec<i64> {
    let mut facs: Vec<i64> = vec![];
    if (num < 1) {
        return facs
    }
    let mut small: Vec<i64> = vec![];
    let mut large: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while ((i * i) <= num) {
        if ((num % i) == 0) {
            small = { let mut _v = small.clone(); _v.push(i); _v };
            let d: i64 = (num / i);
            if (d != i) {
                large = { let mut _v = large.clone(); _v.push(d); _v };
            }
        }
        i = (i + 1);
    }
    facs = vec![small.clone(), reverse(large.clone()).clone()].concat();
    return facs
};
    fn run_tests() {
    if (factors_of_a_number(1) != vec![1]) {
        panic!("case1 failed");
    }
    if (factors_of_a_number(5) != vec![1, 5]) {
        panic!("case2 failed");
    }
    if (factors_of_a_number(24) != vec![1, 2, 3, 4, 6, 8, 12, 24]) {
        panic!("case3 failed");
    }
    if (factors_of_a_number(-24) != vec![]) {
        panic!("case4 failed");
    }
};
    fn mochi_main() {
    run_tests();
    println!("{}", format!("{:?}", factors_of_a_number(24)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
