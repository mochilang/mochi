// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        fn sqrt(mut x: f64) -> f64 {
    if (x < 0.0) {
        panic!("sqrt domain error");
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn ln(mut x: f64) -> f64 {
    if (x <= 0.0) {
        panic!("ln domain error");
    }
    let y: f64 = ((x - 1.0) / (x + 1.0));
    let y2: f64 = (y * y);
    let mut term: f64 = y;
    let mut sum: f64 = 0.0;
    let mut k: i64 = 0;
    while (k < 10) {
        let denom: f64 = (((2 * k) + 1) as f64);
        sum = (sum + (term / denom));
        term = (term * y2);
        k = (k + 1);
    }
    return (2.0 * sum)
};
        fn exp_series(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 20) {
        term = ((term * x) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        fn powf(mut base: f64, mut exponent: f64) -> f64 {
    if (base <= 0.0) {
        return 0.0
    }
    return exp_series((exponent * ln(base)))
};
        fn integrand(mut x: f64, mut z: f64) -> f64 {
    return (powf(x, (z - 1.0)) * exp_series(-x))
};
        fn gamma_iterative(mut num: f64) -> f64 {
    if (num <= 0.0) {
        panic!("math domain error");
    }
    let step: f64 = 0.001;
    let limit: f64 = 100.0;
    let mut x: f64 = step;
    let mut total: f64 = 0.0;
    while (x < limit) {
        total = (total + (integrand(x, num) * step));
        x = (x + step);
    }
    return total
};
        fn gamma_recursive(mut num: f64) -> f64 {
    if (num <= 0.0) {
        panic!("math domain error");
    }
    if (num > 171.5) {
        panic!("math range error");
    }
    let int_part: i64 = (num as i64);
    let frac: f64 = (num - (int_part as f64));
    if !((absf(frac) < 0.000001) || (absf((frac - 0.5)) < 0.000001)) {
        panic!("num must be an integer or a half-integer");
    }
    if (absf((num - 0.5)) < 0.000001) {
        return sqrt(g_PI)
    }
    if (absf((num - 1.0)) < 0.000001) {
        return 1.0
    }
    return ((num - 1.0) * gamma_recursive((num - 1.0)))
};
        fn mochi_main() {
    println!("{}", format!("{:?}", gamma_iterative(5.0)));
    println!("{}", format!("{:?}", gamma_recursive(5.0)));
    println!("{}", format!("{:?}", gamma_recursive(0.5)));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
