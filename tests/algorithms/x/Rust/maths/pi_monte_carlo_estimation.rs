// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Point {
    x: f64,
    y: f64,
}
impl std::fmt::Display for Point {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        let mut seed: i64 = 1;
        let mut next_seed = |x: i64| -> i64 {
    return (((x * 1103515245) + 12345) % 2147483648)
};
        let mut rand_unit = || -> f64 {
    seed = next_seed(seed);
    return ((seed as f64) / 2147483648.0)
};
        let mut is_in_unit_circle = |p: Point| -> bool {
    return (((p.x * p.x) + (p.y * p.y)) <= 1.0)
};
        let mut random_unit_square = || -> Point {
    return Point {x: rand_unit(), y: rand_unit()}
};
        let mut estimate_pi = |simulations: i64| -> f64 {
    if (simulations < 1) {
        panic!("At least one simulation is necessary to estimate PI.");
    }
    let mut inside: i64 = 0;
    let mut i: i64 = 0;
    while (i < simulations) {
        let p: Point = random_unit_square();
        if is_in_unit_circle(p.clone()) {
            inside = (inside + 1);
        }
        i = (i + 1);
    }
    return ((4.0 * (inside as f64)) / (simulations as f64))
};
        let mut abs_float = |x: f64| -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        let mut mochi_main = || {
    let n: i64 = 10000;
    let my_pi: f64 = estimate_pi(n);
    let error: f64 = abs_float((my_pi - unsafe { g_PI.clone() }));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "An estimate of PI is ", my_pi.to_string()), " with an error of "), error.to_string()));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
