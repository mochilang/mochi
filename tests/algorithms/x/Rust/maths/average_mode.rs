// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains_int(mut xs: Vec<i64>, mut x: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn contains_string(mut xs: Vec<String>, x: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn count_int(mut xs: Vec<i64>, mut x: i64) -> i64 {
    let mut cnt: i64 = 0;
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == x) {
            cnt = (cnt + 1);
        }
        i = (i + 1);
    }
    return cnt
};
    fn count_string(mut xs: Vec<String>, x: &str) -> i64 {
    let mut cnt: i64 = 0;
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            cnt = (cnt + 1);
        }
        i = (i + 1);
    }
    return cnt
};
    fn sort_int(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = xs.clone();
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (arr.len() as i64)) {
            if (arr[j as usize] < arr[i as usize]) {
                let mut tmp: i64 = arr[i as usize];
                arr[i as usize] = arr[j as usize];
                arr[j as usize] = tmp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn sort_string(mut xs: Vec<String>) -> Vec<String> {
    let mut arr: Vec<String> = xs.clone();
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (arr.len() as i64)) {
            if (arr[j as usize].clone().as_str() < arr[i as usize].clone().as_str()) {
                let mut tmp: String = arr[i as usize].clone().clone();
                arr[i as usize] = arr[j as usize].clone();
                arr[j as usize] = tmp.clone();
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn mode_int(mut lst: Vec<i64>) -> Vec<i64> {
    if ((lst.len() as i64) == 0) {
        return vec![]
    }
    let mut counts: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        counts = { let mut _v = counts.clone(); _v.push(count_int(lst.clone(), lst[i as usize])); _v };
        i = (i + 1);
    }
    let mut max_count: i64 = 0;
    i = 0;
    while (i < (counts.len() as i64)) {
        if (counts[i as usize] > max_count) {
            max_count = counts[i as usize];
        }
        i = (i + 1);
    }
    let mut modes: Vec<i64> = vec![];
    i = 0;
    while (i < (lst.len() as i64)) {
        if (counts[i as usize] == max_count) {
            let mut v: i64 = lst[i as usize];
            if !contains_int(modes.clone(), v) {
                modes = { let mut _v = modes.clone(); _v.push(v); _v };
            }
        }
        i = (i + 1);
    }
    return sort_int(modes.clone())
};
    fn mode_string(mut lst: Vec<String>) -> Vec<String> {
    if ((lst.len() as i64) == 0) {
        return vec![]
    }
    let mut counts: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        counts = { let mut _v = counts.clone(); _v.push(count_string(lst.clone(), &lst[i as usize].clone())); _v };
        i = (i + 1);
    }
    let mut max_count: i64 = 0;
    i = 0;
    while (i < (counts.len() as i64)) {
        if (counts[i as usize] > max_count) {
            max_count = counts[i as usize];
        }
        i = (i + 1);
    }
    let mut modes: Vec<String> = vec![];
    i = 0;
    while (i < (lst.len() as i64)) {
        if (counts[i as usize] == max_count) {
            let mut v: String = lst[i as usize].clone().clone();
            if !contains_string(modes.clone(), &v) {
                modes = { let mut _v = modes.clone(); _v.push(v.clone()); _v };
            }
        }
        i = (i + 1);
    }
    return sort_string(modes.clone())
};
    println!("{:?}", format!("{:?}", mode_int(vec![2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2])));
    println!("{:?}", format!("{:?}", mode_int(vec![3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2])));
    println!("{:?}", format!("{:?}", mode_int(vec![3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2])));
    println!("{:?}", format!("{:?}", mode_string(vec![String::from("x").clone(), String::from("y").clone(), String::from("y").clone(), String::from("z").clone()])));
    println!("{:?}", format!("{:?}", mode_string(vec![String::from("x").clone(), String::from("x").clone(), String::from("y").clone(), String::from("y").clone(), String::from("z").clone()])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
