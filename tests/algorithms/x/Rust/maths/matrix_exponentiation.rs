// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn identity(mut n: i64) -> Vec<Vec<i64>> {
    let mut i: i64 = 0;
    let mut mat: Vec<Vec<i64>> = vec![];
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            }
            j = (j + 1);
        }
        mat = { let mut _v = mat.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return mat
};
    fn matrix_mul(mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let n: i64 = (a.len() as i64);
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            let mut cell: i64 = 0;
            let mut k: i64 = 0;
            while (k < n) {
                cell = (cell + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(cell); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn matrix_pow(mut base: Vec<Vec<i64>>, mut exp: i64) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = identity((base.len() as i64));
    let mut b: Vec<Vec<i64>> = base.clone();
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = matrix_mul(result.clone(), b.clone());
        }
        b = matrix_mul(b.clone(), b.clone());
        e = (e / 2);
    }
    return result
};
    fn fibonacci_with_matrix_exponentiation(mut n: i64, mut f1: i64, mut f2: i64) -> i64 {
    if (n == 1) {
        return f1
    }
    if (n == 2) {
        return f2
    }
    let base: Vec<Vec<i64>> = vec![vec![1, 1].clone(), vec![1, 0].clone()];
    let m: Vec<Vec<i64>> = matrix_pow(base.clone(), (n - 2));
    return ((f2 * m[0 as usize].clone()[0 as usize]) + (f1 * m[0 as usize].clone()[1 as usize]))
};
    fn simple_fibonacci(mut n: i64, mut f1: i64, mut f2: i64) -> i64 {
    if (n == 1) {
        return f1
    }
    if (n == 2) {
        return f2
    }
    let mut a: i64 = f1;
    let mut b: i64 = f2;
    let mut count: i64 = (n - 2);
    while (count > 0) {
        let tmp: i64 = (a + b);
        a = b;
        b = tmp;
        count = (count - 1);
    }
    return b
};
    println!("{}", fibonacci_with_matrix_exponentiation(1, 5, 6).to_string());
    println!("{}", fibonacci_with_matrix_exponentiation(2, 10, 11).to_string());
    println!("{}", fibonacci_with_matrix_exponentiation(13, 0, 1).to_string());
    println!("{}", fibonacci_with_matrix_exponentiation(10, 5, 9).to_string());
    println!("{}", fibonacci_with_matrix_exponentiation(9, 2, 3).to_string());
    println!("{}", simple_fibonacci(1, 5, 6).to_string());
    println!("{}", simple_fibonacci(2, 10, 11).to_string());
    println!("{}", simple_fibonacci(13, 0, 1).to_string());
    println!("{}", simple_fibonacci(10, 5, 9).to_string());
    println!("{}", simple_fibonacci(9, 2, 3).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
