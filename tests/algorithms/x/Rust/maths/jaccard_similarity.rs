// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<String>, value: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == value) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn jaccard_similarity(mut set_a: Vec<String>, mut set_b: Vec<String>, mut alternative_union: bool) -> f64 {
    let mut intersection_len: i64 = 0;
    let mut i: i64 = 0;
    while (i < (set_a.len() as i64)) {
        if contains(set_b.clone(), &set_a[i as usize].clone()) {
            intersection_len = (intersection_len + 1);
        }
        i = (i + 1);
    }
    let mut union_len: i64 = 0;
    if alternative_union {
        union_len = ((set_a.len() as i64) + (set_b.len() as i64));
    } else {
        let mut union_list: Vec<String> = vec![];
        i = 0;
        while (i < (set_a.len() as i64)) {
            let val_a: String = set_a[i as usize].clone().clone();
            if !contains(union_list.clone(), &val_a) {
                union_list = { let mut _v = union_list.clone(); _v.push(val_a.clone()); _v };
            }
            i = (i + 1);
        }
        i = 0;
        while (i < (set_b.len() as i64)) {
            let val_b: String = set_b[i as usize].clone().clone();
            if !contains(union_list.clone(), &val_b) {
                union_list = { let mut _v = union_list.clone(); _v.push(val_b.clone()); _v };
            }
            i = (i + 1);
        }
        union_len = (union_list.len() as i64);
    }
    return ((1.0 * (intersection_len as f64)) / (union_len as f64))
};
    fn mochi_main() {
    let set_a: Vec<String> = vec![String::from("a").clone().clone(), String::from("b").clone().clone(), String::from("c").clone().clone(), String::from("d").clone().clone(), String::from("e").clone().clone()];
    let set_b: Vec<String> = vec![String::from("c").clone().clone(), String::from("d").clone().clone(), String::from("e").clone().clone(), String::from("f").clone().clone(), String::from("h").clone().clone(), String::from("i").clone().clone()];
    println!("{}", format!("{:?}", jaccard_similarity(set_a.clone(), set_b.clone(), false)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
