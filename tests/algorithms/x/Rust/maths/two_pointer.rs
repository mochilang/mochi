// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn two_pointer(mut nums: Vec<i64>, mut target: i64) -> Vec<i64> {
    let mut i: i64 = 0;
    let mut j: i64 = ((nums.len() as i64) - 1);
    while (i < j) {
        let s: i64 = (nums[i as usize] + nums[j as usize]);
        if (s == target) {
            return vec![i, j]
        }
        if (s < target) {
            i = (i + 1);
        } else {
            j = (j - 1);
        }
    }
    return vec![]
};
    fn test_two_pointer() {
    if (two_pointer(vec![2, 7, 11, 15], 9) != vec![0, 1]) {
        panic!("case1");
    }
    if (two_pointer(vec![2, 7, 11, 15], 17) != vec![0, 3]) {
        panic!("case2");
    }
    if (two_pointer(vec![2, 7, 11, 15], 18) != vec![1, 2]) {
        panic!("case3");
    }
    if (two_pointer(vec![2, 7, 11, 15], 26) != vec![2, 3]) {
        panic!("case4");
    }
    if (two_pointer(vec![1, 3, 3], 6) != vec![1, 2]) {
        panic!("case5");
    }
    if ((two_pointer(vec![2, 7, 11, 15], 8).len() as i64) != 0) {
        panic!("case6");
    }
    if ((two_pointer(vec![0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 19).len() as i64) != 0) {
        panic!("case7");
    }
    if ((two_pointer(vec![1, 2, 3], 6).len() as i64) != 0) {
        panic!("case8");
    }
};
    fn mochi_main() {
    test_two_pointer();
    println!("{:?}", format!("{:?}", two_pointer(vec![2, 7, 11, 15], 9)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
