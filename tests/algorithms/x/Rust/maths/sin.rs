// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        fn pow(mut x: f64, mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * x);
        i = (i + 1);
    }
    return result
};
        fn factorial(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 2;
    while (i <= n) {
        result = (result * (i as f64));
        i = (i + 1);
    }
    return result
};
        fn radians(mut deg: f64) -> f64 {
    return ((deg * unsafe { g_PI.clone() }) / 180.0)
};
        fn taylor_sin(mut angle_in_degrees: f64, mut accuracy: i64, mut rounded_values_count: i64) -> f64 {
    let k: f64 = floor((angle_in_degrees / 360.0));
    let mut angle: f64 = (angle_in_degrees - (k * 360.0));
    let angle_in_radians: f64 = radians(angle);
    let mut result: f64 = angle_in_radians;
    let mut a: i64 = 3;
    let mut sign: f64 = -1.0;
    let mut i: i64 = 0;
    while (i < accuracy) {
        result = (result + ((sign * pow(angle_in_radians, a)) / factorial(a)));
        sign = -sign;
        a = (a + 2);
        i = (i + 1);
    }
    return result
};
        fn test_sin() {
    let eps: f64 = 0.0000001;
    if (abs((taylor_sin(0.0, 18, 10) - 0.0)) > eps) {
        panic!("sin(0) failed");
    }
    if (abs((taylor_sin(90.0, 18, 10) - 1.0)) > eps) {
        panic!("sin(90) failed");
    }
    if (abs((taylor_sin(180.0, 18, 10) - 0.0)) > eps) {
        panic!("sin(180) failed");
    }
    if (abs((taylor_sin(270.0, 18, 10) - -1.0)) > eps) {
        panic!("sin(270) failed");
    }
};
        fn mochi_main() {
    test_sin();
    let res: f64 = taylor_sin(64.0, 18, 10);
    println!("{}", format!("{:?}", res));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
