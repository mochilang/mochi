// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ln(mut x: f64) -> f64 {
    let t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut k: i64 = 1;
    while (k <= 99) {
        sum = (sum + (term / (k as f64)));
        term = ((term * t) * t);
        k = (k + 2);
    }
    return (2.0 * sum)
};
    fn log10(mut x: f64) -> f64 {
    return (ln(x) / ln(10.0))
};
    fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn res(mut x: i64, mut y: i64) -> f64 {
    if (x == 0) {
        return 0.0
    }
    if (y == 0) {
        return 1.0
    }
    if (x < 0) {
        panic!("math domain error");
    }
    return ((y as f64) * log10((x as f64)))
};
    fn test_res() {
    if (absf((res(5, 7) - 4.892790030352132)) > 0.0000001) {
        panic!("res(5,7) failed");
    }
    if (res(0, 5) != 0.0) {
        panic!("res(0,5) failed");
    }
    if (res(3, 0) != 1.0) {
        panic!("res(3,0) failed");
    }
};
    fn compare(mut x1: i64, mut y1: i64, mut x2: i64, mut y2: i64) -> String {
    let r1: f64 = res(x1, y1);
    let r2: f64 = res(x2, y2);
    if (r1 > r2) {
        return format!("{}{}", format!("{}{}", format!("{}{}", "Largest number is ", x1.to_string()), " ^ "), y1.to_string())
    }
    if (r2 > r1) {
        return format!("{}{}", format!("{}{}", format!("{}{}", "Largest number is ", x2.to_string()), " ^ "), y2.to_string())
    }
    return String::from("Both are equal").clone()
};
    test_res();
    println!("{}", compare(5, 7, 4, 8));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
