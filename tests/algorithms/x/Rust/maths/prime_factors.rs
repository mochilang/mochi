// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn prime_factors(mut n: i64) -> Vec<i64> {
    if (n < 2) {
        return vec![]
    }
    let mut num: i64 = n;
    let mut i: i64 = 2;
    let mut factors: Vec<i64> = vec![];
    while ((i * i) <= num) {
        if ((num % i) == 0) {
            factors = { let mut _v = factors.clone(); _v.push(i); _v };
            num = (num / i);
        } else {
            i = (i + 1);
        }
    }
    if (num > 1) {
        factors = { let mut _v = factors.clone(); _v.push(num); _v };
    }
    return factors
};
    fn list_eq(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    let mut test_prime_factors = || {
    if !list_eq(prime_factors(0), vec![]) {
        panic!("prime_factors(0) failed");
    }
    if !list_eq(prime_factors(100), vec![2, 2, 5, 5]) {
        panic!("prime_factors(100) failed");
    }
    if !list_eq(prime_factors(2560), vec![2, 2, 2, 2, 2, 2, 2, 2, 2, 5]) {
        panic!("prime_factors(2560) failed");
    }
    if !list_eq(prime_factors(97), vec![97]) {
        panic!("prime_factors(97) failed");
    }
};
    let mut mochi_main = || {
    test_prime_factors();
    println!("{}", format!("{:?}", prime_factors(100)));
    println!("{}", format!("{:?}", prime_factors(2560)));
    println!("{}", format!("{:?}", prime_factors(97)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
