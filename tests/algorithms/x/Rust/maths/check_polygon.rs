// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_nums: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_nums = vec![3.0, 7.0, 13.0, 2.0];
                let _start: i64 = _now();
        fn check_polygon(mut nums: Vec<f64>) -> bool {
    if ((nums.len() as i64) < 2) {
        panic!("Monogons and Digons are not polygons in the Euclidean space");
    }
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        if (nums[i as usize] <= 0.0) {
            panic!("All values must be greater than 0");
        }
        i = (i + 1);
    }
    let mut total: f64 = 0.0;
    let mut max_side: f64 = 0.0;
    i = 0;
    while (i < (nums.len() as i64)) {
        let mut v: f64 = nums[i as usize];
        total = (total + v);
        if (v > max_side) {
            max_side = v;
        }
        i = (i + 1);
    }
    return (max_side < (total - max_side))
};
        println!("{}", check_polygon(vec![6.0, 10.0, 5.0]).to_string());
        println!("{}", check_polygon(vec![3.0, 7.0, 13.0, 2.0]).to_string());
        println!("{}", check_polygon(vec![1.0, 4.3, 5.2, 12.2]).to_string());
        let _: bool = check_polygon(g_nums.clone());
        println!("{}", format!("{:?}", g_nums));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
