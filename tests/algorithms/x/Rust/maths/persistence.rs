// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn multiplicative_persistence(mut num: i64) -> i64 {
    if (num < 0) {
        panic!("multiplicative_persistence() does not accept negative values");
    }
    let mut steps: i64 = 0;
    let mut n: i64 = num;
    while (n >= 10) {
        let mut product: i64 = 1;
        let mut temp: i64 = n;
        while (temp > 0) {
            let digit: i64 = (temp % 10);
            product = (product * digit);
            temp = (temp / 10);
        }
        n = product;
        steps = (steps + 1);
    }
    return steps
};
    fn additive_persistence(mut num: i64) -> i64 {
    if (num < 0) {
        panic!("additive_persistence() does not accept negative values");
    }
    let mut steps: i64 = 0;
    let mut n: i64 = num;
    while (n >= 10) {
        let mut total: i64 = 0;
        let mut temp: i64 = n;
        while (temp > 0) {
            let digit: i64 = (temp % 10);
            total = (total + digit);
            temp = (temp / 10);
        }
        n = total;
        steps = (steps + 1);
    }
    return steps
};
    let mut test_persistence = || {
    if (multiplicative_persistence(217) != 2) {
        panic!("multiplicative_persistence failed");
    }
    if (additive_persistence(199) != 3) {
        panic!("additive_persistence failed");
    }
};
    let mut mochi_main = || {
    test_persistence();
    println!("{}", multiplicative_persistence(217).to_string());
    println!("{}", additive_persistence(199).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
