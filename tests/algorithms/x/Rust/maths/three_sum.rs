// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bubble_sort(mut nums: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = nums.clone();
    let mut n: i64 = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let temp: i64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = temp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn three_sum(mut nums: Vec<i64>) -> Vec<Vec<i64>> {
    let sorted: Vec<i64> = bubble_sort(nums.clone());
    let mut res: Vec<Vec<i64>> = vec![];
    let n: i64 = (sorted.len() as i64);
    let mut i: i64 = 0;
    while (i < (n - 2)) {
        if ((i == 0) || (sorted[i as usize] != sorted[(i - 1) as usize])) {
            let mut low: i64 = (i + 1);
            let mut high: i64 = (n - 1);
            let c: i64 = (0 - sorted[i as usize]);
            while (low < high) {
                let s: i64 = (sorted[low as usize] + sorted[high as usize]);
                if (s == c) {
                    let triple: Vec<i64> = vec![sorted[i as usize], sorted[low as usize], sorted[high as usize]];
                    res = { let mut _v = res.clone(); _v.push(triple.clone()); _v };
                    while ((low < high) && (sorted[low as usize] == sorted[(low + 1) as usize])) {
                        low = (low + 1);
                    }
                    while ((low < high) && (sorted[high as usize] == sorted[(high - 1) as usize])) {
                        high = (high - 1);
                    }
                    low = (low + 1);
                    high = (high - 1);
                } else if (s < c) {
                    low = (low + 1);
                } else {
                    high = (high - 1);
                }
            }
        }
        i = (i + 1);
    }
    return res
};
    println!("{}", format!("{:?}", three_sum(vec![-1, 0, 1, 2, -1, -4])));
    println!("{}", format!("{:?}", three_sum(vec![1, 2, 3, 4])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
