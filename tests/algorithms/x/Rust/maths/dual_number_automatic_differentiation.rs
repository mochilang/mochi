// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Dual {
    real: f64,
    duals: Vec<f64>,
}
impl std::fmt::Display for Dual {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"real\": {}", self.real)?;
        write!(f, ", ")?;
        write!(f, "\"duals\": {:?}", self.duals)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_dual(mut real: f64, mut rank: i64) -> Dual {
    let mut ds: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < rank) {
        ds = { let mut _v = ds.clone(); _v.push(1.0); _v };
        i = (i + 1);
    }
    return Dual {real: real, duals: ds}
};
    fn dual_from_list(mut real: f64, mut ds: Vec<f64>) -> Dual {
    return Dual {real: real, duals: ds}
};
    fn dual_add(a: &Dual, b: &Dual) -> Dual {
    let mut s_dual: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.duals.clone().len() as i64)) {
        s_dual = { let mut _v = s_dual.clone(); _v.push(a.duals.clone()[i as usize]); _v };
        i = (i + 1);
    }
    let mut o_dual: Vec<f64> = vec![];
    let mut j: i64 = 0;
    while (j < (b.duals.clone().len() as i64)) {
        o_dual = { let mut _v = o_dual.clone(); _v.push(b.duals.clone()[j as usize]); _v };
        j = (j + 1);
    }
    if ((s_dual.len() as i64) > (o_dual.len() as i64)) {
        let mut diff: i64 = ((s_dual.len() as i64) - (o_dual.len() as i64));
        let mut k: i64 = 0;
        while (k < diff) {
            o_dual = { let mut _v = o_dual.clone(); _v.push(1.0); _v };
            k = (k + 1);
        }
    } else if ((s_dual.len() as i64) < (o_dual.len() as i64)) {
        let mut diff2: i64 = ((o_dual.len() as i64) - (s_dual.len() as i64));
        let mut k2: i64 = 0;
        while (k2 < diff2) {
            s_dual = { let mut _v = s_dual.clone(); _v.push(1.0); _v };
            k2 = (k2 + 1);
        }
    }
    let mut new_duals: Vec<f64> = vec![];
    let mut idx: i64 = 0;
    while (idx < (s_dual.len() as i64)) {
        new_duals = { let mut _v = new_duals.clone(); _v.push((s_dual[idx as usize] + o_dual[idx as usize])); _v };
        idx = (idx + 1);
    }
    return Dual {real: (a.real + b.real), duals: new_duals}
};
    fn dual_add_real(a: &Dual, mut b: f64) -> Dual {
    let mut ds: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.duals.clone().len() as i64)) {
        ds = { let mut _v = ds.clone(); _v.push(a.duals.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return Dual {real: (a.real + b), duals: ds}
};
    fn dual_mul(a: &Dual, b: &Dual) -> Dual {
    let new_len: i64 = (((a.duals.clone().len() as i64) + (b.duals.clone().len() as i64)) + 1);
    let mut new_duals: Vec<f64> = vec![];
    let mut idx: i64 = 0;
    while (idx < new_len) {
        new_duals = { let mut _v = new_duals.clone(); _v.push(0.0); _v };
        idx = (idx + 1);
    }
    let mut i: i64 = 0;
    while (i < (a.duals.clone().len() as i64)) {
        let mut j: i64 = 0;
        while (j < (b.duals.clone().len() as i64)) {
            let pos: i64 = ((i + j) + 1);
            let val: f64 = (new_duals[pos as usize] + (a.duals.clone()[i as usize] * b.duals.clone()[j as usize]));
            new_duals[pos as usize] = val;
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut k: i64 = 0;
    while (k < (a.duals.clone().len() as i64)) {
        let val: f64 = (new_duals[k as usize] + (a.duals.clone()[k as usize] * b.real));
        new_duals[k as usize] = val;
        k = (k + 1);
    }
    let mut l: i64 = 0;
    while (l < (b.duals.clone().len() as i64)) {
        let val: f64 = (new_duals[l as usize] + (b.duals.clone()[l as usize] * a.real));
        new_duals[l as usize] = val;
        l = (l + 1);
    }
    return Dual {real: (a.real * b.real), duals: new_duals}
};
    fn dual_mul_real(a: &Dual, mut b: f64) -> Dual {
    let mut ds: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.duals.clone().len() as i64)) {
        ds = { let mut _v = ds.clone(); _v.push((a.duals.clone()[i as usize] * b)); _v };
        i = (i + 1);
    }
    return Dual {real: (a.real * b), duals: ds}
};
    fn dual_pow(x: &Dual, mut n: i64) -> Dual {
    if (n < 0) {
        panic!("power must be a positive integer");
    }
    if (n == 0) {
        return Dual {real: 1.0, duals: vec![]}
    }
    let mut res: Dual = x.clone();
    let mut i: i64 = 1;
    while (i < n) {
        res = dual_mul(&res, x);
        i = (i + 1);
    }
    return res
};
    fn factorial(mut n: i64) -> f64 {
    let mut res: f64 = 1.0;
    let mut i: i64 = 2;
    while (i <= n) {
        res = (res * (i as f64));
        i = (i + 1);
    }
    return res
};
    fn differentiate(func: &mut impl FnMut(Dual) -> Dual, mut position: f64, mut order: i64) -> f64 {
    let d: Dual = make_dual(position, 1);
    let result = func(d);
    if (order == 0) {
        return result.real
    }
    return ((result.duals[(order - 1) as usize] as f64) * factorial(order))
};
    fn test_differentiate() {
    let mut f1 = move |x: Dual| -> Dual {
    return dual_pow(&x, 2)
};
    if (differentiate(&mut f1, 2.0, 2) != 2.0) {
        panic!("f1 failed");
    }
    let mut f2 = move |x: Dual| -> Dual {
    return dual_mul(&dual_pow(&x, 2), &dual_pow(&x, 4))
};
    if (differentiate(&mut f2, 9.0, 2) != 196830.0) {
        panic!("f2 failed");
    }
    let mut f3 = move |y: Dual| -> Dual {
    return dual_mul_real(&dual_pow(&dual_add_real(&y, 3.0), 6), 0.5)
};
    if (differentiate(&mut f3, 3.5, 4) != 7605.0) {
        panic!("f3 failed");
    }
    let mut f4 = move |y: Dual| -> Dual {
    return dual_pow(&y, 2)
};
    if (differentiate(&mut f4, 4.0, 3) != 0.0) {
        panic!("f4 failed");
    }
};
    fn mochi_main() {
    test_differentiate();
    let mut f = move |y: Dual| -> Dual {
    return dual_mul(&dual_pow(&y, 2), &dual_pow(&y, 4))
};
    let res: f64 = differentiate(&mut f, 9.0, 2);
    println!("{}", format!("{:?}", res));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
