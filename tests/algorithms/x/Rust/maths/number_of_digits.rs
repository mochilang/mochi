// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    let mut num_digits = |n: i64| -> i64 {
    let mut x: i64 = abs_int(n);
    let mut digits: i64 = 1;
    while (x >= 10) {
        x = (x / 10);
        digits = (digits + 1);
    }
    return digits
};
    let mut num_digits_fast = |n: i64| -> i64 {
    let mut x: i64 = abs_int(n);
    let mut digits: i64 = 1;
    let mut power: i64 = 10;
    while (x >= power) {
        power = (power * 10);
        digits = (digits + 1);
    }
    return digits
};
    fn num_digits_faster(mut n: i64) -> i64 {
    let s = abs_int(n).to_string();
    return (s.len() as i64)
};
    let mut test_num_digits = || {
    if (num_digits(12345) != 5) {
        panic!("num_digits 12345 failed");
    }
    if (num_digits(123) != 3) {
        panic!("num_digits 123 failed");
    }
    if (num_digits(0) != 1) {
        panic!("num_digits 0 failed");
    }
    if (num_digits(-1) != 1) {
        panic!("num_digits -1 failed");
    }
    if (num_digits(-123456) != 6) {
        panic!("num_digits -123456 failed");
    }
    if (num_digits_fast(12345) != 5) {
        panic!("num_digits_fast 12345 failed");
    }
    if (num_digits_fast(123) != 3) {
        panic!("num_digits_fast 123 failed");
    }
    if (num_digits_fast(0) != 1) {
        panic!("num_digits_fast 0 failed");
    }
    if (num_digits_fast(-1) != 1) {
        panic!("num_digits_fast -1 failed");
    }
    if (num_digits_fast(-123456) != 6) {
        panic!("num_digits_fast -123456 failed");
    }
    if (num_digits_faster(12345) != 5) {
        panic!("num_digits_faster 12345 failed");
    }
    if (num_digits_faster(123) != 3) {
        panic!("num_digits_faster 123 failed");
    }
    if (num_digits_faster(0) != 1) {
        panic!("num_digits_faster 0 failed");
    }
    if (num_digits_faster(-1) != 1) {
        panic!("num_digits_faster -1 failed");
    }
    if (num_digits_faster(-123456) != 6) {
        panic!("num_digits_faster -123456 failed");
    }
};
    let mut mochi_main = || {
    test_num_digits();
    println!("{}", num_digits(12345).to_string());
    println!("{}", num_digits_fast(12345).to_string());
    println!("{}", num_digits_faster(12345).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
