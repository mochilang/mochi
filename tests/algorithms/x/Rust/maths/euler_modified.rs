// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ceil_float(mut x: f64) -> i64 {
    let i: i64 = (x as i64);
    if (x > (i as f64)) {
        return (i + 1)
    }
    return i
};
    fn exp_approx(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 20) {
        term = ((term * x) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
    fn euler_modified(ode_func: &mut impl FnMut(f64, f64) -> f64, mut y0: f64, mut x0: f64, mut step: f64, mut x_end: f64) -> Vec<f64> {
    let n: i64 = ceil_float(((x_end - x0) / step));
    let mut y: Vec<f64> = vec![y0];
    let mut x: f64 = x0;
    let mut k: i64 = 0;
    while (k < n) {
        let y_predict: f64 = (y[k as usize] + (step * ode_func(x, y[k as usize])));
        let slope1 = ode_func(x, y[k as usize]);
        let slope2 = ode_func((x + step), y_predict);
        let y_next: f64 = (y[k as usize] + ((step / 2.0) * ((slope1 + slope2) as f64)));
        y = { let mut _v = y.clone(); _v.push(y_next); _v };
        x = (x + step);
        k = (k + 1);
    }
    return y
};
    fn f1(mut x: f64, mut y: f64) -> f64 {
    return (((-2.0 * x) * y) * y)
};
    fn f2(mut x: f64, mut y: f64) -> f64 {
    return ((-2.0 * y) + (((x * x) * x) * exp_approx((-2.0 * x))))
};
    fn mochi_main() {
    let y1: Vec<f64> = euler_modified(&mut f1, 1.0, 0.0, 0.2, 1.0);
    println!("{}", format!("{:?}", y1[((y1.len() as i64) - 1) as usize]));
    let y2: Vec<f64> = euler_modified(&mut f2, 1.0, 0.0, 0.1, 0.3);
    println!("{}", format!("{:?}", y2[((y2.len() as i64) - 1) as usize]));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
