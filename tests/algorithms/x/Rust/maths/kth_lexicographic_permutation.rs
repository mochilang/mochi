// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn remove_at(mut xs: Vec<i64>, mut idx: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i != idx) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn kth_permutation(mut k: i64, mut n: i64) -> Vec<i64> {
    if (n <= 0) {
        panic!("n must be positive");
    }
    let mut factorials: Vec<i64> = vec![1];
    let mut i: i64 = 2;
    while (i < n) {
        factorials = { let mut _v = factorials.clone(); _v.push((factorials[((factorials.len() as i64) - 1) as usize] * i)); _v };
        i = (i + 1);
    }
    let total: i64 = (factorials[((factorials.len() as i64) - 1) as usize] * n);
    if ((k < 0) || (k >= total)) {
        panic!("k out of bounds");
    }
    let mut elements: Vec<i64> = vec![];
    let mut e: i64 = 0;
    while (e < n) {
        elements = { let mut _v = elements.clone(); _v.push(e); _v };
        e = (e + 1);
    }
    let mut permutation: Vec<i64> = vec![];
    let mut idx: i64 = ((factorials.len() as i64) - 1);
    while (idx >= 0) {
        let factorial: i64 = factorials[idx as usize];
        let number: i64 = (k / factorial);
        k = (k % factorial);
        permutation = { let mut _v = permutation.clone(); _v.push(elements[number as usize]); _v };
        elements = remove_at(elements.clone(), number);
        idx = (idx - 1);
    }
    permutation = { let mut _v = permutation.clone(); _v.push(elements[0 as usize]); _v };
    return permutation
};
    fn list_equal(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn list_to_string(mut xs: Vec<i64>) -> String {
    if ((xs.len() as i64) == 0) {
        return String::from("[]")
    }
    let mut s: String = format!("{}{}", "[", xs[0 as usize].to_string()).clone();
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, ", "), xs[i as usize].to_string());
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn test_kth_permutation() {
    let expected1: Vec<i64> = vec![0, 1, 2, 3, 4];
    let res1: Vec<i64> = kth_permutation(0, 5);
    if !list_equal(res1.clone(), expected1.clone()) {
        panic!("test case 1 failed");
    }
    let expected2: Vec<i64> = vec![1, 3, 0, 2];
    let res2: Vec<i64> = kth_permutation(10, 4);
    if !list_equal(res2.clone(), expected2.clone()) {
        panic!("test case 2 failed");
    }
};
    fn mochi_main() {
    test_kth_permutation();
    let res: Vec<i64> = kth_permutation(10, 4);
    println!("{}", list_to_string(res.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
