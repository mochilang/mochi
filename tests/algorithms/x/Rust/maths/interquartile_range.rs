// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bubble_sort(mut nums: Vec<f64>) -> Vec<f64> {
    let mut arr: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(nums[i as usize]); _v };
        i = (i + 1);
    }
    let mut n: i64 = (arr.len() as i64);
    let mut a: i64 = 0;
    while (a < n) {
        let mut b: i64 = 0;
        while (b < ((n - a) - 1)) {
            if (arr[b as usize] > arr[(b + 1) as usize]) {
                let temp: f64 = arr[b as usize];
                arr[b as usize] = arr[(b + 1) as usize];
                arr[(b + 1) as usize] = temp;
            }
            b = (b + 1);
        }
        a = (a + 1);
    }
    return arr
};
    fn find_median(mut nums: Vec<f64>) -> f64 {
    let length: i64 = (nums.len() as i64);
    let div: i64 = (length / 2);
    let r#mod: i64 = (length % 2);
    if (r#mod != 0) {
        return nums[div as usize]
    }
    return ((nums[div as usize] + nums[(div - 1) as usize]) / 2.0)
};
    fn interquartile_range(mut nums: Vec<f64>) -> f64 {
    if ((nums.len() as i64) == 0) {
        panic!("The list is empty. Provide a non-empty list.");
    }
    let sorted: Vec<f64> = bubble_sort(nums.clone());
    let length: i64 = (sorted.len() as i64);
    let div: i64 = (length / 2);
    let r#mod: i64 = (length % 2);
    let mut lower: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < div) {
        lower = { let mut _v = lower.clone(); _v.push(sorted[i as usize]); _v };
        i = (i + 1);
    }
    let mut upper: Vec<f64> = vec![];
    let mut j: i64 = (div + r#mod);
    while (j < length) {
        upper = { let mut _v = upper.clone(); _v.push(sorted[j as usize]); _v };
        j = (j + 1);
    }
    let q1: f64 = find_median(lower.clone());
    let q3: f64 = find_median(upper.clone());
    return (q3 - q1)
};
    fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn float_equal(mut a: f64, mut b: f64) -> bool {
    let diff: f64 = absf((a - b));
    return (diff < 0.0000001)
};
    fn test_interquartile_range() {
    if !float_equal(interquartile_range(vec![4.0, 1.0, 2.0, 3.0, 2.0]), 2.0) {
        panic!("interquartile_range case1 failed");
    }
    if !float_equal(interquartile_range(vec![-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0) {
        panic!("interquartile_range case2 failed");
    }
    if !float_equal(interquartile_range(vec![-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2) {
        panic!("interquartile_range case3 failed");
    }
    if !float_equal(interquartile_range(vec![0.0, 0.0, 0.0, 0.0, 0.0]), 0.0) {
        panic!("interquartile_range case4 failed");
    }
};
    fn mochi_main() {
    test_interquartile_range();
    println!("{}", interquartile_range(vec![4.0, 1.0, 2.0, 3.0, 2.0]).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
