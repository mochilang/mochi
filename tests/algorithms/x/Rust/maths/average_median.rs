// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bubble_sort(mut nums: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = nums.clone();
    let mut n: i64 = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            let mut a: i64 = arr[j as usize];
            let mut b: i64 = arr[(j + 1) as usize];
            if (a > b) {
                arr[j as usize] = b;
                arr[(j + 1) as usize] = a;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn median(mut nums: Vec<i64>) -> f64 {
    let mut sorted_list: Vec<i64> = bubble_sort(nums.clone());
    let mut length: i64 = (sorted_list.len() as i64);
    let mut mid_index: i64 = (length / 2);
    if ((length % 2) == 0) {
        return (((sorted_list[mid_index as usize] + sorted_list[(mid_index - 1) as usize]) as f64) / 2.0)
    } else {
        return (sorted_list[mid_index as usize] as f64)
    }
};
    println!("{}", median(vec![0]).to_string());
    println!("{}", median(vec![4, 1, 3, 2]).to_string());
    println!("{}", median(vec![2, 70, 6, 50, 20, 8, 4]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
