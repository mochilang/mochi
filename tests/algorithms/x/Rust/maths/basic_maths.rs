// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow_int(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn prime_factors(mut n: i64) -> Vec<i64> {
    if (n <= 0) {
        panic!("Only positive integers have prime factors");
    }
    let mut num: i64 = n;
    let mut pf: Vec<i64> = vec![];
    while ((num % 2) == 0) {
        pf = { let mut _v = pf.clone(); _v.push(2); _v };
        num = (num / 2);
    }
    let mut i: i64 = 3;
    while ((i * i) <= num) {
        while ((num % i) == 0) {
            pf = { let mut _v = pf.clone(); _v.push(i); _v };
            num = (num / i);
        }
        i = (i + 2);
    }
    if (num > 2) {
        pf = { let mut _v = pf.clone(); _v.push(num); _v };
    }
    return pf
};
    fn number_of_divisors(mut n: i64) -> i64 {
    if (n <= 0) {
        panic!("Only positive numbers are accepted");
    }
    let mut num: i64 = n;
    let mut div: i64 = 1;
    let mut temp: i64 = 1;
    while ((num % 2) == 0) {
        temp = (temp + 1);
        num = (num / 2);
    }
    div = (div * temp);
    let mut i: i64 = 3;
    while ((i * i) <= num) {
        temp = 1;
        while ((num % i) == 0) {
            temp = (temp + 1);
            num = (num / i);
        }
        div = (div * temp);
        i = (i + 2);
    }
    if (num > 1) {
        div = (div * 2);
    }
    return div
};
    fn sum_of_divisors(mut n: i64) -> i64 {
    if (n <= 0) {
        panic!("Only positive numbers are accepted");
    }
    let mut num: i64 = n;
    let mut s: i64 = 1;
    let mut temp: i64 = 1;
    while ((num % 2) == 0) {
        temp = (temp + 1);
        num = (num / 2);
    }
    if (temp > 1) {
        s = (s * ((pow_int(2, temp) - 1) / (2 - 1)));
    }
    let mut i: i64 = 3;
    while ((i * i) <= num) {
        temp = 1;
        while ((num % i) == 0) {
            temp = (temp + 1);
            num = (num / i);
        }
        if (temp > 1) {
            s = (s * ((pow_int(i, temp) - 1) / (i - 1)));
        }
        i = (i + 2);
    }
    return s
};
    fn contains(mut arr: Vec<i64>, mut x: i64) -> bool {
    let mut idx: i64 = 0;
    while (idx < (arr.len() as i64)) {
        if (arr[idx as usize] == x) {
            return true
        }
        idx = (idx + 1);
    }
    return false
};
    fn unique(mut arr: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut idx: i64 = 0;
    while (idx < (arr.len() as i64)) {
        let mut v: i64 = arr[idx as usize];
        if !contains(result.clone(), v) {
            result = { let mut _v = result.clone(); _v.push(v); _v };
        }
        idx = (idx + 1);
    }
    return result
};
    fn euler_phi(mut n: i64) -> i64 {
    if (n <= 0) {
        panic!("Only positive numbers are accepted");
    }
    let mut s: i64 = n;
    let mut factors: Vec<i64> = unique(prime_factors(n));
    let mut idx: i64 = 0;
    while (idx < (factors.len() as i64)) {
        let mut x: i64 = factors[idx as usize];
        s = ((s / x) * (x - 1));
        idx = (idx + 1);
    }
    return s
};
    println!("{}", format!("{:?}", prime_factors(100)));
    println!("{}", number_of_divisors(100).to_string());
    println!("{}", sum_of_divisors(100).to_string());
    println!("{}", euler_phi(100).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
