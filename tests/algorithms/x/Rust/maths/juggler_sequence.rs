// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn to_float(mut x: i64) -> f64 {
    return ((x as f64) * 1.0)
};
    fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn floor(mut x: f64) -> i64 {
    let mut n: i64 = 0;
    let mut y: f64 = x;
    while (y >= 1.0) {
        y = (y - 1.0);
        n = (n + 1);
    }
    return n
};
    fn juggler_sequence(mut n: i64) -> Vec<i64> {
    if (n < 1) {
        panic!("number must be a positive integer");
    }
    let mut seq: Vec<i64> = vec![n];
    let mut current: i64 = n;
    while (current != 1) {
        if ((current % 2) == 0) {
            current = floor(sqrt(to_float(current)));
        } else {
            let r: f64 = sqrt(to_float(current));
            current = floor(((r * r) * r));
        }
        seq = { let mut _v = seq.clone(); _v.push(current); _v };
    }
    return seq
};
    println!("{}", format!("{:?}", juggler_sequence(3)));
    println!("{}", format!("{:?}", juggler_sequence(10)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
