// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct QR {
    q: Vec<Vec<f64>>,
    r: Vec<Vec<f64>>,
}
impl std::fmt::Display for QR {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"q\": {:?}", self.q)?;
        write!(f, ", ")?;
        write!(f, "\"r\": {:?}", self.r)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn sqrt_approx(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn sign(mut x: f64) -> f64 {
    if (x >= 0.0) {
        return 1.0
    } else {
        return -1.0
    }
};
    let mut vector_norm = |v: Vec<f64>| -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        sum = (sum + (v[i as usize] * v[i as usize]));
        i = (i + 1);
    }
    let n: f64 = sqrt_approx(sum);
    return n
};
    fn identity_matrix(mut n: i64) -> Vec<Vec<f64>> {
    let mut mat: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1.0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
            j = (j + 1);
        }
        mat = { let mut _v = mat.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return mat
};
    fn copy_matrix(mut a: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut mat: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (a[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(a[i as usize].clone()[j as usize]); _v };
            j = (j + 1);
        }
        mat = { let mut _v = mat.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return mat
};
    fn matmul(mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let m: i64 = (a.len() as i64);
    let n: i64 = (a[0 as usize].clone().len() as i64);
    let p: i64 = (b[0 as usize].clone().len() as i64);
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < p) {
            let mut sum: f64 = 0.0;
            let mut k: i64 = 0;
            while (k < n) {
                sum = (sum + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
    let mut qr_decomposition = |a: Vec<Vec<f64>>| -> QR {
    let m: i64 = (a.len() as i64);
    let n: i64 = (a[0 as usize].clone().len() as i64);
    let t: i64 = if (m < n) { m } else { n };
    let mut q: Vec<Vec<f64>> = identity_matrix(m);
    let mut r: Vec<Vec<f64>> = copy_matrix(a.clone());
    let mut k: i64 = 0;
    while (k < (t - 1)) {
        let mut x: Vec<f64> = vec![];
        let mut i: i64 = k;
        while (i < m) {
            x = { let mut _v = x.clone(); _v.push(r[i as usize].clone()[k as usize]); _v };
            i = (i + 1);
        }
        let mut e1: Vec<f64> = vec![];
        i = 0;
        while (i < (x.len() as i64)) {
            if (i == 0) {
                e1 = { let mut _v = e1.clone(); _v.push(1.0); _v };
            } else {
                e1 = { let mut _v = e1.clone(); _v.push(0.0); _v };
            }
            i = (i + 1);
        }
        let alpha: f64 = vector_norm(x.clone());
        let s: f64 = (sign(x[0 as usize]) * alpha);
        let mut v: Vec<f64> = vec![];
        i = 0;
        while (i < (x.len() as i64)) {
            v = { let mut _v = v.clone(); _v.push((x[i as usize] + (s * e1[i as usize]))); _v };
            i = (i + 1);
        }
        let vnorm: f64 = vector_norm(v.clone());
        i = 0;
        while (i < (v.len() as i64)) {
            v[i as usize] = (v[i as usize] / vnorm);
            i = (i + 1);
        }
        let size: i64 = (v.len() as i64);
        let mut qk_small: Vec<Vec<f64>> = vec![];
        i = 0;
        while (i < size) {
            let mut row: Vec<f64> = vec![];
            let mut j: i64 = 0;
            while (j < size) {
                let delta: f64 = if (i == j) { 1.0 } else { 0.0 };
                row = { let mut _v = row.clone(); _v.push((delta - ((2.0 * v[i as usize]) * v[j as usize]))); _v };
                j = (j + 1);
            }
            qk_small = { let mut _v = qk_small.clone(); _v.push(row.clone()); _v };
            i = (i + 1);
        }
        let mut qk: Vec<Vec<f64>> = identity_matrix(m);
        i = 0;
        while (i < size) {
            let mut j: i64 = 0;
            while (j < size) {
                qk[(k + i) as usize][(k + j) as usize] = qk_small[i as usize].clone()[j as usize];
                j = (j + 1);
            }
            i = (i + 1);
        }
        q = matmul(q.clone(), qk.clone());
        r = matmul(qk.clone(), r.clone());
        k = (k + 1);
    }
    return QR {q: q.clone(), r: r.clone()}
};
    fn print_matrix(mut mat: Vec<Vec<f64>>) {
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut line: String = String::new();
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, mat[i as usize].clone()[j as usize].to_string());
            if ((j + 1) < (mat[i as usize].clone().len() as i64)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    let A: Vec<Vec<f64>> = vec![vec![12.0, -51.0, 4.0].clone(), vec![6.0, 167.0, -68.0].clone(), vec![-4.0, 24.0, -41.0].clone()];
    let result: QR = qr_decomposition(A.clone());
    print_matrix(result.q.clone().clone());
    print_matrix(result.r.clone().clone());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
