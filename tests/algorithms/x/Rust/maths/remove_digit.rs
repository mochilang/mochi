// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn remove_digit(mut num: i64) -> i64 {
    let mut n: i64 = num;
    if (n < 0) {
        n = -n;
    }
    let mut max_val: i64 = 0;
    let mut divisor: i64 = 1;
    while (divisor <= n) {
        let higher: i64 = (n / (divisor * 10));
        let lower: i64 = (n % divisor);
        let candidate: i64 = ((higher * divisor) + lower);
        if (candidate > max_val) {
            max_val = candidate;
        }
        divisor = (divisor * 10);
    }
    return max_val
};
    let mut test_remove_digit = || {
    if (remove_digit(152) != 52) {
        panic!("remove_digit(152) failed");
    }
    if (remove_digit(6385) != 685) {
        panic!("remove_digit(6385) failed");
    }
    if (remove_digit(-11) != 1) {
        panic!("remove_digit(-11) failed");
    }
    if (remove_digit(2222222) != 222222) {
        panic!("remove_digit(2222222) failed");
    }
};
    let mut mochi_main = || {
    test_remove_digit();
    println!("{}", remove_digit(152));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
