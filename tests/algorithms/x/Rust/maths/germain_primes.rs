// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_prime(mut n: i64) -> bool {
    if (n <= 1) {
        return false
    }
    if (n <= 3) {
        return true
    }
    if ((n % 2) == 0) {
        return false
    }
    let mut i: i64 = 3;
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            return false
        }
        i = (i + 2);
    }
    return true
};
    fn is_germain_prime(mut number: i64) -> bool {
    if (number < 1) {
        panic!("Input value must be a positive integer");
    }
    return (is_prime(number) && is_prime(((2 * number) + 1)))
};
    fn is_safe_prime(mut number: i64) -> bool {
    if (number < 1) {
        panic!("Input value must be a positive integer");
    }
    if (((number - 1) % 2) != 0) {
        return false
    }
    return (is_prime(number) && is_prime(((number - 1) / 2)))
};
    fn test_is_germain_prime() {
    if !is_germain_prime(3) {
        panic!("is_germain_prime(3) failed");
    }
    if !is_germain_prime(11) {
        panic!("is_germain_prime(11) failed");
    }
    if is_germain_prime(4) {
        panic!("is_germain_prime(4) failed");
    }
    if !is_germain_prime(23) {
        panic!("is_germain_prime(23) failed");
    }
    if is_germain_prime(13) {
        panic!("is_germain_prime(13) failed");
    }
    if is_germain_prime(20) {
        panic!("is_germain_prime(20) failed");
    }
};
    fn test_is_safe_prime() {
    if !is_safe_prime(5) {
        panic!("is_safe_prime(5) failed");
    }
    if !is_safe_prime(11) {
        panic!("is_safe_prime(11) failed");
    }
    if is_safe_prime(1) {
        panic!("is_safe_prime(1) failed");
    }
    if is_safe_prime(2) {
        panic!("is_safe_prime(2) failed");
    }
    if is_safe_prime(3) {
        panic!("is_safe_prime(3) failed");
    }
    if !is_safe_prime(47) {
        panic!("is_safe_prime(47) failed");
    }
};
    fn mochi_main() {
    test_is_germain_prime();
    test_is_safe_prime();
    println!("{}", if is_germain_prime(23) { 1 } else { 0 });
    println!("{}", if is_safe_prime(47) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
