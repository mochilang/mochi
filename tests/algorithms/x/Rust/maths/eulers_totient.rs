// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn totient(mut n: i64) -> Vec<i64> {
    let mut is_prime: Vec<bool> = vec![];
    let mut totients: Vec<i64> = vec![];
    let mut primes: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        is_prime = { let mut _v = is_prime.clone(); _v.push(true); _v };
        totients = { let mut _v = totients.clone(); _v.push((i - 1)); _v };
        i = (i + 1);
    }
    i = 2;
    while (i <= n) {
        if is_prime[i as usize] {
            primes = { let mut _v = primes.clone(); _v.push(i); _v };
        }
        let mut j: i64 = 0;
        while (j < (primes.len() as i64)) {
            let p: i64 = primes[j as usize];
            if ((i * p) >= n) {
                break
            }
            is_prime[(i * p) as usize] = false;
            if ((i % p) == 0) {
                totients[(i * p) as usize] = (totients[i as usize] * p);
                break
            }
            totients[(i * p) as usize] = (totients[i as usize] * (p - 1));
            j = (j + 1);
        }
        i = (i + 1);
    }
    return totients
};
    fn test_totient() {
    let expected: Vec<i64> = vec![-1, 0, 1, 2, 2, 4, 2, 6, 4, 6, 9];
    let res: Vec<i64> = totient(10);
    let mut idx: i64 = 0;
    while (idx < (expected.len() as i64)) {
        if (res[idx as usize] != expected[idx as usize]) {
            panic!("{}", format!("{}{}", "totient mismatch at ", idx.to_string()));
        }
        idx = (idx + 1);
    }
};
    fn mochi_main() {
    test_totient();
    let n: i64 = 10;
    let res: Vec<i64> = totient(n);
    let mut i: i64 = 1;
    while (i < n) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", i.to_string(), " has "), res[i as usize].to_string()), " relative primes."));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
