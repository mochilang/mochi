// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn set_seed(mut s: i64) {
    unsafe { g_seed = s };
};
        fn randint(mut a: i64, mut b: i64) -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return ((unsafe { g_seed.clone() } % ((b - a) + 1)) + a)
};
        fn jacobi_symbol(mut random_a: i64, mut number: i64) -> i64 {
    if ((random_a == 0) || (random_a == 1)) {
        return random_a
    }
    random_a = (random_a % number);
    let mut t: i64 = 1;
    while (random_a != 0) {
        while ((random_a % 2) == 0) {
            random_a = (random_a / 2);
            let r: i64 = (number % 8);
            if ((r == 3) || (r == 5)) {
                t = -t;
            }
        }
        let temp: i64 = random_a;
        random_a = number;
        number = temp;
        if (((random_a % 4) == 3) && ((number % 4) == 3)) {
            t = -t;
        }
        random_a = (random_a % number);
    }
    if (number == 1) {
        return t
    }
    return 0
};
        fn pow_mod(mut base: i64, mut exp: i64, mut r#mod: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % r#mod);
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % r#mod);
        }
        b = ((b * b) % r#mod);
        e = (e / 2);
    }
    return result
};
        fn solovay_strassen(mut number: i64, mut iterations: i64) -> bool {
    if (number <= 1) {
        return false
    }
    if (number <= 3) {
        return true
    }
    let mut i: i64 = 0;
    while (i < iterations) {
        let a: i64 = randint(2, (number - 2));
        let x: i64 = jacobi_symbol(a, number);
        let y: i64 = pow_mod(a, ((number - 1) / 2), number);
        let mut mod_x: i64 = (x % number);
        if (mod_x < 0) {
            mod_x = (mod_x + number);
        }
        if ((x == 0) || (y != mod_x)) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        fn mochi_main() {
    set_seed(10);
    println!("{}", solovay_strassen(13, 5).to_string());
    println!("{}", solovay_strassen(9, 10).to_string());
    println!("{}", solovay_strassen(17, 15).to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
