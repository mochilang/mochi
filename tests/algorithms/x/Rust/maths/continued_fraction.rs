// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn floor_div(mut a: i64, mut b: i64) -> i64 {
    let mut q: i64 = (a / b);
    let r: i64 = (a % b);
    if ((r != 0) && (((a < 0) && (b > 0)) || ((a > 0) && (b < 0)))) {
        q = (q - 1);
    }
    return q
};
    fn continued_fraction(mut numerator: i64, mut denominator: i64) -> Vec<i64> {
    let mut num: i64 = numerator;
    let mut den: i64 = denominator;
    let mut result: Vec<i64> = vec![];
    loop {
        let integer_part: i64 = floor_div(num, den);
        result = { let mut _v = result.clone(); _v.push(integer_part); _v };
        num = (num - (integer_part * den));
        if (num == 0) {
            break
        }
        let tmp: i64 = num;
        num = den;
        den = tmp;
    }
    return result
};
    fn list_to_string(mut lst: Vec<i64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        s = format!("{}{}", s, lst[i as usize].to_string());
        if (i < ((lst.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    return format!("{}{}", s, "]").clone()
};
    println!("{}", format!("{}{}", "Continued Fraction of 0.84375 is: ", list_to_string(continued_fraction(27, 32))));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
