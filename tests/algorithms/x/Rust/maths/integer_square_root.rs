// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn integer_square_root(mut num: i64) -> i64 {
    if (num < 0) {
        panic!("num must be non-negative integer");
    }
    if (num < 2) {
        return num
    }
    let mut left_bound: i64 = 0;
    let mut right_bound: i64 = (num / 2);
    while (left_bound <= right_bound) {
        let mid: i64 = (left_bound + ((right_bound - left_bound) / 2));
        let mid_squared: i64 = (mid * mid);
        if (mid_squared == num) {
            return mid
        }
        if (mid_squared < num) {
            left_bound = (mid + 1);
        } else {
            right_bound = (mid - 1);
        }
    }
    return right_bound
};
    fn test_integer_square_root() {
    let expected: Vec<i64> = vec![0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4];
    let mut i: i64 = 0;
    while (i < (expected.len() as i64)) {
        let result: i64 = integer_square_root(i);
        if (result != expected[i as usize]) {
            panic!("{}", format!("{}{}", "test failed at index ", i.to_string()));
        }
        i = (i + 1);
    }
    if (integer_square_root(625) != 25) {
        panic!("sqrt of 625 incorrect");
    }
    if (integer_square_root(2147483647) != 46340) {
        panic!("sqrt of max int incorrect");
    }
};
    fn mochi_main() {
    test_integer_square_root();
    println!("{}", integer_square_root(625).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
