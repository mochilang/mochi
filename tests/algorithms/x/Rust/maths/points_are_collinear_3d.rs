// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Point3d {
    x: f64,
    y: f64,
    z: f64,
}
impl std::fmt::Display for Point3d {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"z\": {}", self.z)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Vector3d {
    x: f64,
    y: f64,
    z: f64,
}
impl std::fmt::Display for Vector3d {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"z\": {}", self.z)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn create_vector(mut p1: Point3d, mut p2: Point3d) -> Vector3d {
    let vx: f64 = (p2.x - p1.x);
    let vy: f64 = (p2.y - p1.y);
    let vz: f64 = (p2.z - p1.z);
    return Vector3d {x: vx, y: vy, z: vz}
};
    fn get_3d_vectors_cross(mut ab: Vector3d, mut ac: Vector3d) -> Vector3d {
    let cx: f64 = ((ab.y * ac.z) - (ab.z * ac.y));
    let cy: f64 = ((ab.z * ac.x) - (ab.x * ac.z));
    let cz: f64 = ((ab.x * ac.y) - (ab.y * ac.x));
    return Vector3d {x: cx, y: cy, z: cz}
};
    fn pow10(mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
};
    let mut round_float = |x: f64, digits: i64| -> f64 {
    let factor: f64 = pow10(digits);
    let mut v: f64 = (x * factor);
    if (v >= 0.0) {
        v = (v + 0.5);
    } else {
        v = (v - 0.5);
    }
    let t: i64 = (v as i64);
    return ((t as f64) / factor)
};
    let mut is_zero_vector = |v: Vector3d, accuracy: i64| -> bool {
    return (((round_float(v.x, accuracy) == 0.0) && (round_float(v.y, accuracy) == 0.0)) && (round_float(v.z, accuracy) == 0.0))
};
    let mut are_collinear = |a: Point3d, b: Point3d, c: Point3d, accuracy: i64| -> bool {
    let ab: Vector3d = create_vector(a.clone(), b.clone());
    let ac: Vector3d = create_vector(a.clone(), c.clone());
    let cross: Vector3d = get_3d_vectors_cross(ab.clone(), ac.clone());
    return is_zero_vector(cross.clone(), accuracy)
};
    let mut test_are_collinear = || {
    let p1: Point3d = Point3d {x: 0.0, y: 0.0, z: 0.0};
    let p2: Point3d = Point3d {x: 1.0, y: 1.0, z: 1.0};
    let p3: Point3d = Point3d {x: 2.0, y: 2.0, z: 2.0};
    if !are_collinear(p1.clone(), p2.clone(), p3.clone(), 10) {
        panic!("collinear test failed");
    }
    let q3: Point3d = Point3d {x: 1.0, y: 2.0, z: 3.0};
    if are_collinear(p1.clone(), p2.clone(), q3.clone(), 10) {
        panic!("non-collinear test failed");
    }
};
    let mut mochi_main = || {
    test_are_collinear();
    let a: Point3d = Point3d {x: 4.802293498137402, y: 3.536233125455244, z: 0.0};
    let b: Point3d = Point3d {x: -2.186788107953106, y: -9.24561398001649, z: 7.141509524846482};
    let c: Point3d = Point3d {x: 1.530169574640268, y: -2.447927606600034, z: 3.343487096469054};
    println!("{}", are_collinear(a.clone(), b.clone(), c.clone(), 10).to_string());
    let d: Point3d = Point3d {x: 2.399001826862445, y: -2.452009976680793, z: 4.464656666157666};
    let e: Point3d = Point3d {x: -3.682816335934376, y: 5.753788986533145, z: 9.490993909044244};
    let f: Point3d = Point3d {x: 1.962903518985307, y: 3.741415730125627, z: 7.0};
    println!("{}", are_collinear(d.clone(), e.clone(), f.clone(), 10).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
