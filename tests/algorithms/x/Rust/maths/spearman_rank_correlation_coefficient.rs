// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn assign_ranks(mut data: Vec<f64>) -> Vec<i64> {
    let mut ranks: Vec<i64> = vec![];
    let n: i64 = (data.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut rank: i64 = 1;
        let mut j: i64 = 0;
        while (j < n) {
            if ((data[j as usize] < data[i as usize]) || ((data[j as usize] == data[i as usize]) && (j < i))) {
                rank = (rank + 1);
            }
            j = (j + 1);
        }
        ranks = { let mut _v = ranks.clone(); _v.push(rank); _v };
        i = (i + 1);
    }
    return ranks
};
    fn calculate_spearman_rank_correlation(mut var1: Vec<f64>, mut var2: Vec<f64>) -> f64 {
    if ((var1.len() as i64) != (var2.len() as i64)) {
        panic!("Lists must have equal length");
    }
    let n: i64 = (var1.len() as i64);
    let rank1: Vec<i64> = assign_ranks(var1.clone());
    let rank2: Vec<i64> = assign_ranks(var2.clone());
    let mut i: i64 = 0;
    let mut d_sq: f64 = 0.0;
    while (i < n) {
        let diff: f64 = ((rank1[i as usize] - rank2[i as usize]) as f64);
        d_sq = (d_sq + (diff * diff));
        i = (i + 1);
    }
    let n_f: f64 = (n as f64);
    return (1.0 - ((6.0 * d_sq) / (n_f * ((n_f * n_f) - 1.0))))
};
    fn test_spearman() {
    let x: Vec<f64> = vec![1.0, 2.0, 3.0, 4.0, 5.0];
    let y_inc: Vec<f64> = vec![2.0, 4.0, 6.0, 8.0, 10.0];
    if (calculate_spearman_rank_correlation(x.clone(), y_inc.clone()) != 1.0) {
        panic!("case1");
    }
    let y_dec: Vec<f64> = vec![5.0, 4.0, 3.0, 2.0, 1.0];
    if (calculate_spearman_rank_correlation(x.clone(), y_dec.clone()) != -1.0) {
        panic!("case2");
    }
    let y_mix: Vec<f64> = vec![5.0, 1.0, 2.0, 9.0, 5.0];
    if (calculate_spearman_rank_correlation(x.clone(), y_mix.clone()) != 0.6) {
        panic!("case3");
    }
};
    fn mochi_main() {
    test_spearman();
    println!("{}", calculate_spearman_rank_correlation(vec![1.0, 2.0, 3.0, 4.0, 5.0], vec![2.0, 4.0, 6.0, 8.0, 10.0]).to_string());
    println!("{}", calculate_spearman_rank_correlation(vec![1.0, 2.0, 3.0, 4.0, 5.0], vec![5.0, 4.0, 3.0, 2.0, 1.0]).to_string());
    println!("{}", calculate_spearman_rank_correlation(vec![1.0, 2.0, 3.0, 4.0, 5.0], vec![5.0, 1.0, 2.0, 9.0, 5.0]).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
