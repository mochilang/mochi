// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        let mut rand_seed: i64 = 123456789;
        let mut rand_float = || -> f64 {
    rand_seed = (((1103515245 * rand_seed) + 12345) % 2147483648);
    return ((rand_seed as f64) / 2147483648.0)
};
        let mut rand_range = |min_val: f64, max_val: f64| -> f64 {
    return ((rand_float() * (max_val - min_val)) + min_val)
};
        let mut abs_float = |x: f64| -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        let mut sqrtApprox = |x: f64| -> f64 {
    if (x == 0.0) {
        return 0.0
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        let mut pi_estimator = |iterations: i64| {
    let mut inside: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < iterations) {
        let x: f64 = rand_range(-1.0, 1.0);
        let y: f64 = rand_range(-1.0, 1.0);
        if (((x * x) + (y * y)) <= 1.0) {
            inside = (inside + 1.0);
        }
        i = (i + 1);
    }
    let proportion: f64 = (inside / (iterations as f64));
    let pi_estimate: f64 = (proportion * 4.0);
    println!("{}", format!("{} {}", "The estimated value of pi is", format!("{:?}", pi_estimate)).trim_end());
    println!("{}", format!("{} {}", "The numpy value of pi is", format!("{:?}", unsafe { g_PI.clone() })).trim_end());
    println!("{}", format!("{} {}", "The total error is", format!("{:?}", abs_float((unsafe { g_PI.clone() } - pi_estimate)))).trim_end());
};
        let mut area_under_curve_estimator = |iterations: i64, f: &mut dyn FnMut(f64) -> f64, min_value: f64, max_value: f64| -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < iterations) {
        let x: f64 = rand_range(min_value, max_value);
        sum = (sum + f(x));
        i = (i + 1);
    }
    let expected: f64 = (sum / (iterations as f64));
    return (expected * (max_value - min_value))
};
        let mut area_under_line_estimator_check = |iterations: i64, min_value: f64, max_value: f64| {
    let mut identity_function = |x: f64| -> f64 {
    return x
};
    let estimated_value: f64 = area_under_curve_estimator(iterations, &mut identity_function, min_value, max_value);
    let expected_value: f64 = (((max_value * max_value) - (min_value * min_value)) / 2.0);
    println!("{}", "******************");
    println!("{}", format!("{} {}", "Estimating area under y=x where x varies from", format!("{:?}", min_value)).trim_end());
    println!("{}", format!("{} {}", "Estimated value is", format!("{:?}", estimated_value)).trim_end());
    println!("{}", format!("{} {}", "Expected value is", format!("{:?}", expected_value)).trim_end());
    println!("{}", format!("{} {}", "Total error is", format!("{:?}", abs_float((estimated_value - expected_value)))).trim_end());
    println!("{}", "******************");
};
        let mut pi_estimator_using_area_under_curve = |iterations: i64| {
    let mut semi_circle = |x: f64| -> f64 {
    let y: f64 = (4.0 - (x * x));
    let s: f64 = sqrtApprox(y);
    return s
};
    let estimated_value: f64 = area_under_curve_estimator(iterations, &mut semi_circle, 0.0, 2.0);
    println!("{}", "******************");
    println!("{}", "Estimating pi using area_under_curve_estimator");
    println!("{}", format!("{} {}", "Estimated value is", format!("{:?}", estimated_value)).trim_end());
    println!("{}", format!("{} {}", "Expected value is", format!("{:?}", unsafe { g_PI.clone() })).trim_end());
    println!("{}", format!("{} {}", "Total error is", format!("{:?}", abs_float((estimated_value - unsafe { g_PI.clone() })))).trim_end());
    println!("{}", "******************");
};
        let mut mochi_main = || {
    pi_estimator(1000);
    area_under_line_estimator_check(1000, 0.0, 1.0);
    pi_estimator_using_area_under_curve(1000);
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
