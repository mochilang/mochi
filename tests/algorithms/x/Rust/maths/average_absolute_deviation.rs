// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn average_absolute_deviation(mut nums: Vec<i64>) -> f64 {
    if ((nums.len() as i64) == 0) {
        panic!("List is empty");
    }
    let mut sum: i64 = 0;
    for x in nums.iter().cloned() {
        sum = (sum + x);
    }
    let mut n: f64 = ((nums.len() as i64) as f64);
    let mut mean: f64 = ((sum as f64) / n);
    let mut dev_sum: f64 = 0.0;
    for x in nums.iter().cloned() {
        dev_sum = (dev_sum + abs_float(((x as f64) - mean)));
    }
    return (dev_sum / n)
};
    println!("{}", average_absolute_deviation(vec![0]).to_string());
    println!("{}", average_absolute_deviation(vec![4, 1, 3, 2]).to_string());
    println!("{}", average_absolute_deviation(vec![2, 70, 6, 50, 20, 8, 4, 0]).to_string());
    println!("{}", average_absolute_deviation(vec![-20, 0, 30, 15]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
