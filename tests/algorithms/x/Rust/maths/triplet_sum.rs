// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bubble_sort(mut nums: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(nums[i as usize]); _v };
        i = (i + 1);
    }
    let mut n: i64 = (arr.len() as i64);
    let mut a: i64 = 0;
    while (a < n) {
        let mut b: i64 = 0;
        while (b < ((n - a) - 1)) {
            if (arr[b as usize] > arr[(b + 1) as usize]) {
                let tmp: i64 = arr[b as usize];
                arr[b as usize] = arr[(b + 1) as usize];
                arr[(b + 1) as usize] = tmp;
            }
            b = (b + 1);
        }
        a = (a + 1);
    }
    return arr
};
    fn sort3(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    let mut n: i64 = (arr.len() as i64);
    let mut a: i64 = 0;
    while (a < n) {
        let mut b: i64 = 0;
        while (b < ((n - a) - 1)) {
            if (arr[b as usize] > arr[(b + 1) as usize]) {
                let tmp: i64 = arr[b as usize];
                arr[b as usize] = arr[(b + 1) as usize];
                arr[(b + 1) as usize] = tmp;
            }
            b = (b + 1);
        }
        a = (a + 1);
    }
    return arr
};
    fn triplet_sum1(mut arr: Vec<i64>, mut target: i64) -> Vec<i64> {
    let mut i: i64 = 0;
    while (i < ((arr.len() as i64) - 2)) {
        let mut j: i64 = (i + 1);
        while (j < ((arr.len() as i64) - 1)) {
            let mut k: i64 = (j + 1);
            while (k < (arr.len() as i64)) {
                if (((arr[i as usize] + arr[j as usize]) + arr[k as usize]) == target) {
                    return sort3(vec![arr[i as usize], arr[j as usize], arr[k as usize]])
                }
                k = (k + 1);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return vec![0, 0, 0]
};
    fn triplet_sum2(mut arr: Vec<i64>, mut target: i64) -> Vec<i64> {
    let sorted: Vec<i64> = bubble_sort(arr.clone());
    let n: i64 = (sorted.len() as i64);
    let mut i: i64 = 0;
    while (i < (n - 2)) {
        let mut left: i64 = (i + 1);
        let mut right: i64 = (n - 1);
        while (left < right) {
            let s: i64 = ((sorted[i as usize] + sorted[left as usize]) + sorted[right as usize]);
            if (s == target) {
                return vec![sorted[i as usize], sorted[left as usize], sorted[right as usize]]
            }
            if (s < target) {
                left = (left + 1);
            } else {
                right = (right - 1);
            }
        }
        i = (i + 1);
    }
    return vec![0, 0, 0]
};
    fn list_equal(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn test_triplet_sum() {
    let arr1: Vec<i64> = vec![13, 29, 7, 23, 5];
    if !list_equal(triplet_sum1(arr1.clone(), 35), vec![5, 7, 23]) {
        panic!("ts1 case1 failed");
    }
    if !list_equal(triplet_sum2(arr1.clone(), 35), vec![5, 7, 23]) {
        panic!("ts2 case1 failed");
    }
    let arr2: Vec<i64> = vec![37, 9, 19, 50, 44];
    if !list_equal(triplet_sum1(arr2.clone(), 65), vec![9, 19, 37]) {
        panic!("ts1 case2 failed");
    }
    if !list_equal(triplet_sum2(arr2.clone(), 65), vec![9, 19, 37]) {
        panic!("ts2 case2 failed");
    }
    let arr3: Vec<i64> = vec![6, 47, 27, 1, 15];
    if !list_equal(triplet_sum1(arr3.clone(), 11), vec![0, 0, 0]) {
        panic!("ts1 case3 failed");
    }
    if !list_equal(triplet_sum2(arr3.clone(), 11), vec![0, 0, 0]) {
        panic!("ts2 case3 failed");
    }
};
    fn mochi_main() {
    test_triplet_sum();
    let sample: Vec<i64> = vec![13, 29, 7, 23, 5];
    let res: Vec<i64> = triplet_sum2(sample.clone(), 35);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", res[0 as usize].to_string(), " "), res[1 as usize].to_string()), " "), res[2 as usize].to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
