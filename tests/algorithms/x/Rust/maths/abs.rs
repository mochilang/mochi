// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_val(mut num: f64) -> f64 {
    if (num < 0.0) {
        return -num
    }
    return num
};
    fn abs_min(mut x: Vec<i64>) -> i64 {
    if ((x.len() as i64) == 0) {
        panic!("abs_min() arg is an empty sequence");
    }
    let mut j: i64 = x[0 as usize];
    let mut idx: i64 = 0;
    while (idx < (x.len() as i64)) {
        let mut i: i64 = x[idx as usize];
        if (abs_val((i as f64)) < abs_val((j as f64))) {
            j = i;
        }
        idx = (idx + 1);
    }
    return j
};
    fn abs_max(mut x: Vec<i64>) -> i64 {
    if ((x.len() as i64) == 0) {
        panic!("abs_max() arg is an empty sequence");
    }
    let mut j: i64 = x[0 as usize];
    let mut idx: i64 = 0;
    while (idx < (x.len() as i64)) {
        let mut i: i64 = x[idx as usize];
        if (abs_val((i as f64)) > abs_val((j as f64))) {
            j = i;
        }
        idx = (idx + 1);
    }
    return j
};
    fn abs_max_sort(mut x: Vec<i64>) -> i64 {
    if ((x.len() as i64) == 0) {
        panic!("abs_max_sort() arg is an empty sequence");
    }
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (x.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(x[i as usize]); _v };
        i = (i + 1);
    }
    let mut n: i64 = (arr.len() as i64);
    let mut a: i64 = 0;
    while (a < n) {
        let mut b: i64 = 0;
        while (b < ((n - a) - 1)) {
            if (abs_val((arr[b as usize] as f64)) > abs_val((arr[(b + 1) as usize] as f64))) {
                let mut temp: i64 = arr[b as usize];
                arr[b as usize] = arr[(b + 1) as usize];
                arr[(b + 1) as usize] = temp;
            }
            b = (b + 1);
        }
        a = (a + 1);
    }
    return arr[(n - 1) as usize]
};
    fn test_abs_val() {
    if (abs_val(0.0) != 0.0) {
        panic!("abs_val(0) failed");
    }
    if (abs_val(34.0) != 34.0) {
        panic!("abs_val(34) failed");
    }
    if (abs_val(-100000000000.0) != 100000000000.0) {
        panic!("abs_val large failed");
    }
    let mut a: Vec<i64> = vec![-3, -1, 2, -11];
    if (abs_max(a.clone()) != -11) {
        panic!("abs_max failed");
    }
    if (abs_max_sort(a.clone()) != -11) {
        panic!("abs_max_sort failed");
    }
    if (abs_min(a.clone()) != -1) {
        panic!("abs_min failed");
    }
};
    fn mochi_main() {
    test_abs_val();
    println!("{}", format!("{:?}", abs_val(-34.0)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
