// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_p: i64 = 701;
static g_a: i64 = 1000000000;
static g_b: i64 = 10;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn binary_exponentiation(mut a: i64, mut n: i64, mut r#mod: i64) -> i64 {
    if (n == 0) {
        return 1
    }
    if ((n % 2) == 1) {
        return ((binary_exponentiation(a, (n - 1), r#mod) * a) % r#mod)
    }
    let b: i64 = binary_exponentiation(a, (n / 2), r#mod);
    return ((b * b) % r#mod)
};
        fn naive_exponent_mod(mut a: i64, mut n: i64, mut r#mod: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        result = ((result * a) % r#mod);
        i = (i + 1);
    }
    return result
};
        fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
        let left: i64 = ((g_a / g_b) % g_p);
        let right_fast: i64 = ((g_a * binary_exponentiation(g_b, (g_p - 2), g_p)) % g_p);
        print_bool((left == right_fast));
        let right_naive: i64 = ((g_a * naive_exponent_mod(g_b, (g_p - 2), g_p)) % g_p);
        print_bool((left == right_naive));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
