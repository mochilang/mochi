// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn key(mut x: i64, mut y: i64) -> String {
    return format!("{}{}", format!("{}{}", x.to_string(), ","), y.to_string()).to_string().clone()
};
    fn joint_probability_distribution(mut x_values: Vec<i64>, mut y_values: Vec<i64>, mut x_probabilities: Vec<f64>, mut y_probabilities: Vec<f64>) -> HashMap<String, f64> {
    let mut result: HashMap<String, f64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (x_values.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (y_values.len() as i64)) {
            let k: String = key(x_values[i as usize], y_values[j as usize]).clone();
            result.insert(k.clone(), (x_probabilities[i as usize] * y_probabilities[j as usize]));
            j = (j + 1);
        }
        i = (i + 1);
    }
    return result
};
    fn expectation(mut values: Vec<i64>, mut probabilities: Vec<f64>) -> f64 {
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        total = (total + ((values[i as usize] as f64) * probabilities[i as usize]));
        i = (i + 1);
    }
    return total
};
    fn variance(mut values: Vec<i64>, mut probabilities: Vec<f64>) -> f64 {
    let mean: f64 = expectation(values.clone(), probabilities.clone());
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        let diff: f64 = ((values[i as usize] as f64) - mean);
        total = (total + ((diff * diff) * probabilities[i as usize]));
        i = (i + 1);
    }
    return total
};
    fn covariance(mut x_values: Vec<i64>, mut y_values: Vec<i64>, mut x_probabilities: Vec<f64>, mut y_probabilities: Vec<f64>) -> f64 {
    let mean_x: f64 = expectation(x_values.clone(), x_probabilities.clone());
    let mean_y: f64 = expectation(y_values.clone(), y_probabilities.clone());
    let mut total: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (x_values.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (y_values.len() as i64)) {
            let diff_x: f64 = ((x_values[i as usize] as f64) - mean_x);
            let diff_y: f64 = ((y_values[j as usize] as f64) - mean_y);
            total = (total + (((diff_x * diff_y) * x_probabilities[i as usize]) * y_probabilities[j as usize]));
            j = (j + 1);
        }
        i = (i + 1);
    }
    return total
};
    fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn standard_deviation(mut v: f64) -> f64 {
    return sqrtApprox(v)
};
    fn mochi_main() {
    let x_values: Vec<i64> = vec![1, 2];
    let y_values: Vec<i64> = vec![-2, 5, 8];
    let x_probabilities: Vec<f64> = vec![0.7, 0.3];
    let y_probabilities: Vec<f64> = vec![0.3, 0.5, 0.2];
    let jpd: HashMap<String, f64> = joint_probability_distribution(x_values.clone(), y_values.clone(), x_probabilities.clone(), y_probabilities.clone());
    let mut i: i64 = 0;
    while (i < (x_values.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (y_values.len() as i64)) {
            let k: String = key(x_values[i as usize], y_values[j as usize]).clone();
            let prob: f64 = jpd.get(k.as_str()).cloned().unwrap_or_default();
            println!("{}", format!("{}{}", format!("{}{}", k, "="), prob.to_string()));
            j = (j + 1);
        }
        i = (i + 1);
    }
    let ex: f64 = expectation(x_values.clone(), x_probabilities.clone());
    let ey: f64 = expectation(y_values.clone(), y_probabilities.clone());
    let vx: f64 = variance(x_values.clone(), x_probabilities.clone());
    let vy: f64 = variance(y_values.clone(), y_probabilities.clone());
    let cov: f64 = covariance(x_values.clone(), y_values.clone(), x_probabilities.clone(), y_probabilities.clone());
    println!("{}", format!("{}{}", "Ex=", ex.to_string()));
    println!("{}", format!("{}{}", "Ey=", ey.to_string()));
    println!("{}", format!("{}{}", "Vx=", vx.to_string()));
    println!("{}", format!("{}{}", "Vy=", vy.to_string()));
    println!("{}", format!("{}{}", "Cov=", cov.to_string()));
    println!("{}", format!("{}{}", "Sx=", standard_deviation(vx).to_string()));
    println!("{}", format!("{}{}", "Sy=", standard_deviation(vy).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
