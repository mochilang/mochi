// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn isqrt(mut n: i64) -> i64 {
    let mut r: i64 = 0;
    while (((r + 1) * (r + 1)) <= n) {
        r = (r + 1);
    }
    return r
};
    fn prime_sieve(mut num: i64) -> Vec<i64> {
    if (num <= 0) {
        panic!("Invalid input, please enter a positive integer.");
    }
    let mut sieve: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i <= num) {
        sieve = { let mut _v = sieve.clone(); _v.push(true); _v };
        i = (i + 1);
    }
    let mut prime: Vec<i64> = vec![];
    let mut start: i64 = 2;
    let end: i64 = isqrt(num);
    while (start <= end) {
        if sieve[start as usize] {
            prime = { let mut _v = prime.clone(); _v.push(start); _v };
            let mut j: i64 = (start * start);
            while (j <= num) {
                if sieve[j as usize] {
                    sieve[j as usize] = false;
                }
                j = (j + start);
            }
        }
        start = (start + 1);
    }
    let mut k: i64 = (end + 1);
    while (k <= num) {
        if sieve[k as usize] {
            prime = { let mut _v = prime.clone(); _v.push(k); _v };
        }
        k = (k + 1);
    }
    return prime
};
    println!("{}", format!("{:?}", prime_sieve(50)));
    println!("{}", format!("{:?}", prime_sieve(25)));
    println!("{}", format!("{:?}", prime_sieve(10)));
    println!("{}", format!("{:?}", prime_sieve(9)));
    println!("{}", format!("{:?}", prime_sieve(2)));
    println!("{}", format!("{:?}", prime_sieve(1)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
