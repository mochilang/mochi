// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn factorial(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("factorial is undefined for negative numbers");
    }
    let mut result: i64 = 1;
    let mut i: i64 = 2;
    while (i <= n) {
        result = (result * i);
        i = (i + 1);
    }
    return result
};
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn binomial_distribution(mut successes: i64, mut trials: i64, mut prob: f64) -> f64 {
    if (successes > trials) {
        panic!("successes must be lower or equal to trials");
    }
    if ((trials < 0) || (successes < 0)) {
        panic!("the function is defined for non-negative integers");
    }
    if !((0.0 < prob) && (prob < 1.0)) {
        panic!("prob has to be in range of 1 - 0");
    }
    let mut probability: f64 = (pow_float(prob, successes) * pow_float((1.0 - prob), (trials - successes)));
    let mut numerator: f64 = (factorial(trials) as f64);
    let mut denominator: f64 = ((factorial(successes) * factorial((trials - successes))) as f64);
    let mut coefficient: f64 = (numerator / denominator);
    return (probability * coefficient)
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
