// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn double_factorial_recursive(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("double_factorial_recursive() not defined for negative values");
    }
    if (n <= 1) {
        return 1
    }
    return (n * double_factorial_recursive((n - 2)))
};
    fn double_factorial_iterative(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("double_factorial_iterative() not defined for negative values");
    }
    let mut result: i64 = 1;
    let mut i: i64 = n;
    while (i > 0) {
        result = (result * i);
        i = (i - 2);
    }
    return result
};
    fn test_double_factorial() {
    if (double_factorial_recursive(0) != 1) {
        panic!("0!! recursive failed");
    }
    if (double_factorial_iterative(0) != 1) {
        panic!("0!! iterative failed");
    }
    if (double_factorial_recursive(1) != 1) {
        panic!("1!! recursive failed");
    }
    if (double_factorial_iterative(1) != 1) {
        panic!("1!! iterative failed");
    }
    if (double_factorial_recursive(5) != 15) {
        panic!("5!! recursive failed");
    }
    if (double_factorial_iterative(5) != 15) {
        panic!("5!! iterative failed");
    }
    if (double_factorial_recursive(6) != 48) {
        panic!("6!! recursive failed");
    }
    if (double_factorial_iterative(6) != 48) {
        panic!("6!! iterative failed");
    }
    let mut n: i64 = 0;
    while (n <= 10) {
        if (double_factorial_recursive(n) != double_factorial_iterative(n)) {
            panic!("double factorial mismatch");
        }
        n = (n + 1);
    }
};
    fn mochi_main() {
    test_double_factorial();
    println!("{}", double_factorial_iterative(10));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
