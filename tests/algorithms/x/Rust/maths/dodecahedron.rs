// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn abs_val(mut num: f64) -> f64 {
    if (num < 0.0) {
        return -num
    }
    return num
};
    fn approx_equal(mut a: f64, mut b: f64, mut eps: f64) -> bool {
    return (abs_val((a - b)) < eps)
};
    fn dodecahedron_surface_area(mut edge: i64) -> f64 {
    if (edge <= 0) {
        panic!("Length must be a positive.");
    }
    let term: f64 = sqrtApprox((25.0 + (10.0 * sqrtApprox(5.0))));
    let e: f64 = (edge as f64);
    return (((3.0 * term) * e) * e)
};
    fn dodecahedron_volume(mut edge: i64) -> f64 {
    if (edge <= 0) {
        panic!("Length must be a positive.");
    }
    let term: f64 = ((15.0 + (7.0 * sqrtApprox(5.0))) / 4.0);
    let e: f64 = (edge as f64);
    return (((term * e) * e) * e)
};
    fn test_dodecahedron() {
    if !approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001) {
        panic!("surface area 5 failed");
    }
    if !approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001) {
        panic!("surface area 10 failed");
    }
    if !approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001) {
        panic!("volume 5 failed");
    }
    if !approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001) {
        panic!("volume 10 failed");
    }
};
    fn mochi_main() {
    test_dodecahedron();
    println!("{}", format!("{:?}", dodecahedron_surface_area(5)));
    println!("{}", format!("{:?}", dodecahedron_volume(5)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
