// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exact_prime_factor_count(mut n: i64) -> i64 {
    let mut count: i64 = 0;
    let mut num: i64 = n;
    if ((num % 2) == 0) {
        count = (count + 1);
        while ((num % 2) == 0) {
            num = (num / 2);
        }
    }
    let mut i: i64 = 3;
    while ((i * i) <= num) {
        if ((num % i) == 0) {
            count = (count + 1);
            while ((num % i) == 0) {
                num = (num / i);
            }
        }
        i = (i + 2);
    }
    if (num > 2) {
        count = (count + 1);
    }
    return count
};
    fn ln(mut x: f64) -> f64 {
    let ln2: f64 = 0.6931471805599453;
    let mut y: f64 = x;
    let mut k: f64 = 0.0;
    while (y > 2.0) {
        y = (y / 2.0);
        k = (k + ln2);
    }
    while (y < 1.0) {
        y = (y * 2.0);
        k = (k - ln2);
    }
    let t: f64 = ((y - 1.0) / (y + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        sum = (sum + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (k + (2.0 * sum))
};
    fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
    fn round4(mut x: f64) -> f64 {
    let m: f64 = 10000.0;
    return (floor(((x * m) + 0.5)) / m)
};
    fn mochi_main() {
    let n: i64 = 51242183;
    let count: i64 = exact_prime_factor_count(n);
    println!("{}", format!("{}{}", "The number of distinct prime factors is/are ", count.to_string()));
    let loglog: f64 = ln(ln((n as f64)));
    println!("{}", format!("{}{}", "The value of log(log(n)) is ", round4(loglog).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
