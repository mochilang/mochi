// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sock_merchant(mut colors: Vec<i64>) -> i64 {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (colors.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(colors[i as usize]); _v };
        i = (i + 1);
    }
    let mut n: i64 = (arr.len() as i64);
    let mut a: i64 = 0;
    while (a < n) {
        let mut min_idx: i64 = a;
        let mut b: i64 = (a + 1);
        while (b < n) {
            if (arr[b as usize] < arr[min_idx as usize]) {
                min_idx = b;
            }
            b = (b + 1);
        }
        let temp: i64 = arr[a as usize];
        arr[a as usize] = arr[min_idx as usize];
        arr[min_idx as usize] = temp;
        a = (a + 1);
    }
    let mut pairs: i64 = 0;
    i = 0;
    while (i < n) {
        let mut count: i64 = 1;
        while (((i + 1) < n) && (arr[i as usize] == arr[(i + 1) as usize])) {
            count = (count + 1);
            i = (i + 1);
        }
        pairs = (pairs + (count / 2));
        i = (i + 1);
    }
    return pairs
};
    fn test_sock_merchant() {
    let example1: Vec<i64> = vec![10, 20, 20, 10, 10, 30, 50, 10, 20];
    if (sock_merchant(example1.clone()) != 3) {
        panic!("example1 failed");
    }
    let example2: Vec<i64> = vec![1, 1, 3, 3];
    if (sock_merchant(example2.clone()) != 2) {
        panic!("example2 failed");
    }
};
    fn mochi_main() {
    test_sock_merchant();
    let example1: Vec<i64> = vec![10, 20, 20, 10, 10, 30, 50, 10, 20];
    println!("{}", sock_merchant(example1.clone()).to_string());
    let example2: Vec<i64> = vec![1, 1, 3, 3];
    println!("{}", sock_merchant(example2.clone()).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
