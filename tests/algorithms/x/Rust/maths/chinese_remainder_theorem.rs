// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct EuclidResult {
    x: i64,
    y: i64,
}
impl std::fmt::Display for EuclidResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn extended_euclid(mut a: i64, mut b: i64) -> EuclidResult {
    if (b == 0) {
        return EuclidResult {x: 1, y: 0}
    }
    let mut res: EuclidResult = extended_euclid(b, (a % b));
    let mut k: i64 = (a / b);
    return EuclidResult {x: res.y, y: (res.x - (k * res.y))}
};
    fn chinese_remainder_theorem(mut n1: i64, mut r1: i64, mut n2: i64, mut r2: i64) -> i64 {
    let mut res: EuclidResult = extended_euclid(n1, n2);
    let mut x: i64 = res.x;
    let mut y: i64 = res.y;
    let mut m: i64 = (n1 * n2);
    let mut n: i64 = (((r2 * x) * n1) + ((r1 * y) * n2));
    return (((n % m) + m) % m)
};
    fn invert_modulo(mut a: i64, mut n: i64) -> i64 {
    let mut res: EuclidResult = extended_euclid(a, n);
    let mut b: i64 = res.x;
    if (b < 0) {
        b = (((b % n) + n) % n);
    }
    return b
};
    fn chinese_remainder_theorem2(mut n1: i64, mut r1: i64, mut n2: i64, mut r2: i64) -> i64 {
    let mut x: i64 = invert_modulo(n1, n2);
    let mut y: i64 = invert_modulo(n2, n1);
    let mut m: i64 = (n1 * n2);
    let mut n: i64 = (((r2 * x) * n1) + ((r1 * y) * n2));
    return (((n % m) + m) % m)
};
    let mut e1: EuclidResult = extended_euclid(10, 6);
    println!("{}", format!("{}{}", format!("{}{}", e1.x.to_string(), ","), e1.y.to_string()));
    let mut e2: EuclidResult = extended_euclid(7, 5);
    println!("{}", format!("{}{}", format!("{}{}", e2.x.to_string(), ","), e2.y.to_string()));
    println!("{}", chinese_remainder_theorem(5, 1, 7, 3).to_string());
    println!("{}", chinese_remainder_theorem(6, 1, 4, 3).to_string());
    println!("{}", invert_modulo(2, 5).to_string());
    println!("{}", invert_modulo(8, 7).to_string());
    println!("{}", chinese_remainder_theorem2(5, 1, 7, 3).to_string());
    println!("{}", chinese_remainder_theorem2(6, 1, 4, 3).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
