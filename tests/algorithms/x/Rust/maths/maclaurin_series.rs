// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        fn pow(mut x: f64, mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * x);
        i = (i + 1);
    }
    return result
};
        fn factorial(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 2;
    while (i <= n) {
        result = (result * (i as f64));
        i = (i + 1);
    }
    return result
};
        fn maclaurin_sin(mut theta: f64, mut accuracy: i64) -> f64 {
    let mut t: f64 = theta;
    let div: f64 = floor((t / (2.0 * g_PI)));
    t = (t - ((2.0 * div) * g_PI));
    let mut sum: f64 = 0.0;
    let mut r: i64 = 0;
    while (r < accuracy) {
        let power: i64 = ((2 * r) + 1);
        let sign: f64 = if ((r % 2) == 0) { 1.0 } else { -1.0 };
        sum = (sum + ((sign * pow(t, power)) / factorial(power)));
        r = (r + 1);
    }
    return sum
};
        fn maclaurin_cos(mut theta: f64, mut accuracy: i64) -> f64 {
    let mut t: f64 = theta;
    let div: f64 = floor((t / (2.0 * g_PI)));
    t = (t - ((2.0 * div) * g_PI));
    let mut sum: f64 = 0.0;
    let mut r: i64 = 0;
    while (r < accuracy) {
        let power: i64 = (2 * r);
        let sign: f64 = if ((r % 2) == 0) { 1.0 } else { -1.0 };
        sum = (sum + ((sign * pow(t, power)) / factorial(power)));
        r = (r + 1);
    }
    return sum
};
        println!("{}", maclaurin_sin(10.0, 30).to_string());
        println!("{}", maclaurin_sin(-10.0, 30).to_string());
        println!("{}", maclaurin_sin(10.0, 15).to_string());
        println!("{}", maclaurin_sin(-10.0, 15).to_string());
        println!("{}", maclaurin_cos(5.0, 30).to_string());
        println!("{}", maclaurin_cos(-5.0, 30).to_string());
        println!("{}", maclaurin_cos(10.0, 15).to_string());
        println!("{}", maclaurin_cos(-10.0, 15).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
