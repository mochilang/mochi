// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn f(mut x: f64) -> f64 {
    return ((x - 0.0) * (x - 0.0))
};
    fn make_points(mut a: f64, mut b: f64, mut h: f64) -> Vec<f64> {
    let mut points: Vec<f64> = vec![];
    let mut x: f64 = (a + h);
    while (x < (b - h)) {
        points = { let mut _v = points.clone(); _v.push(x); _v };
        x = (x + h);
    }
    return points
};
    let mut simpson_rule = |boundary: Vec<f64>, steps: i64| -> f64 {
    if (steps <= 0) {
        panic!("Number of steps must be greater than zero");
    }
    let a: f64 = boundary[0 as usize];
    let b: f64 = boundary[1 as usize];
    let h: f64 = ((b - a) / (steps as f64));
    let pts: Vec<f64> = make_points(a, b, h);
    let mut y: f64 = ((h / 3.0) * f(a));
    let mut cnt: i64 = 2;
    let mut i: i64 = 0;
    while (i < (pts.len() as i64)) {
        let coeff: f64 = (4.0 - (2.0 * ((cnt % 2) as f64)));
        y = (y + (((h / 3.0) * coeff) * f(pts[i as usize])));
        cnt = (cnt + 1);
        i = (i + 1);
    }
    y = (y + ((h / 3.0) * f(b)));
    return y
};
    let result: f64 = simpson_rule(vec![0.0, 1.0], 10);
    println!("{}", result.to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
