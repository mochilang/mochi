// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    } else {
        return x
    }
};
    let mut validate_inputs = |x_initials: Vec<f64>, step_size: f64, x_final: f64| {
    if (x_initials[((x_initials.len() as i64) - 1) as usize] >= x_final) {
        panic!("The final value of x must be greater than the initial values of x.");
    }
    if (step_size <= 0.0) {
        panic!("Step size must be positive.");
    }
    let mut i: i64 = 0;
    while (i < ((x_initials.len() as i64) - 1)) {
        let diff: f64 = (x_initials[(i + 1) as usize] - x_initials[i as usize]);
        if (abs_float((diff - step_size)) > 0.0000000001) {
            panic!("x-values must be equally spaced according to step size.");
        }
        i = (i + 1);
    }
};
    fn list_to_string(mut xs: Vec<f64>) -> String {
    let mut s: String = String::from("[");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if ((i + 1) < (xs.len() as i64)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    let mut adams_bashforth_step2 = |f: &mut dyn FnMut(f64, f64) -> f64, x_initials: Vec<f64>, y_initials: Vec<f64>, step_size: f64, x_final: f64| -> Vec<f64> {
    validate_inputs(x_initials.clone(), step_size, x_final);
    if (((x_initials.len() as i64) != 2) || ((y_initials.len() as i64) != 2)) {
        panic!("Insufficient initial points information.");
    }
    let mut x0: f64 = x_initials[0 as usize];
    let mut x1: f64 = x_initials[1 as usize];
    let mut y: Vec<f64> = vec![];
    y = { let mut _v = y.clone(); _v.push(y_initials[0 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[1 as usize]); _v };
    let n: i64 = (((x_final - x1) / step_size) as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let term: f64 = ((3.0 * f(x1, y[(i + 1) as usize])) - f(x0, y[i as usize]));
        let y_next: f64 = (y[(i + 1) as usize] + ((step_size / 2.0) * term));
        y = { let mut _v = y.clone(); _v.push(y_next); _v };
        x0 = x1;
        x1 = (x1 + step_size);
        i = (i + 1);
    }
    return y
};
    let mut adams_bashforth_step3 = |f: &mut dyn FnMut(f64, f64) -> f64, x_initials: Vec<f64>, y_initials: Vec<f64>, step_size: f64, x_final: f64| -> Vec<f64> {
    validate_inputs(x_initials.clone(), step_size, x_final);
    if (((x_initials.len() as i64) != 3) || ((y_initials.len() as i64) != 3)) {
        panic!("Insufficient initial points information.");
    }
    let mut x0: f64 = x_initials[0 as usize];
    let mut x1: f64 = x_initials[1 as usize];
    let mut x2: f64 = x_initials[2 as usize];
    let mut y: Vec<f64> = vec![];
    y = { let mut _v = y.clone(); _v.push(y_initials[0 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[1 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[2 as usize]); _v };
    let n: i64 = (((x_final - x2) / step_size) as i64);
    let mut i: i64 = 0;
    while (i <= n) {
        let term: f64 = (((23.0 * f(x2, y[(i + 2) as usize])) - (16.0 * f(x1, y[(i + 1) as usize]))) + (5.0 * f(x0, y[i as usize])));
        let y_next: f64 = (y[(i + 2) as usize] + ((step_size / 12.0) * term));
        y = { let mut _v = y.clone(); _v.push(y_next); _v };
        x0 = x1;
        x1 = x2;
        x2 = (x2 + step_size);
        i = (i + 1);
    }
    return y
};
    let mut adams_bashforth_step4 = |f: &mut dyn FnMut(f64, f64) -> f64, x_initials: Vec<f64>, y_initials: Vec<f64>, step_size: f64, x_final: f64| -> Vec<f64> {
    validate_inputs(x_initials.clone(), step_size, x_final);
    if (((x_initials.len() as i64) != 4) || ((y_initials.len() as i64) != 4)) {
        panic!("Insufficient initial points information.");
    }
    let mut x0: f64 = x_initials[0 as usize];
    let mut x1: f64 = x_initials[1 as usize];
    let mut x2: f64 = x_initials[2 as usize];
    let mut x3: f64 = x_initials[3 as usize];
    let mut y: Vec<f64> = vec![];
    y = { let mut _v = y.clone(); _v.push(y_initials[0 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[1 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[2 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[3 as usize]); _v };
    let n: i64 = (((x_final - x3) / step_size) as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let term: f64 = ((((55.0 * f(x3, y[(i + 3) as usize])) - (59.0 * f(x2, y[(i + 2) as usize]))) + (37.0 * f(x1, y[(i + 1) as usize]))) - (9.0 * f(x0, y[i as usize])));
        let y_next: f64 = (y[(i + 3) as usize] + ((step_size / 24.0) * term));
        y = { let mut _v = y.clone(); _v.push(y_next); _v };
        x0 = x1;
        x1 = x2;
        x2 = x3;
        x3 = (x3 + step_size);
        i = (i + 1);
    }
    return y
};
    let mut adams_bashforth_step5 = |f: &mut dyn FnMut(f64, f64) -> f64, x_initials: Vec<f64>, y_initials: Vec<f64>, step_size: f64, x_final: f64| -> Vec<f64> {
    validate_inputs(x_initials.clone(), step_size, x_final);
    if (((x_initials.len() as i64) != 5) || ((y_initials.len() as i64) != 5)) {
        panic!("Insufficient initial points information.");
    }
    let mut x0: f64 = x_initials[0 as usize];
    let mut x1: f64 = x_initials[1 as usize];
    let mut x2: f64 = x_initials[2 as usize];
    let mut x3: f64 = x_initials[3 as usize];
    let mut x4: f64 = x_initials[4 as usize];
    let mut y: Vec<f64> = vec![];
    y = { let mut _v = y.clone(); _v.push(y_initials[0 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[1 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[2 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[3 as usize]); _v };
    y = { let mut _v = y.clone(); _v.push(y_initials[4 as usize]); _v };
    let n: i64 = (((x_final - x4) / step_size) as i64);
    let mut i: i64 = 0;
    while (i <= n) {
        let term: f64 = (((((1901.0 * f(x4, y[(i + 4) as usize])) - (2774.0 * f(x3, y[(i + 3) as usize]))) - (2616.0 * f(x2, y[(i + 2) as usize]))) - (1274.0 * f(x1, y[(i + 1) as usize]))) + (251.0 * f(x0, y[i as usize])));
        let y_next: f64 = (y[(i + 4) as usize] + ((step_size / 720.0) * term));
        y = { let mut _v = y.clone(); _v.push(y_next); _v };
        x0 = x1;
        x1 = x2;
        x2 = x3;
        x3 = x4;
        x4 = (x4 + step_size);
        i = (i + 1);
    }
    return y
};
    fn f_x(mut x: f64, mut y: f64) -> f64 {
    return x
};
    fn f_xy(mut x: f64, mut y: f64) -> f64 {
    return (x + y)
};
    let y2: Vec<f64> = adams_bashforth_step2(&mut f_x, vec![0.0, 0.2], vec![0.0, 0.0], 0.2, 1.0);
    println!("{}", list_to_string(y2.clone()));
    let y3: Vec<f64> = adams_bashforth_step3(&mut f_xy, vec![0.0, 0.2, 0.4], vec![0.0, 0.0, 0.04], 0.2, 1.0);
    println!("{}", y3[3 as usize].to_string());
    let y4: Vec<f64> = adams_bashforth_step4(&mut f_xy, vec![0.0, 0.2, 0.4, 0.6], vec![0.0, 0.0, 0.04, 0.128], 0.2, 1.0);
    println!("{}", y4[4 as usize].to_string());
    println!("{}", y4[5 as usize].to_string());
    let y5: Vec<f64> = adams_bashforth_step5(&mut f_xy, vec![0.0, 0.2, 0.4, 0.6, 0.8], vec![0.0, 0.0214, 0.0214, 0.22211, 0.42536], 0.2, 1.0);
    println!("{}", y5[((y5.len() as i64) - 1) as usize].to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
