// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    while (y != 0) {
        let t: i64 = (x % y);
        x = y;
        y = t;
    }
    if (x < 0) {
        return -x
    }
    return x
};
    let mut proper_fractions = |den: i64| -> Vec<String> {
    if (den < 0) {
        panic!("The Denominator Cannot be less than 0");
    }
    let mut res: Vec<String> = vec![];
    let mut n: i64 = 1;
    while (n < den) {
        if (gcd(n, den) == 1) {
            res = { let mut _v = res.clone(); _v.push(format!("{}{}", format!("{}{}", n.to_string(), "/"), den.to_string())); _v };
        }
        n = (n + 1);
    }
    return res
};
    let mut test_proper_fractions = || {
    let a: Vec<String> = proper_fractions(10);
    if (a != vec![String::from("1/10").clone(), String::from("3/10").clone(), String::from("7/10").clone(), String::from("9/10").clone()]) {
        panic!("test 10 failed");
    }
    let b: Vec<String> = proper_fractions(5);
    if (b != vec![String::from("1/5").clone(), String::from("2/5").clone(), String::from("3/5").clone(), String::from("4/5").clone()]) {
        panic!("test 5 failed");
    }
    let c: Vec<String> = proper_fractions(0);
    if (c != vec![]) {
        panic!("test 0 failed");
    }
};
    let mut mochi_main = || {
    test_proper_fractions();
    println!("{}", format!("{:?}", proper_fractions(10)));
    println!("{}", format!("{:?}", proper_fractions(5)));
    println!("{}", format!("{:?}", proper_fractions(0)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
