// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exp_approx(mut x: f64) -> f64 {
    let mut sum: f64 = 1.0;
    let mut term: f64 = 1.0;
    let mut i: i64 = 1;
    while (i <= 20) {
        term = ((term * x) / (i as f64));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    let mut f = {
fn f(exp_approx: &mut dyn FnMut(f64) -> f64, x: f64) -> f64 {
    return ((8.0 * x) - (2.0 * exp_approx(-x)))
}
|x: f64| -> f64 { f(&mut exp_approx, x) }
};
    let mut secant_method = |lower_bound: f64, upper_bound: f64, repeats: i64| -> f64 {
    let mut x0: f64 = lower_bound;
    let mut x1: f64 = upper_bound;
    let mut i: i64 = 0;
    while (i < repeats) {
        let fx1: f64 = f(x1);
        let fx0: f64 = f(x0);
        let new_x: f64 = (x1 - ((fx1 * (x1 - x0)) / (fx1 - fx0)));
        x0 = x1;
        x1 = new_x;
        i = (i + 1);
    }
    return x1
};
    println!("{}", secant_method(1.0, 3.0, 2).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
