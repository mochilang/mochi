// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn runge_kutta_fehlberg_45(func: &mut dyn FnMut(f64, f64) -> f64, mut x_initial: f64, mut y_initial: f64, mut step_size: f64, mut x_final: f64) -> Vec<f64> {
    if (x_initial >= x_final) {
        panic!("The final value of x must be greater than initial value of x.");
    }
    if (step_size <= 0.0) {
        panic!("Step size must be positive.");
    }
    let n: i64 = (((x_final - x_initial) / step_size) as i64);
    let mut ys: Vec<f64> = vec![];
    let mut x: f64 = x_initial;
    let mut y: f64 = y_initial;
    ys = { let mut _v = ys.clone(); _v.push(y); _v };
    let mut i: i64 = 0;
    while (i < n) {
        let k1: f64 = (step_size * func(x, y));
        let k2: f64 = (step_size * func((x + (step_size / 4.0)), (y + (k1 / 4.0))));
        let k3: f64 = (step_size * func((x + ((3.0 / 8.0) * step_size)), ((y + ((3.0 / 32.0) * k1)) + ((9.0 / 32.0) * k2))));
        let k4: f64 = (step_size * func((x + ((12.0 / 13.0) * step_size)), (((y + ((1932.0 / 2197.0) * k1)) - ((7200.0 / 2197.0) * k2)) + ((7296.0 / 2197.0) * k3))));
        let k5: f64 = (step_size * func((x + step_size), ((((y + ((439.0 / 216.0) * k1)) - (8.0 * k2)) + ((3680.0 / 513.0) * k3)) - ((845.0 / 4104.0) * k4))));
        let k6: f64 = (step_size * func((x + (step_size / 2.0)), (((((y - ((8.0 / 27.0) * k1)) + (2.0 * k2)) - ((3544.0 / 2565.0) * k3)) + ((1859.0 / 4104.0) * k4)) - ((11.0 / 40.0) * k5))));
        y = (((((y + ((16.0 / 135.0) * k1)) + ((6656.0 / 12825.0) * k3)) + ((28561.0 / 56430.0) * k4)) - ((9.0 / 50.0) * k5)) + ((2.0 / 55.0) * k6));
        x = (x + step_size);
        ys = { let mut _v = ys.clone(); _v.push(y); _v };
        i = (i + 1);
    }
    return ys
};
    let mut mochi_main = || {
    let mut f1 = |x: f64, y: f64| -> f64 {
    return (1.0 + (y * y))
};
    let y1: Vec<f64> = runge_kutta_fehlberg_45(&mut f1, 0.0, 0.0, 0.2, 1.0);
    println!("{}", format!("{:?}", y1[1 as usize]));
    let mut f2 = |x: f64, y: f64| -> f64 {
    return x
};
    let y2: Vec<f64> = runge_kutta_fehlberg_45(&mut f2, -1.0, 0.0, 0.2, 0.0);
    println!("{}", format!("{:?}", y2[1 as usize]));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
