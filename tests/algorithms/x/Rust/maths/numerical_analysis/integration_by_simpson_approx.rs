// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_N_STEPS: i64 = 1000;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 10.0);
        i = (i + 1);
    }
    return p
};
        let mut round = |x: f64, n: i64| -> f64 {
    let m: f64 = pow10(n);
    return (floor(((x * m) + 0.5)) / m)
};
        let mut simpson_integration = |f: &mut dyn FnMut(f64) -> f64, a: f64, b: f64, precision: i64| -> f64 {
    if (precision <= 0) {
        panic!("precision should be positive");
    }
    let h: f64 = ((b - a) / (unsafe { g_N_STEPS.clone() } as f64));
    let mut result: f64 = (f(a) + f(b));
    let mut i: i64 = 1;
    while (i < unsafe { g_N_STEPS.clone() }) {
        let x: f64 = (a + (h * (i as f64)));
        if ((i % 2) == 1) {
            result = (result + (4.0 * f(x)));
        } else {
            result = (result + (2.0 * f(x)));
        }
        i = (i + 1);
    }
    result = (result * (h / 3.0));
    let r: f64 = round(result, precision);
    return r
};
        fn square(mut x: f64) -> f64 {
    return (x * x)
};
        println!("{}", simpson_integration(&mut square, 1.0, 2.0, 3).to_string());
        println!("{}", simpson_integration(&mut square, 3.45, 3.2, 1).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
