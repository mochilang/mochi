// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn fx(mut x: f64, mut a: f64) -> f64 {
    return ((x * x) - a)
};
    fn fx_derivative(mut x: f64) -> f64 {
    return (2.0 * x)
};
    fn get_initial_point(mut a: f64) -> f64 {
    let mut start: f64 = 2.0;
    while (start <= a) {
        start = (start * start);
    }
    return start
};
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    let mut square_root_iterative = |a: f64, max_iter: i64, tolerance: f64| -> f64 {
    if (a < 0.0) {
        panic!("math domain error");
    }
    let mut value: f64 = get_initial_point(a);
    let mut i: i64 = 0;
    while (i < max_iter) {
        let prev_value: f64 = value;
        value = (value - (fx(value, a) / fx_derivative(value)));
        if (abs_float((prev_value - value)) < tolerance) {
            return value
        }
        i = (i + 1);
    }
    return value
};
    let r1: f64 = square_root_iterative(4.0, 9999, 0.00000000000001);
    println!("{}", r1.to_string());
    let r2: f64 = square_root_iterative(3.2, 9999, 0.00000000000001);
    println!("{}", r2.to_string());
    let r3: f64 = square_root_iterative(140.0, 9999, 0.00000000000001);
    println!("{}", r3.to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
