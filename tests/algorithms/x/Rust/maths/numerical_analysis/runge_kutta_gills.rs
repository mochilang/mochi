// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sqrt(mut x: f64) -> f64 {
    let mut guess: f64 = if (x > 1.0) { (x / 2.0) } else { 1.0 };
    let mut i: i64 = 0;
    while (i < 20) {
        guess = (0.5 * (guess + (x / guess)));
        i = (i + 1);
    }
    return guess
};
    let mut runge_kutta_gills = |func: &mut dyn FnMut(f64, f64) -> f64, x_initial: f64, y_initial: f64, step_size: f64, x_final: f64| -> Vec<f64> {
    if (x_initial >= x_final) {
        panic!("The final value of x must be greater than initial value of x.");
    }
    if (step_size <= 0.0) {
        panic!("Step size must be positive.");
    }
    let n: i64 = (((x_final - x_initial) / step_size) as i64);
    let mut y: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        y = { let mut _v = y.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    y[0 as usize] = y_initial;
    let mut xi: f64 = x_initial;
    let mut idx: i64 = 0;
    let root2: f64 = sqrt(2.0);
    while (idx < n) {
        let k1: f64 = (step_size * func(xi, y[idx as usize]));
        let k2: f64 = (step_size * func((xi + (step_size / 2.0)), (y[idx as usize] + (k1 / 2.0))));
        let k3: f64 = (step_size * func((xi + (step_size / 2.0)), ((y[idx as usize] + ((-0.5 + (1.0 / root2)) * k1)) + ((1.0 - (1.0 / root2)) * k2))));
        let k4: f64 = (step_size * func((xi + step_size), ((y[idx as usize] - ((1.0 / root2) * k2)) + ((1.0 + (1.0 / root2)) * k3))));
        y[(idx + 1) as usize] = (y[idx as usize] + ((((k1 + ((2.0 - root2) * k2)) + ((2.0 + root2) * k3)) + k4) / 6.0));
        xi = (xi + step_size);
        idx = (idx + 1);
    }
    return y
};
    fn f1(mut x: f64, mut y: f64) -> f64 {
    return ((x - y) / 2.0)
};
    let y1: Vec<f64> = runge_kutta_gills(&mut f1, 0.0, 3.0, 0.2, 5.0);
    println!("{}", y1[((y1.len() as i64) - 1) as usize].to_string());
    let mut f2 = |x: f64, y: f64| -> f64 {
    return x
};
    let y2: Vec<f64> = runge_kutta_gills(&mut f2, -1.0, 0.0, 0.2, 0.0);
    println!("{}", format!("{:?}", y2));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
