// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn runge_kutta(f: &mut dyn FnMut(f64, f64) -> f64, mut y0: f64, mut x0: f64, mut h: f64, mut x_end: f64) -> Vec<f64> {
    let span: f64 = ((x_end - x0) / h);
    let mut n: i64 = (span as i64);
    if ((n as f64) < span) {
        n = (n + 1);
    }
    let mut y: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (n + 1)) {
        y = { let mut _v = y.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    y[0 as usize] = y0;
    let mut x: f64 = x0;
    let mut k: i64 = 0;
    while (k < n) {
        let k1: f64 = f(x, y[k as usize]);
        let k2: f64 = f((x + (0.5 * h)), (y[k as usize] + ((0.5 * h) * k1)));
        let k3: f64 = f((x + (0.5 * h)), (y[k as usize] + ((0.5 * h) * k2)));
        let k4: f64 = f((x + h), (y[k as usize] + (h * k3)));
        y[(k + 1) as usize] = (y[k as usize] + (((1.0 / 6.0) * h) * (((k1 + (2.0 * k2)) + (2.0 * k3)) + k4)));
        x = (x + h);
        k = (k + 1);
    }
    return y
};
    let mut test_runge_kutta = || {
    let mut f = |x: f64, y: f64| -> f64 {
    return y
};
    let result: Vec<f64> = runge_kutta(&mut f, 1.0, 0.0, 0.01, 5.0);
    let last: f64 = result[((result.len() as i64) - 1) as usize];
    let expected: f64 = 148.41315904125113;
    let mut diff: f64 = (last - expected);
    if (diff < 0.0) {
        diff = -diff;
    }
    if (diff > 0.000001) {
        panic!("runge_kutta failed");
    }
};
    let mut mochi_main = || {
    test_runge_kutta();
    let mut f = |x: f64, y: f64| -> f64 {
    return y
};
    let r: Vec<f64> = runge_kutta(&mut f, 1.0, 0.0, 0.1, 1.0);
    println!("{}", r[((r.len() as i64) - 1) as usize].to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
