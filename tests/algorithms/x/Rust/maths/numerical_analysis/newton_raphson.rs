// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct NRResult {
    root: f64,
    error: f64,
    steps: Vec<f64>,
}
impl std::fmt::Display for NRResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"root\": {}", self.root)?;
        write!(f, ", ")?;
        write!(f, "\"error\": {}", self.error)?;
        write!(f, ", ")?;
        write!(f, "\"steps\": {:?}", self.steps)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    } else {
        return x
    }
};
    fn fail(mut msg: String) {
    println!("{}", format!("{}{}", "error: ", msg));
};
    fn calc_derivative(f: &mut dyn FnMut(f64) -> f64, mut x: f64, mut delta_x: f64) -> f64 {
    return ((f((x + (delta_x / 2.0))) - f((x - (delta_x / 2.0)))) / delta_x)
};
    let mut newton_raphson = |f: &mut dyn FnMut(f64) -> f64, x0: f64, max_iter: i64, step: f64, max_error: f64, log_steps: bool| -> NRResult {
    let mut a: f64 = x0;
    let mut steps: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < max_iter) {
        if log_steps {
            steps = { let mut _v = steps.clone(); _v.push(a); _v };
        }
        let err: f64 = abs_float(f(a));
        if (err < max_error) {
            return NRResult {root: a, error: err, steps: steps.clone()}
        }
        let der: f64 = calc_derivative(&mut f, a, step);
        if (der == 0.0) {
            fail(String::from("No converging solution found, zero derivative"));
            return NRResult {root: a, error: err, steps: steps.clone()}
        }
        a = (a - (f(a) / der));
        i = (i + 1);
    }
    fail(String::from("No converging solution found, iteration limit reached"));
    return NRResult {root: a, error: abs_float(f(a)), steps: steps.clone()}
};
    fn poly(mut x: f64) -> f64 {
    return (((x * x) - (5.0 * x)) + 2.0)
};
    let result: NRResult = newton_raphson(&mut poly, 0.4, 20, 0.000001, 0.000001, false);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "root = ", result.root.to_string()), ", error = "), result.error.to_string()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
