// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ucal(mut u: f64, mut p: i64) -> f64 {
    let mut temp: f64 = u;
    let mut i: i64 = 1;
    while (i < p) {
        temp = (temp * (u - (i as f64)));
        i = (i + 1);
    }
    return temp
};
    fn factorial(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 2;
    while (i <= n) {
        result = (result * (i as f64));
        i = (i + 1);
    }
    return result
};
    let mut newton_forward_interpolation = |x: Vec<f64>, y0: Vec<f64>, value: f64| -> f64 {
    let n: i64 = (x.len() as i64);
    let mut y: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
            j = (j + 1);
        }
        y = { let mut _v = y.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        y[i as usize][0 as usize] = y0[i as usize];
        i = (i + 1);
    }
    let mut i1: i64 = 1;
    while (i1 < n) {
        let mut j1: i64 = 0;
        while (j1 < (n - i1)) {
            y[j1 as usize][i1 as usize] = (y[(j1 + 1) as usize].clone()[(i1 - 1) as usize] - y[j1 as usize].clone()[(i1 - 1) as usize]);
            j1 = (j1 + 1);
        }
        i1 = (i1 + 1);
    }
    let u: f64 = ((value - x[0 as usize]) / (x[1 as usize] - x[0 as usize]));
    let mut sum: f64 = y[0 as usize].clone()[0 as usize];
    let mut k: i64 = 1;
    while (k < n) {
        sum = (sum + ((ucal(u, k) * y[0 as usize].clone()[k as usize]) / factorial(k)));
        k = (k + 1);
    }
    return sum
};
    let x_points: Vec<f64> = vec![0.0, 1.0, 2.0, 3.0];
    let y_points: Vec<f64> = vec![0.0, 1.0, 8.0, 27.0];
    println!("{}", newton_forward_interpolation(x_points.clone(), y_points.clone(), 1.5).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
