// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct NevilleResult {
    value: f64,
    table: Vec<Vec<f64>>,
}
impl std::fmt::Display for NevilleResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"table\": {:?}", self.table)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn neville_interpolate(mut x_points: Vec<f64>, mut y_points: Vec<f64>, mut x0: f64) -> NevilleResult {
    let n: i64 = (x_points.len() as i64);
    let mut q: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
            j = (j + 1);
        }
        q = { let mut _v = q.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        q[i as usize][1 as usize] = y_points[i as usize];
        i = (i + 1);
    }
    let mut col: i64 = 2;
    while (col < n) {
        let mut row_idx: i64 = col;
        while (row_idx < n) {
            q[row_idx as usize][col as usize] = ((((x0 - x_points[((row_idx - col) + 1) as usize]) * q[row_idx as usize].clone()[(col - 1) as usize]) - ((x0 - x_points[row_idx as usize]) * q[(row_idx - 1) as usize].clone()[(col - 1) as usize])) / (x_points[row_idx as usize] - x_points[((row_idx - col) + 1) as usize]));
            row_idx = (row_idx + 1);
        }
        col = (col + 1);
    }
    return NevilleResult {value: q[(n - 1) as usize].clone()[(n - 1) as usize], table: q.clone()}
};
    let mut test_neville = || {
    let xs: Vec<f64> = vec![1.0, 2.0, 3.0, 4.0, 6.0];
    let ys: Vec<f64> = vec![6.0, 7.0, 8.0, 9.0, 11.0];
    let r1: NevilleResult = neville_interpolate(xs.clone(), ys.clone(), 5.0);
    if (r1.value != 10.0) {
        panic!("neville_interpolate at 5 failed");
    }
    let r2: NevilleResult = neville_interpolate(xs.clone(), ys.clone(), 99.0);
    if (r2.value != 104.0) {
        panic!("neville_interpolate at 99 failed");
    }
};
    let mut mochi_main = || {
    test_neville();
    let xs: Vec<f64> = vec![1.0, 2.0, 3.0, 4.0, 6.0];
    let ys: Vec<f64> = vec![6.0, 7.0, 8.0, 9.0, 11.0];
    let r: NevilleResult = neville_interpolate(xs.clone(), ys.clone(), 5.0);
    println!("{}", format!("{:?}", r.value));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
