// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    } else {
        return x
    }
};
    let mut bisection = |f: &mut dyn FnMut(f64) -> f64, a: f64, b: f64| -> f64 {
    let mut start: f64 = a;
    let mut end: f64 = b;
    if (f(a) == 0.0) {
        return a
    }
    if (f(b) == 0.0) {
        return b
    }
    if ((f(a) * f(b)) > 0.0) {
        panic!("could not find root in given interval.");
    }
    let mut mid: f64 = (start + ((end - start) / 2.0));
    while (abs_float((start - mid)) > 0.0000001) {
        let fmid: f64 = f(mid);
        if (fmid == 0.0) {
            return mid
        }
        if ((fmid * f(start)) < 0.0) {
            end = mid;
        } else {
            start = mid;
        }
        mid = (start + ((end - start) / 2.0));
    }
    return mid
};
    fn f(mut x: f64) -> f64 {
    return ((((x * x) * x) - (2.0 * x)) - 5.0)
};
    fn mochi_main() {
    println!("{}", bisection(&mut f, 1.0, 1000.0).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
