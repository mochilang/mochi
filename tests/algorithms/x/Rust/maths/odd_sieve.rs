// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn odd_sieve(mut num: i64) -> Vec<i64> {
    if (num <= 2) {
        return vec![]
    }
    if (num == 3) {
        return vec![2]
    }
    let size: i64 = ((num / 2) - 1);
    let mut sieve: Vec<bool> = vec![];
    let mut idx: i64 = 0;
    while (idx < size) {
        sieve = { let mut _v = sieve.clone(); _v.push(true); _v };
        idx = (idx + 1);
    }
    let mut i: i64 = 3;
    while ((i * i) <= num) {
        let s_idx: i64 = ((i / 2) - 1);
        if sieve[s_idx as usize] {
            let mut j: i64 = (i * i);
            while (j < num) {
                let j_idx: i64 = ((j / 2) - 1);
                sieve[j_idx as usize] = false;
                j = (j + (2 * i));
            }
        }
        i = (i + 2);
    }
    let mut primes: Vec<i64> = vec![2];
    let mut n: i64 = 3;
    let mut k: i64 = 0;
    while (n < num) {
        if sieve[k as usize] {
            primes = { let mut _v = primes.clone(); _v.push(n); _v };
        }
        n = (n + 2);
        k = (k + 1);
    }
    return primes
};
    println!("{:?}", format!("{:?}", odd_sieve(2)));
    println!("{:?}", format!("{:?}", odd_sieve(3)));
    println!("{:?}", format!("{:?}", odd_sieve(10)));
    println!("{:?}", format!("{:?}", odd_sieve(20)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
