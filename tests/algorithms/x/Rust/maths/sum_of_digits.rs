// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn sum_of_digits(mut n: i64) -> i64 {
    let mut m: i64 = abs_int(n);
    let mut res: i64 = 0;
    while (m > 0) {
        res = (res + (m % 10));
        m = (m / 10);
    }
    return res
};
    fn sum_of_digits_recursion(mut n: i64) -> i64 {
    let m: i64 = abs_int(n);
    if (m < 10) {
        return m
    }
    return ((m % 10) + sum_of_digits_recursion((m / 10)))
};
    fn sum_of_digits_compact(mut n: i64) -> i64 {
    let s = abs_int(n).to_string();
    let mut res: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        res = (res + s[i as usize]);
        i = (i + 1);
    }
    return res
};
    fn test_sum_of_digits() {
    if (sum_of_digits(12345) != 15) {
        panic!("sum_of_digits 12345 failed");
    }
    if (sum_of_digits(123) != 6) {
        panic!("sum_of_digits 123 failed");
    }
    if (sum_of_digits(-123) != 6) {
        panic!("sum_of_digits -123 failed");
    }
    if (sum_of_digits(0) != 0) {
        panic!("sum_of_digits 0 failed");
    }
    if (sum_of_digits_recursion(12345) != 15) {
        panic!("recursion 12345 failed");
    }
    if (sum_of_digits_recursion(123) != 6) {
        panic!("recursion 123 failed");
    }
    if (sum_of_digits_recursion(-123) != 6) {
        panic!("recursion -123 failed");
    }
    if (sum_of_digits_recursion(0) != 0) {
        panic!("recursion 0 failed");
    }
    if (sum_of_digits_compact(12345) != 15) {
        panic!("compact 12345 failed");
    }
    if (sum_of_digits_compact(123) != 6) {
        panic!("compact 123 failed");
    }
    if (sum_of_digits_compact(-123) != 6) {
        panic!("compact -123 failed");
    }
    if (sum_of_digits_compact(0) != 0) {
        panic!("compact 0 failed");
    }
};
    fn mochi_main() {
    test_sum_of_digits();
    println!("{}", sum_of_digits(12345).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
