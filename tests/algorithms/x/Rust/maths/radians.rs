// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        let mut radians = |degree: f64| -> f64 {
    return (degree / (180.0 / unsafe { g_PI.clone() }))
};
        fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        let mut almost_equal = |a: f64, b: f64| -> bool {
    return (abs_float((a - b)) <= 0.00000001)
};
        let mut test_radians = || {
    if !almost_equal(radians(180.0), unsafe { g_PI.clone() }) {
        panic!("radians 180 failed");
    }
    if !almost_equal(radians(92.0), 1.6057029118347832) {
        panic!("radians 92 failed");
    }
    if !almost_equal(radians(274.0), 4.782202150464463) {
        panic!("radians 274 failed");
    }
    if !almost_equal(radians(109.82), 1.9167205845401725) {
        panic!("radians 109.82 failed");
    }
};
        let mut mochi_main = || {
    test_radians();
    println!("{}", radians(180.0).to_string());
    println!("{}", radians(92.0).to_string());
    println!("{}", radians(274.0).to_string());
    println!("{}", radians(109.82).to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
