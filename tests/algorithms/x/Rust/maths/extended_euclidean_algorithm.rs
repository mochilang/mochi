// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Coeffs {
    x: i64,
    y: i64,
}
impl std::fmt::Display for Coeffs {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn abs_val(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn extended_euclidean_algorithm(mut a: i64, mut b: i64) -> Coeffs {
    if (abs_val(a) == 1) {
        return Coeffs {x: a, y: 0}
    }
    if (abs_val(b) == 1) {
        return Coeffs {x: 0, y: b}
    }
    let mut old_remainder: i64 = a;
    let mut remainder: i64 = b;
    let mut old_coeff_a: i64 = 1;
    let mut coeff_a: i64 = 0;
    let mut old_coeff_b: i64 = 0;
    let mut coeff_b: i64 = 1;
    while (remainder != 0) {
        let quotient: i64 = (old_remainder / remainder);
        let temp_remainder: i64 = (old_remainder - (quotient * remainder));
        old_remainder = remainder;
        remainder = temp_remainder;
        let temp_a: i64 = (old_coeff_a - (quotient * coeff_a));
        old_coeff_a = coeff_a;
        coeff_a = temp_a;
        let temp_b: i64 = (old_coeff_b - (quotient * coeff_b));
        old_coeff_b = coeff_b;
        coeff_b = temp_b;
    }
    if (a < 0) {
        old_coeff_a = -old_coeff_a;
    }
    if (b < 0) {
        old_coeff_b = -old_coeff_b;
    }
    return Coeffs {x: old_coeff_a, y: old_coeff_b}
};
    fn test_extended_euclidean_algorithm() {
    let r1: Coeffs = extended_euclidean_algorithm(1, 24);
    if ((r1.x != 1) || (r1.y != 0)) {
        panic!("test1 failed");
    }
    let r2: Coeffs = extended_euclidean_algorithm(8, 14);
    if ((r2.x != 2) || (r2.y != -1)) {
        panic!("test2 failed");
    }
    let r3: Coeffs = extended_euclidean_algorithm(240, 46);
    if ((r3.x != -9) || (r3.y != 47)) {
        panic!("test3 failed");
    }
    let r4: Coeffs = extended_euclidean_algorithm(1, -4);
    if ((r4.x != 1) || (r4.y != 0)) {
        panic!("test4 failed");
    }
    let r5: Coeffs = extended_euclidean_algorithm(-2, -4);
    if ((r5.x != -1) || (r5.y != 0)) {
        panic!("test5 failed");
    }
    let r6: Coeffs = extended_euclidean_algorithm(0, -4);
    if ((r6.x != 0) || (r6.y != -1)) {
        panic!("test6 failed");
    }
    let r7: Coeffs = extended_euclidean_algorithm(2, 0);
    if ((r7.x != 1) || (r7.y != 0)) {
        panic!("test7 failed");
    }
};
    fn mochi_main() {
    test_extended_euclidean_algorithm();
    let res: Coeffs = extended_euclidean_algorithm(240, 46);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "(", res.x.to_string()), ", "), res.y.to_string()), ")"));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
