// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn primeFactors(mut n: i64) -> Vec<i64> {
    let mut i: i64 = 2;
    let mut factors: Vec<i64> = vec![];
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            factors = { let mut _v = factors.clone(); _v.push(i); _v };
            n = (n / i);
        } else {
            i = (i + 1);
        }
    }
    if (n > 1) {
        factors = { let mut _v = factors.clone(); _v.push(n); _v };
    }
    return factors
};
    fn isSquareFree(mut factors: Vec<i64>) -> bool {
    let mut seen: HashMap<i64, bool> = HashMap::new();
    for f in factors.iter().cloned() {
        if seen.contains_key(&f) {
            return false
        }
        seen.insert(f.clone(), true);
    }
    return true
};
    let mut mobius = |n: i64| -> i64 {
    let factors: Vec<i64> = primeFactors(n);
    if isSquareFree(factors.clone()) {
        return if (((factors.len() as i64) % 2) == 0) { 1 } else { -1 }
    }
    return 0
};
    println!("{}", mobius(24));
    println!("{}", mobius(-1));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
