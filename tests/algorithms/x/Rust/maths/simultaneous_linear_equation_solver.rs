// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
    fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 10.0);
        i = (i + 1);
    }
    return p
};
    fn round(mut x: f64, mut n: i64) -> f64 {
    let m: f64 = pow10(n);
    return (floor(((x * m) + 0.5)) / m)
};
    fn clone_matrix(mut mat: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut new_mat: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(mat[i as usize].clone()[j as usize]); _v };
            j = (j + 1);
        }
        new_mat = { let mut _v = new_mat.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return new_mat
};
    fn solve_simultaneous(mut equations: Vec<Vec<f64>>) -> Vec<f64> {
    let n: i64 = (equations.len() as i64);
    if (n == 0) {
        panic!("solve_simultaneous() requires n lists of length n+1");
    }
    let m: i64 = (n + 1);
    let mut i: i64 = 0;
    while (i < n) {
        if ((equations[i as usize].clone().len() as i64) != m) {
            panic!("solve_simultaneous() requires n lists of length n+1");
        }
        i = (i + 1);
    }
    let mut a: Vec<Vec<f64>> = clone_matrix(equations.clone());
    let mut row: i64 = 0;
    while (row < n) {
        let mut pivot: i64 = row;
        while ((pivot < n) && (a[pivot as usize].clone()[row as usize] == 0.0)) {
            pivot = (pivot + 1);
        }
        if (pivot == n) {
            panic!("solve_simultaneous() requires at least 1 full equation");
        }
        if (pivot != row) {
            let temp: Vec<f64> = a[row as usize].clone();
            a[row as usize] = a[pivot as usize].clone();
            a[pivot as usize] = temp.clone();
        }
        let pivot_val: f64 = a[row as usize].clone()[row as usize];
        let mut col: i64 = 0;
        while (col < m) {
            a[row as usize][col as usize] = (a[row as usize].clone()[col as usize] / pivot_val);
            col = (col + 1);
        }
        let mut r: i64 = 0;
        while (r < n) {
            if (r != row) {
                let factor: f64 = a[r as usize].clone()[row as usize];
                let mut c: i64 = 0;
                while (c < m) {
                    a[r as usize][c as usize] = (a[r as usize].clone()[c as usize] - (factor * a[row as usize].clone()[c as usize]));
                    c = (c + 1);
                }
            }
            r = (r + 1);
        }
        row = (row + 1);
    }
    let mut res: Vec<f64> = vec![];
    let mut k: i64 = 0;
    while (k < n) {
        res = { let mut _v = res.clone(); _v.push(round(a[k as usize].clone()[(m - 1) as usize], 5)); _v };
        k = (k + 1);
    }
    return res
};
    fn test_solver() {
    let a: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0].clone(), vec![4.0, 5.0, 6.0].clone()];
    let r1: Vec<f64> = solve_simultaneous(a.clone());
    if !((((r1.len() as i64) == 2) && (r1[0 as usize] == (0.0 - 1.0))) && (r1[1 as usize] == 2.0)) {
        panic!("test1 failed");
    }
    let b: Vec<Vec<f64>> = vec![vec![0.0, (0.0 - 3.0), 1.0, 7.0].clone(), vec![3.0, 2.0, (0.0 - 1.0), 11.0].clone(), vec![5.0, 1.0, (0.0 - 2.0), 12.0].clone()];
    let r2: Vec<f64> = solve_simultaneous(b.clone());
    if !(((((r2.len() as i64) == 3) && (r2[0 as usize] == 6.4)) && (r2[1 as usize] == 1.2)) && (r2[2 as usize] == 10.6)) {
        panic!("test2 failed");
    }
};
    fn mochi_main() {
    test_solver();
    let eq: Vec<Vec<f64>> = vec![vec![2.0, 1.0, 1.0, 1.0, 1.0, 4.0].clone(), vec![1.0, 2.0, 1.0, 1.0, 1.0, 5.0].clone(), vec![1.0, 1.0, 2.0, 1.0, 1.0, 6.0].clone(), vec![1.0, 1.0, 1.0, 2.0, 1.0, 7.0].clone(), vec![1.0, 1.0, 1.0, 1.0, 2.0, 8.0].clone()];
    println!("{}", format!("{:?}", solve_simultaneous(eq.clone())));
    println!("{}", format!("{:?}", solve_simultaneous(vec![vec![4.0, 2.0].clone()])));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
