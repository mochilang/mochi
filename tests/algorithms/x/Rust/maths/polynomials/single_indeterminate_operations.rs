// Generated by Mochi transpiler v0.10.67
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Polynomial {
    degree: i64,
    coefficients: Vec<f64>,
}
impl std::fmt::Display for Polynomial {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"degree\": {}", self.degree)?;
        write!(f, ", ")?;
        write!(f, "\"coefficients\": {:?}", self.coefficients)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn copy_list(mut xs: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    let mut polynomial_new = |degree: i64, coeffs: Vec<f64>| -> Polynomial {
    if ((coeffs.len() as i64) != (degree + 1)) {
        panic!("The number of coefficients should be equal to the degree + 1.");
    }
    return Polynomial {degree: degree, coefficients: copy_list(coeffs.clone())}
};
    let mut add = |p: Polynomial, q: Polynomial| -> Polynomial {
    if (p.degree > q.degree) {
        let mut coeffs: Vec<f64> = copy_list(p.coefficients.clone().clone());
        let mut i: i64 = 0;
        while (i <= q.degree) {
            coeffs[i as usize] = (coeffs[i as usize] + q.coefficients.clone()[i as usize]);
            i = (i + 1);
        }
        return Polynomial {degree: p.degree, coefficients: coeffs.clone()}
    } else {
        let mut coeffs: Vec<f64> = copy_list(q.coefficients.clone().clone());
        let mut i: i64 = 0;
        while (i <= p.degree) {
            coeffs[i as usize] = (coeffs[i as usize] + p.coefficients.clone()[i as usize]);
            i = (i + 1);
        }
        return Polynomial {degree: q.degree, coefficients: coeffs.clone()}
    }
};
    fn neg(mut p: Polynomial) -> Polynomial {
    let mut coeffs: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i <= p.degree) {
        coeffs = { let mut _v = coeffs.clone(); _v.push(-p.coefficients.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return Polynomial {degree: p.degree, coefficients: coeffs.clone()}
};
    let mut sub = |p: Polynomial, q: Polynomial| -> Polynomial {
    return add(p.clone(), neg(q.clone()))
};
    fn mul(mut p: Polynomial, mut q: Polynomial) -> Polynomial {
    let mut size: i64 = ((p.degree + q.degree) + 1);
    let mut coeffs: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        coeffs = { let mut _v = coeffs.clone(); _v.push(0.0); _v };
        i = (i + 1);
    }
    i = 0;
    while (i <= p.degree) {
        let mut j: i64 = 0;
        while (j <= q.degree) {
            coeffs[(i + j) as usize] = (coeffs[(i + j) as usize] + (p.coefficients.clone()[i as usize] * q.coefficients.clone()[j as usize]));
            j = (j + 1);
        }
        i = (i + 1);
    }
    return Polynomial {degree: (p.degree + q.degree), coefficients: coeffs.clone()}
};
    fn power(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    let mut evaluate = |p: Polynomial, x: f64| -> f64 {
    let mut result: f64 = 0.0;
    let mut i: i64 = 0;
    while (i <= p.degree) {
        result = (result + (p.coefficients.clone()[i as usize] * power(x, i)));
        i = (i + 1);
    }
    return result
};
    fn poly_to_string(mut p: Polynomial) -> String {
    let mut s: String = String::new();
    let mut i: i64 = p.degree;
    while (i >= 0) {
        let coeff: f64 = p.coefficients.clone()[i as usize];
        if (coeff != 0.0) {
            if ((s.len() as i64) > 0) {
                if (coeff > 0.0) {
                    s = format!("{}{}", s, " + ");
                } else {
                    s = format!("{}{}", s, " - ");
                }
            } else {
                if (coeff < 0.0) {
                    s = format!("{}{}", s, "-");
                }
            }
            let abs_coeff: f64 = if (coeff < 0.0) { -coeff } else { coeff };
            if (i == 0) {
                s = format!("{}{}", s, abs_coeff.to_string());
            } else if (i == 1) {
                s = format!("{}{}", format!("{}{}", s, abs_coeff.to_string()), "x");
            } else {
                s = format!("{}{}", format!("{}{}", format!("{}{}", s, abs_coeff.to_string()), "x^"), i.to_string());
            }
        }
        i = (i - 1);
    }
    if (s.as_str() == "") {
        s = String::from("0");
    }
    return s.clone()
};
    fn derivative(mut p: Polynomial) -> Polynomial {
    if (p.degree == 0) {
        return Polynomial {degree: 0, coefficients: vec![0.0]}
    }
    let mut coeffs: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < p.degree) {
        coeffs = { let mut _v = coeffs.clone(); _v.push((p.coefficients.clone()[(i + 1) as usize] * ((i + 1) as f64))); _v };
        i = (i + 1);
    }
    return Polynomial {degree: (p.degree - 1), coefficients: coeffs.clone()}
};
    fn integral(mut p: Polynomial, mut constant: f64) -> Polynomial {
    let mut coeffs: Vec<f64> = vec![constant];
    let mut i: i64 = 0;
    while (i <= p.degree) {
        coeffs = { let mut _v = coeffs.clone(); _v.push((p.coefficients.clone()[i as usize] / ((i + 1) as f64))); _v };
        i = (i + 1);
    }
    return Polynomial {degree: (p.degree + 1), coefficients: coeffs.clone()}
};
    fn equals(mut p: Polynomial, mut q: Polynomial) -> bool {
    if (p.degree != q.degree) {
        return false
    }
    let mut i: i64 = 0;
    while (i <= p.degree) {
        if (p.coefficients.clone()[i as usize] != q.coefficients.clone()[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    let mut not_equals = |p: Polynomial, q: Polynomial| -> bool {
    return !equals(p.clone(), q.clone())
};
    let mut test_polynomial = || {
    let p: Polynomial = polynomial_new(2, vec![1.0, 2.0, 3.0]);
    let q: Polynomial = polynomial_new(2, vec![1.0, 2.0, 3.0]);
    if (poly_to_string(add(p.clone(), q.clone())).as_str() != "6x^2 + 4x + 2") {
        panic!("add failed");
    }
    if (poly_to_string(sub(p.clone(), q.clone())).as_str() != "0") {
        panic!("sub failed");
    }
    if (evaluate(p.clone(), 2.0) != 17.0) {
        panic!("evaluate failed");
    }
    if (poly_to_string(derivative(p.clone())).as_str() != "6x + 2") {
        panic!("derivative failed");
    }
    let integ: String = poly_to_string(integral(p.clone(), 0.0)).clone();
    if (integ.as_str() != "1x^3 + 1x^2 + 1x") {
        panic!("integral failed");
    }
    if !equals(p.clone(), q.clone()) {
        panic!("equals failed");
    }
    if not_equals(p.clone(), q.clone()) {
        panic!("not_equals failed");
    }
};
    let mut mochi_main = || {
    test_polynomial();
    let p: Polynomial = polynomial_new(2, vec![1.0, 2.0, 3.0]);
    let d: Polynomial = derivative(p.clone());
    println!("{}", poly_to_string(d.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
