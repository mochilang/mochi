// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sqrt_newton(mut n: f64) -> f64 {
    if (n == 0.0) {
        return 0.0
    }
    let mut x: f64 = n;
    let mut i: i64 = 0;
    while (i < 20) {
        x = ((x + (n / x)) / 2.0);
        i = (i + 1);
    }
    return x
};
    fn hypot(mut a: f64, mut b: f64) -> f64 {
    return sqrt_newton(((a * a) + (b * b)))
};
    fn line_length(fnc: &mut impl FnMut(f64) -> f64, mut x_start: f64, mut x_end: f64, mut steps: i64) -> f64 {
    let mut x1: f64 = x_start;
    let mut fx1 = fnc(x_start);
    let mut length: f64 = 0.0;
    let mut i: i64 = 0;
    let step: f64 = ((x_end - x_start) / (1.0 * (steps as f64)));
    while (i < steps) {
        let x2: f64 = (step + x1);
        let fx2 = fnc(x2);
        length = (length + hypot((x2 - x1), ((fx2 - fx1) as f64)));
        x1 = x2;
        fx1 = fx2;
        i = (i + 1);
    }
    return length
};
    fn f1(mut x: f64) -> f64 {
    return x
};
    fn f2(mut x: f64) -> f64 {
    return 1.0
};
    fn f3(mut x: f64) -> f64 {
    return ((x * x) / 10.0)
};
    println!("{}", format!("{:?}", line_length(&mut f1, 0.0, 1.0, 10)));
    println!("{}", format!("{:?}", line_length(&mut f2, -5.5, 4.5, 100)));
    println!("{}", format!("{:?}", line_length(&mut f3, 0.0, 10.0, 1000)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
