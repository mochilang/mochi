// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn ln(mut x: f64) -> f64 {
    let mut t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        sum = (sum + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (2.0 * sum)
};
    fn log10(mut x: f64) -> f64 {
    return (ln(x) / ln(10.0))
};
    fn peak_signal_to_noise_ratio(mut original: Vec<Vec<i64>>, mut contrast: Vec<Vec<i64>>) -> f64 {
    let mut mse: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (original.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (original[i as usize].clone().len() as i64)) {
            let mut diff: f64 = ((original[i as usize].clone()[j as usize] - contrast[i as usize].clone()[j as usize]) as f64);
            mse = (mse + (diff * diff));
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut size: f64 = (((original.len() as i64) * (original[0 as usize].clone().len() as i64)) as f64);
    mse = (mse / size);
    if (mse == 0.0) {
        return 100.0
    }
    let mut PIXEL_MAX: f64 = 255.0;
    return (20.0 * log10((PIXEL_MAX / sqrtApprox(mse))))
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
