// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn _keys<K: std::cmp::Eq + std::hash::Hash + Clone, V>(m: HashMap<K, V>) -> Vec<K> {
    m.keys().cloned().collect()
}
static mut g_data: String = String::new();
fn main() {
    unsafe {
        g_data = String::from("01001100100111").clone();
                let _start: i64 = _now();
        unsafe fn to_binary(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut num: i64 = n;
    let mut res: String = String::from("").clone();
    while (num > 0) {
        let mut bit: i64 = (num % 2);
        res = format!("{}{}", bit.to_string(), res).to_string();
        num = (num / 2);
    }
    return res.clone()
};
        unsafe fn contains_key_int(m: &mut HashMap<String, i64>, key: &str) -> bool {
    for k in _keys(m.clone()).iter().cloned() {
        if (k == key) {
            return true
        }
    }
    return false
};
        unsafe fn lzw_compress(bits: &str) -> String {
    let mut dict: HashMap<String, i64> = HashMap::from([(String::from("0"), 0), (String::from("1"), 1)]);
    let mut current: String = String::from("").clone();
    let mut result: String = String::from("").clone();
    let mut index: i64 = 2;
    let mut i: i64 = 0;
    while (i < (bits.len() as i64)) {
        let mut ch: String = bits.chars().nth(i as usize).unwrap().to_string().clone();
        let mut candidate: String = format!("{}{}", current, ch).clone();
        if contains_key_int(&mut dict, &candidate) {
            current = candidate.clone();
        } else {
            result = format!("{}{}", result, to_binary(dict.get(current.as_str()).cloned().unwrap_or_default()));
            dict.insert(candidate.clone(), index);
            index = (index + 1);
            current = ch.clone();
        }
        i = (i + 1);
    }
    if (current.as_str() != "") {
        result = format!("{}{}", result, to_binary(dict.get(current.as_str()).cloned().unwrap_or_default()));
    }
    return result.clone()
};
        println!("{}", lzw_compress(&g_data));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
