// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct BWTResult {
    bwt_string: String,
    idx_original_string: i64,
}
impl std::fmt::Display for BWTResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"bwt_string\": \"{}\"", self.bwt_string)?;
        write!(f, ", ")?;
        write!(f, "\"idx_original_string\": {}", self.idx_original_string)?;
        write!(f, "}}")
    }
}

static mut g_s: String = String::new();
fn main() {
    unsafe {
        g_s = String::from("^BANANA").clone();
                let _start: i64 = _now();
        unsafe fn all_rotations(s: &str) -> Vec<String> {
    let mut n = (s.len() as i64);
    let mut rotations: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut rotation: String = format!("{}{}", { let tmp = &s; tmp.chars().skip(i as usize).take((n - i) as usize).collect::<String>() }, { let tmp = &s; tmp.chars().skip(0 as usize).take((i - 0) as usize).collect::<String>() }).clone();
        rotations = { let mut _v = rotations.clone(); _v.push(rotation.clone()); _v };
        i = (i + 1);
    }
    return rotations
};
        unsafe fn sort_strings(mut arr: Vec<String>) -> Vec<String> {
    let mut n = (arr.len() as i64);
    let mut i: i64 = 1;
    while (i < n) {
        let mut key: String = arr[i as usize].clone().clone();
        let mut j: i64 = (i - 1);
        while ((j >= 0) && (arr[j as usize].clone().as_str() > key.as_str())) {
            arr[(j + 1) as usize] = arr[j as usize].clone();
            j = (j - 1);
        }
        arr[(j + 1) as usize] = key.clone();
        i = (i + 1);
    }
    return arr
};
        unsafe fn join_strings(mut arr: Vec<String>) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        res = format!("{}{}", res, arr[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn bwt_transform(s: &str) -> BWTResult {
    if (s == "") {
        panic!("input string must not be empty");
    }
    let mut rotations: Vec<String> = all_rotations(s);
    rotations = sort_strings(rotations.clone());
    let mut last_col: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (rotations.len() as i64)) {
        let mut word: String = rotations[i as usize].clone().clone();
        last_col = { let mut _v = last_col.clone(); _v.push({ let tmp = &word; tmp.chars().skip(((word.len() as i64) - 1) as usize).take(((word.len() as i64) - ((word.len() as i64) - 1)) as usize).collect::<String>() }); _v };
        i = (i + 1);
    }
    let mut bwt_string: String = join_strings(last_col.clone()).clone();
    let mut idx = index_of(rotations.clone(), s);
    return BWTResult {bwt_string: bwt_string.clone(), idx_original_string: idx}
};
        unsafe fn index_of(mut arr: Vec<String>, target: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize].clone() == target) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn reverse_bwt(bwt_string: &str, mut idx_original_string: i64) -> String {
    if (bwt_string == "") {
        panic!("bwt string must not be empty");
    }
    let mut n = (bwt_string.len() as i64);
    if ((idx_original_string < 0) || (idx_original_string >= n)) {
        panic!("index out of range");
    }
    let mut ordered_rotations: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        ordered_rotations = { let mut _v = ordered_rotations.clone(); _v.push("".to_string()); _v };
        i = (i + 1);
    }
    let mut iter: i64 = 0;
    while (iter < n) {
        let mut j: i64 = 0;
        while (j < n) {
            let mut ch: String = { let tmp = &bwt_string; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.clone();
            ordered_rotations[j as usize] = format!("{}{}", ch, ordered_rotations[j as usize].clone());
            j = (j + 1);
        }
        ordered_rotations = sort_strings(ordered_rotations.clone());
        iter = (iter + 1);
    }
    return ordered_rotations[idx_original_string as usize].clone().clone()
};
        let mut result: BWTResult = bwt_transform(&g_s);
        println!("{}", result.bwt_string);
        println!("{}", result.idx_original_string);
        println!("{}", reverse_bwt(&result.bwt_string, result.idx_original_string));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
