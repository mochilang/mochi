// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_sample: String = String::new();
fn main() {
    unsafe {
        g_sample = String::from("1011001");
                let _start: i64 = _now();
        unsafe fn list_contains(mut xs: Vec<String>, v: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == v) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn is_power_of_two(mut n: i64) -> bool {
    if (n < 1) {
        return false
    }
    let mut x: i64 = n;
    while (x > 1) {
        if ((x % 2) != 0) {
            return false
        }
        x = (x / 2);
    }
    return true
};
        unsafe fn bin_string(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut res: String = String::from("").clone();
    let mut x: i64 = n;
    while (x > 0) {
        let mut bit: i64 = (x % 2);
        res = format!("{}{}", bit.to_string(), res).to_string();
        x = (x / 2);
    }
    return res.clone()
};
        unsafe fn decompress_data(mut data_bits: String) -> String {
    let mut lexicon: HashMap<String, String> = HashMap::from([(String::from("0"), String::from("0")), (String::from("1"), String::from("1"))]);
    let mut keys: Vec<String> = vec![String::from("0"), String::from("1")];
    let mut result: String = String::from("");
    let mut curr_string: String = String::from("");
    let mut index: i64 = 2;
    let mut i: i64 = 0;
    while (i < (data_bits.len() as i64)) {
        curr_string = format!("{}{}", curr_string, { let tmp = &data_bits; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() });
        if !list_contains(keys.clone(), &curr_string) {
            i = (i + 1);
            continue
        }
        let mut last_match_id: String = lexicon.get(curr_string.as_str()).cloned().unwrap_or_default().clone();
        result = format!("{}{}", result, last_match_id);
        lexicon.insert(curr_string.clone(), format!("{}{}", last_match_id, "0"));
        if is_power_of_two(index) {
            let mut new_lex: HashMap<String, String> = HashMap::new();
            let mut new_keys: Vec<String> = vec![];
            let mut j: i64 = 0;
            while (j < (keys.len() as i64)) {
                let mut curr_key: String = keys[j as usize].clone().clone();
                new_lex.insert(format!("{}{}", "0", curr_key).clone(), lexicon.get(curr_key.as_str()).cloned().unwrap_or_default());
                new_keys = { let mut _v = new_keys.clone(); _v.push(format!("{}{}", "0", curr_key)); _v };
                j = (j + 1);
            }
            lexicon = new_lex.clone();
            keys = new_keys.clone();
        }
        let mut new_key: String = bin_string(index).clone();
        lexicon.insert(new_key.clone(), format!("{}{}", last_match_id, "1"));
        keys = { let mut _v = keys.clone(); _v.push(new_key.clone()); _v };
        index = (index + 1);
        curr_string = String::from("");
        i = (i + 1);
    }
    return result.clone()
};
        let mut decompressed: String = decompress_data(g_sample.clone()).clone();
        println!("{}", decompressed);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
