// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_example1: String = String::new();
static mut g_example2: String = String::new();
static mut g_example3: String = String::new();
fn main() {
    unsafe {
        g_example1 = String::from("AAAABBBCCDAA").clone();
        g_example2 = String::from("A").clone();
        g_example3 = String::from("AAADDDDDDFFFCCCAAVVVV").clone();
                let _start: i64 = _now();
        unsafe fn run_length_encode(text: &str) -> String {
    if ((text.len() as i64) == 0) {
        return String::from("")
    }
    let mut encoded: String = String::from("").clone();
    let mut count: i64 = 1;
    let mut i: i64 = 0;
    while (i < (text.len() as i64)) {
        if (((i + 1) < (text.len() as i64)) && (text.chars().nth(i as usize).unwrap().to_string().as_str() == text.chars().nth((i + 1) as usize).unwrap().to_string().as_str())) {
            count = (count + 1);
        } else {
            encoded = format!("{}{}", format!("{}{}", encoded, text.chars().nth(i as usize).unwrap().to_string()), count.to_string());
            count = 1;
        }
        i = (i + 1);
    }
    return encoded.clone()
};
        unsafe fn run_length_decode(encoded: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (encoded.len() as i64)) {
        let mut ch: String = encoded.chars().nth(i as usize).unwrap().to_string().clone();
        i = (i + 1);
        let mut num_str: String = String::from("").clone();
        while (((i < (encoded.len() as i64)) && (encoded.chars().nth(i as usize).unwrap().to_string().as_str() >= "0")) && (encoded.chars().nth(i as usize).unwrap().to_string().as_str() <= "9")) {
            num_str = format!("{}{}", num_str, encoded.chars().nth(i as usize).unwrap().to_string());
            i = (i + 1);
        }
        let mut count: i64 = { let n: i64 = num_str.parse().unwrap(); n };
        let mut j: i64 = 0;
        while (j < count) {
            res = format!("{}{}", res, ch);
            j = (j + 1);
        }
    }
    return res.clone()
};
        let mut encoded1: String = run_length_encode(&g_example1).clone();
        println!("{}", encoded1);
        println!("{}", run_length_decode(&encoded1));
        let mut encoded2: String = run_length_encode(&g_example2).clone();
        println!("{}", encoded2);
        println!("{}", run_length_decode(&encoded2));
        let mut encoded3: String = run_length_encode(&g_example3).clone();
        println!("{}", encoded3);
        println!("{}", run_length_decode(&encoded3));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
