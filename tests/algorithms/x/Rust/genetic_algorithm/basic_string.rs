// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct PairString {
    first: String,
    second: String,
}
impl std::fmt::Display for PairString {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"first\": \"{}\"", self.first)?;
        write!(f, ", ")?;
        write!(f, "\"second\": \"{}\"", self.second)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn evaluate(mut item: String, mut target: String) -> i64 {
    let mut score: i64 = 0;
    let mut i: i64 = 0;
    while ((i < (item.len() as i64)) && (i < (target.len() as i64))) {
        if ({ let tmp = &item; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == { let tmp = &target; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str()) {
            score = (score + 1);
        }
        i = (i + 1);
    }
    return score
};
    fn crossover(mut parent1: String, mut parent2: String) -> PairString {
    let cut: i64 = ((parent1.len() as i64) / 2);
    let child1: String = format!("{}{}", { let tmp = &parent1; tmp.chars().skip(0 as usize).take((cut - 0) as usize).collect::<String>() }, { let tmp = &parent2; tmp.chars().skip(cut as usize).take(((parent2.len() as i64) - cut) as usize).collect::<String>() }).clone();
    let child2: String = format!("{}{}", { let tmp = &parent2; tmp.chars().skip(0 as usize).take((cut - 0) as usize).collect::<String>() }, { let tmp = &parent1; tmp.chars().skip(cut as usize).take(((parent1.len() as i64) - cut) as usize).collect::<String>() }).clone();
    return PairString {first: child1.clone(), second: child2.clone()}
};
    fn mutate(mut child: String, mut genes: Vec<String>) -> String {
    if ((child.len() as i64) == 0) {
        return child
    }
    let gene: String = genes[0 as usize].clone().clone();
    return format!("{}{}", { let tmp = &child; tmp.chars().skip(0 as usize).take((((child.len() as i64) - 1) - 0) as usize).collect::<String>() }, gene).clone()
};
    fn mochi_main() {
    println!("{}", evaluate(String::from("Helxo Worlx"), String::from("Hello World")).to_string());
    let pair: PairString = crossover(String::from("123456"), String::from("abcdef"));
    println!("{}", pair.first.clone());
    println!("{}", pair.second.clone());
    let r#mut: String = mutate(String::from("123456"), vec![String::from("A").clone(), String::from("B").clone(), String::from("C").clone(), String::from("D").clone(), String::from("E").clone(), String::from("F").clone()]).clone();
    println!("{}", r#mut);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
