// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn to_float(mut x: i64) -> f64 {
    return ((x as f64) * 1.0)
};
    fn ln(mut x: f64) -> f64 {
    return x.ln()
};
    fn exp(mut x: f64) -> f64 {
    return x.exp()
};
    fn pow_float(mut base: f64, mut exponent: f64) -> f64 {
    return exp((exponent * ln(base)))
};
    fn get_altitude_at_pressure(mut pressure: f64) -> f64 {
    if (pressure > 101325.0) {
        panic!("Value Higher than Pressure at Sea Level !");
    }
    if (pressure < 0.0) {
        panic!("Atmospheric Pressure can not be negative !");
    }
    let ratio: f64 = (pressure / 101325.0);
    return (44330.0 * (1.0 - pow_float(ratio, (1.0 / 5.5255))))
};
    println!("{}", get_altitude_at_pressure(100000.0).to_string());
    println!("{}", get_altitude_at_pressure(101325.0).to_string());
    println!("{}", get_altitude_at_pressure(80000.0).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
