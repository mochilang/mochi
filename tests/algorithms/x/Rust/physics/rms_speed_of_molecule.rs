// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_UNIVERSAL_GAS_CONSTANT: f64 = 8.3144598;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn rms_speed_of_molecule(mut temperature: f64, mut molar_mass: f64) -> f64 {
    if (temperature < 0.0) {
        panic!("Temperature cannot be less than 0 K");
    }
    if (molar_mass <= 0.0) {
        panic!("Molar mass cannot be less than or equal to 0 kg/mol");
    }
    let num: f64 = ((3.0 * unsafe { g_UNIVERSAL_GAS_CONSTANT.clone() }) * temperature);
    let val: f64 = (num / molar_mass);
    let result: f64 = sqrt(val);
    return result
};
        println!("{}", format!("{}{}", "rms_speed_of_molecule(100, 2) = ", rms_speed_of_molecule(100.0, 2.0).to_string()));
        println!("{}", format!("{}{}", "rms_speed_of_molecule(273, 12) = ", rms_speed_of_molecule(273.0, 12.0).to_string()));
        let vrms: f64 = rms_speed_of_molecule(300.0, 28.0);
        println!("{}", format!("{}{}", format!("{}{}", "Vrms of Nitrogen gas at 300 K is ", vrms.to_string()), " m/s"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
