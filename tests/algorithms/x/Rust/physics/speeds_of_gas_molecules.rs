// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
static g_R: f64 = 8.31446261815324;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn avg_speed_of_molecule(mut temperature: f64, mut molar_mass: f64) -> f64 {
    if (temperature < 0.0) {
        panic!("Absolute temperature cannot be less than 0 K");
    }
    if (molar_mass <= 0.0) {
        panic!("Molar mass should be greater than 0 kg/mol");
    }
    let expr: f64 = (((8.0 * unsafe { g_R.clone() }) * temperature) / (unsafe { g_PI.clone() } * molar_mass));
    let s: f64 = sqrt(expr);
    return s
};
        fn mps_speed_of_molecule(mut temperature: f64, mut molar_mass: f64) -> f64 {
    if (temperature < 0.0) {
        panic!("Absolute temperature cannot be less than 0 K");
    }
    if (molar_mass <= 0.0) {
        panic!("Molar mass should be greater than 0 kg/mol");
    }
    let expr: f64 = (((2.0 * unsafe { g_R.clone() }) * temperature) / molar_mass);
    let s: f64 = sqrt(expr);
    return s
};
        println!("{}", avg_speed_of_molecule(273.0, 0.028).to_string());
        println!("{}", avg_speed_of_molecule(300.0, 0.032).to_string());
        println!("{}", mps_speed_of_molecule(273.0, 0.028).to_string());
        println!("{}", mps_speed_of_molecule(300.0, 0.032).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
