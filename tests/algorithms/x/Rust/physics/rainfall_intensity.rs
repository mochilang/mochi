// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exp_approx(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut is_neg: bool = false;
    if (x < 0.0) {
        is_neg = true;
        y = -x;
    }
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 30) {
        term = ((term * y) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    if is_neg {
        return (1.0 / sum)
    }
    return sum
};
    fn ln_series(mut x: f64) -> f64 {
    let t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        sum = (sum + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (2.0 * sum)
};
    fn ln(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut k: i64 = 0;
    while (y >= 10.0) {
        y = (y / 10.0);
        k = (k + 1);
    }
    while (y < 1.0) {
        y = (y * 10.0);
        k = (k - 1);
    }
    return (ln_series(y) + ((k as f64) * ln_series(10.0)))
};
    fn powf(mut base: f64, mut exponent: f64) -> f64 {
    return exp_approx((exponent * ln(base)))
};
    fn rainfall_intensity(mut coefficient_k: f64, mut coefficient_a: f64, mut coefficient_b: f64, mut coefficient_c: f64, mut return_period: f64, mut duration: f64) -> f64 {
    if (coefficient_k <= 0.0) {
        panic!("All parameters must be positive.");
    }
    if (coefficient_a <= 0.0) {
        panic!("All parameters must be positive.");
    }
    if (coefficient_b <= 0.0) {
        panic!("All parameters must be positive.");
    }
    if (coefficient_c <= 0.0) {
        panic!("All parameters must be positive.");
    }
    if (return_period <= 0.0) {
        panic!("All parameters must be positive.");
    }
    if (duration <= 0.0) {
        panic!("All parameters must be positive.");
    }
    let numerator: f64 = (coefficient_k * powf(return_period, coefficient_a));
    let denominator: f64 = powf((duration + coefficient_b), coefficient_c);
    return (numerator / denominator)
};
    let r1: f64 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0);
    println!("{}", r1.to_string());
    let r2: f64 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0);
    println!("{}", r2.to_string());
    let r3: f64 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0);
    println!("{}", r3.to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
