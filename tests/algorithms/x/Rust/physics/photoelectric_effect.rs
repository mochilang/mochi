// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow10(mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
};
    let PLANCK_CONSTANT_JS: f64 = (6.6261 / pow10(34));
    let PLANCK_CONSTANT_EVS: f64 = (4.1357 / pow10(15));
    let mut maximum_kinetic_energy = move |frequency: f64, work_function: f64, in_ev: bool| -> f64 {
    if (frequency < 0.0) {
        panic!("Frequency can't be negative.");
    }
    let energy: f64 = if in_ev { ((PLANCK_CONSTANT_EVS * frequency) - work_function) } else { ((PLANCK_CONSTANT_JS * frequency) - work_function) };
    if (energy > 0.0) {
        return energy
    }
    return 0.0
};
    println!("{}", maximum_kinetic_energy(1000000.0, 2.0, false).to_string());
    println!("{}", maximum_kinetic_energy(1000000.0, 2.0, true).to_string());
    println!("{}", maximum_kinetic_energy(10000000000000000.0, 2.0, true).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
