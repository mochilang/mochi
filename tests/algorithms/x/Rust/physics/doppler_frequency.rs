// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn doppler_effect(mut org_freq: f64, mut wave_vel: f64, mut obs_vel: f64, mut src_vel: f64) -> f64 {
    if (wave_vel == src_vel) {
        panic!("division by zero implies vs=v and observer in front of the source");
    }
    let doppler_freq: f64 = ((org_freq * (wave_vel + obs_vel)) / (wave_vel - src_vel));
    if (doppler_freq <= 0.0) {
        panic!("non-positive frequency implies vs>v or v0>v (in the opposite direction)");
    }
    return doppler_freq
};
    fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn almost_equal(mut a: f64, mut b: f64, mut tol: f64) -> bool {
    return (absf((a - b)) <= tol)
};
    fn test_doppler_effect() {
    if !almost_equal(doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 0.0000001) {
        panic!("test 1 failed");
    }
    if !almost_equal(doppler_effect(100.0, 330.0, -10.0, 0.0), 96.96969696969697, 0.0000001) {
        panic!("test 2 failed");
    }
    if !almost_equal(doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 0.0000001) {
        panic!("test 3 failed");
    }
    if !almost_equal(doppler_effect(100.0, 330.0, 0.0, -10.0), 97.05882352941177, 0.0000001) {
        panic!("test 4 failed");
    }
    if !almost_equal(doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 0.0000001) {
        panic!("test 5 failed");
    }
    if !almost_equal(doppler_effect(100.0, 330.0, -10.0, -10.0), 94.11764705882354, 0.0000001) {
        panic!("test 6 failed");
    }
};
    fn mochi_main() {
    test_doppler_effect();
    println!("{}", format!("{:?}", doppler_effect(100.0, 330.0, 10.0, 0.0)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
