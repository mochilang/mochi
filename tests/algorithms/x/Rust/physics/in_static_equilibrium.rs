// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static g_PI: f64 = 3.141592653589793;
static g_TWO_PI: f64 = 6.283185307179586;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - ((((x / m) as i64) as f64) * m))
};
        fn sin_approx(mut x: f64) -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y3: f64 = (y2 * y);
    let y5: f64 = (y3 * y2);
    let y7: f64 = (y5 * y2);
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
};
        fn cos_approx(mut x: f64) -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y4: f64 = (y2 * y2);
    let y6: f64 = (y4 * y2);
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
};
        fn polar_force(mut magnitude: f64, mut angle: f64, mut radian_mode: bool) -> Vec<f64> {
    let theta: f64 = if radian_mode { angle } else { ((angle * unsafe { g_PI.clone() }) / 180.0) };
    return vec![(magnitude * cos_approx(theta)), (magnitude * sin_approx(theta))]
};
        fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    } else {
        return x
    }
};
        fn in_static_equilibrium(mut forces: Vec<Vec<f64>>, mut location: Vec<Vec<f64>>, mut eps: f64) -> bool {
    let mut sum_moments: f64 = 0.0;
    let mut i: i64 = 0;
    let n: i64 = (forces.len() as i64);
    while (i < n) {
        let r: Vec<f64> = location[i as usize].clone();
        let f: Vec<f64> = forces[i as usize].clone();
        let moment: f64 = ((r[0 as usize] * f[1 as usize]) - (r[1 as usize] * f[0 as usize]));
        sum_moments = (sum_moments + moment);
        i = (i + 1);
    }
    return (abs_float(sum_moments) < eps)
};
        let forces1: Vec<Vec<f64>> = vec![vec![1.0, 1.0].clone(), vec![-1.0, 2.0].clone()];
        let location1: Vec<Vec<f64>> = vec![vec![1.0, 0.0].clone(), vec![10.0, 0.0].clone()];
        println!("{}", in_static_equilibrium(forces1.clone(), location1.clone(), 0.1).to_string());
        let forces2: Vec<Vec<f64>> = vec![polar_force(718.4, 150.0, false).clone(), polar_force(879.54, 45.0, false).clone(), polar_force(100.0, -90.0, false).clone()];
        let location2: Vec<Vec<f64>> = vec![vec![0.0, 0.0].clone(), vec![0.0, 0.0].clone(), vec![0.0, 0.0].clone()];
        println!("{}", in_static_equilibrium(forces2.clone(), location2.clone(), 0.1).to_string());
        let forces3: Vec<Vec<f64>> = vec![polar_force((30.0 * 9.81), 15.0, false).clone(), polar_force(215.0, 135.0, false).clone(), polar_force(264.0, 60.0, false).clone()];
        let location3: Vec<Vec<f64>> = vec![vec![0.0, 0.0].clone(), vec![0.0, 0.0].clone(), vec![0.0, 0.0].clone()];
        println!("{}", in_static_equilibrium(forces3.clone(), location3.clone(), 0.1).to_string());
        let forces4: Vec<Vec<f64>> = vec![vec![0.0, -2000.0].clone(), vec![0.0, -1200.0].clone(), vec![0.0, 15600.0].clone(), vec![0.0, -12400.0].clone()];
        let location4: Vec<Vec<f64>> = vec![vec![0.0, 0.0].clone(), vec![6.0, 0.0].clone(), vec![10.0, 0.0].clone(), vec![12.0, 0.0].clone()];
        println!("{}", in_static_equilibrium(forces4.clone(), location4.clone(), 0.1).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
