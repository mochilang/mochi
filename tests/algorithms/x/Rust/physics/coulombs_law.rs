// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_K: f64 = 8987551792.3;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn format2(mut x: f64) -> String {
    let sign: String = if (x < 0.0) { String::from("-") } else { String::from("") }.clone();
    let y: f64 = if (x < 0.0) { -x } else { x };
    let m: f64 = 100.0;
    let scaled: f64 = (y * m);
    let mut i: i64 = (scaled as i64);
    if ((scaled - (i as f64)) >= 0.5) {
        i = (i + 1);
    }
    let int_part: i64 = (i / 100);
    let frac_part: i64 = (i % 100);
    let mut frac_str = frac_part.to_string();
    if (frac_part < 10) {
        frac_str = format!("{}{}", "0", frac_str);
    }
    return format!("{}{}", format!("{}{}", format!("{}{}", sign, int_part.to_string()), "."), frac_str).clone()
};
        fn coulombs_law(mut q1: f64, mut q2: f64, mut radius: f64) -> f64 {
    if (radius <= 0.0) {
        panic!("radius must be positive");
    }
    let force: f64 = (((unsafe { g_K.clone() } * q1) * q2) / (radius * radius));
    return force
};
        println!("{}", format2(coulombs_law(15.5, 20.0, 15.0)));
        println!("{}", format2(coulombs_law(1.0, 15.0, 5.0)));
        println!("{}", format2(coulombs_law(20.0, -50.0, 15.0)));
        println!("{}", format2(coulombs_law(-5.0, -8.0, 10.0)));
        println!("{}", format2(coulombs_law(50.0, 100.0, 50.0)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
