// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn to_float(mut x: i64) -> f64 {
    return ((x as f64) * 1.0)
};
    fn round6(mut x: f64) -> f64 {
    let factor: f64 = 1000000.0;
    return (((((x * factor) + 0.5) as i64) as f64) / factor)
};
    fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn validate(mut values: Vec<f64>) -> bool {
    if ((values.len() as i64) == 0) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        if (values[i as usize] <= 0.0) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn effusion_ratio(mut m1: f64, mut m2: f64) -> f64 {
    if !validate(vec![m1, m2]) {
        println!("{}", "ValueError: Molar mass values must greater than 0.");
        return 0.0
    }
    return round6(sqrtApprox((m2 / m1)))
};
    fn first_effusion_rate(mut rate: f64, mut m1: f64, mut m2: f64) -> f64 {
    if !validate(vec![rate, m1, m2]) {
        println!("{}", "ValueError: Molar mass and effusion rate values must greater than 0.");
        return 0.0
    }
    return round6((rate * sqrtApprox((m2 / m1))))
};
    fn second_effusion_rate(mut rate: f64, mut m1: f64, mut m2: f64) -> f64 {
    if !validate(vec![rate, m1, m2]) {
        println!("{}", "ValueError: Molar mass and effusion rate values must greater than 0.");
        return 0.0
    }
    return round6((rate / sqrtApprox((m2 / m1))))
};
    fn first_molar_mass(mut mass: f64, mut r1: f64, mut r2: f64) -> f64 {
    if !validate(vec![mass, r1, r2]) {
        println!("{}", "ValueError: Molar mass and effusion rate values must greater than 0.");
        return 0.0
    }
    let ratio: f64 = (r1 / r2);
    return round6((mass / (ratio * ratio)))
};
    fn second_molar_mass(mut mass: f64, mut r1: f64, mut r2: f64) -> f64 {
    if !validate(vec![mass, r1, r2]) {
        println!("{}", "ValueError: Molar mass and effusion rate values must greater than 0.");
        return 0.0
    }
    let ratio: f64 = (r1 / r2);
    return round6(((ratio * ratio) / mass))
};
    println!("{}", format!("{:?}", effusion_ratio(2.016, 4.002)));
    println!("{}", format!("{:?}", first_effusion_rate(1.0, 2.016, 4.002)));
    println!("{}", format!("{:?}", second_effusion_rate(1.0, 2.016, 4.002)));
    println!("{}", format!("{:?}", first_molar_mass(2.0, 1.408943, 0.709752)));
    println!("{}", format!("{:?}", second_molar_mass(2.0, 1.408943, 0.709752)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
