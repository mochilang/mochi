// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Body {
    position_x: f64,
    position_y: f64,
    velocity_x: f64,
    velocity_y: f64,
    mass: f64,
}
impl std::fmt::Display for Body {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"position_x\": {}", self.position_x)?;
        write!(f, ", ")?;
        write!(f, "\"position_y\": {}", self.position_y)?;
        write!(f, ", ")?;
        write!(f, "\"velocity_x\": {}", self.velocity_x)?;
        write!(f, ", ")?;
        write!(f, "\"velocity_y\": {}", self.velocity_y)?;
        write!(f, ", ")?;
        write!(f, "\"mass\": {}", self.mass)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct BodySystem {
    bodies: Vec<Body>,
    gravitation_constant: f64,
    time_factor: f64,
    softening_factor: f64,
}
impl std::fmt::Display for BodySystem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"bodies\": {:?}", self.bodies)?;
        write!(f, ", ")?;
        write!(f, "\"gravitation_constant\": {}", self.gravitation_constant)?;
        write!(f, ", ")?;
        write!(f, "\"time_factor\": {}", self.time_factor)?;
        write!(f, ", ")?;
        write!(f, "\"softening_factor\": {}", self.softening_factor)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_body(mut px: f64, mut py: f64, mut vx: f64, mut vy: f64, mut mass: f64) -> Body {
    return Body {position_x: px, position_y: py, velocity_x: vx, velocity_y: vy, mass: mass}
};
    fn update_velocity(mut body: Body, mut force_x: f64, mut force_y: f64, mut delta_time: f64) -> Body {
    body.velocity_x = (body.velocity_x + (force_x * delta_time));
    body.velocity_y = (body.velocity_y + (force_y * delta_time));
    return body
};
    fn update_position(mut body: Body, mut delta_time: f64) -> Body {
    body.position_x = (body.position_x + (body.velocity_x * delta_time));
    body.position_y = (body.position_y + (body.velocity_y * delta_time));
    return body
};
    fn make_body_system(mut bodies: Vec<Body>, mut g: f64, mut tf: f64, mut sf: f64) -> BodySystem {
    return BodySystem {bodies: bodies.clone(), gravitation_constant: g, time_factor: tf, softening_factor: sf}
};
    fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn update_system(mut system: BodySystem, mut delta_time: f64) -> BodySystem {
    let mut bodies: Vec<Body> = system.bodies.clone();
    let mut i: i64 = 0;
    while (i < (bodies.len() as i64)) {
        let mut body1: Body = bodies[i as usize].clone();
        let mut force_x: f64 = 0.0;
        let mut force_y: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < (bodies.len() as i64)) {
            if (i != j) {
                let body2: Body = bodies[j as usize].clone();
                let dif_x: f64 = (body2.position_x - body1.position_x);
                let dif_y: f64 = (body2.position_y - body1.position_y);
                let distance_sq: f64 = (((dif_x * dif_x) + (dif_y * dif_y)) + system.softening_factor);
                let distance: f64 = sqrtApprox(distance_sq);
                let denom: f64 = ((distance * distance) * distance);
                force_x = (force_x + (((system.gravitation_constant * body2.mass) * dif_x) / denom));
                force_y = (force_y + (((system.gravitation_constant * body2.mass) * dif_y) / denom));
            }
            j = (j + 1);
        }
        body1 = update_velocity(body1.clone(), force_x, force_y, (delta_time * system.time_factor));
        bodies[i as usize] = body1.clone();
        i = (i + 1);
    }
    i = 0;
    while (i < (bodies.len() as i64)) {
        let mut body: Body = bodies[i as usize].clone();
        body = update_position(body.clone(), (delta_time * system.time_factor));
        bodies[i as usize] = body.clone();
        i = (i + 1);
    }
    system.bodies = bodies.clone();
    return system
};
    fn mochi_main() {
    let b1: Body = make_body(0.0, 0.0, 0.0, 0.0, 1.0);
    let b2: Body = make_body(10.0, 0.0, 0.0, 0.0, 1.0);
    let mut sys1: BodySystem = make_body_system(vec![b1.clone(), b2.clone()], 1.0, 1.0, 0.0);
    sys1 = update_system(sys1.clone(), 1.0);
    let b1_after: Body = sys1.bodies.clone()[0 as usize].clone();
    let pos1x: f64 = b1_after.position_x;
    let pos1y: f64 = b1_after.position_y;
    println!("{:?}", HashMap::from([(String::from("x"), pos1x), (String::from("y"), pos1y)]));;
    let vel1x: f64 = b1_after.velocity_x;
    let vel1y: f64 = b1_after.velocity_y;
    println!("{:?}", HashMap::from([(String::from("vx"), vel1x), (String::from("vy"), vel1y)]));;
    let b3: Body = make_body(-10.0, 0.0, 0.0, 0.0, 1.0);
    let b4: Body = make_body(10.0, 0.0, 0.0, 0.0, 4.0);
    let mut sys2: BodySystem = make_body_system(vec![b3.clone(), b4.clone()], 1.0, 10.0, 0.0);
    sys2 = update_system(sys2.clone(), 1.0);
    let b2_after: Body = sys2.bodies.clone()[0 as usize].clone();
    let pos2x: f64 = b2_after.position_x;
    let pos2y: f64 = b2_after.position_y;
    println!("{:?}", HashMap::from([(String::from("x"), pos2x), (String::from("y"), pos2y)]));;
    let vel2x: f64 = b2_after.velocity_x;
    let vel2y: f64 = b2_after.velocity_y;
    println!("{:?}", HashMap::from([(String::from("vx"), vel2x), (String::from("vy"), vel2y)]));;
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
