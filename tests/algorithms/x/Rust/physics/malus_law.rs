// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn floor(x: f64) -> f64 { x.floor() }
static g_PI: f64 = 3.141592653589793;
static g_TWO_PI: f64 = 6.283185307179586;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - (floor((x / m)) * m))
};
        fn cos(mut x: f64) -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y4: f64 = (y2 * y2);
    let y6: f64 = (y4 * y2);
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
};
        fn radians(mut deg: f64) -> f64 {
    return ((deg * unsafe { g_PI.clone() }) / 180.0)
};
        fn abs_val(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        fn malus_law(mut initial_intensity: f64, mut angle: f64) -> f64 {
    if (initial_intensity < 0.0) {
        panic!("The value of intensity cannot be negative");
    }
    if ((angle < 0.0) || (angle > 360.0)) {
        panic!("In Malus Law, the angle is in the range 0-360 degrees");
    }
    let theta: f64 = radians(angle);
    let c: f64 = cos(theta);
    return (initial_intensity * (c * c))
};
        fn mochi_main() {
    println!("{}", malus_law(100.0, 60.0).to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
