// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    if (n >= 0) {
        let mut i: i64 = 0;
        while (i < n) {
            p = (p * 10.0);
            i = (i + 1);
        }
    } else {
        let mut i: i64 = 0;
        while (i > n) {
            p = (p / 10.0);
            i = (i - 1);
        }
    }
    return p
};
    fn floor(mut x: f64) -> f64 {
    let i: i64 = (x as i64);
    let f: f64 = (i as f64);
    if (f > x) {
        return ((i - 1) as f64)
    }
    return f
};
    fn format_scientific_3(mut x: f64) -> String {
    if (x == 0.0) {
        return String::from("0.000e+00")
    }
    let mut sign: String = String::from("").clone();
    let mut num: f64 = x;
    if (num < 0.0) {
        sign = String::from("-");
        num = -num;
    }
    let mut exp: i64 = 0;
    while (num >= 10.0) {
        num = (num / 10.0);
        exp = (exp + 1);
    }
    while (num < 1.0) {
        num = (num * 10.0);
        exp = (exp - 1);
    }
    let temp: f64 = floor(((num * 1000.0) + 0.5));
    let mut scaled: i64 = (temp as i64);
    if (scaled == 10000) {
        scaled = 1000;
        exp = (exp + 1);
    }
    let int_part: i64 = (scaled / 1000);
    let mut frac_part: i64 = (scaled % 1000);
    let mut frac_str = frac_part.to_string();
    while ((frac_str.len() as i64) < 3) {
        frac_str = format!("{}{}", "0", frac_str);
    }
    let mantissa = format!("{}{}", format!("{}{}", int_part.to_string(), "."), frac_str);
    let mut exp_sign: String = String::from("+").clone();
    let mut exp_abs: i64 = exp;
    if (exp < 0) {
        exp_sign = String::from("-");
        exp_abs = -exp;
    }
    let mut exp_str = exp_abs.to_string();
    if (exp_abs < 10) {
        exp_str = format!("{}{}", "0", exp_str);
    }
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", sign, mantissa), "e"), exp_sign), exp_str).clone()
};
    fn orbital_transfer_work(mut mass_central: f64, mut mass_object: f64, mut r_initial: f64, mut r_final: f64) -> String {
    let G: f64 = (6.6743 * pow10(-11));
    if ((r_initial <= 0.0) || (r_final <= 0.0)) {
        panic!("Orbital radii must be greater than zero.");
    }
    let work: f64 = ((((G * mass_central) * mass_object) / 2.0) * ((1.0 / r_initial) - (1.0 / r_final)));
    return format_scientific_3(work).clone()
};
    fn test_orbital_transfer_work() {
    if (orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))).as_str() != "2.811e+09") {
        panic!("case1 failed");
    }
    if (orbital_transfer_work((5.972 * pow10(24)), 500.0, (7.0 * pow10(6)), (6.371 * pow10(6))).as_str() != "-1.405e+09") {
        panic!("case2 failed");
    }
    if (orbital_transfer_work((1.989 * pow10(30)), 1000.0, (1.5 * pow10(11)), (2.28 * pow10(11))).as_str() != "1.514e+11") {
        panic!("case3 failed");
    }
};
    fn mochi_main() {
    test_orbital_transfer_work();
    println!("{}", orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
