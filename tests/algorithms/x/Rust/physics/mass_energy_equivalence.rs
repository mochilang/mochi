// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_C: f64 = 299792458.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn energy_from_mass(mut mass: f64) -> f64 {
    if (mass < 0.0) {
        panic!("Mass can't be negative.");
    }
    return ((mass * unsafe { g_C.clone() }) * unsafe { g_C.clone() })
};
        fn mass_from_energy(mut energy: f64) -> f64 {
    if (energy < 0.0) {
        panic!("Energy can't be negative.");
    }
    return (energy / (unsafe { g_C.clone() } * unsafe { g_C.clone() }))
};
        println!("{}", energy_from_mass(124.56).to_string());
        println!("{}", energy_from_mass(320.0).to_string());
        println!("{}", energy_from_mass(0.0).to_string());
        println!("{}", mass_from_energy(124.56).to_string());
        println!("{}", mass_from_energy(320.0).to_string());
        println!("{}", mass_from_energy(0.0).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
