// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static g_PI: f64 = 3.141592653589793;
static g_TWO_PI: f64 = 6.283185307179586;
static g_g: f64 = 9.80665;
static g_v0: f64 = 25.0;
static g_angle: f64 = 20.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - ((((x / m) as i64) as f64) * m))
};
        fn sin(mut x: f64) -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y3: f64 = (y2 * y);
    let y5: f64 = (y3 * y2);
    let y7: f64 = (y5 * y2);
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
};
        fn deg_to_rad(mut deg: f64) -> f64 {
    return ((deg * unsafe { g_PI.clone() }) / 180.0)
};
        fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        fn pow10(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
};
        fn round(mut x: f64, mut n: i64) -> f64 {
    let m: f64 = pow10(n);
    let y: f64 = floor(((x * m) + 0.5));
    return (y / m)
};
        fn check_args(mut init_velocity: f64, mut angle: f64) {
    if ((angle > 90.0) || (angle < 1.0)) {
        panic!("Invalid angle. Range is 1-90 degrees.");
    }
    if (init_velocity < 0.0) {
        panic!("Invalid velocity. Should be a positive number.");
    }
};
        fn horizontal_distance(mut init_velocity: f64, mut angle: f64) -> f64 {
    check_args(init_velocity, angle);
    let radians: f64 = deg_to_rad((2.0 * angle));
    return round((((init_velocity * init_velocity) * sin(radians)) / unsafe { g_g.clone() }), 2)
};
        fn max_height(mut init_velocity: f64, mut angle: f64) -> f64 {
    check_args(init_velocity, angle);
    let radians: f64 = deg_to_rad(angle);
    let s: f64 = sin(radians);
    return round(((((init_velocity * init_velocity) * s) * s) / (2.0 * unsafe { g_g.clone() })), 2)
};
        fn total_time(mut init_velocity: f64, mut angle: f64) -> f64 {
    check_args(init_velocity, angle);
    let radians: f64 = deg_to_rad(angle);
    return round((((2.0 * init_velocity) * sin(radians)) / unsafe { g_g.clone() }), 2)
};
        println!("{}", format!("{:?}", horizontal_distance(unsafe { g_v0.clone() }, unsafe { g_angle.clone() })));
        println!("{}", format!("{:?}", max_height(unsafe { g_v0.clone() }, unsafe { g_angle.clone() })));
        println!("{}", format!("{:?}", total_time(unsafe { g_v0.clone() }, unsafe { g_angle.clone() })));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
