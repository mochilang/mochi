// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Result {
    name: String,
    value: f64,
}
impl std::fmt::Display for Result {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn shear_stress(mut stress: f64, mut tangential_force: f64, mut area: f64) -> Result {
    let mut zeros: i64 = 0;
    if (stress == 0.0) {
        zeros = (zeros + 1);
    }
    if (tangential_force == 0.0) {
        zeros = (zeros + 1);
    }
    if (area == 0.0) {
        zeros = (zeros + 1);
    }
    if (zeros != 1) {
        panic!("You cannot supply more or less than 2 values");
    } else if (stress < 0.0) {
        panic!("Stress cannot be negative");
    } else if (tangential_force < 0.0) {
        panic!("Tangential Force cannot be negative");
    } else if (area < 0.0) {
        panic!("Area cannot be negative");
    } else if (stress == 0.0) {
        return Result {name: String::from("stress"), value: (tangential_force / area)}
    } else if (tangential_force == 0.0) {
        return Result {name: String::from("tangential_force"), value: (stress * area)}
    } else {
        return Result {name: String::from("area"), value: (tangential_force / stress)}
    }
};
    fn str_result(mut r: Result) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Result(name='", r.name.clone()), "', value="), r.value.to_string()), ")").clone()
};
    let r1: Result = shear_stress(25.0, 100.0, 0.0);
    println!("{}", str_result(r1.clone()));
    let r2: Result = shear_stress(0.0, 1600.0, 200.0);
    println!("{}", str_result(r2.clone()));
    let r3: Result = shear_stress(1000.0, 0.0, 1200.0);
    println!("{}", str_result(r3.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
