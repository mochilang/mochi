// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn sqrt_approx(mut x: f64) -> f64 {
    if (x == 0.0) {
        return 0.0
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn hubble_parameter(mut hubble_constant: f64, mut radiation_density: f64, mut matter_density: f64, mut dark_energy: f64, mut redshift: f64) -> f64 {
    let parameters: Vec<f64> = vec![redshift, radiation_density, matter_density, dark_energy];
    let mut i: i64 = 0;
    while (i < (parameters.len() as i64)) {
        if (parameters[i as usize] < 0.0) {
            panic!("All input parameters must be positive");
        }
        i = (i + 1);
    }
    i = 1;
    while (i < 4) {
        if (parameters[i as usize] > 1.0) {
            panic!("Relative densities cannot be greater than one");
        }
        i = (i + 1);
    }
    let curvature: f64 = (1.0 - ((matter_density + radiation_density) + dark_energy));
    let zp1: f64 = (redshift + 1.0);
    let e2: f64 = ((((radiation_density * pow(zp1, 4)) + (matter_density * pow(zp1, 3))) + (curvature * pow(zp1, 2))) + dark_energy);
    return (hubble_constant * sqrt_approx(e2))
};
    fn test_hubble_parameter() {
    let h: f64 = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0);
    if ((h < 68.2999) || (h > 68.3001)) {
        panic!("hubble_parameter test failed");
    }
};
    fn mochi_main() {
    test_hubble_parameter();
    println!("{}", format!("{:?}", hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
