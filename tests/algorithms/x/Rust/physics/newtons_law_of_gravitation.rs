// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Result {
    kind: String,
    value: f64,
}
impl std::fmt::Display for Result {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"kind\": \"{}\"", self.kind)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

static g_GRAVITATIONAL_CONSTANT: f64 = 0.000000000066743;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn gravitational_law(mut force: f64, mut mass_1: f64, mut mass_2: f64, mut distance: f64) -> Result {
    let mut zero_count: i64 = 0;
    if (force == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (mass_1 == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (mass_2 == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (distance == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (zero_count != 1) {
        panic!("One and only one argument must be 0");
    }
    if (force < 0.0) {
        panic!("Gravitational force can not be negative");
    }
    if (distance < 0.0) {
        panic!("Distance can not be negative");
    }
    if (mass_1 < 0.0) {
        panic!("Mass can not be negative");
    }
    if (mass_2 < 0.0) {
        panic!("Mass can not be negative");
    }
    let product_of_mass: f64 = (mass_1 * mass_2);
    if (force == 0.0) {
        let f: f64 = ((unsafe { g_GRAVITATIONAL_CONSTANT.clone() } * product_of_mass) / (distance * distance));
        return Result {kind: String::from("force"), value: f}
    }
    if (mass_1 == 0.0) {
        let m1: f64 = ((force * (distance * distance)) / (unsafe { g_GRAVITATIONAL_CONSTANT.clone() } * mass_2));
        return Result {kind: String::from("mass_1"), value: m1}
    }
    if (mass_2 == 0.0) {
        let m2: f64 = ((force * (distance * distance)) / (unsafe { g_GRAVITATIONAL_CONSTANT.clone() } * mass_1));
        return Result {kind: String::from("mass_2"), value: m2}
    }
    let d: f64 = sqrtApprox(((unsafe { g_GRAVITATIONAL_CONSTANT.clone() } * product_of_mass) / force));
    return Result {kind: String::from("distance"), value: d}
};
        let r1: Result = gravitational_law(0.0, 5.0, 10.0, 20.0);
        let r2: Result = gravitational_law(7367.382, 0.0, 74.0, 3048.0);
        let r3: Result = gravitational_law(100.0, 5.0, 0.0, 3.0);
        let r4: Result = gravitational_law(100.0, 5.0, 10.0, 0.0);
        println!("{}", format!("{}{}", format!("{}{}", r1.kind.clone(), " "), r1.value.to_string()));
        println!("{}", format!("{}{}", format!("{}{}", r2.kind.clone(), " "), r2.value.to_string()));
        println!("{}", format!("{}{}", format!("{}{}", r3.kind.clone(), " "), r3.value.to_string()));
        println!("{}", format!("{}{}", format!("{}{}", r4.kind.clone(), " "), r4.value.to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
