// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Particle {
    x: f64,
    y: f64,
    z: f64,
    mass: f64,
}
impl std::fmt::Display for Particle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"z\": {}", self.z)?;
        write!(f, ", ")?;
        write!(f, "\"mass\": {}", self.mass)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Coord3D {
    x: f64,
    y: f64,
    z: f64,
}
impl std::fmt::Display for Coord3D {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"z\": {}", self.z)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn round2(mut x: f64) -> f64 {
    let scaled: f64 = (x * 100.0);
    let rounded: f64 = (((scaled + 0.5) as i64) as f64);
    return (rounded / 100.0)
};
    fn center_of_mass(mut ps: Vec<Particle>) -> Coord3D {
    if ((ps.len() as i64) == 0) {
        panic!("No particles provided");
    }
    let mut i: i64 = 0;
    let mut total_mass: f64 = 0.0;
    while (i < (ps.len() as i64)) {
        let p: Particle = ps[i as usize].clone();
        if (p.mass <= 0.0) {
            panic!("Mass of all particles must be greater than 0");
        }
        total_mass = (total_mass + p.mass);
        i = (i + 1);
    }
    let mut sum_x: f64 = 0.0;
    let mut sum_y: f64 = 0.0;
    let mut sum_z: f64 = 0.0;
    i = 0;
    while (i < (ps.len() as i64)) {
        let p: Particle = ps[i as usize].clone();
        sum_x = (sum_x + (p.x * p.mass));
        sum_y = (sum_y + (p.y * p.mass));
        sum_z = (sum_z + (p.z * p.mass));
        i = (i + 1);
    }
    let cm_x: f64 = round2((sum_x / total_mass));
    let cm_y: f64 = round2((sum_y / total_mass));
    let cm_z: f64 = round2((sum_z / total_mass));
    return Coord3D {x: cm_x, y: cm_y, z: cm_z}
};
    fn coord_to_string(mut c: Coord3D) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Coord3D(x=", c.x.to_string()), ", y="), c.y.to_string()), ", z="), c.z.to_string()), ")").clone()
};
    let r1: Coord3D = center_of_mass(vec![Particle {x: 1.5, y: 4.0, z: 3.4, mass: 4.0}.clone(), Particle {x: 5.0, y: 6.8, z: 7.0, mass: 8.1}.clone(), Particle {x: 9.4, y: 10.1, z: 11.6, mass: 12.0}.clone()]);
    println!("{}", coord_to_string(r1.clone()));
    let r2: Coord3D = center_of_mass(vec![Particle {x: 1.0, y: 2.0, z: 3.0, mass: 4.0}.clone(), Particle {x: 5.0, y: 6.0, z: 7.0, mass: 8.0}.clone(), Particle {x: 9.0, y: 10.0, z: 11.0, mass: 12.0}.clone()]);
    println!("{}", coord_to_string(r2.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
