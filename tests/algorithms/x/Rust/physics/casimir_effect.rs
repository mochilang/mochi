// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
static g_REDUCED_PLANCK_CONSTANT: f64 = 0.0000000000000000000000000000000001054571817;
static g_SPEED_OF_LIGHT: f64 = 300000000.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 100) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn casimir_force(mut force: f64, mut area: f64, mut distance: f64) -> HashMap<String, f64> {
    let mut zero_count: i64 = 0;
    if (force == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (area == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (distance == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (zero_count != 1) {
        panic!("One and only one argument must be 0");
    }
    if (force < 0.0) {
        panic!("Magnitude of force can not be negative");
    }
    if (distance < 0.0) {
        panic!("Distance can not be negative");
    }
    if (area < 0.0) {
        panic!("Area can not be negative");
    }
    if (force == 0.0) {
        let num: f64 = ((((unsafe { g_REDUCED_PLANCK_CONSTANT.clone() } * unsafe { g_SPEED_OF_LIGHT.clone() }) * unsafe { g_PI.clone() }) * unsafe { g_PI.clone() }) * area);
        let den: f64 = ((((240.0 * distance) * distance) * distance) * distance);
        let f: f64 = (num / den);
        return HashMap::from([(String::from("force"), f)])
    }
    if (area == 0.0) {
        let num: f64 = (((((240.0 * force) * distance) * distance) * distance) * distance);
        let den: f64 = (((unsafe { g_REDUCED_PLANCK_CONSTANT.clone() } * unsafe { g_SPEED_OF_LIGHT.clone() }) * unsafe { g_PI.clone() }) * unsafe { g_PI.clone() });
        let a: f64 = (num / den);
        return HashMap::from([(String::from("area"), a)])
    }
    let num: f64 = ((((unsafe { g_REDUCED_PLANCK_CONSTANT.clone() } * unsafe { g_SPEED_OF_LIGHT.clone() }) * unsafe { g_PI.clone() }) * unsafe { g_PI.clone() }) * area);
    let den: f64 = (240.0 * force);
    let inner: f64 = (num / den);
    let d: f64 = sqrtApprox(sqrtApprox(inner));
    return HashMap::from([(String::from("distance"), d)])
};
        fn mochi_main() {
    println!("{}", format!("{:?}", casimir_force(0.0, 4.0, 0.03)));
    println!("{}", format!("{:?}", casimir_force(0.0000000002635, 0.0023, 0.0)));
    println!("{}", format!("{:?}", casimir_force(0.000000000000000002737, 0.0, 0.0023746)));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
