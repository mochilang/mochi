// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut k: i64 = 0;
    if (n >= 0) {
        while (k < n) {
            p = (p * 10.0);
            k = (k + 1);
        }
    } else {
        let m: i64 = -n;
        while (k < m) {
            p = (p / 10.0);
            k = (k + 1);
        }
    }
    return p
};
    fn sqrt_newton(mut n: f64) -> f64 {
    if (n == 0.0) {
        return 0.0
    }
    let mut x: f64 = n;
    let mut j: i64 = 0;
    while (j < 20) {
        x = ((x + (n / x)) / 2.0);
        j = (j + 1);
    }
    return x
};
    fn round3(mut x: f64) -> f64 {
    let mut y: f64 = ((x * 1000.0) + 0.5);
    let mut yi: i64 = (y as i64);
    if ((yi as f64) > y) {
        yi = (yi - 1);
    }
    return ((yi as f64) / 1000.0)
};
    fn escape_velocity(mut mass: f64, mut radius: f64) -> f64 {
    if (radius == 0.0) {
        panic!("Radius cannot be zero.");
    }
    let G: f64 = (6.6743 * pow10(-11));
    let velocity: f64 = sqrt_newton((((2.0 * G) * mass) / radius));
    return round3(velocity)
};
    println!("{}", format!("{:?}", escape_velocity((5.972 * pow10(24)), (6.371 * pow10(6)))));
    println!("{}", format!("{:?}", escape_velocity((7.348 * pow10(22)), (1.737 * pow10(6)))));
    println!("{}", format!("{:?}", escape_velocity((1.898 * pow10(27)), (6.9911 * pow10(7)))));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
