// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_G: f64 = 0.000000000066743;
static g_C: f64 = 299792458.0;
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn pow10(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
};
        fn sqrt(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        fn capture_radii(mut target_body_radius: f64, mut target_body_mass: f64, mut projectile_velocity: f64) -> f64 {
    if (target_body_mass < 0.0) {
        panic!("Mass cannot be less than 0");
    }
    if (target_body_radius < 0.0) {
        panic!("Radius cannot be less than 0");
    }
    if (projectile_velocity > unsafe { g_C.clone() }) {
        panic!("Cannot go beyond speed of light");
    }
    let escape_velocity_squared: f64 = (((2.0 * unsafe { g_G.clone() }) * target_body_mass) / target_body_radius);
    let denom: f64 = (projectile_velocity * projectile_velocity);
    let capture_radius: f64 = (target_body_radius * sqrt((1.0 + (escape_velocity_squared / denom))));
    return capture_radius
};
        fn capture_area(mut capture_radius: f64) -> f64 {
    if (capture_radius < 0.0) {
        panic!("Cannot have a capture radius less than 0");
    }
    let sigma: f64 = ((unsafe { g_PI.clone() } * capture_radius) * capture_radius);
    return sigma
};
        fn run_tests() {
    let r: f64 = capture_radii((6.957 * pow10(8)), (1.99 * pow10(30)), 25000.0);
    if (abs((r - (1.720959069143714 * pow10(10)))) > 1.0) {
        panic!("capture_radii failed");
    }
    let a: f64 = capture_area(r);
    if (abs((a - (9.304455331801812 * pow10(20)))) > 1.0) {
        panic!("capture_area failed");
    }
};
        fn mochi_main() {
    run_tests();
    let r: f64 = capture_radii((6.957 * pow10(8)), (1.99 * pow10(30)), 25000.0);
    println!("{}", r.to_string());
    println!("{}", capture_area(r).to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
