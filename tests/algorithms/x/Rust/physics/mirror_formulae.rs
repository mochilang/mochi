// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_float(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn isclose(mut a: f64, mut b: f64, mut tolerance: f64) -> bool {
    return (abs_float((a - b)) < tolerance)
};
    fn focal_length(mut distance_of_object: f64, mut distance_of_image: f64) -> f64 {
    if ((distance_of_object == 0.0) || (distance_of_image == 0.0)) {
        panic!("Invalid inputs. Enter non zero values with respect to the sign convention.");
    }
    return (1.0 / ((1.0 / distance_of_object) + (1.0 / distance_of_image)))
};
    fn object_distance(mut focal_length: f64, mut distance_of_image: f64) -> f64 {
    if ((distance_of_image == 0.0) || (focal_length == 0.0)) {
        panic!("Invalid inputs. Enter non zero values with respect to the sign convention.");
    }
    return (1.0 / ((1.0 / focal_length) - (1.0 / distance_of_image)))
};
    fn image_distance(mut focal_length: f64, mut distance_of_object: f64) -> f64 {
    if ((distance_of_object == 0.0) || (focal_length == 0.0)) {
        panic!("Invalid inputs. Enter non zero values with respect to the sign convention.");
    }
    return (1.0 / ((1.0 / focal_length) - (1.0 / distance_of_object)))
};
    fn test_focal_length() {
    let f1: f64 = focal_length(10.0, 20.0);
    if !isclose(f1, 6.66666666666666, 0.00000001) {
        panic!("focal_length test1 failed");
    }
    let f2: f64 = focal_length(9.5, 6.7);
    if !isclose(f2, 3.929012346, 0.00000001) {
        panic!("focal_length test2 failed");
    }
};
    fn test_object_distance() {
    let u1: f64 = object_distance(30.0, 20.0);
    if !isclose(u1, -60.0, 0.00000001) {
        panic!("object_distance test1 failed");
    }
    let u2: f64 = object_distance(10.5, 11.7);
    if !isclose(u2, 102.375, 0.00000001) {
        panic!("object_distance test2 failed");
    }
};
    fn test_image_distance() {
    let v1: f64 = image_distance(10.0, 40.0);
    if !isclose(v1, 13.33333333, 0.00000001) {
        panic!("image_distance test1 failed");
    }
    let v2: f64 = image_distance(1.5, 6.7);
    if !isclose(v2, 1.932692308, 0.00000001) {
        panic!("image_distance test2 failed");
    }
};
    fn mochi_main() {
    test_focal_length();
    test_object_distance();
    test_image_distance();
    println!("{}", focal_length(10.0, 20.0).to_string());
    println!("{}", object_distance(30.0, 20.0).to_string());
    println!("{}", image_distance(10.0, 40.0).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
