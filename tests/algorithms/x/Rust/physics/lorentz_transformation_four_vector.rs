// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_c: f64 = 299792458.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn beta(mut velocity: f64) -> f64 {
    if (velocity > unsafe { g_c.clone() }) {
        panic!("Speed must not exceed light speed 299,792,458 [m/s]!");
    }
    if (velocity < 1.0) {
        panic!("Speed must be greater than or equal to 1!");
    }
    return (velocity / unsafe { g_c.clone() })
};
        fn gamma(mut velocity: f64) -> f64 {
    let b: f64 = beta(velocity);
    return (1.0 / sqrtApprox((1.0 - (b * b))))
};
        fn transformation_matrix(mut velocity: f64) -> Vec<Vec<f64>> {
    let g: f64 = gamma(velocity);
    let b: f64 = beta(velocity);
    return vec![vec![g, (-g * b), 0.0, 0.0].clone(), vec![(-g * b), g, 0.0, 0.0].clone(), vec![0.0, 0.0, 1.0, 0.0].clone(), vec![0.0, 0.0, 0.0, 1.0].clone()]
};
        fn mat_vec_mul(mut mat: Vec<Vec<f64>>, mut vec: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < 4) {
        let row: Vec<f64> = mat[i as usize].clone();
        let value: f64 = ((((row[0 as usize] * vec[0 as usize]) + (row[1 as usize] * vec[1 as usize])) + (row[2 as usize] * vec[2 as usize])) + (row[3 as usize] * vec[3 as usize]));
        res = { let mut v = res.clone(); v.extend(vec![value]); v };
        i = (i + 1);
    }
    return res
};
        fn transform(mut velocity: f64, mut event: Vec<f64>) -> Vec<f64> {
    let g: f64 = gamma(velocity);
    let b: f64 = beta(velocity);
    let ct: f64 = (event[0 as usize] * unsafe { g_c.clone() });
    let x: f64 = event[1 as usize];
    return vec![((g * ct) - ((g * b) * x)), (((-g * b) * ct) + (g * x)), event[2 as usize], event[3 as usize]]
};
        println!("{}", beta(unsafe { g_c.clone() }).to_string());
        println!("{}", beta(199792458.0).to_string());
        println!("{}", beta(100000.0).to_string());
        println!("{}", gamma(4.0).to_string());
        println!("{}", gamma(100000.0).to_string());
        println!("{}", gamma(30000000.0).to_string());
        println!("{}", format!("{:?}", transformation_matrix(29979245.0)));
        let v: Vec<f64> = transform(29979245.0, vec![1.0, 2.0, 3.0, 4.0]);
        println!("{}", format!("{:?}", v));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
