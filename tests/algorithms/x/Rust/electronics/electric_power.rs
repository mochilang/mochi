// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn floor(x: f64) -> f64 { x.floor() }
#[derive(Debug, Clone, Default)]
struct Result {
    name: String,
    value: f64,
}
impl std::fmt::Display for Result {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn absf(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 10.0);
        i = (i + 1);
    }
    return p
};
    fn round_to(mut x: f64, mut n: i64) -> f64 {
    let m: f64 = pow10(n);
    return (floor(((x * m) + 0.5)) / m)
};
    fn electric_power(mut voltage: f64, mut current: f64, mut power: f64) -> Result {
    let mut zeros: i64 = 0;
    if (voltage == 0.0) {
        zeros = (zeros + 1);
    }
    if (current == 0.0) {
        zeros = (zeros + 1);
    }
    if (power == 0.0) {
        zeros = (zeros + 1);
    }
    if (zeros != 1) {
        panic!("Exactly one argument must be 0");
    } else if (power < 0.0) {
        panic!("Power cannot be negative in any electrical/electronics system");
    } else if (voltage == 0.0) {
        return Result {name: String::from("voltage"), value: (power / current)}
    } else if (current == 0.0) {
        return Result {name: String::from("current"), value: (power / voltage)}
    } else if (power == 0.0) {
        let p: f64 = absf((voltage * current));
        return Result {name: String::from("power"), value: round_to(p, 2)}
    } else {
        panic!("Unhandled case");
    }
};
    fn str_result(mut r: Result) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Result(name='", r.name.clone()), "', value="), r.value.to_string()), ")").clone()
};
    let r1: Result = electric_power(0.0, 2.0, 5.0);
    println!("{}", str_result(r1.clone()));
    let r2: Result = electric_power(2.0, 2.0, 0.0);
    println!("{}", str_result(r2.clone()));
    let r3: Result = electric_power(-2.0, 3.0, 0.0);
    println!("{}", str_result(r3.clone()));
    let r4: Result = electric_power(2.2, 2.2, 0.0);
    println!("{}", str_result(r4.clone()));
    let r5: Result = electric_power(2.0, 0.0, 6.0);
    println!("{}", str_result(r5.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
