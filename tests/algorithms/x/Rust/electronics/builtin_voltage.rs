// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_TEMPERATURE: f64 = 300.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn pow10(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
};
        let BOLTZMANN: f64 = (1.380649 / pow10(23));
        let ELECTRON_VOLT: f64 = (1.602176634 / pow10(19));
        let mut ln_series = move |x: f64| -> f64 {
    let t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut sum: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        sum = (sum + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (2.0 * sum)
};
        fn ln(mut x: f64) -> f64 {
    return x.ln()
};
        let mut builtin_voltage = move |donor_conc: f64, acceptor_conc: f64, intrinsic_conc: f64| -> f64 {
    if (donor_conc <= 0.0) {
        panic!("Donor concentration should be positive");
    }
    if (acceptor_conc <= 0.0) {
        panic!("Acceptor concentration should be positive");
    }
    if (intrinsic_conc <= 0.0) {
        panic!("Intrinsic concentration should be positive");
    }
    if (donor_conc <= intrinsic_conc) {
        panic!("Donor concentration should be greater than intrinsic concentration");
    }
    if (acceptor_conc <= intrinsic_conc) {
        panic!("Acceptor concentration should be greater than intrinsic concentration");
    }
    return (((BOLTZMANN * unsafe { g_TEMPERATURE.clone() }) * ln(((donor_conc * acceptor_conc) / (intrinsic_conc * intrinsic_conc)))) / ELECTRON_VOLT)
};
        println!("{}", builtin_voltage(pow10(17), pow10(17), pow10(10)).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
