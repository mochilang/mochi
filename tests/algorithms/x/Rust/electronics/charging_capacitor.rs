// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn expApprox(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut is_neg: bool = false;
    if (x < 0.0) {
        is_neg = true;
        y = -x;
    }
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 30) {
        term = ((term * y) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    if is_neg {
        return (1.0 / sum)
    }
    return sum
};
    fn round3(mut x: f64) -> f64 {
    let mut scaled: f64 = (x * 1000.0);
    if (scaled >= 0.0) {
        scaled = (scaled + 0.5);
    } else {
        scaled = (scaled - 0.5);
    }
    let scaled_int: i64 = (scaled as i64);
    return ((scaled_int as f64) / 1000.0)
};
    fn charging_capacitor(mut source_voltage: f64, mut resistance: f64, mut capacitance: f64, mut time_sec: f64) -> f64 {
    if (source_voltage <= 0.0) {
        panic!("Source voltage must be positive.");
    }
    if (resistance <= 0.0) {
        panic!("Resistance must be positive.");
    }
    if (capacitance <= 0.0) {
        panic!("Capacitance must be positive.");
    }
    let exponent: f64 = (-time_sec / (resistance * capacitance));
    let voltage: f64 = (source_voltage * (1.0 - expApprox(exponent)));
    return round3(voltage)
};
    println!("{}", format!("{:?}", charging_capacitor(0.2, 0.9, 8.4, 0.5)));
    println!("{}", format!("{:?}", charging_capacitor(2.2, 3.5, 2.4, 9.0)));
    println!("{}", format!("{:?}", charging_capacitor(15.0, 200.0, 20.0, 2.0)));
    println!("{}", format!("{:?}", charging_capacitor(20.0, 2000.0, 0.0003, 4.0)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
