// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct CarrierResult {
    name: String,
    value: f64,
}
impl std::fmt::Display for CarrierResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn carrier_concentration(mut electron_conc: f64, mut hole_conc: f64, mut intrinsic_conc: f64) -> CarrierResult {
    let mut zero_count: i64 = 0;
    if (electron_conc == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (hole_conc == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (intrinsic_conc == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (zero_count != 1) {
        panic!("You cannot supply more or less than 2 values");
    }
    if (electron_conc < 0.0) {
        panic!("Electron concentration cannot be negative in a semiconductor");
    }
    if (hole_conc < 0.0) {
        panic!("Hole concentration cannot be negative in a semiconductor");
    }
    if (intrinsic_conc < 0.0) {
        panic!("Intrinsic concentration cannot be negative in a semiconductor");
    }
    if (electron_conc == 0.0) {
        return CarrierResult {name: String::from("electron_conc"), value: ((intrinsic_conc * intrinsic_conc) / hole_conc)}
    }
    if (hole_conc == 0.0) {
        return CarrierResult {name: String::from("hole_conc"), value: ((intrinsic_conc * intrinsic_conc) / electron_conc)}
    }
    if (intrinsic_conc == 0.0) {
        return CarrierResult {name: String::from("intrinsic_conc"), value: sqrtApprox((electron_conc * hole_conc))}
    }
    return CarrierResult {name: String::from(""), value: -1.0}
};
    let r1: CarrierResult = carrier_concentration(25.0, 100.0, 0.0);
    println!("{}", format!("{}{}", format!("{}{}", r1.name.clone(), ", "), r1.value.to_string()));
    let r2: CarrierResult = carrier_concentration(0.0, 1600.0, 200.0);
    println!("{}", format!("{}{}", format!("{}{}", r2.name.clone(), ", "), r2.value.to_string()));
    let r3: CarrierResult = carrier_concentration(1000.0, 0.0, 1200.0);
    println!("{}", format!("{}{}", format!("{}{}", r3.name.clone(), ", "), r3.value.to_string()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
