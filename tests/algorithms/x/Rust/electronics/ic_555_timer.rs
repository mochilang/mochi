// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn astable_frequency(mut resistance_1: f64, mut resistance_2: f64, mut capacitance: f64) -> f64 {
    if (((resistance_1 <= 0.0) || (resistance_2 <= 0.0)) || (capacitance <= 0.0)) {
        panic!("All values must be positive");
    }
    return ((1.44 / ((resistance_1 + (2.0 * resistance_2)) * capacitance)) * 1000000.0)
};
    fn astable_duty_cycle(mut resistance_1: f64, mut resistance_2: f64) -> f64 {
    if ((resistance_1 <= 0.0) || (resistance_2 <= 0.0)) {
        panic!("All values must be positive");
    }
    return (((resistance_1 + resistance_2) / (resistance_1 + (2.0 * resistance_2))) * 100.0)
};
    println!("{}", format!("{:?}", astable_frequency(45.0, 45.0, 7.0)));
    println!("{}", format!("{:?}", astable_duty_cycle(45.0, 45.0)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
