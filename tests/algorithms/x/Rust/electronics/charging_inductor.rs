// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn expApprox(mut x: f64) -> f64 {
    if (x < 0.0) {
        return (1.0 / expApprox(-x))
    }
    if (x > 1.0) {
        let half: f64 = expApprox((x / 2.0));
        return (half * half)
    }
    let mut sum: f64 = 1.0;
    let mut term: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 20) {
        term = ((term * x) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
    fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
    fn pow10(mut n: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 10.0);
        i = (i + 1);
    }
    return result
};
    fn round(mut x: f64, mut n: i64) -> f64 {
    let m: f64 = pow10(n);
    return (floor(((x * m) + 0.5)) / m)
};
    fn charging_inductor(mut source_voltage: f64, mut resistance: f64, mut inductance: f64, mut time: f64) -> f64 {
    if (source_voltage <= 0.0) {
        panic!("Source voltage must be positive.");
    }
    if (resistance <= 0.0) {
        panic!("Resistance must be positive.");
    }
    if (inductance <= 0.0) {
        panic!("Inductance must be positive.");
    }
    let exponent: f64 = ((-time * resistance) / inductance);
    let current: f64 = ((source_voltage / resistance) * (1.0 - expApprox(exponent)));
    return round(current, 3)
};
    println!("{}", format!("{:?}", charging_inductor(5.8, 1.5, 2.3, 2.0)));
    println!("{}", format!("{:?}", charging_inductor(8.0, 5.0, 3.0, 2.0)));
    println!("{}", format!("{:?}", charging_inductor(8.0, (5.0 * pow10(2)), 3.0, 2.0)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
