// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        fn to_radians(mut deg: f64) -> f64 {
    return ((deg * unsafe { g_PI.clone() }) / 180.0)
};
        fn sin_taylor(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = (2.0 * (i as f64));
        let k2: f64 = (k1 + 1.0);
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        fn cos_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = ((2.0 * (i as f64)) - 1.0);
        let k2: f64 = (2.0 * (i as f64));
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        fn rect(mut mag: f64, mut angle: f64) -> Vec<f64> {
    let c: f64 = cos_taylor(angle);
    let s: f64 = sin_taylor(angle);
    return vec![(mag * c), (mag * s)]
};
        fn multiply(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    return vec![((a[0 as usize] * b[0 as usize]) - (a[1 as usize] * b[1 as usize])), ((a[0 as usize] * b[1 as usize]) + (a[1 as usize] * b[0 as usize]))]
};
        fn apparent_power(mut voltage: f64, mut current: f64, mut voltage_angle: f64, mut current_angle: f64) -> Vec<f64> {
    let vrad: f64 = to_radians(voltage_angle);
    let irad: f64 = to_radians(current_angle);
    let vrect: Vec<f64> = rect(voltage, vrad);
    let irect: Vec<f64> = rect(current, irad);
    let result: Vec<f64> = multiply(vrect.clone(), irect.clone());
    return result
};
        fn approx_equal(mut a: Vec<f64>, mut b: Vec<f64>, mut eps: f64) -> bool {
    return ((abs((a[0 as usize] - b[0 as usize])) < eps) && (abs((a[1 as usize] - b[1 as usize])) < eps))
};
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
