// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
fn int(x: i64) -> i64 { x }
fn main() {
    let valid_colors: Vec<String> = vec![String::from("Black").clone().clone(), String::from("Brown").clone().clone(), String::from("Red").clone().clone(), String::from("Orange").clone().clone(), String::from("Yellow").clone().clone(), String::from("Green").clone().clone(), String::from("Blue").clone().clone(), String::from("Violet").clone().clone(), String::from("Grey").clone().clone(), String::from("White").clone().clone(), String::from("Gold").clone().clone(), String::from("Silver").clone().clone()];
    let significant_figures_color_values: HashMap<String, i64> = HashMap::from([(String::from("Black"), 0), (String::from("Brown"), 1), (String::from("Red"), 2), (String::from("Orange"), 3), (String::from("Yellow"), 4), (String::from("Green"), 5), (String::from("Blue"), 6), (String::from("Violet"), 7), (String::from("Grey"), 8), (String::from("White"), 9)]);
    let multiplier_color_values: HashMap<String, f64> = HashMap::from([(String::from("Black"), 1.0), (String::from("Brown"), 10.0), (String::from("Red"), 100.0), (String::from("Orange"), 1000.0), (String::from("Yellow"), 10000.0), (String::from("Green"), 100000.0), (String::from("Blue"), 1000000.0), (String::from("Violet"), 10000000.0), (String::from("Grey"), 100000000.0), (String::from("White"), 1000000000.0), (String::from("Gold"), 0.1), (String::from("Silver"), 0.01)]);
    let tolerance_color_values: HashMap<String, f64> = HashMap::from([(String::from("Brown"), 1.0), (String::from("Red"), 2.0), (String::from("Orange"), 0.05), (String::from("Yellow"), 0.02), (String::from("Green"), 0.5), (String::from("Blue"), 0.25), (String::from("Violet"), 0.1), (String::from("Grey"), 0.01), (String::from("Gold"), 5.0), (String::from("Silver"), 10.0)]);
    let temperature_coeffecient_color_values: HashMap<String, i64> = HashMap::from([(String::from("Black"), 250), (String::from("Brown"), 100), (String::from("Red"), 50), (String::from("Orange"), 15), (String::from("Yellow"), 25), (String::from("Green"), 20), (String::from("Blue"), 10), (String::from("Violet"), 5), (String::from("Grey"), 1)]);
    let mut contains = move |list: Vec<String>, value: String| -> bool {
    for c in list.iter().cloned() {
        if (c.as_str() == value.as_str()) {
            return true
        }
    }
    return false
};
    let mut get_significant_digits = move |colors: Vec<String>| -> i64 {
    let mut digit: i64 = 0;
    for color in colors.iter().cloned() {
        if !significant_figures_color_values.contains_key(&color) {
            panic!("{}", format!("{}{}", color, " is not a valid color for significant figure bands"));
        }
        digit = ((digit * 10) + significant_figures_color_values.get(color.as_str()).cloned().unwrap_or_default());
    }
    return digit
};
    let mut get_multiplier = move |color: String| -> f64 {
    if !multiplier_color_values.contains_key(&color) {
        panic!("{}", format!("{}{}", color, " is not a valid color for multiplier band"));
    }
    return multiplier_color_values.get(color.as_str()).cloned().unwrap_or_default()
};
    let mut get_tolerance = move |color: String| -> f64 {
    if !tolerance_color_values.contains_key(&color) {
        panic!("{}", format!("{}{}", color, " is not a valid color for tolerance band"));
    }
    return tolerance_color_values.get(color.as_str()).cloned().unwrap_or_default()
};
    let mut get_temperature_coeffecient = move |color: String| -> i64 {
    if !temperature_coeffecient_color_values.contains_key(&color) {
        panic!("{}", format!("{}{}", color, " is not a valid color for temperature coeffecient band"));
    }
    return temperature_coeffecient_color_values.get(color.as_str()).cloned().unwrap_or_default()
};
    let mut get_band_type_count = move |total: i64, typ: String| -> i64 {
    if (total == 3) {
        if (typ.as_str() == "significant") {
            return 2
        }
        if (typ.as_str() == "multiplier") {
            return 1
        }
        panic!("{}", format!("{}{}", typ, " is not valid for a 3 band resistor"));
    } else if (total == 4) {
        if (typ.as_str() == "significant") {
            return 2
        }
        if (typ.as_str() == "multiplier") {
            return 1
        }
        if (typ.as_str() == "tolerance") {
            return 1
        }
        panic!("{}", format!("{}{}", typ, " is not valid for a 4 band resistor"));
    } else if (total == 5) {
        if (typ.as_str() == "significant") {
            return 3
        }
        if (typ.as_str() == "multiplier") {
            return 1
        }
        if (typ.as_str() == "tolerance") {
            return 1
        }
        panic!("{}", format!("{}{}", typ, " is not valid for a 5 band resistor"));
    } else if (total == 6) {
        if (typ.as_str() == "significant") {
            return 3
        }
        if (typ.as_str() == "multiplier") {
            return 1
        }
        if (typ.as_str() == "tolerance") {
            return 1
        }
        if (typ.as_str() == "temp_coeffecient") {
            return 1
        }
        panic!("{}", format!("{}{}", typ, " is not valid for a 6 band resistor"));
    } else {
        panic!("{}", format!("{}{}", total.to_string(), " is not a valid number of bands"));
    }
};
    let mut check_validity = move |number_of_bands: i64, colors: Vec<String>| -> bool {
    if ((number_of_bands < 3) || (number_of_bands > 6)) {
        panic!("Invalid number of bands. Resistor bands must be 3 to 6");
    }
    if (number_of_bands != (colors.len() as i64)) {
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Expecting ", number_of_bands.to_string()), " colors, provided "), (colors.len() as i64).to_string()), " colors"));
    }
    for color in colors.iter().cloned() {
        if !contains(valid_colors.clone(), color.clone()) {
            panic!("{}", format!("{}{}", color, " is not a valid color"));
        }
    }
    return true
};
    let mut calculate_resistance = move |number_of_bands: i64, color_code_list: Vec<String>| -> String {
    check_validity(number_of_bands, color_code_list.clone());
    let sig_count: i64 = get_band_type_count(number_of_bands, String::from("significant"));
    let significant_colors: Vec<String> = color_code_list[0 as usize..sig_count as usize].to_vec();
    let significant_digits: i64 = get_significant_digits(significant_colors.clone());
    let multiplier_color: String = color_code_list[sig_count as usize].clone().clone();
    let multiplier: f64 = get_multiplier(multiplier_color.clone());
    let mut tolerance: f64 = 20.0;
    if (number_of_bands >= 4) {
        let tolerance_color: String = color_code_list[(sig_count + 1) as usize].clone().clone();
        tolerance = get_tolerance(tolerance_color.clone());
    }
    let mut temp_coeff: i64 = 0;
    if (number_of_bands == 6) {
        let temp_color: String = color_code_list[(sig_count + 2) as usize].clone().clone();
        temp_coeff = get_temperature_coeffecient(temp_color.clone());
    }
    let resistance_value: f64 = (multiplier * (significant_digits as f64));
    let mut resistance_str = resistance_value.to_string();
    if (resistance_value == ((resistance_value as i64) as f64)) {
        resistance_str = (resistance_value as i64).to_string();
    }
    let mut answer: String = format!("{}{}", format!("{}{}", format!("{}{}", resistance_str, "Ω ±"), tolerance.to_string()), "% ").clone();
    if (temp_coeff != 0) {
        answer = format!("{}{}", format!("{}{}", answer, temp_coeff.to_string()), " ppm/K");
    }
    return answer.clone()
};
}
