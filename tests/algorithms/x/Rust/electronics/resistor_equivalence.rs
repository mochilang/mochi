// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn resistor_parallel(mut resistors: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (resistors.len() as i64)) {
        let r: f64 = resistors[i as usize];
        if (r <= 0.0) {
            panic!("{}", format!("{}{}", format!("{}{}", "Resistor at index ", i.to_string()), " has a negative or zero value!"));
        }
        sum = (sum + (1.0 / r));
        i = (i + 1);
    }
    return (1.0 / sum)
};
    fn resistor_series(mut resistors: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (resistors.len() as i64)) {
        let r: f64 = resistors[i as usize];
        if (r < 0.0) {
            panic!("{}", format!("{}{}", format!("{}{}", "Resistor at index ", i.to_string()), " has a negative value!"));
        }
        sum = (sum + r);
        i = (i + 1);
    }
    return sum
};
    fn mochi_main() {
    let resistors: Vec<f64> = vec![3.21389, 2.0, 3.0];
    println!("{}", format!("{}{}", "Parallel: ", resistor_parallel(resistors.clone()).to_string()));
    println!("{}", format!("{}{}", "Series: ", resistor_series(resistors.clone()).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
