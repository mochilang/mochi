// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
    fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 10.0);
        i = (i + 1);
    }
    return p
};
    fn roundn(mut x: f64, mut n: i64) -> f64 {
    let m: f64 = pow10(n);
    return (floor(((x * m) + 0.5)) / m)
};
    fn pad(mut signal: Vec<f64>, mut target: i64) -> Vec<f64> {
    let mut s: Vec<f64> = signal.clone();
    while ((s.len() as i64) < target) {
        s = { let mut _v = s.clone(); _v.push(0.0); _v };
    }
    return s
};
    fn circular_convolution(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    let n1: i64 = (a.len() as i64);
    let n2: i64 = (b.len() as i64);
    let n: i64 = if (n1 > n2) { n1 } else { n2 };
    let mut x: Vec<f64> = pad(a.clone(), n);
    let mut y: Vec<f64> = pad(b.clone(), n);
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut sum: f64 = 0.0;
        let mut k: i64 = 0;
        while (k < n) {
            let j: i64 = ((i - k) % n);
            let idx: i64 = if (j < 0) { (j + n) } else { j };
            sum = (sum + (x[k as usize] * y[idx as usize]));
            k = (k + 1);
        }
        res = { let mut _v = res.clone(); _v.push(roundn(sum, 2)); _v };
        i = (i + 1);
    }
    return res
};
    let example1: Vec<f64> = circular_convolution(vec![2.0, 1.0, 2.0, -1.0], vec![1.0, 2.0, 3.0, 4.0]);
    println!("{}", format!("{:?}", example1));
    let example2: Vec<f64> = circular_convolution(vec![0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6], vec![0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]);
    println!("{}", format!("{:?}", example2));
    let example3: Vec<f64> = circular_convolution(vec![-1.0, 1.0, 2.0, -2.0], vec![0.5, 1.0, -1.0, 2.0, 0.75]);
    println!("{}", format!("{:?}", example3));
    let example4: Vec<f64> = circular_convolution(vec![1.0, -1.0, 2.0, 3.0, -1.0], vec![1.0, 2.0, 3.0]);
    println!("{}", format!("{:?}", example4));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
