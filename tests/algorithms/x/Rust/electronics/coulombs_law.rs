// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_COULOMBS_CONSTANT: f64 = 8988000000.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn coulombs_law(mut force: f64, mut charge1: f64, mut charge2: f64, mut distance: f64) -> HashMap<String, f64> {
    let charge_product: f64 = abs((charge1 * charge2));
    let mut zero_count: i64 = 0;
    if (force == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (charge1 == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (charge2 == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (distance == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (zero_count != 1) {
        panic!("One and only one argument must be 0");
    }
    if (distance < 0.0) {
        panic!("Distance cannot be negative");
    }
    if (force == 0.0) {
        let f: f64 = ((unsafe { g_COULOMBS_CONSTANT.clone() } * charge_product) / (distance * distance));
        return HashMap::from([(String::from("force"), f)])
    }
    if (charge1 == 0.0) {
        let c1: f64 = ((abs(force) * (distance * distance)) / (unsafe { g_COULOMBS_CONSTANT.clone() } * charge2));
        return HashMap::from([(String::from("charge1"), c1)])
    }
    if (charge2 == 0.0) {
        let c2: f64 = ((abs(force) * (distance * distance)) / (unsafe { g_COULOMBS_CONSTANT.clone() } * charge1));
        return HashMap::from([(String::from("charge2"), c2)])
    }
    let d: f64 = sqrtApprox(((unsafe { g_COULOMBS_CONSTANT.clone() } * charge_product) / abs(force)));
    return HashMap::from([(String::from("distance"), d)])
};
        fn print_map(mut m: HashMap<String, f64>) {
    for k in m.keys().cloned() {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "{\"", k), "\": "), m.get(k.as_str()).cloned().unwrap_or_default().to_string()), "}"));
    }
};
        print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0));
        print_map(coulombs_law(10.0, 3.0, 5.0, 0.0));
        print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
