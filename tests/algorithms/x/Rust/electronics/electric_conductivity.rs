// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Result {
    kind: String,
    value: f64,
}
impl std::fmt::Display for Result {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"kind\": \"{}\"", self.kind)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

static g_ELECTRON_CHARGE: f64 = 0.00000000000000000016021;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn electric_conductivity(mut conductivity: f64, mut electron_conc: f64, mut mobility: f64) -> Result {
    let mut zero_count: i64 = 0;
    if (conductivity == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (electron_conc == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (mobility == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (zero_count != 1) {
        panic!("You cannot supply more or less than 2 values");
    }
    if (conductivity < 0.0) {
        panic!("Conductivity cannot be negative");
    }
    if (electron_conc < 0.0) {
        panic!("Electron concentration cannot be negative");
    }
    if (mobility < 0.0) {
        panic!("mobility cannot be negative");
    }
    if (conductivity == 0.0) {
        return Result {kind: String::from("conductivity"), value: ((mobility * electron_conc) * unsafe { g_ELECTRON_CHARGE.clone() })}
    }
    if (electron_conc == 0.0) {
        return Result {kind: String::from("electron_conc"), value: (conductivity / (mobility * unsafe { g_ELECTRON_CHARGE.clone() }))}
    }
    return Result {kind: String::from("mobility"), value: (conductivity / (electron_conc * unsafe { g_ELECTRON_CHARGE.clone() }))}
};
        let r1: Result = electric_conductivity(25.0, 100.0, 0.0);
        let r2: Result = electric_conductivity(0.0, 1600.0, 200.0);
        let r3: Result = electric_conductivity(1000.0, 0.0, 1200.0);
        println!("{}", format!("{}{}", format!("{}{}", r1.kind.clone(), " "), r1.value.to_string()));
        println!("{}", format!("{}{}", format!("{}{}", r2.kind.clone(), " "), r2.value.to_string()));
        println!("{}", format!("{}{}", format!("{}{}", r3.kind.clone(), " "), r3.value.to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
