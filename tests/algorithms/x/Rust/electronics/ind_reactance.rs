// Generated by Mochi transpiler v0.10.65
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn ind_reactance(mut inductance: f64, mut frequency: f64, mut reactance: f64) -> HashMap<String, f64> {
    let mut zero_count: i64 = 0;
    if (inductance == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (frequency == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (reactance == 0.0) {
        zero_count = (zero_count + 1);
    }
    if (zero_count != 1) {
        panic!("One and only one argument must be 0");
    }
    if (inductance < 0.0) {
        panic!("Inductance cannot be negative");
    }
    if (frequency < 0.0) {
        panic!("Frequency cannot be negative");
    }
    if (reactance < 0.0) {
        panic!("Inductive reactance cannot be negative");
    }
    if (inductance == 0.0) {
        return HashMap::from([(String::from("inductance"), (reactance / ((2.0 * unsafe { g_PI.clone() }) * frequency)))])
    }
    if (frequency == 0.0) {
        return HashMap::from([(String::from("frequency"), (reactance / ((2.0 * unsafe { g_PI.clone() }) * inductance)))])
    }
    return HashMap::from([(String::from("reactance"), (((2.0 * unsafe { g_PI.clone() }) * frequency) * inductance))])
};
        println!("{:?}", format!("{:?}", ind_reactance(0.0, 10000.0, 50.0)));
        println!("{:?}", format!("{:?}", ind_reactance(0.035, 0.0, 50.0)));
        println!("{:?}", format!("{:?}", ind_reactance(0.000035, 1000.0, 0.0)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
