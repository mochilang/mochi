// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
#[derive(Debug, Clone, Default)]
struct Vec_ {
    x: f64,
    y: f64,
}
impl std::fmt::Display for Vec_ {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

static g_PI: f64 = 3.141592653589793;
static g_TWO_PI: f64 = 6.283185307179586;
static g_VECTOR_1: Vec_ = Vec_ {x: 0.0, y: 0.0};
static g_VECTOR_2: Vec_ = Vec_ {x: 0.5, y: 0.8660254};
static g_VECTOR_3: Vec_ = Vec_ {x: 1.0, y: 0.0};
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - ((((x / m) as i64) as f64) * m))
};
        fn sin(mut x: f64) -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y3: f64 = (y2 * y);
    let y5: f64 = (y3 * y2);
    let y7: f64 = (y5 * y2);
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
};
        fn cos(mut x: f64) -> f64 {
    let y: f64 = (_mod((x + unsafe { g_PI.clone() }), unsafe { g_TWO_PI.clone() }) - unsafe { g_PI.clone() });
    let y2: f64 = (y * y);
    let y4: f64 = (y2 * y2);
    let y6: f64 = (y4 * y2);
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
};
        fn rotate(mut v: Vec_, mut angle_deg: f64) -> Vec_ {
    let theta: f64 = ((angle_deg * unsafe { g_PI.clone() }) / 180.0);
    let c: f64 = cos(theta);
    let s: f64 = sin(theta);
    return Vec_ {x: ((v.x * c) - (v.y * s)), y: ((v.x * s) + (v.y * c))}
};
        fn iteration_step(mut vectors: Vec<Vec_>) -> Vec<Vec_> {
    let mut new_vectors: Vec<Vec_> = vec![];
    let mut i: i64 = 0;
    while (i < ((vectors.len() as i64) - 1)) {
        let start: Vec_ = vectors[i as usize].clone();
        let end: Vec_ = vectors[(i + 1) as usize].clone();
        new_vectors = { let mut _v = new_vectors.clone(); _v.push(start.clone()); _v };
        let dx: f64 = (end.x - start.x);
        let dy: f64 = (end.y - start.y);
        let one_third: Vec_ = Vec_ {x: (start.x + (dx / 3.0)), y: (start.y + (dy / 3.0))};
        let mid: Vec_ = rotate(Vec_ {x: (dx / 3.0), y: (dy / 3.0)}, 60.0);
        let peak: Vec_ = Vec_ {x: (one_third.x + mid.x), y: (one_third.y + mid.y)};
        let two_third: Vec_ = Vec_ {x: (start.x + ((dx * 2.0) / 3.0)), y: (start.y + ((dy * 2.0) / 3.0))};
        new_vectors = { let mut _v = new_vectors.clone(); _v.push(one_third.clone()); _v };
        new_vectors = { let mut _v = new_vectors.clone(); _v.push(peak.clone()); _v };
        new_vectors = { let mut _v = new_vectors.clone(); _v.push(two_third.clone()); _v };
        i = (i + 1);
    }
    new_vectors = { let mut _v = new_vectors.clone(); _v.push(vectors[((vectors.len() as i64) - 1) as usize].clone()); _v };
    return new_vectors
};
        fn iterate(mut initial: Vec<Vec_>, mut steps: i64) -> Vec<Vec_> {
    let mut vectors: Vec<Vec_> = initial.clone();
    let mut i: i64 = 0;
    while (i < steps) {
        vectors = iteration_step(vectors.clone());
        i = (i + 1);
    }
    return vectors
};
        fn vec_to_string(mut v: Vec_) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "(", v.x.to_string()), ", "), v.y.to_string()), ")").clone()
};
        fn vec_list_to_string(mut lst: Vec<Vec_>) -> String {
    let mut res: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        res = format!("{}{}", res, vec_to_string(lst[i as usize].clone()));
        if (i < ((lst.len() as i64) - 1)) {
            res = format!("{}{}", res, ", ");
        }
        i = (i + 1);
    }
    res = format!("{}{}", res, "]");
    return res.clone()
};
        let INITIAL_VECTORS: Vec<Vec_> = vec![unsafe { g_VECTOR_1.clone() }.clone(), unsafe { g_VECTOR_2.clone() }.clone(), unsafe { g_VECTOR_3.clone() }.clone(), unsafe { g_VECTOR_1.clone() }.clone()];
        let example: Vec<Vec_> = iterate(vec![unsafe { g_VECTOR_1.clone() }.clone(), unsafe { g_VECTOR_3.clone() }.clone()], 1);
        println!("{}", vec_list_to_string(example.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
