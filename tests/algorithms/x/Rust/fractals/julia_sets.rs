// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Complex {
    re: f64,
    im: f64,
}
impl std::fmt::Display for Complex {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"re\": {}", self.re)?;
        write!(f, ", ")?;
        write!(f, "\"im\": {}", self.im)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn complex_add(mut a: Complex, mut b: Complex) -> Complex {
    return Complex {re: (a.re + b.re), im: (a.im + b.im)}
};
    fn complex_mul(mut a: Complex, mut b: Complex) -> Complex {
    let real: f64 = ((a.re * b.re) - (a.im * b.im));
    let imag: f64 = ((a.re * b.im) + (a.im * b.re));
    return Complex {re: real, im: imag}
};
    fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn complex_abs(mut a: Complex) -> f64 {
    return sqrtApprox(((a.re * a.re) + (a.im * a.im)))
};
    fn sin_taylor(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = (2.0 * (i as f64));
        let k2: f64 = ((2.0 * (i as f64)) + 1.0);
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    fn cos_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = ((2.0 * (i as f64)) - 1.0);
        let k2: f64 = (2.0 * (i as f64));
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    fn exp_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: f64 = 1.0;
    while (i < 20.0) {
        term = ((term * x) / i);
        sum = (sum + term);
        i = (i + 1.0);
    }
    return sum
};
    fn complex_exp(mut z: Complex) -> Complex {
    let e: f64 = exp_taylor(z.re);
    return Complex {re: (e * cos_taylor(z.im)), im: (e * sin_taylor(z.im))}
};
    fn eval_quadratic(mut c: Complex, mut z: Complex) -> Complex {
    return complex_add(complex_mul(z.clone(), z.clone()), c.clone())
};
    fn eval_exponential(mut c: Complex, mut z: Complex) -> Complex {
    return complex_add(complex_exp(z.clone()), c.clone())
};
    fn iterate_function(eval_function: &mut impl FnMut(Complex, Complex) -> Complex, mut c: Complex, mut nb_iterations: i64, mut z0: Complex, mut infinity: f64) -> Complex {
    let mut z_n: Complex = z0.clone();
    let mut i: i64 = 0;
    while (i < nb_iterations) {
        z_n = eval_function(c.clone(), z_n.clone());
        if (complex_abs(z_n.clone()) > infinity) {
            return z_n
        }
        i = (i + 1);
    }
    return z_n
};
    fn prepare_grid(mut window_size: f64, mut nb_pixels: i64) -> Vec<Vec<Complex>> {
    let mut grid: Vec<Vec<Complex>> = vec![];
    let mut i: i64 = 0;
    while (i < nb_pixels) {
        let mut row: Vec<Complex> = vec![];
        let mut j: i64 = 0;
        while (j < nb_pixels) {
            let real: f64 = (-window_size + (((2.0 * window_size) * (i as f64)) / ((nb_pixels - 1) as f64)));
            let imag: f64 = (-window_size + (((2.0 * window_size) * (j as f64)) / ((nb_pixels - 1) as f64)));
            row = { let mut _v = row.clone(); _v.push(Complex {re: real, im: imag}); _v };
            j = (j + 1);
        }
        grid = { let mut _v = grid.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return grid
};
    fn julia_demo() {
    let grid: Vec<Vec<Complex>> = prepare_grid(1.0, 5);
    let c_poly: Complex = Complex {re: -0.4, im: 0.6};
    let c_exp: Complex = Complex {re: -2.0, im: 0.0};
    let mut poly_result: Vec<Vec<i64>> = vec![];
    let mut exp_result: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < (grid.len() as i64)) {
        let mut row_poly: Vec<i64> = vec![];
        let mut row_exp: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < (grid[y as usize].clone().len() as i64)) {
            let z0: Complex = grid[y as usize].clone()[x as usize].clone();
            let z_poly: Complex = iterate_function(&mut eval_quadratic, c_poly.clone(), 20, z0.clone(), 4.0);
            let z_exp: Complex = iterate_function(&mut eval_exponential, c_exp.clone(), 10, z0.clone(), 10000000000.0);
            row_poly = { let mut _v = row_poly.clone(); _v.push(if (complex_abs(z_poly.clone()) < 2.0) { 1 } else { 0 }); _v };
            row_exp = { let mut _v = row_exp.clone(); _v.push(if (complex_abs(z_exp.clone()) < 10000.0) { 1 } else { 0 }); _v };
            x = (x + 1);
        }
        poly_result = { let mut _v = poly_result.clone(); _v.push(row_poly.clone()); _v };
        exp_result = { let mut _v = exp_result.clone(); _v.push(row_exp.clone()); _v };
        y = (y + 1);
    }
    println!("{:?}", format!("{:?}", poly_result));
    println!("{:?}", format!("{:?}", exp_result));
};
    julia_demo();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
