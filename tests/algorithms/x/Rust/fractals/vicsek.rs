// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn repeat_char(mut c: String, mut count: i64) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < count) {
        s = format!("{}{}", s, c);
        i = (i + 1);
    }
    return s.clone()
};
    fn vicsek(mut order: i64) -> Vec<String> {
    if (order == 0) {
        return vec![String::from("#").clone()]
    }
    let prev: Vec<String> = vicsek((order - 1));
    let size: i64 = (prev.len() as i64);
    let blank: String = repeat_char(String::from(" "), size).clone();
    let mut result: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        result = { let mut _v = result.clone(); _v.push(format!("{}{}", format!("{}{}", blank, prev[i as usize].clone()), blank)); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < size) {
        result = { let mut _v = result.clone(); _v.push(format!("{}{}", format!("{}{}", prev[i as usize].clone(), prev[i as usize].clone()), prev[i as usize].clone())); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < size) {
        result = { let mut _v = result.clone(); _v.push(format!("{}{}", format!("{}{}", blank, prev[i as usize].clone()), blank)); _v };
        i = (i + 1);
    }
    return result
};
    fn print_pattern(mut pattern: Vec<String>) {
    let mut i: i64 = 0;
    while (i < (pattern.len() as i64)) {
        println!("{}", pattern[i as usize].clone());
        i = (i + 1);
    }
};
    fn mochi_main() {
    let depth: i64 = 3;
    let pattern: Vec<String> = vicsek(depth);
    print_pattern(pattern.clone());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
