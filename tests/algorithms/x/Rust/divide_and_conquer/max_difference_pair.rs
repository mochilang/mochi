// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn min_slice(mut a: Vec<i64>, mut start: i64, mut end: i64) -> i64 {
    let mut m: i64 = a[start as usize];
    let mut i: i64 = (start + 1);
    while (i < end) {
        if (a[i as usize] < m) {
            m = a[i as usize];
        }
        i = (i + 1);
    }
    return m
};
    fn max_slice(mut a: Vec<i64>, mut start: i64, mut end: i64) -> i64 {
    let mut m: i64 = a[start as usize];
    let mut i: i64 = (start + 1);
    while (i < end) {
        if (a[i as usize] > m) {
            m = a[i as usize];
        }
        i = (i + 1);
    }
    return m
};
    fn max_diff_range(mut a: Vec<i64>, mut start: i64, mut end: i64) -> Vec<i64> {
    if ((end - start) == 1) {
        let mut v: i64 = a[start as usize];
        return vec![v, v]
    }
    let mut mid: i64 = ((start + end) / 2);
    let mut left: Vec<i64> = max_diff_range(a.clone(), start, mid);
    let mut right: Vec<i64> = max_diff_range(a.clone(), mid, end);
    let mut small1: i64 = left[0 as usize];
    let mut big1: i64 = left[1 as usize];
    let mut small2: i64 = right[0 as usize];
    let mut big2: i64 = right[1 as usize];
    let mut min_left: i64 = min_slice(a.clone(), start, mid);
    let mut max_right: i64 = max_slice(a.clone(), mid, end);
    let mut cross_diff: i64 = (max_right - min_left);
    let mut left_diff: i64 = (big1 - small1);
    let mut right_diff: i64 = (big2 - small2);
    if ((right_diff > cross_diff) && (right_diff > left_diff)) {
        return vec![small2, big2]
    } else if (left_diff > cross_diff) {
        return vec![small1, big1]
    } else {
        return vec![min_left, max_right]
    }
};
    fn max_difference(mut a: Vec<i64>) -> Vec<i64> {
    return max_diff_range(a.clone(), 0, (a.len() as i64))
};
    fn mochi_main() {
    let mut result: Vec<i64> = max_difference(vec![5, 11, 2, 1, 7, 9, 0, 7]);
    println!("{}", format!("{:?}", result));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
