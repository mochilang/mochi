// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn copy_list(mut arr: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(arr[i as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn heaps(arr: &mut Vec<i64>) -> Vec<Vec<i64>> {
    if ((arr.len() as i64) <= 1) {
        let mut single: Vec<Vec<i64>> = vec![];
        return { let mut _v = single.clone(); _v.push(copy_list(arr.clone())); _v }
    }
    let mut n = (arr.len() as i64);
    let mut c: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        c = { let mut _v = c.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut res: Vec<Vec<i64>> = vec![];
    res = { let mut _v = res.clone(); _v.push(copy_list(arr.clone())); _v };
    i = 0;
    while (i < n) {
        if (c[i as usize] < i) {
            if ((i % 2) == 0) {
                let mut temp: i64 = arr[0 as usize];
                (*arr)[0 as usize] = arr[i as usize];
                (*arr)[i as usize] = temp;
            } else {
                let mut temp: i64 = arr[c[i as usize] as usize];
                (*arr)[c[i as usize] as usize] = arr[i as usize];
                (*arr)[i as usize] = temp;
            }
            res = { let mut _v = res.clone(); _v.push(copy_list(arr.clone())); _v };
            c[i as usize] = (c[i as usize] + 1);
            i = 0;
        } else {
            c[i as usize] = 0;
            i = (i + 1);
        }
    }
    return res
};
    println!("{}", format!("{:?}", heaps(&mut vec![1, 2, 3])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
