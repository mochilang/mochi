// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn peak(mut lst: Vec<i64>) -> i64 {
    let mut low: i64 = 0;
    let mut high = ((lst.len() as i64) - 1);
    while (low < high) {
        let mut mid: i64 = ((low + high) / 2);
        if (lst[mid as usize] < lst[(mid + 1) as usize]) {
            low = (mid + 1);
        } else {
            high = mid;
        }
    }
    return lst[low as usize]
};
    fn mochi_main() {
    println!("{}", peak(vec![1, 2, 3, 4, 5, 4, 3, 2, 1]).to_string());
    println!("{}", peak(vec![1, 10, 9, 8, 7, 6, 5, 4]).to_string());
    println!("{}", peak(vec![1, 9, 8, 7]).to_string());
    println!("{}", peak(vec![1, 2, 3, 4, 5, 6, 7, 0]).to_string());
    println!("{}", peak(vec![1, 2, 3, 4, 3, 2, 1, 0, -1, -2]).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
