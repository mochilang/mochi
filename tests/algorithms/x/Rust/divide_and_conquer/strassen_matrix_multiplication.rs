// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn default_matrix_multiplication(mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    return vec![vec![((a[0 as usize].clone()[0 as usize] * b[0 as usize].clone()[0 as usize]) + (a[0 as usize].clone()[1 as usize] * b[1 as usize].clone()[0 as usize])), ((a[0 as usize].clone()[0 as usize] * b[0 as usize].clone()[1 as usize]) + (a[0 as usize].clone()[1 as usize] * b[1 as usize].clone()[1 as usize]))], vec![((a[1 as usize].clone()[0 as usize] * b[0 as usize].clone()[0 as usize]) + (a[1 as usize].clone()[1 as usize] * b[1 as usize].clone()[0 as usize])), ((a[1 as usize].clone()[0 as usize] * b[0 as usize].clone()[1 as usize]) + (a[1 as usize].clone()[1 as usize] * b[1 as usize].clone()[1 as usize]))]]
};
    fn matrix_addition(mut matrix_a: Vec<Vec<i64>>, mut matrix_b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (matrix_a.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (matrix_a[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push((matrix_a[i as usize].clone()[j as usize] + matrix_b[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn matrix_subtraction(mut matrix_a: Vec<Vec<i64>>, mut matrix_b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (matrix_a.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (matrix_a[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push((matrix_a[i as usize].clone()[j as usize] - matrix_b[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn split_matrix(mut a: Vec<Vec<i64>>) -> Vec<Vec<Vec<i64>>> {
    let mut n = (a.len() as i64);
    let mut mid: i64 = (n / 2);
    let mut top_left: Vec<Vec<i64>> = vec![];
    let mut top_right: Vec<Vec<i64>> = vec![];
    let mut bot_left: Vec<Vec<i64>> = vec![];
    let mut bot_right: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < mid) {
        let mut left_row: Vec<i64> = vec![];
        let mut right_row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < mid) {
            left_row = { let mut _v = left_row.clone(); _v.push(a[i as usize].clone()[j as usize]); _v };
            right_row = { let mut _v = right_row.clone(); _v.push(a[i as usize].clone()[(j + mid) as usize]); _v };
            j = (j + 1);
        }
        top_left = { let mut _v = top_left.clone(); _v.push(left_row.clone()); _v };
        top_right = { let mut _v = top_right.clone(); _v.push(right_row.clone()); _v };
        i = (i + 1);
    }
    i = mid;
    while (i < n) {
        let mut left_row: Vec<i64> = vec![];
        let mut right_row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < mid) {
            left_row = { let mut _v = left_row.clone(); _v.push(a[i as usize].clone()[j as usize]); _v };
            right_row = { let mut _v = right_row.clone(); _v.push(a[i as usize].clone()[(j + mid) as usize]); _v };
            j = (j + 1);
        }
        bot_left = { let mut _v = bot_left.clone(); _v.push(left_row.clone()); _v };
        bot_right = { let mut _v = bot_right.clone(); _v.push(right_row.clone()); _v };
        i = (i + 1);
    }
    return vec![top_left, top_right, bot_left, bot_right]
};
    fn matrix_dimensions(mut matrix: Vec<Vec<i64>>) -> Vec<i64> {
    return vec![(matrix.len() as i64), (matrix[0 as usize].clone().len() as i64)]
};
    fn next_power_of_two(mut n: i64) -> i64 {
    let mut p: i64 = 1;
    while (p < n) {
        p = (p * 2);
    }
    return p
};
    fn pad_matrix(mut mat: Vec<Vec<i64>>, mut rows: i64, mut cols: i64) -> Vec<Vec<i64>> {
    let mut res: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            let mut v: i64 = 0;
            if ((i < (mat.len() as i64)) && (j < (mat[0 as usize].clone().len() as i64))) {
                v = mat[i as usize].clone()[j as usize];
            }
            row = { let mut _v = row.clone(); _v.push(v); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
    fn actual_strassen(mut matrix_a: Vec<Vec<i64>>, mut matrix_b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    if (matrix_dimensions(matrix_a.clone())[0 as usize] == 2) {
        return default_matrix_multiplication(matrix_a.clone(), matrix_b.clone())
    }
    let mut parts_a: Vec<Vec<Vec<i64>>> = split_matrix(matrix_a.clone());
    let mut a: Vec<Vec<i64>> = parts_a[0 as usize].clone();
    let mut b: Vec<Vec<i64>> = parts_a[1 as usize].clone();
    let mut c: Vec<Vec<i64>> = parts_a[2 as usize].clone();
    let mut d: Vec<Vec<i64>> = parts_a[3 as usize].clone();
    let mut parts_b: Vec<Vec<Vec<i64>>> = split_matrix(matrix_b.clone());
    let mut e: Vec<Vec<i64>> = parts_b[0 as usize].clone();
    let mut f: Vec<Vec<i64>> = parts_b[1 as usize].clone();
    let mut g: Vec<Vec<i64>> = parts_b[2 as usize].clone();
    let mut h: Vec<Vec<i64>> = parts_b[3 as usize].clone();
    let mut t1: Vec<Vec<i64>> = actual_strassen(a.clone(), matrix_subtraction(f.clone(), h.clone()));
    let mut t2: Vec<Vec<i64>> = actual_strassen(matrix_addition(a.clone(), b.clone()), h.clone());
    let mut t3: Vec<Vec<i64>> = actual_strassen(matrix_addition(c.clone(), d.clone()), e.clone());
    let mut t4: Vec<Vec<i64>> = actual_strassen(d.clone(), matrix_subtraction(g.clone(), e.clone()));
    let mut t5: Vec<Vec<i64>> = actual_strassen(matrix_addition(a.clone(), d.clone()), matrix_addition(e.clone(), h.clone()));
    let mut t6: Vec<Vec<i64>> = actual_strassen(matrix_subtraction(b.clone(), d.clone()), matrix_addition(g.clone(), h.clone()));
    let mut t7: Vec<Vec<i64>> = actual_strassen(matrix_subtraction(a.clone(), c.clone()), matrix_addition(e.clone(), f.clone()));
    let mut top_left: Vec<Vec<i64>> = matrix_addition(matrix_subtraction(matrix_addition(t5.clone(), t4.clone()), t2.clone()), t6.clone());
    let mut top_right: Vec<Vec<i64>> = matrix_addition(t1.clone(), t2.clone());
    let mut bot_left: Vec<Vec<i64>> = matrix_addition(t3.clone(), t4.clone());
    let mut bot_right: Vec<Vec<i64>> = matrix_subtraction(matrix_subtraction(matrix_addition(t1.clone(), t5.clone()), t3.clone()), t7.clone());
    let mut new_matrix: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (top_right.len() as i64)) {
        new_matrix = { let mut _v = new_matrix.clone(); _v.push(vec![top_left[i as usize].clone(), top_right[i as usize].clone()].concat()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (bot_right.len() as i64)) {
        new_matrix = { let mut _v = new_matrix.clone(); _v.push(vec![bot_left[i as usize].clone(), bot_right[i as usize].clone()].concat()); _v };
        i = (i + 1);
    }
    return new_matrix
};
    fn strassen(mut matrix1: Vec<Vec<i64>>, mut matrix2: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut dims1: Vec<i64> = matrix_dimensions(matrix1.clone());
    let mut dims2: Vec<i64> = matrix_dimensions(matrix2.clone());
    if (dims1[1 as usize] != dims2[0 as usize]) {
        return vec![]
    }
    let mut maximum: i64 = ({ let tmp = vec![dims1[0 as usize], dims1[1 as usize], dims2[0 as usize], dims2[1 as usize]].clone(); *tmp.iter().max().unwrap_or(&0) } as i64);
    let mut size: i64 = next_power_of_two(maximum);
    let mut new_matrix1: Vec<Vec<i64>> = pad_matrix(matrix1.clone(), size, size);
    let mut new_matrix2: Vec<Vec<i64>> = pad_matrix(matrix2.clone(), size, size);
    let mut result_padded: Vec<Vec<i64>> = actual_strassen(new_matrix1.clone(), new_matrix2.clone());
    let mut final_matrix: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < dims1[0 as usize]) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < dims2[1 as usize]) {
            row = { let mut _v = row.clone(); _v.push(result_padded[i as usize].clone()[j as usize]); _v };
            j = (j + 1);
        }
        final_matrix = { let mut _v = final_matrix.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return final_matrix
};
    fn mochi_main() {
    let mut matrix1: Vec<Vec<i64>> = vec![vec![2, 3, 4, 5], vec![6, 4, 3, 1], vec![2, 3, 6, 7], vec![3, 1, 2, 4], vec![2, 3, 4, 5], vec![6, 4, 3, 1], vec![2, 3, 6, 7], vec![3, 1, 2, 4], vec![2, 3, 4, 5], vec![6, 2, 3, 1]];
    let mut matrix2: Vec<Vec<i64>> = vec![vec![0, 2, 1, 1], vec![16, 2, 3, 3], vec![2, 2, 7, 7], vec![13, 11, 22, 4]];
    let mut res: Vec<Vec<i64>> = strassen(matrix1.clone(), matrix2.clone());
    println!("{:?}", res);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
