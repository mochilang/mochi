// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_points: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_points = vec![vec![2.0, 3.0], vec![12.0, 30.0], vec![40.0, 50.0], vec![5.0, 1.0], vec![12.0, 10.0], vec![3.0, 4.0]];
                let _start: i64 = _now();
        unsafe fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return (0.0 - x)
    }
    return x
};
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn euclidean_distance_sqr(mut p1: Vec<f64>, mut p2: Vec<f64>) -> f64 {
    let mut dx: f64 = (p1[0 as usize] - p2[0 as usize]);
    let mut dy: f64 = (p1[1 as usize] - p2[1 as usize]);
    return ((dx * dx) + (dy * dy))
};
        unsafe fn column_based_sort(mut arr: Vec<Vec<f64>>, mut column: i64) -> Vec<Vec<f64>> {
    let mut points: Vec<Vec<f64>> = arr.clone();
    let mut i: i64 = 0;
    while (i < (points.len() as i64)) {
        let mut j: i64 = 0;
        while (j < ((points.len() as i64) - 1)) {
            if (points[j as usize].clone()[column as usize] > points[(j + 1) as usize].clone()[column as usize]) {
                let mut tmp: Vec<f64> = points[j as usize].clone();
                points[j as usize] = points[(j + 1) as usize].clone();
                points[(j + 1) as usize] = tmp.clone();
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return points
};
        unsafe fn dis_between_closest_pair(mut points: Vec<Vec<f64>>, mut count: i64, mut min_dis: f64) -> f64 {
    let mut i: i64 = 0;
    while (i < (count - 1)) {
        let mut j: i64 = (i + 1);
        while (j < count) {
            let mut current: f64 = euclidean_distance_sqr(points[i as usize].clone(), points[j as usize].clone());
            if (current < min_dis) {
                min_dis = current;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return min_dis
};
        unsafe fn dis_between_closest_in_strip(mut points: Vec<Vec<f64>>, mut count: i64, mut min_dis: f64) -> f64 {
    let mut i_start: i64 = 0;
    if (6 < (count - 1)) {
        i_start = 6;
    } else {
        i_start = (count - 1);
    }
    let mut i: i64 = i_start;
    while (i < count) {
        let mut j_start: i64 = 0;
        if ((i - 6) > 0) {
            j_start = (i - 6);
        }
        let mut j: i64 = j_start;
        while (j < i) {
            let mut current: f64 = euclidean_distance_sqr(points[i as usize].clone(), points[j as usize].clone());
            if (current < min_dis) {
                min_dis = current;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return min_dis
};
        unsafe fn closest_pair_of_points_sqr(px: &mut Vec<Vec<f64>>, mut py: Vec<Vec<f64>>, mut count: i64) -> f64 {
    if (count <= 3) {
        return dis_between_closest_pair(px.clone(), count, 1000000000000000000.0)
    }
    let mut mid: i64 = (count / 2);
    let mut left: f64 = closest_pair_of_points_sqr(px, py[0 as usize..mid as usize].to_vec(), mid);
    let mut right: f64 = closest_pair_of_points_sqr(&mut py, py.clone()[mid as usize..count as usize].to_vec(), (count - mid));
    let mut best: f64 = left;
    if (right < best) {
        best = right;
    }
    let mut strip: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (px.len() as i64)) {
        if (abs((px[i as usize].clone()[0 as usize] - px[mid as usize].clone()[0 as usize])) < best) {
            strip = { let mut _v = strip.clone(); _v.push(px[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    let mut strip_best: f64 = dis_between_closest_in_strip(strip.clone(), (strip.len() as i64), best);
    if (strip_best < best) {
        best = strip_best;
    }
    return best
};
        unsafe fn closest_pair_of_points(mut points: Vec<Vec<f64>>, mut count: i64) -> f64 {
    let mut points_sorted_on_x: Vec<Vec<f64>> = column_based_sort(points.clone(), 0);
    let mut points_sorted_on_y: Vec<Vec<f64>> = column_based_sort(points.clone(), 1);
    let mut dist_sqr: f64 = closest_pair_of_points_sqr(&mut points_sorted_on_x, points_sorted_on_y.clone(), count);
    return sqrtApprox(dist_sqr)
};
        println!("{}", format!("{}{}", "Distance: ", closest_pair_of_points(g_points.clone().clone(), (g_points.clone().len() as i64)).to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
