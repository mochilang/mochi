// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct InvResult {
    arr: Vec<i64>,
    inv: i64,
}
impl std::fmt::Display for InvResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"arr\": {:?}", self.arr)?;
        write!(f, ", ")?;
        write!(f, "\"inv\": {}", self.inv)?;
        write!(f, "}}")
    }
}

static mut g_arr_1: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_arr_1 = vec![10, 2, 1, 5, 5, 2, 11];
                let _start: i64 = _now();
        unsafe fn slice_list(mut arr: Vec<i64>, mut start: i64, mut end: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut k: i64 = start;
    while (k < end) {
        res = { let mut _v = res.clone(); _v.push(arr[k as usize]); _v };
        k = (k + 1);
    }
    return res
};
        unsafe fn count_inversions_bf(mut arr: Vec<i64>) -> i64 {
    let mut n = (arr.len() as i64);
    let mut inv: i64 = 0;
    let mut i: i64 = 0;
    while (i < (n - 1)) {
        let mut j: i64 = (i + 1);
        while (j < n) {
            if (arr[i as usize] > arr[j as usize]) {
                inv = (inv + 1);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return inv
};
        unsafe fn count_cross_inversions(p: &mut Vec<i64>, q: &mut Vec<i64>) -> InvResult {
    let mut r: Vec<i64> = vec![];
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    let mut inv: i64 = 0;
    while ((i < (p.len() as i64)) && (j < (q.len() as i64))) {
        if (p[i as usize] > q[j as usize]) {
            inv = (inv + ((p.len() as i64) - i));
            r = { let mut _v = r.clone(); _v.push(q[j as usize]); _v };
            j = (j + 1);
        } else {
            r = { let mut _v = r.clone(); _v.push(p[i as usize]); _v };
            i = (i + 1);
        }
    }
    if (i < (p.len() as i64)) {
        r = vec![r, slice_list(p.clone(), i, (p.len() as i64))].concat();
    } else {
        r = vec![r, slice_list(q.clone(), j, (q.len() as i64))].concat();
    }
    return InvResult {arr: r, inv: inv}
};
        unsafe fn count_inversions_recursive(mut arr: Vec<i64>) -> InvResult {
    if ((arr.len() as i64) <= 1) {
        return InvResult {arr: arr, inv: 0}
    }
    let mut mid = ((arr.len() as i64) / 2);
    let mut p: Vec<i64> = slice_list(arr.clone(), 0, mid);
    let mut q: Vec<i64> = slice_list(arr.clone(), mid, (arr.len() as i64));
    let mut res_p: InvResult = count_inversions_recursive(p.clone());
    let mut res_q: InvResult = count_inversions_recursive(q.clone());
    let mut res_cross: InvResult = count_cross_inversions(&mut res_p.arr.clone(), &mut res_q.arr.clone());
    let mut total: i64 = ((res_p.inv + res_q.inv) + res_cross.inv);
    return InvResult {arr: res_cross.arr.clone(), inv: total}
};
        let mut nbf: i64 = count_inversions_bf(g_arr_1.clone().clone());
        let mut nrec: i64 = count_inversions_recursive(g_arr_1.clone().clone()).inv;
        println!("{}", format!("{} {}", "number of inversions = ", nbf).trim_end());
        g_arr_1 = vec![1, 2, 2, 5, 5, 10, 11];
        let mut nbf2: i64 = count_inversions_bf(g_arr_1.clone().clone());
        let mut nrec2: i64 = count_inversions_recursive(g_arr_1.clone().clone()).inv;
        println!("{}", format!("{} {}", "number of inversions = ", nbf2).trim_end());
        g_arr_1 = vec![];
        let mut nbf3: i64 = count_inversions_bf(g_arr_1.clone().clone());
        let mut nrec3: i64 = count_inversions_recursive(g_arr_1.clone().clone()).inv;
        println!("{}", format!("{} {}", "number of inversions = ", nbf3).trim_end());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
