// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_abc: String = String::new();
static mut g_low_abc: String = String::new();
static mut g_rotor1: String = String::new();
static mut g_rotor2: String = String::new();
static mut g_rotor3: String = String::new();
static mut g_rotor4: String = String::new();
static mut g_rotor5: String = String::new();
static mut g_rotor6: String = String::new();
static mut g_rotor7: String = String::new();
static mut g_rotor8: String = String::new();
static mut g_rotor9: String = String::new();
static mut g_reflector_pairs: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_abc = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_low_abc = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_rotor1 = String::from("EGZWVONAHDCLFQMSIPJBYUKXTR").clone();
        g_rotor2 = String::from("FOBHMDKEXQNRAULPGSJVTYICZW").clone();
        g_rotor3 = String::from("ZJXESIUQLHAVRMDOYGTNFWPBKC").clone();
        g_rotor4 = String::from("RMDJXFUWGISLHVTCQNKYPBEZOA").clone();
        g_rotor5 = String::from("SGLCPQWZHKXAREONTFBVIYJUDM").clone();
        g_rotor6 = String::from("HVSICLTYKQUBXDWAJZOMFGPREN").clone();
        g_rotor7 = String::from("RZWQHFMVDBKICJLNTUXAGYPSOE").clone();
        g_rotor8 = String::from("LFKIJODBEGAMQPXVUHYSTCZRWN").clone();
        g_rotor9 = String::from("KOAEGVDHXPQZMLFTYWJNBRCIUS").clone();
        g_reflector_pairs = vec![String::from("AN").clone(), String::from("BO").clone(), String::from("CP").clone(), String::from("DQ").clone(), String::from("ER").clone(), String::from("FS").clone(), String::from("GT").clone(), String::from("HU").clone(), String::from("IV").clone(), String::from("JW").clone(), String::from("KX").clone(), String::from("LY").clone(), String::from("MZ").clone()];
                let _start: i64 = _now();
        unsafe fn list_contains(mut xs: Vec<String>, x: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn index_in_string(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn contains_char(mut s: String, mut ch: String) -> bool {
    return (index_in_string(s.clone(), &ch) >= 0)
};
        unsafe fn to_uppercase(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut idx: i64 = index_in_string(g_low_abc.clone(), &ch);
        if (idx >= 0) {
            res = format!("{}{}", res, { let tmp = &g_abc; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() });
        } else {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn plugboard_map(mut pb: Vec<String>, ch: &str) -> String {
    let mut i: i64 = 0;
    while (i < (pb.len() as i64)) {
        let mut pair: String = pb[i as usize].clone().clone();
        let mut a: String = { let tmp = &pair; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
        let mut b: String = { let tmp = &pair; tmp.chars().skip(1 as usize).take((2 - 1) as usize).collect::<String>() }.clone();
        if (ch == a) {
            return b
        }
        if (ch == b) {
            return a
        }
        i = (i + 1);
    }
    return ch.to_string().clone()
};
        unsafe fn reflector_map(ch: &str) -> String {
    let mut i: i64 = 0;
    while (i < (g_reflector_pairs.clone().len() as i64)) {
        let mut pair: String = g_reflector_pairs.clone()[i as usize].clone().clone();
        let mut a: String = { let tmp = &pair; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
        let mut b: String = { let tmp = &pair; tmp.chars().skip(1 as usize).take((2 - 1) as usize).collect::<String>() }.clone();
        if (ch == a) {
            return b
        }
        if (ch == b) {
            return a
        }
        i = (i + 1);
    }
    return ch.to_string().clone()
};
        unsafe fn count_unique(mut xs: Vec<String>) -> i64 {
    let mut unique: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if !list_contains(unique.clone(), &xs[i as usize].clone()) {
            unique = { let mut _v = unique.clone(); _v.push(xs[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    return (unique.len() as i64)
};
        unsafe fn build_plugboard(pbstring: &str) -> Vec<String> {
    if ((pbstring.len() as i64) == 0) {
        return vec![]
    }
    if (((pbstring.len() as i64) % 2) != 0) {
        panic!(format!("{}{}", format!("{}{}", "Odd number of symbols(", (pbstring.len() as i64).to_string()), ")"));
    }
    let mut pbstring_nospace: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (pbstring.len() as i64)) {
        let mut ch: String = { let tmp = &pbstring; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() != " ") {
            pbstring_nospace = format!("{}{}", pbstring_nospace, ch);
        }
        i = (i + 1);
    }
    let mut seen: Vec<String> = vec![];
    i = 0;
    while (i < (pbstring_nospace.len() as i64)) {
        let mut ch: String = { let tmp = &pbstring_nospace; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if !contains_char(g_abc.clone(), ch.clone()) {
            panic!(format!("{}{}", format!("{}{}", "'", ch), "' not in list of symbols"));
        }
        if list_contains(seen.clone(), &ch) {
            panic!(format!("{}{}", format!("{}{}", "Duplicate symbol(", ch), ")"));
        }
        seen = { let mut _v = seen.clone(); _v.push(ch.clone()); _v };
        i = (i + 1);
    }
    let mut pb: Vec<String> = vec![];
    i = 0;
    while (i < ((pbstring_nospace.len() as i64) - 1)) {
        let mut a: String = { let tmp = &pbstring_nospace; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut b: String = { let tmp = &pbstring_nospace; tmp.chars().skip((i + 1) as usize).take(((i + 2) - (i + 1)) as usize).collect::<String>() }.clone();
        pb = { let mut _v = pb.clone(); _v.push(format!("{}{}", a, b)); _v };
        i = (i + 2);
    }
    return pb
};
        unsafe fn validator(mut rotpos: Vec<i64>, rotsel: &mut Vec<String>, pb: &str) {
    if (count_unique(rotsel.clone()) < 3) {
        panic!(format!("{}{}", format!("{}{}", "Please use 3 unique rotors (not ", count_unique(rotsel.clone()).to_string()), ")"));
    }
    if ((rotpos.len() as i64) != 3) {
        panic!("Rotor position must have 3 values");
    }
    let mut r1: i64 = rotpos[0 as usize];
    let mut r2: i64 = rotpos[1 as usize];
    let mut r3: i64 = rotpos[2 as usize];
    if !((0 < r1) && (r1 <= (g_abc.len() as i64))) {
        panic!(format!("{}{}", format!("{}{}", "First rotor position is not within range of 1..26 (", r1.to_string()), ")"));
    }
    if !((0 < r2) && (r2 <= (g_abc.len() as i64))) {
        panic!(format!("{}{}", format!("{}{}", "Second rotor position is not within range of 1..26 (", r2.to_string()), ")"));
    }
    if !((0 < r3) && (r3 <= (g_abc.len() as i64))) {
        panic!(format!("{}{}", format!("{}{}", "Third rotor position is not within range of 1..26 (", r3.to_string()), ")"));
    }
};
        unsafe fn enigma(text: &str, rotor_position: &mut Vec<i64>, rotor_selection: &mut Vec<String>, plugb: &str) -> String {
    let mut up_text: String = to_uppercase(text).clone();
    let mut up_pb: String = to_uppercase(plugb).clone();
    validator(rotor_position.clone(), rotor_selection, &up_pb);
    let mut plugboard: Vec<String> = build_plugboard(&up_pb);
    let mut rotorpos1: i64 = (rotor_position[0 as usize] - 1);
    let mut rotorpos2: i64 = (rotor_position[1 as usize] - 1);
    let mut rotorpos3: i64 = (rotor_position[2 as usize] - 1);
    let mut rotor_a: String = rotor_selection[0 as usize].clone().clone();
    let mut rotor_b: String = rotor_selection[1 as usize].clone().clone();
    let mut rotor_c: String = rotor_selection[2 as usize].clone().clone();
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (up_text.len() as i64)) {
        let mut symbol: String = { let tmp = &up_text; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if contains_char(g_abc.clone(), symbol.clone()) {
            symbol = plugboard_map(plugboard.clone(), &symbol);
            let mut index: i64 = (index_in_string(g_abc.clone(), &symbol) + rotorpos1);
            symbol = { let tmp = &rotor_a; tmp.chars().skip((index % (g_abc.len() as i64)) as usize).take((((index % (g_abc.len() as i64)) + 1) - (index % (g_abc.len() as i64))) as usize).collect::<String>() };
            index = (index_in_string(g_abc.clone(), &symbol) + rotorpos2);
            symbol = { let tmp = &rotor_b; tmp.chars().skip((index % (g_abc.len() as i64)) as usize).take((((index % (g_abc.len() as i64)) + 1) - (index % (g_abc.len() as i64))) as usize).collect::<String>() };
            index = (index_in_string(g_abc.clone(), &symbol) + rotorpos3);
            symbol = { let tmp = &rotor_c; tmp.chars().skip((index % (g_abc.len() as i64)) as usize).take((((index % (g_abc.len() as i64)) + 1) - (index % (g_abc.len() as i64))) as usize).collect::<String>() };
            symbol = reflector_map(&symbol);
            index = (index_in_string(rotor_c.clone(), &symbol) - rotorpos3);
            if (index < 0) {
                index = (index + (g_abc.len() as i64));
            }
            symbol = { let tmp = &g_abc; tmp.chars().skip(index as usize).take(((index + 1) - index) as usize).collect::<String>() };
            index = (index_in_string(rotor_b.clone(), &symbol) - rotorpos2);
            if (index < 0) {
                index = (index + (g_abc.len() as i64));
            }
            symbol = { let tmp = &g_abc; tmp.chars().skip(index as usize).take(((index + 1) - index) as usize).collect::<String>() };
            index = (index_in_string(rotor_a.clone(), &symbol) - rotorpos1);
            if (index < 0) {
                index = (index + (g_abc.len() as i64));
            }
            symbol = { let tmp = &g_abc; tmp.chars().skip(index as usize).take(((index + 1) - index) as usize).collect::<String>() };
            symbol = plugboard_map(plugboard.clone(), &symbol);
            rotorpos1 = (rotorpos1 + 1);
            if (rotorpos1 >= (g_abc.len() as i64)) {
                rotorpos1 = 0;
                rotorpos2 = (rotorpos2 + 1);
            }
            if (rotorpos2 >= (g_abc.len() as i64)) {
                rotorpos2 = 0;
                rotorpos3 = (rotorpos3 + 1);
            }
            if (rotorpos3 >= (g_abc.len() as i64)) {
                rotorpos3 = 0;
            }
        }
        result = format!("{}{}", result, symbol);
        i = (i + 1);
    }
    return result.clone()
};
        unsafe fn mochi_main() {
    let mut message: String = String::from("This is my Python script that emulates the Enigma machine from WWII.").clone();
    let mut rotor_pos: Vec<i64> = vec![1, 1, 1];
    let mut pb: String = String::from("pictures").clone();
    let mut rotor_sel: Vec<String> = vec![g_rotor2.clone().clone(), g_rotor4.clone().clone(), g_rotor8.clone().clone()];
    let mut en: String = enigma(&message, &mut rotor_pos, &mut rotor_sel, &pb).clone();
    println!("{}", format!("{}{}", "Encrypted message: ", en));
    println!("{}", format!("{}{}", "Decrypted message: ", enigma(&en, &mut rotor_pos, &mut rotor_sel, &pb)));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
