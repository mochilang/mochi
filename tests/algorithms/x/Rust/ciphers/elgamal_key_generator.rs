// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct GCD {
    g: i64,
    x: i64,
    y: i64,
}
impl std::fmt::Display for GCD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"g\": {}", self.g)?;
        write!(f, ", ")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct PublicKey {
    key_size: i64,
    g: i64,
    e2: i64,
    p: i64,
}
impl std::fmt::Display for PublicKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"key_size\": {}", self.key_size)?;
        write!(f, ", ")?;
        write!(f, "\"g\": {}", self.g)?;
        write!(f, ", ")?;
        write!(f, "\"e2\": {}", self.e2)?;
        write!(f, ", ")?;
        write!(f, "\"p\": {}", self.p)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct PrivateKey {
    key_size: i64,
    d: i64,
}
impl std::fmt::Display for PrivateKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"key_size\": {}", self.key_size)?;
        write!(f, ", ")?;
        write!(f, "\"d\": {}", self.d)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct KeyPair {
    public_key: PublicKey,
    private_key: PrivateKey,
}
impl std::fmt::Display for KeyPair {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"public_key\": {}", self.public_key)?;
        write!(f, ", ")?;
        write!(f, "\"private_key\": {}", self.private_key)?;
        write!(f, "}}")
    }
}

static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 123456789;
                let _start: i64 = _now();
        unsafe fn rand() -> i64 {
    g_seed = (((g_seed * 1103515245) + 12345) % 2147483647);
    return g_seed
};
        unsafe fn rand_range(mut min: i64, mut max: i64) -> i64 {
    return (min + (rand() % ((max - min) + 1)))
};
        unsafe fn mod_pow(mut base: i64, mut exponent: i64, mut modulus: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % modulus);
    let mut e: i64 = exponent;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % modulus);
        }
        e = (e / 2);
        b = ((b * b) % modulus);
    }
    return result
};
        unsafe fn extended_gcd(mut a: i64, mut b: i64) -> GCD {
    if (b == 0) {
        return GCD {g: a, x: 1, y: 0}
    }
    let mut res: GCD = extended_gcd(b, (a % b));
    return GCD {g: res.g, x: res.y, y: (res.x - ((a / b) * res.y))}
};
        unsafe fn mod_inverse(mut a: i64, mut m: i64) -> i64 {
    let mut res: GCD = extended_gcd(a, m);
    if (res.g != 1) {
        panic!("inverse does not exist");
    }
    let mut r: i64 = (res.x % m);
    if (r < 0) {
        return (r + m)
    }
    return r
};
        unsafe fn pow2(mut n: i64) -> i64 {
    let mut r: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        r = (r * 2);
        i = (i + 1);
    }
    return r
};
        unsafe fn is_probable_prime(mut n: i64, mut k: i64) -> bool {
    if (n <= 1) {
        return false
    }
    if (n <= 3) {
        return true
    }
    if ((n % 2) == 0) {
        return false
    }
    let mut r: i64 = 0;
    let mut d: i64 = (n - 1);
    while ((d % 2) == 0) {
        d = (d / 2);
        r = (r + 1);
    }
    let mut i: i64 = 0;
    while (i < k) {
        let mut a: i64 = rand_range(2, (n - 2));
        let mut x: i64 = mod_pow(a, d, n);
        if ((x == 1) || (x == (n - 1))) {
            i = (i + 1);
            continue
        }
        let mut j: i64 = 1;
        let mut found: bool = false;
        while (j < r) {
            x = mod_pow(x, 2, n);
            if (x == (n - 1)) {
                found = true;
                break
            }
            j = (j + 1);
        }
        if !found {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn generate_large_prime(mut bits: i64) -> i64 {
    let mut min: i64 = pow2((bits - 1));
    let mut max: i64 = (pow2(bits) - 1);
    let mut p: i64 = rand_range(min, max);
    if ((p % 2) == 0) {
        p = (p + 1);
    }
    while !is_probable_prime(p, 5) {
        p = (p + 2);
        if (p > max) {
            p = (min + 1);
        }
    }
    return p
};
        unsafe fn primitive_root(mut p: i64) -> i64 {
    loop {
        let mut g: i64 = rand_range(3, (p - 1));
        if (mod_pow(g, 2, p) == 1) {
            continue
        }
        if (mod_pow(g, p, p) == 1) {
            continue
        }
        return g
    }
};
        unsafe fn generate_key(mut key_size: i64) -> KeyPair {
    let mut p: i64 = generate_large_prime(key_size);
    let mut e1: i64 = primitive_root(p);
    let mut d: i64 = rand_range(3, (p - 1));
    let mut e2: i64 = mod_inverse(mod_pow(e1, d, p), p);
    let mut public_key: PublicKey = PublicKey {key_size: key_size, g: e1, e2: e2, p: p};
    let mut private_key: PrivateKey = PrivateKey {key_size: key_size, d: d};
    return KeyPair {public_key: public_key, private_key: private_key}
};
        unsafe fn mochi_main() {
    let mut key_size: i64 = 16;
    let mut kp: KeyPair = generate_key(key_size);
    let mut r#pub: PublicKey = kp.public_key;
    let mut r#priv: PrivateKey = kp.private_key;
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "public key: (", r#pub.key_size.to_string()), ", "), r#pub.g.to_string()), ", "), r#pub.e2.to_string()), ", "), r#pub.p.to_string()), ")"));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "private key: (", r#priv.key_size.to_string()), ", "), r#priv.d.to_string()), ")"));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
