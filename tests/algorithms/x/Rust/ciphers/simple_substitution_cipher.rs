// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LETTERS: String = String::new();
static mut g_LOWERCASE: String = String::new();
static mut g_seed: i64 = 0;
static mut g_key: String = String::new();
fn main() {
    unsafe {
        g_LETTERS = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_LOWERCASE = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_seed = 1;
        g_key = String::from("LFWOAYUISVKMNXPBDCRJTQEGHZ").clone();
                let _start: i64 = _now();
        unsafe fn rand(mut n: i64) -> i64 {
    g_seed = (((g_seed * 1664525) + 1013904223) % 2147483647);
    return (g_seed % n)
};
        unsafe fn get_random_key() -> String {
    let mut chars: Vec<String> = Default::default();
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        chars = { let mut _v = chars.clone(); _v.push(g_LETTERS.chars().nth(i as usize).unwrap().to_string()); _v };
        i = (i + 1);
    }
    let mut j = ((chars.len() as i64) - 1);
    while (j > 0) {
        let mut k: i64 = rand((j + 1));
        let mut tmp: String = chars[j as usize].clone().clone();
        chars[j as usize] = chars[k as usize].clone();
        chars[k as usize] = tmp.clone();
        j = (j - 1);
    }
    let mut res: String = String::from("").clone();
    i = 0;
    while (i < (chars.len() as i64)) {
        res = format!("{}{}", res, chars[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn check_valid_key(key: &str) -> bool {
    if ((key.len() as i64) != (g_LETTERS.len() as i64)) {
        return false
    }
    let mut used: HashMap<String, bool> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (key.len() as i64)) {
        let mut ch: String = key.chars().nth(i as usize).unwrap().to_string().clone();
        if used.get(ch.as_str()).cloned().unwrap_or_default() {
            return false
        }
        used.insert(ch.clone(), true);
        i = (i + 1);
    }
    i = 0;
    while (i < (g_LETTERS.len() as i64)) {
        let mut ch: String = g_LETTERS.chars().nth(i as usize).unwrap().to_string().clone();
        if !used.get(ch.as_str()).cloned().unwrap_or_default() {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn index_in(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn char_to_upper(c: &str) -> String {
    let mut i: i64 = 0;
    while (i < (g_LOWERCASE.len() as i64)) {
        if (c == g_LOWERCASE.chars().nth(i as usize).unwrap().to_string()) {
            return g_LETTERS.chars().nth(i as usize).unwrap().to_string()
        }
        i = (i + 1);
    }
    return c.to_string().clone()
};
        unsafe fn char_to_lower(c: &str) -> String {
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        if (c == g_LETTERS.chars().nth(i as usize).unwrap().to_string()) {
            return g_LOWERCASE.chars().nth(i as usize).unwrap().to_string()
        }
        i = (i + 1);
    }
    return c.to_string().clone()
};
        unsafe fn is_upper(c: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        if (c == g_LETTERS.chars().nth(i as usize).unwrap().to_string()) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn translate_message(key: &str, message: &str, mode: &str) -> String {
    let mut chars_a: String = g_LETTERS.clone();
    let mut chars_b: String = key.to_string().clone();
    if (mode == "decrypt") {
        let mut tmp: String = chars_a.clone();
        chars_a = chars_b.clone();
        chars_b = tmp.clone();
    }
    let mut translated: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut symbol: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        let mut upper_symbol: String = char_to_upper(&symbol).clone();
        let mut idx: i64 = index_in(&chars_a, &upper_symbol);
        if (idx >= 0) {
            let mut mapped: String = chars_b.chars().nth(idx as usize).unwrap().to_string().clone();
            if is_upper(&symbol) {
                translated = format!("{}{}", translated, mapped);
            } else {
                translated = format!("{}{}", translated, char_to_lower(&mapped));
            }
        } else {
            translated = format!("{}{}", translated, symbol);
        }
        i = (i + 1);
    }
    return translated.clone()
};
        unsafe fn encrypt_message(key: &str, message: &str) -> String {
    let mut res: String = translate_message(key, message, &"encrypt").clone();
    return res.clone()
};
        unsafe fn decrypt_message(key: &str, message: &str) -> String {
    let mut res: String = translate_message(key, message, &"decrypt").clone();
    return res.clone()
};
        println!("{}", encrypt_message(&g_key, &"Harshil Darji"));
        println!("{}", decrypt_message(&g_key, &"Ilcrism Olcvs"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
