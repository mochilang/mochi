// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_SYMBOLS: String = String::new();
fn main() {
    unsafe {
        g_SYMBOLS = String::from(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~").clone();
                let _start: i64 = _now();
        unsafe fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    while (y != 0) {
        let mut temp: i64 = (x % y);
        x = y;
        y = temp;
    }
    return x
};
        unsafe fn mod_inverse(mut a: i64, mut m: i64) -> i64 {
    if (gcd(a, m) != 1) {
        panic!(format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "mod inverse of ", a.to_string()), " and "), m.to_string()), " does not exist"));
    }
    let mut u1: i64 = 1;
    let mut u2: i64 = 0;
    let mut u3: i64 = a;
    let mut v1: i64 = 0;
    let mut v2: i64 = 1;
    let mut v3: i64 = m;
    while (v3 != 0) {
        let mut q: i64 = (u3 / v3);
        let mut t1: i64 = (u1 - (q * v1));
        let mut t2: i64 = (u2 - (q * v2));
        let mut t3: i64 = (u3 - (q * v3));
        u1 = v1;
        u2 = v2;
        u3 = v3;
        v1 = t1;
        v2 = t2;
        v3 = t3;
    }
    let mut res: i64 = (u1 % m);
    if (res < 0) {
        return (res + m)
    }
    return res
};
        unsafe fn find_symbol(ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_SYMBOLS.len() as i64)) {
        if (g_SYMBOLS.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn check_keys(mut key_a: i64, mut key_b: i64, mode: &str) {
    let mut m = (g_SYMBOLS.len() as i64);
    if (mode == "encrypt") {
        if (key_a == 1) {
            panic!("The affine cipher becomes weak when key A is set to 1. Choose different key");
        }
        if (key_b == 0) {
            panic!("The affine cipher becomes weak when key B is set to 0. Choose different key");
        }
    }
    if (((key_a < 0) || (key_b < 0)) || (key_b > (m - 1))) {
        panic!(format!("{}{}", "Key A must be greater than 0 and key B must be between 0 and ", (m - 1).to_string()));
    }
    if (gcd(key_a, m) != 1) {
        panic!(format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Key A ", key_a.to_string()), " and the symbol set size "), m.to_string()), " are not relatively prime. Choose a different key."));
    }
};
        unsafe fn encrypt_message(mut key: i64, message: &str) -> String {
    let mut m = (g_SYMBOLS.len() as i64);
    let mut key_a: i64 = (key / m);
    let mut key_b: i64 = (key % m);
    check_keys(key_a, key_b, &"encrypt");
    let mut cipher_text: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut ch: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        let mut index: i64 = find_symbol(&ch);
        if (index >= 0) {
            cipher_text = format!("{}{}", cipher_text, g_SYMBOLS.chars().nth((((index * key_a) + key_b) % m) as usize).unwrap().to_string());
        } else {
            cipher_text = format!("{}{}", cipher_text, ch);
        }
        i = (i + 1);
    }
    return cipher_text.clone()
};
        unsafe fn decrypt_message(mut key: i64, message: &str) -> String {
    let mut m = (g_SYMBOLS.len() as i64);
    let mut key_a: i64 = (key / m);
    let mut key_b: i64 = (key % m);
    check_keys(key_a, key_b, &"decrypt");
    let mut inv: i64 = mod_inverse(key_a, m);
    let mut plain_text: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut ch: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        let mut index: i64 = find_symbol(&ch);
        if (index >= 0) {
            let mut n: i64 = ((index - key_b) * inv);
            let mut pos: i64 = (n % m);
            let mut r#final: i64 = if (pos < 0) { (pos + m) } else { pos };
            plain_text = format!("{}{}", plain_text, g_SYMBOLS.chars().nth(r#final as usize).unwrap().to_string());
        } else {
            plain_text = format!("{}{}", plain_text, ch);
        }
        i = (i + 1);
    }
    return plain_text.clone()
};
        unsafe fn mochi_main() {
    let mut key: i64 = 4545;
    let mut msg: String = String::from("The affine cipher is a type of monoalphabetic substitution cipher.").clone();
    let mut enc: String = encrypt_message(key, &msg).clone();
    println!("{}", enc);
    println!("{}", decrypt_message(key, &enc));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
