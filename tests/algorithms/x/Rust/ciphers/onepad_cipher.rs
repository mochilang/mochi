// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 0;
static mut g_ascii_chars: String = String::new();
fn main() {
    unsafe {
        g_seed = 1;
        g_ascii_chars = String::from(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~").clone();
                let _start: i64 = _now();
        unsafe fn set_seed(mut s: i64) {
    g_seed = s;
};
        unsafe fn randint(mut a: i64, mut b: i64) -> i64 {
    g_seed = (((g_seed * 1103515245) + 12345) % 2147483648);
    return ((g_seed % ((b - a) + 1)) + a)
};
        unsafe fn ord(ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_ascii_chars.len() as i64)) {
        if (g_ascii_chars.chars().nth(i as usize).unwrap().to_string() == ch) {
            return (32 + i)
        }
        i = (i + 1);
    }
    return 0
};
        unsafe fn chr(mut code: i64) -> String {
    if ((code < 32) || (code > 126)) {
        return String::from("")
    }
    return g_ascii_chars.chars().nth((code - 32) as usize).unwrap().to_string().clone()
};
        unsafe fn encrypt(text: &str) -> HashMap<String, Vec<i64>> {
    let mut cipher: Vec<i64> = vec![];
    let mut key: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (text.len() as i64)) {
        let mut p: i64 = ord(&text.chars().nth(i as usize).unwrap().to_string());
        let mut k: i64 = randint(1, 300);
        let mut c: i64 = ((p + k) * k);
        cipher = { let mut _v = cipher.clone(); _v.push(c); _v };
        key = { let mut _v = key.clone(); _v.push(k); _v };
        i = (i + 1);
    }
    let mut res: HashMap<String, Vec<i64>> = HashMap::new();
    res.insert(String::from("cipher"), cipher);
    res.insert(String::from("key"), key);
    return res
};
        unsafe fn decrypt(mut cipher: Vec<i64>, mut key: Vec<i64>) -> String {
    let mut plain: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (key.len() as i64)) {
        let mut p: i64 = ((cipher[i as usize] - (key[i as usize] * key[i as usize])) / key[i as usize]);
        plain = format!("{}{}", plain, chr(p));
        i = (i + 1);
    }
    return plain.clone()
};
        set_seed(1);
        let mut res: HashMap<String, Vec<i64>> = encrypt(&"Hello");
        let mut cipher: Vec<i64> = res.get("cipher").cloned().unwrap_or_default();
        let mut key: Vec<i64> = res.get("key").cloned().unwrap_or_default();
        println!("{:?}", cipher);
        println!("{:?}", key);
        println!("{}", decrypt(cipher.clone(), key.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
