// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = if (a < 0) { -a } else { a };
    let mut y: i64 = if (b < 0) { -b } else { b };
    while (y != 0) {
        let mut t: i64 = (x % y);
        x = y;
        y = t;
    }
    return x
};
    fn find_mod_inverse(mut a: i64, mut m: i64) -> i64 {
    if (gcd(a, m) != 1) {
        panic!(format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "mod inverse of ", a.to_string()), " and "), m.to_string()), " does not exist"));
    }
    let mut u1: i64 = 1;
    let mut u2: i64 = 0;
    let mut u3: i64 = a;
    let mut v1: i64 = 0;
    let mut v2: i64 = 1;
    let mut v3: i64 = m;
    while (v3 != 0) {
        let mut q: i64 = (u3 / v3);
        let mut t1: i64 = (u1 - (q * v1));
        let mut t2: i64 = (u2 - (q * v2));
        let mut t3: i64 = (u3 - (q * v3));
        u1 = v1;
        u2 = v2;
        u3 = v3;
        v1 = t1;
        v2 = t2;
        v3 = t3;
    }
    let mut res: i64 = (u1 % m);
    if (res < 0) {
        res = (res + m);
    }
    return res
};
    println!("{}", find_mod_inverse(3, 11).to_string());
    println!("{}", find_mod_inverse(7, 26).to_string());
    println!("{}", find_mod_inverse(11, 26).to_string());
    println!("{}", find_mod_inverse(17, 43).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
