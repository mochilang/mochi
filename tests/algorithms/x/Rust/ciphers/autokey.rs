// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LOWER: String = String::new();
static mut g_UPPER: String = String::new();
fn main() {
    unsafe {
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
                let _start: i64 = _now();
        unsafe fn to_lowercase(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        let mut j: i64 = 0;
        let mut found: bool = false;
        while (j < 26) {
            if (c.as_str() == g_UPPER.chars().nth(j as usize).unwrap().to_string().as_str()) {
                res = format!("{}{}", res, g_LOWER.chars().nth(j as usize).unwrap().to_string());
                found = true;
                break
            }
            j = (j + 1);
        }
        if !found {
            res = format!("{}{}", res, c);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn char_index(c: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < 26) {
        if (c == g_LOWER.chars().nth(i as usize).unwrap().to_string()) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn index_char(mut i: i64) -> String {
    return g_LOWER.chars().nth(i as usize).unwrap().to_string().clone()
};
        unsafe fn encrypt(mut plaintext: String, key: &str) -> String {
    if ((plaintext.len() as i64) == 0) {
        panic!("plaintext is empty");
    }
    if ((key.len() as i64) == 0) {
        panic!("key is empty");
    }
    let mut full_key: String = format!("{}{}", key, plaintext).to_string().clone();
    plaintext = to_lowercase(&plaintext);
    full_key = to_lowercase(&full_key);
    let mut p_i: i64 = 0;
    let mut k_i: i64 = 0;
    let mut ciphertext: String = String::from("").clone();
    while (p_i < (plaintext.len() as i64)) {
        let mut p_char: String = plaintext.chars().nth(p_i as usize).unwrap().to_string().clone();
        let mut p_idx: i64 = char_index(&p_char);
        if (p_idx < 0) {
            ciphertext = format!("{}{}", ciphertext, p_char);
            p_i = (p_i + 1);
        } else {
            let mut k_char: String = full_key.chars().nth(k_i as usize).unwrap().to_string().clone();
            let mut k_idx: i64 = char_index(&k_char);
            if (k_idx < 0) {
                k_i = (k_i + 1);
            } else {
                let mut c_idx: i64 = ((p_idx + k_idx) % 26);
                ciphertext = format!("{}{}", ciphertext, index_char(c_idx));
                k_i = (k_i + 1);
                p_i = (p_i + 1);
            }
        }
    }
    return ciphertext.clone()
};
        unsafe fn decrypt(ciphertext: &str, key: &str) -> String {
    if ((ciphertext.len() as i64) == 0) {
        panic!("ciphertext is empty");
    }
    if ((key.len() as i64) == 0) {
        panic!("key is empty");
    }
    let mut current_key: String = to_lowercase(key).clone();
    let mut c_i: i64 = 0;
    let mut k_i: i64 = 0;
    let mut plaintext: String = String::from("").clone();
    while (c_i < (ciphertext.len() as i64)) {
        let mut c_char: String = ciphertext.chars().nth(c_i as usize).unwrap().to_string().clone();
        let mut c_idx: i64 = char_index(&c_char);
        if (c_idx < 0) {
            plaintext = format!("{}{}", plaintext, c_char);
        } else {
            let mut k_char: String = current_key.chars().nth(k_i as usize).unwrap().to_string().clone();
            let mut k_idx: i64 = char_index(&k_char);
            let mut p_idx: i64 = (((c_idx - k_idx) + 26) % 26);
            let mut p_char: String = index_char(p_idx).clone();
            plaintext = format!("{}{}", plaintext, p_char);
            current_key = format!("{}{}", current_key, p_char);
            k_i = (k_i + 1);
        }
        c_i = (c_i + 1);
    }
    return plaintext.clone()
};
        println!("{}", encrypt(String::from("hello world"), &"coffee"));
        println!("{}", decrypt(&"jsqqs avvwo", &"coffee"));
        println!("{}", encrypt(String::from("coffee is good as python"), &"TheAlgorithms"));
        println!("{}", decrypt(&"vvjfpk wj ohvp su ddylsv", &"TheAlgorithms"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
