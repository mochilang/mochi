// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_B32_CHARSET: String = String::new();
fn main() {
    unsafe {
        g_B32_CHARSET = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567").clone();
                let _start: i64 = _now();
        unsafe fn indexOfChar(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut digits: String = String::from("0123456789").clone();
    let mut idx: i64 = indexOfChar(&upper, &ch);
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = indexOfChar(&lower, &ch);
    if (idx >= 0) {
        return (97 + idx)
    }
    idx = indexOfChar(&digits, &ch);
    if (idx >= 0) {
        return (48 + idx)
    }
    if (ch.as_str() == " ") {
        return 32
    }
    if (ch.as_str() == "!") {
        return 33
    }
    return 0
};
        unsafe fn chr(mut code: i64) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut digits: String = String::from("0123456789").clone();
    if (code == 32) {
        return String::from(" ")
    }
    if (code == 33) {
        return String::from("!")
    }
    let mut idx: i64 = (code - 65);
    if ((idx >= 0) && (idx < (upper.len() as i64))) {
        return upper.chars().nth(idx as usize).unwrap().to_string()
    }
    idx = (code - 97);
    if ((idx >= 0) && (idx < (lower.len() as i64))) {
        return lower.chars().nth(idx as usize).unwrap().to_string()
    }
    idx = (code - 48);
    if ((idx >= 0) && (idx < (digits.len() as i64))) {
        return digits.chars().nth(idx as usize).unwrap().to_string()
    }
    return String::from("").clone()
};
        unsafe fn repeat(s: &str, mut n: i64) -> String {
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < n) {
        out = format!("{}{}", out, s);
        i = (i + 1);
    }
    return out.clone()
};
        unsafe fn to_binary(mut n: i64, mut bits: i64) -> String {
    let mut v: i64 = n;
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < bits) {
        out = format!("{}{}", (v % 2).to_string(), out).to_string();
        v = (v / 2);
        i = (i + 1);
    }
    return out.clone()
};
        unsafe fn binary_to_int(bits: &str) -> i64 {
    let mut n: i64 = 0;
    let mut i: i64 = 0;
    while (i < (bits.len() as i64)) {
        n = (n * 2);
        if (bits.chars().nth(i as usize).unwrap().to_string().as_str() == "1") {
            n = (n + 1);
        }
        i = (i + 1);
    }
    return n
};
        unsafe fn base32_encode(data: &str) -> String {
    let mut binary_data: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (data.len() as i64)) {
        binary_data = format!("{}{}", binary_data, to_binary(ord(data.chars().nth(i as usize).unwrap().to_string()), 8));
        i = (i + 1);
    }
    let mut remainder = ((binary_data.len() as i64) % 5);
    if (remainder != 0) {
        binary_data = format!("{}{}", binary_data, repeat(&"0", (5 - remainder)));
    }
    let mut b32_result: String = String::from("").clone();
    let mut j: i64 = 0;
    while (j < (binary_data.len() as i64)) {
        let mut chunk: String = binary_data.chars().skip(j as usize).take(((j + 5) - j) as usize).collect::<String>().clone();
        let mut index: i64 = binary_to_int(&chunk);
        b32_result = format!("{}{}", b32_result, g_B32_CHARSET.chars().nth(index as usize).unwrap().to_string());
        j = (j + 5);
    }
    let mut rem = ((b32_result.len() as i64) % 8);
    if (rem != 0) {
        b32_result = format!("{}{}", b32_result, repeat(&"=", (8 - rem)));
    }
    return b32_result.clone()
};
        unsafe fn base32_decode(data: &str) -> String {
    let mut clean: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (data.len() as i64)) {
        let mut ch: String = data.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() != "=") {
            clean = format!("{}{}", clean, ch);
        }
        i = (i + 1);
    }
    let mut binary_chunks: String = String::from("").clone();
    i = 0;
    while (i < (clean.len() as i64)) {
        let mut idx: i64 = indexOfChar(&g_B32_CHARSET, &clean.chars().nth(i as usize).unwrap().to_string());
        binary_chunks = format!("{}{}", binary_chunks, to_binary(idx, 5));
        i = (i + 1);
    }
    let mut result: String = String::from("").clone();
    let mut j: i64 = 0;
    while ((j + 8) <= (binary_chunks.len() as i64)) {
        let mut byte_bits: String = binary_chunks.chars().skip(j as usize).take(((j + 8) - j) as usize).collect::<String>().clone();
        let mut code: i64 = binary_to_int(&byte_bits);
        result = format!("{}{}", result, chr(code));
        j = (j + 8);
    }
    return result.clone()
};
        println!("{}", base32_encode(&"Hello World!"));
        println!("{}", base32_encode(&"123456"));
        println!("{}", base32_encode(&"some long complex string"));
        println!("{}", base32_decode(&"JBSWY3DPEBLW64TMMQQQ===="));
        println!("{}", base32_decode(&"GEZDGNBVGY======"));
        println!("{}", base32_decode(&"ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
