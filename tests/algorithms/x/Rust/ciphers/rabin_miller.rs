// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn int_pow(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn pow_mod(mut base: i64, mut exp: i64, mut r#mod: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % r#mod);
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % r#mod);
        }
        e = (e / 2);
        b = ((b * b) % r#mod);
    }
    return result
};
    fn rand_range(mut low: i64, mut high: i64) -> i64 {
    return ((_now() % (high - low)) + low)
};
    fn rabin_miller(mut num: i64) -> bool {
    let mut s: i64 = (num - 1);
    let mut t: i64 = 0;
    while ((s % 2) == 0) {
        s = (s / 2);
        t = (t + 1);
    }
    let mut k: i64 = 0;
    while (k < 5) {
        let mut a: i64 = rand_range(2, (num - 1));
        let mut v: i64 = pow_mod(a, s, num);
        if (v != 1) {
            let mut i: i64 = 0;
            while (v != (num - 1)) {
                if (i == (t - 1)) {
                    return false
                }
                i = (i + 1);
                v = ((v * v) % num);
            }
        }
        k = (k + 1);
    }
    return true
};
    fn is_prime_low_num(mut num: i64) -> bool {
    if (num < 2) {
        return false
    }
    let mut low_primes: Vec<i64> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
    if low_primes.contains(&num) {
        return true
    }
    let mut i: i64 = 0;
    while (i < (low_primes.len() as i64)) {
        let mut p: i64 = low_primes[i as usize];
        if ((num % p) == 0) {
            return false
        }
        i = (i + 1);
    }
    return rabin_miller(num)
};
    fn generate_large_prime(mut keysize: i64) -> i64 {
    let mut start: i64 = int_pow(2, (keysize - 1));
    let mut end: i64 = int_pow(2, keysize);
    loop {
        let mut num: i64 = rand_range(start, end);
        if is_prime_low_num(num) {
            return num
        }
    }
};
    let mut p: i64 = generate_large_prime(16);
    println!("{}", format!("{}{}", "Prime number: ", p.to_string()));
    println!("{}", format!("{}{}", "is_prime_low_num: ", is_prime_low_num(p).to_string()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
