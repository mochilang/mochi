// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_B64_CHARSET: String = String::new();
fn main() {
    unsafe {
        g_B64_CHARSET = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").clone();
                let _start: i64 = _now();
        unsafe fn to_binary(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut num: i64 = n;
    let mut res: String = String::from("").clone();
    while (num > 0) {
        let mut bit: i64 = (num % 2);
        res = format!("{}{}", bit.to_string(), res).to_string();
        num = (num / 2);
    }
    return res.clone()
};
        unsafe fn zfill(s: &str, mut width: i64) -> String {
    let mut res: String = s.to_string().clone();
    let mut pad: i64 = (width - (s.len() as i64));
    while (pad > 0) {
        res = format!("{}{}", "0", res);
        pad = (pad - 1);
    }
    return res.clone()
};
        unsafe fn from_binary(mut s: String) -> i64 {
    let mut i: i64 = 0;
    let mut result: i64 = 0;
    while (i < (s.len() as i64)) {
        result = (result * 2);
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == "1") {
            result = (result + 1);
        }
        i = (i + 1);
    }
    return result
};
        unsafe fn repeat(ch: &str, mut times: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < times) {
        res = format!("{}{}", res, ch);
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn char_index(mut s: String, c: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == c) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn base64_encode(mut data: Vec<i64>) -> String {
    let mut bits: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (data.len() as i64)) {
        bits = format!("{}{}", bits, zfill(&to_binary(data[i as usize]), 8));
        i = (i + 1);
    }
    let mut pad_bits: i64 = 0;
    if (((bits.len() as i64) % 6) != 0) {
        pad_bits = (6 - ((bits.len() as i64) % 6));
        bits = format!("{}{}", bits, repeat(&"0", pad_bits));
    }
    let mut j: i64 = 0;
    let mut encoded: String = String::from("").clone();
    while (j < (bits.len() as i64)) {
        let mut chunk: String = { let tmp = &bits; tmp.chars().skip(j as usize).take(((j + 6) - j) as usize).collect::<String>() }.clone();
        let mut idx: i64 = from_binary(chunk.clone());
        encoded = format!("{}{}", encoded, { let tmp = &g_B64_CHARSET; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() });
        j = (j + 6);
    }
    let mut pad: i64 = (pad_bits / 2);
    while (pad > 0) {
        encoded = format!("{}{}", encoded, "=");
        pad = (pad - 1);
    }
    return encoded.clone()
};
        unsafe fn base64_decode(mut s: String) -> Vec<i64> {
    let mut padding: i64 = 0;
    let mut end = (s.len() as i64);
    while ((end > 0) && ({ let tmp = &s; tmp.chars().skip((end - 1) as usize).take((end - (end - 1)) as usize).collect::<String>() }.as_str() == "=")) {
        padding = (padding + 1);
        end = (end - 1);
    }
    let mut bits: String = String::from("").clone();
    let mut k: i64 = 0;
    while (k < end) {
        let mut c: String = { let tmp = &s; tmp.chars().skip(k as usize).take(((k + 1) - k) as usize).collect::<String>() }.clone();
        let mut idx: i64 = char_index(g_B64_CHARSET.clone(), &c);
        bits = format!("{}{}", bits, zfill(&to_binary(idx), 6));
        k = (k + 1);
    }
    if (padding > 0) {
        bits = { let tmp = &bits; tmp.chars().skip(0 as usize).take((((bits.len() as i64) - (padding * 2)) - 0) as usize).collect::<String>() };
    }
    let mut bytes: Vec<i64> = vec![];
    let mut m: i64 = 0;
    while (m < (bits.len() as i64)) {
        let mut byte: i64 = from_binary({ let tmp = &bits; tmp.chars().skip(m as usize).take(((m + 8) - m) as usize).collect::<String>() });
        bytes = { let mut _v = bytes.clone(); _v.push(byte); _v };
        m = (m + 8);
    }
    return bytes
};
        unsafe fn mochi_main() {
    let mut data: Vec<i64> = vec![77, 111, 99, 104, 105];
    let mut encoded: String = base64_encode(data.clone()).clone();
    println!("{}", encoded);
    println!("{:?}", base64_decode(encoded.clone()));;
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
