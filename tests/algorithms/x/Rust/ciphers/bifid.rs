// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_SQUARE: Vec<Vec<String>> = Vec::new();
fn main() {
    unsafe {
        g_SQUARE = vec![vec![String::from("a"), String::from("b"), String::from("c"), String::from("d"), String::from("e")], vec![String::from("f"), String::from("g"), String::from("h"), String::from("i"), String::from("k")], vec![String::from("l"), String::from("m"), String::from("n"), String::from("o"), String::from("p")], vec![String::from("q"), String::from("r"), String::from("s"), String::from("t"), String::from("u")], vec![String::from("v"), String::from("w"), String::from("x"), String::from("y"), String::from("z")]];
                let _start: i64 = _now();
        unsafe fn index_of(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn to_lower_without_spaces(message: &str, mut replace_j: bool) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut ch: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        let mut pos: i64 = index_of(&upper, &ch);
        if (pos >= 0) {
            ch = lower.chars().nth(pos as usize).unwrap().to_string();
        }
        if (ch.as_str() != " ") {
            if (replace_j && (ch.as_str() == "j")) {
                ch = String::from("i");
            }
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn letter_to_numbers(letter: &str) -> Vec<i64> {
    let mut r: i64 = 0;
    while (r < (g_SQUARE.clone().len() as i64)) {
        let mut c: i64 = 0;
        while (c < (g_SQUARE.clone()[r as usize].clone().len() as i64)) {
            if (g_SQUARE.clone()[r as usize].clone()[c as usize].clone() == letter) {
                return vec![(r + 1), (c + 1)]
            }
            c = (c + 1);
        }
        r = (r + 1);
    }
    return vec![0, 0]
};
        unsafe fn numbers_to_letter(mut row: i64, mut col: i64) -> String {
    return g_SQUARE.clone()[(row - 1) as usize].clone()[(col - 1) as usize].clone().clone()
};
        unsafe fn encode(message: &str) -> String {
    let mut clean: String = to_lower_without_spaces(message, true).clone();
    let mut l = (clean.len() as i64);
    let mut rows: Vec<i64> = vec![];
    let mut cols: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < l) {
        let mut nums: Vec<i64> = letter_to_numbers(&clean.chars().nth(i as usize).unwrap().to_string());
        rows = { let mut _v = rows.clone(); _v.push(nums[0 as usize]); _v };
        cols = { let mut _v = cols.clone(); _v.push(nums[1 as usize]); _v };
        i = (i + 1);
    }
    let mut seq: Vec<i64> = vec![];
    i = 0;
    while (i < l) {
        seq = { let mut _v = seq.clone(); _v.push(rows[i as usize]); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < l) {
        seq = { let mut _v = seq.clone(); _v.push(cols[i as usize]); _v };
        i = (i + 1);
    }
    let mut encoded: String = String::from("").clone();
    i = 0;
    while (i < l) {
        let mut r: i64 = seq[(2 * i) as usize];
        let mut c: i64 = seq[((2 * i) + 1) as usize];
        encoded = format!("{}{}", encoded, numbers_to_letter(r, c));
        i = (i + 1);
    }
    return encoded.clone()
};
        unsafe fn decode(message: &str) -> String {
    let mut clean: String = to_lower_without_spaces(message, false).clone();
    let mut l = (clean.len() as i64);
    let mut first: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < l) {
        let mut nums: Vec<i64> = letter_to_numbers(&clean.chars().nth(i as usize).unwrap().to_string());
        first = { let mut _v = first.clone(); _v.push(nums[0 as usize]); _v };
        first = { let mut _v = first.clone(); _v.push(nums[1 as usize]); _v };
        i = (i + 1);
    }
    let mut top: Vec<i64> = vec![];
    let mut bottom: Vec<i64> = vec![];
    i = 0;
    while (i < l) {
        top = { let mut _v = top.clone(); _v.push(first[i as usize]); _v };
        bottom = { let mut _v = bottom.clone(); _v.push(first[(i + l) as usize]); _v };
        i = (i + 1);
    }
    let mut decoded: String = String::from("").clone();
    i = 0;
    while (i < l) {
        let mut r: i64 = top[i as usize];
        let mut c: i64 = bottom[i as usize];
        decoded = format!("{}{}", decoded, numbers_to_letter(r, c));
        i = (i + 1);
    }
    return decoded.clone()
};
        println!("{}", encode(&"testmessage"));
        println!("{}", encode(&"Test Message"));
        println!("{}", encode(&"test j"));
        println!("{}", encode(&"test i"));
        println!("{}", decode(&"qtltbdxrxlk"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
