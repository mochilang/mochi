// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_UPPER: String = String::new();
static mut g_LOWER: String = String::new();
fn main() {
    unsafe {
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
                let _start: i64 = _now();
        unsafe fn to_upper(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        let mut j: i64 = 0;
        let mut found: bool = false;
        while (j < 26) {
            if (ch.as_str() == g_LOWER.chars().nth(j as usize).unwrap().to_string().as_str()) {
                res = format!("{}{}", res, g_UPPER.chars().nth(j as usize).unwrap().to_string());
                found = true;
                break
            }
            j = (j + 1);
        }
        if (found == false) {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn contains(mut xs: Vec<String>, x: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn contains_char(s: &str, ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn get_value(mut keys: Vec<String>, mut values: Vec<String>, key: &str) -> String {
    let mut i: i64 = 0;
    while (i < (keys.len() as i64)) {
        if (keys[i as usize].clone() == key) {
            return values[i as usize].clone()
        }
        i = (i + 1);
    }
    return String::new().clone()
};
        unsafe fn print_mapping(mut keys: Vec<String>, mut values: Vec<String>) {
    let mut s: String = String::from("{").clone();
    let mut i: i64 = 0;
    while (i < (keys.len() as i64)) {
        s = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s, "'"), keys[i as usize].clone()), "': '"), values[i as usize].clone()), "'");
        if ((i + 1) < (keys.len() as i64)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "}");
    println!("{}", s);
};
        unsafe fn mixed_keyword(keyword: &str, plaintext: &str, mut verbose: bool) -> String {
    let mut alphabet: String = g_UPPER.clone();
    let mut keyword_u: String = to_upper(keyword).clone();
    let mut plaintext_u: String = to_upper(plaintext).clone();
    let mut unique: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (keyword_u.len() as i64)) {
        let mut ch: String = keyword_u.chars().nth(i as usize).unwrap().to_string().clone();
        if (contains_char(&alphabet, &ch) && (unique.contains(&ch) == false)) {
            unique = { let mut _v = unique.clone(); _v.push(ch.clone()); _v };
        }
        i = (i + 1);
    }
    let mut num_unique = (unique.len() as i64);
    let mut shifted: Vec<String> = vec![];
    i = 0;
    while (i < (unique.len() as i64)) {
        shifted = { let mut _v = shifted.clone(); _v.push(unique[i as usize].clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (alphabet.len() as i64)) {
        let mut ch: String = alphabet.chars().nth(i as usize).unwrap().to_string().clone();
        if (unique.contains(&ch) == false) {
            shifted = { let mut _v = shifted.clone(); _v.push(ch.clone()); _v };
        }
        i = (i + 1);
    }
    let mut modified: Vec<Vec<String>> = vec![];
    let mut k: i64 = 0;
    while (k < (shifted.len() as i64)) {
        let mut row: Vec<String> = vec![];
        let mut r: i64 = 0;
        while ((r < num_unique) && ((k + r) < (shifted.len() as i64))) {
            row = { let mut _v = row.clone(); _v.push(shifted[(k + r) as usize].clone()); _v };
            r = (r + 1);
        }
        modified = { let mut _v = modified.clone(); _v.push(row.clone()); _v };
        k = (k + num_unique);
    }
    let mut keys: Vec<String> = vec![];
    let mut values: Vec<String> = vec![];
    let mut column: i64 = 0;
    let mut letter_index: i64 = 0;
    while (column < num_unique) {
        let mut row_idx: i64 = 0;
        while (row_idx < (modified.len() as i64)) {
            let mut row: Vec<String> = modified[row_idx as usize].clone();
            if ((row.len() as i64) <= column) {
                break
            }
            keys = { let mut _v = keys.clone(); _v.push(alphabet.chars().nth(letter_index as usize).unwrap().to_string()); _v };
            values = { let mut _v = values.clone(); _v.push(row[column as usize].clone()); _v };
            letter_index = (letter_index + 1);
            row_idx = (row_idx + 1);
        }
        column = (column + 1);
    }
    if verbose {
        print_mapping(keys.clone(), values.clone());
    }
    let mut result: String = String::from("").clone();
    i = 0;
    while (i < (plaintext_u.len() as i64)) {
        let mut ch: String = plaintext_u.chars().nth(i as usize).unwrap().to_string().clone();
        let mut mapped: String = get_value(keys.clone(), values.clone(), &ch).clone();
        if mapped.is_empty() {
            result = format!("{}{}", result, ch);
        } else {
            result = format!("{}{}", result, mapped);
        }
        i = (i + 1);
    }
    return result.clone()
};
        println!("{}", mixed_keyword(&"college", &"UNIVERSITY", true));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
