// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn mod_pow(mut base: i64, mut exp: i64, mut r#mod: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % r#mod);
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % r#mod);
        }
        b = ((b * b) % r#mod);
        e = (e / 2);
    }
    return result
};
    fn miller_rabin(mut n: i64, mut allow_probable: bool) -> bool {
    if (n == 2) {
        return true
    }
    if ((n < 2) || ((n % 2) == 0)) {
        return false
    }
    if (n > 5) {
        let mut last: i64 = (n % 10);
        if !((((last == 1) || (last == 3)) || (last == 7)) || (last == 9)) {
            return false
        }
    }
    let mut limit: i64 = 3825123056546413051;
    if ((n > limit) && !allow_probable) {
        panic!("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.");
    }
    let mut bounds: Vec<i64> = vec![2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, limit];
    let mut primes: Vec<i64> = vec![2, 3, 5, 7, 11, 13, 17, 19];
    let mut i: i64 = 0;
    let mut plist_len = (primes.len() as i64);
    while (i < (bounds.len() as i64)) {
        if (n < bounds[i as usize]) {
            plist_len = (i + 1);
            i = (bounds.len() as i64);
        } else {
            i = (i + 1);
        }
    }
    let mut d: i64 = (n - 1);
    let mut s: i64 = 0;
    while ((d % 2) == 0) {
        d = (d / 2);
        s = (s + 1);
    }
    let mut j: i64 = 0;
    while (j < plist_len) {
        let mut prime: i64 = primes[j as usize];
        let mut x: i64 = mod_pow(prime, d, n);
        let mut pr: bool = false;
        if ((x == 1) || (x == (n - 1))) {
            pr = true;
        } else {
            let mut r: i64 = 1;
            while ((r < s) && !pr) {
                x = ((x * x) % n);
                if (x == (n - 1)) {
                    pr = true;
                }
                r = (r + 1);
            }
        }
        if !pr {
            return false
        }
        j = (j + 1);
    }
    return true
};
    println!("{}", miller_rabin(561, false).to_string());
    println!("{}", miller_rabin(563, false).to_string());
    println!("{}", miller_rabin(838201, false).to_string());
    println!("{}", miller_rabin(838207, false).to_string());
    println!("{}", miller_rabin(17316001, false).to_string());
    println!("{}", miller_rabin(17316017, false).to_string());
    println!("{}", miller_rabin(3078386641, false).to_string());
    println!("{}", miller_rabin(3078386653, false).to_string());
    println!("{}", miller_rabin(1713045574801, false).to_string());
    println!("{}", miller_rabin(1713045574819, false).to_string());
    println!("{}", miller_rabin(2779799728307, false).to_string());
    println!("{}", miller_rabin(2779799728327, false).to_string());
    println!("{}", miller_rabin(113850023909441, false).to_string());
    println!("{}", miller_rabin(113850023909527, false).to_string());
    println!("{}", miller_rabin(1275041018848804351, false).to_string());
    println!("{}", miller_rabin(1275041018848804391, false).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
