// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_encode_map: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("a"), String::from("AAAAA")), (String::from("b"), String::from("AAAAB")), (String::from("c"), String::from("AAABA")), (String::from("d"), String::from("AAABB")), (String::from("e"), String::from("AABAA")), (String::from("f"), String::from("AABAB")), (String::from("g"), String::from("AABBA")), (String::from("h"), String::from("AABBB")), (String::from("i"), String::from("ABAAA")), (String::from("j"), String::from("BBBAA")), (String::from("k"), String::from("ABAAB")), (String::from("l"), String::from("ABABA")), (String::from("m"), String::from("ABABB")), (String::from("n"), String::from("ABBAA")), (String::from("o"), String::from("ABBAB")), (String::from("p"), String::from("ABBBA")), (String::from("q"), String::from("ABBBB")), (String::from("r"), String::from("BAAAA")), (String::from("s"), String::from("BAAAB")), (String::from("t"), String::from("BAABA")), (String::from("u"), String::from("BAABB")), (String::from("v"), String::from("BBBAB")), (String::from("w"), String::from("BABAA")), (String::from("x"), String::from("BABAB")), (String::from("y"), String::from("BABBA")), (String::from("z"), String::from("BABBB")), (String::from(" "), String::from(" "))])));
fn main() {
    unsafe {
                let _start: i64 = _now();
        unsafe fn make_decode_map() -> HashMap<String, String> {
    let mut m: HashMap<String, String> = HashMap::new();
    for k in g_encode_map.lock().unwrap().clone().keys().cloned() {
        m.insert(g_encode_map.lock().unwrap()[k.as_str()].clone(), k);
    }
    return m
};
        let mut decode_map: HashMap<String, String> = make_decode_map();
        let split_spaces = move |s: &str| -> Vec<String> {
    let mut parts: Vec<String> = vec![];
    let mut current: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == " ") {
            parts = { let mut _v = parts.clone(); _v.push(current.clone()); _v };
            current = String::from("");
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    parts = { let mut _v = parts.clone(); _v.push(current.clone()); _v };
    return parts
};
        let encode = move |word: &str| -> String {
    let mut w: String = (word.to_lowercase()).clone();
    let mut encoded: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (w.len() as i64)) {
        let mut ch: String = { let tmp = &w; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if g_encode_map.lock().unwrap().contains_key(&ch) {
            encoded = format!("{}{}", encoded, g_encode_map.lock().unwrap().get(ch.as_str()).cloned().unwrap_or_default());
        } else {
            panic!("encode() accepts only letters of the alphabet and spaces");
        }
        i = (i + 1);
    }
    return encoded.clone()
};
        let decode = move |coded: &str| -> String {
    let mut i: i64 = 0;
    while (i < (coded.len() as i64)) {
        let mut ch: String = { let tmp = &coded; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (((ch.as_str() != "A") && (ch.as_str() != "B")) && (ch.as_str() != " ")) {
            panic!("decode() accepts only 'A', 'B' and spaces");
        }
        i = (i + 1);
    }
    let mut words: Vec<String> = split_spaces(&coded);
    let mut decoded: String = String::from("").clone();
    let mut w: i64 = 0;
    while (w < (words.len() as i64)) {
        let mut word: String = words[w as usize].clone().clone();
        let mut j: i64 = 0;
        while (j < (word.len() as i64)) {
            let mut segment: String = { let tmp = &word; tmp.chars().skip(j as usize).take(((j + 5) - j) as usize).collect::<String>() }.clone();
            decoded = format!("{}{}", decoded, decode_map.get(segment.as_str()).cloned().unwrap_or_default());
            j = (j + 5);
        }
        if (w < ((words.len() as i64) - 1)) {
            decoded = format!("{}{}", decoded, " ");
        }
        w = (w + 1);
    }
    return decoded.clone()
};
        println!("{}", encode(&"hello"));
        println!("{}", encode(&"hello world"));
        println!("{}", decode(&"AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"));
        println!("{}", decode(&"AABBBAABAAABABAABABAABBAB"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
