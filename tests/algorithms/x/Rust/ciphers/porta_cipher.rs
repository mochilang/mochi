// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_UPPER: String = String::new();
static mut g_LOWER: String = String::new();
static mut g_BASE_TOP: String = String::new();
static mut g_BASE_BOTTOM: String = String::new();
fn main() {
    unsafe {
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_BASE_TOP = String::from("ABCDEFGHIJKLM").clone();
        g_BASE_BOTTOM = String::from("NOPQRSTUVWXYZ").clone();
                let _start: i64 = _now();
        unsafe fn to_upper(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut j: i64 = 0;
        let mut replaced: bool = false;
        while (j < (g_LOWER.len() as i64)) {
            if ({ let tmp = &g_LOWER; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str() == ch.as_str()) {
                res = format!("{}{}", res, { let tmp = &g_UPPER; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() });
                replaced = true;
                break
            }
            j = (j + 1);
        }
        if !replaced {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn char_index(c: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_UPPER.len() as i64)) {
        if ({ let tmp = &g_UPPER; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == c) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn rotate_right(mut s: String, mut k: i64) -> String {
    let mut n = (s.len() as i64);
    let mut shift: i64 = (k % n);
    return format!("{}{}", { let tmp = &s; tmp.chars().skip((n - shift) as usize).take((n - (n - shift)) as usize).collect::<String>() }, { let tmp = &s; tmp.chars().skip(0 as usize).take(((n - shift) - 0) as usize).collect::<String>() }).clone()
};
        unsafe fn table_for(c: &str) -> Vec<String> {
    let mut idx: i64 = char_index(c);
    let mut shift: i64 = (idx / 2);
    let mut row1: String = rotate_right(g_BASE_BOTTOM.clone(), shift).clone();
    let mut pair: Vec<String> = vec![g_BASE_TOP.clone().clone(), row1.clone()];
    return pair
};
        unsafe fn generate_table(key: &str) -> Vec<Vec<String>> {
    let mut up: String = to_upper(key).clone();
    let mut i: i64 = 0;
    let mut result: Vec<Vec<String>> = vec![];
    while (i < (up.len() as i64)) {
        let mut ch: String = { let tmp = &up; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut pair: Vec<String> = table_for(&ch);
        result = { let mut _v = result.clone(); _v.push(pair.clone()); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn str_index(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return (0 - 1)
};
        unsafe fn get_position(mut table: Vec<String>, mut ch: String) -> Vec<i64> {
    let mut row: i64 = 0;
    if (str_index(table[0 as usize].clone(), &ch) == (0 - 1)) {
        row = 1;
    }
    let mut col: i64 = str_index(table[row as usize].clone(), &ch);
    return vec![row, col]
};
        unsafe fn get_opponent(mut table: Vec<String>, ch: &str) -> String {
    let mut pos: Vec<i64> = get_position(table.clone(), ch.to_string());
    let mut row: i64 = pos[0 as usize];
    let mut col: i64 = pos[1 as usize];
    if (col == (0 - 1)) {
        return ch.to_string()
    }
    if (row == 1) {
        return { let tmp = &table[0 as usize].clone(); tmp.chars().skip(col as usize).take(((col + 1) - col) as usize).collect::<String>() }
    }
    return { let tmp = &table[1 as usize].clone(); tmp.chars().skip(col as usize).take(((col + 1) - col) as usize).collect::<String>() }.clone()
};
        unsafe fn encrypt(key: &str, words: &str) -> String {
    let mut table: Vec<Vec<String>> = generate_table(key);
    let mut up_words: String = to_upper(words).clone();
    let mut cipher: String = String::from("").clone();
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (up_words.len() as i64)) {
        let mut ch: String = { let tmp = &up_words; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        cipher = format!("{}{}", cipher, get_opponent(table[count as usize].clone(), &ch));
        count = ((count + 1) % (table.len() as i64));
        i = (i + 1);
    }
    return cipher.clone()
};
        unsafe fn decrypt(key: &str, words: &str) -> String {
    let mut res: String = encrypt(key, words).clone();
    return res.clone()
};
        unsafe fn mochi_main() {
    println!("{}", encrypt(&"marvin", &"jessica"));
    println!("{}", decrypt(&"marvin", &"QRACRWU"));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
