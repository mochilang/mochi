// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_default_alphabet: String = String::new();
fn main() {
    unsafe {
        g_default_alphabet = String::from("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
                let _start: i64 = _now();
        unsafe fn index_of(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn encrypt(input_string: &str, mut key: i64, mut alphabet: String) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    let mut n = (alphabet.len() as i64);
    while (i < (input_string.len() as i64)) {
        let mut ch: String = { let tmp = &input_string; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut idx: i64 = index_of(alphabet.clone(), &ch);
        if (idx < 0) {
            result = format!("{}{}", result, ch);
        } else {
            let mut new_key: i64 = ((idx + key) % n);
            if (new_key < 0) {
                new_key = (new_key + n);
            }
            result = format!("{}{}", result, { let tmp = &alphabet; tmp.chars().skip(new_key as usize).take(((new_key + 1) - new_key) as usize).collect::<String>() });
        }
        i = (i + 1);
    }
    return result.clone()
};
        unsafe fn decrypt(input_string: &str, mut key: i64, mut alphabet: String) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    let mut n = (alphabet.len() as i64);
    while (i < (input_string.len() as i64)) {
        let mut ch: String = { let tmp = &input_string; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut idx: i64 = index_of(alphabet.clone(), &ch);
        if (idx < 0) {
            result = format!("{}{}", result, ch);
        } else {
            let mut new_key: i64 = ((idx - key) % n);
            if (new_key < 0) {
                new_key = (new_key + n);
            }
            result = format!("{}{}", result, { let tmp = &alphabet; tmp.chars().skip(new_key as usize).take(((new_key + 1) - new_key) as usize).collect::<String>() });
        }
        i = (i + 1);
    }
    return result.clone()
};
        unsafe fn brute_force(input_string: &str, alphabet: &str) -> Vec<String> {
    let mut results: Vec<String> = vec![];
    let mut key: i64 = 1;
    let mut n = (alphabet.len() as i64);
    while (key <= n) {
        let mut message: String = decrypt(input_string, key, alphabet.to_string()).clone();
        results = { let mut _v = results.clone(); _v.push(message.clone()); _v };
        key = (key + 1);
    }
    return results
};
        unsafe fn mochi_main() {
    let mut alpha: String = g_default_alphabet.clone();
    let mut enc: String = encrypt(&"The quick brown fox jumps over the lazy dog", 8, alpha.clone()).clone();
    println!("{}", enc);
    let mut dec: String = decrypt(&enc, 8, alpha.clone()).clone();
    println!("{}", dec);
    let mut brute: Vec<String> = brute_force(&"jFyuMy xIH'N vLONy zILwy Gy!", &alpha);
    println!("{}", brute[19 as usize].clone());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
