// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_ascii85_chars: String = String::new();
fn main() {
    unsafe {
        g_ascii85_chars = String::from("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu").clone();
                let _start: i64 = _now();
        unsafe fn indexOf(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn ord(ch: &str) -> i64 {
    let mut idx = { let s = g_ascii85_chars.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (33 + idx)
    }
    return 0
};
        unsafe fn chr(mut n: i64) -> String {
    if ((n >= 33) && (n <= 117)) {
        return g_ascii85_chars.chars().skip((n - 33) as usize).take(((n - 32) - (n - 33)) as usize).collect::<String>()
    }
    return String::from("?").clone()
};
        unsafe fn to_binary(mut n: i64, mut bits: i64) -> String {
    let mut b: String = String::from("").clone();
    let mut val: i64 = n;
    while (val > 0) {
        b = format!("{}{}", (val % 2).to_string(), b).to_string();
        val = (val / 2);
    }
    while ((b.len() as i64) < bits) {
        b = format!("{}{}", "0", b);
    }
    if ((b.len() as i64) == 0) {
        b = String::from("0");
    }
    return b.clone()
};
        unsafe fn bin_to_int(bits: &str) -> i64 {
    let mut n: i64 = 0;
    let mut i: i64 = 0;
    while (i < (bits.len() as i64)) {
        if (bits.chars().nth(i as usize).unwrap().to_string().as_str() == "1") {
            n = ((n * 2) + 1);
        } else {
            n = (n * 2);
        }
        i = (i + 1);
    }
    return n
};
        unsafe fn reverse(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i = ((s.len() as i64) - 1);
    while (i >= 0) {
        res = format!("{}{}", res, s.chars().nth(i as usize).unwrap().to_string());
        i = (i - 1);
    }
    return res.clone()
};
        unsafe fn base10_to_85(mut d: i64) -> String {
    if (d > 0) {
        return format!("{}{}", chr(((d % 85) + 33)), base10_to_85((d / 85)))
    }
    return String::from("").clone()
};
        unsafe fn base85_to_10(digits: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (digits.len() as i64)) {
        value = ((value * 85) + (ord(&digits.chars().nth(i as usize).unwrap().to_string()) - 33));
        i = (i + 1);
    }
    return value
};
        unsafe fn ascii85_encode(data: &str) -> String {
    let mut binary_data: String = String::from("").clone();
    for ch in data.chars() {
        let ch = ch.to_string();
        binary_data = format!("{}{}", binary_data, to_binary(ord(&ch), 8));
    }
    let mut null_values: i64 = (((32 * (((binary_data.len() as i64) / 32) + 1)) - (binary_data.len() as i64)) / 8);
    let mut total_bits: i64 = (32 * (((binary_data.len() as i64) / 32) + 1));
    while ((binary_data.len() as i64) < total_bits) {
        binary_data = format!("{}{}", binary_data, "0");
    }
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (binary_data.len() as i64)) {
        let mut chunk_bits: String = binary_data.chars().skip(i as usize).take(((i + 32) - i) as usize).collect::<String>().clone();
        let mut chunk_val: i64 = bin_to_int(&chunk_bits);
        let mut encoded: String = reverse(&base10_to_85(chunk_val)).clone();
        result = format!("{}{}", result, encoded);
        i = (i + 32);
    }
    if ((null_values % 4) != 0) {
        result = result.chars().skip(0 as usize).take((((result.len() as i64) - null_values) - 0) as usize).collect::<String>();
    }
    return result.clone()
};
        unsafe fn ascii85_decode(data: &str) -> String {
    let mut null_values: i64 = ((5 * (((data.len() as i64) / 5) + 1)) - (data.len() as i64));
    let mut binary_data: String = data.to_string().clone();
    let mut i: i64 = 0;
    while (i < null_values) {
        binary_data = format!("{}{}", binary_data, "u");
        i = (i + 1);
    }
    let mut result: String = String::from("").clone();
    i = 0;
    while (i < (binary_data.len() as i64)) {
        let mut chunk: String = binary_data.chars().skip(i as usize).take(((i + 5) - i) as usize).collect::<String>().clone();
        let mut value: i64 = base85_to_10(&chunk);
        let mut bits: String = to_binary(value, 32).clone();
        let mut j: i64 = 0;
        while (j < 32) {
            let mut byte_bits: String = bits.chars().skip(j as usize).take(((j + 8) - j) as usize).collect::<String>().clone();
            let mut c: String = chr(bin_to_int(&byte_bits)).clone();
            result = format!("{}{}", result, c);
            j = (j + 8);
        }
        i = (i + 5);
    }
    let mut trim: i64 = null_values;
    if ((null_values % 5) == 0) {
        trim = (null_values - 1);
    }
    return result.chars().skip(0 as usize).take((((result.len() as i64) - trim) - 0) as usize).collect::<String>().clone()
};
        println!("{}", ascii85_encode(&""));
        println!("{}", ascii85_encode(&"12345"));
        println!("{}", ascii85_encode(&"base 85"));
        println!("{}", ascii85_decode(&""));
        println!("{}", ascii85_decode(&"0etOA2#"));
        println!("{}", ascii85_decode(&"@UX=h+?24"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
