// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 0;
static mut g_message: String = String::new();
fn main() {
    unsafe {
        g_seed = 1;
        g_message = String::from("HELLO WORLD").clone();
                let _start: i64 = _now();
        unsafe fn rand(mut max: i64) -> i64 {
    g_seed = (((g_seed * 1103515245) + 12345) % 2147483647);
    return (g_seed % max)
};
        unsafe fn generate_valid_block_size(mut message_length: i64) -> i64 {
    let mut factors: Vec<i64> = vec![];
    let mut i: i64 = 2;
    while (i <= message_length) {
        if ((message_length % i) == 0) {
            factors = { let mut _v = factors.clone(); _v.push(i); _v };
        }
        i = (i + 1);
    }
    let mut idx: i64 = rand((factors.len() as i64));
    return factors[idx as usize]
};
        unsafe fn generate_permutation_key(mut block_size: i64) -> Vec<i64> {
    let mut digits: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < block_size) {
        digits = { let mut _v = digits.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    let mut j: i64 = (block_size - 1);
    while (j > 0) {
        let mut k: i64 = rand((j + 1));
        let mut temp: i64 = digits[j as usize];
        digits[j as usize] = digits[k as usize];
        digits[k as usize] = temp;
        j = (j - 1);
    }
    return digits
};
        unsafe fn encrypt(message: &str, mut key: Vec<i64>, mut block_size: i64) -> String {
    let mut encrypted: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut block: String = { let tmp = &message; tmp.chars().skip(i as usize).take(((i + block_size) - i) as usize).collect::<String>() }.clone();
        let mut j: i64 = 0;
        while (j < block_size) {
            encrypted = format!("{}{}", encrypted, { let tmp = &block; tmp.chars().skip(key[j as usize] as usize).take(((key[j as usize] + 1) - key[j as usize]) as usize).collect::<String>() });
            j = (j + 1);
        }
        i = (i + block_size);
    }
    return encrypted.clone()
};
        unsafe fn repeat_string(mut times: i64) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < times) {
        res = { let mut _v = res.clone(); _v.push("".to_string()); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn decrypt(encrypted: &str, mut key: Vec<i64>) -> String {
    let mut klen = (key.len() as i64);
    let mut decrypted: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (encrypted.len() as i64)) {
        let mut block: String = { let tmp = &encrypted; tmp.chars().skip(i as usize).take(((i + klen) - i) as usize).collect::<String>() }.clone();
        let mut original: Vec<String> = repeat_string(klen);
        let mut j: i64 = 0;
        while (j < klen) {
            original[key[j as usize] as usize] = { let tmp = &block; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() };
            j = (j + 1);
        }
        j = 0;
        while (j < klen) {
            decrypted = format!("{}{}", decrypted, original[j as usize].clone());
            j = (j + 1);
        }
        i = (i + klen);
    }
    return decrypted.clone()
};
        let mut block_size: i64 = generate_valid_block_size((g_message.len() as i64));
        let mut key: Vec<i64> = generate_permutation_key(block_size);
        let mut encrypted: String = encrypt(&g_message, key.clone(), block_size).clone();
        let mut decrypted: String = decrypt(&encrypted, key.clone()).clone();
        println!("{}", format!("{}{}", "Block size: ", block_size.to_string()));
        println!("{}", format!("{}{}", "Key: ", format!("{:?}", key)));
        println!("{}", format!("{}{}", "Encrypted: ", encrypted));
        println!("{}", format!("{}{}", "Decrypted: ", decrypted));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
