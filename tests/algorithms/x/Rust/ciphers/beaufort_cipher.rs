// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_ALPHABET: String = String::new();
static mut g_message: String = String::new();
static mut g_key: String = String::new();
fn main() {
    unsafe {
        g_ALPHABET = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_message = String::from("THE GERMAN ATTACK").clone();
        g_key = String::from("SECRET").clone();
                let _start: i64 = _now();
        unsafe fn index_of(ch: &str) -> i64 {
    for i in 0..(g_ALPHABET.len() as i64) {
        if (g_ALPHABET.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
    }
    return -1
};
        unsafe fn generate_key(message: &str, key: &str) -> String {
    let mut key_new: String = key.to_string().clone();
    let mut i: i64 = 0;
    while ((key_new.len() as i64) < (message.len() as i64)) {
        key_new = format!("{}{}", key_new, key.chars().nth(i as usize).unwrap().to_string());
        i = (i + 1);
        if (i == (key.len() as i64)) {
            i = 0;
        }
    }
    return key_new.clone()
};
        unsafe fn cipher_text(message: &str, key_new: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    for idx in 0..(message.len() as i64) {
        let mut ch: String = message.chars().nth(idx as usize).unwrap().to_string().clone();
        if (ch.as_str() == " ") {
            res = format!("{}{}", res, " ");
        } else {
            let mut x: i64 = (((index_of(&ch) - index_of(&key_new.chars().nth(i as usize).unwrap().to_string())) + 26) % 26);
            i = (i + 1);
            res = format!("{}{}", res, g_ALPHABET.chars().nth(x as usize).unwrap().to_string());
        }
    }
    return res.clone()
};
        unsafe fn original_text(cipher: &str, key_new: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    for idx in 0..(cipher.len() as i64) {
        let mut ch: String = cipher.chars().nth(idx as usize).unwrap().to_string().clone();
        if (ch.as_str() == " ") {
            res = format!("{}{}", res, " ");
        } else {
            let mut x: i64 = (((index_of(&ch) + index_of(&key_new.chars().nth(i as usize).unwrap().to_string())) + 26) % 26);
            i = (i + 1);
            res = format!("{}{}", res, g_ALPHABET.chars().nth(x as usize).unwrap().to_string());
        }
    }
    return res.clone()
};
        let mut key_new: String = generate_key(&g_message, &g_key).clone();
        let mut encrypted: String = cipher_text(&g_message, &key_new).clone();
        println!("{}", format!("{}{}", "Encrypted Text = ", encrypted));
        println!("{}", format!("{}{}", "Original Text = ", original_text(&encrypted, &key_new)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
