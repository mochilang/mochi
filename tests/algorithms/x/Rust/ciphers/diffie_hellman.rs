// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 0;
static mut g_PRIME: i64 = 0;
static mut g_generator: i64 = 0;
fn main() {
    unsafe {
        g_seed = 123456789;
        g_PRIME = 23;
        g_generator = 5;
                let _start: i64 = _now();
        unsafe fn int_to_hex(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut digits: String = String::from("0123456789abcdef").clone();
    let mut num: i64 = n;
    let mut res: String = String::from("").clone();
    while (num > 0) {
        let mut d: i64 = (num % 16);
        res = format!("{}{}", digits.chars().nth(d as usize).unwrap().to_string(), res);
        num = (num / 16);
    }
    return res.clone()
};
        unsafe fn rand_int() -> i64 {
    g_seed = (((1103515245 * g_seed) + 12345) % 2147483648);
    return g_seed
};
        unsafe fn mod_pow(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % g_PRIME);
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % g_PRIME);
        }
        b = ((b * b) % g_PRIME);
        e = (e / 2);
    }
    return result
};
        unsafe fn is_valid_public_key(mut key: i64) -> bool {
    if ((key < 2) || (key > (g_PRIME - 2))) {
        return false
    }
    return (mod_pow(key, ((g_PRIME - 1) / 2)) == 1)
};
        unsafe fn generate_private_key() -> i64 {
    return ((rand_int() % (g_PRIME - 2)) + 2)
};
        let mut alice_private: i64 = generate_private_key();
        let mut alice_public: i64 = mod_pow(g_generator, alice_private);
        let mut bob_private: i64 = generate_private_key();
        let mut bob_public: i64 = mod_pow(g_generator, bob_private);
        if !is_valid_public_key(alice_public) {
            panic!("Invalid public key");
        }
        if !is_valid_public_key(bob_public) {
            panic!("Invalid public key");
        }
        let mut alice_shared: i64 = mod_pow(bob_public, alice_private);
        let mut bob_shared: i64 = mod_pow(alice_public, bob_private);
        println!("{}", int_to_hex(alice_shared));
        println!("{}", int_to_hex(bob_shared));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
