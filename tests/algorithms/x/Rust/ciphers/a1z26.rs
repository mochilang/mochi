// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn main() {
        let _start: i64 = _now();
    fn indexOf(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn charToNum(ch: &str) -> i64 {
    let mut letters: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut idx = { let s = letters.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (idx + 1)
    }
    return 0
};
    fn numToChar(mut n: i64) -> String {
    let mut letters: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    if ((n >= 1) && (n <= 26)) {
        return { let tmp = &letters; tmp.chars().skip((n - 1) as usize).take((n - (n - 1)) as usize).collect::<String>() }
    }
    return String::from("?").clone()
};
    fn encode(plain: &str) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (plain.len() as i64)) {
        let mut ch: String = ({ let tmp = &plain; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.to_lowercase()).clone();
        let mut val: i64 = charToNum(&ch);
        if (val > 0) {
            res = { let mut _v = res.clone(); _v.push(val); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn decode(mut encoded: Vec<i64>) -> String {
    let mut out: String = String::from("").clone();
    for n in encoded.iter().cloned() {
        out = format!("{}{}", out, numToChar(n));
    }
    return out.clone()
};
    fn mochi_main() {
    println!("{}", "-> ");
    let mut text: String = (input().to_lowercase()).clone();
    let mut enc: Vec<i64> = encode(&text);
    println!("{}", format!("{}{}", "Encoded: ", format!("{:?}", enc)));
    println!("{}", format!("{}{}", "Decoded: ", decode(enc.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
