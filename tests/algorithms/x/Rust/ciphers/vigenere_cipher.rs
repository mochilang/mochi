// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LETTERS: String = String::new();
static mut g_LETTERS_LOWER: String = String::new();
static mut g_key: String = String::new();
static mut g_message: String = String::new();
static mut g_encrypted: String = String::new();
static mut g_key_index: i64 = 0;
static mut g_i: i64 = 0;
static mut g_decrypted: String = String::new();
fn main() {
    unsafe {
        g_LETTERS = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        g_LETTERS_LOWER = String::from("abcdefghijklmnopqrstuvwxyz");
        g_key = String::from("HDarji").clone();
        g_message = String::from("This is Harshil Darji from Dharmaj.").clone();
        g_encrypted = String::from("").clone();
        g_key_index = 0;
        g_i = 0;
        g_decrypted = String::from("").clone();
                let _start: i64 = _now();
        unsafe fn find_index(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn to_upper_char(ch: &str) -> String {
    let mut idx: i64 = find_index(&g_LETTERS_LOWER, ch);
    if (idx >= 0) {
        return g_LETTERS.chars().nth(idx as usize).unwrap().to_string()
    }
    return ch.to_string().clone()
};
        unsafe fn to_lower_char(ch: &str) -> String {
    let mut idx: i64 = find_index(&g_LETTERS, ch);
    if (idx >= 0) {
        return g_LETTERS_LOWER.chars().nth(idx as usize).unwrap().to_string()
    }
    return ch.to_string().clone()
};
        unsafe fn is_upper(mut ch: String) -> bool {
    return (find_index(&g_LETTERS, &ch) >= 0)
};
        unsafe fn to_upper_string(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        res = format!("{}{}", res, to_upper_char(&s.chars().nth(i as usize).unwrap().to_string()));
        i = (i + 1);
    }
    return res.clone()
};
        let mut key_up: String = to_upper_string(&g_key).clone();
        while (g_i < (g_message.len() as i64)) {
            let mut symbol: String = g_message.chars().nth(g_i as usize).unwrap().to_string().clone();
            let mut upper_symbol: String = to_upper_char(&symbol).clone();
            let mut num: i64 = find_index(&g_LETTERS, &upper_symbol);
            if (num >= 0) {
                num = (num + find_index(&g_LETTERS, &key_up.chars().nth(g_key_index as usize).unwrap().to_string()));
                num = (num % (g_LETTERS.len() as i64));
                if is_upper(symbol.clone()) {
                    g_encrypted = format!("{}{}", g_encrypted, g_LETTERS.chars().nth(num as usize).unwrap().to_string());
                } else {
                    g_encrypted = format!("{}{}", g_encrypted, to_lower_char(&g_LETTERS.chars().nth(num as usize).unwrap().to_string()));
                }
                g_key_index = (g_key_index + 1);
                if (g_key_index == (key_up.len() as i64)) {
                    g_key_index = 0;
                }
            } else {
                g_encrypted = format!("{}{}", g_encrypted, symbol);
            }
            g_i = (g_i + 1);
        }
        println!("{}", g_encrypted);
        g_key_index = 0;
        g_i = 0;
        while (g_i < (g_encrypted.len() as i64)) {
            let mut symbol: String = g_encrypted.chars().nth(g_i as usize).unwrap().to_string().clone();
            let mut upper_symbol: String = to_upper_char(&symbol).clone();
            let mut num: i64 = find_index(&g_LETTERS, &upper_symbol);
            if (num >= 0) {
                num = (num - find_index(&g_LETTERS, &key_up.chars().nth(g_key_index as usize).unwrap().to_string()));
                num = (num % (g_LETTERS.len() as i64));
                if is_upper(symbol.clone()) {
                    g_decrypted = format!("{}{}", g_decrypted, g_LETTERS.chars().nth(num as usize).unwrap().to_string());
                } else {
                    g_decrypted = format!("{}{}", g_decrypted, to_lower_char(&g_LETTERS.chars().nth(num as usize).unwrap().to_string()));
                }
                g_key_index = (g_key_index + 1);
                if (g_key_index == (key_up.len() as i64)) {
                    g_key_index = 0;
                }
            } else {
                g_decrypted = format!("{}{}", g_decrypted, symbol);
            }
            g_i = (g_i + 1);
        }
        println!("{}", g_decrypted);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
