// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_square: Vec<Vec<String>> = Vec::new();
fn main() {
    unsafe {
        g_square = vec![vec![String::from("a"), String::from("b"), String::from("c"), String::from("d"), String::from("e")], vec![String::from("f"), String::from("g"), String::from("h"), String::from("i"), String::from("k")], vec![String::from("l"), String::from("m"), String::from("n"), String::from("o"), String::from("p")], vec![String::from("q"), String::from("r"), String::from("s"), String::from("t"), String::from("u")], vec![String::from("v"), String::from("w"), String::from("x"), String::from("y"), String::from("z")]];
                let _start: i64 = _now();
        unsafe fn letter_to_numbers(letter: &str) -> Vec<i64> {
    let mut i: i64 = 0;
    while (i < (g_square.clone().len() as i64)) {
        let mut j: i64 = 0;
        while (j < (g_square.clone()[i as usize].clone().len() as i64)) {
            if (g_square.clone()[i as usize].clone()[j as usize].clone() == letter) {
                return vec![(i + 1), (j + 1)]
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return vec![0, 0]
};
        unsafe fn numbers_to_letter(mut index1: i64, mut index2: i64) -> String {
    return g_square.clone()[(index1 - 1) as usize].clone()[(index2 - 1) as usize].clone().clone()
};
        unsafe fn char_to_int(ch: &str) -> i64 {
    if (ch == "1") {
        return 1
    }
    if (ch == "2") {
        return 2
    }
    if (ch == "3") {
        return 3
    }
    if (ch == "4") {
        return 4
    }
    if (ch == "5") {
        return 5
    }
    return 0
};
        unsafe fn encode(mut message: String) -> String {
    message = (message.to_lowercase());
    let mut encoded: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut ch: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() == "j") {
            ch = String::from("i");
        }
        if (ch.as_str() != " ") {
            let mut nums: Vec<i64> = letter_to_numbers(&ch);
            encoded = format!("{}{}", format!("{}{}", encoded, nums[0 as usize].to_string()), nums[1 as usize].to_string());
        } else {
            encoded = format!("{}{}", encoded, " ");
        }
        i = (i + 1);
    }
    return encoded.clone()
};
        unsafe fn decode(message: &str) -> String {
    let mut decoded: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        if (message.chars().nth(i as usize).unwrap().to_string().as_str() == " ") {
            decoded = format!("{}{}", decoded, " ");
            i = (i + 1);
        } else {
            let mut index1: i64 = char_to_int(&message.chars().nth(i as usize).unwrap().to_string());
            let mut index2: i64 = char_to_int(&message.chars().nth((i + 1) as usize).unwrap().to_string());
            let mut letter: String = numbers_to_letter(index1, index2).clone();
            decoded = format!("{}{}", decoded, letter);
            i = (i + 2);
        }
    }
    return decoded.clone()
};
        println!("{}", encode(String::from("test message")));
        println!("{}", encode(String::from("Test Message")));
        println!("{}", decode(&"44154344 32154343112215"));
        println!("{}", decode(&"4415434432154343112215"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
