// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    while (y != 0) {
        let mut t: i64 = (x % y);
        x = y;
        y = t;
    }
    if (x < 0) {
        return -x
    }
    return x
};
    fn pow_mod(mut base: i64, mut exp: i64, mut r#mod: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % r#mod);
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % r#mod);
        }
        e = (e / 2);
        b = ((b * b) % r#mod);
    }
    return result
};
    fn rsa_factor(mut d: i64, mut e: i64, mut n: i64) -> Vec<i64> {
    let mut k: i64 = ((d * e) - 1);
    let mut p: i64 = 0;
    let mut q: i64 = 0;
    let mut g: i64 = 2;
    while ((p == 0) && (g < n)) {
        let mut t: i64 = k;
        while ((t % 2) == 0) {
            t = (t / 2);
            let mut x: i64 = pow_mod(g, t, n);
            let mut y: i64 = gcd((x - 1), n);
            if ((x > 1) && (y > 1)) {
                p = y;
                q = (n / y);
                break
            }
        }
        g = (g + 1);
    }
    if (p > q) {
        return vec![q, p]
    }
    return vec![p, q]
};
    println!("{:?}", rsa_factor(3, 16971, 25777));
    println!("{:?}", rsa_factor(7331, 11, 27233));
    println!("{:?}", rsa_factor(4021, 13, 17711));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
