// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<String>, x: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn index_of(mut xs: Vec<String>, x: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn prepare_input(dirty: &str) -> String {
    let mut letters: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut upper_dirty: String = (dirty.to_uppercase()).clone();
    let mut filtered: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (upper_dirty.len() as i64)) {
        let mut c: String = { let tmp = &upper_dirty; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if letters.contains(&c) {
            filtered = format!("{}{}", filtered, c);
        }
        i = (i + 1);
    }
    if ((filtered.len() as i64) < 2) {
        return filtered
    }
    let mut clean: String = String::from("").clone();
    i = 0;
    while (i < ((filtered.len() as i64) - 1)) {
        let mut c1: String = { let tmp = &filtered; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut c2: String = { let tmp = &filtered; tmp.chars().skip((i + 1) as usize).take(((i + 2) - (i + 1)) as usize).collect::<String>() }.clone();
        clean = format!("{}{}", clean, c1);
        if (c1.as_str() == c2.as_str()) {
            clean = format!("{}{}", clean, "X");
        }
        i = (i + 1);
    }
    clean = format!("{}{}", clean, { let tmp = &filtered; tmp.chars().skip(((filtered.len() as i64) - 1) as usize).take(((filtered.len() as i64) - ((filtered.len() as i64) - 1)) as usize).collect::<String>() });
    if (((clean.len() as i64) % 2) == 1) {
        clean = format!("{}{}", clean, "X");
    }
    return clean.clone()
};
    fn generate_table(key: &str) -> Vec<String> {
    let mut alphabet: String = String::from("ABCDEFGHIKLMNOPQRSTUVWXYZ").clone();
    let mut table: Vec<String> = vec![];
    let mut upper_key: String = (key.to_uppercase()).clone();
    let mut i: i64 = 0;
    while (i < (upper_key.len() as i64)) {
        let mut c: String = { let tmp = &upper_key; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if alphabet.contains(&c) {
            if !table.contains(&c) {
                table = { let mut _v = table.clone(); _v.push(c.clone()); _v };
            }
        }
        i = (i + 1);
    }
    i = 0;
    while (i < (alphabet.len() as i64)) {
        let mut c: String = { let tmp = &alphabet; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if !table.contains(&c) {
            table = { let mut _v = table.clone(); _v.push(c.clone()); _v };
        }
        i = (i + 1);
    }
    return table
};
    fn encode(plaintext: &str, key: &str) -> String {
    let mut table: Vec<String> = generate_table(key);
    let mut text: String = prepare_input(plaintext).clone();
    let mut cipher: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (text.len() as i64)) {
        let mut c1: String = { let tmp = &text; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut c2: String = { let tmp = &text; tmp.chars().skip((i + 1) as usize).take(((i + 2) - (i + 1)) as usize).collect::<String>() }.clone();
        let mut idx1: i64 = index_of(table.clone(), &c1);
        let mut idx2: i64 = index_of(table.clone(), &c2);
        let mut row1: i64 = (idx1 / 5);
        let mut col1: i64 = (idx1 % 5);
        let mut row2: i64 = (idx2 / 5);
        let mut col2: i64 = (idx2 % 5);
        if (row1 == row2) {
            cipher = format!("{}{}", cipher, table[((row1 * 5) + ((col1 + 1) % 5)) as usize].clone());
            cipher = format!("{}{}", cipher, table[((row2 * 5) + ((col2 + 1) % 5)) as usize].clone());
        } else if (col1 == col2) {
            cipher = format!("{}{}", cipher, table[((((row1 + 1) % 5) * 5) + col1) as usize].clone());
            cipher = format!("{}{}", cipher, table[((((row2 + 1) % 5) * 5) + col2) as usize].clone());
        } else {
            cipher = format!("{}{}", cipher, table[((row1 * 5) + col2) as usize].clone());
            cipher = format!("{}{}", cipher, table[((row2 * 5) + col1) as usize].clone());
        }
        i = (i + 2);
    }
    return cipher.clone()
};
    fn decode(cipher: &str, key: &str) -> String {
    let mut table: Vec<String> = generate_table(key);
    let mut plain: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (cipher.len() as i64)) {
        let mut c1: String = { let tmp = &cipher; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut c2: String = { let tmp = &cipher; tmp.chars().skip((i + 1) as usize).take(((i + 2) - (i + 1)) as usize).collect::<String>() }.clone();
        let mut idx1: i64 = index_of(table.clone(), &c1);
        let mut idx2: i64 = index_of(table.clone(), &c2);
        let mut row1: i64 = (idx1 / 5);
        let mut col1: i64 = (idx1 % 5);
        let mut row2: i64 = (idx2 / 5);
        let mut col2: i64 = (idx2 % 5);
        if (row1 == row2) {
            plain = format!("{}{}", plain, table[((row1 * 5) + ((col1 + 4) % 5)) as usize].clone());
            plain = format!("{}{}", plain, table[((row2 * 5) + ((col2 + 4) % 5)) as usize].clone());
        } else if (col1 == col2) {
            plain = format!("{}{}", plain, table[((((row1 + 4) % 5) * 5) + col1) as usize].clone());
            plain = format!("{}{}", plain, table[((((row2 + 4) % 5) * 5) + col2) as usize].clone());
        } else {
            plain = format!("{}{}", plain, table[((row1 * 5) + col2) as usize].clone());
            plain = format!("{}{}", plain, table[((row2 * 5) + col1) as usize].clone());
        }
        i = (i + 2);
    }
    return plain.clone()
};
    fn mochi_main() {
    println!("{}", format!("{} {}", "Encoded:", encode(&"BYE AND THANKS", &"GREETING")).trim_end());
    println!("{}", format!("{} {}", "Decoded:", decode(&"CXRBANRLBALQ", &"GREETING")).trim_end());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
