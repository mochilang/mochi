// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_example1: Vec<i64> = Vec::new();
static mut g_example2: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_example1 = vec![72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];
        g_example2 = vec![72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33];
                let _start: i64 = _now();
        unsafe fn base16_encode(mut data: Vec<i64>) -> String {
    let mut digits: String = String::from("0123456789ABCDEF").clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (data.len() as i64)) {
        let mut b: i64 = data[i as usize];
        if ((b < 0) || (b > 255)) {
            panic!("byte out of range");
        }
        let mut hi: i64 = (b / 16);
        let mut lo: i64 = (b % 16);
        res = format!("{}{}", format!("{}{}", res, digits.chars().skip(hi as usize).take(((hi + 1) - hi) as usize).collect::<String>()), digits.chars().skip(lo as usize).take(((lo + 1) - lo) as usize).collect::<String>());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn base16_decode(data: &str) -> Vec<i64> {
    let mut digits: String = String::from("0123456789ABCDEF").clone();
    if (((data.len() as i64) % 2) != 0) {
        panic!("Base16 encoded data is invalid: Data does not have an even number of hex digits.");
    }
    let hex_value = move |ch: &str| -> i64 {
    let mut j: i64 = 0;
    while (j < 16) {
        if (digits.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() == ch) {
            return j
        }
        j = (j + 1);
    }
    return -1
};
    let mut out: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (data.len() as i64)) {
        let mut hi_char: String = data[i as usize..(i + 1) as usize].to_string().clone();
        let mut lo_char: String = data[(i + 1) as usize..(i + 2) as usize].to_string().clone();
        let mut hi: i64 = hex_value(&hi_char);
        let mut lo: i64 = hex_value(&lo_char);
        if ((hi < 0) || (lo < 0)) {
            panic!("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.");
        }
        out = { let mut _v = out.clone(); _v.push(((hi * 16) + lo)); _v };
        i = (i + 2);
    }
    return out
};
        println!("{}", base16_encode(g_example1.clone().clone()));
        println!("{}", base16_encode(g_example2.clone().clone()));
        println!("{}", base16_encode(vec![]));
        println!("{}", format!("{:?}", base16_decode(&"48656C6C6F20576F726C6421")));
        println!("{}", format!("{:?}", base16_decode(&"48454C4C4F20574F524C4421")));
        println!("{}", format!("{:?}", base16_decode(&"")));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
