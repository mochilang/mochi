// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Keys {
    public_key: Vec<i64>,
    private_key: Vec<i64>,
}
impl std::fmt::Display for Keys {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"public_key\": {:?}", self.public_key)?;
        write!(f, ", ")?;
        write!(f, "\"private_key\": {:?}", self.private_key)?;
        write!(f, "}}")
    }
}

static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        unsafe fn pow2(mut exp: i64) -> i64 {
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        res = (res * 2);
        i = (i + 1);
    }
    return res
};
        unsafe fn next_seed(mut x: i64) -> i64 {
    return (((x * 1103515245) + 12345) % 2147483648)
};
        unsafe fn rand_range(mut min: i64, mut max: i64) -> i64 {
    g_seed = next_seed(g_seed);
    return (min + (g_seed % (max - min)))
};
        unsafe fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    while (y != 0) {
        let mut temp: i64 = (x % y);
        x = y;
        y = temp;
    }
    return x
};
        unsafe fn mod_inverse(mut e: i64, mut phi: i64) -> i64 {
    let mut t: i64 = 0;
    let mut newt: i64 = 1;
    let mut r: i64 = phi;
    let mut newr: i64 = e;
    while (newr != 0) {
        let mut quotient: i64 = (r / newr);
        let mut tmp: i64 = newt;
        newt = (t - (quotient * newt));
        t = tmp;
        let mut tmp_r: i64 = newr;
        newr = (r - (quotient * newr));
        r = tmp_r;
    }
    if (r > 1) {
        return 0
    }
    if (t < 0) {
        t = (t + phi);
    }
    return t
};
        unsafe fn is_prime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    let mut i: i64 = 2;
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn generate_prime(mut bits: i64) -> i64 {
    let mut min: i64 = pow2((bits - 1));
    let mut max: i64 = pow2(bits);
    let mut p: i64 = rand_range(min, max);
    if ((p % 2) == 0) {
        p = (p + 1);
    }
    while !is_prime(p) {
        p = (p + 2);
        if (p >= max) {
            p = (min + 1);
        }
    }
    return p
};
        unsafe fn generate_key(mut bits: i64) -> Keys {
    let mut p: i64 = generate_prime(bits);
    let mut q: i64 = generate_prime(bits);
    let mut n: i64 = (p * q);
    let mut phi: i64 = ((p - 1) * (q - 1));
    let mut e: i64 = rand_range(2, phi);
    while (gcd(e, phi) != 1) {
        e = (e + 1);
        if (e >= phi) {
            e = 2;
        }
    }
    let mut d: i64 = mod_inverse(e, phi);
    return Keys {public_key: vec![n, e], private_key: vec![n, d]}
};
        let mut keys: Keys = generate_key(8);
        let mut r#pub: Vec<i64> = keys.public_key;
        let mut r#priv: Vec<i64> = keys.private_key;
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Public key: (", r#pub[0 as usize].to_string()), ", "), r#pub[1 as usize].to_string()), ")"));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Private key: (", r#priv[0 as usize].to_string()), ", "), r#priv[1 as usize].to_string()), ")"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
