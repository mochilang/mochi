// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_uppercase: String = String::new();
static mut g_lowercase: String = String::new();
fn main() {
    unsafe {
        g_uppercase = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_lowercase = String::from("abcdefghijklmnopqrstuvwxyz").clone();
                let _start: i64 = _now();
        unsafe fn index_of(mut s: String, c: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == c) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn dencrypt(s: &str, mut n: i64) -> String {
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut idx_u: i64 = index_of(g_uppercase.clone(), &ch);
        if (idx_u >= 0) {
            let mut new_idx: i64 = ((idx_u + n) % 26);
            out = format!("{}{}", out, { let tmp = &g_uppercase; tmp.chars().skip(new_idx as usize).take(((new_idx + 1) - new_idx) as usize).collect::<String>() });
        } else {
            let mut idx_l: i64 = index_of(g_lowercase.clone(), &ch);
            if (idx_l >= 0) {
                let mut new_idx: i64 = ((idx_l + n) % 26);
                out = format!("{}{}", out, { let tmp = &g_lowercase; tmp.chars().skip(new_idx as usize).take(((new_idx + 1) - new_idx) as usize).collect::<String>() });
            } else {
                out = format!("{}{}", out, ch);
            }
        }
        i = (i + 1);
    }
    return out.clone()
};
        unsafe fn mochi_main() {
    let mut msg: String = String::from("My secret bank account number is 173-52946 so don't tell anyone!!").clone();
    let mut s: String = dencrypt(&msg, 13).clone();
    println!("{}", s);
    println!("{}", (dencrypt(&s, 13).as_str() == msg.as_str()).to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
