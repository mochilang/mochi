// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_prime: i64 = 0;
fn main() {
    unsafe {
        g_prime = 23;
                let _start: i64 = _now();
        unsafe fn mod_pow(mut base: i64, mut exp: i64, mut r#mod: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = (base % r#mod);
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((result * b) % r#mod);
        }
        e = (e / 2);
        b = ((b * b) % r#mod);
    }
    return result
};
        unsafe fn contains(mut xs: Vec<i64>, mut val: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == val) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn find_primitive(mut modulus: i64) -> i64 {
    let mut r: i64 = 1;
    while (r < modulus) {
        let mut li: Vec<i64> = vec![];
        let mut x: i64 = 0;
        let mut valid: bool = true;
        while ((x < (modulus - 1)) && valid) {
            let mut value: i64 = mod_pow(r, x, modulus);
            if li.contains(&value) {
                valid = false;
            } else {
                li = { let mut _v = li.clone(); _v.push(value); _v };
                x = (x + 1);
            }
        }
        if valid {
            return r
        }
        r = (r + 1);
    }
    return -1
};
        println!("{}", find_primitive(7));
        println!("{}", find_primitive(11));
        println!("{}", find_primitive(8));
        let mut primitive_root: i64 = find_primitive(g_prime);
        if (primitive_root == (0 - 1)) {
            println!("{}", "Cannot find the primitive for the value: -1");
        } else {
            let mut a_private: i64 = 6;
            let mut b_private: i64 = 15;
            let mut a_public: i64 = mod_pow(primitive_root, a_private, g_prime);
            let mut b_public: i64 = mod_pow(primitive_root, b_private, g_prime);
            let mut a_secret: i64 = mod_pow(b_public, a_private, g_prime);
            let mut b_secret: i64 = mod_pow(a_public, b_private, g_prime);
            println!("{}", format!("{}{}", "The key value generated by A is: ", a_secret.to_string()));
            println!("{}", format!("{}{}", "The key value generated by B is: ", b_secret.to_string()));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
