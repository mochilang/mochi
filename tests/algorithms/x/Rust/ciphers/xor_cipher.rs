// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_ascii: String = String::new();
static mut g_sample: String = String::new();
fn main() {
    unsafe {
        g_ascii = String::from(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~").clone();
        g_sample = String::from("hallo welt").clone();
                let _start: i64 = _now();
        unsafe fn xor(mut a: i64, mut b: i64) -> i64 {
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    let mut x: i64 = a;
    let mut y: i64 = b;
    while ((x > 0) || (y > 0)) {
        let mut abit: i64 = (x % 2);
        let mut bbit: i64 = (y % 2);
        if (abit != bbit) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
    }
    return res
};
        unsafe fn ord(ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_ascii.len() as i64)) {
        if (g_ascii.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() == ch) {
            return (32 + i)
        }
        i = (i + 1);
    }
    return 0
};
        unsafe fn chr(mut n: i64) -> String {
    if ((n >= 32) && (n < 127)) {
        return g_ascii.chars().skip((n - 32) as usize).take(((n - 31) - (n - 32)) as usize).collect::<String>()
    }
    return String::from("").clone()
};
        unsafe fn normalize_key(mut key: i64) -> i64 {
    let mut k: i64 = key;
    if (k == 0) {
        k = 1;
    }
    k = (k % 256);
    if (k < 0) {
        k = (k + 256);
    }
    return k
};
        unsafe fn encrypt(content: &str, mut key: i64) -> Vec<String> {
    let mut k: i64 = normalize_key(key);
    let mut result: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (content.len() as i64)) {
        let mut c: i64 = ord(&content[i as usize..(i + 1) as usize].to_string());
        let mut e: i64 = xor(c, k);
        result = { let mut _v = result.clone(); _v.push(chr(e)); _v };
        i = (i + 1);
    }
    return result
};
        unsafe fn encrypt_string(content: &str, mut key: i64) -> String {
    let mut chars: Vec<String> = encrypt(content, key);
    let mut out: String = String::from("").clone();
    for ch in chars.iter().cloned() {
        out = format!("{}{}", out, ch);
    }
    return out.clone()
};
        let mut enc: String = encrypt_string(&g_sample, 1).clone();
        let mut dec: String = encrypt_string(&enc, 1).clone();
        println!("{}", format!("{:?}", encrypt(&g_sample, 1)));
        println!("{}", enc);
        println!("{}", dec);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
