// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_ASCII_UPPERCASE: String = String::new();
static mut g_ASCII_LOWERCASE: String = String::new();
fn main() {
    unsafe {
        g_ASCII_UPPERCASE = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_ASCII_LOWERCASE = String::from("abcdefghijklmnopqrstuvwxyz").clone();
                let _start: i64 = _now();
        let mut NEG_ONE: i64 = (0 - 1);
        let index_of = move |s: String, ch: &str| -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return NEG_ONE
};
        let to_uppercase = move |s: &str| -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut idx: i64 = index_of(g_ASCII_LOWERCASE.clone(), &ch);
        if (idx == NEG_ONE) {
            result = format!("{}{}", result, ch);
        } else {
            result = format!("{}{}", result, { let tmp = &g_ASCII_UPPERCASE; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() });
        }
        i = (i + 1);
    }
    return result.clone()
};
        let gronsfeld = move |text: &str, key: &str| -> String {
    let mut ascii_len = (g_ASCII_UPPERCASE.len() as i64);
    let mut key_len = (key.len() as i64);
    if (key_len == 0) {
        panic!("integer modulo by zero");
    }
    let mut upper_text: String = to_uppercase(&text).clone();
    let mut encrypted: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (upper_text.len() as i64)) {
        let mut ch: String = { let tmp = &upper_text; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut idx: i64 = index_of(g_ASCII_UPPERCASE.clone(), &ch);
        if (idx == NEG_ONE) {
            encrypted = format!("{}{}", encrypted, ch);
        } else {
            let mut key_idx: i64 = (i % key_len);
            let mut shift = { let n: i64 = { let tmp = &key; tmp.chars().skip(key_idx as usize).take(((key_idx + 1) - key_idx) as usize).collect::<String>() }.parse().unwrap(); n };
            let mut new_position: i64 = ((idx + shift) % ascii_len);
            encrypted = format!("{}{}", encrypted, { let tmp = &g_ASCII_UPPERCASE; tmp.chars().skip(new_position as usize).take(((new_position + 1) - new_position) as usize).collect::<String>() });
        }
        i = (i + 1);
    }
    return encrypted.clone()
};
        println!("{}", gronsfeld(&"hello", &"412"));
        println!("{}", gronsfeld(&"hello", &"123"));
        println!("{}", gronsfeld(&"", &"123"));
        println!("{}", gronsfeld(&"yes, ¥€$ - _!@#%?", &"0"));
        println!("{}", gronsfeld(&"yes, ¥€$ - _!@#%?", &"01"));
        println!("{}", gronsfeld(&"yes, ¥€$ - _!@#%?", &"012"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
