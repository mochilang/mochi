// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_CHARS: Vec<String> = Vec::new();
static mut g_CODES: Vec<String> = Vec::new();
static mut g_msg: String = String::new();
fn main() {
    unsafe {
        g_CHARS = vec![String::from("A").clone(), String::from("B").clone(), String::from("C").clone(), String::from("D").clone(), String::from("E").clone(), String::from("F").clone(), String::from("G").clone(), String::from("H").clone(), String::from("I").clone(), String::from("J").clone(), String::from("K").clone(), String::from("L").clone(), String::from("M").clone(), String::from("N").clone(), String::from("O").clone(), String::from("P").clone(), String::from("Q").clone(), String::from("R").clone(), String::from("S").clone(), String::from("T").clone(), String::from("U").clone(), String::from("V").clone(), String::from("W").clone(), String::from("X").clone(), String::from("Y").clone(), String::from("Z").clone(), String::from("1").clone(), String::from("2").clone(), String::from("3").clone(), String::from("4").clone(), String::from("5").clone(), String::from("6").clone(), String::from("7").clone(), String::from("8").clone(), String::from("9").clone(), String::from("0").clone(), String::from("&").clone(), String::from("@").clone(), String::from(":").clone(), String::from(",").clone(), String::from(".").clone(), String::from("'").clone(), String::from("\"").clone(), String::from("?").clone(), String::from("/").clone(), String::from("=").clone(), String::from("+").clone(), String::from("-").clone(), String::from("(").clone(), String::from(")").clone(), String::from("!").clone(), String::from(" ").clone()];
        g_CODES = vec![String::from(".-").clone(), String::from("-...").clone(), String::from("-.-.").clone(), String::from("-..").clone(), String::from(".").clone(), String::from("..-.").clone(), String::from("--.").clone(), String::from("....").clone(), String::from("..").clone(), String::from(".---").clone(), String::from("-.-").clone(), String::from(".-..").clone(), String::from("--").clone(), String::from("-.").clone(), String::from("---").clone(), String::from(".--.").clone(), String::from("--.-").clone(), String::from(".-.").clone(), String::from("...").clone(), String::from("-").clone(), String::from("..-").clone(), String::from("...-").clone(), String::from(".--").clone(), String::from("-..-").clone(), String::from("-.--").clone(), String::from("--..").clone(), String::from(".----").clone(), String::from("..---").clone(), String::from("...--").clone(), String::from("....-").clone(), String::from(".....").clone(), String::from("-....").clone(), String::from("--...").clone(), String::from("---..").clone(), String::from("----.").clone(), String::from("-----").clone(), String::from(".-...").clone(), String::from(".--.-.").clone(), String::from("---...").clone(), String::from("--..--").clone(), String::from(".-.-.-").clone(), String::from(".----.").clone(), String::from(".-..-.").clone(), String::from("..--..").clone(), String::from("-..-.").clone(), String::from("-...-").clone(), String::from(".-.-.").clone(), String::from("-....-").clone(), String::from("-.--.").clone(), String::from("-.--.-").clone(), String::from("-.-.--").clone(), String::from("/").clone()];
        g_msg = String::from("Morse code here!").clone();
                let _start: i64 = _now();
        unsafe fn to_upper_char(c: &str) -> String {
    if (c == "a") {
        return String::from("A")
    }
    if (c == "b") {
        return String::from("B")
    }
    if (c == "c") {
        return String::from("C")
    }
    if (c == "d") {
        return String::from("D")
    }
    if (c == "e") {
        return String::from("E")
    }
    if (c == "f") {
        return String::from("F")
    }
    if (c == "g") {
        return String::from("G")
    }
    if (c == "h") {
        return String::from("H")
    }
    if (c == "i") {
        return String::from("I")
    }
    if (c == "j") {
        return String::from("J")
    }
    if (c == "k") {
        return String::from("K")
    }
    if (c == "l") {
        return String::from("L")
    }
    if (c == "m") {
        return String::from("M")
    }
    if (c == "n") {
        return String::from("N")
    }
    if (c == "o") {
        return String::from("O")
    }
    if (c == "p") {
        return String::from("P")
    }
    if (c == "q") {
        return String::from("Q")
    }
    if (c == "r") {
        return String::from("R")
    }
    if (c == "s") {
        return String::from("S")
    }
    if (c == "t") {
        return String::from("T")
    }
    if (c == "u") {
        return String::from("U")
    }
    if (c == "v") {
        return String::from("V")
    }
    if (c == "w") {
        return String::from("W")
    }
    if (c == "x") {
        return String::from("X")
    }
    if (c == "y") {
        return String::from("Y")
    }
    if (c == "z") {
        return String::from("Z")
    }
    return c.to_string().clone()
};
        unsafe fn to_upper(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        res = format!("{}{}", res, to_upper_char(&s.chars().nth(i as usize).unwrap().to_string()));
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn index_of(mut xs: Vec<String>, target: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == target) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn encrypt(message: &str) -> String {
    let mut msg: String = to_upper(message).clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (msg.len() as i64)) {
        let mut c: String = msg.chars().nth(i as usize).unwrap().to_string().clone();
        let mut idx: i64 = index_of(g_CHARS.clone().clone(), &c);
        if (idx >= 0) {
            if (res.as_str() != "") {
                res = format!("{}{}", res, " ");
            }
            res = format!("{}{}", res, g_CODES.clone()[idx as usize].clone());
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn split_spaces(s: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() == " ") {
            if (current.as_str() != "") {
                res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
                current = String::from("");
            }
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    if (current.as_str() != "") {
        res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    }
    return res
};
        unsafe fn decrypt(message: &str) -> String {
    let mut parts: Vec<String> = split_spaces(message);
    let mut res: String = String::from("").clone();
    for code in parts.iter().cloned() {
        let mut idx: i64 = index_of(g_CODES.clone().clone(), &code);
        if (idx >= 0) {
            res = format!("{}{}", res, g_CHARS.clone()[idx as usize].clone());
        }
    }
    return res.clone()
};
        println!("{}", g_msg);
        let mut enc: String = encrypt(&g_msg).clone();
        println!("{}", enc);
        let mut dec: String = decrypt(&enc).clone();
        println!("{}", dec);
        println!("{}", encrypt(&"Sos!"));
        println!("{}", decrypt(&"... --- ... -.-.--"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
