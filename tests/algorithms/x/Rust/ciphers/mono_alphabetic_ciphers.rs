// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LETTERS: String = String::new();
fn main() {
    unsafe {
        g_LETTERS = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
                let _start: i64 = _now();
        unsafe fn find_char(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn encrypt_message(key: &str, message: &str) -> String {
    let mut chars_a: String = key.to_string().clone();
    let mut chars_b: String = g_LETTERS.clone();
    let mut translated: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut symbol: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        let mut upper_sym: String = (symbol.to_uppercase()).clone();
        let mut sym_index: i64 = find_char(&chars_a, &upper_sym);
        if (sym_index >= 0) {
            let mut sub_char: String = chars_b.chars().nth(sym_index as usize).unwrap().to_string().clone();
            if (symbol.as_str() == upper_sym.as_str()) {
                translated = format!("{}{}", translated, (sub_char.to_uppercase()));
            } else {
                translated = format!("{}{}", translated, (sub_char.to_lowercase()));
            }
        } else {
            translated = format!("{}{}", translated, symbol);
        }
        i = (i + 1);
    }
    return translated.clone()
};
        unsafe fn decrypt_message(key: &str, message: &str) -> String {
    let mut chars_a: String = g_LETTERS.clone();
    let mut chars_b: String = key.to_string().clone();
    let mut translated: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (message.len() as i64)) {
        let mut symbol: String = message.chars().nth(i as usize).unwrap().to_string().clone();
        let mut upper_sym: String = (symbol.to_uppercase()).clone();
        let mut sym_index: i64 = find_char(&chars_a, &upper_sym);
        if (sym_index >= 0) {
            let mut sub_char: String = chars_b.chars().nth(sym_index as usize).unwrap().to_string().clone();
            if (symbol.as_str() == upper_sym.as_str()) {
                translated = format!("{}{}", translated, (sub_char.to_uppercase()));
            } else {
                translated = format!("{}{}", translated, (sub_char.to_lowercase()));
            }
        } else {
            translated = format!("{}{}", translated, symbol);
        }
        i = (i + 1);
    }
    return translated.clone()
};
        unsafe fn mochi_main() {
    let mut message: String = String::from("Hello World").clone();
    let mut key: String = String::from("QWERTYUIOPASDFGHJKLZXCVBNM").clone();
    let mut mode: String = String::from("decrypt").clone();
    let mut translated: String = String::from("").clone();
    if (mode.as_str() == "encrypt") {
        translated = encrypt_message(&key, &message);
    } else {
        if (mode.as_str() == "decrypt") {
            translated = decrypt_message(&key, &message);
        }
    }
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Using the key ", key), ", the "), mode), "ed message is: "), translated));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
