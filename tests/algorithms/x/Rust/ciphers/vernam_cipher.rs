// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_plaintext: String = String::new();
static mut g_key: String = String::new();
fn main() {
    unsafe {
        g_plaintext = String::from("HELLO").clone();
        g_key = String::from("KEY").clone();
                let _start: i64 = _now();
        unsafe fn indexOf(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn ord(ch: &str) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut idx = { let s = upper.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (65 + idx)
    }
    return 0
};
        unsafe fn chr(mut n: i64) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    if ((n >= 65) && (n < 91)) {
        return { let tmp = &upper; tmp.chars().skip((n - 65) as usize).take(((n - 64) - (n - 65)) as usize).collect::<String>() }
    }
    return String::from("?").clone()
};
        unsafe fn vernam_encrypt(plaintext: &str, key: &str) -> String {
    let mut ciphertext: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (plaintext.len() as i64)) {
        let mut p: i64 = (ord(&{ let tmp = &plaintext; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }) - 65);
        let mut k: i64 = (ord(&{ let tmp = &key; tmp.chars().skip((i % (key.len() as i64)) as usize).take((((i % (key.len() as i64)) + 1) - (i % (key.len() as i64))) as usize).collect::<String>() }) - 65);
        let mut ct: i64 = (p + k);
        while (ct > 25) {
            ct = (ct - 26);
        }
        ciphertext = format!("{}{}", ciphertext, chr((ct + 65)));
        i = (i + 1);
    }
    return ciphertext.clone()
};
        unsafe fn vernam_decrypt(ciphertext: &str, key: &str) -> String {
    let mut decrypted: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (ciphertext.len() as i64)) {
        let mut c: i64 = ord(&{ let tmp = &ciphertext; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() });
        let mut k: i64 = ord(&{ let tmp = &key; tmp.chars().skip((i % (key.len() as i64)) as usize).take((((i % (key.len() as i64)) + 1) - (i % (key.len() as i64))) as usize).collect::<String>() });
        let mut val: i64 = (c - k);
        while (val < 0) {
            val = (val + 26);
        }
        decrypted = format!("{}{}", decrypted, chr((val + 65)));
        i = (i + 1);
    }
    return decrypted.clone()
};
        let mut encrypted: String = vernam_encrypt(&g_plaintext, &g_key).clone();
        let mut decrypted: String = vernam_decrypt(&encrypted, &g_key).clone();
        println!("{}", format!("{}{}", "Plaintext: ", g_plaintext));
        println!("{}", format!("{}{}", "Encrypted: ", encrypted));
        println!("{}", format!("{}{}", "Decrypted: ", decrypted));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
