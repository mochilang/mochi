// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn join_strings(mut xs: Vec<String>) -> String {
    let mut res: String = String::from("");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        res = format!("{}{}", res, xs[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
    fn encrypt_message(mut key: i64, mut message: String) -> String {
    let mut result: String = String::from("");
    let mut col: i64 = 0;
    while (col < key) {
        let mut pointer: i64 = col;
        while (pointer < (message.len() as i64)) {
            result = format!("{}{}", result, { let tmp = &message; tmp.chars().skip(pointer as usize).take(((pointer + 1) - pointer) as usize).collect::<String>() });
            pointer = (pointer + key);
        }
        col = (col + 1);
    }
    return result.clone()
};
    fn decrypt_message(mut key: i64, mut message: String) -> String {
    let mut num_cols: i64 = ((((message.len() as i64) + key) - 1) / key);
    let mut num_rows: i64 = key;
    let mut num_shaded_boxes: i64 = ((num_cols * num_rows) - (message.len() as i64));
    let mut plain_text: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < num_cols) {
        plain_text = { let mut _v = plain_text.clone(); _v.push("".to_string()); _v };
        i = (i + 1);
    }
    let mut col: i64 = 0;
    let mut row: i64 = 0;
    let mut index: i64 = 0;
    while (index < (message.len() as i64)) {
        plain_text[col as usize] = format!("{}{}", plain_text[col as usize].clone(), { let tmp = &message; tmp.chars().skip(index as usize).take(((index + 1) - index) as usize).collect::<String>() });
        col = (col + 1);
        if ((col == num_cols) || ((col == (num_cols - 1)) && (row >= (num_rows - num_shaded_boxes)))) {
            col = 0;
            row = (row + 1);
        }
        index = (index + 1);
    }
    return join_strings(plain_text.clone()).clone()
};
    fn mochi_main() {
    println!("{}", "Enter message: ");
    let mut message: String = input().clone();
    let mut max_key: i64 = ((message.len() as i64) - 1);
    println!("{}", format!("{}{}", format!("{}{}", "Enter key [2-", max_key.to_string()), "]: "));
    let mut key: i64 = { let n: i64 = input().parse().unwrap(); n };
    println!("{}", "Encryption/Decryption [e/d]: ");
    let mut mode: String = input().clone();
    let mut text: String = String::from("");
    let mut first: String = { let tmp = &mode; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
    if ((first.as_str() == "e") || (first.as_str() == "E")) {
        text = encrypt_message(key, message.clone());
    } else if ((first.as_str() == "d") || (first.as_str() == "D")) {
        text = decrypt_message(key, message.clone());
    }
    println!("{}", format!("{}{}", format!("{}{}", "Output:\n", text), "|"));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
