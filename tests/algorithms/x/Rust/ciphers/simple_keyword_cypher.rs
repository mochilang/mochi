// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn index_in_string(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn contains_char(mut s: String, mut ch: String) -> bool {
    return (index_in_string(&s, &ch) >= 0)
};
    fn is_alpha(mut ch: String) -> bool {
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    return (contains_char(lower.clone(), ch.clone()) || contains_char(upper.clone(), ch.clone()))
};
    fn to_upper(s: &str) -> String {
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        let mut idx: i64 = index_in_string(&lower, &ch);
        if (idx >= 0) {
            res = format!("{}{}", res, upper.chars().nth(idx as usize).unwrap().to_string());
        } else {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn remove_duplicates(key: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (key.len() as i64)) {
        let mut ch: String = key.chars().nth(i as usize).unwrap().to_string().clone();
        if ((ch.as_str() == " ") || (is_alpha(ch.clone()) && (contains_char(res.clone(), ch.clone()) == false))) {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn create_cipher_map(key: &str) -> Vec<String> {
    let mut alphabet: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut cleaned: String = remove_duplicates(&to_upper(key)).clone();
    let mut cipher: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (cleaned.len() as i64)) {
        cipher = { let mut _v = cipher.clone(); _v.push(cleaned.chars().nth(i as usize).unwrap().to_string()); _v };
        i = (i + 1);
    }
    let mut offset = (cleaned.len() as i64);
    let mut j = (cipher.len() as i64);
    while (j < 26) {
        let mut char: String = alphabet.chars().nth((j - offset) as usize).unwrap().to_string().clone();
        while contains_char(cleaned.clone(), char.clone()) {
            offset = (offset - 1);
            char = alphabet.chars().nth((j - offset) as usize).unwrap().to_string();
        }
        cipher = { let mut _v = cipher.clone(); _v.push(char.clone()); _v };
        j = (j + 1);
    }
    return cipher
};
    fn index_in_list(mut lst: Vec<String>, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        if (lst[i as usize].clone() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn encipher(message: &str, mut cipher: Vec<String>) -> String {
    let mut alphabet: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut msg: String = to_upper(message).clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (msg.len() as i64)) {
        let mut ch: String = msg.chars().nth(i as usize).unwrap().to_string().clone();
        let mut idx: i64 = index_in_string(&alphabet, &ch);
        if (idx >= 0) {
            res = format!("{}{}", res, cipher[idx as usize].clone());
        } else {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn decipher(message: &str, mut cipher: Vec<String>) -> String {
    let mut alphabet: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut msg: String = to_upper(message).clone();
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (msg.len() as i64)) {
        let mut ch: String = msg.chars().nth(i as usize).unwrap().to_string().clone();
        let mut idx: i64 = index_in_list(cipher.clone(), &ch);
        if (idx >= 0) {
            res = format!("{}{}", res, alphabet.chars().nth(idx as usize).unwrap().to_string());
        } else {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
    let mut cipher_map: Vec<String> = create_cipher_map(&"Goodbye!!");
    let mut encoded: String = encipher(&"Hello World!!", cipher_map.clone()).clone();
    println!("{}", encoded);
    println!("{}", decipher(&encoded, cipher_map.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
