// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_key: i64 = 0;
static mut g_message: String = String::new();
fn main() {
    unsafe {
        g_key = 6;
        g_message = String::from("Harshil Darji").clone();
                let _start: i64 = _now();
        unsafe fn encrypt_message(mut key: i64, message: &str) -> String {
    let mut result: String = String::from("").clone();
    let mut col: i64 = 0;
    while (col < key) {
        let mut pointer: i64 = col;
        while (pointer < (message.len() as i64)) {
            result = format!("{}{}", result, message.chars().nth(pointer as usize).unwrap().to_string());
            pointer = (pointer + key);
        }
        col = (col + 1);
    }
    return result.clone()
};
        unsafe fn decrypt_message(mut key: i64, message: &str) -> String {
    let mut msg_len = (message.len() as i64);
    let mut num_cols: i64 = (msg_len / key);
    if ((msg_len % key) != 0) {
        num_cols = (num_cols + 1);
    }
    let mut num_rows: i64 = key;
    let mut num_shaded_boxes: i64 = ((num_cols * num_rows) - msg_len);
    let mut plain: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < num_cols) {
        plain = { let mut _v = plain.clone(); _v.push("".to_string()); _v };
        i = (i + 1);
    }
    let mut col: i64 = 0;
    let mut row: i64 = 0;
    let mut idx: i64 = 0;
    while (idx < msg_len) {
        let mut ch: String = message.chars().nth(idx as usize).unwrap().to_string().clone();
        plain[col as usize] = format!("{}{}", plain[col as usize].clone(), ch);
        col = (col + 1);
        if ((col == num_cols) || ((col == (num_cols - 1)) && (row >= (num_rows - num_shaded_boxes)))) {
            col = 0;
            row = (row + 1);
        }
        idx = (idx + 1);
    }
    let mut result: String = String::from("").clone();
    i = 0;
    while (i < num_cols) {
        result = format!("{}{}", result, plain[i as usize].clone());
        i = (i + 1);
    }
    return result.clone()
};
        let mut encrypted: String = encrypt_message(g_key, &g_message).clone();
        println!("{}", encrypted);
        let mut decrypted: String = decrypt_message(g_key, &encrypted).clone();
        println!("{}", decrypted);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
