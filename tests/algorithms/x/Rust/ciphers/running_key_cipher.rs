// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_key: String = String::new();
static mut g_plaintext: String = String::new();
fn main() {
    unsafe {
        g_key = String::from("How does the duck know that? said Victor").clone();
        g_plaintext = String::from("DEFEND THIS").clone();
                let _start: i64 = _now();
        unsafe fn indexOf(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut idx = { let s = upper.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = { let s = lower.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (97 + idx)
    }
    return 0
};
        unsafe fn chr(mut n: i64) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    if ((n >= 65) && (n < 91)) {
        return upper.chars().skip((n - 65) as usize).take(((n - 64) - (n - 65)) as usize).collect::<String>()
    }
    if ((n >= 97) && (n < 123)) {
        return lower.chars().skip((n - 97) as usize).take(((n - 96) - (n - 97)) as usize).collect::<String>()
    }
    return String::from("?").clone()
};
        unsafe fn clean_text(s: &str) -> String {
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((ch.as_str() >= "A") && (ch.as_str() <= "Z")) {
            out = format!("{}{}", out, ch);
        } else if ((ch.as_str() >= "a") && (ch.as_str() <= "z")) {
            out = format!("{}{}", out, chr((ord(ch.clone()) - 32)));
        }
        i = (i + 1);
    }
    return out.clone()
};
        unsafe fn running_key_encrypt(key: &str, plaintext: &str) -> String {
    let mut pt: String = clean_text(plaintext).clone();
    let mut k: String = clean_text(key).clone();
    let mut key_len = (k.len() as i64);
    let mut res: String = String::from("").clone();
    let mut ord_a: i64 = ord(String::from("A"));
    let mut i: i64 = 0;
    while (i < (pt.len() as i64)) {
        let mut p: i64 = (ord(pt.chars().nth(i as usize).unwrap().to_string()) - ord_a);
        let mut kv: i64 = (ord(k.chars().nth((i % key_len) as usize).unwrap().to_string()) - ord_a);
        let mut c: i64 = ((p + kv) % 26);
        res = format!("{}{}", res, chr((c + ord_a)));
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn running_key_decrypt(key: &str, ciphertext: &str) -> String {
    let mut ct: String = clean_text(ciphertext).clone();
    let mut k: String = clean_text(key).clone();
    let mut key_len = (k.len() as i64);
    let mut res: String = String::from("").clone();
    let mut ord_a: i64 = ord(String::from("A"));
    let mut i: i64 = 0;
    while (i < (ct.len() as i64)) {
        let mut c: i64 = (ord(ct.chars().nth(i as usize).unwrap().to_string()) - ord_a);
        let mut kv: i64 = (ord(k.chars().nth((i % key_len) as usize).unwrap().to_string()) - ord_a);
        let mut p: i64 = (((c - kv) + 26) % 26);
        res = format!("{}{}", res, chr((p + ord_a)));
        i = (i + 1);
    }
    return res.clone()
};
        let mut ciphertext: String = running_key_encrypt(&g_key, &g_plaintext).clone();
        println!("{}", ciphertext);
        println!("{}", running_key_decrypt(&g_key, &ciphertext));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
