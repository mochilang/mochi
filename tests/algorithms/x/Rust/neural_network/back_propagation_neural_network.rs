// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Layer {
    units: i64,
    weight: Vec<Vec<f64>>,
    bias: Vec<f64>,
    output: Vec<f64>,
    xdata: Vec<f64>,
    learn_rate: f64,
}
impl std::fmt::Display for Layer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"units\": {}", self.units)?;
        write!(f, ", ")?;
        write!(f, "\"weight\": {:?}", self.weight)?;
        write!(f, ", ")?;
        write!(f, "\"bias\": {:?}", self.bias)?;
        write!(f, ", ")?;
        write!(f, "\"output\": {:?}", self.output)?;
        write!(f, ", ")?;
        write!(f, "\"xdata\": {:?}", self.xdata)?;
        write!(f, ", ")?;
        write!(f, "\"learn_rate\": {}", self.learn_rate)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Data {
    x: Vec<Vec<f64>>,
    y: Vec<Vec<f64>>,
}
impl std::fmt::Display for Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {:?}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {:?}", self.y)?;
        write!(f, "}}")
    }
}

static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return unsafe { g_seed.clone() }
};
        fn random() -> f64 {
    return ((1.0 * (rand() as f64)) / 2147483648.0)
};
        fn expApprox(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut is_neg: bool = false;
    if (x < 0.0) {
        is_neg = true;
        y = -x;
    }
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 30) {
        term = ((term * y) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    if is_neg {
        return (1.0 / sum)
    }
    return sum
};
        fn sigmoid(mut z: f64) -> f64 {
    return (1.0 / (1.0 + expApprox(-z)))
};
        fn sigmoid_vec(mut v: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(sigmoid(v[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
        fn sigmoid_derivative(mut out: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (out.len() as i64)) {
        let val: f64 = out[i as usize];
        res = { let mut _v = res.clone(); _v.push((val * (1.0 - val))); _v };
        i = (i + 1);
    }
    return res
};
        fn random_vector(mut n: i64) -> Vec<f64> {
    let mut v: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        v = { let mut _v = v.clone(); _v.push((random() - 0.5)); _v };
        i = (i + 1);
    }
    return v
};
        fn random_matrix(mut r: i64, mut c: i64) -> Vec<Vec<f64>> {
    let mut m: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < r) {
        m = { let mut _v = m.clone(); _v.push(random_vector(c)); _v };
        i = (i + 1);
    }
    return m
};
        fn matvec(mut mat: Vec<Vec<f64>>, mut vec: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut s: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < (vec.len() as i64)) {
            s = (s + (mat[i as usize].clone()[j as usize] * vec[j as usize]));
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(s); _v };
        i = (i + 1);
    }
    return res
};
        fn matTvec(mut mat: Vec<Vec<f64>>, mut vec: Vec<f64>) -> Vec<f64> {
    let mut cols: i64 = (mat[0 as usize].clone().len() as i64);
    let mut res: Vec<f64> = vec![];
    let mut j: i64 = 0;
    while (j < cols) {
        let mut s: f64 = 0.0;
        let mut i: i64 = 0;
        while (i < (mat.len() as i64)) {
            s = (s + (mat[i as usize].clone()[j as usize] * vec[i as usize]));
            i = (i + 1);
        }
        res = { let mut _v = res.clone(); _v.push(s); _v };
        j = (j + 1);
    }
    return res
};
        fn vec_sub(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((a[i as usize] - b[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
        fn vec_mul(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((a[i as usize] * b[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
        fn vec_scalar_mul(mut v: Vec<f64>, mut s: f64) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((v[i as usize] * s)); _v };
        i = (i + 1);
    }
    return res
};
        fn outer(mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (b.len() as i64)) {
            row = { let mut _v = row.clone(); _v.push((a[i as usize] * b[j as usize])); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
        fn mat_scalar_mul(mut mat: Vec<Vec<f64>>, mut s: f64) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (mat[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push((mat[i as usize].clone()[j as usize] * s)); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
        fn mat_sub(mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (a[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push((a[i as usize].clone()[j as usize] - b[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
        fn init_layer(mut units: i64, mut back_units: i64, mut lr: f64) -> Layer {
    return Layer {units: units, weight: random_matrix(units, back_units), bias: random_vector(units), output: vec![], xdata: vec![], learn_rate: lr}
};
        fn forward(mut layers: Vec<Layer>, mut x: Vec<f64>) -> Vec<Layer> {
    let mut data: Vec<f64> = x.clone();
    let mut i: i64 = 0;
    while (i < (layers.len() as i64)) {
        let mut layer: Layer = layers[i as usize].clone();
        layer.xdata = data.clone();
        if (i == 0) {
            layer.output = data.clone();
        } else {
            let z: Vec<f64> = vec_sub(matvec(layer.weight.clone().clone(), data.clone()), layer.bias.clone().clone());
            layer.output = sigmoid_vec(z.clone());
            data = layer.output.clone();
        }
        layers[i as usize] = layer.clone();
        i = (i + 1);
    }
    return layers
};
        fn backward(mut layers: Vec<Layer>, mut grad: Vec<f64>) -> Vec<Layer> {
    let mut g: Vec<f64> = grad.clone();
    let mut i: i64 = ((layers.len() as i64) - 1);
    while (i > 0) {
        let mut layer: Layer = layers[i as usize].clone();
        let deriv: Vec<f64> = sigmoid_derivative(layer.output.clone().clone());
        let delta: Vec<f64> = vec_mul(g.clone(), deriv.clone());
        let grad_w: Vec<Vec<f64>> = outer(delta.clone(), layer.xdata.clone().clone());
        layer.weight = mat_sub(layer.weight.clone().clone(), mat_scalar_mul(grad_w.clone(), layer.learn_rate));
        layer.bias = vec_sub(layer.bias.clone().clone(), vec_scalar_mul(delta.clone(), layer.learn_rate));
        g = matTvec(layer.weight.clone().clone(), delta.clone());
        layers[i as usize] = layer.clone();
        i = (i - 1);
    }
    return layers
};
        fn calc_loss(mut y: Vec<f64>, mut yhat: Vec<f64>) -> f64 {
    let mut s: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (y.len() as i64)) {
        let d: f64 = (y[i as usize] - yhat[i as usize]);
        s = (s + (d * d));
        i = (i + 1);
    }
    return s
};
        fn calc_gradient(mut y: Vec<f64>, mut yhat: Vec<f64>) -> Vec<f64> {
    let mut g: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (y.len() as i64)) {
        g = { let mut _v = g.clone(); _v.push((2.0 * (yhat[i as usize] - y[i as usize]))); _v };
        i = (i + 1);
    }
    return g
};
        fn train(mut layers: Vec<Layer>, mut xdata: Vec<Vec<f64>>, mut ydata: Vec<Vec<f64>>, mut rounds: i64, mut acc: f64) -> f64 {
    let mut r: i64 = 0;
    while (r < rounds) {
        let mut i: i64 = 0;
        while (i < (xdata.len() as i64)) {
            layers = forward(layers.clone(), xdata[i as usize].clone());
            let out: Vec<f64> = layers[((layers.len() as i64) - 1) as usize].clone().output.clone();
            let grad: Vec<f64> = calc_gradient(ydata[i as usize].clone(), out.clone());
            layers = backward(layers.clone(), grad.clone());
            i = (i + 1);
        }
        r = (r + 1);
    }
    return 0.0
};
        fn create_data() -> Data {
    let mut x: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < 10) {
        x = { let mut _v = x.clone(); _v.push(random_vector(10)); _v };
        i = (i + 1);
    }
    let y: Vec<Vec<f64>> = vec![vec![0.8, 0.4].clone(), vec![0.4, 0.3].clone(), vec![0.34, 0.45].clone(), vec![0.67, 0.32].clone(), vec![0.88, 0.67].clone(), vec![0.78, 0.77].clone(), vec![0.55, 0.66].clone(), vec![0.55, 0.43].clone(), vec![0.54, 0.1].clone(), vec![0.1, 0.5].clone()];
    return Data {x: x, y: y}
};
        fn mochi_main() {
    let data: Data = create_data();
    let x: Vec<Vec<f64>> = data.x.clone();
    let y: Vec<Vec<f64>> = data.y.clone();
    let mut layers: Vec<Layer> = vec![];
    layers = { let mut _v = layers.clone(); _v.push(init_layer(10, 0, 0.3)); _v };
    layers = { let mut _v = layers.clone(); _v.push(init_layer(20, 10, 0.3)); _v };
    layers = { let mut _v = layers.clone(); _v.push(init_layer(30, 20, 0.3)); _v };
    layers = { let mut _v = layers.clone(); _v.push(init_layer(2, 30, 0.3)); _v };
    let final_mse: f64 = train(layers.clone(), x.clone(), y.clone(), 100, 0.01);
    println!("{}", format!("{:?}", final_mse));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
