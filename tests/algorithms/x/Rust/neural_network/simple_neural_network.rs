// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 1;
static g_INITIAL_VALUE: f64 = 0.02;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return unsafe { g_seed.clone() }
};
        let mut randint = |mut low: i64, mut high: i64| -> i64 {
    return ((rand() % ((high - low) + 1)) + low)
};
        fn expApprox(mut x: f64) -> f64 {
    let mut y: f64 = x;
    let mut is_neg: bool = false;
    if (x < 0.0) {
        is_neg = true;
        y = -x;
    }
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 30) {
        term = ((term * y) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    if is_neg {
        return (1.0 / sum)
    }
    return sum
};
        let mut sigmoid = |mut x: f64| -> f64 {
    return (1.0 / (1.0 + expApprox(-x)))
};
        fn sigmoid_derivative(mut sig_val: f64) -> f64 {
    return (sig_val * (1.0 - sig_val))
};
        let mut forward_propagation = |mut expected: i64, mut number_propagations: i64| -> f64 {
    let mut weight: f64 = ((2.0 * (randint(1, 100) as f64)) - 1.0);
    let mut layer_1: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < number_propagations) {
        layer_1 = sigmoid((unsafe { g_INITIAL_VALUE.clone() } * weight));
        let layer_1_error: f64 = (((expected as f64) / 100.0) - layer_1);
        let layer_1_delta: f64 = (layer_1_error * sigmoid_derivative(layer_1));
        weight = (weight + (unsafe { g_INITIAL_VALUE.clone() } * layer_1_delta));
        i = (i + 1);
    }
    return (layer_1 * 100.0)
};
        unsafe { g_seed = 1 };
        let result: f64 = forward_propagation(32, 450000);
        println!("{}", format!("{:?}", result));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
