// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exp_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: f64 = 1.0;
    while (i < 20.0) {
        term = ((term * x) / i);
        sum = (sum + term);
        i = (i + 1.0);
    }
    return sum
};
    let mut sigmoid = |mut vector: Vec<f64>| -> Vec<f64> {
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (vector.len() as i64)) {
        let x: f64 = vector[i as usize];
        let value: f64 = (1.0 / (1.0 + exp_taylor(-x)));
        result = { let mut _v = result.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return result
};
    let mut gaussian_error_linear_unit = |mut vector: Vec<f64>| -> Vec<f64> {
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (vector.len() as i64)) {
        let x: f64 = vector[i as usize];
        let gelu: f64 = (x * (1.0 / (1.0 + exp_taylor((-1.702 * x)))));
        result = { let mut _v = result.clone(); _v.push(gelu); _v };
        i = (i + 1);
    }
    return result
};
    let sample: Vec<f64> = vec![-1.0, 1.0, 2.0];
    println!("{}", { let tmp = sigmoid(sample.clone()).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = gaussian_error_linear_unit(sample.clone()).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    println!("{}", { let tmp = gaussian_error_linear_unit(vec![-3.0]).clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
