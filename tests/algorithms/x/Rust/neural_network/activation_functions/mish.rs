// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exp_approx(mut x: f64) -> f64 {
    let mut neg: bool = false;
    let mut y: f64 = x;
    if (x < 0.0) {
        neg = true;
        y = -x;
    }
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n < 30) {
        term = ((term * y) / (n as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    if neg {
        return (1.0 / sum)
    }
    return sum
};
    fn ln_series(mut x: f64) -> f64 {
    let t: f64 = ((x - 1.0) / (x + 1.0));
    let mut term: f64 = t;
    let mut acc: f64 = 0.0;
    let mut n: i64 = 1;
    while (n <= 19) {
        acc = (acc + (term / (n as f64)));
        term = ((term * t) * t);
        n = (n + 2);
    }
    return (2.0 * acc)
};
    fn ln(mut x: f64) -> f64 {
    return x.ln()
};
    let mut softplus = |mut x: f64| -> f64 {
    return ln((1.0 + exp_approx(x)))
};
    let mut tanh_approx = |mut x: f64| -> f64 {
    return ((2.0 / (1.0 + exp_approx((-2.0 * x)))) - 1.0)
};
    let mut mish = |mut vector: Vec<f64>| -> Vec<f64> {
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (vector.len() as i64)) {
        let x: f64 = vector[i as usize];
        let sp: f64 = softplus(x);
        let y: f64 = (x * tanh_approx(sp));
        result = { let mut _v = result.clone(); _v.push(y); _v };
        i = (i + 1);
    }
    return result
};
    let mut mochi_main = || {
    let v1: Vec<f64> = vec![2.3, 0.6, -2.0, -3.8];
    let v2: Vec<f64> = vec![-9.2, -0.3, 0.45, -4.56];
    println!("{}", format!("{:?}", mish(v1.clone())));
    println!("{}", format!("{:?}", mish(v2.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
