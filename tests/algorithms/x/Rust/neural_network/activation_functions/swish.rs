// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn exp_approx(mut x: f64) -> f64 {
    let mut sum: f64 = 1.0;
    let mut term: f64 = 1.0;
    let mut i: i64 = 1;
    while (i <= 20) {
        term = ((term * x) / (i as f64));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    fn sigmoid(mut vector: Vec<f64>) -> Vec<f64> {
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (vector.len() as i64)) {
        let v: f64 = vector[i as usize];
        let s: f64 = (1.0 / (1.0 + exp_approx(-v)));
        result = { let mut _v = result.clone(); _v.push(s); _v };
        i = (i + 1);
    }
    return result
};
    fn swish(mut vector: Vec<f64>, mut beta: f64) -> Vec<f64> {
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (vector.len() as i64)) {
        let v: f64 = vector[i as usize];
        let s: f64 = (1.0 / (1.0 + exp_approx((-beta * v))));
        result = { let mut _v = result.clone(); _v.push((v * s)); _v };
        i = (i + 1);
    }
    return result
};
    fn sigmoid_linear_unit(mut vector: Vec<f64>) -> Vec<f64> {
    return swish(vector.clone(), 1.0)
};
    fn approx_equal(mut a: f64, mut b: f64, mut eps: f64) -> bool {
    let diff: f64 = if (a > b) { (a - b) } else { (b - a) };
    return (diff < eps)
};
    fn approx_equal_list(mut a: Vec<f64>, mut b: Vec<f64>, mut eps: f64) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if !approx_equal(a[i as usize], b[i as usize], eps) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn test_swish() {
    let v: Vec<f64> = vec![-1.0, 1.0, 2.0];
    let eps: f64 = 0.001;
    if !approx_equal_list(sigmoid(v.clone()), vec![0.26894142, 0.73105858, 0.88079708], eps) {
        panic!("sigmoid incorrect");
    }
    if !approx_equal_list(sigmoid_linear_unit(v.clone()), vec![-0.26894142, 0.73105858, 1.76159416], eps) {
        panic!("sigmoid_linear_unit incorrect");
    }
    if !approx_equal_list(swish(v.clone(), 2.0), vec![-0.11920292, 0.88079708, 1.96402758], eps) {
        panic!("swish incorrect");
    }
    if !approx_equal_list(swish(vec![-2.0], 1.0), vec![-0.23840584], eps) {
        panic!("swish with parameter 1 incorrect");
    }
};
    fn mochi_main() {
    test_swish();
    println!("{}", format!("{:?}", sigmoid(vec![-1.0, 1.0, 2.0])));
    println!("{}", format!("{:?}", sigmoid_linear_unit(vec![-1.0, 1.0, 2.0])));
    println!("{}", format!("{:?}", swish(vec![-1.0, 1.0, 2.0], 2.0)));
    println!("{}", format!("{:?}", swish(vec![-2.0], 1.0)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
