// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct FuzzySet {
    name: String,
    left_boundary: f64,
    peak: f64,
    right_boundary: f64,
}
impl std::fmt::Display for FuzzySet {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"left_boundary\": {}", self.left_boundary)?;
        write!(f, ", ")?;
        write!(f, "\"peak\": {}", self.peak)?;
        write!(f, ", ")?;
        write!(f, "\"right_boundary\": {}", self.right_boundary)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn stringify(mut fs: FuzzySet) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", fs.name.clone(), ": ["), fs.left_boundary.to_string()), ", "), fs.peak.to_string()), ", "), fs.right_boundary.to_string()), "]").clone()
};
    fn max2(mut a: f64, mut b: f64) -> f64 {
    if (a > b) {
        return a
    }
    return b
};
    fn min2(mut a: f64, mut b: f64) -> f64 {
    if (a < b) {
        return a
    }
    return b
};
    fn complement(mut fs: FuzzySet) -> FuzzySet {
    return FuzzySet {name: format!("{}{}", "¬", fs.name.clone()).clone(), left_boundary: (1.0 - fs.right_boundary), peak: (1.0 - fs.left_boundary), right_boundary: (1.0 - fs.peak)}
};
    fn intersection(mut a: FuzzySet, mut b: FuzzySet) -> FuzzySet {
    return FuzzySet {name: format!("{}{}", format!("{}{}", a.name.clone(), " ∩ "), b.name.clone()).clone(), left_boundary: max2(a.left_boundary, b.left_boundary), peak: min2(a.right_boundary, b.right_boundary), right_boundary: ((a.peak + b.peak) / 2.0)}
};
    fn union(mut a: FuzzySet, mut b: FuzzySet) -> FuzzySet {
    return FuzzySet {name: format!("{}{}", format!("{}{}", a.name.clone(), " U "), b.name.clone()).clone(), left_boundary: min2(a.left_boundary, b.left_boundary), peak: max2(a.right_boundary, b.right_boundary), right_boundary: ((a.peak + b.peak) / 2.0)}
};
    fn membership(mut fs: FuzzySet, mut x: f64) -> f64 {
    if ((x <= fs.left_boundary) || (x >= fs.right_boundary)) {
        return 0.0
    }
    if ((fs.left_boundary < x) && (x <= fs.peak)) {
        return ((x - fs.left_boundary) / (fs.peak - fs.left_boundary))
    }
    if ((fs.peak < x) && (x < fs.right_boundary)) {
        return ((fs.right_boundary - x) / (fs.right_boundary - fs.peak))
    }
    return 0.0
};
    let sheru: FuzzySet = FuzzySet {name: String::from("Sheru"), left_boundary: 0.4, peak: 1.0, right_boundary: 0.6};
    let siya: FuzzySet = FuzzySet {name: String::from("Siya"), left_boundary: 0.5, peak: 1.0, right_boundary: 0.7};
    println!("{}", stringify(sheru.clone()));
    println!("{}", stringify(siya.clone()));
    let sheru_comp: FuzzySet = complement(sheru.clone());
    println!("{}", stringify(sheru_comp.clone()));
    let inter: FuzzySet = intersection(siya.clone(), sheru.clone());
    println!("{}", stringify(inter.clone()));
    println!("{}", format!("{}{}", "Sheru membership 0.5: ", membership(sheru.clone(), 0.5).to_string()));
    println!("{}", format!("{}{}", "Sheru membership 0.6: ", membership(sheru.clone(), 0.6).to_string()));
    let uni: FuzzySet = union(siya.clone(), sheru.clone());
    println!("{}", stringify(uni.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
