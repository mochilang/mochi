// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn make_matrix(mut row_size: i64) -> Vec<Vec<i64>> {
    let mut size: i64 = abs_int(row_size);
    if (size == 0) {
        size = 4;
    }
    let mut mat: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < size) {
        let mut row: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < size) {
            row = { let mut _v = row.clone(); _v.push(((1 + x) + (y * size))); _v };
            x = (x + 1);
        }
        mat = { let mut _v = mat.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return mat
};
    fn transpose(mut mat: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let n: i64 = (mat.len() as i64);
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(mat[j as usize].clone()[i as usize]); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn reverse_row(mut mat: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = ((mat.len() as i64) - 1);
    while (i >= 0) {
        result = { let mut _v = result.clone(); _v.push(mat[i as usize].clone()); _v };
        i = (i - 1);
    }
    return result
};
    fn reverse_column(mut mat: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = ((mat[i as usize].clone().len() as i64) - 1);
        while (j >= 0) {
            row = { let mut _v = row.clone(); _v.push(mat[i as usize].clone()[j as usize]); _v };
            j = (j - 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn rotate_90(mut mat: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let t: Vec<Vec<i64>> = transpose(mat.clone());
    let rr: Vec<Vec<i64>> = reverse_row(t.clone());
    return rr
};
    fn rotate_180(mut mat: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let rc: Vec<Vec<i64>> = reverse_column(mat.clone());
    let rr: Vec<Vec<i64>> = reverse_row(rc.clone());
    return rr
};
    fn rotate_270(mut mat: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let t: Vec<Vec<i64>> = transpose(mat.clone());
    let rc: Vec<Vec<i64>> = reverse_column(t.clone());
    return rc
};
    fn row_to_string(mut row: Vec<i64>) -> String {
    let mut line: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (row.len() as i64)) {
        if (i == 0) {
            line = row[i as usize].to_string().to_string();
        } else {
            line = format!("{}{}", format!("{}{}", line, " "), row[i as usize].to_string());
        }
        i = (i + 1);
    }
    return line.clone()
};
    fn print_matrix(mut mat: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (mat.len() as i64)) {
        println!("{}", row_to_string(mat[i as usize].clone()));
        i = (i + 1);
    }
};
    let mut mat: Vec<Vec<i64>> = make_matrix(4);
    println!("{}", "\norigin:\n");
    print_matrix(mat.clone());
    println!("{}", "\nrotate 90 counterclockwise:\n");
    let r90: Vec<Vec<i64>> = rotate_90(mat.clone());
    print_matrix(r90.clone());
    mat = make_matrix(4);
    println!("{}", "\norigin:\n");
    print_matrix(mat.clone());
    println!("{}", "\nrotate 180:\n");
    let r180: Vec<Vec<i64>> = rotate_180(mat.clone());
    print_matrix(r180.clone());
    mat = make_matrix(4);
    println!("{}", "\norigin:\n");
    print_matrix(mat.clone());
    println!("{}", "\nrotate 270 counterclockwise:\n");
    let r270: Vec<Vec<i64>> = rotate_270(mat.clone());
    print_matrix(r270.clone());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
