// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn binary_search(mut arr: Vec<i64>, mut lower_bound: i64, mut upper_bound: i64, mut value: i64) -> i64 {
    let r: i64 = ((lower_bound + upper_bound) / 2);
    if (arr[r as usize] == value) {
        return r
    }
    if (lower_bound >= upper_bound) {
        return -1
    }
    if (arr[r as usize] < value) {
        return binary_search(arr.clone(), (r + 1), upper_bound, value)
    }
    return binary_search(arr.clone(), lower_bound, (r - 1), value)
};
    fn mat_bin_search(mut value: i64, mut matrix: Vec<Vec<i64>>) -> Vec<i64> {
    let mut index: i64 = 0;
    if (matrix[index as usize].clone()[0 as usize] == value) {
        return vec![index, 0]
    }
    while ((index < (matrix.len() as i64)) && (matrix[index as usize].clone()[0 as usize] < value)) {
        let r: i64 = binary_search(matrix[index as usize].clone(), 0, ((matrix[index as usize].clone().len() as i64) - 1), value);
        if (r != -1) {
            return vec![index, r]
        }
        index = (index + 1);
    }
    return vec![-1, -1]
};
    fn mochi_main() {
    let row: Vec<i64> = vec![1, 4, 7, 11, 15];
    println!("{}", binary_search(row.clone(), 0, ((row.len() as i64) - 1), 1).to_string());
    println!("{}", binary_search(row.clone(), 0, ((row.len() as i64) - 1), 23).to_string());
    let matrix: Vec<Vec<i64>> = vec![vec![1, 4, 7, 11, 15].clone(), vec![2, 5, 8, 12, 19].clone(), vec![3, 6, 9, 16, 22].clone(), vec![10, 13, 14, 17, 24].clone(), vec![18, 21, 23, 26, 30].clone()];
    println!("{}", format!("{:?}", mat_bin_search(1, matrix.clone())));
    println!("{}", format!("{:?}", mat_bin_search(34, matrix.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
