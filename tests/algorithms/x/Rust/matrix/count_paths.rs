// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn depth_first_search(mut grid: Vec<Vec<i64>>, mut row: i64, mut col: i64, visit: &mut Vec<Vec<bool>>) -> i64 {
    let row_length: i64 = (grid.len() as i64);
    let col_length: i64 = (grid[0 as usize].clone().len() as i64);
    if ((((row < 0) || (col < 0)) || (row == row_length)) || (col == col_length)) {
        return 0
    }
    if visit[row as usize].clone()[col as usize] {
        return 0
    }
    if (grid[row as usize].clone()[col as usize] == 1) {
        return 0
    }
    if ((row == (row_length - 1)) && (col == (col_length - 1))) {
        return 1
    }
    (*visit)[row as usize][col as usize] = true;
    let mut count: i64 = 0;
    count = (count + depth_first_search(grid.clone(), (row + 1), col, visit));
    count = (count + depth_first_search(grid.clone(), (row - 1), col, visit));
    count = (count + depth_first_search(grid.clone(), row, (col + 1), visit));
    count = (count + depth_first_search(grid.clone(), row, (col - 1), visit));
    (*visit)[row as usize][col as usize] = false;
    return count
};
    fn count_paths(mut grid: Vec<Vec<i64>>) -> i64 {
    let rows: i64 = (grid.len() as i64);
    let cols: i64 = (grid[0 as usize].clone().len() as i64);
    let mut visit: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row_visit: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row_visit = { let mut _v = row_visit.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        visit = { let mut _v = visit.clone(); _v.push(row_visit.clone()); _v };
        i = (i + 1);
    }
    return depth_first_search(grid.clone(), 0, 0, &mut visit)
};
    fn mochi_main() {
    let grid1: Vec<Vec<i64>> = vec![vec![0, 0, 0, 0].clone(), vec![1, 1, 0, 0].clone(), vec![0, 0, 0, 1].clone(), vec![0, 1, 0, 0].clone()];
    println!("{}", count_paths(grid1.clone()).to_string());
    let grid2: Vec<Vec<i64>> = vec![vec![0, 0, 0, 0, 0].clone(), vec![0, 1, 1, 1, 0].clone(), vec![0, 1, 1, 1, 0].clone(), vec![0, 0, 0, 0, 0].clone()];
    println!("{}", count_paths(grid2.clone()).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
