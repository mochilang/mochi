// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Matrix {
    data: Vec<Vec<f64>>,
    rows: i64,
    cols: i64,
}
impl std::fmt::Display for Matrix {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"rows\": {}", self.rows)?;
        write!(f, ", ")?;
        write!(f, "\"cols\": {}", self.cols)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_matrix(mut rows: i64, mut cols: i64, mut value: f64) -> Matrix {
    let mut arr: Vec<Vec<f64>> = vec![];
    let mut r: i64 = 0;
    while (r < rows) {
        let mut row: Vec<f64> = vec![];
        let mut c: i64 = 0;
        while (c < cols) {
            row = { let mut _v = row.clone(); _v.push(value); _v };
            c = (c + 1);
        }
        arr = { let mut _v = arr.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return Matrix {data: arr, rows: rows, cols: cols}
};
    fn matrix_from_lists(mut vals: Vec<Vec<f64>>) -> Matrix {
    let r: i64 = (vals.len() as i64);
    let c: i64 = if (r == 0) { 0 } else { (vals[0 as usize].clone().len() as i64) };
    return Matrix {data: vals, rows: r, cols: c}
};
    fn matrix_to_string(m: &Matrix) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < m.rows) {
        s = format!("{}{}", s, "[");
        let mut j: i64 = 0;
        while (j < m.cols) {
            s = format!("{}{}", s, m.data.clone()[i as usize].clone()[j as usize].to_string());
            if (j < (m.cols - 1)) {
                s = format!("{}{}", s, ", ");
            }
            j = (j + 1);
        }
        s = format!("{}{}", s, "]");
        if (i < (m.rows - 1)) {
            s = format!("{}{}", s, "\n");
        }
        i = (i + 1);
    }
    return s.clone()
};
    fn matrix_add(a: &Matrix, b: &Matrix) -> Matrix {
    if ((a.rows != b.rows) || (a.cols != b.cols)) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < a.cols) {
            row = { let mut _v = row.clone(); _v.push((a.data.clone()[i as usize].clone()[j as usize] + b.data.clone()[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: res, rows: a.rows, cols: a.cols}
};
    fn matrix_sub(a: &Matrix, b: &Matrix) -> Matrix {
    if ((a.rows != b.rows) || (a.cols != b.cols)) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < a.cols) {
            row = { let mut _v = row.clone(); _v.push((a.data.clone()[i as usize].clone()[j as usize] - b.data.clone()[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: res, rows: a.rows, cols: a.cols}
};
    fn matrix_mul_scalar(m: &Matrix, mut k: f64) -> Matrix {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m.cols) {
            row = { let mut _v = row.clone(); _v.push((m.data.clone()[i as usize].clone()[j as usize] * k)); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: res, rows: m.rows, cols: m.cols}
};
    fn matrix_mul(a: &Matrix, b: &Matrix) -> Matrix {
    if (a.cols != b.rows) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < b.cols) {
            let mut sum: f64 = 0.0;
            let mut k: i64 = 0;
            while (k < a.cols) {
                sum = (sum + (a.data.clone()[i as usize].clone()[k as usize] * b.data.clone()[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: res, rows: a.rows, cols: b.cols}
};
    fn matrix_transpose(m: &Matrix) -> Matrix {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut c: i64 = 0;
    while (c < m.cols) {
        let mut row: Vec<f64> = vec![];
        let mut r: i64 = 0;
        while (r < m.rows) {
            row = { let mut _v = row.clone(); _v.push(m.data.clone()[r as usize].clone()[c as usize]); _v };
            r = (r + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        c = (c + 1);
    }
    return Matrix {data: res, rows: m.cols, cols: m.rows}
};
    fn sherman_morrison(ainv: &Matrix, u: &Matrix, v: &Matrix) -> Matrix {
    let vt: Matrix = matrix_transpose(v);
    let vu: Matrix = matrix_mul(&matrix_mul(&vt, ainv), u);
    let factor: f64 = (vu.data.clone()[0 as usize].clone()[0 as usize] + 1.0);
    if (factor == 0.0) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let term1: Matrix = matrix_mul(ainv, u);
    let term2: Matrix = matrix_mul(&vt, ainv);
    let numerator: Matrix = matrix_mul(&term1, &term2);
    let scaled: Matrix = matrix_mul_scalar(&numerator, (1.0 / factor));
    return matrix_sub(ainv, &scaled)
};
    fn mochi_main() {
    let ainv: Matrix = matrix_from_lists(vec![vec![1.0, 0.0, 0.0].clone(), vec![0.0, 1.0, 0.0].clone(), vec![0.0, 0.0, 1.0].clone()]);
    let u: Matrix = matrix_from_lists(vec![vec![1.0].clone(), vec![2.0].clone(), vec![-3.0].clone()]);
    let v: Matrix = matrix_from_lists(vec![vec![4.0].clone(), vec![-2.0].clone(), vec![5.0].clone()]);
    let result: Matrix = sherman_morrison(&ainv, &u, &v);
    println!("{}", matrix_to_string(&result));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
