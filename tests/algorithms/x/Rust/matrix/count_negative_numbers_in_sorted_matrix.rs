// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_i = 0;
                let _start: i64 = _now();
        fn generate_large_matrix() -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < 1000) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = (1000 - i);
        while (j > (-1000 - i)) {
            row = { let mut _v = row.clone(); _v.push(j); _v };
            j = (j - 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
        fn find_negative_index(mut arr: Vec<i64>) -> i64 {
    let mut left: i64 = 0;
    let mut right: i64 = ((arr.len() as i64) - 1);
    if ((arr.len() as i64) == 0) {
        return 0
    }
    if (arr[0 as usize] < 0) {
        return 0
    }
    while (left <= right) {
        let mid: i64 = ((left + right) / 2);
        let num: i64 = arr[mid as usize];
        if (num < 0) {
            if (mid == 0) {
                return 0
            }
            if (arr[(mid - 1) as usize] >= 0) {
                return mid
            }
            right = (mid - 1);
        } else {
            left = (mid + 1);
        }
    }
    return (arr.len() as i64)
};
        fn count_negatives_binary_search(mut grid: Vec<Vec<i64>>) -> i64 {
    let mut total: i64 = 0;
    let mut bound: i64 = (grid[0 as usize].clone().len() as i64);
    let mut i: i64 = 0;
    while (i < (grid.len() as i64)) {
        let row: Vec<i64> = grid[i as usize].clone();
        let idx: i64 = find_negative_index(row[0 as usize..bound as usize].to_vec());
        bound = idx;
        total = (total + idx);
        i = (i + 1);
    }
    return (((grid.len() as i64) * (grid[0 as usize].clone().len() as i64)) - total)
};
        fn count_negatives_brute_force(mut grid: Vec<Vec<i64>>) -> i64 {
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (grid.len() as i64)) {
        let row: Vec<i64> = grid[i as usize].clone();
        let mut j: i64 = 0;
        while (j < (row.len() as i64)) {
            if (row[j as usize] < 0) {
                count = (count + 1);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return count
};
        fn count_negatives_brute_force_with_break(mut grid: Vec<Vec<i64>>) -> i64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (grid.len() as i64)) {
        let row: Vec<i64> = grid[i as usize].clone();
        let mut j: i64 = 0;
        while (j < (row.len() as i64)) {
            let number: i64 = row[j as usize];
            if (number < 0) {
                total = (total + ((row.len() as i64) - j));
                break
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return total
};
        let grid: Vec<Vec<i64>> = generate_large_matrix();
        let test_grids: Vec<Vec<Vec<i64>>> = vec![vec![vec![4, 3, 2, -1].clone(), vec![3, 2, 1, -1].clone(), vec![1, 1, -1, -2].clone(), vec![-1, -1, -2, -3].clone()].clone(), vec![vec![3, 2].clone(), vec![1, 0].clone()].clone(), vec![vec![7, 7, 6].clone()].clone(), vec![vec![7, 7, 6].clone(), vec![-1, -2, -3].clone()].clone(), grid.clone()];
        let mut results_bin: Vec<i64> = vec![];
        while (unsafe { g_i.clone() } < (test_grids.len() as i64)) {
            results_bin = { let mut _v = results_bin.clone(); _v.push(count_negatives_binary_search(test_grids[unsafe { g_i.clone() } as usize].clone())); _v };
            unsafe { g_i = (unsafe { g_i.clone() } + 1) };
        }
        println!("{}", format!("{:?}", results_bin));
        let mut results_brute: Vec<i64> = vec![];
        unsafe { g_i = 0 };
        while (unsafe { g_i.clone() } < (test_grids.len() as i64)) {
            results_brute = { let mut _v = results_brute.clone(); _v.push(count_negatives_brute_force(test_grids[unsafe { g_i.clone() } as usize].clone())); _v };
            unsafe { g_i = (unsafe { g_i.clone() } + 1) };
        }
        println!("{}", format!("{:?}", results_brute));
        let mut results_break: Vec<i64> = vec![];
        unsafe { g_i = 0 };
        while (unsafe { g_i.clone() } < (test_grids.len() as i64)) {
            results_break = { let mut _v = results_break.clone(); _v.push(count_negatives_brute_force_with_break(test_grids[unsafe { g_i.clone() } as usize].clone())); _v };
            unsafe { g_i = (unsafe { g_i.clone() } + 1) };
        }
        println!("{}", format!("{:?}", results_break));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
