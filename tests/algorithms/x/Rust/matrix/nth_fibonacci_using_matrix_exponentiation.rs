// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn multiply(mut matrix_a: Vec<Vec<i64>>, mut matrix_b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let n: i64 = (matrix_a.len() as i64);
    let mut matrix_c: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            let mut val: i64 = 0;
            let mut k: i64 = 0;
            while (k < n) {
                val = (val + (matrix_a[i as usize].clone()[k as usize] * matrix_b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(val); _v };
            j = (j + 1);
        }
        matrix_c = { let mut _v = matrix_c.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return matrix_c
};
    fn identity(mut n: i64) -> Vec<Vec<i64>> {
    let mut res: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            }
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
    let mut nth_fibonacci_matrix = |mut n: i64| -> i64 {
    if (n <= 1) {
        return n
    }
    let mut res_matrix: Vec<Vec<i64>> = identity(2);
    let mut fib_matrix: Vec<Vec<i64>> = vec![vec![1, 1].clone(), vec![1, 0].clone()];
    let mut m: i64 = (n - 1);
    while (m > 0) {
        if ((m % 2) == 1) {
            res_matrix = multiply(res_matrix.clone(), fib_matrix.clone());
        }
        fib_matrix = multiply(fib_matrix.clone(), fib_matrix.clone());
        m = (m / 2);
    }
    return res_matrix[0 as usize].clone()[0 as usize]
};
    fn nth_fibonacci_bruteforce(mut n: i64) -> i64 {
    if (n <= 1) {
        return n
    }
    let mut fib0: i64 = 0;
    let mut fib1: i64 = 1;
    let mut i: i64 = 2;
    while (i <= n) {
        let next: i64 = (fib0 + fib1);
        fib0 = fib1;
        fib1 = next;
        i = (i + 1);
    }
    return fib1
};
    fn parse_number(mut s: String) -> i64 {
    let mut result: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if ((ch.as_str() >= "0") && (ch.as_str() <= "9")) {
            result = ((result * 10) + { let n: i64 = ch.parse().unwrap(); n });
        }
        i = (i + 1);
    }
    return result
};
    let mut mochi_main = || {
    let ordinals: Vec<String> = vec![String::from("0th").clone(), String::from("1st").clone(), String::from("2nd").clone(), String::from("3rd").clone(), String::from("10th").clone(), String::from("100th").clone(), String::from("1000th").clone()];
    let mut i: i64 = 0;
    while (i < (ordinals.len() as i64)) {
        let ordinal: String = ordinals[i as usize].clone().clone();
        let n: i64 = parse_number(ordinal.clone());
        let msg: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", ordinal, " fibonacci number using matrix exponentiation is "), nth_fibonacci_matrix(n).to_string()), " and using bruteforce is "), nth_fibonacci_bruteforce(n).to_string()).clone();
        println!("{}", msg);
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
