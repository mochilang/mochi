// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn unique(mut nums: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let v: i64 = nums[i as usize];
        let mut found: bool = false;
        let mut j: i64 = 0;
        while (j < (res.len() as i64)) {
            if (res[j as usize] == v) {
                found = true;
                break
            }
            j = (j + 1);
        }
        if !found {
            res = { let mut _v = res.clone(); _v.push(v); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn array_equalization(mut vector: Vec<i64>, mut step_size: i64) -> i64 {
    if (step_size <= 0) {
        panic!("Step size must be positive and non-zero.");
    }
    let elems: Vec<i64> = unique(vector.clone());
    let mut min_updates: i64 = (vector.len() as i64);
    let mut i: i64 = 0;
    while (i < (elems.len() as i64)) {
        let target: i64 = elems[i as usize];
        let mut idx: i64 = 0;
        let mut updates: i64 = 0;
        while (idx < (vector.len() as i64)) {
            if (vector[idx as usize] != target) {
                updates = (updates + 1);
                idx = (idx + step_size);
            } else {
                idx = (idx + 1);
            }
        }
        if (updates < min_updates) {
            min_updates = updates;
        }
        i = (i + 1);
    }
    return min_updates
};
    println!("{}", array_equalization(vec![1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4).to_string());
    println!("{}", array_equalization(vec![22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2).to_string());
    println!("{}", array_equalization(vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5).to_string());
    println!("{}", array_equalization(vec![22, 22, 22, 33, 33, 33], 2).to_string());
    println!("{}", array_equalization(vec![1, 2, 3], 2147483647).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
