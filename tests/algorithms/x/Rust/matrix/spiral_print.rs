// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_valid_matrix(mut matrix: Vec<Vec<i64>>) -> bool {
    if ((matrix.len() as i64) == 0) {
        return false
    }
    let cols: i64 = (matrix[0 as usize].clone().len() as i64);
    for row in matrix.iter() {
        if (((*row).clone().len() as i64) != cols) {
            return false
        }
    }
    return true
};
    let mut spiral_traversal = |mut matrix: Vec<Vec<i64>>| -> Vec<i64> {
    if !is_valid_matrix(matrix.clone()) {
        return vec![]
    }
    let rows: i64 = (matrix.len() as i64);
    let cols: i64 = (matrix[0 as usize].clone().len() as i64);
    let mut top: i64 = 0;
    let mut bottom: i64 = (rows - 1);
    let mut left: i64 = 0;
    let mut right: i64 = (cols - 1);
    let mut result: Vec<i64> = vec![];
    while ((left <= right) && (top <= bottom)) {
        let mut i: i64 = left;
        while (i <= right) {
            result = { let mut _v = result.clone(); _v.push(matrix[top as usize].clone()[i as usize]); _v };
            i = (i + 1);
        }
        top = (top + 1);
        i = top;
        while (i <= bottom) {
            result = { let mut _v = result.clone(); _v.push(matrix[i as usize].clone()[right as usize]); _v };
            i = (i + 1);
        }
        right = (right - 1);
        if (top <= bottom) {
            i = right;
            while (i >= left) {
                result = { let mut _v = result.clone(); _v.push(matrix[bottom as usize].clone()[i as usize]); _v };
                i = (i - 1);
            }
            bottom = (bottom - 1);
        }
        if (left <= right) {
            i = bottom;
            while (i >= top) {
                result = { let mut _v = result.clone(); _v.push(matrix[i as usize].clone()[left as usize]); _v };
                i = (i - 1);
            }
            left = (left + 1);
        }
    }
    return result
};
    let mut spiral_print_clockwise = |mut matrix: Vec<Vec<i64>>| {
    for value in spiral_traversal(matrix.clone()).iter().cloned() {
        println!("{}", value.to_string());
    }
};
    let mut mochi_main = || {
    let a: Vec<Vec<i64>> = vec![vec![1, 2, 3, 4].clone(), vec![5, 6, 7, 8].clone(), vec![9, 10, 11, 12].clone()];
    spiral_print_clockwise(a.clone());
    println!("{}", format!("{:?}", spiral_traversal(a.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
