// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn encode(mut row: i64, mut col: i64) -> String {
    return format!("{}{}", format!("{}{}", row.to_string(), ","), col.to_string()).clone()
};
    fn is_safe(mut row: i64, mut col: i64, mut rows: i64, mut cols: i64) -> bool {
    return ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols))
};
    fn has(mut seen: HashMap<String, bool>, mut key: String) -> bool {
    return seen.contains_key(&key)
};
    let mut depth_first_search = {
fn depth_first_search(has: &mut dyn FnMut(HashMap<String, bool>, String) -> bool, is_safe: &mut dyn FnMut(i64, i64, i64, i64) -> bool, mut row: i64, mut col: i64, seen: &mut HashMap<String, bool>, mut mat: Vec<Vec<i64>>) -> i64 {
    let rows: i64 = (mat.len() as i64);
    let cols: i64 = (mat[0 as usize].clone().len() as i64);
    let key: String = encode(row, col).clone();
    if ((is_safe(row, col, rows, cols) && !has(seen.clone(), key.clone())) && (mat[row as usize].clone()[col as usize] == 1)) {
        (*seen).insert(key.clone(), true);
        return ((((1 + depth_first_search(has, is_safe, (row + 1), col, seen, mat.clone())) + depth_first_search(has, is_safe, (row - 1), col, seen, mat.clone())) + depth_first_search(has, is_safe, row, (col + 1), seen, mat.clone())) + depth_first_search(has, is_safe, row, (col - 1), seen, mat.clone()))
    } else {
        return 0
    }
}
|mut row: i64, mut col: i64, seen: &mut HashMap<String, bool>, mut mat: Vec<Vec<i64>>| -> i64 { depth_first_search(&mut has, &mut is_safe, row, col, seen, mat) }
};
    let mut find_max_area = |mut mat: Vec<Vec<i64>>| -> i64 {
    let mut seen: HashMap<String, bool> = HashMap::new();
    let rows: i64 = (mat.len() as i64);
    let mut max_area: i64 = 0;
    let mut r: i64 = 0;
    while (r < rows) {
        let line: Vec<i64> = mat[r as usize].clone();
        let cols: i64 = (line.len() as i64);
        let mut c: i64 = 0;
        while (c < cols) {
            if (line[c as usize] == 1) {
                let key: String = encode(r, c).clone();
                if !seen.contains_key(&key) {
                    let area: i64 = depth_first_search(r, c, seen.clone(), mat.clone());
                    if (area > max_area) {
                        max_area = area;
                    }
                }
            }
            c = (c + 1);
        }
        r = (r + 1);
    }
    return max_area
};
    let matrix: Vec<Vec<i64>> = vec![vec![0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0].clone(), vec![0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0].clone(), vec![0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0].clone()];
    println!("{}", find_max_area(matrix.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
