// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn search_in_sorted_matrix(mut mat: Vec<Vec<f64>>, mut m: i64, mut n: i64, mut key: f64) {
    let mut i: i64 = (m - 1);
    let mut j: i64 = 0;
    while ((i >= 0) && (j < n)) {
        if (key == mat[i as usize].clone()[j as usize]) {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Key ", key.to_string()), " found at row- "), (i + 1).to_string()), " column- "), (j + 1).to_string()));
            return
        }
        if (key < mat[i as usize].clone()[j as usize]) {
            i = (i - 1);
        } else {
            j = (j + 1);
        }
    }
    println!("{}", format!("{}{}", format!("{}{}", "Key ", key.to_string()), " not found"));
};
    fn mochi_main() {
    let mat: Vec<Vec<f64>> = vec![vec![2.0, 5.0, 7.0].clone(), vec![4.0, 8.0, 13.0].clone(), vec![9.0, 11.0, 15.0].clone(), vec![12.0, 17.0, 20.0].clone()];
    search_in_sorted_matrix(mat.clone(), (mat.len() as i64), (mat[0 as usize].clone().len() as i64), 5.0);
    search_in_sorted_matrix(mat.clone(), (mat.len() as i64), (mat[0 as usize].clone().len() as i64), 21.0);
    let mat2: Vec<Vec<f64>> = vec![vec![2.1, 5.0, 7.0].clone(), vec![4.0, 8.0, 13.0].clone(), vec![9.0, 11.0, 15.0].clone(), vec![12.0, 17.0, 20.0].clone()];
    search_in_sorted_matrix(mat2.clone(), (mat2.len() as i64), (mat2[0 as usize].clone().len() as i64), 2.1);
    search_in_sorted_matrix(mat2.clone(), (mat2.len() as i64), (mat2[0 as usize].clone().len() as i64), 2.2);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
