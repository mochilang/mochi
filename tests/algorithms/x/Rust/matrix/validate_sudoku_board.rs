// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static g_NUM_SQUARES: i64 = 9;
fn main() {
    unsafe {
                let _start: i64 = _now();
        let EMPTY_CELL: String = String::from(".");
        let mut is_valid_sudoku_board = |mut board: Vec<Vec<String>>| -> bool {
    if ((board.len() as i64) != unsafe { g_NUM_SQUARES.clone() }) {
        return false
    }
    let mut i: i64 = 0;
    while (i < unsafe { g_NUM_SQUARES.clone() }) {
        if ((board[i as usize].clone().len() as i64) != unsafe { g_NUM_SQUARES.clone() }) {
            return false
        }
        i = (i + 1);
    }
    let mut rows: Vec<Vec<String>> = vec![];
    let mut cols: Vec<Vec<String>> = vec![];
    let mut boxes: Vec<Vec<String>> = vec![];
    i = 0;
    while (i < unsafe { g_NUM_SQUARES.clone() }) {
        rows = { let mut _v = rows.clone(); _v.push(vec![]); _v };
        cols = { let mut _v = cols.clone(); _v.push(vec![]); _v };
        boxes = { let mut _v = boxes.clone(); _v.push(vec![]); _v };
        i = (i + 1);
    }
    for r in 0..unsafe { g_NUM_SQUARES.clone() } {
        for c in 0..unsafe { g_NUM_SQUARES.clone() } {
            let value: String = board[r as usize].clone()[c as usize].clone().clone();
            if (value.as_str() == EMPTY_CELL.as_str()) {
                continue
            }
            let r#box: i64 = ((int((r / 3)) * 3) + int((c / 3)));
            if ((rows[r as usize].clone().contains(&value) || cols[c as usize].clone().contains(&value)) || boxes[r#box as usize].clone().contains(&value)) {
                return false
            }
            rows[r as usize] = { let mut _v = rows[r as usize].clone().clone(); _v.push(value.clone()); _v };
            cols[c as usize] = { let mut _v = cols[c as usize].clone().clone(); _v.push(value.clone()); _v };
            boxes[r#box as usize] = { let mut _v = boxes[r#box as usize].clone().clone(); _v.push(value.clone()); _v };
        }
    }
    return true
};
        let valid_board: Vec<Vec<String>> = vec![vec![String::from("5").clone(), String::from("3").clone(), String::from(".").clone(), String::from(".").clone(), String::from("7").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone()].clone(), vec![String::from("6").clone(), String::from(".").clone(), String::from(".").clone(), String::from("1").clone(), String::from("9").clone(), String::from("5").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone()].clone(), vec![String::from(".").clone(), String::from("9").clone(), String::from("8").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("6").clone(), String::from(".").clone()].clone(), vec![String::from("8").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("6").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("3").clone()].clone(), vec![String::from("4").clone(), String::from(".").clone(), String::from(".").clone(), String::from("8").clone(), String::from(".").clone(), String::from("3").clone(), String::from(".").clone(), String::from(".").clone(), String::from("1").clone()].clone(), vec![String::from("7").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("2").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("6").clone()].clone(), vec![String::from(".").clone(), String::from("6").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("2").clone(), String::from("8").clone(), String::from(".").clone()].clone(), vec![String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("4").clone(), String::from("1").clone(), String::from("9").clone(), String::from(".").clone(), String::from(".").clone(), String::from("5").clone()].clone(), vec![String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("8").clone(), String::from(".").clone(), String::from(".").clone(), String::from("7").clone(), String::from("9").clone()].clone()];
        let invalid_board: Vec<Vec<String>> = vec![vec![String::from("8").clone(), String::from("3").clone(), String::from(".").clone(), String::from(".").clone(), String::from("7").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone()].clone(), vec![String::from("6").clone(), String::from(".").clone(), String::from(".").clone(), String::from("1").clone(), String::from("9").clone(), String::from("5").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone()].clone(), vec![String::from(".").clone(), String::from("9").clone(), String::from("8").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("6").clone(), String::from(".").clone()].clone(), vec![String::from("8").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("6").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("3").clone()].clone(), vec![String::from("4").clone(), String::from(".").clone(), String::from(".").clone(), String::from("8").clone(), String::from(".").clone(), String::from("3").clone(), String::from(".").clone(), String::from(".").clone(), String::from("1").clone()].clone(), vec![String::from("7").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("2").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("6").clone()].clone(), vec![String::from(".").clone(), String::from("6").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("2").clone(), String::from("8").clone(), String::from(".").clone()].clone(), vec![String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("4").clone(), String::from("1").clone(), String::from("9").clone(), String::from(".").clone(), String::from(".").clone(), String::from("5").clone()].clone(), vec![String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from(".").clone(), String::from("8").clone(), String::from(".").clone(), String::from(".").clone(), String::from("7").clone(), String::from("9").clone()].clone()];
        println!("{}", if is_valid_sudoku_board(valid_board.clone()) { 1 } else { 0 });
        println!("{}", if is_valid_sudoku_board(invalid_board.clone()) { 1 } else { 0 });
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
