// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Matrix {
    data: Vec<Vec<f64>>,
    rows: i64,
    cols: i64,
}
impl std::fmt::Display for Matrix {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"rows\": {}", self.rows)?;
        write!(f, ", ")?;
        write!(f, "\"cols\": {}", self.cols)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_matrix(mut values: Vec<Vec<f64>>) -> Matrix {
    let r: i64 = (values.len() as i64);
    if (r == 0) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let c: i64 = (values[0 as usize].clone().len() as i64);
    let mut i: i64 = 0;
    while (i < r) {
        if ((values[i as usize].clone().len() as i64) != c) {
            return Matrix {data: vec![], rows: 0, cols: 0}
        }
        i = (i + 1);
    }
    return Matrix {data: values.clone(), rows: r, cols: c}
};
    fn matrix_columns(mut m: Matrix) -> Vec<Vec<f64>> {
    let mut cols: Vec<Vec<f64>> = vec![];
    let mut j: i64 = 0;
    while (j < m.cols) {
        let mut col: Vec<f64> = vec![];
        let mut i: i64 = 0;
        while (i < m.rows) {
            col = { let mut _v = col.clone(); _v.push(m.data.clone()[i as usize].clone()[j as usize]); _v };
            i = (i + 1);
        }
        cols = { let mut _v = cols.clone(); _v.push(col.clone()); _v };
        j = (j + 1);
    }
    return cols
};
    fn matrix_identity(mut m: Matrix) -> Matrix {
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m.cols) {
            let v: f64 = if (i == j) { 1.0 } else { 0.0 };
            row = { let mut _v = row.clone(); _v.push(v); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: m.rows, cols: m.cols}
};
    let mut matrix_minor = |mut m: Matrix, mut r: i64, mut c: i64| -> f64 {
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        if (i != r) {
            let mut row: Vec<f64> = vec![];
            let mut j: i64 = 0;
            while (j < m.cols) {
                if (j != c) {
                    row = { let mut _v = row.clone(); _v.push(m.data.clone()[i as usize].clone()[j as usize]); _v };
                }
                j = (j + 1);
            }
            vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        }
        i = (i + 1);
    }
    let sub: Matrix = Matrix {data: vals.clone(), rows: (m.rows - 1), cols: (m.cols - 1)};
    return matrix_determinant(sub.clone())
};
    let mut matrix_cofactor = |mut m: Matrix, mut r: i64, mut c: i64| -> f64 {
    let minor: f64 = matrix_minor(m.clone(), r, c);
    if (((r + c) % 2) == 0) {
        return minor
    }
    return (-1.0 * minor)
};
    fn matrix_minors(mut m: Matrix) -> Matrix {
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m.cols) {
            row = { let mut _v = row.clone(); _v.push(matrix_minor(m.clone(), i, j)); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: m.rows, cols: m.cols}
};
    fn matrix_cofactors(mut m: Matrix) -> Matrix {
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m.cols) {
            row = { let mut _v = row.clone(); _v.push(matrix_cofactor(m.clone(), i, j)); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: m.rows, cols: m.cols}
};
    let mut matrix_determinant = |mut m: Matrix| -> f64 {
    if (m.rows != m.cols) {
        return 0.0
    }
    if (m.rows == 0) {
        return 0.0
    }
    if (m.rows == 1) {
        return m.data.clone()[0 as usize].clone()[0 as usize]
    }
    if (m.rows == 2) {
        return ((m.data.clone()[0 as usize].clone()[0 as usize] * m.data.clone()[1 as usize].clone()[1 as usize]) - (m.data.clone()[0 as usize].clone()[1 as usize] * m.data.clone()[1 as usize].clone()[0 as usize]))
    }
    let mut sum: f64 = 0.0;
    let mut j: i64 = 0;
    while (j < m.cols) {
        sum = (sum + (m.data.clone()[0 as usize].clone()[j as usize] * matrix_cofactor(m.clone(), 0, j)));
        j = (j + 1);
    }
    return sum
};
    let mut matrix_is_invertible = |mut m: Matrix| -> bool {
    return (matrix_determinant(m.clone()) != 0.0)
};
    let mut matrix_adjugate = |mut m: Matrix| -> Matrix {
    let cof: Matrix = matrix_cofactors(m.clone());
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m.cols) {
            row = { let mut _v = row.clone(); _v.push(cof.data.clone()[j as usize].clone()[i as usize]); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: m.rows, cols: m.cols}
};
    let mut matrix_inverse = |mut m: Matrix| -> Matrix {
    let det: f64 = matrix_determinant(m.clone());
    if (det == 0.0) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let adj: Matrix = matrix_adjugate(m.clone());
    return matrix_mul_scalar(adj.clone(), (1.0 / det))
};
    fn matrix_add_row(mut m: Matrix, mut row: Vec<f64>) -> Matrix {
    let mut newData: Vec<Vec<f64>> = m.data.clone();
    newData = { let mut _v = newData.clone(); _v.push(row.clone()); _v };
    return Matrix {data: newData.clone(), rows: (m.rows + 1), cols: m.cols}
};
    fn matrix_add_column(mut m: Matrix, mut col: Vec<f64>) -> Matrix {
    let mut newData: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        newData = { let mut _v = newData.clone(); _v.push({ let mut _v = m.data.clone()[i as usize].clone().clone(); _v.push(col[i as usize]); _v }); _v };
        i = (i + 1);
    }
    return Matrix {data: newData.clone(), rows: m.rows, cols: (m.cols + 1)}
};
    fn matrix_mul_scalar(mut m: Matrix, mut s: f64) -> Matrix {
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < m.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < m.cols) {
            row = { let mut _v = row.clone(); _v.push((m.data.clone()[i as usize].clone()[j as usize] * s)); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: m.rows, cols: m.cols}
};
    let mut matrix_neg = |mut m: Matrix| -> Matrix {
    return matrix_mul_scalar(m.clone(), -1.0)
};
    fn matrix_add(mut a: Matrix, mut b: Matrix) -> Matrix {
    if ((a.rows != b.rows) || (a.cols != b.cols)) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < a.cols) {
            row = { let mut _v = row.clone(); _v.push((a.data.clone()[i as usize].clone()[j as usize] + b.data.clone()[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: a.rows, cols: a.cols}
};
    fn matrix_sub(mut a: Matrix, mut b: Matrix) -> Matrix {
    if ((a.rows != b.rows) || (a.cols != b.cols)) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < a.cols) {
            row = { let mut _v = row.clone(); _v.push((a.data.clone()[i as usize].clone()[j as usize] - b.data.clone()[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: a.rows, cols: a.cols}
};
    fn matrix_dot(mut row: Vec<f64>, mut col: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (row.len() as i64)) {
        sum = (sum + (row[i as usize] * col[i as usize]));
        i = (i + 1);
    }
    return sum
};
    let mut matrix_mul = |mut a: Matrix, mut b: Matrix| -> Matrix {
    if (a.cols != b.rows) {
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let bcols: Vec<Vec<f64>> = matrix_columns(b.clone());
    let mut vals: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < a.rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < b.cols) {
            row = { let mut _v = row.clone(); _v.push(matrix_dot(a.data.clone()[i as usize].clone(), bcols[j as usize].clone())); _v };
            j = (j + 1);
        }
        vals = { let mut _v = vals.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Matrix {data: vals.clone(), rows: a.rows, cols: b.cols}
};
    let mut matrix_pow = {
fn matrix_pow(matrix_identity: &mut dyn FnMut(Matrix) -> Matrix, matrix_inverse: &mut dyn FnMut(Matrix) -> Matrix, matrix_is_invertible: &mut dyn FnMut(Matrix) -> bool, matrix_mul: &mut dyn FnMut(Matrix, Matrix) -> Matrix, mut m: Matrix, mut p: i64) -> Matrix {
    if (p == 0) {
        return matrix_identity(m.clone())
    }
    if (p < 0) {
        if matrix_is_invertible(m.clone()) {
            return matrix_pow(matrix_identity, matrix_inverse, matrix_is_invertible, matrix_mul, matrix_inverse(m.clone()), -p)
        }
        return Matrix {data: vec![], rows: 0, cols: 0}
    }
    let mut result: Matrix = m.clone();
    let mut i: i64 = 1;
    while (i < p) {
        result = matrix_mul(result.clone(), m.clone());
        i = (i + 1);
    }
    return result
}
|mut m: Matrix, mut p: i64| -> Matrix { matrix_pow(&mut matrix_identity, &mut matrix_inverse, &mut matrix_is_invertible, &mut matrix_mul, m, p) }
};
    fn matrix_to_string(mut m: Matrix) -> String {
    if (m.rows == 0) {
        return String::from("[]")
    }
    let mut s: String = String::from("[");
    let mut i: i64 = 0;
    while (i < m.rows) {
        s = format!("{}{}", s, "[");
        let mut j: i64 = 0;
        while (j < m.cols) {
            s = format!("{}{}", s, m.data.clone()[i as usize].clone()[j as usize].to_string());
            if (j < (m.cols - 1)) {
                s = format!("{}{}", s, " ");
            }
            j = (j + 1);
        }
        s = format!("{}{}", s, "]");
        if (i < (m.rows - 1)) {
            s = format!("{}{}", s, "\n ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    let mut mochi_main = || {
    let m: Matrix = make_matrix(vec![vec![1.0, 2.0, 3.0].clone(), vec![4.0, 5.0, 6.0].clone(), vec![7.0, 8.0, 9.0].clone()]);
    println!("{}", matrix_to_string(m.clone()));
    println!("{}", format!("{:?}", matrix_columns(m.clone())));
    println!("{}", format!("{}{}", format!("{}{}", m.rows.to_string(), ","), m.cols.to_string()));
    println!("{}", matrix_is_invertible(m.clone()).to_string());
    println!("{}", matrix_to_string(matrix_identity(m.clone())));
    println!("{}", matrix_determinant(m.clone()).to_string());
    println!("{}", matrix_to_string(matrix_minors(m.clone())));
    println!("{}", matrix_to_string(matrix_cofactors(m.clone())));
    println!("{}", matrix_to_string(matrix_adjugate(m.clone())));
    let m2: Matrix = matrix_mul_scalar(m.clone(), 3.0);
    println!("{}", matrix_to_string(m2.clone()));
    println!("{}", matrix_to_string(matrix_add(m.clone(), m2.clone())));
    println!("{}", matrix_to_string(matrix_sub(m.clone(), m2.clone())));
    println!("{}", matrix_to_string(matrix_pow(m.clone(), 3)));
    let m3: Matrix = matrix_add_row(m.clone(), vec![10.0, 11.0, 12.0]);
    println!("{}", matrix_to_string(m3.clone()));
    let m4: Matrix = matrix_add_column(m2.clone(), vec![8.0, 16.0, 32.0]);
    println!("{}", matrix_to_string(matrix_mul(m3.clone(), m4.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
