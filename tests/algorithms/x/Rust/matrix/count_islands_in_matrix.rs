// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_safe(mut grid: Vec<Vec<i64>>, mut visited: Vec<Vec<bool>>, mut row: i64, mut col: i64) -> bool {
    let rows: i64 = (grid.len() as i64);
    let cols: i64 = (grid[0 as usize].clone().len() as i64);
    let within_bounds: bool = ((((row >= 0) && (row < rows)) && (col >= 0)) && (col < cols));
    if !within_bounds {
        return false
    }
    let visited_cell: bool = visited[row as usize].clone()[col as usize];
    let not_visited: bool = (visited_cell == false);
    return (not_visited && (grid[row as usize].clone()[col as usize] == 1))
};
    fn dfs(mut grid: Vec<Vec<i64>>, visited: &mut Vec<Vec<bool>>, mut row: i64, mut col: i64) {
    let row_nbr: Vec<i64> = vec![-1, -1, -1, 0, 0, 1, 1, 1];
    let col_nbr: Vec<i64> = vec![-1, 0, 1, -1, 1, -1, 0, 1];
    (*visited)[row as usize][col as usize] = true;
    let mut k: i64 = 0;
    while (k < 8) {
        let new_row: i64 = (row + row_nbr[k as usize]);
        let new_col: i64 = (col + col_nbr[k as usize]);
        if is_safe(grid.clone(), visited.clone(), new_row, new_col) {
            dfs(grid.clone(), visited, new_row, new_col);
        }
        k = (k + 1);
    }
};
    fn count_islands(mut grid: Vec<Vec<i64>>) -> i64 {
    let rows: i64 = (grid.len() as i64);
    let cols: i64 = (grid[0 as usize].clone().len() as i64);
    let mut visited: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row_list: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row_list = { let mut _v = row_list.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        visited = { let mut _v = visited.clone(); _v.push(row_list.clone()); _v };
        i = (i + 1);
    }
    let mut count: i64 = 0;
    i = 0;
    while (i < rows) {
        let mut j: i64 = 0;
        while (j < cols) {
            if (!visited[i as usize].clone()[j as usize] && (grid[i as usize].clone()[j as usize] == 1)) {
                dfs(grid.clone(), &mut visited, i, j);
                count = (count + 1);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return count
};
    let grid: Vec<Vec<i64>> = vec![vec![1, 1, 0, 0, 0].clone(), vec![0, 1, 0, 0, 1].clone(), vec![1, 0, 0, 1, 1].clone(), vec![0, 0, 0, 0, 0].clone(), vec![1, 0, 1, 0, 1].clone()];
    println!("{}", count_islands(grid.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
