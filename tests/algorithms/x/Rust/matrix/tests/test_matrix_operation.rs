// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn check_matrix(mut mat: Vec<Vec<f64>>) {
    if (((mat.len() as i64) < 2) || ((mat[0 as usize].clone().len() as i64) < 2)) {
        panic!("Expected a matrix with at least 2x2 dimensions");
    }
};
    let mut add = |mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>| -> Vec<Vec<f64>> {
    check_matrix(a.clone());
    check_matrix(b.clone());
    if (((a.len() as i64) != (b.len() as i64)) || ((a[0 as usize].clone().len() as i64) != (b[0 as usize].clone().len() as i64))) {
        panic!("Matrices must have the same dimensions");
    }
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (a[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row = { let mut _v = row.clone(); _v.push((a[i as usize].clone()[j as usize] + b[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    let mut subtract = |mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>| -> Vec<Vec<f64>> {
    check_matrix(a.clone());
    check_matrix(b.clone());
    if (((a.len() as i64) != (b.len() as i64)) || ((a[0 as usize].clone().len() as i64) != (b[0 as usize].clone().len() as i64))) {
        panic!("Matrices must have the same dimensions");
    }
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (a[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row = { let mut _v = row.clone(); _v.push((a[i as usize].clone()[j as usize] - b[i as usize].clone()[j as usize])); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    let mut scalar_multiply = |mut a: Vec<Vec<f64>>, mut s: f64| -> Vec<Vec<f64>> {
    check_matrix(a.clone());
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (a[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            row = { let mut _v = row.clone(); _v.push((a[i as usize].clone()[j as usize] * s)); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    let mut multiply = |mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>| -> Vec<Vec<f64>> {
    check_matrix(a.clone());
    check_matrix(b.clone());
    if ((a[0 as usize].clone().len() as i64) != (b.len() as i64)) {
        panic!("Invalid dimensions for matrix multiplication");
    }
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (b[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            let mut sum: f64 = 0.0;
            let mut k: i64 = 0;
            while (k < (b.len() as i64)) {
                sum = (sum + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn identity(mut n: i64) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1.0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    let mut transpose = |mut a: Vec<Vec<f64>>| -> Vec<Vec<f64>> {
    check_matrix(a.clone());
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (a[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut j: i64 = 0;
    while (j < cols) {
        let mut row: Vec<f64> = vec![];
        let mut i: i64 = 0;
        while (i < rows) {
            row = { let mut _v = row.clone(); _v.push(a[i as usize].clone()[j as usize]); _v };
            i = (i + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        j = (j + 1);
    }
    return result
};
    let mut mochi_main = || {
    let mat_a: Vec<Vec<f64>> = vec![vec![12.0, 10.0].clone(), vec![3.0, 9.0].clone()];
    let mat_b: Vec<Vec<f64>> = vec![vec![3.0, 4.0].clone(), vec![7.0, 4.0].clone()];
    let mat_c: Vec<Vec<f64>> = vec![vec![3.0, 0.0, 2.0].clone(), vec![2.0, 0.0, -2.0].clone(), vec![0.0, 1.0, 1.0].clone()];
    println!("{}", format!("{:?}", add(mat_a.clone(), mat_b.clone())));
    println!("{}", format!("{:?}", subtract(mat_a.clone(), mat_b.clone())));
    println!("{}", format!("{:?}", multiply(mat_a.clone(), mat_b.clone())));
    println!("{}", format!("{:?}", scalar_multiply(mat_a.clone(), 3.5)));
    println!("{}", format!("{:?}", identity(5)));
    println!("{}", format!("{:?}", transpose(mat_c.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
