// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_square(mut matrix: Vec<Vec<i64>>) -> bool {
    let n: i64 = (matrix.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        if ((matrix[i as usize].clone().len() as i64) != n) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn matrix_multiply(mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (b[0 as usize].clone().len() as i64);
    let inner: i64 = (b.len() as i64);
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            let mut sum: i64 = 0;
            let mut k: i64 = 0;
            while (k < inner) {
                sum = (sum + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn multiply(mut i: i64, mut j: i64, mut k: i64, mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>, result: &mut Vec<Vec<i64>>, mut n: i64, mut m: i64) {
    if (i >= n) {
        return
    }
    if (j >= m) {
        multiply((i + 1), 0, 0, a.clone(), b.clone(), result, n, m);
        return
    }
    if (k >= (b.len() as i64)) {
        multiply(i, (j + 1), 0, a.clone(), b.clone(), result, n, m);
        return
    }
    (*result)[i as usize][j as usize] = (result[i as usize].clone()[j as usize] + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
    multiply(i, j, (k + 1), a.clone(), b.clone(), result, n, m);
};
    let mut matrix_multiply_recursive = |mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>| -> Vec<Vec<i64>> {
    if (((a.len() as i64) == 0) || ((b.len() as i64) == 0)) {
        return vec![]
    }
    if ((((a.len() as i64) != (b.len() as i64)) || !is_square(a.clone())) || !is_square(b.clone())) {
        panic!("Invalid matrix dimensions");
    }
    let n: i64 = (a.len() as i64);
    let m: i64 = (b[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < m) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    multiply(0, 0, 0, a.clone(), b.clone(), &mut result, n, m);
    return result
};
    let matrix_1_to_4: Vec<Vec<i64>> = vec![vec![1, 2].clone(), vec![3, 4].clone()];
    let matrix_5_to_8: Vec<Vec<i64>> = vec![vec![5, 6].clone(), vec![7, 8].clone()];
    let matrix_count_up: Vec<Vec<i64>> = vec![vec![1, 2, 3, 4].clone(), vec![5, 6, 7, 8].clone(), vec![9, 10, 11, 12].clone(), vec![13, 14, 15, 16].clone()];
    let matrix_unordered: Vec<Vec<i64>> = vec![vec![5, 8, 1, 2].clone(), vec![6, 7, 3, 0].clone(), vec![4, 5, 9, 1].clone(), vec![2, 6, 10, 14].clone()];
    println!("{:?}", format!("{:?}", matrix_multiply_recursive(matrix_1_to_4.clone(), matrix_5_to_8.clone())));
    println!("{:?}", format!("{:?}", matrix_multiply_recursive(matrix_count_up.clone(), matrix_unordered.clone())));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
