// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn populate_current_row(mut triangle: Vec<Vec<i64>>, mut current_row_idx: i64) -> Vec<i64> {
    let mut row: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= current_row_idx) {
        if ((i == 0) || (i == current_row_idx)) {
            row = { let mut _v = row.clone(); _v.push(1); _v };
        } else {
            let left: i64 = triangle[(current_row_idx - 1) as usize].clone()[(i - 1) as usize];
            let right: i64 = triangle[(current_row_idx - 1) as usize].clone()[i as usize];
            row = { let mut _v = row.clone(); _v.push((left + right)); _v };
        }
        i = (i + 1);
    }
    return row
};
    fn generate_pascal_triangle(mut num_rows: i64) -> Vec<Vec<i64>> {
    if (num_rows <= 0) {
        return vec![]
    }
    let mut triangle: Vec<Vec<i64>> = vec![];
    let mut row_idx: i64 = 0;
    while (row_idx < num_rows) {
        let row: Vec<i64> = populate_current_row(triangle.clone(), row_idx);
        triangle = { let mut _v = triangle.clone(); _v.push(row.clone()); _v };
        row_idx = (row_idx + 1);
    }
    return triangle
};
    fn row_to_string(mut row: Vec<i64>, mut total_rows: i64, mut row_idx: i64) -> String {
    let mut line: String = String::from("").clone();
    let mut spaces: i64 = ((total_rows - row_idx) - 1);
    let mut s: i64 = 0;
    while (s < spaces) {
        line = format!("{}{}", line, " ");
        s = (s + 1);
    }
    let mut c: i64 = 0;
    while (c <= row_idx) {
        line = format!("{}{}", line, row[c as usize].to_string());
        if (c != row_idx) {
            line = format!("{}{}", line, " ");
        }
        c = (c + 1);
    }
    return line.clone()
};
    fn print_pascal_triangle(mut num_rows: i64) {
    let triangle: Vec<Vec<i64>> = generate_pascal_triangle(num_rows);
    let mut r: i64 = 0;
    while (r < num_rows) {
        let line: String = row_to_string(triangle[r as usize].clone(), num_rows, r).clone();
        println!("{}", line);
        r = (r + 1);
    }
};
    fn mochi_main() {
    print_pascal_triangle(5);
    println!("{}", format!("{:?}", generate_pascal_triangle(5)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
