// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bubble_sort(mut a: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = a.clone();
    let n: i64 = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while ((j + 1) < (n - i)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let temp: i64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = temp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    let mut median = |mut matrix: Vec<Vec<i64>>| -> i64 {
    let mut linear: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (matrix.len() as i64)) {
        let row: Vec<i64> = matrix[i as usize].clone();
        let mut j: i64 = 0;
        while (j < (row.len() as i64)) {
            linear = { let mut _v = linear.clone(); _v.push(row[j as usize]); _v };
            j = (j + 1);
        }
        i = (i + 1);
    }
    let sorted: Vec<i64> = bubble_sort(linear.clone());
    let mid: i64 = (((sorted.len() as i64) - 1) / 2);
    return sorted[mid as usize]
};
    let matrix1: Vec<Vec<i64>> = vec![vec![1, 3, 5].clone(), vec![2, 6, 9].clone(), vec![3, 6, 9].clone()];
    println!("{}", median(matrix1.clone()).to_string());
    let matrix2: Vec<Vec<i64>> = vec![vec![1, 2, 3].clone(), vec![4, 5, 6].clone()];
    println!("{}", median(matrix2.clone()).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
