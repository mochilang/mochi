// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn add(mut matrices: Vec<Vec<Vec<f64>>>) -> Vec<Vec<f64>> {
    let rows: i64 = (matrices[0 as usize].clone().len() as i64);
    let cols: i64 = (matrices[0 as usize].clone()[0 as usize].clone().len() as i64);
    let mut r: i64 = 0;
    let mut result: Vec<Vec<f64>> = vec![];
    while (r < rows) {
        let mut row: Vec<f64> = vec![];
        let mut c: i64 = 0;
        while (c < cols) {
            let mut sum: f64 = 0.0;
            let mut m: i64 = 0;
            while (m < (matrices.len() as i64)) {
                sum = (sum + matrices[m as usize].clone()[r as usize].clone()[c as usize]);
                m = (m + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            c = (c + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return result
};
    fn subtract(mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let rows: i64 = (a.len() as i64);
    let cols: i64 = (a[0 as usize].clone().len() as i64);
    let mut r: i64 = 0;
    let mut result: Vec<Vec<f64>> = vec![];
    while (r < rows) {
        let mut row: Vec<f64> = vec![];
        let mut c: i64 = 0;
        while (c < cols) {
            row = { let mut _v = row.clone(); _v.push((a[r as usize].clone()[c as usize] - b[r as usize].clone()[c as usize])); _v };
            c = (c + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return result
};
    fn scalar_multiply(mut matrix: Vec<Vec<f64>>, mut n: f64) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (matrix.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < (matrix[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push((matrix[i as usize].clone()[j as usize] * n)); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn multiply(mut a: Vec<Vec<f64>>, mut b: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let rowsA: i64 = (a.len() as i64);
    let colsA: i64 = (a[0 as usize].clone().len() as i64);
    let rowsB: i64 = (b.len() as i64);
    let colsB: i64 = (b[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < rowsA) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < colsB) {
            let mut sum: f64 = 0.0;
            let mut k: i64 = 0;
            while (k < colsA) {
                sum = (sum + (a[i as usize].clone()[k as usize] * b[k as usize].clone()[j as usize]));
                k = (k + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn identity(mut n: i64) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(1.0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0.0); _v };
            }
            j = (j + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return result
};
    fn transpose(mut matrix: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let rows: i64 = (matrix.len() as i64);
    let cols: i64 = (matrix[0 as usize].clone().len() as i64);
    let mut result: Vec<Vec<f64>> = vec![];
    let mut c: i64 = 0;
    while (c < cols) {
        let mut row: Vec<f64> = vec![];
        let mut r: i64 = 0;
        while (r < rows) {
            row = { let mut _v = row.clone(); _v.push(matrix[r as usize].clone()[c as usize]); _v };
            r = (r + 1);
        }
        result = { let mut _v = result.clone(); _v.push(row.clone()); _v };
        c = (c + 1);
    }
    return result
};
    fn minor(mut matrix: Vec<Vec<f64>>, mut row: i64, mut column: i64) -> Vec<Vec<f64>> {
    let mut result: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < (matrix.len() as i64)) {
        if (i != row) {
            let mut new_row: Vec<f64> = vec![];
            let mut j: i64 = 0;
            while (j < (matrix[i as usize].clone().len() as i64)) {
                if (j != column) {
                    new_row = { let mut _v = new_row.clone(); _v.push(matrix[i as usize].clone()[j as usize]); _v };
                }
                j = (j + 1);
            }
            result = { let mut _v = result.clone(); _v.push(new_row.clone()); _v };
        }
        i = (i + 1);
    }
    return result
};
    let mut determinant = {
fn determinant(minor: &mut dyn FnMut(Vec<Vec<f64>>, i64, i64) -> Vec<Vec<f64>>, mut matrix: Vec<Vec<f64>>) -> f64 {
    if ((matrix.len() as i64) == 1) {
        return matrix[0 as usize].clone()[0 as usize]
    }
    let mut det: f64 = 0.0;
    let mut c: i64 = 0;
    while (c < (matrix[0 as usize].clone().len() as i64)) {
        let sub: Vec<Vec<f64>> = minor(matrix.clone(), 0, c);
        let sign: f64 = if ((c % 2) == 0) { 1.0 } else { -1.0 };
        det = (det + ((matrix[0 as usize].clone()[c as usize] * determinant(minor, sub.clone())) * sign));
        c = (c + 1);
    }
    return det
}
|mut matrix: Vec<Vec<f64>>| -> f64 { determinant(&mut minor, matrix) }
};
    let mut inverse = |mut matrix: Vec<Vec<f64>>| -> Vec<Vec<f64>> {
    let det: f64 = determinant(matrix.clone());
    if (det == 0.0) {
        return vec![]
    }
    let size: i64 = (matrix.len() as i64);
    let mut matrix_minor: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < size) {
            let m: Vec<Vec<f64>> = minor(matrix.clone(), i, j);
            row = { let mut _v = row.clone(); _v.push(determinant(m.clone())); _v };
            j = (j + 1);
        }
        matrix_minor = { let mut _v = matrix_minor.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut cofactors: Vec<Vec<f64>> = vec![];
    i = 0;
    while (i < size) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < size) {
            let sign: f64 = if (((i + j) % 2) == 0) { 1.0 } else { -1.0 };
            row = { let mut _v = row.clone(); _v.push((matrix_minor[i as usize].clone()[j as usize] * sign)); _v };
            j = (j + 1);
        }
        cofactors = { let mut _v = cofactors.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let adjugate: Vec<Vec<f64>> = transpose(cofactors.clone());
    return scalar_multiply(adjugate.clone(), (1.0 / det))
};
    let mut mochi_main = || {
    let matrix_a: Vec<Vec<f64>> = vec![vec![12.0, 10.0].clone(), vec![3.0, 9.0].clone()];
    let matrix_b: Vec<Vec<f64>> = vec![vec![3.0, 4.0].clone(), vec![7.0, 4.0].clone()];
    let matrix_c: Vec<Vec<f64>> = vec![vec![11.0, 12.0, 13.0, 14.0].clone(), vec![21.0, 22.0, 23.0, 24.0].clone(), vec![31.0, 32.0, 33.0, 34.0].clone(), vec![41.0, 42.0, 43.0, 44.0].clone()];
    let matrix_d: Vec<Vec<f64>> = vec![vec![3.0, 0.0, 2.0].clone(), vec![2.0, 0.0, -2.0].clone(), vec![0.0, 1.0, 1.0].clone()];
    println!("{}", format!("{}{}", format!("{}{}", "Add Operation, add(matrix_a, matrix_b) = ", format!("{:?}", add(vec![matrix_a.clone(), matrix_b.clone()]))), " \n"));
    println!("{}", format!("{}{}", format!("{}{}", "Multiply Operation, multiply(matrix_a, matrix_b) = ", format!("{:?}", multiply(matrix_a.clone(), matrix_b.clone()))), " \n"));
    println!("{}", format!("{}{}", format!("{}{}", "Identity: ", format!("{:?}", identity(5))), "\n"));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Minor of ", format!("{:?}", matrix_c)), " = "), format!("{:?}", minor(matrix_c.clone(), 1, 2))), " \n"));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Determinant of ", format!("{:?}", matrix_b)), " = "), determinant(matrix_b.clone()).to_string()), " \n"));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Inverse of ", format!("{:?}", matrix_d)), " = "), format!("{:?}", inverse(matrix_d.clone()))), "\n"));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
