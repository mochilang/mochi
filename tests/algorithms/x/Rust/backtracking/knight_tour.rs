// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn get_valid_pos(mut position: Vec<i64>, mut n: i64) -> Vec<Vec<i64>> {
    let mut y: i64 = position[0 as usize];
    let mut x: i64 = position[1 as usize];
    let mut positions: Vec<Vec<i64>> = vec![vec![(y + 1), (x + 2)], vec![(y - 1), (x + 2)], vec![(y + 1), (x - 2)], vec![(y - 1), (x - 2)], vec![(y + 2), (x + 1)], vec![(y + 2), (x - 1)], vec![(y - 2), (x + 1)], vec![(y - 2), (x - 1)]];
    let mut permissible: Vec<Vec<i64>> = vec![];
    for idx in 0..(positions.len() as i64) {
        let mut inner: Vec<i64> = positions[idx as usize].clone();
        let mut y_test: i64 = inner[0 as usize];
        let mut x_test: i64 = inner[1 as usize];
        if ((((y_test >= 0) && (y_test < n)) && (x_test >= 0)) && (x_test < n)) {
            permissible = { let mut _v = permissible.clone(); _v.push(inner.clone()); _v };
        }
    }
    return permissible
};
    fn is_complete(mut board: Vec<Vec<i64>>) -> bool {
    for i in 0..(board.len() as i64) {
        let mut row: Vec<i64> = board[i as usize].clone();
        for j in 0..(row.len() as i64) {
            if (row[j as usize] == 0) {
                return false
            }
        }
    }
    return true
};
    fn open_knight_tour_helper(board: &mut Vec<Vec<i64>>, mut pos: Vec<i64>, mut curr: i64) -> bool {
    if is_complete(board.clone()) {
        return true
    }
    let mut moves: Vec<Vec<i64>> = get_valid_pos(pos.clone(), (board.len() as i64));
    for i in 0..(moves.len() as i64) {
        let mut position: Vec<i64> = moves[i as usize].clone();
        let mut y: i64 = position[0 as usize];
        let mut x: i64 = position[1 as usize];
        if (board[y as usize].clone()[x as usize] == 0) {
            (*board)[y as usize][x as usize] = (curr + 1);
            if open_knight_tour_helper(board, position.clone(), (curr + 1)) {
                return true
            }
            (*board)[y as usize][x as usize] = 0;
        }
    }
    return false
};
    fn open_knight_tour(mut n: i64) -> Vec<Vec<i64>> {
    let mut board: Vec<Vec<i64>> = vec![];
    for i in 0..n {
        let mut row: Vec<i64> = vec![];
        for j in 0..n {
            row = { let mut _v = row.clone(); _v.push(0); _v };
        }
        board = { let mut _v = board.clone(); _v.push(row.clone()); _v };
    }
    for i in 0..n {
        for j in 0..n {
            board[i as usize][j as usize] = 1;
            if open_knight_tour_helper(&mut board, vec![i, j], 1) {
                return board
            }
            board[i as usize][j as usize] = 0;
        }
    }
    println!("{}", format!("{}{}", "Open Knight Tour cannot be performed on a board of size ", n.to_string()));
    return board
};
    let mut board: Vec<Vec<i64>> = open_knight_tour(1);
    println!("{}", board[0 as usize].clone()[0 as usize]);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
