// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:42 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_initial_grid: Vec<Vec<i64>> = Vec::new();
static mut g_no_solution: Vec<Vec<i64>> = Vec::new();
static mut g_idx: i64 = 0;
fn main() {
    unsafe {
        g_initial_grid = vec![vec![3, 0, 6, 5, 0, 8, 4, 0, 0], vec![5, 2, 0, 0, 0, 0, 0, 0, 0], vec![0, 8, 7, 0, 0, 0, 0, 3, 1], vec![0, 0, 3, 0, 1, 0, 0, 8, 0], vec![9, 0, 0, 8, 6, 3, 0, 0, 5], vec![0, 5, 0, 0, 9, 0, 6, 0, 0], vec![1, 3, 0, 0, 0, 0, 2, 5, 0], vec![0, 0, 0, 0, 0, 0, 0, 7, 4], vec![0, 0, 5, 2, 0, 6, 3, 0, 0]];
        g_no_solution = vec![vec![5, 0, 6, 5, 0, 8, 4, 0, 3], vec![5, 2, 0, 0, 0, 0, 0, 0, 2], vec![1, 8, 7, 0, 0, 0, 0, 3, 1], vec![0, 0, 3, 0, 1, 0, 0, 8, 0], vec![9, 0, 0, 8, 6, 3, 0, 0, 5], vec![0, 5, 0, 0, 9, 0, 6, 0, 0], vec![1, 3, 0, 0, 0, 0, 2, 5, 0], vec![0, 0, 0, 0, 0, 0, 0, 7, 4], vec![0, 0, 5, 2, 0, 6, 3, 0, 0]];
        g_idx = 0;
                let _start: i64 = _now();
        unsafe fn is_safe(mut grid: Vec<Vec<i64>>, mut row: i64, mut column: i64, mut n: i64) -> bool {
    for i in 0..9 {
        if ((grid[row as usize].clone()[i as usize] == n) || (grid[i as usize].clone()[column as usize] == n)) {
            return false
        }
    }
    for i in 0..3 {
        for j in 0..3 {
            if (grid[((row - (row % 3)) + i) as usize].clone()[((column - (column % 3)) + j) as usize] == n) {
                return false
            }
        }
    }
    return true
};
        unsafe fn find_empty_location(mut grid: Vec<Vec<i64>>) -> Vec<i64> {
    for i in 0..9 {
        for j in 0..9 {
            if (grid[i as usize].clone()[j as usize] == 0) {
                return vec![i, j]
            }
        }
    }
    return vec![]
};
        unsafe fn sudoku(grid: &mut Vec<Vec<i64>>) -> bool {
    let mut loc: Vec<i64> = find_empty_location(grid.clone());
    if ((loc.len() as i64) == 0) {
        return true
    }
    let mut row: i64 = loc[0 as usize];
    let mut column: i64 = loc[1 as usize];
    for digit in 1..10 {
        if is_safe(grid.clone(), row, column, digit) {
            (*grid)[row as usize][column as usize] = digit;
            if sudoku(grid) {
                return true
            }
            (*grid)[row as usize][column as usize] = 0;
        }
    }
    return false
};
        unsafe fn print_solution(mut grid: Vec<Vec<i64>>) {
    for r in 0..(grid.len() as i64) {
        let mut line: String = String::from("").clone();
        for c in 0..(grid[r as usize].clone().len() as i64) {
            line = format!("{}{}", line, grid[r as usize].clone()[c as usize].to_string());
            if (c < ((grid[r as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
        }
        println!("{}", line);
    }
};
        let mut examples: Vec<Vec<Vec<i64>>> = vec![g_initial_grid.clone().clone(), g_no_solution.clone().clone()];
        while (g_idx < (examples.len() as i64)) {
            println!("{}", "\nExample grid:\n====================");
            print_solution(examples[g_idx as usize].clone());
            println!("{}", "\nExample grid solution:");
            if sudoku(&mut examples[g_idx as usize].clone()) {
                print_solution(examples[g_idx as usize].clone());
            } else {
                println!("{}", "Cannot find a solution.");
            }
            g_idx = (g_idx + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
