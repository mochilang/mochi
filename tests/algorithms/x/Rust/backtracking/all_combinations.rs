// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn create_all_state(mut increment: i64, mut total: i64, mut level: i64, current: &mut Vec<i64>, mut result: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    if (level == 0) {
        return { let mut _v = result.clone(); _v.push(current.clone()); _v }
    }
    let mut i: i64 = increment;
    while (i <= ((total - level) + 1)) {
        let mut next_current: Vec<i64> = { let mut _v = current.clone(); _v.push(i); _v };
        result = create_all_state((i + 1), total, (level - 1), &mut next_current, result.clone());
        i = (i + 1);
    }
    return result
};
    fn generate_all_combinations(mut n: i64, mut k: i64) -> Vec<Vec<i64>> {
    if ((k < 0) || (n < 0)) {
        return vec![]
    }
    let mut result: Vec<Vec<i64>> = vec![];
    return create_all_state(1, n, k, &mut vec![], result.clone())
};
    println!("{}", format!("{:?}", generate_all_combinations(4, 2)));
    println!("{}", format!("{:?}", generate_all_combinations(3, 1)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
