// Generated by Mochi transpiler v0.10.59 on 2025-08-06 15:56 +0700
fn create_all_state(mut increment: i64, mut total: i64, mut level: i64, current: &mut Vec<i64>, mut result: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    if (level == 0) {
        return { let mut _v = result.clone(); _v.push(current.clone()); _v }
    }
    let mut i: i64 = increment;
    while (i <= ((total - level) + 1)) {
        let mut next_current: Vec<i64> = { let mut _v = current.clone(); _v.push(i); _v };
        result = create_all_state((i + 1), total, (level - 1), &mut next_current, result.clone());
        i = (i + 1);
    }
    return result
}

fn generate_all_combinations(mut n: i64, mut k: i64) -> Vec<Vec<i64>> {
    if ((k < 0) || (n < 0)) {
        return vec![]
    }
    let mut result: Vec<Vec<i64>> = vec![];
    return create_all_state(1, n, k, &mut vec![], result.clone())
}

fn main() {
    println!("{}", format!("{:?}", generate_all_combinations(4, 2)));
    println!("{}", format!("{:?}", generate_all_combinations(3, 1)));
}
