// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_graph: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_graph = vec![vec![0, 1, 0, 0, 0], vec![1, 0, 1, 0, 1], vec![0, 1, 0, 1, 0], vec![0, 1, 1, 0, 0], vec![0, 1, 0, 0, 0]];
                let _start: i64 = _now();
        unsafe fn valid_coloring(mut neighbours: Vec<i64>, mut colored_vertices: Vec<i64>, mut color: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (neighbours.len() as i64)) {
        if ((neighbours[i as usize] == 1) && (colored_vertices[i as usize] == color)) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn util_color(graph: &mut Vec<Vec<i64>>, mut max_colors: i64, colored_vertices: &mut Vec<i64>, mut index: i64) -> bool {
    if (index == (graph.len() as i64)) {
        return true
    }
    let mut c: i64 = 0;
    while (c < max_colors) {
        if valid_coloring(graph[index as usize].clone(), colored_vertices.clone(), c) {
            (*colored_vertices)[index as usize] = c;
            if util_color(graph, max_colors, colored_vertices, (index + 1)) {
                return true
            }
            (*colored_vertices)[index as usize] = -1;
        }
        c = (c + 1);
    }
    return false
};
        unsafe fn color(graph: &mut Vec<Vec<i64>>, mut max_colors: i64) -> Vec<i64> {
    let mut colored_vertices: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (graph.len() as i64)) {
        colored_vertices = { let mut _v = colored_vertices.clone(); _v.push(-1); _v };
        i = (i + 1);
    }
    if util_color(graph, max_colors, &mut colored_vertices, 0) {
        return colored_vertices
    }
    return vec![]
};
        println!("{:?}", color(&mut g_graph, 3));
        println!("{}", "\n");
        println!("{}", (color(&mut g_graph, 2).len() as i64));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
