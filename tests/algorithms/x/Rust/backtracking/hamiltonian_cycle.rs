// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn valid_connection(mut graph: Vec<Vec<i64>>, mut next_ver: i64, mut curr_ind: i64, mut path: Vec<i64>) -> bool {
    if (graph[path[(curr_ind - 1) as usize] as usize].clone()[next_ver as usize] == 0) {
        return false
    }
    for v in path.iter().cloned() {
        if (v == next_ver) {
            return false
        }
    }
    return true
};
    fn util_hamilton_cycle(graph: &mut Vec<Vec<i64>>, path: &mut Vec<i64>, mut curr_ind: i64) -> bool {
    if (curr_ind == (graph.len() as i64)) {
        return (graph[path[(curr_ind - 1) as usize] as usize].clone()[path[0 as usize] as usize] == 1)
    }
    let mut next_ver: i64 = 0;
    while (next_ver < (graph.len() as i64)) {
        if valid_connection(graph.clone(), next_ver, curr_ind, path.clone()) {
            (*path)[curr_ind as usize] = next_ver;
            if util_hamilton_cycle(graph, path, (curr_ind + 1)) {
                return true
            }
            (*path)[curr_ind as usize] = -1;
        }
        next_ver = (next_ver + 1);
    }
    return false
};
    fn hamilton_cycle(graph: &mut Vec<Vec<i64>>, mut start_index: i64) -> Vec<i64> {
    let mut path: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i < ((graph.len() as i64) + 1)) {
        path[i as usize] = -1;
        i = (i + 1);
    }
    path[0 as usize] = start_index;
    let mut last: i64 = ((path.len() as i64) - 1);
    path[last as usize] = start_index;
    if util_hamilton_cycle(graph, &mut path, 1) {
        return path
    }
    return vec![]
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
