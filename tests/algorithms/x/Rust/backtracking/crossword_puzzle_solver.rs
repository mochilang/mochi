// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_puzzle: Vec<Vec<String>> = Vec::new();
static mut g_words: Vec<String> = Vec::new();
static mut g_used: Vec<bool> = Vec::new();
fn main() {
    unsafe {
        g_puzzle = vec![vec![String::from(""), String::from(""), String::from("")], vec![String::from(""), String::from(""), String::from("")], vec![String::from(""), String::from(""), String::from("")]];
        g_words = vec![String::from("cat"), String::from("dog"), String::from("car")];
        g_used = vec![false, false, false];
                let _start: i64 = _now();
        unsafe fn is_valid(mut puzzle: Vec<Vec<String>>, word: &str, mut row: i64, mut col: i64, mut vertical: bool) -> bool {
    for i in 0..(word.len() as i64) {
        if vertical {
            if (((row + i) >= (puzzle.len() as i64)) || (puzzle[(row + i) as usize].clone()[col as usize].clone().as_str() != "")) {
                return false
            }
        } else {
            if (((col + i) >= (puzzle[0 as usize].clone().len() as i64)) || (puzzle[row as usize].clone()[(col + i) as usize].clone().as_str() != "")) {
                return false
            }
        }
    }
    return true
};
        unsafe fn place_word(puzzle: &mut Vec<Vec<String>>, word: &str, mut row: i64, mut col: i64, mut vertical: bool) {
    for i in 0..(word.len() as i64) {
        let mut ch: String = word.chars().nth(i as usize).unwrap().to_string().clone();
        if vertical {
            (*puzzle)[(row + i) as usize][col as usize] = ch.clone();
        } else {
            (*puzzle)[row as usize][(col + i) as usize] = ch.clone();
        }
    }
};
        unsafe fn remove_word(puzzle: &mut Vec<Vec<String>>, word: &str, mut row: i64, mut col: i64, mut vertical: bool) {
    for i in 0..(word.len() as i64) {
        if vertical {
            (*puzzle)[(row + i) as usize][col as usize] = String::from("");
        } else {
            (*puzzle)[row as usize][(col + i) as usize] = String::from("");
        }
    }
};
        unsafe fn solve_crossword(puzzle: &mut Vec<Vec<String>>, words: &mut Vec<String>, used: &mut Vec<bool>) -> bool {
    for row in 0..(puzzle.len() as i64) {
        for col in 0..(puzzle[0 as usize].clone().len() as i64) {
            if (puzzle[row as usize].clone()[col as usize].clone().as_str() == "") {
                for i in 0..(words.len() as i64) {
                    if !used[i as usize] {
                        let mut word: String = words[i as usize].clone().clone();
                        for vertical in vec![true, false].iter().cloned() {
                            if is_valid(puzzle.clone(), &word, row, col, vertical) {
                                place_word(puzzle, &word, row, col, vertical);
                                (*used)[i as usize] = true;
                                if solve_crossword(puzzle, words, used) {
                                    return true
                                }
                                (*used)[i as usize] = false;
                                remove_word(puzzle, &word, row, col, vertical);
                            }
                        }
                    }
                }
                return false
            }
        }
    }
    return true
};
        if solve_crossword(&mut g_puzzle, &mut g_words, &mut g_used) {
            println!("{}", "Solution found:");
            for row in g_puzzle.clone().iter() {
                println!("{:?}", row);
            }
        } else {
            println!("{}", "No solution found:");
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
