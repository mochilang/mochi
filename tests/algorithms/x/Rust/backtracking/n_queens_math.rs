// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<i64>, mut x: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn repeat(s: &str, mut times: i64) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < times) {
        result = format!("{}{}", result, s);
        i = (i + 1);
    }
    return result.clone()
};
    fn build_board(mut pos: Vec<i64>, mut n: i64) -> Vec<String> {
    let mut board: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (pos.len() as i64)) {
        let mut col: i64 = pos[i as usize];
        let mut line: String = format!("{}{}", format!("{}{}", repeat(&". ", col), "Q "), repeat(&". ", ((n - 1) - col))).clone();
        board = { let mut _v = board.clone(); _v.push(line.clone()); _v };
        i = (i + 1);
    }
    return board
};
    fn depth_first_search(pos: &mut Vec<i64>, dr: &mut Vec<i64>, dl: &mut Vec<i64>, mut n: i64) -> Vec<Vec<String>> {
    let mut row = (pos.len() as i64);
    if (row == n) {
        let mut single: Vec<Vec<String>> = vec![];
        single = { let mut _v = single.clone(); _v.push(build_board(pos.clone(), n)); _v };
        return single
    }
    let mut boards: Vec<Vec<String>> = vec![];
    let mut col: i64 = 0;
    while (col < n) {
        if ((pos.contains(&col) || dr.contains(&(row - col))) || dl.contains(&(row + col))) {
            col = (col + 1);
            continue
        }
        let mut result: Vec<Vec<String>> = depth_first_search(&mut { let mut _v = pos.clone(); _v.push(col); _v }, &mut { let mut _v = dr.clone(); _v.push((row - col)); _v }, &mut { let mut _v = dl.clone(); _v.push((row + col)); _v }, n);
        boards = vec![boards, result].concat();
        col = (col + 1);
    }
    return boards
};
    fn n_queens_solution(mut n: i64) -> i64 {
    let mut boards: Vec<Vec<String>> = depth_first_search(&mut vec![], &mut vec![], &mut vec![], n);
    let mut i: i64 = 0;
    while (i < (boards.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (boards[i as usize].clone().len() as i64)) {
            println!("{}", boards[i as usize].clone()[j as usize].clone());
            j = (j + 1);
        }
        println!("{}", "");
        i = (i + 1);
    }
    println!("{}", format!("{} {}", (boards.len() as i64), "solutions were found.").trim_end());
    return (boards.len() as i64)
};
    n_queens_solution(4);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
