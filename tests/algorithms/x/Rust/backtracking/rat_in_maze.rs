// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_maze: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_maze = vec![vec![0, 1, 0, 1, 1], vec![0, 0, 0, 0, 0], vec![1, 0, 1, 0, 1], vec![0, 0, 1, 0, 0], vec![1, 0, 0, 1, 0]];
                let _start: i64 = _now();
        unsafe fn run_maze(maze: &mut Vec<Vec<i64>>, mut i: i64, mut j: i64, mut dr: i64, mut dc: i64, sol: &mut Vec<Vec<i64>>) -> bool {
    let mut size = (maze.len() as i64);
    if (((i == dr) && (j == dc)) && (maze[i as usize].clone()[j as usize] == 0)) {
        (*sol)[i as usize][j as usize] = 0;
        return true
    }
    let mut lower_flag: bool = ((i >= 0) && (j >= 0));
    let mut upper_flag: bool = ((i < size) && (j < size));
    if (lower_flag && upper_flag) {
        let mut block_flag: bool = ((sol[i as usize].clone()[j as usize] == 1) && (maze[i as usize].clone()[j as usize] == 0));
        if block_flag {
            (*sol)[i as usize][j as usize] = 0;
            if (((run_maze(maze, (i + 1), j, dr, dc, sol) || run_maze(maze, i, (j + 1), dr, dc, sol)) || run_maze(maze, (i - 1), j, dr, dc, sol)) || run_maze(maze, i, (j - 1), dr, dc, sol)) {
                return true
            }
            (*sol)[i as usize][j as usize] = 1;
            return false
        }
    }
    return false
};
        unsafe fn solve_maze(mut maze: Vec<Vec<i64>>, mut sr: i64, mut sc: i64, mut dr: i64, mut dc: i64) -> Vec<Vec<i64>> {
    let mut size = (maze.len() as i64);
    if !((((((((0 <= sr) && (sr < size)) && (0 <= sc)) && (sc < size)) && (0 <= dr)) && (dr < size)) && (0 <= dc)) && (dc < size)) {
        panic!("Invalid source or destination coordinates");
    }
    let mut sol: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < size) {
            row = { let mut _v = row.clone(); _v.push(1); _v };
            j = (j + 1);
        }
        sol = { let mut _v = sol.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut solved: bool = run_maze(&mut maze, sr, sc, dr, dc, &mut sol);
    if solved {
        return sol
    } else {
        panic!("No solution exists!");
    }
};
        let mut n: i64 = ((g_maze.clone().len() as i64) - 1);
        println!("{}", format!("{:?}", solve_maze(g_maze.clone().clone(), 0, 0, n, n)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
