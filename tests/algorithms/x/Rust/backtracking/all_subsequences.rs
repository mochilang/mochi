// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seq: Vec<String> = Vec::new();
static mut g_seq2: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_seq = vec![1.to_string(), 2.to_string(), 3.to_string()];
        g_seq2 = vec![String::from("A").clone(), String::from("B").clone(), String::from("C").clone()];
                let _start: i64 = _now();
        unsafe fn create_state_space_tree(sequence: &mut Vec<String>, current: &mut Vec<String>, mut index: i64) {
    if (index == (sequence.len() as i64)) {
        println!("{:?}", current);
        return
    }
    create_state_space_tree(sequence, current, (index + 1));
    let mut with_elem: Vec<String> = { let mut _v = current.clone(); _v.push(sequence[index as usize].clone()); _v };
    create_state_space_tree(sequence, &mut with_elem, (index + 1));
};
        unsafe fn generate_all_subsequences(sequence: &mut Vec<String>) {
    create_state_space_tree(sequence, &mut vec![], 0);
};
        generate_all_subsequences(&mut g_seq);
        generate_all_subsequences(&mut g_seq2);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
