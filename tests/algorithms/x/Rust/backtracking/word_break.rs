// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut words: Vec<String>, target: &str) -> bool {
    for w in words.iter().cloned() {
        if (w == target) {
            return true
        }
    }
    return false
};
    fn backtrack(mut s: String, word_dict: &mut Vec<String>, mut start: i64) -> bool {
    if (start == (s.len() as i64)) {
        return true
    }
    let mut end: i64 = (start + 1);
    while (end <= (s.len() as i64)) {
        let mut substr: String = { let tmp = &s; tmp.chars().skip(start as usize).take((end - start) as usize).collect::<String>() }.clone();
        if (word_dict.contains(&substr) && backtrack(s.clone(), word_dict, end)) {
            return true
        }
        end = (end + 1);
    }
    return false
};
    fn word_break(mut s: String, word_dict: &mut Vec<String>) -> bool {
    return backtrack(s.clone(), word_dict, 0)
};
    println!("{}", word_break(String::from("leetcode"), &mut vec![String::from("leet"), String::from("code")]).to_string());
    println!("{}", word_break(String::from("applepenapple"), &mut vec![String::from("apple"), String::from("pen")]).to_string());
    println!("{}", word_break(String::from("catsandog"), &mut vec![String::from("cats"), String::from("dog"), String::from("sand"), String::from("and"), String::from("cat")]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
