// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn get_value(mut keys: Vec<String>, mut values: Vec<String>, key: &str) -> String {
    let mut i: i64 = 0;
    while (i < (keys.len() as i64)) {
        if (keys[i as usize].clone() == key) {
            return values[i as usize].clone()
        }
        i = (i + 1);
    }
    return String::new().clone()
};
    fn contains_value(mut values: Vec<String>, value: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        if (values[i as usize].clone() == value) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn backtrack(mut pattern: String, mut input_string: String, mut pi: i64, mut si: i64, keys: &mut Vec<String>, values: &mut Vec<String>) -> bool {
    if ((pi == (pattern.len() as i64)) && (si == (input_string.len() as i64))) {
        return true
    }
    if ((pi == (pattern.len() as i64)) || (si == (input_string.len() as i64))) {
        return false
    }
    let mut ch: String = { let tmp = &pattern; tmp.chars().skip(pi as usize).take(((pi + 1) - pi) as usize).collect::<String>() }.clone();
    let mut mapped: String = get_value(keys.clone(), values.clone(), &ch).clone();
    if !mapped.is_empty() {
        if ({ let tmp = &input_string; tmp.chars().skip(si as usize).take(((si + (mapped.len() as i64)) - si) as usize).collect::<String>() }.as_str() == mapped.as_str()) {
            return backtrack(pattern.clone(), input_string.clone(), (pi + 1), (si + (mapped.len() as i64)), keys, values)
        }
        return false
    }
    let mut end: i64 = (si + 1);
    while (end <= (input_string.len() as i64)) {
        let mut substr: String = { let tmp = &input_string; tmp.chars().skip(si as usize).take((end - si) as usize).collect::<String>() }.clone();
        if contains_value(values.clone(), &substr) {
            end = (end + 1);
            continue
        }
        let mut new_keys: Vec<String> = { let mut _v = keys.clone(); _v.push(ch.clone()); _v };
        let mut new_values: Vec<String> = { let mut _v = values.clone(); _v.push(substr.clone()); _v };
        if backtrack(pattern.clone(), input_string.clone(), (pi + 1), end, &mut new_keys, &mut new_values) {
            return true
        }
        end = (end + 1);
    }
    return false
};
    fn match_word_pattern(mut pattern: String, mut input_string: String) -> bool {
    let mut keys: Vec<String> = vec![];
    let mut values: Vec<String> = vec![];
    return backtrack(pattern.clone(), input_string.clone(), 0, 0, &mut keys, &mut values)
};
    fn mochi_main() {
    println!("{}", if match_word_pattern(String::from("aba"), String::from("GraphTreesGraph")) { 1 } else { 0 });
    println!("{}", if match_word_pattern(String::from("xyx"), String::from("PythonRubyPython")) { 1 } else { 0 });
    println!("{}", if match_word_pattern(String::from("GG"), String::from("PythonJavaPython")) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
