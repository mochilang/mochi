// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn minimax(mut depth: i64, mut node_index: i64, mut is_max: bool, mut scores: Vec<i64>, mut height: i64) -> i64 {
    if (depth < 0) {
        panic!("Depth cannot be less than 0");
    }
    if ((scores.len() as i64) == 0) {
        panic!("Scores cannot be empty");
    }
    if (depth == height) {
        return scores[node_index as usize]
    }
    if is_max {
        let mut left: i64 = minimax((depth + 1), (node_index * 2), false, scores.clone(), height);
        let mut right: i64 = minimax((depth + 1), ((node_index * 2) + 1), false, scores.clone(), height);
        if (left > right) {
            return left
        } else {
            return right
        }
    }
    let mut left: i64 = minimax((depth + 1), (node_index * 2), true, scores.clone(), height);
    let mut right: i64 = minimax((depth + 1), ((node_index * 2) + 1), true, scores.clone(), height);
    if (left < right) {
        return left
    } else {
        return right
    }
};
    fn tree_height(mut n: i64) -> i64 {
    let mut h: i64 = 0;
    let mut v: i64 = n;
    while (v > 1) {
        v = (v / 2);
        h = (h + 1);
    }
    return h
};
    fn mochi_main() {
    let mut scores: Vec<i64> = vec![90, 23, 6, 33, 21, 65, 123, 34423];
    let mut height: i64 = tree_height((scores.len() as i64));
    println!("{}", format!("{}{}", "Optimal value : ", minimax(0, 0, true, scores.clone(), height).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
