// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:42 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn create_board(mut n: i64) -> Vec<Vec<i64>> {
    let mut board: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        board = { let mut _v = board.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return board
};
    fn is_safe(mut board: Vec<Vec<i64>>, mut row: i64, mut column: i64) -> bool {
    let mut n = (board.len() as i64);
    let mut i: i64 = 0;
    while (i < row) {
        if (board[i as usize].clone()[column as usize] == 1) {
            return false
        }
        i = (i + 1);
    }
    i = (row - 1);
    let mut j: i64 = (column - 1);
    while ((i >= 0) && (j >= 0)) {
        if (board[i as usize].clone()[j as usize] == 1) {
            return false
        }
        i = (i - 1);
        j = (j - 1);
    }
    i = (row - 1);
    j = (column + 1);
    while ((i >= 0) && (j < n)) {
        if (board[i as usize].clone()[j as usize] == 1) {
            return false
        }
        i = (i - 1);
        j = (j + 1);
    }
    return true
};
    fn row_string(mut row: Vec<i64>) -> String {
    let mut s: String = String::from("").clone();
    let mut j: i64 = 0;
    while (j < (row.len() as i64)) {
        if (row[j as usize] == 1) {
            s = format!("{}{}", s, "Q ");
        } else {
            s = format!("{}{}", s, ". ");
        }
        j = (j + 1);
    }
    return s.clone()
};
    fn printboard(mut board: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (board.len() as i64)) {
        println!("{}", row_string(board[i as usize].clone()));
        i = (i + 1);
    }
};
    fn solve(board: &mut Vec<Vec<i64>>, mut row: i64) -> i64 {
    if (row >= (board.len() as i64)) {
        printboard(board.clone());
        println!("{}", "");
        return 1
    }
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (board.len() as i64)) {
        if is_safe(board.clone(), row, i) {
            (*board)[row as usize][i as usize] = 1;
            count = (count + solve(board, (row + 1)));
            (*board)[row as usize][i as usize] = 0;
        }
        i = (i + 1);
    }
    return count
};
    fn n_queens(mut n: i64) -> i64 {
    let mut board: Vec<Vec<i64>> = create_board(n);
    let mut total: i64 = solve(&mut board, 0);
    println!("{}", format!("{}{}", "The total number of solutions are: ", total.to_string()));
    return total
};
    n_queens(4);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
