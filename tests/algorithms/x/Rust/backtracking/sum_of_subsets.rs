// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sum_list(mut nums: Vec<i64>) -> i64 {
    let mut s: i64 = 0;
    for n in nums.iter().cloned() {
        s = (s + n);
    }
    return s
};
    fn create_state_space_tree(mut nums: Vec<i64>, mut max_sum: i64, mut num_index: i64, path: &mut Vec<i64>, mut curr_sum: i64, mut remaining_sum: i64) -> Vec<Vec<i64>> {
    let mut result: Vec<Vec<i64>> = vec![];
    if ((curr_sum > max_sum) || ((curr_sum + remaining_sum) < max_sum)) {
        return result
    }
    if (curr_sum == max_sum) {
        result = { let mut _v = result.clone(); _v.push(path.clone()); _v };
        return result
    }
    let mut index: i64 = num_index;
    while (index < (nums.len() as i64)) {
        let mut value: i64 = nums[index as usize];
        let mut subres: Vec<Vec<i64>> = create_state_space_tree(nums.clone(), max_sum, (index + 1), &mut { let mut _v = path.clone(); _v.push(value); _v }, (curr_sum + value), (remaining_sum - value));
        let mut j: i64 = 0;
        while (j < (subres.len() as i64)) {
            result = { let mut _v = result.clone(); _v.push(subres[j as usize].clone()); _v };
            j = (j + 1);
        }
        index = (index + 1);
    }
    return result
};
    fn generate_sum_of_subsets_solutions(nums: &mut Vec<i64>, mut max_sum: i64) -> Vec<Vec<i64>> {
    let mut total: i64 = sum_list(nums.clone());
    return create_state_space_tree(nums.clone(), max_sum, 0, &mut vec![], 0, total)
};
    fn mochi_main() {
    println!("{:?}", generate_sum_of_subsets_solutions(&mut vec![3, 34, 4, 12, 5, 2], 9));;
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
