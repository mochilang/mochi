// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<i64>, mut x: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn get_point_key(mut len_board: i64, mut len_board_column: i64, mut row: i64, mut column: i64) -> i64 {
    return (((len_board * len_board_column) * row) + column)
};
    fn search_from(board: &mut Vec<Vec<String>>, mut word: String, mut row: i64, mut column: i64, mut word_index: i64, visited: &mut Vec<i64>) -> bool {
    if (board[row as usize].clone()[column as usize].clone().as_str() != { let tmp = &word; tmp.chars().skip(word_index as usize).take(((word_index + 1) - word_index) as usize).collect::<String>() }.as_str()) {
        return false
    }
    if (word_index == ((word.len() as i64) - 1)) {
        return true
    }
    let mut len_board = (board.len() as i64);
    let mut len_board_column = (board[0 as usize].clone().len() as i64);
    let mut dir_i: Vec<i64> = vec![0, 0, -1, 1];
    let mut dir_j: Vec<i64> = vec![1, -1, 0, 0];
    let mut k: i64 = 0;
    while (k < 4) {
        let mut next_i: i64 = (row + dir_i[k as usize]);
        let mut next_j: i64 = (column + dir_j[k as usize]);
        if !((((0 <= next_i) && (next_i < len_board)) && (0 <= next_j)) && (next_j < len_board_column)) {
            k = (k + 1);
            continue
        }
        let mut key: i64 = get_point_key(len_board, len_board_column, next_i, next_j);
        if visited.contains(&key) {
            k = (k + 1);
            continue
        }
        let mut new_visited: Vec<i64> = { let mut _v = visited.clone(); _v.push(key); _v };
        if search_from(board, word.clone(), next_i, next_j, (word_index + 1), &mut new_visited) {
            return true
        }
        k = (k + 1);
    }
    return false
};
    fn word_exists(board: &mut Vec<Vec<String>>, mut word: String) -> bool {
    let mut len_board = (board.len() as i64);
    let mut len_board_column = (board[0 as usize].clone().len() as i64);
    let mut i: i64 = 0;
    while (i < len_board) {
        let mut j: i64 = 0;
        while (j < len_board_column) {
            let mut key: i64 = get_point_key(len_board, len_board_column, i, j);
            let mut visited: Vec<i64> = { let mut _v = vec![].clone(); _v.push(key); _v };
            if search_from(board, word.clone(), i, j, 0, &mut visited) {
                return true
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return false
};
    fn mochi_main() {
    let mut board: Vec<Vec<String>> = vec![vec![String::from("A"), String::from("B"), String::from("C"), String::from("E")], vec![String::from("S"), String::from("F"), String::from("C"), String::from("S")], vec![String::from("A"), String::from("D"), String::from("E"), String::from("E")]];
    println!("{}", if word_exists(&mut board, String::from("ABCCED")) { 1 } else { 0 });
    println!("{}", if word_exists(&mut board, String::from("SEE")) { 1 } else { 0 });
    println!("{}", if word_exists(&mut board, String::from("ABCB")) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
