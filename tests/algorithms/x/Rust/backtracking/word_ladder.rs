// Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_alphabet: String = String::new();
fn main() {
    unsafe {
        g_alphabet = String::from("abcdefghijklmnopqrstuvwxyz").clone();
                let _start: i64 = _now();
        unsafe fn contains(mut xs: Vec<String>, x: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn remove_item(mut xs: Vec<String>, x: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut removed: bool = false;
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (!removed && (xs[i as usize].clone() == x)) {
            removed = true;
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
        unsafe fn word_ladder(current: &str, mut path: Vec<String>, target: &str, mut words: Vec<String>) -> Vec<String> {
    if (current == target) {
        return path
    }
    let mut i: i64 = 0;
    while (i < (current.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (g_alphabet.len() as i64)) {
            let mut c: String = { let tmp = &g_alphabet; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.clone();
            let mut transformed: String = format!("{}{}", format!("{}{}", { let tmp = &current; tmp.chars().skip(0 as usize).take((i - 0) as usize).collect::<String>() }, c), { let tmp = &current; tmp.chars().skip((i + 1) as usize).take(((current.len() as i64) - (i + 1)) as usize).collect::<String>() }).clone();
            if words.contains(&transformed) {
                let mut new_words: Vec<String> = remove_item(words.clone(), &transformed);
                let mut new_path: Vec<String> = { let mut _v = path.clone(); _v.push(transformed.clone()); _v };
                let mut result: Vec<String> = word_ladder(&transformed, new_path.clone(), target, new_words.clone());
                if ((result.len() as i64) > 0) {
                    return result
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return vec![]
};
        unsafe fn mochi_main() {
    let mut w1: Vec<String> = vec![String::from("hot").clone(), String::from("dot").clone(), String::from("dog").clone(), String::from("lot").clone(), String::from("log").clone(), String::from("cog").clone()];
    println!("{}", format!("{:?}", word_ladder(&"hit", vec![String::from("hit")], &"cog", w1.clone())));
    let mut w2: Vec<String> = vec![String::from("hot").clone(), String::from("dot").clone(), String::from("dog").clone(), String::from("lot").clone(), String::from("log").clone()];
    println!("{}", format!("{:?}", word_ladder(&"hit", vec![String::from("hit")], &"cog", w2.clone())));
    let mut w3: Vec<String> = vec![String::from("load").clone(), String::from("goad").clone(), String::from("gold").clone(), String::from("lead").clone(), String::from("lord").clone()];
    println!("{}", format!("{:?}", word_ladder(&"lead", vec![String::from("lead")], &"gold", w3.clone())));
    let mut w4: Vec<String> = vec![String::from("came").clone(), String::from("cage").clone(), String::from("code").clone(), String::from("cade").clone(), String::from("gave").clone()];
    println!("{}", format!("{:?}", word_ladder(&"game", vec![String::from("game")], &"code", w4.clone())));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
