warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:74:2
   |
74 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:77:2
   |
77 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:80:2
   |
80 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:83:2
   |
83 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:92:2
   |
92 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:113:2
    |
113 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:131:2
    |
131 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:134:2
    |
134 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:147:2
    |
147 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around `return` value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:82:12
   |
82 |     return (t.value / t.weight)
   |            ^                  ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
82 -     return (t.value / t.weight)
82 +     return t.value / t.weight
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:87:11
   |
87 |     while (((i < (values.len() as i64)) && (i < (names.len() as i64))) && (i < (weights.len() as i64))) {
   |           ^                                                                                           ^
   |
help: remove these parentheses
   |
87 -     while (((i < (values.len() as i64)) && (i < (names.len() as i64))) && (i < (weights.len() as i64))) {
87 +     while ((i < (values.len() as i64)) && (i < (names.len() as i64))) && (i < (weights.len() as i64)) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:89:13
   |
89 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
89 -         i = (i + 1);
89 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:96:11
   |
96 |     while (i < (items.len() as i64)) {
   |           ^                        ^
   |
help: remove these parentheses
   |
96 -     while (i < (items.len() as i64)) {
96 +     while i < (items.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:98:13
   |
98 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
98 -         i = (i + 1);
98 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:101:11
    |
101 |     while (j < (arr.len() as i64)) {
    |           ^                      ^
    |
help: remove these parentheses
    |
101 -     while (j < (arr.len() as i64)) {
101 +     while j < (arr.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:104:26
    |
104 |         let mut k: i64 = (j - 1);
    |                          ^     ^
    |
help: remove these parentheses
    |
104 -         let mut k: i64 = (j - 1);
104 +         let mut k: i64 = j - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:105:15
    |
105 |         while ((k >= 0) && (key_func(arr[k as usize].clone()) < key_val)) {
    |               ^                                                         ^
    |
help: remove these parentheses
    |
105 -         while ((k >= 0) && (key_func(arr[k as usize].clone()) < key_val)) {
105 +         while (k >= 0) && (key_func(arr[k as usize].clone()) < key_val) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:107:17
    |
107 |             k = (k - 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
107 -             k = (k - 1);
107 +             k = k - 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:110:13
    |
110 |         j = (j + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
110 -         j = (j + 1);
110 +         j = j + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:120:11
    |
120 |     while (i < (items_copy.len() as i64)) {
    |           ^                             ^
    |
help: remove these parentheses
    |
120 -     while (i < (items_copy.len() as i64)) {
120 +     while i < (items_copy.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:123:12
    |
123 |         if ((total_cost + w) <= max_cost) {
    |            ^                            ^
    |
help: remove these parentheses
    |
123 -         if ((total_cost + w) <= max_cost) {
123 +         if (total_cost + w) <= max_cost {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:125:26
    |
125 |             total_cost = (total_cost + w);
    |                          ^              ^
    |
help: remove these parentheses
    |
125 -             total_cost = (total_cost + w);
125 +             total_cost = total_cost + w;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:126:27
    |
126 |             total_value = (total_value + get_value(it.clone()));
    |                           ^                                   ^
    |
help: remove these parentheses
    |
126 -             total_value = (total_value + get_value(it.clone()));
126 +             total_value = total_value + get_value(it.clone());
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:128:13
    |
128 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
128 -         i = (i + 1);
128 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:138:11
    |
138 |     while (i < (ts.len() as i64)) {
    |           ^                     ^
    |
help: remove these parentheses
    |
138 -     while (i < (ts.len() as i64)) {
138 +     while i < (ts.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:140:12
    |
140 |         if (i < ((ts.len() as i64) - 1)) {
    |            ^                           ^
    |
help: remove these parentheses
    |
140 -         if (i < ((ts.len() as i64) - 1)) {
140 +         if i < ((ts.len() as i64) - 1) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:143:13
    |
143 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
143 -         i = (i + 1);
143 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:157:28
    |
157 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
157 -     let duration_us: i64 = ((_end - _start) / 1000);
157 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:72:18
   |
72 |     fn get_value(mut t: Thing) -> f64 {
   |                  ----^
   |                  |
   |                  help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:75:19
   |
75 |     fn get_weight(mut t: Thing) -> f64 {
   |                   ----^
   |                   |
   |                   help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:78:17
   |
78 |     fn get_name(mut t: Thing) -> String {
   |                 ----^
   |                 |
   |                 help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:81:21
   |
81 |     fn value_weight(mut t: Thing) -> f64 {
   |                     ----^
   |                     |
   |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:84:19
   |
84 |     fn build_menu(mut names: Vec<String>, mut values: Vec<f64>, mut weights: Vec<f64>) -> Vec<Thing> {
   |                   ----^^^^^
   |                   |
   |                   help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:84:43
   |
84 |     fn build_menu(mut names: Vec<String>, mut values: Vec<f64>, mut weights: Vec<f64>) -> Vec<Thing> {
   |                                           ----^^^^^^
   |                                           |
   |                                           help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:84:65
   |
84 |     fn build_menu(mut names: Vec<String>, mut values: Vec<f64>, mut weights: Vec<f64>) -> Vec<Thing> {
   |                                                                 ----^^^^^^^
   |                                                                 |
   |                                                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:93:18
   |
93 |     fn sort_desc(mut items: Vec<Thing>, key_func: &mut impl FnMut(Thing) -> f64) -> Vec<Thing> {
   |                  ----^^^^^
   |                  |
   |                  help: remove this `mut`

error[E0382]: borrow of moved value: `key_item`
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:109:33
    |
102 |         let key_item: Thing = arr[j as usize].clone();
    |             -------- move occurs because `key_item` has type `Thing`, which does not implement the `Copy` trait
103 |         let key_val = key_func(key_item);
    |                                -------- value moved here
...
109 |         arr[(k + 1) as usize] = key_item.clone();
    |                                 ^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
103 |         let key_val = key_func(key_item.clone());
    |                                        ++++++++

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:114:15
    |
114 |     fn greedy(mut items: Vec<Thing>, mut max_cost: f64, key_func: &mut impl FnMut(Thing) -> f64) -> GreedyResult {
    |               ----^^^^^
    |               |
    |               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:114:38
    |
114 |     fn greedy(mut items: Vec<Thing>, mut max_cost: f64, key_func: &mut impl FnMut(Thing) -> f64) -> GreedyResult {
    |                                      ----^^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:132:24
    |
132 |     fn thing_to_string(mut t: Thing) -> String {
    |                        ----^
    |                        |
    |                        help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/other/greedy.rs:135:23
    |
135 |     fn list_to_string(mut ts: Vec<Thing>) -> String {
    |                       ----^^
    |                       |
    |                       help: remove this `mut`

error: aborting due to 1 previous error; 40 warnings emitted

For more information about this error, try `rustc --explain E0382`.
