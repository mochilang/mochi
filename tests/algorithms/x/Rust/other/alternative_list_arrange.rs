// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone)]
enum Item {
    Int { value: i64 },
    Str { value: String },
}

fn main() {
        let _start: i64 = _now();
    fn from_int(mut x: i64) -> Item {
    return Item::Int { value: x }
};
    fn from_string(mut s: String) -> Item {
    return Item::Str { value: s.clone() }
};
    fn item_to_string(mut it: Item) -> String {
    return match it { Item::Int { value: v } => v.to_string(), Item::Str { value: s } => s, }.to_string().clone()
};
    fn alternative_list_arrange(mut first: Vec<Item>, mut second: Vec<Item>) -> Vec<Item> {
    let len1: i64 = (first.len() as i64);
    let len2: i64 = (second.len() as i64);
    let abs_len: i64 = if (len1 > len2) { len1 } else { len2 };
    let mut result: Vec<Item> = vec![];
    let mut i: i64 = 0;
    while (i < abs_len) {
        if (i < len1) {
            result = { let mut _v = result.clone(); _v.push(first[i as usize].clone()); _v };
        }
        if (i < len2) {
            result = { let mut _v = result.clone(); _v.push(second[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    return result
};
    fn list_to_string(mut xs: Vec<Item>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, item_to_string(xs[i as usize].clone()));
        if (i < ((xs.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    let example1: Vec<Item> = alternative_list_arrange(vec![from_int(1).clone(), from_int(2).clone(), from_int(3).clone(), from_int(4).clone(), from_int(5).clone()], vec![from_string(String::from("A")).clone(), from_string(String::from("B")).clone(), from_string(String::from("C")).clone()]);
    println!("{}", list_to_string(example1.clone()));
    let example2: Vec<Item> = alternative_list_arrange(vec![from_string(String::from("A")).clone(), from_string(String::from("B")).clone(), from_string(String::from("C")).clone()], vec![from_int(1).clone(), from_int(2).clone(), from_int(3).clone(), from_int(4).clone(), from_int(5).clone()]);
    println!("{}", list_to_string(example2.clone()));
    let example3: Vec<Item> = alternative_list_arrange(vec![from_string(String::from("X")).clone(), from_string(String::from("Y")).clone(), from_string(String::from("Z")).clone()], vec![from_int(9).clone(), from_int(8).clone(), from_int(7).clone(), from_int(6).clone()]);
    println!("{}", list_to_string(example3.clone()));
    let example4: Vec<Item> = alternative_list_arrange(vec![from_int(1).clone(), from_int(2).clone(), from_int(3).clone(), from_int(4).clone(), from_int(5).clone()], vec![]);
    println!("{}", list_to_string(example4.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
