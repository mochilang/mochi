// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct NumberContainer {
    numbermap: HashMap<i64, Vec<i64>>,
    indexmap: HashMap<i64, i64>,
}
impl std::fmt::Display for NumberContainer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"numbermap\": {:?}", self.numbermap)?;
        write!(f, ", ")?;
        write!(f, "\"indexmap\": {:?}", self.indexmap)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn remove_at(mut xs: Vec<i64>, mut idx: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i != idx) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn insert_at(mut xs: Vec<i64>, mut idx: i64, mut val: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i == idx) {
            res = { let mut _v = res.clone(); _v.push(val); _v };
        }
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    if (idx == (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(val); _v };
    }
    return res
};
    fn binary_search_delete(mut array: Vec<i64>, mut item: i64) -> Vec<i64> {
    let mut low: i64 = 0;
    let mut high: i64 = ((array.len() as i64) - 1);
    let mut arr: Vec<i64> = array.clone();
    while (low <= high) {
        let mid: i64 = ((low + high) / 2);
        if (arr[mid as usize] == item) {
            arr = remove_at(arr.clone(), mid);
            return arr
        } else if (arr[mid as usize] < item) {
            low = (mid + 1);
        } else {
            high = (mid - 1);
        }
    }
    println!("{}", "ValueError: Either the item is not in the array or the array was unsorted");
    return arr
};
    fn binary_search_insert(mut array: Vec<i64>, mut index: i64) -> Vec<i64> {
    let mut low: i64 = 0;
    let mut high: i64 = ((array.len() as i64) - 1);
    let mut arr: Vec<i64> = array.clone();
    while (low <= high) {
        let mid: i64 = ((low + high) / 2);
        if (arr[mid as usize] == index) {
            arr = insert_at(arr.clone(), (mid + 1), index);
            return arr
        } else if (arr[mid as usize] < index) {
            low = (mid + 1);
        } else {
            high = (mid - 1);
        }
    }
    arr = insert_at(arr.clone(), low, index);
    return arr
};
    fn change(mut cont: NumberContainer, mut idx: i64, mut num: i64) -> NumberContainer {
    let mut numbermap: HashMap<i64, Vec<i64>> = cont.numbermap.clone();
    let mut indexmap: HashMap<i64, i64> = cont.indexmap.clone();
    if indexmap.contains_key(&idx) {
        let old: i64 = indexmap.get(&idx).cloned().unwrap_or_default();
        let indexes: Vec<i64> = numbermap.get(&old).cloned().unwrap_or_default();
        if ((indexes.len() as i64) == 1) {
            numbermap.insert(old.clone(), vec![]);
        } else {
            numbermap.insert(old.clone(), binary_search_delete(indexes.clone(), idx));
        }
    }
    indexmap.insert(idx.clone(), num);
    if numbermap.contains_key(&num) {
        numbermap.insert(num.clone(), binary_search_insert(numbermap.get(&num).cloned().unwrap_or_default(), idx));
    } else {
        numbermap.insert(num.clone(), vec![idx]);
    }
    return NumberContainer {numbermap: numbermap.clone(), indexmap: indexmap.clone()}
};
    fn find(mut cont: NumberContainer, mut num: i64) -> i64 {
    let numbermap: HashMap<i64, Vec<i64>> = cont.numbermap.clone();
    if numbermap.contains_key(&num) {
        let arr: Vec<i64> = numbermap.get(&num).cloned().unwrap_or_default();
        if ((arr.len() as i64) > 0) {
            return arr[0 as usize]
        }
    }
    return -1
};
    let mut nm: HashMap<i64, Vec<i64>> = HashMap::new();
    let mut im: HashMap<i64, i64> = HashMap::new();
    let mut cont: NumberContainer = NumberContainer {numbermap: nm.clone(), indexmap: im.clone()};
    println!("{}", find(cont.clone(), 10));
    cont = change(cont.clone(), 0, 10);
    println!("{}", find(cont.clone(), 10));
    cont = change(cont.clone(), 0, 20);
    println!("{}", find(cont.clone(), 10));
    println!("{}", find(cont.clone(), 20));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
