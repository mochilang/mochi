// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 1;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return (unsafe { g_seed.clone() } / 65536)
};
        let mut randint = |mut a: i64, mut b: i64| -> i64 {
    let r: i64 = rand();
    return (a + (r % ((b - a) + 1)))
};
        let mut fisher_yates_shuffle_int = |mut data: Vec<i64>| -> Vec<i64> {
    let mut res: Vec<i64> = data.clone();
    let mut i: i64 = 0;
    while (i < (res.len() as i64)) {
        let a: i64 = randint(0, ((res.len() as i64) - 1));
        let b: i64 = randint(0, ((res.len() as i64) - 1));
        let temp: i64 = res[a as usize];
        res[a as usize] = res[b as usize];
        res[b as usize] = temp;
        i = (i + 1);
    }
    return res
};
        let mut fisher_yates_shuffle_str = |mut data: Vec<String>| -> Vec<String> {
    let mut res: Vec<String> = data.clone();
    let mut i: i64 = 0;
    while (i < (res.len() as i64)) {
        let a: i64 = randint(0, ((res.len() as i64) - 1));
        let b: i64 = randint(0, ((res.len() as i64) - 1));
        let temp: String = res[a as usize].clone().clone();
        res[a as usize] = res[b as usize].clone();
        res[b as usize] = temp.clone();
        i = (i + 1);
    }
    return res
};
        let integers: Vec<i64> = vec![0, 1, 2, 3, 4, 5, 6, 7];
        let strings: Vec<String> = vec![String::from("python").clone(), String::from("says").clone(), String::from("hello").clone(), String::from("!").clone()];
        println!("{}", "Fisher-Yates Shuffle:");
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "List ", format!("{:?}", integers)), " "), format!("{:?}", strings)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "FY Shuffle ", format!("{:?}", fisher_yates_shuffle_int(integers.clone()))), " "), format!("{:?}", fisher_yates_shuffle_str(strings.clone()))));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
