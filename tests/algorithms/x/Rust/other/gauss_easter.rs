// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct EasterDate {
    month: i64,
    day: i64,
}
impl std::fmt::Display for EasterDate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"month\": {}", self.month)?;
        write!(f, ", ")?;
        write!(f, "\"day\": {}", self.day)?;
        write!(f, "}}")
    }
}

static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_i = 0;
                let _start: i64 = _now();
        fn gauss_easter(mut year: i64) -> EasterDate {
    let metonic_cycle: i64 = (year % 19);
    let julian_leap_year: i64 = (year % 4);
    let non_leap_year: i64 = (year % 7);
    let leap_day_inhibits: i64 = (year / 100);
    let lunar_orbit_correction: i64 = ((13 + (8 * leap_day_inhibits)) / 25);
    let leap_day_reinstall_number: f64 = ((leap_day_inhibits as f64) / 4.0);
    let secular_moon_shift: f64 = ((((15.0 - (lunar_orbit_correction as f64)) + (leap_day_inhibits as f64)) - leap_day_reinstall_number) % 30.0);
    let century_starting_point: f64 = (((4.0 + (leap_day_inhibits as f64)) - leap_day_reinstall_number) % 7.0);
    let days_to_add: f64 = (((19.0 * (metonic_cycle as f64)) + secular_moon_shift) % 30.0);
    let days_from_phm_to_sunday: f64 = (((((2.0 * (julian_leap_year as f64)) + (4.0 * (non_leap_year as f64))) + (6.0 * days_to_add)) + century_starting_point) % 7.0);
    if ((days_to_add == 29.0) && (days_from_phm_to_sunday == 6.0)) {
        return EasterDate {month: 4, day: 19}
    }
    if ((days_to_add == 28.0) && (days_from_phm_to_sunday == 6.0)) {
        return EasterDate {month: 4, day: 18}
    }
    let offset: i64 = ((days_to_add + days_from_phm_to_sunday) as i64);
    let total: i64 = (22 + offset);
    if (total > 31) {
        return EasterDate {month: 4, day: (total - 31)}
    }
    return EasterDate {month: 3, day: total}
};
        fn format_date(mut year: i64, mut d: EasterDate) -> String {
    let month: String = if (d.month < 10) { format!("{}{}", "0", d.month.to_string()) } else { d.month.to_string().to_string() }.clone();
    let day: String = if (d.day < 10) { format!("{}{}", "0", d.day.to_string()) } else { d.day.to_string().to_string() }.clone();
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", year.to_string(), "-"), month), "-"), day).to_string().clone()
};
        let years: Vec<i64> = vec![1994, 2000, 2010, 2021, 2023, 2032, 2100];
        while (unsafe { g_i.clone() } < (years.len() as i64)) {
            let y: i64 = years[unsafe { g_i.clone() } as usize];
            let e: EasterDate = gauss_easter(y);
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Easter in ", y.to_string()), " is "), format_date(y, e.clone())));
            unsafe { g_i = (unsafe { g_i.clone() } + 1) };
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
