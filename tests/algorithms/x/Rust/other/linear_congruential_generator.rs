// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LCG {
    multiplier: i64,
    increment: i64,
    modulo: i64,
    seed: i64,
}
impl std::fmt::Display for LCG {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"multiplier\": {}", self.multiplier)?;
        write!(f, ", ")?;
        write!(f, "\"increment\": {}", self.increment)?;
        write!(f, ", ")?;
        write!(f, "\"modulo\": {}", self.modulo)?;
        write!(f, ", ")?;
        write!(f, "\"seed\": {}", self.seed)?;
        write!(f, "}}")
    }
}

static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_i = 0;
                let _start: i64 = _now();
        fn make_lcg(mut multiplier: i64, mut increment: i64, mut modulo: i64, mut seed: i64) -> LCG {
    return LCG {multiplier: multiplier, increment: increment, modulo: modulo, seed: seed}
};
        fn next_number(lcg: &mut LCG) -> i64 {
    (*lcg).seed = (((lcg.multiplier * lcg.seed) + lcg.increment) % lcg.modulo);
    return lcg.seed
};
        let mut lcg: LCG = make_lcg(1664525, 1013904223, 4294967296, _now());
        while (unsafe { g_i.clone() } < 5) {
            println!("{}", next_number(&mut lcg).to_string());
            unsafe { g_i = (unsafe { g_i.clone() } + 1) };
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
