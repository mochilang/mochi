// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct WordSearch {
    words: Vec<String>,
    width: i64,
    height: i64,
    board: Vec<Vec<String>>,
}
impl std::fmt::Display for WordSearch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"words\": {:?}", self.words)?;
        write!(f, ", ")?;
        write!(f, "\"width\": {}", self.width)?;
        write!(f, ", ")?;
        write!(f, "\"height\": {}", self.height)?;
        write!(f, ", ")?;
        write!(f, "\"board\": {:?}", self.board)?;
        write!(f, "}}")
    }
}

static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 123456789;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return unsafe { g_seed.clone() }
};
        fn rand_range(mut max: i64) -> i64 {
    return (rand() % max)
};
        fn shuffle(mut list_int: Vec<i64>) -> Vec<i64> {
    let mut i: i64 = ((list_int.len() as i64) - 1);
    while (i > 0) {
        let j: i64 = rand_range((i + 1));
        let tmp: i64 = list_int[i as usize];
        list_int[i as usize] = list_int[j as usize];
        list_int[j as usize] = tmp;
        i = (i - 1);
    }
    return list_int
};
        fn rand_letter() -> String {
    let letters: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let i: i64 = rand_range(26);
    return letters.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone()
};
        fn make_word_search(mut words: Vec<String>, mut width: i64, mut height: i64) -> WordSearch {
    let mut board: Vec<Vec<String>> = vec![];
    let mut r: i64 = 0;
    while (r < height) {
        let mut row: Vec<String> = vec![];
        let mut c: i64 = 0;
        while (c < width) {
            row = { let mut _v = row.clone(); _v.push("".to_string()); _v };
            c = (c + 1);
        }
        board = { let mut _v = board.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return WordSearch {words: words.clone(), width: width, height: height, board: board.clone()}
};
        fn insert_dir(mut ws: WordSearch, word: &str, mut dr: i64, mut dc: i64, mut rows: Vec<i64>, mut cols: Vec<i64>) -> bool {
    let word_len: i64 = (word.len() as i64);
    let mut ri: i64 = 0;
    while (ri < (rows.len() as i64)) {
        let row: i64 = rows[ri as usize];
        let mut ci: i64 = 0;
        while (ci < (cols.len() as i64)) {
            let col: i64 = cols[ci as usize];
            let end_r: i64 = (row + (dr * (word_len - 1)));
            let end_c: i64 = (col + (dc * (word_len - 1)));
            if ((((end_r < 0) || (end_r >= ws.height)) || (end_c < 0)) || (end_c >= ws.width)) {
                ci = (ci + 1);
                continue
            }
            let mut k: i64 = 0;
            let mut ok: bool = true;
            while (k < word_len) {
                let rr: i64 = (row + (dr * k));
                let cc: i64 = (col + (dc * k));
                if (ws.board.clone()[rr as usize].clone()[cc as usize].clone().as_str() != "") {
                    ok = false;
                    break
                }
                k = (k + 1);
            }
            if ok {
                k = 0;
                while (k < word_len) {
                    let rr2: i64 = (row + (dr * k));
                    let cc2: i64 = (col + (dc * k));
                    let mut row_list: Vec<String> = ws.board.clone()[rr2 as usize].clone();
                    row_list[cc2 as usize] = word.chars().skip(k as usize).take(((k + 1) - k) as usize).collect::<String>();
                    k = (k + 1);
                }
                return true
            }
            ci = (ci + 1);
        }
        ri = (ri + 1);
    }
    return false
};
        fn generate_board(mut ws: WordSearch) {
    let dirs_r: Vec<i64> = vec![-1, -1, 0, 1, 1, 1, 0, -1];
    let dirs_c: Vec<i64> = vec![0, 1, 1, 1, 0, -1, -1, -1];
    let mut i: i64 = 0;
    while (i < (ws.words.clone().len() as i64)) {
        let word: String = ws.words.clone()[i as usize].clone().clone();
        let mut rows: Vec<i64> = vec![];
        let mut r: i64 = 0;
        while (r < ws.height) {
            rows = { let mut _v = rows.clone(); _v.push(r); _v };
            r = (r + 1);
        }
        let mut cols: Vec<i64> = vec![];
        let mut c: i64 = 0;
        while (c < ws.width) {
            cols = { let mut _v = cols.clone(); _v.push(c); _v };
            c = (c + 1);
        }
        rows = shuffle(rows.clone());
        cols = shuffle(cols.clone());
        let d: i64 = rand_range(8);
        insert_dir(ws.clone(), &word, dirs_r[d as usize], dirs_c[d as usize], rows.clone(), cols.clone());
        i = (i + 1);
    }
};
        fn visualise(mut ws: WordSearch, mut add_fake_chars: bool) -> String {
    let mut result: String = String::from("").clone();
    let mut r: i64 = 0;
    while (r < ws.height) {
        let mut c: i64 = 0;
        while (c < ws.width) {
            let mut ch: String = ws.board.clone()[r as usize].clone()[c as usize].clone().clone();
            if (ch.as_str() == "") {
                if add_fake_chars {
                    ch = rand_letter();
                } else {
                    ch = String::from("#");
                }
            }
            result = format!("{}{}", format!("{}{}", result, ch), " ");
            c = (c + 1);
        }
        result = format!("{}{}", result, "\n");
        r = (r + 1);
    }
    return result.clone()
};
        fn mochi_main() {
    let words: Vec<String> = vec![String::from("cat").clone().clone(), String::from("dog").clone().clone(), String::from("snake").clone().clone(), String::from("fish").clone().clone()];
    let mut ws: WordSearch = make_word_search(words.clone(), 10, 10);
    generate_board(ws.clone());
    println!("{}", visualise(ws.clone(), true));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
