// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn floyd(mut n: i64) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < ((n - i) - 1)) {
            result = format!("{}{}", result, " ");
            j = (j + 1);
        }
        let mut k: i64 = 0;
        while (k < (i + 1)) {
            result = format!("{}{}", result, "* ");
            k = (k + 1);
        }
        result = format!("{}{}", result, "\n");
        i = (i + 1);
    }
    return result.clone()
};
    fn reverse_floyd(mut n: i64) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = n;
    while (i > 0) {
        let mut j: i64 = i;
        while (j > 0) {
            result = format!("{}{}", result, "* ");
            j = (j - 1);
        }
        result = format!("{}{}", result, "\n");
        let mut k: i64 = ((n - i) + 1);
        while (k > 0) {
            result = format!("{}{}", result, " ");
            k = (k - 1);
        }
        i = (i - 1);
    }
    return result.clone()
};
    fn pretty_print(mut n: i64) -> String {
    if (n <= 0) {
        return String::from("       ...       ....        nothing printing :(")
    }
    let upper_half: String = floyd(n).clone();
    let lower_half: String = reverse_floyd(n).clone();
    return format!("{}{}", upper_half, lower_half).clone()
};
    fn mochi_main() {
    println!("{}", pretty_print(3));
    println!("{}", pretty_print(0));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
