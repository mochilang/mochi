// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    key: i64,
    value: i64,
    prev: i64,
    next: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"key\": {}", self.key)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"prev\": {}", self.prev)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct DoubleLinkedList {
    nodes: Vec<Node>,
    head: i64,
    tail: i64,
}
impl std::fmt::Display for DoubleLinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, ", ")?;
        write!(f, "\"head\": {}", self.head)?;
        write!(f, ", ")?;
        write!(f, "\"tail\": {}", self.tail)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct LRUCache {
    list: DoubleLinkedList,
    capacity: i64,
    num_keys: i64,
    hits: i64,
    misses: i64,
    cache: HashMap<String, i64>,
}
impl std::fmt::Display for LRUCache {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"list\": {}", self.list)?;
        write!(f, ", ")?;
        write!(f, "\"capacity\": {}", self.capacity)?;
        write!(f, ", ")?;
        write!(f, "\"num_keys\": {}", self.num_keys)?;
        write!(f, ", ")?;
        write!(f, "\"hits\": {}", self.hits)?;
        write!(f, ", ")?;
        write!(f, "\"misses\": {}", self.misses)?;
        write!(f, ", ")?;
        write!(f, "\"cache\": {:?}", self.cache)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct GetResult {
    cache: LRUCache,
    value: i64,
    ok: bool,
}
impl std::fmt::Display for GetResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"cache\": {}", self.cache)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_list() -> DoubleLinkedList {
    let mut nodes: Vec<Node> = vec![];
    let head: Node = Node {key: 0, value: 0, prev: (0 - 1), next: 1};
    let tail: Node = Node {key: 0, value: 0, prev: 0, next: (0 - 1)};
    nodes = { let mut _v = nodes.clone(); _v.push(head.clone()); _v };
    nodes = { let mut _v = nodes.clone(); _v.push(tail.clone()); _v };
    return DoubleLinkedList {nodes: nodes.clone(), head: 0, tail: 1}
};
    fn dll_add(mut lst: DoubleLinkedList, mut idx: i64) -> DoubleLinkedList {
    let mut nodes: Vec<Node> = lst.nodes.clone();
    let tail_idx: i64 = lst.tail;
    let mut tail_node: Node = nodes[tail_idx as usize].clone();
    let prev_idx: i64 = tail_node.prev;
    let mut node: Node = nodes[idx as usize].clone();
    node.prev = prev_idx;
    node.next = tail_idx;
    nodes[idx as usize] = node.clone();
    let mut prev_node: Node = nodes[prev_idx as usize].clone();
    prev_node.next = idx;
    nodes[prev_idx as usize] = prev_node.clone();
    tail_node.prev = idx;
    nodes[tail_idx as usize] = tail_node.clone();
    lst.nodes = nodes.clone();
    return lst
};
    fn dll_remove(mut lst: DoubleLinkedList, mut idx: i64) -> DoubleLinkedList {
    let mut nodes: Vec<Node> = lst.nodes.clone();
    let mut node: Node = nodes[idx as usize].clone();
    let prev_idx: i64 = node.prev;
    let next_idx: i64 = node.next;
    if ((prev_idx == (0 - 1)) || (next_idx == (0 - 1))) {
        return lst
    }
    let mut prev_node: Node = nodes[prev_idx as usize].clone();
    prev_node.next = next_idx;
    nodes[prev_idx as usize] = prev_node.clone();
    let mut next_node: Node = nodes[next_idx as usize].clone();
    next_node.prev = prev_idx;
    nodes[next_idx as usize] = next_node.clone();
    node.prev = (0 - 1);
    node.next = (0 - 1);
    nodes[idx as usize] = node.clone();
    lst.nodes = nodes.clone();
    return lst
};
    fn new_cache(mut cap: i64) -> LRUCache {
    let mut empty_map: HashMap<String, i64> = HashMap::new();
    return LRUCache {list: new_list(), capacity: cap, num_keys: 0, hits: 0, misses: 0, cache: empty_map.clone()}
};
    fn lru_get(mut c: LRUCache, mut key: i64) -> GetResult {
    let mut cache: LRUCache = c.clone();
    let key_str = key.to_string();
    if cache.cache.clone().contains_key(&key_str) {
        let idx: i64 = cache.cache.clone()[key_str];
        if (idx != (0 - 1)) {
            cache.hits = (cache.hits + 1);
            let node: Node = cache.list.clone().nodes.clone()[idx as usize].clone();
            let value: i64 = node.value;
            cache.list = dll_remove(cache.list.clone(), idx);
            cache.list = dll_add(cache.list.clone(), idx);
            return GetResult {cache: cache.clone(), value: value, ok: true}
        }
    }
    cache.misses = (cache.misses + 1);
    return GetResult {cache: cache.clone(), value: 0, ok: false}
};
    fn lru_put(mut c: LRUCache, mut key: i64, mut value: i64) -> LRUCache {
    let mut cache: LRUCache = c.clone();
    let key_str = key.to_string();
    if !cache.cache.clone().contains_key(&key_str) {
        if (cache.num_keys >= cache.capacity) {
            let head_node: Node = cache.list.clone().nodes.clone()[cache.list.clone().head as usize].clone();
            let first_idx: i64 = head_node.next;
            let first_node: Node = cache.list.clone().nodes.clone()[first_idx as usize].clone();
            let old_key: i64 = first_node.key;
            cache.list = dll_remove(cache.list.clone(), first_idx);
            let mut mdel: HashMap<String, i64> = cache.cache.clone();
            mdel.insert(old_key.to_string().clone(), (0 - 1));
            cache.cache = mdel.clone();
            cache.num_keys = (cache.num_keys - 1);
        }
        let mut nodes: Vec<Node> = cache.list.clone().nodes.clone();
        let new_node: Node = Node {key: key, value: value, prev: (0 - 1), next: (0 - 1)};
        nodes = { let mut _v = nodes.clone(); _v.push(new_node.clone()); _v };
        let idx: i64 = ((nodes.len() as i64) - 1);
        cache.list.nodes = nodes.clone();
        cache.list = dll_add(cache.list.clone(), idx);
        let mut m: HashMap<String, i64> = cache.cache.clone();
        m.insert(key_str.clone(), idx);
        cache.cache = m.clone();
        cache.num_keys = (cache.num_keys + 1);
    } else {
        let mut m: HashMap<String, i64> = cache.cache.clone();
        let idx: i64 = m.get(&key_str).cloned().unwrap_or_default();
        let mut nodes: Vec<Node> = cache.list.clone().nodes.clone();
        let mut node: Node = nodes[idx as usize].clone();
        node.value = value;
        nodes[idx as usize] = node.clone();
        cache.list.nodes = nodes.clone();
        cache.list = dll_remove(cache.list.clone(), idx);
        cache.list = dll_add(cache.list.clone(), idx);
        cache.cache = m.clone();
    }
    return cache
};
    fn cache_info(mut cache: LRUCache) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "CacheInfo(hits=", cache.hits.to_string()), ", misses="), cache.misses.to_string()), ", capacity="), cache.capacity.to_string()), ", current size="), cache.num_keys.to_string()), ")").clone()
};
    fn print_result(mut res: GetResult) {
    if res.ok {
        println!("{}", res.value.to_string());
    } else {
        println!("{}", "None");
    }
};
    fn mochi_main() {
    let mut cache: LRUCache = new_cache(2);
    cache = lru_put(cache.clone(), 1, 1);
    cache = lru_put(cache.clone(), 2, 2);
    let mut r1: GetResult = lru_get(cache.clone(), 1);
    cache = r1.cache.clone();
    print_result(r1.clone());
    cache = lru_put(cache.clone(), 3, 3);
    let mut r2: GetResult = lru_get(cache.clone(), 2);
    cache = r2.cache.clone();
    print_result(r2.clone());
    cache = lru_put(cache.clone(), 4, 4);
    let mut r3: GetResult = lru_get(cache.clone(), 1);
    cache = r3.cache.clone();
    print_result(r3.clone());
    let mut r4: GetResult = lru_get(cache.clone(), 3);
    cache = r4.cache.clone();
    print_result(r4.clone());
    let mut r5: GetResult = lru_get(cache.clone(), 4);
    cache = r5.cache.clone();
    print_result(r5.clone());
    println!("{}", cache_info(cache.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
