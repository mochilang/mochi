// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn get_avg(mut number_1: i64, mut number_2: i64) -> i64 {
    return ((number_1 + number_2) / 2)
};
    let mut guess_the_number = |mut lower: i64, mut higher: i64, mut to_guess: i64| -> Vec<i64> {
    if (lower > higher) {
        panic!("argument value for lower and higher must be(lower > higher)");
    }
    if !((lower < to_guess) && (to_guess < higher)) {
        panic!("guess value must be within the range of lower and higher value");
    }
    let mut answer = |mut number: i64| -> String {
    if (number > to_guess) {
        return String::from("high")
    } else if (number < to_guess) {
        return String::from("low")
    } else {
        return String::from("same")
    }
};
    println!("{}", "started...");
    let mut last_lowest: i64 = lower;
    let mut last_highest: i64 = higher;
    let mut last_numbers: Vec<i64> = vec![];
    loop {
        let number: i64 = get_avg(last_lowest, last_highest);
        last_numbers = { let mut _v = last_numbers.clone(); _v.push(number); _v };
        let resp: String = answer(number).clone();
        if (resp.as_str() == "low") {
            last_lowest = number;
        } else if (resp.as_str() == "high") {
            last_highest = number;
        } else {
            break
        }
    }
    println!("{}", format!("{}{}", "guess the number : ", last_numbers[((last_numbers.len() as i64) - 1) as usize].to_string()));
    println!("{}", format!("{}{}", "details : ", format!("{:?}", last_numbers)));
    return last_numbers
};
    guess_the_number(10, 1000, 17);
    guess_the_number(-10000, 10000, 7);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
