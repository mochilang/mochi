// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn index_of(mut xs: Vec<i64>, mut x: i64) -> i64 {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == x) {
            return i
        }
        i = (i + 1);
    }
    return (0 - 1)
};
    fn majority_vote(mut votes: Vec<i64>, mut votes_needed_to_win: i64) -> Vec<i64> {
    if (votes_needed_to_win < 2) {
        return vec![]
    }
    let mut candidates: Vec<i64> = vec![];
    let mut counts: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (votes.len() as i64)) {
        let v: i64 = votes[i as usize];
        let idx: i64 = index_of(candidates.clone(), v);
        if (idx != (0 - 1)) {
            counts[idx as usize] = (counts[idx as usize] + 1);
        } else if ((candidates.len() as i64) < (votes_needed_to_win - 1)) {
            candidates = { let mut _v = candidates.clone(); _v.push(v); _v };
            counts = { let mut _v = counts.clone(); _v.push(1); _v };
        } else {
            let mut j: i64 = 0;
            while (j < (counts.len() as i64)) {
                counts[j as usize] = (counts[j as usize] - 1);
                j = (j + 1);
            }
            let mut new_candidates: Vec<i64> = vec![];
            let mut new_counts: Vec<i64> = vec![];
            j = 0;
            while (j < (candidates.len() as i64)) {
                if (counts[j as usize] > 0) {
                    new_candidates = { let mut _v = new_candidates.clone(); _v.push(candidates[j as usize]); _v };
                    new_counts = { let mut _v = new_counts.clone(); _v.push(counts[j as usize]); _v };
                }
                j = (j + 1);
            }
            candidates = new_candidates.clone();
            counts = new_counts.clone();
        }
        i = (i + 1);
    }
    let mut final_counts: Vec<i64> = vec![];
    let mut j: i64 = 0;
    while (j < (candidates.len() as i64)) {
        final_counts = { let mut _v = final_counts.clone(); _v.push(0); _v };
        j = (j + 1);
    }
    i = 0;
    while (i < (votes.len() as i64)) {
        let v: i64 = votes[i as usize];
        let idx: i64 = index_of(candidates.clone(), v);
        if (idx != (0 - 1)) {
            final_counts[idx as usize] = (final_counts[idx as usize] + 1);
        }
        i = (i + 1);
    }
    let mut result: Vec<i64> = vec![];
    j = 0;
    while (j < (candidates.len() as i64)) {
        if ((final_counts[j as usize] * votes_needed_to_win) > (votes.len() as i64)) {
            result = { let mut _v = result.clone(); _v.push(candidates[j as usize]); _v };
        }
        j = (j + 1);
    }
    return result
};
    fn mochi_main() {
    let votes: Vec<i64> = vec![1, 2, 2, 3, 1, 3, 2];
    println!("{}", format!("{:?}", majority_vote(votes.clone(), 3)));
    println!("{}", format!("{:?}", majority_vote(votes.clone(), 2)));
    println!("{}", format!("{:?}", majority_vote(votes.clone(), 4)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
