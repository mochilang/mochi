warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:47:2
   |
47 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:50:2
   |
50 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:53:2
   |
53 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:70:2
   |
70 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:83:2
   |
83 | };
   |  ^ help: remove this semicolon

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:55:21
   |
55 |     let len1: i64 = (first.len() as i64);
   |                     ^                  ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
55 -     let len1: i64 = (first.len() as i64);
55 +     let len1: i64 = first.len() as i64;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:56:21
   |
56 |     let len2: i64 = (second.len() as i64);
   |                     ^                   ^
   |
help: remove these parentheses
   |
56 -     let len2: i64 = (second.len() as i64);
56 +     let len2: i64 = second.len() as i64;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:57:27
   |
57 |     let abs_len: i64 = if (len1 > len2) { len1 } else { len2 };
   |                           ^           ^
   |
help: remove these parentheses
   |
57 -     let abs_len: i64 = if (len1 > len2) { len1 } else { len2 };
57 +     let abs_len: i64 = if len1 > len2 { len1 } else { len2 };
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:60:11
   |
60 |     while (i < abs_len) {
   |           ^           ^
   |
help: remove these parentheses
   |
60 -     while (i < abs_len) {
60 +     while i < abs_len {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:61:12
   |
61 |         if (i < len1) {
   |            ^        ^
   |
help: remove these parentheses
   |
61 -         if (i < len1) {
61 +         if i < len1 {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:64:12
   |
64 |         if (i < len2) {
   |            ^        ^
   |
help: remove these parentheses
   |
64 -         if (i < len2) {
64 +         if i < len2 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:67:13
   |
67 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
67 -         i = (i + 1);
67 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:74:11
   |
74 |     while (i < (xs.len() as i64)) {
   |           ^                     ^
   |
help: remove these parentheses
   |
74 -     while (i < (xs.len() as i64)) {
74 +     while i < (xs.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:76:12
   |
76 |         if (i < ((xs.len() as i64) - 1)) {
   |            ^                           ^
   |
help: remove these parentheses
   |
76 -         if (i < ((xs.len() as i64) - 1)) {
76 +         if i < ((xs.len() as i64) - 1) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:79:13
   |
79 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
79 -         i = (i + 1);
79 +         i = i + 1;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:93:28
   |
93 |     let duration_us: i64 = ((_end - _start) / 1000);
   |                            ^                      ^
   |
help: remove these parentheses
   |
93 -     let duration_us: i64 = ((_end - _start) / 1000);
93 +     let duration_us: i64 = (_end - _start) / 1000;
   |

error[E0308]: mismatched types
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:49:31
   |
49 |     return Item::Str { value: s.clone() }
   |                               ^^-----^^
   |                               | |
   |                               | help: try using a conversion method: `to_string`
   |                               expected `String`, found `&str`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:45:17
   |
45 |     fn from_int(mut x: i64) -> Item {
   |                 ----^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:51:23
   |
51 |     fn item_to_string(mut it: Item) -> String {
   |                       ----^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:54:33
   |
54 |     fn alternative_list_arrange(mut first: Vec<Item>, mut second: Vec<Item>) -> Vec<Item> {
   |                                 ----^^^^^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:54:55
   |
54 |     fn alternative_list_arrange(mut first: Vec<Item>, mut second: Vec<Item>) -> Vec<Item> {
   |                                                       ----^^^^^^
   |                                                       |
   |                                                       help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/other/alternative_list_arrange.rs:71:23
   |
71 |     fn list_to_string(mut xs: Vec<Item>) -> String {
   |                       ----^^
   |                       |
   |                       help: remove this `mut`

error: aborting due to 1 previous error; 21 warnings emitted

For more information about this error, try `rustc --explain E0308`.
