// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn subarray(mut xs: Vec<i64>, mut start: i64, mut end: i64) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut k: i64 = start;
    while (k < end) {
        result = { let mut _v = result.clone(); _v.push(xs[k as usize]); _v };
        k = (k + 1);
    }
    return result
};
    fn merge(mut left_half: Vec<i64>, mut right_half: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    while ((i < (left_half.len() as i64)) && (j < (right_half.len() as i64))) {
        if (left_half[i as usize] < right_half[j as usize]) {
            result = { let mut _v = result.clone(); _v.push(left_half[i as usize]); _v };
            i = (i + 1);
        } else {
            result = { let mut _v = result.clone(); _v.push(right_half[j as usize]); _v };
            j = (j + 1);
        }
    }
    while (i < (left_half.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(left_half[i as usize]); _v };
        i = (i + 1);
    }
    while (j < (right_half.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(right_half[j as usize]); _v };
        j = (j + 1);
    }
    return result
};
    fn merge_sort(mut array: Vec<i64>) -> Vec<i64> {
    if ((array.len() as i64) <= 1) {
        return array
    }
    let middle: i64 = ((array.len() as i64) / 2);
    let left_half: Vec<i64> = subarray(array.clone(), 0, middle);
    let right_half: Vec<i64> = subarray(array.clone(), middle, (array.len() as i64));
    let sorted_left: Vec<i64> = merge_sort(left_half.clone());
    let sorted_right: Vec<i64> = merge_sort(right_half.clone());
    return merge(sorted_left.clone(), sorted_right.clone())
};
    fn h_index(mut citations: Vec<i64>) -> i64 {
    let mut idx: i64 = 0;
    while (idx < (citations.len() as i64)) {
        if (citations[idx as usize] < 0) {
            panic!("The citations should be a list of non negative integers.");
        }
        idx = (idx + 1);
    }
    let sorted: Vec<i64> = merge_sort(citations.clone());
    let n: i64 = (sorted.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        if (sorted[((n - 1) - i) as usize] <= i) {
            return i
        }
        i = (i + 1);
    }
    return n
};
    println!("{}", h_index(vec![3, 0, 6, 1, 5]).to_string());
    println!("{}", h_index(vec![1, 3, 1]).to_string());
    println!("{}", h_index(vec![1, 2, 3]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
