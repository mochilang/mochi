// Generated by Mochi transpiler v0.10.68
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Thing {
    name: String,
    value: f64,
    weight: f64,
}
impl std::fmt::Display for Thing {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"weight\": {}", self.weight)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct GreedyResult {
    items: Vec<Thing>,
    total_value: f64,
}
impl std::fmt::Display for GreedyResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"items\": {:?}", self.items)?;
        write!(f, ", ")?;
        write!(f, "\"total_value\": {}", self.total_value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn get_value(mut t: Thing) -> f64 {
    return t.value
};
    fn get_weight(mut t: Thing) -> f64 {
    return t.weight
};
    fn get_name(mut t: Thing) -> String {
    return t.name.clone().clone()
};
    fn value_weight(mut t: Thing) -> f64 {
    return (t.value / t.weight)
};
    fn build_menu(mut names: Vec<String>, mut values: Vec<f64>, mut weights: Vec<f64>) -> Vec<Thing> {
    let mut menu: Vec<Thing> = vec![];
    let mut i: i64 = 0;
    while (((i < (values.len() as i64)) && (i < (names.len() as i64))) && (i < (weights.len() as i64))) {
        menu = { let mut _v = menu.clone(); _v.push(Thing {name: names[i as usize].clone().clone(), value: values[i as usize], weight: weights[i as usize]}); _v };
        i = (i + 1);
    }
    return menu
};
    fn sort_desc(mut items: Vec<Thing>, key_func: &mut dyn FnMut(Thing) -> f64) -> Vec<Thing> {
    let mut arr: Vec<Thing> = vec![];
    let mut i: i64 = 0;
    while (i < (items.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(items[i as usize].clone()); _v };
        i = (i + 1);
    }
    let mut j: i64 = 1;
    while (j < (arr.len() as i64)) {
        let key_item: Thing = arr[j as usize].clone();
        let key_val: f64 = key_func(key_item.clone());
        let mut k: i64 = (j - 1);
        while ((k >= 0) && (key_func(arr[k as usize].clone()) < key_val)) {
            arr[(k + 1) as usize] = arr[k as usize].clone();
            k = (k - 1);
        }
        arr[(k + 1) as usize] = key_item.clone();
        j = (j + 1);
    }
    return arr
};
    let mut greedy = |mut items: Vec<Thing>, mut max_cost: f64, key_func: &mut dyn FnMut(Thing) -> f64| -> GreedyResult {
    let items_copy: Vec<Thing> = sort_desc(items.clone(), key_func);
    let mut result: Vec<Thing> = vec![];
    let mut total_value: f64 = 0.0;
    let mut total_cost: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (items_copy.len() as i64)) {
        let it: Thing = items_copy[i as usize].clone();
        let w: f64 = get_weight(it.clone());
        if ((total_cost + w) <= max_cost) {
            result = { let mut _v = result.clone(); _v.push(it.clone()); _v };
            total_cost = (total_cost + w);
            total_value = (total_value + get_value(it.clone()));
        }
        i = (i + 1);
    }
    return GreedyResult {items: result.clone(), total_value: total_value}
};
    fn thing_to_string(mut t: Thing) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Thing(", t.name.clone()), ", "), t.value.to_string()), ", "), t.weight.to_string()), ")").clone()
};
    let mut list_to_string = |mut ts: Vec<Thing>| -> String {
    let mut s: String = String::from("[");
    let mut i: i64 = 0;
    while (i < (ts.len() as i64)) {
        s = format!("{}{}", s, thing_to_string(ts[i as usize].clone()));
        if (i < ((ts.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    let food: Vec<String> = vec![String::from("Burger").clone(), String::from("Pizza").clone(), String::from("Coca Cola").clone(), String::from("Rice").clone(), String::from("Sambhar").clone(), String::from("Chicken").clone(), String::from("Fries").clone(), String::from("Milk").clone()];
    let value: Vec<f64> = vec![80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0];
    let weight: Vec<f64> = vec![40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0];
    let foods: Vec<Thing> = build_menu(food.clone(), value.clone(), weight.clone());
    println!("{}", list_to_string(foods.clone()));
    let res: GreedyResult = greedy(foods.clone(), 500.0, &mut get_value);
    println!("{}", list_to_string(res.items.clone().clone()));
    println!("{}", res.total_value.to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
