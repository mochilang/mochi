warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:63:11
   |
63 |     while (i < (s.len() as i64)) {
   |           ^                    ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
63 -     while (i < (s.len() as i64)) {
63 +     while i < (s.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:65:17
   |
65 |         value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
   |                 ^                                                     ^
   |
help: remove these parentheses
   |
65 -         value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
65 +         value = (value * 10) + { let n: i64 = c.parse().unwrap(); n };
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:66:13
   |
66 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
66 -         i = (i + 1);
66 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:72:11
   |
72 | ...le ((idx < (k.len() as i64)) && ({ let tmp = &k; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() != ",")) {
   |       ^                                                                                                                                                   ^
   |
help: remove these parentheses
   |
72 -     while ((idx < (k.len() as i64)) && ({ let tmp = &k; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() != ",")) {
72 +     while (idx < (k.len() as i64)) && ({ let tmp = &k; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() != ",") {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:73:15
   |
73 |         idx = (idx + 1);
   |               ^       ^
   |
help: remove these parentheses
   |
73 -         idx = (idx + 1);
73 +         idx = idx + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:85:11
   |
85 |     while (i < (delta.len() as i64)) {
   |           ^                        ^
   |
help: remove these parentheses
   |
85 -     while (i < (delta.len() as i64)) {
85 +     while i < (delta.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:86:23
   |
86 |         let ny: i64 = (y + delta[i as usize].clone()[0 as usize]);
   |                       ^                                         ^
   |
help: remove these parentheses
   |
86 -         let ny: i64 = (y + delta[i as usize].clone()[0 as usize]);
86 +         let ny: i64 = y + delta[i as usize].clone()[0 as usize];
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:87:23
   |
87 |         let nx: i64 = (x + delta[i as usize].clone()[1 as usize]);
   |                       ^                                         ^
   |
help: remove these parentheses
   |
87 -         let nx: i64 = (x + delta[i as usize].clone()[1 as usize]);
87 +         let nx: i64 = x + delta[i as usize].clone()[1 as usize];
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:88:12
   |
88 |         if ((((ny >= 0) && (ny < (grid.len() as i64))) && (nx >= 0)) && (nx < (grid[0 as usize].clone().len() as i64))) {
   |            ^                                                                                                          ^
   |
help: remove these parentheses
   |
88 -         if ((((ny >= 0) && (ny < (grid.len() as i64))) && (nx >= 0)) && (nx < (grid[0 as usize].clone().len() as i64))) {
88 +         if (((ny >= 0) && (ny < (grid.len() as i64))) && (nx >= 0)) && (nx < (grid[0 as usize].clone().len() as i64)) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:89:16
   |
89 |             if (grid[ny as usize].clone()[nx as usize] == 0) {
   |                ^                                           ^
   |
help: remove these parentheses
   |
89 -             if (grid[ny as usize].clone()[nx as usize] == 0) {
89 +             if grid[ny as usize].clone()[nx as usize] == 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:93:13
   |
93 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
93 -         i = (i + 1);
93 +         i = i + 1;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:99:22
   |
99 |     let mut i: i64 = ((lst.len() as i64) - 1);
   |                      ^                      ^
   |
help: remove these parentheses
   |
99 -     let mut i: i64 = ((lst.len() as i64) - 1);
99 +     let mut i: i64 = (lst.len() as i64) - 1;
   |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:100:11
    |
100 |     while (i >= 0) {
    |           ^      ^
    |
help: remove these parentheses
    |
100 -     while (i >= 0) {
100 +     while i >= 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:102:13
    |
102 |         i = (i - 1);
    |             ^     ^
    |
help: remove these parentheses
    |
102 -         i = (i - 1);
102 +         i = i - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:111:11
    |
111 |     while (head < (queue.len() as i64)) {
    |           ^                           ^
    |
help: remove these parentheses
    |
111 -     while (head < (queue.len() as i64)) {
111 +     while head < (queue.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:113:16
    |
113 |         head = (head + 1);
    |                ^        ^
    |
help: remove these parentheses
    |
113 -         head = (head + 1);
113 +         head = head + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:114:12
    |
114 |         if (node.pos.clone().as_str() == goal.as_str()) {
    |            ^                                          ^
    |
help: remove these parentheses
    |
114 -         if (node.pos.clone().as_str() == goal.as_str()) {
114 +         if node.pos.clone().as_str() == goal.as_str() {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:119:15
    |
119 |         while (i < (neigh.len() as i64)) {
    |               ^                        ^
    |
help: remove these parentheses
    |
119 -         while (i < (neigh.len() as i64)) {
119 +         while i < (neigh.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:126:17
    |
126 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
126 -             i = (i + 1);
126 +             i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:140:11
    |
140 |     while ((head_f < (queue_f.len() as i64)) && (head_b < (queue_b.len() as i64))) {
    |           ^                                                                      ^
    |
help: remove these parentheses
    |
140 -     while ((head_f < (queue_f.len() as i64)) && (head_b < (queue_b.len() as i64))) {
140 +     while (head_f < (queue_f.len() as i64)) && (head_b < (queue_b.len() as i64)) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:142:18
    |
142 |         head_f = (head_f + 1);
    |                  ^          ^
    |
help: remove these parentheses
    |
142 -         head_f = (head_f + 1);
142 +         head_f = head_f + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:145:15
    |
145 |         while (i < (neigh_f.len() as i64)) {
    |               ^                          ^
    |
help: remove these parentheses
    |
145 -         while (i < (neigh_f.len() as i64)) {
145 +         while i < (neigh_f.len() as i64) {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:153:27
    |
153 |                     while (j < (rev.len() as i64)) {
    |                           ^                      ^
    |
help: remove these parentheses
    |
153 -                     while (j < (rev.len() as i64)) {
153 +                     while j < (rev.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:155:29
    |
155 |                         j = (j + 1);
    |                             ^     ^
    |
help: remove these parentheses
    |
155 -                         j = (j + 1);
155 +                         j = j + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:161:17
    |
161 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
161 -             i = (i + 1);
161 +             i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:164:18
    |
164 |         head_b = (head_b + 1);
    |                  ^          ^
    |
help: remove these parentheses
    |
164 -         head_b = (head_b + 1);
164 +         head_b = head_b + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:167:15
    |
167 |         while (j < (neigh_b.len() as i64)) {
    |               ^                          ^
    |
help: remove these parentheses
    |
167 -         while (j < (neigh_b.len() as i64)) {
167 +         while j < (neigh_b.len() as i64) {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:176:27
    |
176 |                     while (t < (new_path_b.len() as i64)) {
    |                           ^                             ^
    |
help: remove these parentheses
    |
176 -                     while (t < (new_path_b.len() as i64)) {
176 +                     while t < (new_path_b.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:178:29
    |
178 |                         t = (t + 1);
    |                             ^     ^
    |
help: remove these parentheses
    |
178 -                         t = (t + 1);
178 +                         t = t + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:184:17
    |
184 |             j = (j + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
184 -             j = (j + 1);
184 +             j = j + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:190:8
    |
190 |     if ((path.len() as i64) == 0) {
    |        ^                        ^
    |
help: remove these parentheses
    |
190 -     if ((path.len() as i64) == 0) {
190 +     if (path.len() as i64) == 0 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:196:11
    |
196 |     while (i < (path.len() as i64)) {
    |           ^                       ^
    |
help: remove these parentheses
    |
196 -     while (i < (path.len() as i64)) {
196 +     while i < (path.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:199:13
    |
199 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
199 -         i = (i + 1);
199 +         i = i + 1;
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:205:28
    |
205 |     let goal: String = key(((grid.len() as i64) - 1), ((grid[0 as usize].clone().len() as i64) - 1)).clone();
    |                            ^                       ^
    |
help: remove these parentheses
    |
205 -     let goal: String = key(((grid.len() as i64) - 1), ((grid[0 as usize].clone().len() as i64) - 1)).clone();
205 +     let goal: String = key((grid.len() as i64) - 1, ((grid[0 as usize].clone().len() as i64) - 1)).clone();
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:205:55
    |
205 |     let goal: String = key(((grid.len() as i64) - 1), ((grid[0 as usize].clone().len() as i64) - 1)).clone();
    |                                                       ^                                           ^
    |
help: remove these parentheses
    |
205 -     let goal: String = key(((grid.len() as i64) - 1), ((grid[0 as usize].clone().len() as i64) - 1)).clone();
205 +     let goal: String = key(((grid.len() as i64) - 1), (grid[0 as usize].clone().len() as i64) - 1).clone();
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:211:28
    |
211 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
211 -     let duration_us: i64 = ((_end - _start) / 1000);
211 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:151:25
    |
151 |                     let mut rev: Vec<String> = reverse_list(visited_b.get(npos.as_str()).cloned().unwrap_or_default());
    |                         ----^^^
    |                         |
    |                         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0382]: borrow of moved value: `start`
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:138:97
    |
131 |     let mut bidirectional_bfs = |start: String, goal: String| -> Vec<String> {
    |                                  ----- move occurs because `start` has type `String`, which does not implement the `Copy` trait
...
138 |     let mut visited_f: HashMap<String, Vec<String>> = HashMap::from([(String::from(start), vec![start.clone()])]);
    |                                                                                    -----        ^^^^^ value borrowed here after move
    |                                                                                    |
    |                                                                                    value moved here
    |
help: consider cloning the value if the performance cost is acceptable
    |
138 |     let mut visited_f: HashMap<String, Vec<String>> = HashMap::from([(String::from(start.clone()), vec![start.clone()])]);
    |                                                                                         ++++++++

error[E0382]: borrow of moved value: `goal`
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:139:96
    |
131 |     let mut bidirectional_bfs = |start: String, goal: String| -> Vec<String> {
    |                                                 ---- move occurs because `goal` has type `String`, which does not implement the `Copy` trait
...
139 |     let mut visited_b: HashMap<String, Vec<String>> = HashMap::from([(String::from(goal), vec![goal.clone()])]);
    |                                                                                    ----        ^^^^ value borrowed here after move
    |                                                                                    |
    |                                                                                    value moved here
    |
help: consider cloning the value if the performance cost is acceptable
    |
139 |     let mut visited_b: HashMap<String, Vec<String>> = HashMap::from([(String::from(goal.clone()), vec![goal.clone()])]);
    |                                                                                        ++++++++

error[E0384]: cannot assign twice to immutable variable `new_path`
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:154:25
    |
148 |                 let new_path: Vec<String> = { let mut _v = node_f.path.clone().clone(); _v.push(npos.clone()); _v };
    |                     -------- first assignment to `new_path`
...
154 |                         new_path = { let mut _v = new_path.clone(); _v.push(rev[j as usize].clone()); _v };
    |                         ^^^^^^^^ cannot assign twice to immutable variable
    |
help: consider making this binding mutable
    |
148 |                 let mut new_path: Vec<String> = { let mut _v = node_f.path.clone().clone(); _v.push(npos.clone()); _v };
    |                     +++

error[E0384]: cannot assign twice to immutable variable `new_path_b`
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:174:21
    |
170 |                 let new_path_b: Vec<String> = { let mut _v = node_b.path.clone().clone(); _v.push(nposb.clone()); _v };
    |                     ---------- first assignment to `new_path_b`
...
174 |                     new_path_b = reverse_list(new_path_b.clone());
    |                     ^^^^^^^^^^ cannot assign twice to immutable variable
    |
help: consider making this binding mutable
    |
170 |                 let mut new_path_b: Vec<String> = { let mut _v = node_b.path.clone().clone(); _v.push(nposb.clone()); _v };
    |                     +++

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:193:9
    |
193 |     let mut first: Vec<i64> = parse_key(path[0 as usize].clone());
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:57:9
   |
57 |     let mut key = |y: i64, x: i64| -> String {
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:60:9
   |
60 |     let mut parse_int = |s: String| -> i64 {
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:70:9
   |
70 |     let mut parse_key = |k: String| -> Vec<i64> {
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:79:9
   |
79 |     let mut neighbors = |pos: String| -> Vec<String> {
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:97:9
   |
97 |     let mut reverse_list = |lst: Vec<String>| -> Vec<String> {
   |         ----^^^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:106:9
    |
106 |     let mut bfs = |start: String, goal: String| -> Vec<String> {
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:131:9
    |
131 |     let mut bidirectional_bfs = |start: String, goal: String| -> Vec<String> {
    |         ----^^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/algorithms/x/Rust/graphs/bidirectional_breadth_first_search.rs:189:9
    |
189 |     let mut path_to_string = |path: Vec<String>| -> String {
    |         ----^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: aborting due to 4 previous errors; 46 warnings emitted

Some errors have detailed explanations: E0382, E0384.
For more information about an error, try `rustc --explain E0382`.
