// Generated by Mochi transpiler v0.10.73
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Graph {
    vertex: HashMap<i64, Vec<i64>>,
    size: i64,
}
impl std::fmt::Display for Graph {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"vertex\": {:?}", self.vertex)?;
        write!(f, ", ")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();;
    fn add_edge(mut g: Graph, mut from_vertex: i64, mut to_vertex: i64) -> Graph {
    let mut v: HashMap<i64, Vec<i64>> = g.vertex.clone();;
    if v.contains_key(&from_vertex) {
        let mut lst: Vec<i64> = v.get(&from_vertex).cloned().unwrap_or_default();;
        lst = { let mut _v = lst.clone(); _v.push(to_vertex); _v };
        v.insert(from_vertex.clone(), lst.clone());;
    } else {
        v.insert(from_vertex.clone(), vec![to_vertex]);;
    }
    g.vertex = v.clone();
    if ((from_vertex + 1) > g.size) {
        g.size = (from_vertex + 1);;
    }
    if ((to_vertex + 1) > g.size) {
        g.size = (to_vertex + 1);;
    }
    return g
};
    fn list_to_string(mut lst: Vec<i64>) -> String {
    let mut res: String = String::new();;
    let mut i: i64 = 0;;
    while (i < (lst.len() as i64)) {
        res = format!("{}{}", res, lst[i as usize].to_string());
        if (i < ((lst.len() as i64) - 1)) {
            res = format!("{}{}", res, " ");
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn list_to_arrow(mut lst: Vec<i64>) -> String {
    let mut res: String = String::new();;
    let mut i: i64 = 0;;
    while (i < (lst.len() as i64)) {
        res = format!("{}{}", res, lst[i as usize].to_string());
        if (i < ((lst.len() as i64) - 1)) {
            res = format!("{}{}", res, " -> ");
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn print_graph(mut g: Graph) {
    println!("{}", format!("{:?}", g.vertex.clone()));;
    let mut i: i64 = 0;;
    while (i < g.size) {
        let mut edges: Vec<i64> = vec![];;
        if g.vertex.clone().contains_key(&i) {
            edges = g.vertex.clone()[&i].clone().clone();
        }
        let line: String = format!("{}{}", format!("{}{}", i.to_string(), "  ->  "), list_to_arrow(edges.clone())).clone();;
        println!("{}", line);;
        i = (i + 1);
    }
};
    fn dfs_recursive(mut g: Graph, mut start_vertex: i64, visited: &mut Vec<bool>, mut order: Vec<i64>) -> Vec<i64> {
    (*visited)[start_vertex as usize] = true;;
    order = { let mut _v = order.clone(); _v.push(start_vertex); _v };
    if g.vertex.clone().contains_key(&start_vertex) {
        let mut neighbors: Vec<i64> = g.vertex.clone()[&start_vertex].clone().clone();;
        let mut i: i64 = 0;;
        while (i < (neighbors.len() as i64)) {
            let nb: i64 = neighbors[i as usize];;
            if !visited[nb as usize] {
                order = dfs_recursive(g.clone(), nb, visited, order.clone());
            }
            i = (i + 1);
        }
    }
    return order
};
    fn dfs(mut g: Graph) -> Vec<i64> {
    let n: i64 = g.size;;
    let mut visited: Vec<bool> = vec![];;
    let mut i: i64 = 0;;
    while (i < n) {
        visited = { let mut _v = visited.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    let mut order: Vec<i64> = vec![];;
    i = 0;
    while (i < n) {
        if !visited[i as usize] {
            order = dfs_recursive(g.clone(), i, &mut visited, order.clone());
        }
        i = (i + 1);
    }
    return order
};
    let mut g: Graph = Graph {vertex: HashMap::new(), size: 0};;
    g = add_edge(g.clone(), 0, 1);
    g = add_edge(g.clone(), 0, 2);
    g = add_edge(g.clone(), 1, 2);
    g = add_edge(g.clone(), 2, 0);
    g = add_edge(g.clone(), 2, 3);
    g = add_edge(g.clone(), 3, 3);
    print_graph(g.clone());;
    println!("{}", "DFS:");;
    println!("{}", list_to_string(dfs(g.clone())));;
    let _end: i64 = _now();;
    let duration_us: i64 = ((_end - _start) / 1000);;
    let memory_bytes: i64 = _mem();;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
