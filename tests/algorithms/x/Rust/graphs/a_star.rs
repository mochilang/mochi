// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SearchResult {
    path: Vec<Vec<i64>>,
    action: Vec<Vec<i64>>,
}
impl std::fmt::Display for SearchResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"path\": {:?}", self.path)?;
        write!(f, ", ")?;
        write!(f, "\"action\": {:?}", self.action)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    let DIRECTIONS: Vec<Vec<i64>> = vec![vec![-1, 0].clone(), vec![0, -1].clone(), vec![1, 0].clone(), vec![0, 1].clone()];
    let mut iabs = move |x: i64| -> i64 {
    if (x < 0) {
        return -x
    }
    return x
};
    let mut search = move |grid: Vec<Vec<i64>>, init: Vec<i64>, goal: Vec<i64>, cost: i64, heuristic: Vec<Vec<i64>>| -> SearchResult {
    let mut closed: Vec<Vec<i64>> = vec![];
    let mut r: i64 = 0;
    while (r < (grid.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut c: i64 = 0;
        while (c < (grid[0 as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            c = (c + 1);
        }
        closed = { let mut _v = closed.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    closed[init[0 as usize] as usize][init[1 as usize] as usize] = 1;
    let mut action: Vec<Vec<i64>> = vec![];
    r = 0;
    while (r < (grid.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut c: i64 = 0;
        while (c < (grid[0 as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            c = (c + 1);
        }
        action = { let mut _v = action.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    let mut x: i64 = init[0 as usize];
    let mut y: i64 = init[1 as usize];
    let mut g: i64 = 0;
    let mut f: i64 = (g + heuristic[x as usize].clone()[y as usize]);
    let mut cell: Vec<Vec<i64>> = vec![vec![f, g, x, y].clone()];
    let mut found: bool = false;
    let mut resign: bool = false;
    while (!found && !resign) {
        if ((cell.len() as i64) == 0) {
            panic!("Algorithm is unable to find solution");
        } else {
            let mut best_i: i64 = 0;
            let mut best_f: i64 = cell[0 as usize].clone()[0 as usize];
            let mut i: i64 = 1;
            while (i < (cell.len() as i64)) {
                if (cell[i as usize].clone()[0 as usize] < best_f) {
                    best_f = cell[i as usize].clone()[0 as usize];
                    best_i = i;
                }
                i = (i + 1);
            }
            let next_cell: Vec<i64> = cell[best_i as usize].clone();
            let mut new_cell: Vec<Vec<i64>> = vec![];
            i = 0;
            while (i < (cell.len() as i64)) {
                if (i != best_i) {
                    new_cell = { let mut _v = new_cell.clone(); _v.push(cell[i as usize].clone()); _v };
                }
                i = (i + 1);
            }
            cell = new_cell.clone();
            x = next_cell[2 as usize];
            y = next_cell[3 as usize];
            g = next_cell[1 as usize];
            if ((x == goal[0 as usize]) && (y == goal[1 as usize])) {
                found = true;
            } else {
                let mut d: i64 = 0;
                while (d < (DIRECTIONS.len() as i64)) {
                    let x2: i64 = (x + DIRECTIONS[d as usize].clone()[0 as usize]);
                    let y2: i64 = (y + DIRECTIONS[d as usize].clone()[1 as usize]);
                    if ((((((x2 >= 0) && (x2 < (grid.len() as i64))) && (y2 >= 0)) && (y2 < (grid[0 as usize].clone().len() as i64))) && (closed[x2 as usize].clone()[y2 as usize] == 0)) && (grid[x2 as usize].clone()[y2 as usize] == 0)) {
                        let g2: i64 = (g + cost);
                        let f2: i64 = (g2 + heuristic[x2 as usize].clone()[y2 as usize]);
                        cell = { let mut _v = cell.clone(); _v.push(vec![f2, g2, x2, y2]); _v };
                        closed[x2 as usize][y2 as usize] = 1;
                        action[x2 as usize][y2 as usize] = d;
                    }
                    d = (d + 1);
                }
            }
        }
    }
    let mut invpath: Vec<Vec<i64>> = vec![];
    x = goal[0 as usize];
    y = goal[1 as usize];
    invpath = { let mut _v = invpath.clone(); _v.push(vec![x, y]); _v };
    while ((x != init[0 as usize]) || (y != init[1 as usize])) {
        let dir: i64 = action[x as usize].clone()[y as usize];
        let x2: i64 = (x - DIRECTIONS[dir as usize].clone()[0 as usize]);
        let y2: i64 = (y - DIRECTIONS[dir as usize].clone()[1 as usize]);
        x = x2;
        y = y2;
        invpath = { let mut _v = invpath.clone(); _v.push(vec![x, y]); _v };
    }
    let mut path: Vec<Vec<i64>> = vec![];
    let mut idx: i64 = ((invpath.len() as i64) - 1);
    while (idx >= 0) {
        path = { let mut _v = path.clone(); _v.push(invpath[idx as usize].clone()); _v };
        idx = (idx - 1);
    }
    return SearchResult {path: path.clone(), action: action.clone()}
};
    let mut mochi_main = move || {
    let grid: Vec<Vec<i64>> = vec![vec![0, 1, 0, 0, 0, 0].clone(), vec![0, 1, 0, 0, 0, 0].clone(), vec![0, 1, 0, 0, 0, 0].clone(), vec![0, 1, 0, 0, 1, 0].clone(), vec![0, 0, 0, 0, 1, 0].clone()];
    let init: Vec<i64> = vec![0, 0];
    let goal: Vec<i64> = vec![((grid.len() as i64) - 1), ((grid[0 as usize].clone().len() as i64) - 1)];
    let cost: i64 = 1;
    let mut heuristic: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (grid.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (grid[0 as usize].clone().len() as i64)) {
            let h: i64 = (iabs((i - goal[0 as usize])) + iabs((j - goal[1 as usize])));
            if (grid[i as usize].clone()[j as usize] == 1) {
                row = { let mut _v = row.clone(); _v.push(99); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(h); _v };
            }
            j = (j + 1);
        }
        heuristic = { let mut _v = heuristic.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let result: SearchResult = search(grid.clone(), init.clone(), goal.clone(), cost, heuristic.clone());
    println!("{}", "ACTION MAP");
    let mut rr: i64 = 0;
    while (rr < (result.action.clone().len() as i64)) {
        println!("{:?}", format!("{:?}", result.action.clone()[rr as usize].clone()));
        rr = (rr + 1);
    }
    let mut p: i64 = 0;
    while (p < (result.path.clone().len() as i64)) {
        println!("{:?}", format!("{:?}", result.path.clone()[p as usize].clone()));
        p = (p + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
