// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Pos {
    y: i64,
    x: i64,
}
impl std::fmt::Display for Pos {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Node {
    pos: Pos,
    g_cost: i64,
    h_cost: f64,
    f_cost: f64,
    path: Vec<Pos>,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"pos\": {}", self.pos)?;
        write!(f, ", ")?;
        write!(f, "\"g_cost\": {}", self.g_cost)?;
        write!(f, ", ")?;
        write!(f, "\"h_cost\": {}", self.h_cost)?;
        write!(f, ", ")?;
        write!(f, "\"f_cost\": {}", self.f_cost)?;
        write!(f, ", ")?;
        write!(f, "\"path\": {:?}", self.path)?;
        write!(f, "}}")
    }
}

static g_HEURISTIC: i64 = 0;
static g_start: Pos = Pos {y: 0, x: 0};
fn main() {
    unsafe {
                let _start: i64 = _now();
        let grid: Vec<Vec<i64>> = vec![vec![0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 1, 0, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 0, 1, 0, 0, 0, 0].clone(), vec![1, 0, 1, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 1, 0, 0].clone()];
        let delta: Vec<Vec<i64>> = vec![vec![-1, 0].clone(), vec![0, -1].clone(), vec![1, 0].clone(), vec![0, 1].clone()];
        let mut abs = |x: i64| -> i64 {
    if (x < 0) {
        return -x
    }
    return x
};
        let mut sqrtApprox = |x: f64| -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        let mut heuristic = |a: Pos, b: Pos| -> f64 {
    let dy: i64 = (a.y - b.y);
    let dx: i64 = (a.x - b.x);
    if (unsafe { g_HEURISTIC.clone() } == 1) {
        return ((abs(dy) + abs(dx)) as f64)
    }
    let dyf: f64 = (dy as f64);
    let dxf: f64 = (dx as f64);
    return sqrtApprox(((dyf * dyf) + (dxf * dxf)))
};
        let mut pos_equal = |a: Pos, b: Pos| -> bool {
    return ((a.y == b.y) && (a.x == b.x))
};
        let mut contains_pos = |lst: Vec<Pos>, p: Pos| -> bool {
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        if pos_equal(lst[i as usize].clone(), p.clone()) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        let mut open_index_of_pos = |open: Vec<Node>, p: Pos| -> i64 {
    let mut i: i64 = 0;
    while (i < (open.len() as i64)) {
        if pos_equal(open[i as usize].clone().pos.clone(), p.clone()) {
            return i
        }
        i = (i + 1);
    }
    return (0 - 1)
};
        let mut remove_node_at = |nodes: Vec<Node>, idx: i64| -> Vec<Node> {
    let mut res: Vec<Node> = vec![];
    let mut i: i64 = 0;
    while (i < (nodes.len() as i64)) {
        if (i != idx) {
            res = { let mut _v = res.clone(); _v.push(nodes[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
        let mut append_pos_list = |path: Vec<Pos>, p: Pos| -> Vec<Pos> {
    let mut res: Vec<Pos> = vec![];
    let mut i: i64 = 0;
    while (i < (path.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(path[i as usize].clone()); _v };
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(p.clone()); _v };
    return res
};
        let mut reverse_pos_list = |lst: Vec<Pos>| -> Vec<Pos> {
    let mut res: Vec<Pos> = vec![];
    let mut i: i64 = ((lst.len() as i64) - 1);
    while (i >= 0) {
        res = { let mut _v = res.clone(); _v.push(lst[i as usize].clone()); _v };
        i = (i - 1);
    }
    return res
};
        let mut concat_pos_lists = |a: Vec<Pos>, b: Vec<Pos>| -> Vec<Pos> {
    let mut res: Vec<Pos> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(a[i as usize].clone()); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < (b.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(b[j as usize].clone()); _v };
        j = (j + 1);
    }
    return res
};
        let mut get_successors = |p: Pos| -> Vec<Pos> {
    let mut res: Vec<Pos> = vec![];
    let mut i: i64 = 0;
    while (i < (delta.len() as i64)) {
        let nx: i64 = (p.x + delta[i as usize].clone()[1 as usize]);
        let ny: i64 = (p.y + delta[i as usize].clone()[0 as usize]);
        if ((((nx >= 0) && (ny >= 0)) && (nx < (grid[0 as usize].clone().len() as i64))) && (ny < (grid.len() as i64))) {
            if (grid[ny as usize].clone()[nx as usize] == 0) {
                res = { let mut _v = res.clone(); _v.push(Pos {y: ny, x: nx}); _v };
            }
        }
        i = (i + 1);
    }
    return res
};
        let mut find_lowest_f = |open: Vec<Node>| -> i64 {
    let mut best: i64 = 0;
    let mut i: i64 = 1;
    while (i < (open.len() as i64)) {
        if (open[i as usize].clone().f_cost < open[best as usize].clone().f_cost) {
            best = i;
        }
        i = (i + 1);
    }
    return best
};
        let mut astar = |start: Pos, goal: Pos| -> Vec<Pos> {
    let h0: f64 = heuristic(unsafe { g_start.clone() }.clone(), goal.clone());
    let mut open: Vec<Node> = vec![Node {pos: unsafe { g_start.clone() }.clone(), g_cost: 0, h_cost: h0, f_cost: h0, path: vec![unsafe { g_start.clone() }.clone()]}.clone()];
    let mut closed: Vec<Pos> = vec![];
    while ((open.len() as i64) > 0) {
        let idx: i64 = find_lowest_f(open.clone());
        let current: Node = open[idx as usize].clone();
        open = remove_node_at(open.clone(), idx);
        if pos_equal(current.pos.clone(), goal.clone()) {
            return current.path.clone()
        }
        closed = { let mut _v = closed.clone(); _v.push(current.pos.clone()); _v };
        let succ: Vec<Pos> = get_successors(current.pos.clone());
        let mut i: i64 = 0;
        while (i < (succ.len() as i64)) {
            let pos: Pos = succ[i as usize].clone();
            if contains_pos(closed.clone(), pos.clone()) {
                i = (i + 1);
                continue
            }
            let tentative_g: i64 = (current.g_cost + 1);
            let idx_open: i64 = open_index_of_pos(open.clone(), pos.clone());
            if ((idx_open == (0 - 1)) || (tentative_g < open[idx_open as usize].clone().g_cost)) {
                let new_path: Vec<Pos> = append_pos_list(current.path.clone().clone(), pos.clone());
                let h: f64 = heuristic(pos.clone(), goal.clone());
                let f: f64 = ((tentative_g as f64) + h);
                if (idx_open != (0 - 1)) {
                    open = remove_node_at(open.clone(), idx_open);
                }
                open = { let mut _v = open.clone(); _v.push(Node {pos: pos.clone(), g_cost: tentative_g, h_cost: h, f_cost: f, path: new_path.clone()}); _v };
            }
            i = (i + 1);
        }
    }
    return vec![unsafe { g_start.clone() }.clone()]
};
        let mut combine_paths = |fwd: Node, bwd: Node| -> Vec<Pos> {
    let mut bwd_copy: Vec<Pos> = vec![];
    let mut i: i64 = 0;
    while (i < ((bwd.path.clone().len() as i64) - 1)) {
        bwd_copy = { let mut _v = bwd_copy.clone(); _v.push(bwd.path.clone()[i as usize].clone()); _v };
        i = (i + 1);
    }
    bwd_copy = reverse_pos_list(bwd_copy.clone());
    return concat_pos_lists(fwd.path.clone().clone(), bwd_copy.clone())
};
        let mut bidirectional_astar = |start: Pos, goal: Pos| -> Vec<Pos> {
    let hf: f64 = heuristic(unsafe { g_start.clone() }.clone(), goal.clone());
    let hb: f64 = heuristic(goal.clone(), unsafe { g_start.clone() }.clone());
    let mut open_f: Vec<Node> = vec![Node {pos: unsafe { g_start.clone() }.clone(), g_cost: 0, h_cost: hf, f_cost: hf, path: vec![unsafe { g_start.clone() }.clone()]}.clone()];
    let mut open_b: Vec<Node> = vec![Node {pos: goal.clone(), g_cost: 0, h_cost: hb, f_cost: hb, path: vec![goal.clone()]}.clone()];
    let mut closed_f: Vec<Pos> = vec![];
    let mut closed_b: Vec<Pos> = vec![];
    while (((open_f.len() as i64) > 0) && ((open_b.len() as i64) > 0)) {
        let idx_f: i64 = find_lowest_f(open_f.clone());
        let current_f: Node = open_f[idx_f as usize].clone();
        open_f = remove_node_at(open_f.clone(), idx_f);
        let idx_b: i64 = find_lowest_f(open_b.clone());
        let current_b: Node = open_b[idx_b as usize].clone();
        open_b = remove_node_at(open_b.clone(), idx_b);
        if pos_equal(current_f.pos.clone(), current_b.pos.clone()) {
            return combine_paths(current_f.clone(), current_b.clone())
        }
        closed_f = { let mut _v = closed_f.clone(); _v.push(current_f.pos.clone()); _v };
        closed_b = { let mut _v = closed_b.clone(); _v.push(current_b.pos.clone()); _v };
        let succ_f: Vec<Pos> = get_successors(current_f.pos.clone());
        let mut i: i64 = 0;
        while (i < (succ_f.len() as i64)) {
            let pos: Pos = succ_f[i as usize].clone();
            if contains_pos(closed_f.clone(), pos.clone()) {
                i = (i + 1);
                continue
            }
            let tentative_g: i64 = (current_f.g_cost + 1);
            let h: f64 = heuristic(pos.clone(), current_b.pos.clone());
            let f: f64 = ((tentative_g as f64) + h);
            let idx_open: i64 = open_index_of_pos(open_f.clone(), pos.clone());
            if ((idx_open == (0 - 1)) || (tentative_g < open_f[idx_open as usize].clone().g_cost)) {
                let new_path: Vec<Pos> = append_pos_list(current_f.path.clone().clone(), pos.clone());
                if (idx_open != (0 - 1)) {
                    open_f = remove_node_at(open_f.clone(), idx_open);
                }
                open_f = { let mut _v = open_f.clone(); _v.push(Node {pos: pos.clone(), g_cost: tentative_g, h_cost: h, f_cost: f, path: new_path.clone()}); _v };
            }
            i = (i + 1);
        }
        let succ_b: Vec<Pos> = get_successors(current_b.pos.clone());
        i = 0;
        while (i < (succ_b.len() as i64)) {
            let pos: Pos = succ_b[i as usize].clone();
            if contains_pos(closed_b.clone(), pos.clone()) {
                i = (i + 1);
                continue
            }
            let tentative_g: i64 = (current_b.g_cost + 1);
            let h: f64 = heuristic(pos.clone(), current_f.pos.clone());
            let f: f64 = ((tentative_g as f64) + h);
            let idx_open: i64 = open_index_of_pos(open_b.clone(), pos.clone());
            if ((idx_open == (0 - 1)) || (tentative_g < open_b[idx_open as usize].clone().g_cost)) {
                let new_path: Vec<Pos> = append_pos_list(current_b.path.clone().clone(), pos.clone());
                if (idx_open != (0 - 1)) {
                    open_b = remove_node_at(open_b.clone(), idx_open);
                }
                open_b = { let mut _v = open_b.clone(); _v.push(Node {pos: pos.clone(), g_cost: tentative_g, h_cost: h, f_cost: f, path: new_path.clone()}); _v };
            }
            i = (i + 1);
        }
    }
    return vec![unsafe { g_start.clone() }.clone()]
};
        let mut path_to_string = |path: Vec<Pos>| -> String {
    if ((path.len() as i64) == 0) {
        return String::from("[]")
    }
    let mut s: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "[(", path[0 as usize].clone().y.to_string()), ", "), path[0 as usize].clone().x.to_string()), ")").clone();
    let mut i: i64 = 1;
    while (i < (path.len() as i64)) {
        s = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s, ", ("), path[i as usize].clone().y.to_string()), ", "), path[i as usize].clone().x.to_string()), ")");
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
        let goal: Pos = Pos {y: ((grid.len() as i64) - 1), x: ((grid[0 as usize].clone().len() as i64) - 1)};
        let path1: Vec<Pos> = astar(unsafe { g_start.clone() }.clone(), goal.clone());
        println!("{}", path_to_string(path1.clone()));
        let path2: Vec<Pos> = bidirectional_astar(unsafe { g_start.clone() }.clone(), goal.clone());
        println!("{}", path_to_string(path2.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
