// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Edge {
    src: i64,
    dst: i64,
    weight: i64,
}
impl std::fmt::Display for Edge {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"src\": {}", self.src)?;
        write!(f, ", ")?;
        write!(f, "\"dst\": {}", self.dst)?;
        write!(f, ", ")?;
        write!(f, "\"weight\": {}", self.weight)?;
        write!(f, "}}")
    }
}

static g_INF: f64 = 1000000000.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn list_to_string(mut arr: Vec<f64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        s = format!("{}{}", s, arr[i as usize].to_string());
        if (i < ((arr.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    return format!("{}{}", s, "]").clone()
};
        fn check_negative_cycle(mut graph: Vec<Edge>, mut distance: Vec<f64>, mut edge_count: i64) -> bool {
    let mut j: i64 = 0;
    while (j < edge_count) {
        let e: Edge = graph[j as usize].clone();
        let u: i64 = e.src;
        let v: i64 = e.dst;
        let w: f64 = (e.weight as f64);
        if ((distance[u as usize] < unsafe { g_INF.clone() }) && ((distance[u as usize] + w) < distance[v as usize])) {
            return true
        }
        j = (j + 1);
    }
    return false
};
        fn bellman_ford(mut graph: Vec<Edge>, mut vertex_count: i64, mut edge_count: i64, mut src: i64) -> Vec<f64> {
    let mut distance: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < vertex_count) {
        distance = { let mut _v = distance.clone(); _v.push(unsafe { g_INF.clone() }); _v };
        i = (i + 1);
    }
    distance[src as usize] = 0.0;
    let mut k: i64 = 0;
    while (k < (vertex_count - 1)) {
        let mut j: i64 = 0;
        while (j < edge_count) {
            let e: Edge = graph[j as usize].clone();
            let u: i64 = e.src;
            let v: i64 = e.dst;
            let w: f64 = (e.weight as f64);
            if ((distance[u as usize] < unsafe { g_INF.clone() }) && ((distance[u as usize] + w) < distance[v as usize])) {
                distance[v as usize] = (distance[u as usize] + w);
            }
            j = (j + 1);
        }
        k = (k + 1);
    }
    if check_negative_cycle(graph.clone(), distance.clone(), edge_count) {
        panic!("Negative cycle found");
    }
    return distance
};
        let edges: Vec<Edge> = vec![Edge {src: 2, dst: 1, weight: -10}.clone(), Edge {src: 3, dst: 2, weight: 3}.clone(), Edge {src: 0, dst: 3, weight: 5}.clone(), Edge {src: 0, dst: 1, weight: 4}.clone()];
        let distances: Vec<f64> = bellman_ford(edges.clone(), 4, (edges.len() as i64), 0);
        println!("{}", list_to_string(distances.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
