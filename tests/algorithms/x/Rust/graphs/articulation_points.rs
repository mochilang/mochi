// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn dfs_skip(mut graph: Vec<Vec<i64>>, visited: &mut Vec<bool>, mut skip: i64, mut at: i64) -> i64 {
    (*visited)[at as usize] = true;
    let mut count: i64 = 1;
    for to in graph[at as usize].clone().iter().cloned() {
        if (to == skip) {
            continue
        }
        if (visited[to as usize] == false) {
            count = (count + dfs_skip(graph.clone(), visited, skip, to));
        }
    }
    return count
};
    fn articulation_points(mut graph: Vec<Vec<i64>>) -> Vec<i64> {
    let n: i64 = (graph.len() as i64);
    let mut result: Vec<i64> = vec![];
    let mut v: i64 = 0;
    while (v < n) {
        let mut visited: Vec<bool> = vec![];
        let mut i: i64 = 0;
        while (i < n) {
            visited = { let mut _v = visited.clone(); _v.push(false); _v };
            i = (i + 1);
        }
        let mut start: i64 = 0;
        while ((start == v) && (start < n)) {
            start = (start + 1);
        }
        let reach: i64 = dfs_skip(graph.clone(), &mut visited, v, start);
        if (reach < (n - 1)) {
            result = { let mut _v = result.clone(); _v.push(v); _v };
            println!("{}", v);
        }
        v = (v + 1);
    }
    return result
};
    fn mochi_main() {
    let graph: Vec<Vec<i64>> = vec![vec![1, 2].clone(), vec![0, 2].clone(), vec![0, 1, 3, 5].clone(), vec![2, 4].clone(), vec![3].clone(), vec![2, 6, 8].clone(), vec![5, 7].clone(), vec![6, 8].clone(), vec![5, 7].clone()];
    articulation_points(graph.clone());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
