// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed } * 1103515245) + 12345) % 2147483648) };
    return unsafe { g_seed }
};
        fn random() -> f64 {
    return ((1.0 * (rand() as f64)) / 2147483648.0)
};
        fn complete_graph(mut vertices_number: i64) -> HashMap<i64, Vec<i64>> {
    let mut graph: HashMap<i64, Vec<i64>> = HashMap::new();
    let mut i: i64 = 0;
    while (i < vertices_number) {
        let mut neighbors: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < vertices_number) {
            if (j != i) {
                neighbors = { let mut _v = neighbors.clone(); _v.push(j); _v };
            }
            j = (j + 1);
        }
        graph.insert(i.clone(), neighbors);
        i = (i + 1);
    }
    return graph
};
        fn random_graph(mut vertices_number: i64, mut probability: f64, mut directed: bool) -> HashMap<i64, Vec<i64>> {
    let mut graph: HashMap<i64, Vec<i64>> = HashMap::new();
    let mut i: i64 = 0;
    while (i < vertices_number) {
        graph.insert(i.clone(), vec![]);
        i = (i + 1);
    }
    if (probability >= 1.0) {
        return complete_graph(vertices_number)
    }
    if (probability <= 0.0) {
        return graph
    }
    i = 0;
    while (i < vertices_number) {
        let mut j: i64 = (i + 1);
        while (j < vertices_number) {
            if (random() < probability) {
                graph.insert(i.clone(), { let mut _v = graph.get(&i).cloned().unwrap_or_default().clone(); _v.push(j); _v });
                if !directed {
                    graph.insert(j.clone(), { let mut _v = graph.get(&j).cloned().unwrap_or_default().clone(); _v.push(i); _v });
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return graph
};
        fn mochi_main() {
    unsafe { g_seed = 1 };
    let g1: HashMap<i64, Vec<i64>> = random_graph(4, 0.5, false);
    println!("{:?}", format!("{:?}", g1));
    unsafe { g_seed = 1 };
    let g2: HashMap<i64, Vec<i64>> = random_graph(4, 0.5, true);
    println!("{:?}", format!("{:?}", g2));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
