// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Edge {
    destination_vertex: i64,
    weight: i64,
}
impl std::fmt::Display for Edge {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"destination_vertex\": {}", self.destination_vertex)?;
        write!(f, ", ")?;
        write!(f, "\"weight\": {}", self.weight)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct AdjacencyList {
    graph: Vec<Vec<Edge>>,
    size: i64,
}
impl std::fmt::Display for AdjacencyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"graph\": {:?}", self.graph)?;
        write!(f, ", ")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_adjacency_list(mut size: i64) -> AdjacencyList {
    let mut g: Vec<Vec<Edge>> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        g = { let mut _v = g.clone(); _v.push(vec![]); _v };
        i = (i + 1);
    }
    return AdjacencyList {graph: g.clone(), size: size}
};
    fn add_edge(al: &mut AdjacencyList, mut from_vertex: i64, mut to_vertex: i64, mut weight: i64) {
    if !((weight == 0) || (weight == 1)) {
        panic!("Edge weight must be either 0 or 1.");
    }
    if ((to_vertex < 0) || (to_vertex >= al.size)) {
        panic!("Vertex indexes must be in [0; size).");
    }
    let mut g: Vec<Vec<Edge>> = al.graph.clone();
    let edges: Vec<Edge> = g[from_vertex as usize].clone();
    g[from_vertex as usize] = { let mut _v = edges.clone(); _v.push(Edge {destination_vertex: to_vertex, weight: weight}); _v };
    (*al).graph = g.clone();
};
    fn push_front(mut q: Vec<i64>, mut v: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![v];
    let mut i: i64 = 0;
    while (i < (q.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(q[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn pop_front(mut q: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (q.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(q[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn front(mut q: Vec<i64>) -> i64 {
    return q[0 as usize]
};
    fn get_shortest_path(mut al: AdjacencyList, mut start_vertex: i64, mut finish_vertex: i64) -> i64 {
    let mut queue: Vec<i64> = vec![start_vertex];
    let mut distances: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < al.size) {
        distances = { let mut _v = distances.clone(); _v.push(-1); _v };
        i = (i + 1);
    }
    distances[start_vertex as usize] = 0;
    while ((queue.len() as i64) > 0) {
        let current_vertex: i64 = front(queue.clone());
        queue = pop_front(queue.clone());
        let current_distance: i64 = distances[current_vertex as usize];
        let mut edges: Vec<Edge> = al.graph.clone()[current_vertex as usize].clone();
        let mut j: i64 = 0;
        while (j < (edges.len() as i64)) {
            let edge: Edge = edges[j as usize].clone();
            let new_distance: i64 = (current_distance + edge.weight);
            let dest: i64 = edge.destination_vertex;
            let dest_distance: i64 = distances[dest as usize];
            if ((dest_distance >= 0) && (new_distance >= dest_distance)) {
                j = (j + 1);
                continue
            }
            distances[dest as usize] = new_distance;
            if (edge.weight == 0) {
                queue = push_front(queue.clone(), dest);
            } else {
                queue = { let mut _v = queue.clone(); _v.push(dest); _v };
            }
            j = (j + 1);
        }
    }
    let result: i64 = distances[finish_vertex as usize];
    if (result < 0) {
        panic!("No path from start_vertex to finish_vertex.");
    }
    return result
};
    let mut g: AdjacencyList = new_adjacency_list(11);
    add_edge(&mut g, 0, 1, 0);
    add_edge(&mut g, 0, 3, 1);
    add_edge(&mut g, 1, 2, 0);
    add_edge(&mut g, 2, 3, 0);
    add_edge(&mut g, 4, 2, 1);
    add_edge(&mut g, 4, 5, 1);
    add_edge(&mut g, 4, 6, 1);
    add_edge(&mut g, 5, 9, 0);
    add_edge(&mut g, 6, 7, 1);
    add_edge(&mut g, 7, 8, 1);
    add_edge(&mut g, 8, 10, 1);
    add_edge(&mut g, 9, 7, 0);
    add_edge(&mut g, 9, 10, 1);
    println!("{}", get_shortest_path(g.clone(), 0, 3).to_string());
    println!("{}", get_shortest_path(g.clone(), 4, 10).to_string());
    println!("{}", get_shortest_path(g.clone(), 4, 8).to_string());
    println!("{}", get_shortest_path(g.clone(), 0, 1).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
