// Generated by Mochi transpiler v0.10.65
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn join(mut xs: Vec<String>) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].clone());
        i = (i + 1);
    }
    return s.clone()
};
    fn breadth_first_search(mut graph: HashMap<String, Vec<String>>, mut start: String) -> Vec<String> {
    let mut explored: HashMap<String, bool> = HashMap::new();
    explored.insert(start.clone(), true);
    let mut result: Vec<String> = vec![start.clone()];
    let mut queue: Vec<String> = vec![start.clone()];
    while ((queue.len() as i64) > 0) {
        let v: String = queue[0 as usize].clone().clone();
        queue = queue[1 as usize..(queue.len() as i64) as usize].to_vec();
        let children: Vec<String> = graph.get(v.as_str()).cloned().unwrap_or_default();
        let mut i: i64 = 0;
        while (i < (children.len() as i64)) {
            let w: String = children[i as usize].clone().clone();
            if !explored.contains_key(&w) {
                explored.insert(w.clone(), true);
                result = { let mut _v = result.clone(); _v.push(w.clone()); _v };
                queue = { let mut _v = queue.clone(); _v.push(w.clone()); _v };
            }
            i = (i + 1);
        }
    }
    return result
};
    fn breadth_first_search_with_deque(mut graph: HashMap<String, Vec<String>>, mut start: String) -> Vec<String> {
    let mut visited: HashMap<String, bool> = HashMap::new();
    visited.insert(start.clone(), true);
    let mut result: Vec<String> = vec![start.clone()];
    let mut queue: Vec<String> = vec![start.clone()];
    let mut head: i64 = 0;
    while (head < (queue.len() as i64)) {
        let v: String = queue[head as usize].clone().clone();
        head = (head + 1);
        let children: Vec<String> = graph.get(v.as_str()).cloned().unwrap_or_default();
        let mut i: i64 = 0;
        while (i < (children.len() as i64)) {
            let child: String = children[i as usize].clone().clone();
            if !visited.contains_key(&child) {
                visited.insert(child.clone(), true);
                result = { let mut _v = result.clone(); _v.push(child.clone()); _v };
                queue = { let mut _v = queue.clone(); _v.push(child.clone()); _v };
            }
            i = (i + 1);
        }
    }
    return result
};
    let G: HashMap<String, Vec<String>> = HashMap::from([(String::from("A"), vec![String::from("B").clone(), String::from("C").clone()]), (String::from("B"), vec![String::from("A").clone(), String::from("D").clone(), String::from("E").clone()]), (String::from("C"), vec![String::from("A").clone(), String::from("F").clone()]), (String::from("D"), vec![String::from("B").clone()]), (String::from("E"), vec![String::from("B").clone(), String::from("F").clone()]), (String::from("F"), vec![String::from("C").clone(), String::from("E").clone()])]);
    println!("{}", join(breadth_first_search(G.clone(), String::from("A"))));
    println!("{}", join(breadth_first_search_with_deque(G.clone(), String::from("A"))));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
