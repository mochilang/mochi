// Generated by Mochi transpiler v0.10.65
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    pos: String,
    path: Vec<String>,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"pos\": \"{}\"", self.pos)?;
        write!(f, ", ")?;
        write!(f, "\"path\": {:?}", self.path)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    let grid: Vec<Vec<i64>> = vec![vec![0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 1, 0, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 0, 1, 0, 0, 0, 0].clone(), vec![1, 0, 1, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 0, 0, 0].clone(), vec![0, 0, 0, 0, 1, 0, 0].clone()];
    let delta: Vec<Vec<i64>> = vec![vec![-1, 0].clone(), vec![0, -1].clone(), vec![1, 0].clone(), vec![0, 1].clone()];
    let mut key = |y: i64, x: i64| -> String {
    return format!("{}{}", format!("{}{}", y.to_string(), ","), x.to_string()).clone()
};
    let mut parse_int = |s: String| -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
    let mut parse_key = |k: String| -> Vec<i64> {
    let mut idx: i64 = 0;
    while ((idx < (k.len() as i64)) && ({ let tmp = &k; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.as_str() != ",")) {
        idx = (idx + 1);
    }
    let y: i64 = parse_int({ let tmp = &k; tmp.chars().skip(0 as usize).take((idx - 0) as usize).collect::<String>() });
    let x: i64 = parse_int({ let tmp = &k; tmp.chars().skip((idx + 1) as usize).take(((k.len() as i64) - (idx + 1)) as usize).collect::<String>() });
    return vec![y, x]
};
    let mut neighbors = |pos: String| -> Vec<String> {
    let coords: Vec<i64> = parse_key(pos.clone());
    let y: i64 = coords[0 as usize];
    let x: i64 = coords[1 as usize];
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (delta.len() as i64)) {
        let ny: i64 = (y + delta[i as usize].clone()[0 as usize]);
        let nx: i64 = (x + delta[i as usize].clone()[1 as usize]);
        if ((((ny >= 0) && (ny < (grid.len() as i64))) && (nx >= 0)) && (nx < (grid[0 as usize].clone().len() as i64))) {
            if (grid[ny as usize].clone()[nx as usize] == 0) {
                res = { let mut _v = res.clone(); _v.push(key(ny, nx)); _v };
            }
        }
        i = (i + 1);
    }
    return res
};
    let mut reverse_list = |lst: Vec<String>| -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = ((lst.len() as i64) - 1);
    while (i >= 0) {
        res = { let mut _v = res.clone(); _v.push(lst[i as usize].clone()); _v };
        i = (i - 1);
    }
    return res
};
    let mut bfs = |start: String, goal: String| -> Vec<String> {
    let mut queue: Vec<Node> = vec![];
    queue = { let mut _v = queue.clone(); _v.push(Node {pos: start.clone(), path: vec![start.clone()]}); _v };
    let mut head: i64 = 0;
    let mut visited: HashMap<String, bool> = HashMap::from([(String::from(start), true)]);
    while (head < (queue.len() as i64)) {
        let node: Node = queue[head as usize].clone();
        head = (head + 1);
        if (node.pos.clone().as_str() == goal.as_str()) {
            return node.path.clone()
        }
        let neigh: Vec<String> = neighbors(node.pos.clone());
        let mut i: i64 = 0;
        while (i < (neigh.len() as i64)) {
            let npos: String = neigh[i as usize].clone().clone();
            if !visited.contains_key(&npos) {
                visited.insert(npos.clone(), true);
                let new_path: Vec<String> = { let mut _v = node.path.clone().clone(); _v.push(npos.clone()); _v };
                queue = { let mut _v = queue.clone(); _v.push(Node {pos: npos.clone(), path: new_path.clone()}); _v };
            }
            i = (i + 1);
        }
    }
    return vec![]
};
    let mut bidirectional_bfs = |start: String, goal: String| -> Vec<String> {
    let mut queue_f: Vec<Node> = vec![];
    let mut queue_b: Vec<Node> = vec![];
    queue_f = { let mut _v = queue_f.clone(); _v.push(Node {pos: start.clone(), path: vec![start.clone()]}); _v };
    queue_b = { let mut _v = queue_b.clone(); _v.push(Node {pos: goal.clone(), path: vec![goal.clone()]}); _v };
    let mut head_f: i64 = 0;
    let mut head_b: i64 = 0;
    let mut visited_f: HashMap<String, Vec<String>> = HashMap::from([(String::from(start), vec![start.clone()])]);
    let mut visited_b: HashMap<String, Vec<String>> = HashMap::from([(String::from(goal), vec![goal.clone()])]);
    while ((head_f < (queue_f.len() as i64)) && (head_b < (queue_b.len() as i64))) {
        let node_f: Node = queue_f[head_f as usize].clone();
        head_f = (head_f + 1);
        let neigh_f: Vec<String> = neighbors(node_f.pos.clone());
        let mut i: i64 = 0;
        while (i < (neigh_f.len() as i64)) {
            let npos: String = neigh_f[i as usize].clone().clone();
            if !visited_f.contains_key(&npos) {
                let new_path: Vec<String> = { let mut _v = node_f.path.clone().clone(); _v.push(npos.clone()); _v };
                visited_f.insert(npos.clone(), new_path.clone());
                if visited_b.contains_key(&npos) {
                    let mut rev: Vec<String> = reverse_list(visited_b.get(npos.as_str()).cloned().unwrap_or_default());
                    let mut j: i64 = 1;
                    while (j < (rev.len() as i64)) {
                        new_path = { let mut _v = new_path.clone(); _v.push(rev[j as usize].clone()); _v };
                        j = (j + 1);
                    }
                    return new_path
                }
                queue_f = { let mut _v = queue_f.clone(); _v.push(Node {pos: npos.clone(), path: new_path.clone()}); _v };
            }
            i = (i + 1);
        }
        let node_b: Node = queue_b[head_b as usize].clone();
        head_b = (head_b + 1);
        let neigh_b: Vec<String> = neighbors(node_b.pos.clone());
        let mut j: i64 = 0;
        while (j < (neigh_b.len() as i64)) {
            let nposb: String = neigh_b[j as usize].clone().clone();
            if !visited_b.contains_key(&nposb) {
                let new_path_b: Vec<String> = { let mut _v = node_b.path.clone().clone(); _v.push(nposb.clone()); _v };
                visited_b.insert(nposb.clone(), new_path_b.clone());
                if visited_f.contains_key(&nposb) {
                    let mut path_f: Vec<String> = visited_f.get(nposb.as_str()).cloned().unwrap_or_default();
                    new_path_b = reverse_list(new_path_b.clone());
                    let mut t: i64 = 1;
                    while (t < (new_path_b.len() as i64)) {
                        path_f = { let mut _v = path_f.clone(); _v.push(new_path_b[t as usize].clone()); _v };
                        t = (t + 1);
                    }
                    return path_f
                }
                queue_b = { let mut _v = queue_b.clone(); _v.push(Node {pos: nposb.clone(), path: new_path_b.clone()}); _v };
            }
            j = (j + 1);
        }
    }
    return vec![start.clone()]
};
    let mut path_to_string = |path: Vec<String>| -> String {
    if ((path.len() as i64) == 0) {
        return String::from("[]")
    }
    let mut first: Vec<i64> = parse_key(path[0 as usize].clone());
    let mut s: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "[(", first[0 as usize].to_string()), ", "), first[1 as usize].to_string()), ")").clone();
    let mut i: i64 = 1;
    while (i < (path.len() as i64)) {
        let c: Vec<i64> = parse_key(path[i as usize].clone());
        s = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s, ", ("), c[0 as usize].to_string()), ", "), c[1 as usize].to_string()), ")");
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    let start: String = key(0, 0).clone();
    let goal: String = key(((grid.len() as i64) - 1), ((grid[0 as usize].clone().len() as i64) - 1)).clone();
    let path1: Vec<String> = bfs(start.clone(), goal.clone());
    println!("{}", path_to_string(path1.clone()));
    let path2: Vec<String> = bidirectional_bfs(start.clone(), goal.clone());
    println!("{}", path_to_string(path2.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
