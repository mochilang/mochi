// Generated by Mochi transpiler v0.10.73
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn depth_first_search(mut graph: Vec<Vec<i64>>, mut vertex: i64, visited: &mut Vec<bool>, rec_stk: &mut Vec<bool>) -> bool {
    (*visited)[vertex as usize] = true;
    (*rec_stk)[vertex as usize] = true;
    for node in graph[vertex as usize].clone().iter().cloned() {
        if !visited[node as usize] {
            if depth_first_search(graph.clone(), node, visited, rec_stk) {
                return true
            }
        } else if rec_stk[node as usize] {
            return true
        }
    }
    (*rec_stk)[vertex as usize] = false;
    return false
};
    fn check_cycle(mut graph: Vec<Vec<i64>>) -> bool {
    let n: i64 = (graph.len() as i64);
    let mut visited: Vec<bool> = vec![];
    let mut rec_stk: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        visited = { let mut _v = visited.clone(); _v.push(false); _v };
        rec_stk = { let mut _v = rec_stk.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        if !visited[i as usize] {
            if depth_first_search(graph.clone(), i, &mut visited, &mut rec_stk) {
                return true
            }
        }
        i = (i + 1);
    }
    return false
};
    fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
    let g1: Vec<Vec<i64>> = vec![vec![].clone(), vec![0, 3].clone(), vec![0, 4].clone(), vec![5].clone(), vec![5].clone(), vec![].clone()];
    print_bool(check_cycle(g1.clone()));
    let g2: Vec<Vec<i64>> = vec![vec![1, 2].clone(), vec![2].clone(), vec![0, 3].clone(), vec![3].clone()];
    print_bool(check_cycle(g2.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
