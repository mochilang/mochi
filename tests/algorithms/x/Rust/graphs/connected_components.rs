// Generated by Mochi transpiler v0.10.65
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    let test_graph_1: HashMap<i64, Vec<i64>> = HashMap::from([(0, vec![1, 2]), (1, vec![0, 3]), (2, vec![0]), (3, vec![1]), (4, vec![5, 6]), (5, vec![4, 6]), (6, vec![4, 5])]);
    let test_graph_2: HashMap<i64, Vec<i64>> = HashMap::from([(0, vec![1, 2, 3]), (1, vec![0, 3]), (2, vec![0]), (3, vec![0, 1]), (4, vec![]), (5, vec![])]);
    fn dfs(mut graph: HashMap<i64, Vec<i64>>, mut vert: i64, visited: &mut Vec<bool>) -> Vec<i64> {
    (*visited)[vert as usize] = true;
    let mut connected_verts: Vec<i64> = vec![];
    for neighbour in graph.get(&vert).cloned().unwrap_or_default().iter().cloned() {
        if !visited[neighbour as usize] {
            connected_verts = vec![connected_verts.clone(), dfs(graph.clone(), neighbour, visited).clone()].concat();
        }
    }
    return vec![vec![vert].clone(), connected_verts.clone()].concat()
};
    fn connected_components(mut graph: HashMap<i64, Vec<i64>>) -> Vec<Vec<i64>> {
    let graph_size: i64 = (graph.len() as i64);
    let mut visited: Vec<bool> = vec![];
    for _ in 0..graph_size {
        visited = { let mut _v = visited.clone(); _v.push(false); _v };
    }
    let mut components_list: Vec<Vec<i64>> = vec![];
    for i in 0..graph_size {
        if !visited[i as usize] {
            let component: Vec<i64> = dfs(graph.clone(), i, &mut visited);
            components_list = { let mut _v = components_list.clone(); _v.push(component.clone()); _v };
        }
    }
    return components_list
};
    println!("{}", format!("{:?}", connected_components(test_graph_1.clone())));
    println!("{}", format!("{:?}", connected_components(test_graph_2.clone())));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
