// Generated by Mochi transpiler v0.10.65
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(mut xs: Vec<String>, mut x: String) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone().as_str() == x.as_str()) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn contains_key(mut m: HashMap<String, Vec<String>>, mut key: String) -> bool {
    for k in m.keys().cloned() {
        if (k.as_str() == key.as_str()) {
            return true
        }
    }
    return false
};
    fn bfs_shortest_path(mut graph: HashMap<String, Vec<String>>, mut start: String, mut goal: String) -> Vec<String> {
    let mut explored: Vec<String> = vec![];
    let mut queue: Vec<Vec<String>> = vec![vec![start.clone()].clone()];
    if (start.as_str() == goal.as_str()) {
        return vec![start.clone()]
    }
    while ((queue.len() as i64) > 0) {
        let path: Vec<String> = queue[0 as usize].clone();
        queue = queue[1 as usize..(queue.len() as i64) as usize].to_vec();
        let node: String = path[((path.len() as i64) - 1) as usize].clone().clone();
        if !contains(explored.clone(), node.clone()) {
            let neighbours: Vec<String> = graph.get(node.as_str()).cloned().unwrap_or_default();
            let mut i: i64 = 0;
            while (i < (neighbours.len() as i64)) {
                let neighbour: String = neighbours[i as usize].clone().clone();
                let mut new_path: Vec<String> = path.clone();
                new_path = { let mut _v = new_path.clone(); _v.push(neighbour.clone()); _v };
                queue = { let mut _v = queue.clone(); _v.push(new_path.clone()); _v };
                if (neighbour.as_str() == goal.as_str()) {
                    return new_path
                }
                i = (i + 1);
            }
            explored = { let mut _v = explored.clone(); _v.push(node.clone()); _v };
        }
    }
    return vec![]
};
    fn bfs_shortest_path_distance(mut graph: HashMap<String, Vec<String>>, mut start: String, mut target: String) -> i64 {
    if ((contains_key(graph.clone(), start.clone()) == false) || (contains_key(graph.clone(), target.clone()) == false)) {
        return -1
    }
    if (start.as_str() == target.as_str()) {
        return 0
    }
    let mut queue: Vec<String> = vec![start.clone()];
    let mut visited: Vec<String> = vec![start.clone()];
    let mut dist: HashMap<String, i64> = HashMap::new();
    dist.insert(start.clone(), 0);
    dist.insert(target.clone(), -1);
    while ((queue.len() as i64) > 0) {
        let node: String = queue[0 as usize].clone().clone();
        queue = queue[1 as usize..(queue.len() as i64) as usize].to_vec();
        if (node.as_str() == target.as_str()) {
            if ((dist.get(target.as_str()).cloned().unwrap_or_default() == -1) || (dist.get(node.as_str()).cloned().unwrap_or_default() < dist.get(target.as_str()).cloned().unwrap_or_default())) {
                dist.insert(target.clone(), dist.get(node.as_str()).cloned().unwrap_or_default());
            }
        }
        let adj: Vec<String> = graph.get(node.as_str()).cloned().unwrap_or_default();
        let mut i: i64 = 0;
        while (i < (adj.len() as i64)) {
            let next: String = adj[i as usize].clone().clone();
            if !contains(visited.clone(), next.clone()) {
                visited = { let mut _v = visited.clone(); _v.push(next.clone()); _v };
                queue = { let mut _v = queue.clone(); _v.push(next.clone()); _v };
                dist.insert(next.clone(), (dist.get(node.as_str()).cloned().unwrap_or_default() + 1));
            }
            i = (i + 1);
        }
    }
    return dist.get(target.as_str()).cloned().unwrap_or_default()
};
    let demo_graph: HashMap<String, Vec<String>> = HashMap::from([(String::from("A"), vec![String::from("B").clone(), String::from("C").clone(), String::from("E").clone()]), (String::from("B"), vec![String::from("A").clone(), String::from("D").clone(), String::from("E").clone()]), (String::from("C"), vec![String::from("A").clone(), String::from("F").clone(), String::from("G").clone()]), (String::from("D"), vec![String::from("B").clone()]), (String::from("E"), vec![String::from("A").clone(), String::from("B").clone(), String::from("D").clone()]), (String::from("F"), vec![String::from("C").clone()]), (String::from("G"), vec![String::from("C").clone()])]);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
