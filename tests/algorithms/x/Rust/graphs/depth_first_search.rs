// Generated by Mochi transpiler v0.10.73
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();;
    fn contains(mut lst: Vec<String>, mut v: String) -> bool {
    let mut i: i64 = 0;;
    while (i < (lst.len() as i64)) {
        if (lst[i as usize].clone().as_str() == v.as_str()) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn depth_first_search(mut graph: HashMap<String, Vec<String>>, mut start: String) -> Vec<String> {
    let mut explored: Vec<String> = vec![];;
    let mut stack: Vec<String> = vec![];;
    stack = { let mut _v = stack.clone(); _v.push(start.clone()); _v };
    explored = { let mut _v = explored.clone(); _v.push(start.clone()); _v };
    while ((stack.len() as i64) > 0) {
        let idx: i64 = ((stack.len() as i64) - 1);;
        let v: String = stack[idx as usize].clone().clone();;
        stack = stack[0 as usize..idx as usize].to_vec();
        let neighbors: Vec<String> = graph.get(v.as_str()).cloned().unwrap_or_default();;
        let mut i: i64 = ((neighbors.len() as i64) - 1);;
        while (i >= 0) {
            let adj: String = neighbors[i as usize].clone().clone();;
            if !contains(explored.clone(), adj.clone()) {
                explored = { let mut _v = explored.clone(); _v.push(adj.clone()); _v };
                stack = { let mut _v = stack.clone(); _v.push(adj.clone()); _v };
            }
            i = (i - 1);
        }
    }
    return explored
};
    let G: HashMap<String, Vec<String>> = HashMap::from([(String::from("A"), vec![String::from("B").clone(), String::from("C").clone(), String::from("D").clone()]), (String::from("B"), vec![String::from("A").clone(), String::from("D").clone(), String::from("E").clone()]), (String::from("C"), vec![String::from("A").clone(), String::from("F").clone()]), (String::from("D"), vec![String::from("B").clone(), String::from("D").clone()]), (String::from("E"), vec![String::from("B").clone(), String::from("F").clone()]), (String::from("F"), vec![String::from("C").clone(), String::from("E").clone(), String::from("G").clone()]), (String::from("G"), vec![String::from("F").clone()])]);;
    let result: Vec<String> = depth_first_search(G.clone(), String::from("A"));;
    println!("{:?}", format!("{:?}", result));;
    let _end: i64 = _now();;
    let duration_us: i64 = ((_end - _start) / 1000);;
    let memory_bytes: i64 = _mem();;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
