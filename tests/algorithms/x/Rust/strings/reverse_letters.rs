// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split(s: &str, sep: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch == sep) {
            res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
            current = String::from("");
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    return res
};
    fn join_with_space(mut xs: Vec<String>) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].clone());
        if ((i + 1) < (xs.len() as i64)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    return s.clone()
};
    fn reverse_str(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i = ((s.len() as i64) - 1);
    while (i >= 0) {
        res = format!("{}{}", res, s.chars().nth(i as usize).unwrap().to_string());
        i = (i - 1);
    }
    return res.clone()
};
    fn reverse_letters(sentence: &str, mut length: i64) -> String {
    let mut words: Vec<String> = sentence.split(" ").map(|x| x.to_string()).collect::<Vec<String>>();
    let mut result: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (words.len() as i64)) {
        let mut word: String = words[i as usize].clone().clone();
        if ((word.len() as i64) > length) {
            result = { let mut _v = result.clone(); _v.push(reverse_str(&word)); _v };
        } else {
            result = { let mut _v = result.clone(); _v.push(word.clone()); _v };
        }
        i = (i + 1);
    }
    return join_with_space(result.clone()).clone()
};
    fn test_reverse_letters() {
    if (reverse_letters(&"Hey wollef sroirraw", 3).as_str() != "Hey fellow warriors") {
        panic!("test1 failed");
    }
    if (reverse_letters(&"nohtyP is nohtyP", 2).as_str() != "Python is Python") {
        panic!("test2 failed");
    }
    if (reverse_letters(&"1 12 123 1234 54321 654321", 0).as_str() != "1 21 321 4321 12345 123456") {
        panic!("test3 failed");
    }
    if (reverse_letters(&"racecar", 0).as_str() != "racecar") {
        panic!("test4 failed");
    }
};
    fn mochi_main() {
    test_reverse_letters();
    println!("{}", reverse_letters(&"Hey wollef sroirraw", 3));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
