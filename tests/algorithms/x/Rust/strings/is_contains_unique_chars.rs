// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ord(ch: &str) -> i64 {
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut digits: String = String::from("0123456789").clone();
    let mut i: i64 = 0;
    while (i < (lower.len() as i64)) {
        if (lower.chars().nth(i as usize).unwrap().to_string() == ch) {
            return (97 + i)
        }
        i = (i + 1);
    }
    i = 0;
    while (i < (upper.len() as i64)) {
        if (upper.chars().nth(i as usize).unwrap().to_string() == ch) {
            return (65 + i)
        }
        i = (i + 1);
    }
    i = 0;
    while (i < (digits.len() as i64)) {
        if (digits.chars().nth(i as usize).unwrap().to_string() == ch) {
            return (48 + i)
        }
        i = (i + 1);
    }
    if (ch == " ") {
        return 32
    }
    if (ch == "_") {
        return 95
    }
    if (ch == ".") {
        return 46
    }
    if (ch == "'") {
        return 39
    }
    return 0
};
    fn lshift(mut num: i64, mut k: i64) -> i64 {
    let mut result: i64 = num;
    let mut i: i64 = 0;
    while (i < k) {
        result = (result * 2);
        i = (i + 1);
    }
    return result
};
    fn rshift(mut num: i64, mut k: i64) -> i64 {
    let mut result: i64 = num;
    let mut i: i64 = 0;
    while (i < k) {
        result = ((result - (result % 2)) / 2);
        i = (i + 1);
    }
    return result
};
    fn is_contains_unique_chars(input_str: &str) -> bool {
    let mut bitmap: i64 = 0;
    let mut i: i64 = 0;
    while (i < (input_str.len() as i64)) {
        let mut code: i64 = ord(&input_str.chars().nth(i as usize).unwrap().to_string());
        if ((rshift(bitmap, code) % 2) == 1) {
            return false
        }
        bitmap = (bitmap + lshift(1, code));
        i = (i + 1);
    }
    return true
};
    println!("{}", is_contains_unique_chars(&"I_love.py").to_string());
    println!("{}", is_contains_unique_chars(&"I don't love Python").to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
