// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn damerau_levenshtein_distance(mut first_string: String, mut second_string: String) -> i64 {
    let mut len1 = (first_string.len() as i64);
    let mut len2 = (second_string.len() as i64);
    let mut dp_matrix: Vec<Vec<i64>> = vec![];
    for _ in 0..(len1 + 1) {
        let mut row: Vec<i64> = vec![];
        for _2 in 0..(len2 + 1) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
        }
        dp_matrix = { let mut _v = dp_matrix.clone(); _v.push(row.clone()); _v };
    }
    for i in 0..(len1 + 1) {
        let mut row: Vec<i64> = dp_matrix[i as usize].clone();
        row[0 as usize] = i;
        dp_matrix[i as usize] = row.clone();
    }
    let mut first_row: Vec<i64> = dp_matrix[0 as usize].clone();
    for j in 0..(len2 + 1) {
        first_row[j as usize] = j;
    }
    dp_matrix[0 as usize] = first_row.clone();
    for i in 1..(len1 + 1) {
        let mut row: Vec<i64> = dp_matrix[i as usize].clone();
        let mut first_char: String = { let tmp = &first_string; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.clone();
        for j in 1..(len2 + 1) {
            let mut second_char: String = { let tmp = &second_string; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.clone();
            let mut cost: i64 = if (first_char.as_str() == second_char.as_str()) { 0 } else { 1 };
            let mut value: i64 = (dp_matrix[(i - 1) as usize].clone()[j as usize] + 1);
            let mut insertion: i64 = (row[(j - 1) as usize] + 1);
            if (insertion < value) {
                value = insertion;
            }
            let mut substitution: i64 = (dp_matrix[(i - 1) as usize].clone()[(j - 1) as usize] + cost);
            if (substitution < value) {
                value = substitution;
            }
            row[j as usize] = value;
            if ((((i > 1) && (j > 1)) && ({ let tmp = &first_string; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.as_str() == { let tmp = &second_string; tmp.chars().skip((j - 2) as usize).take(((j - 1) - (j - 2)) as usize).collect::<String>() }.as_str())) && ({ let tmp = &first_string; tmp.chars().skip((i - 2) as usize).take(((i - 1) - (i - 2)) as usize).collect::<String>() }.as_str() == { let tmp = &second_string; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.as_str())) {
                let mut transposition: i64 = (dp_matrix[(i - 2) as usize].clone()[(j - 2) as usize] + cost);
                if (transposition < row[j as usize]) {
                    row[j as usize] = transposition;
                }
            }
        }
        dp_matrix[i as usize] = row.clone();
    }
    return dp_matrix[len1 as usize].clone()[len2 as usize]
};
    println!("{}", damerau_levenshtein_distance(String::from("cat"), String::from("cut")).to_string());
    println!("{}", damerau_levenshtein_distance(String::from("kitten"), String::from("sitting")).to_string());
    println!("{}", damerau_levenshtein_distance(String::from("hello"), String::from("world")).to_string());
    println!("{}", damerau_levenshtein_distance(String::from("book"), String::from("back")).to_string());
    println!("{}", damerau_levenshtein_distance(String::from("container"), String::from("containment")).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
