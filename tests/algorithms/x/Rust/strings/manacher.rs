// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn palindromic_string(mut input_string: String) -> String {
    let mut max_length: i64 = 0;
    let mut new_input_string: String = String::from("");
    let mut output_string: String = String::from("");
    let mut n = (input_string.len() as i64);
    let mut i: i64 = 0;
    while (i < (n - 1)) {
        new_input_string = format!("{}{}", format!("{}{}", new_input_string, { let tmp = &input_string; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }), "|");
        i = (i + 1);
    }
    new_input_string = format!("{}{}", new_input_string, { let tmp = &input_string; tmp.chars().skip((n - 1) as usize).take((n - (n - 1)) as usize).collect::<String>() });
    let mut left: i64 = 0;
    let mut right: i64 = 0;
    let mut length: Vec<i64> = vec![];
    i = 0;
    let mut m = (new_input_string.len() as i64);
    while (i < m) {
        length = { let mut _v = length.clone(); _v.push(1); _v };
        i = (i + 1);
    }
    let mut start: i64 = 0;
    let mut j: i64 = 0;
    while (j < m) {
        let mut k: i64 = 1;
        if (j <= right) {
            let mut mirror: i64 = ((left + right) - j);
            k = (length[mirror as usize] / 2);
            let mut diff: i64 = ((right - j) + 1);
            if (diff < k) {
                k = diff;
            }
            if (k < 1) {
                k = 1;
            }
        }
        while ((((j - k) >= 0) && ((j + k) < m)) && ({ let tmp = &new_input_string; tmp.chars().skip((j + k) as usize).take((((j + k) + 1) - (j + k)) as usize).collect::<String>() }.as_str() == { let tmp = &new_input_string; tmp.chars().skip((j - k) as usize).take((((j - k) + 1) - (j - k)) as usize).collect::<String>() }.as_str())) {
            k = (k + 1);
        }
        length[j as usize] = ((2 * k) - 1);
        if (((j + k) - 1) > right) {
            left = ((j - k) + 1);
            right = ((j + k) - 1);
        }
        if (length[j as usize] > max_length) {
            max_length = length[j as usize];
            start = j;
        }
        j = (j + 1);
    }
    let mut s: String = { let tmp = &new_input_string; tmp.chars().skip((start - (max_length / 2)) as usize).take((((start + (max_length / 2)) + 1) - (start - (max_length / 2))) as usize).collect::<String>() }.clone();
    let mut idx: i64 = 0;
    while (idx < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.clone();
        if (ch.as_str() != "|") {
            output_string = format!("{}{}", output_string, ch);
        }
        idx = (idx + 1);
    }
    return output_string.clone()
};
    fn mochi_main() {
    println!("{}", palindromic_string(String::from("abbbaba")));
    println!("{}", palindromic_string(String::from("ababa")));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
