// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn min3(mut a: i64, mut b: i64, mut c: i64) -> i64 {
    let mut m: i64 = a;
    if (b < m) {
        m = b;
    }
    if (c < m) {
        m = c;
    }
    return m
};
    fn edit_distance(source: &str, target: &str) -> i64 {
    if ((source.len() as i64) == 0) {
        return (target.len() as i64)
    }
    if ((target.len() as i64) == 0) {
        return (source.len() as i64)
    }
    let mut last_source: String = { let tmp = &source; tmp.chars().skip(((source.len() as i64) - 1) as usize).take(((source.len() as i64) - ((source.len() as i64) - 1)) as usize).collect::<String>() }.clone();
    let mut last_target: String = { let tmp = &target; tmp.chars().skip(((target.len() as i64) - 1) as usize).take(((target.len() as i64) - ((target.len() as i64) - 1)) as usize).collect::<String>() }.clone();
    let mut delta: i64 = if (last_source.as_str() == last_target.as_str()) { 0 } else { 1 };
    let mut delete_cost: i64 = (edit_distance(&{ let tmp = &source; tmp.chars().skip(0 as usize).take((((source.len() as i64) - 1) - 0) as usize).collect::<String>() }, target) + 1);
    let mut insert_cost: i64 = (edit_distance(source, &{ let tmp = &target; tmp.chars().skip(0 as usize).take((((target.len() as i64) - 1) - 0) as usize).collect::<String>() }) + 1);
    let mut replace_cost: i64 = (edit_distance(&{ let tmp = &source; tmp.chars().skip(0 as usize).take((((source.len() as i64) - 1) - 0) as usize).collect::<String>() }, &{ let tmp = &target; tmp.chars().skip(0 as usize).take((((target.len() as i64) - 1) - 0) as usize).collect::<String>() }) + delta);
    return min3(delete_cost, insert_cost, replace_cost)
};
    fn mochi_main() {
    let mut result: i64 = edit_distance(&"ATCGCTG", &"TAGCTAA");
    println!("{}", result.to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
