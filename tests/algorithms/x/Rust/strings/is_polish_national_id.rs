// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn parse_int(s: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
    fn is_polish_national_id(mut id: String) -> bool {
    if ((id.len() as i64) == 0) {
        return false
    }
    if ({ let tmp = &id; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.as_str() == "-") {
        return false
    }
    let mut input_int: i64 = parse_int(&id);
    if ((input_int < 10100000) || (input_int > 99923199999)) {
        return false
    }
    let mut month: i64 = parse_int(&{ let tmp = &id; tmp.chars().skip(2 as usize).take((4 - 2) as usize).collect::<String>() });
    if !((((((month >= 1) && (month <= 12)) || ((month >= 21) && (month <= 32))) || ((month >= 41) && (month <= 52))) || ((month >= 61) && (month <= 72))) || ((month >= 81) && (month <= 92))) {
        return false
    }
    let mut day: i64 = parse_int(&{ let tmp = &id; tmp.chars().skip(4 as usize).take((6 - 4) as usize).collect::<String>() });
    if ((day < 1) || (day > 31)) {
        return false
    }
    let mut multipliers: Vec<i64> = vec![1, 3, 7, 9, 1, 3, 7, 9, 1, 3];
    let mut subtotal: i64 = 0;
    let mut i: i64 = 0;
    while (i < (multipliers.len() as i64)) {
        let mut digit: i64 = parse_int(&{ let tmp = &id; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() });
        subtotal = (subtotal + ((digit * multipliers[i as usize]) % 10));
        i = (i + 1);
    }
    let mut checksum: i64 = (10 - (subtotal % 10));
    return (checksum == (input_int % 10))
};
    println!("{}", is_polish_national_id(String::from("02070803628")).to_string());
    println!("{}", is_polish_national_id(String::from("02150803629")).to_string());
    println!("{}", is_polish_national_id(String::from("02075503622")).to_string());
    println!("{}", is_polish_national_id(String::from("-99012212349")).to_string());
    println!("{}", is_polish_national_id(String::from("990122123499999")).to_string());
    println!("{}", is_polish_national_id(String::from("02070803621")).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
