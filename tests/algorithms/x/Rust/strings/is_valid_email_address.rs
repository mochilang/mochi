// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_MAX_LOCAL_PART_OCTETS: i64 = 0;
static mut g_MAX_DOMAIN_OCTETS: i64 = 0;
static mut g_ASCII_LETTERS: String = String::new();
static mut g_DIGITS: String = String::new();
static mut g_LOCAL_EXTRA: String = String::new();
static mut g_DOMAIN_EXTRA: String = String::new();
static mut g_email_tests: Vec<String> = Vec::new();
static mut g_idx: i64 = 0;
fn main() {
    unsafe {
        g_MAX_LOCAL_PART_OCTETS = 64;
        g_MAX_DOMAIN_OCTETS = 255;
        g_ASCII_LETTERS = String::from("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_DIGITS = String::from("0123456789").clone();
        g_LOCAL_EXTRA = String::from(".(!#$%&'*+-/=?^_`{|}~)").clone();
        g_DOMAIN_EXTRA = String::from(".-").clone();
        g_email_tests = vec![String::from("simple@example.com").clone(), String::from("very.common@example.com").clone(), String::from("disposable.style.email.with+symbol@example.com").clone(), String::from("other-email-with-hyphen@and.subdomains.example.com").clone(), String::from("fully-qualified-domain@example.com").clone(), String::from("user.name+tag+sorting@example.com").clone(), String::from("x@example.com").clone(), String::from("example-indeed@strange-example.com").clone(), String::from("test/test@test.com").clone(), String::from("123456789012345678901234567890123456789012345678901234567890123@example.com").clone(), String::from("admin@mailserver1").clone(), String::from("example@s.example").clone(), String::from("Abc.example.com").clone(), String::from("A@b@c@example.com").clone(), String::from("abc@example..com").clone(), String::from("a(c)d,e:f;g<h>i[j\\k]l@example.com").clone(), String::from("12345678901234567890123456789012345678901234567890123456789012345@example.com").clone(), String::from("i.like.underscores@but_its_not_allowed_in_this_part").clone(), String::from("").clone()];
        g_idx = 0;
                let _start: i64 = _now();
        unsafe fn count_char(mut s: String, target: &str) -> i64 {
    let mut cnt: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == target) {
            cnt = (cnt + 1);
        }
        i = (i + 1);
    }
    return cnt
};
        unsafe fn char_in(c: &str, mut allowed: String) -> bool {
    let mut i: i64 = 0;
    while (i < (allowed.len() as i64)) {
        if ({ let tmp = &allowed; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == c) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn starts_with_char(mut s: String, c: &str) -> bool {
    return (((s.len() as i64) > 0) && ({ let tmp = &s; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() } == c))
};
        unsafe fn ends_with_char(mut s: String, c: &str) -> bool {
    return (((s.len() as i64) > 0) && ({ let tmp = &s; tmp.chars().skip(((s.len() as i64) - 1) as usize).take(((s.len() as i64) - ((s.len() as i64) - 1)) as usize).collect::<String>() } == c))
};
        unsafe fn contains_double_dot(mut s: String) -> bool {
    if ((s.len() as i64) < 2) {
        return false
    }
    let mut i: i64 = 0;
    while (i < ((s.len() as i64) - 1)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 2) - i) as usize).collect::<String>() }.as_str() == "..") {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn is_valid_email_address(mut email: String) -> bool {
    if (count_char(email.clone(), &"@") != 1) {
        return false
    }
    let mut at_idx: i64 = 0;
    let mut i: i64 = 0;
    while (i < (email.len() as i64)) {
        if ({ let tmp = &email; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == "@") {
            at_idx = i;
            break
        }
        i = (i + 1);
    }
    let mut local_part: String = { let tmp = &email; tmp.chars().skip(0 as usize).take((at_idx - 0) as usize).collect::<String>() }.clone();
    let mut domain: String = { let tmp = &email; tmp.chars().skip((at_idx + 1) as usize).take(((email.len() as i64) - (at_idx + 1)) as usize).collect::<String>() }.clone();
    if (((local_part.len() as i64) > g_MAX_LOCAL_PART_OCTETS) || ((domain.len() as i64) > g_MAX_DOMAIN_OCTETS)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (local_part.len() as i64)) {
        let mut ch: String = { let tmp = &local_part; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if !char_in(&ch, format!("{}{}", format!("{}{}", g_ASCII_LETTERS, g_DIGITS), g_LOCAL_EXTRA)) {
            return false
        }
        i = (i + 1);
    }
    if ((starts_with_char(local_part.clone(), &".") || ends_with_char(local_part.clone(), &".")) || contains_double_dot(local_part.clone())) {
        return false
    }
    i = 0;
    while (i < (domain.len() as i64)) {
        let mut ch: String = { let tmp = &domain; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if !char_in(&ch, format!("{}{}", format!("{}{}", g_ASCII_LETTERS, g_DIGITS), g_DOMAIN_EXTRA)) {
            return false
        }
        i = (i + 1);
    }
    if (starts_with_char(domain.clone(), &"-") || ends_with_char(domain.clone(), &".")) {
        return false
    }
    if ((starts_with_char(domain.clone(), &".") || ends_with_char(domain.clone(), &".")) || contains_double_dot(domain.clone())) {
        return false
    }
    return true
};
        while (g_idx < (g_email_tests.len() as i64)) {
            let mut email: String = g_email_tests[g_idx as usize].clone().clone();
            println!("{}", is_valid_email_address(email.clone()).to_string());
            g_idx = (g_idx + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
