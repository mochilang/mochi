// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_text: String = String::new();
static mut g_pattern: String = String::new();
fn main() {
    unsafe {
        g_text = String::from("abcxabcdabxabcdabcdabcy").clone();
        g_pattern = String::from("abcdabcy").clone();
                let _start: i64 = _now();
        unsafe fn get_failure_array(mut pattern: String) -> Vec<i64> {
    let mut failure: Vec<i64> = vec![0];
    let mut i: i64 = 0;
    let mut j: i64 = 1;
    while (j < (pattern.len() as i64)) {
        if ({ let tmp = &pattern; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == { let tmp = &pattern; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str()) {
            i = (i + 1);
        } else if (i > 0) {
            i = failure[(i - 1) as usize];
            continue
        }
        j = (j + 1);
        failure = { let mut _v = failure.clone(); _v.push(i); _v };
    }
    return failure
};
        unsafe fn knuth_morris_pratt(mut text: String, mut pattern: String) -> i64 {
    let mut failure: Vec<i64> = get_failure_array(pattern.clone());
    let mut i: i64 = 0;
    let mut j: i64 = 0;
    while (i < (text.len() as i64)) {
        if ({ let tmp = &pattern; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str() == { let tmp = &text; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str()) {
            if (j == ((pattern.len() as i64) - 1)) {
                return (i - j)
            }
            j = (j + 1);
        } else if (j > 0) {
            j = failure[(j - 1) as usize];
            continue
        }
        i = (i + 1);
    }
    return -1
};
        println!("{}", knuth_morris_pratt(g_text.clone(), g_pattern.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
