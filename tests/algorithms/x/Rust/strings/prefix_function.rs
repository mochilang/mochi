// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn prefix_function(s: &str) -> Vec<i64> {
    let mut pi: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        pi = { let mut _v = pi.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    i = 1;
    while (i < (s.len() as i64)) {
        let mut j: i64 = pi[(i - 1) as usize];
        while ((j > 0) && (s.chars().nth(i as usize).unwrap().to_string().as_str() != s.chars().nth(j as usize).unwrap().to_string().as_str())) {
            j = pi[(j - 1) as usize];
        }
        if (s.chars().nth(i as usize).unwrap().to_string().as_str() == s.chars().nth(j as usize).unwrap().to_string().as_str()) {
            j = (j + 1);
        }
        pi[i as usize] = j;
        i = (i + 1);
    }
    return pi
};
    fn longest_prefix(s: &str) -> i64 {
    let mut pi: Vec<i64> = prefix_function(s);
    let mut max_val: i64 = 0;
    let mut i: i64 = 0;
    while (i < (pi.len() as i64)) {
        if (pi[i as usize] > max_val) {
            max_val = pi[i as usize];
        }
        i = (i + 1);
    }
    return max_val
};
    fn list_eq_int(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn test_prefix_function() {
    let mut s1: String = String::from("aabcdaabc").clone();
    let mut expected1: Vec<i64> = vec![0, 1, 0, 0, 0, 1, 2, 3, 4];
    let mut r1: Vec<i64> = prefix_function(&s1);
    if !list_eq_int(r1.clone(), expected1.clone()) {
        panic!("prefix_function aabcdaabc failed");
    }
    let mut s2: String = String::from("asdasdad").clone();
    let mut expected2: Vec<i64> = vec![0, 0, 0, 1, 2, 3, 4, 0];
    let mut r2: Vec<i64> = prefix_function(&s2);
    if !list_eq_int(r2.clone(), expected2.clone()) {
        panic!("prefix_function asdasdad failed");
    }
};
    fn test_longest_prefix() {
    if (longest_prefix(&"aabcdaabc") != 4) {
        panic!("longest_prefix example1 failed");
    }
    if (longest_prefix(&"asdasdad") != 4) {
        panic!("longest_prefix example2 failed");
    }
    if (longest_prefix(&"abcab") != 2) {
        panic!("longest_prefix example3 failed");
    }
};
    fn mochi_main() {
    test_prefix_function();
    test_longest_prefix();
    let mut r1: Vec<i64> = prefix_function(&"aabcdaabc");
    let mut r2: Vec<i64> = prefix_function(&"asdasdad");
    println!("{}", format!("{:?}", r1));
    println!("{}", format!("{:?}", r2));
    println!("{}", longest_prefix(&"aabcdaabc").to_string());
    println!("{}", longest_prefix(&"abcab").to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
