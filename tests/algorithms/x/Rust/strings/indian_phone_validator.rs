// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn all_digits(s: &str) -> bool {
    if ((s.len() as i64) == 0) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() < "0") || (c.as_str() > "9")) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn indian_phone_validator(phone: &str) -> bool {
    let mut s: String = phone.to_string().clone();
    if (((s.len() as i64) >= 3) && ({ let tmp = &s; tmp.chars().skip(0 as usize).take((3 - 0) as usize).collect::<String>() }.as_str() == "+91")) {
        s = { let tmp = &s; tmp.chars().skip(3 as usize).take(((s.len() as i64) - 3) as usize).collect::<String>() };
        if ((s.len() as i64) > 0) {
            let mut c: String = s.chars().nth(0 as usize).unwrap().to_string().clone();
            if ((c.as_str() == "-") || (c.as_str() == " ")) {
                s = { let tmp = &s; tmp.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>() };
            }
        }
    }
    if (((s.len() as i64) > 0) && (s.chars().nth(0 as usize).unwrap().to_string().as_str() == "0")) {
        s = { let tmp = &s; tmp.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>() };
    }
    if (((s.len() as i64) >= 2) && ({ let tmp = &s; tmp.chars().skip(0 as usize).take((2 - 0) as usize).collect::<String>() }.as_str() == "91")) {
        s = { let tmp = &s; tmp.chars().skip(2 as usize).take(((s.len() as i64) - 2) as usize).collect::<String>() };
    }
    if ((s.len() as i64) != 10) {
        return false
    }
    let mut first: String = s.chars().nth(0 as usize).unwrap().to_string().clone();
    if !(((first.as_str() == "7") || (first.as_str() == "8")) || (first.as_str() == "9")) {
        return false
    }
    if !all_digits(&s) {
        return false
    }
    return true
};
    println!("{}", indian_phone_validator(&"+91123456789").to_string());
    println!("{}", indian_phone_validator(&"+919876543210").to_string());
    println!("{}", indian_phone_validator(&"01234567896").to_string());
    println!("{}", indian_phone_validator(&"919876543218").to_string());
    println!("{}", indian_phone_validator(&"+91-1234567899").to_string());
    println!("{}", indian_phone_validator(&"+91-9876543218").to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
