// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_matrix_bool(mut rows: i64, mut cols: i64, mut init: bool) -> Vec<Vec<bool>> {
    let mut matrix: Vec<Vec<bool>> = vec![];
    for _ in 0..rows {
        let mut row: Vec<bool> = vec![];
        for _2 in 0..cols {
            row = { let mut _v = row.clone(); _v.push(init); _v };
        }
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
    }
    return matrix
};
    fn match_pattern(input_string: &str, mut pattern: String) -> bool {
    let mut len_string = ((input_string.len() as i64) + 1);
    let mut len_pattern = ((pattern.len() as i64) + 1);
    let mut dp: Vec<Vec<bool>> = make_matrix_bool(len_string, len_pattern, false);
    let mut row0: Vec<bool> = dp[0 as usize].clone();
    row0[0 as usize] = true;
    dp[0 as usize] = row0.clone();
    let mut j: i64 = 1;
    while (j < len_pattern) {
        row0 = dp[0 as usize].clone();
        if ({ let tmp = &pattern; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.as_str() == "*") {
            row0[j as usize] = row0[(j - 2) as usize];
        } else {
            row0[j as usize] = false;
        }
        dp[0 as usize] = row0.clone();
        j = (j + 1);
    }
    let mut i: i64 = 1;
    while (i < len_string) {
        let mut row: Vec<bool> = dp[i as usize].clone();
        let mut j2: i64 = 1;
        while (j2 < len_pattern) {
            let mut s_char: String = { let tmp = &input_string; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.clone();
            let mut p_char: String = { let tmp = &pattern; tmp.chars().skip((j2 - 1) as usize).take((j2 - (j2 - 1)) as usize).collect::<String>() }.clone();
            if ((s_char.as_str() == p_char.as_str()) || (p_char.as_str() == ".")) {
                row[j2 as usize] = dp[(i - 1) as usize].clone()[(j2 - 1) as usize];
            } else if (p_char.as_str() == "*") {
                let mut val: bool = dp[i as usize].clone()[(j2 - 2) as usize];
                let mut prev_p: String = { let tmp = &pattern; tmp.chars().skip((j2 - 2) as usize).take(((j2 - 1) - (j2 - 2)) as usize).collect::<String>() }.clone();
                if (!val && ((prev_p.as_str() == s_char.as_str()) || (prev_p.as_str() == "."))) {
                    val = dp[(i - 1) as usize].clone()[j2 as usize];
                }
                row[j2 as usize] = val;
            } else {
                row[j2 as usize] = false;
            }
            j2 = (j2 + 1);
        }
        dp[i as usize] = row.clone();
        i = (i + 1);
    }
    return dp[(len_string - 1) as usize].clone()[(len_pattern - 1) as usize]
};
    fn mochi_main() {
    if !match_pattern(&"aab", String::from("c*a*b")) {
        panic!("case1 failed");
    }
    if match_pattern(&"dabc", String::from("*abc")) {
        panic!("case2 failed");
    }
    if match_pattern(&"aaa", String::from("aa")) {
        panic!("case3 failed");
    }
    if !match_pattern(&"aaa", String::from("a.a")) {
        panic!("case4 failed");
    }
    if match_pattern(&"aaab", String::from("aa*")) {
        panic!("case5 failed");
    }
    if !match_pattern(&"aaab", String::from(".*")) {
        panic!("case6 failed");
    }
    if match_pattern(&"a", String::from("bbbb")) {
        panic!("case7 failed");
    }
    if match_pattern(&"", String::from("bbbb")) {
        panic!("case8 failed");
    }
    if match_pattern(&"a", String::from("")) {
        panic!("case9 failed");
    }
    if !match_pattern(&"", String::from("")) {
        panic!("case10 failed");
    }
    println!("{}", match_pattern(&"aab", String::from("c*a*b")).to_string());
    println!("{}", match_pattern(&"dabc", String::from("*abc")).to_string());
    println!("{}", match_pattern(&"aaa", String::from("aa")).to_string());
    println!("{}", match_pattern(&"aaa", String::from("a.a")).to_string());
    println!("{}", match_pattern(&"aaab", String::from("aa*")).to_string());
    println!("{}", match_pattern(&"aaab", String::from(".*")).to_string());
    println!("{}", match_pattern(&"a", String::from("bbbb")).to_string());
    println!("{}", match_pattern(&"", String::from("bbbb")).to_string());
    println!("{}", match_pattern(&"a", String::from("")).to_string());
    println!("{}", match_pattern(&"", String::from("")).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
