// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    } else {
        return b
    }
};
    fn max_int(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    } else {
        return b
    }
};
    fn repeat_bool(mut n: i64, mut value: bool) -> Vec<bool> {
    let mut res: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return res
};
    fn set_bool(mut xs: Vec<bool>, mut idx: i64, mut value: bool) -> Vec<bool> {
    let mut res: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i == idx) {
            res = { let mut _v = res.clone(); _v.push(value); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn jaro_winkler(mut s1: String, mut s2: String) -> f64 {
    let mut len1 = (s1.len() as i64);
    let mut len2 = (s2.len() as i64);
    let mut limit: i64 = (min_int(len1, len2) / 2);
    let mut match1: Vec<bool> = repeat_bool(len1, false);
    let mut match2: Vec<bool> = repeat_bool(len2, false);
    let mut matches: i64 = 0;
    let mut i: i64 = 0;
    while (i < len1) {
        let mut start: i64 = max_int(0, (i - limit));
        let mut end: i64 = min_int(((i + limit) + 1), len2);
        let mut j: i64 = start;
        while (j < end) {
            if (!match2[j as usize] && ({ let tmp = &s1; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == { let tmp = &s2; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str())) {
                match1 = set_bool(match1.clone(), i, true);
                match2 = set_bool(match2.clone(), j, true);
                matches = (matches + 1);
                break
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    if (matches == 0) {
        return 0.0
    }
    let mut transpositions: i64 = 0;
    let mut k: i64 = 0;
    i = 0;
    while (i < len1) {
        if match1[i as usize] {
            while !match2[k as usize] {
                k = (k + 1);
            }
            if ({ let tmp = &s1; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() != { let tmp = &s2; tmp.chars().skip(k as usize).take(((k + 1) - k) as usize).collect::<String>() }.as_str()) {
                transpositions = (transpositions + 1);
            }
            k = (k + 1);
        }
        i = (i + 1);
    }
    let mut m: f64 = (matches as f64);
    let mut jaro: f64 = ((((m / (len1 as f64)) + (m / (len2 as f64))) + ((m - ((transpositions as f64) / 2.0)) / m)) / 3.0);
    let mut prefix_len: i64 = 0;
    i = 0;
    while (((i < 4) && (i < len1)) && (i < len2)) {
        if ({ let tmp = &s1; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == { let tmp = &s2; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str()) {
            prefix_len = (prefix_len + 1);
        } else {
            break
        }
        i = (i + 1);
    }
    return (jaro + ((0.1 * (prefix_len as f64)) * (1.0 - jaro)))
};
    println!("{}", jaro_winkler(String::from("hello"), String::from("world")).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
