// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn contains(chars: &str, ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (chars.len() as i64)) {
        if (chars.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn substring(s: &str, mut start: i64, mut end: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = start;
    while (i < end) {
        res = format!("{}{}", res, s.chars().nth(i as usize).unwrap().to_string());
        i = (i + 1);
    }
    return res.clone()
};
    fn strip_chars(mut user_string: String, mut characters: String) -> String {
    let mut start: i64 = 0;
    let mut end = (user_string.len() as i64);
    while ((start < end) && contains(&characters, &user_string.chars().nth(start as usize).unwrap().to_string())) {
        start = (start + 1);
    }
    while ((end > start) && contains(&characters, &user_string.chars().nth((end - 1) as usize).unwrap().to_string())) {
        end = (end - 1);
    }
    return { let tmp = &user_string; tmp.chars().skip(start as usize).take((end - start) as usize).collect::<String>() }.clone()
};
    fn strip(mut user_string: String) -> String {
    return strip_chars(user_string.clone(), String::from(" \t\n\r")).clone()
};
    fn test_strip() {
    if (strip(String::from("   hello   ")).as_str() != "hello") {
        panic!("test1 failed");
    }
    if (strip_chars(String::from("...world..."), String::from(".")).as_str() != "world") {
        panic!("test2 failed");
    }
    if (strip_chars(String::from("123hello123"), String::from("123")).as_str() != "hello") {
        panic!("test3 failed");
    }
    if (strip(String::from("")).as_str() != "") {
        panic!("test4 failed");
    }
};
    fn mochi_main() {
    test_strip();
    println!("{}", strip(String::from("   hello   ")));
    println!("{}", strip_chars(String::from("...world..."), String::from(".")));
    println!("{}", strip_chars(String::from("123hello123"), String::from("123")));
    println!("{}", strip(String::from("")));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
