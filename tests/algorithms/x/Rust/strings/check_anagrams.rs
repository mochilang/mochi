// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn strip_and_remove_spaces(s: &str) -> String {
    let mut start: i64 = 0;
    let mut end = ((s.len() as i64) - 1);
    while ((start < (s.len() as i64)) && (s.chars().nth(start as usize).unwrap().to_string().as_str() == " ")) {
        start = (start + 1);
    }
    while ((end >= start) && (s.chars().nth(end as usize).unwrap().to_string().as_str() == " ")) {
        end = (end - 1);
    }
    let mut res: String = String::from("").clone();
    let mut i: i64 = start;
    while (i <= end) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() != " ") {
            res = format!("{}{}", res, ch);
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn check_anagrams(a: &str, b: &str) -> bool {
    let mut s1: String = (a.to_lowercase()).clone();
    let mut s2: String = (b.to_lowercase()).clone();
    s1 = strip_and_remove_spaces(&s1);
    s2 = strip_and_remove_spaces(&s2);
    if ((s1.len() as i64) != (s2.len() as i64)) {
        return false
    }
    let mut count: HashMap<String, i64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (s1.len() as i64)) {
        let mut c1: String = s1.chars().nth(i as usize).unwrap().to_string().clone();
        let mut c2: String = s2.chars().nth(i as usize).unwrap().to_string().clone();
        if count.contains_key(&c1) {
            count.insert(c1.clone(), (count.get(c1.as_str()).cloned().unwrap_or_default() + 1));
        } else {
            count.insert(c1.clone(), 1);
        }
        if count.contains_key(&c2) {
            count.insert(c2.clone(), (count.get(c2.as_str()).cloned().unwrap_or_default() - 1));
        } else {
            count.insert(c2.clone(), -1);
        }
        i = (i + 1);
    }
    for ch in count.keys().cloned() {
        if (count.get(ch.as_str()).cloned().unwrap_or_default() != 0) {
            return false
        }
    }
    return true
};
    fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
    print_bool(check_anagrams(&"Silent", &"Listen"));
    print_bool(check_anagrams(&"This is a string", &"Is this a string"));
    print_bool(check_anagrams(&"This is    a      string", &"Is     this a string"));
    print_bool(check_anagrams(&"There", &"Their"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
