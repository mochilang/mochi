// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn match_in_pattern(pat: &str, ch: &str) -> i64 {
    let mut i = ((pat.len() as i64) - 1);
    while (i >= 0) {
        if ({ let tmp = &pat; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i - 1);
    }
    return -1
};
    fn mismatch_in_text(text: &str, pat: &str, mut current_pos: i64) -> i64 {
    let mut i = ((pat.len() as i64) - 1);
    while (i >= 0) {
        if ({ let tmp = &pat; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() != { let tmp = &text; tmp.chars().skip((current_pos + i) as usize).take((((current_pos + i) + 1) - (current_pos + i)) as usize).collect::<String>() }.as_str()) {
            return (current_pos + i)
        }
        i = (i - 1);
    }
    return -1
};
    fn bad_character_heuristic(text: &str, pat: &str) -> Vec<i64> {
    let mut textLen = (text.len() as i64);
    let mut patLen = (pat.len() as i64);
    let mut positions: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= (textLen - patLen)) {
        let mut mismatch_index: i64 = mismatch_in_text(text, pat, i);
        if (mismatch_index < 0) {
            positions = { let mut _v = positions.clone(); _v.push(i); _v };
            i = (i + 1);
        } else {
            let mut ch: String = { let tmp = &text; tmp.chars().skip(mismatch_index as usize).take(((mismatch_index + 1) - mismatch_index) as usize).collect::<String>() }.clone();
            let mut match_index: i64 = match_in_pattern(pat, &ch);
            if (match_index < 0) {
                i = (mismatch_index + 1);
            } else {
                i = (mismatch_index - match_index);
            }
        }
    }
    return positions
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
