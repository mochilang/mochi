// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_text: String = String::new();
static mut g_keywords: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_text = String::from("whatever, err ... , wherever").clone();
        g_keywords = vec![String::from("what").clone().clone(), String::from("hat").clone().clone(), String::from("ver").clone().clone(), String::from("er").clone().clone()];
                let _start: i64 = _now();
        unsafe fn search_all(text: &str, mut keywords: Vec<String>) -> HashMap<String, Vec<i64>> {
    let mut result: HashMap<String, Vec<i64>> = HashMap::new();
    for word in keywords.iter().cloned() {
        let mut positions: Vec<i64> = vec![];
        let mut m = (word.len() as i64);
        let mut i: i64 = 0;
        while (i <= ((text.len() as i64) - m)) {
            if ({ let tmp = &text; tmp.chars().skip(i as usize).take(((i + m) - i) as usize).collect::<String>() }.as_str() == word.as_str()) {
                positions = { let mut _v = positions.clone(); _v.push(i); _v };
            }
            i = (i + 1);
        }
        if ((positions.len() as i64) > 0) {
            result.insert(word.clone(), positions);
        }
    }
    return result
};
        println!("{:?}", format!("{:?}", search_all(&g_text, g_keywords.clone())));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
