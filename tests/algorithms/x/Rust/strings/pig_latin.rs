// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_VOWELS: String = String::new();
fn main() {
    unsafe {
        g_VOWELS = String::from("aeiou").clone();
                let _start: i64 = _now();
        unsafe fn strip(mut s: String) -> String {
    let mut start: i64 = 0;
    let mut end = (s.len() as i64);
    while ((start < end) && ({ let tmp = &s; tmp.chars().skip(start as usize).take(((start + 1) - start) as usize).collect::<String>() }.as_str() == " ")) {
        start = (start + 1);
    }
    while ((end > start) && ({ let tmp = &s; tmp.chars().skip((end - 1) as usize).take((end - (end - 1)) as usize).collect::<String>() }.as_str() == " ")) {
        end = (end - 1);
    }
    return { let tmp = &s; tmp.chars().skip(start as usize).take((end - start) as usize).collect::<String>() }.clone()
};
        unsafe fn is_vowel(c: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_VOWELS.len() as i64)) {
        if (c == { let tmp = &g_VOWELS; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn pig_latin(word: &str) -> String {
    let mut trimmed: String = strip(word.to_string()).clone();
    if ((trimmed.len() as i64) == 0) {
        return String::from("")
    }
    let mut w: String = (trimmed.to_lowercase()).clone();
    let mut first: String = { let tmp = &w; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
    if is_vowel(&first) {
        return format!("{}{}", w, "way")
    }
    let mut i: i64 = 0;
    while (i < (w.len() as i64)) {
        let mut ch: String = { let tmp = &w; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if is_vowel(&ch) {
            break
        }
        i = (i + 1);
    }
    return format!("{}{}", format!("{}{}", { let tmp = &w; tmp.chars().skip(i as usize).take(((w.len() as i64) - i) as usize).collect::<String>() }, { let tmp = &w; tmp.chars().skip(0 as usize).take((i - 0) as usize).collect::<String>() }), "ay").clone()
};
        println!("{}", format!("{}{}", "pig_latin('friends') = ", pig_latin(&"friends")));
        println!("{}", format!("{}{}", "pig_latin('smile') = ", pig_latin(&"smile")));
        println!("{}", format!("{}{}", "pig_latin('eat') = ", pig_latin(&"eat")));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
