// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct TransformTables {
    costs: Vec<Vec<i64>>,
    ops: Vec<Vec<String>>,
}
impl std::fmt::Display for TransformTables {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"costs\": {:?}", self.costs)?;
        write!(f, ", ")?;
        write!(f, "\"ops\": {:?}", self.ops)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn string_to_chars(mut s: String) -> Vec<String> {
    let mut chars: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        chars = { let mut _v = chars.clone(); _v.push({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }); _v };
        i = (i + 1);
    }
    return chars
};
    fn join_chars(mut chars: Vec<String>) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (chars.len() as i64)) {
        res = format!("{}{}", res, chars[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
    fn insert_at(mut chars: Vec<String>, mut index: i64, mut ch: String) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < index) {
        res = { let mut _v = res.clone(); _v.push(chars[i as usize].clone()); _v };
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(ch.clone()); _v };
    while (i < (chars.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(chars[i as usize].clone()); _v };
        i = (i + 1);
    }
    return res
};
    fn remove_at(mut chars: Vec<String>, mut index: i64) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (chars.len() as i64)) {
        if (i != index) {
            res = { let mut _v = res.clone(); _v.push(chars[i as usize].clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn make_matrix_int(mut rows: i64, mut cols: i64, mut init: i64) -> Vec<Vec<i64>> {
    let mut matrix: Vec<Vec<i64>> = vec![];
    for _ in 0..rows {
        let mut row: Vec<i64> = vec![];
        for _2 in 0..cols {
            row = { let mut _v = row.clone(); _v.push(init); _v };
        }
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
    }
    return matrix
};
    fn make_matrix_string(mut rows: i64, mut cols: i64, mut init: String) -> Vec<Vec<String>> {
    let mut matrix: Vec<Vec<String>> = vec![];
    for _ in 0..rows {
        let mut row: Vec<String> = vec![];
        for _2 in 0..cols {
            row = { let mut _v = row.clone(); _v.push(init.clone()); _v };
        }
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
    }
    return matrix
};
    fn compute_transform_tables(source_string: &str, destination_string: &str, mut copy_cost: i64, mut replace_cost: i64, mut delete_cost: i64, mut insert_cost: i64) -> TransformTables {
    let mut source_seq: Vec<String> = string_to_chars(source_string.to_string());
    let mut dest_seq: Vec<String> = string_to_chars(destination_string.to_string());
    let mut m = (source_seq.len() as i64);
    let mut n = (dest_seq.len() as i64);
    let mut costs: Vec<Vec<i64>> = make_matrix_int((m + 1), (n + 1), 0);
    let mut ops: Vec<Vec<String>> = make_matrix_string((m + 1), (n + 1), String::from("0"));
    let mut i: i64 = 1;
    while (i <= m) {
        costs[i as usize][0 as usize] = (i * delete_cost);
        ops[i as usize][0 as usize] = format!("{}{}", "D", source_seq[(i - 1) as usize].clone());
        i = (i + 1);
    }
    let mut j: i64 = 1;
    while (j <= n) {
        costs[0 as usize][j as usize] = (j * insert_cost);
        ops[0 as usize][j as usize] = format!("{}{}", "I", dest_seq[(j - 1) as usize].clone());
        j = (j + 1);
    }
    i = 1;
    while (i <= m) {
        j = 1;
        while (j <= n) {
            if (source_seq[(i - 1) as usize].clone().as_str() == dest_seq[(j - 1) as usize].clone().as_str()) {
                costs[i as usize][j as usize] = (costs[(i - 1) as usize].clone()[(j - 1) as usize] + copy_cost);
                ops[i as usize][j as usize] = format!("{}{}", "C", source_seq[(i - 1) as usize].clone());
            } else {
                costs[i as usize][j as usize] = (costs[(i - 1) as usize].clone()[(j - 1) as usize] + replace_cost);
                ops[i as usize][j as usize] = format!("{}{}", format!("{}{}", "R", source_seq[(i - 1) as usize].clone()), dest_seq[(j - 1) as usize].clone());
            }
            if ((costs[(i - 1) as usize].clone()[j as usize] + delete_cost) < costs[i as usize].clone()[j as usize]) {
                costs[i as usize][j as usize] = (costs[(i - 1) as usize].clone()[j as usize] + delete_cost);
                ops[i as usize][j as usize] = format!("{}{}", "D", source_seq[(i - 1) as usize].clone());
            }
            if ((costs[i as usize].clone()[(j - 1) as usize] + insert_cost) < costs[i as usize].clone()[j as usize]) {
                costs[i as usize][j as usize] = (costs[i as usize].clone()[(j - 1) as usize] + insert_cost);
                ops[i as usize][j as usize] = format!("{}{}", "I", dest_seq[(j - 1) as usize].clone());
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return TransformTables {costs: costs, ops: ops}
};
    fn assemble_transformation(mut ops: Vec<Vec<String>>, mut i: i64, mut j: i64) -> Vec<String> {
    if ((i == 0) && (j == 0)) {
        return vec![]
    }
    let mut op: String = ops[i as usize].clone()[j as usize].clone().clone();
    let mut kind: String = { let tmp = &op; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
    if ((kind.as_str() == "C") || (kind.as_str() == "R")) {
        let mut seq: Vec<String> = assemble_transformation(ops.clone(), (i - 1), (j - 1));
        seq = { let mut _v = seq.clone(); _v.push(op.clone()); _v };
        return seq
    } else if (kind.as_str() == "D") {
        let mut seq: Vec<String> = assemble_transformation(ops.clone(), (i - 1), j);
        seq = { let mut _v = seq.clone(); _v.push(op.clone()); _v };
        return seq
    } else {
        let mut seq: Vec<String> = assemble_transformation(ops.clone(), i, (j - 1));
        seq = { let mut _v = seq.clone(); _v.push(op.clone()); _v };
        return seq
    }
};
    fn mochi_main() {
    let mut copy_cost: i64 = -1;
    let mut replace_cost: i64 = 1;
    let mut delete_cost: i64 = 2;
    let mut insert_cost: i64 = 2;
    let mut src: String = String::from("Python").clone();
    let mut dst: String = String::from("Algorithms").clone();
    let mut tables: TransformTables = compute_transform_tables(&src, &dst, copy_cost, replace_cost, delete_cost, insert_cost);
    let mut operations: Vec<Vec<String>> = tables.ops.clone();
    let mut m = (operations.len() as i64);
    let mut n = (operations[0 as usize].clone().len() as i64);
    let mut sequence: Vec<String> = assemble_transformation(operations.clone(), (m - 1), (n - 1));
    let mut string_list: Vec<String> = string_to_chars(src.clone());
    let mut idx: i64 = 0;
    let mut cost: i64 = 0;
    let mut k: i64 = 0;
    while (k < (sequence.len() as i64)) {
        println!("{}", join_chars(string_list.clone()));
        let mut op: String = sequence[k as usize].clone().clone();
        let mut kind: String = { let tmp = &op; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
        if (kind.as_str() == "C") {
            cost = (cost + copy_cost);
        } else if (kind.as_str() == "R") {
            string_list[idx as usize] = { let tmp = &op; tmp.chars().skip(2 as usize).take((3 - 2) as usize).collect::<String>() };
            cost = (cost + replace_cost);
        } else if (kind.as_str() == "D") {
            string_list = remove_at(string_list.clone(), idx);
            cost = (cost + delete_cost);
        } else {
            string_list = insert_at(string_list.clone(), idx, { let tmp = &op; tmp.chars().skip(1 as usize).take((2 - 1) as usize).collect::<String>() });
            cost = (cost + insert_cost);
        }
        idx = (idx + 1);
        k = (k + 1);
    }
    println!("{}", join_chars(string_list.clone()));
    println!("{}", format!("{}{}", "Cost: ", cost.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
