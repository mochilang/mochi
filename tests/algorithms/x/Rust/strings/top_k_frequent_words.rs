// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct WordCount {
    word: String,
    count: i64,
}
impl std::fmt::Display for WordCount {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"word\": \"{}\"", self.word)?;
        write!(f, ", ")?;
        write!(f, "\"count\": {}", self.count)?;
        write!(f, "}}")
    }
}

static g_freq_map: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
fn main() {
    unsafe {
                let _start: i64 = _now();
        unsafe fn heapify(arr: &mut Vec<WordCount>, mut index: i64, mut heap_size: i64) {
    let mut largest: i64 = index;
    let mut left: i64 = ((2 * index) + 1);
    let mut right: i64 = ((2 * index) + 2);
    if (left < heap_size) {
        let mut left_item: WordCount = arr[left as usize].clone();
        let mut largest_item: WordCount = arr[largest as usize].clone();
        if (left_item.count > largest_item.count) {
            largest = left;
        }
    }
    if (right < heap_size) {
        let mut right_item: WordCount = arr[right as usize].clone();
        let mut largest_item2: WordCount = arr[largest as usize].clone();
        if (right_item.count > largest_item2.count) {
            largest = right;
        }
    }
    if (largest != index) {
        let mut temp: WordCount = arr[largest as usize].clone();
        (*arr)[largest as usize] = arr[index as usize].clone();
        (*arr)[index as usize] = temp.clone();
        heapify(arr, largest, heap_size);
    }
};
        unsafe fn build_max_heap(arr: &mut Vec<WordCount>) {
    let mut i: i64 = (((arr.len() as i64) / 2) - 1);
    while (i >= 0) {
        heapify(arr, i, (arr.len() as i64));
        i = (i - 1);
    }
};
        unsafe fn top_k_frequent_words(mut words: Vec<String>, mut k_value: i64) -> Vec<String> {
    *g_freq_map.lock().unwrap() = HashMap::new();
    let mut i: i64 = 0;
    while (i < (words.len() as i64)) {
        let mut w: String = words[i as usize].clone().clone();
        if g_freq_map.lock().unwrap().contains_key(&w) {
            g_freq_map.insert(w.clone(), (g_freq_map.get(w.as_str()).cloned().unwrap_or_default() + 1));
        } else {
            g_freq_map.insert(w.clone(), 1);
        }
        i = (i + 1);
    }
    let mut heap: Vec<WordCount> = vec![];
    for w in g_freq_map.lock().unwrap().keys().cloned() {
        heap = { let mut _v = heap.clone(); _v.push(WordCount {word: w.clone(), count: g_freq_map.get(w.as_str()).cloned().unwrap_or_default()}); _v };
    }
    build_max_heap(&mut heap);
    let mut result: Vec<String> = vec![];
    let mut heap_size: i64 = (heap.len() as i64);
    let mut limit: i64 = k_value;
    if (limit > heap_size) {
        limit = heap_size;
    }
    let mut j: i64 = 0;
    while (j < limit) {
        let mut item: WordCount = heap[0 as usize].clone();
        result = { let mut _v = result.clone(); _v.push(item.word.clone()); _v };
        heap[0 as usize] = heap[(heap_size - 1) as usize].clone();
        heap[(heap_size - 1) as usize] = item.clone();
        heap_size = (heap_size - 1);
        heapify(&mut heap, 0, heap_size);
        j = (j + 1);
    }
    return result
};
        unsafe fn mochi_main() {
    let mut sample: Vec<String> = vec![String::from("a").clone().clone(), String::from("b").clone().clone(), String::from("c").clone().clone(), String::from("a").clone().clone(), String::from("c").clone().clone(), String::from("c").clone().clone()];
    println!("{:?}", top_k_frequent_words(sample.clone(), 3));
    println!("{:?}", top_k_frequent_words(sample.clone(), 2));
    println!("{:?}", top_k_frequent_words(sample.clone(), 1));
    println!("{:?}", top_k_frequent_words(sample.clone(), 0));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
