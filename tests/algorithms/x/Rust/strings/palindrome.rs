// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Case {
    text: String,
    expected: bool,
}
impl std::fmt::Display for Case {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"text\": \"{}\"", self.text)?;
        write!(f, ", ")?;
        write!(f, "\"expected\": {}", self.expected)?;
        write!(f, "}}")
    }
}

static mut g_test_data: Vec<Case> = Vec::new();
fn main() {
    unsafe {
        g_test_data = vec![Case {text: String::from("MALAYALAM"), expected: true}, Case {text: String::from("String"), expected: false}, Case {text: String::from("rotor"), expected: true}, Case {text: String::from("level"), expected: true}, Case {text: String::from("A"), expected: true}, Case {text: String::from("BB"), expected: true}, Case {text: String::from("ABC"), expected: false}, Case {text: String::from("amanaplanacanalpanama"), expected: true}];
                let _start: i64 = _now();
        unsafe fn reverse(s: &str) -> String {
    let mut res: String = String::from("");
    let mut i: i64 = ((s.len() as i64) - 1);
    while (i >= 0) {
        res = format!("{}{}", res, s.chars().nth(i as usize).unwrap().to_string());
        i = (i - 1);
    }
    return res.clone()
};
        unsafe fn is_palindrome(s: &str) -> bool {
    let mut start_i: i64 = 0;
    let mut end_i: i64 = ((s.len() as i64) - 1);
    while (start_i < end_i) {
        if (s.chars().nth(start_i as usize).unwrap().to_string().as_str() == s.chars().nth(end_i as usize).unwrap().to_string().as_str()) {
            start_i = (start_i + 1);
            end_i = (end_i - 1);
        } else {
            return false
        }
    }
    return true
};
        unsafe fn is_palindrome_traversal(s: &str) -> bool {
    let mut end: i64 = ((s.len() as i64) / 2);
    let mut n: i64 = (s.len() as i64);
    let mut i: i64 = 0;
    while (i < end) {
        if (s.chars().nth(i as usize).unwrap().to_string().as_str() != s.chars().nth(((n - i) - 1) as usize).unwrap().to_string().as_str()) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn is_palindrome_recursive(s: &str) -> bool {
    if ((s.len() as i64) <= 1) {
        return true
    }
    if (s.chars().nth(0 as usize).unwrap().to_string().as_str() == s.chars().nth(((s.len() as i64) - 1) as usize).unwrap().to_string().as_str()) {
        return is_palindrome_recursive(&s.chars().skip(1 as usize).take((((s.len() as i64) - 1) - 1) as usize).collect::<String>())
    }
    return false
};
        unsafe fn is_palindrome_slice(mut s: String) -> bool {
    return (s.as_str() == reverse(&s).as_str())
};
        unsafe fn mochi_main() {
    for t in g_test_data.iter().cloned() {
        let mut s: String = t.text.clone().clone();
        let mut expected: bool = t.expected;
        let mut r1: bool = is_palindrome(&s);
        let mut r2: bool = is_palindrome_traversal(&s);
        let mut r3: bool = is_palindrome_recursive(&s);
        let mut r4: bool = is_palindrome_slice(s.clone());
        if ((((r1 != expected) || (r2 != expected)) || (r3 != expected)) || (r4 != expected)) {
            panic!("algorithm mismatch");
        }
        println!("{}", format!("{}{}", format!("{}{}", s, " "), expected.to_string()));
    }
    println!("{}", "a man a plan a canal panama");
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
