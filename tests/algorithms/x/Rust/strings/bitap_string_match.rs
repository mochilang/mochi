// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow2(mut n: i64) -> i64 {
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        res = (res * 2);
        i = (i + 1);
    }
    return res
};
    fn bit_and(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    while ((x > 0) || (y > 0)) {
        if (((x % 2) == 1) && ((y % 2) == 1)) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
    }
    return res
};
    fn bit_or(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    while ((x > 0) || (y > 0)) {
        if (((x % 2) == 1) || ((y % 2) == 1)) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
    }
    return res
};
    fn char_to_index(ch: &str) -> i64 {
    let mut letters: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut i: i64 = 0;
    while (i < (letters.len() as i64)) {
        if (letters.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() == ch) {
            return i
        }
        i = (i + 1);
    }
    return 26
};
    fn bitap_string_match(text: &str, pattern: &str) -> i64 {
    if (pattern == "") {
        return 0
    }
    let mut m = (pattern.len() as i64);
    if (m > (text.len() as i64)) {
        return -1
    }
    let mut limit: i64 = pow2((m + 1));
    let mut all_ones: i64 = (limit - 1);
    let mut pattern_mask: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 27) {
        pattern_mask = { let mut _v = pattern_mask.clone(); _v.push(all_ones); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < m) {
        let mut ch: String = pattern.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        let mut idx: i64 = char_to_index(&ch);
        pattern_mask[idx as usize] = bit_and(pattern_mask[idx as usize], (all_ones - pow2(i)));
        i = (i + 1);
    }
    let mut state: i64 = (all_ones - 1);
    i = 0;
    while (i < (text.len() as i64)) {
        let mut ch: String = text.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        let mut idx: i64 = char_to_index(&ch);
        state = bit_or(state, pattern_mask[idx as usize]);
        state = ((state * 2) % limit);
        if (bit_and(state, pow2(m)) == 0) {
            return ((i - m) + 1)
        }
        i = (i + 1);
    }
    return -1
};
    fn mochi_main() {
    println!("{}", bitap_string_match(&"abdabababc", &"ababc").to_string());
    println!("{}", bitap_string_match(&"abdabababc", &"").to_string());
    println!("{}", bitap_string_match(&"abdabababc", &"c").to_string());
    println!("{}", bitap_string_match(&"abdabababc", &"fofosdfo").to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
