// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn validate_initial_digits(cc: &str) -> bool {
    return ((((((cc.chars().skip(0 as usize).take((2 - 0) as usize).collect::<String>().as_str() == "34") || (cc.chars().skip(0 as usize).take((2 - 0) as usize).collect::<String>().as_str() == "35")) || (cc.chars().skip(0 as usize).take((2 - 0) as usize).collect::<String>().as_str() == "37")) || (cc.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>().as_str() == "4")) || (cc.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>().as_str() == "5")) || (cc.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>().as_str() == "6"))
};
    fn luhn_validation(cc: &str) -> bool {
    let mut sum: i64 = 0;
    let mut double_digit: bool = false;
    let mut i = ((cc.len() as i64) - 1);
    while (i >= 0) {
        let mut n = { let n: i64 = cc.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().parse().unwrap(); n };
        if double_digit {
            n = (n * 2);
            if (n > 9) {
                n = (n - 9);
            }
        }
        sum = (sum + n);
        double_digit = !double_digit;
        i = (i - 1);
    }
    return ((sum % 10) == 0)
};
    fn is_digit_string(s: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        if ((c.as_str() < "0") || (c.as_str() > "9")) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn validate_credit_card_number(mut cc: String) -> bool {
    let mut error_message: String = format!("{}{}", cc, " is an invalid credit card number because").clone();
    if !is_digit_string(&cc) {
        println!("{}", format!("{}{}", error_message, " it has nonnumerical characters."));
        return false
    }
    if !(((cc.len() as i64) >= 13) && ((cc.len() as i64) <= 16)) {
        println!("{}", format!("{}{}", error_message, " of its length."));
        return false
    }
    if !validate_initial_digits(&cc) {
        println!("{}", format!("{}{}", error_message, " of its first two digits."));
        return false
    }
    if !luhn_validation(&cc) {
        println!("{}", format!("{}{}", error_message, " it fails the Luhn check."));
        return false
    }
    println!("{}", format!("{}{}", cc, " is a valid credit card number."));
    return true
};
    fn mochi_main() {
    validate_credit_card_number(String::from("4111111111111111"));
    validate_credit_card_number(String::from("32323"));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
