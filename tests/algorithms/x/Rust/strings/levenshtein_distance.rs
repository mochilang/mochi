// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn range_list(mut n: i64) -> Vec<i64> {
    let mut lst: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        lst = { let mut _v = lst.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    return lst
};
    fn min3(mut a: i64, mut b: i64, mut c: i64) -> i64 {
    let mut m: i64 = a;
    if (b < m) {
        m = b;
    }
    if (c < m) {
        m = c;
    }
    return m
};
    fn levenshtein_distance(mut first_word: String, mut second_word: String) -> i64 {
    if ((first_word.len() as i64) < (second_word.len() as i64)) {
        return levenshtein_distance(second_word.clone(), first_word.clone())
    }
    if ((second_word.len() as i64) == 0) {
        return (first_word.len() as i64)
    }
    let mut previous_row: Vec<i64> = range_list(((second_word.len() as i64) + 1));
    let mut i: i64 = 0;
    while (i < (first_word.len() as i64)) {
        let mut c1: String = first_word.chars().nth(i as usize).unwrap().to_string().clone();
        let mut current_row: Vec<i64> = vec![];
        current_row = { let mut _v = current_row.clone(); _v.push((i + 1)); _v };
        let mut j: i64 = 0;
        while (j < (second_word.len() as i64)) {
            let mut c2: String = second_word.chars().nth(j as usize).unwrap().to_string().clone();
            let mut insertions: i64 = (previous_row[(j + 1) as usize] + 1);
            let mut deletions: i64 = (current_row[j as usize] + 1);
            let mut substitutions: i64 = (previous_row[j as usize] + if (c1.as_str() == c2.as_str()) { 0 } else { 1 });
            let mut min_val: i64 = min3(insertions, deletions, substitutions);
            current_row = { let mut _v = current_row.clone(); _v.push(min_val); _v };
            j = (j + 1);
        }
        previous_row = current_row.clone();
        i = (i + 1);
    }
    return previous_row[((previous_row.len() as i64) - 1) as usize]
};
    fn levenshtein_distance_optimized(mut first_word: String, mut second_word: String) -> i64 {
    if ((first_word.len() as i64) < (second_word.len() as i64)) {
        return levenshtein_distance_optimized(second_word.clone(), first_word.clone())
    }
    if ((second_word.len() as i64) == 0) {
        return (first_word.len() as i64)
    }
    let mut previous_row: Vec<i64> = range_list(((second_word.len() as i64) + 1));
    let mut i: i64 = 0;
    while (i < (first_word.len() as i64)) {
        let mut c1: String = first_word.chars().nth(i as usize).unwrap().to_string().clone();
        let mut current_row: Vec<i64> = vec![];
        current_row = { let mut _v = current_row.clone(); _v.push((i + 1)); _v };
        let mut k: i64 = 0;
        while (k < (second_word.len() as i64)) {
            current_row = { let mut _v = current_row.clone(); _v.push(0); _v };
            k = (k + 1);
        }
        let mut j: i64 = 0;
        while (j < (second_word.len() as i64)) {
            let mut c2: String = second_word.chars().nth(j as usize).unwrap().to_string().clone();
            let mut insertions: i64 = (previous_row[(j + 1) as usize] + 1);
            let mut deletions: i64 = (current_row[j as usize] + 1);
            let mut substitutions: i64 = (previous_row[j as usize] + if (c1.as_str() == c2.as_str()) { 0 } else { 1 });
            let mut min_val: i64 = min3(insertions, deletions, substitutions);
            current_row[(j + 1) as usize] = min_val;
            j = (j + 1);
        }
        previous_row = current_row.clone();
        i = (i + 1);
    }
    return previous_row[((previous_row.len() as i64) - 1) as usize]
};
    fn mochi_main() {
    let mut a: String = String::from("kitten").clone();
    let mut b: String = String::from("sitting").clone();
    println!("{}", levenshtein_distance(a.clone(), b.clone()).to_string());
    println!("{}", levenshtein_distance_optimized(a.clone(), b.clone()).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
