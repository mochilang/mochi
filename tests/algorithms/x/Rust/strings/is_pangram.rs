// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_s1: String = String::new();
static mut g_s2: String = String::new();
fn main() {
    unsafe {
        g_s1 = String::from("The quick brown fox jumps over the lazy dog").clone();
        g_s2 = String::from("My name is Unknown").clone();
                let _start: i64 = _now();
        unsafe fn is_pangram(input_str: &str) -> bool {
    let mut letters: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (input_str.len() as i64)) {
        let mut c: String = (input_str.chars().nth(i as usize).unwrap().to_string().to_lowercase()).clone();
        let mut is_new: bool = !letters.contains(&c);
        if ((((c.as_str() != " ") && ("a" <= c.as_str())) && (c.as_str() <= "z")) && is_new) {
            letters = { let mut _v = letters.clone(); _v.push(c.clone()); _v };
        }
        i = (i + 1);
    }
    return ((letters.len() as i64) == 26)
};
        unsafe fn is_pangram_faster(input_str: &str) -> bool {
    let mut alphabet: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut flag: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < 26) {
        flag = { let mut _v = flag.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < (input_str.len() as i64)) {
        let mut c: String = (input_str.chars().nth(j as usize).unwrap().to_string().to_lowercase()).clone();
        let mut k: i64 = 0;
        while (k < 26) {
            if (alphabet.chars().nth(k as usize).unwrap().to_string().as_str() == c.as_str()) {
                flag[k as usize] = true;
                break
            }
            k = (k + 1);
        }
        j = (j + 1);
    }
    let mut t: i64 = 0;
    while (t < 26) {
        if !flag[t as usize] {
            return false
        }
        t = (t + 1);
    }
    return true
};
        unsafe fn is_pangram_fastest(input_str: &str) -> bool {
    let mut s: String = (input_str.to_lowercase()).clone();
    let mut alphabet: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut i: i64 = 0;
    while (i < (alphabet.len() as i64)) {
        let mut letter: String = alphabet.chars().nth(i as usize).unwrap().to_string().clone();
        if !s.contains(&letter) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        println!("{}", is_pangram(&g_s1).to_string());
        println!("{}", is_pangram(&g_s2).to_string());
        println!("{}", is_pangram_faster(&g_s1).to_string());
        println!("{}", is_pangram_faster(&g_s2).to_string());
        println!("{}", is_pangram_fastest(&g_s1).to_string());
        println!("{}", is_pangram_fastest(&g_s2).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
