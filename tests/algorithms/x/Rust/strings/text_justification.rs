// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn repeat_str(s: &str, mut count: i64) -> String {
    let mut res: String = String::from("");
    let mut i: i64 = 0;
    while (i < count) {
        res = format!("{}{}", res, s);
        i = (i + 1);
    }
    return res.clone()
};
    fn split_words(s: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        if (ch.as_str() == " ") {
            if (current.as_str() != "") {
                res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
                current = String::from("");
            }
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    if (current.as_str() != "") {
        res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    }
    return res
};
    fn justify_line(mut line: Vec<String>, mut width: i64, mut max_width: i64) -> String {
    let mut overall_spaces_count: i64 = (max_width - width);
    let mut words_count: i64 = (line.len() as i64);
    if (words_count == 1) {
        return format!("{}{}", line[0 as usize].clone(), repeat_str(&" ", overall_spaces_count))
    }
    let mut spaces_to_insert_between_words: i64 = (words_count - 1);
    let mut num_spaces_between_words_list: Vec<i64> = vec![];
    let mut base: i64 = (overall_spaces_count / spaces_to_insert_between_words);
    let mut extra: i64 = (overall_spaces_count % spaces_to_insert_between_words);
    let mut i: i64 = 0;
    while (i < spaces_to_insert_between_words) {
        let mut spaces: i64 = base;
        if (i < extra) {
            spaces = (spaces + 1);
        }
        num_spaces_between_words_list = { let mut _v = num_spaces_between_words_list.clone(); _v.push(spaces); _v };
        i = (i + 1);
    }
    let mut aligned: String = String::from("");
    i = 0;
    while (i < spaces_to_insert_between_words) {
        aligned = format!("{}{}", format!("{}{}", aligned, line[i as usize].clone()), repeat_str(&" ", num_spaces_between_words_list[i as usize]));
        i = (i + 1);
    }
    aligned = format!("{}{}", aligned, line[spaces_to_insert_between_words as usize].clone());
    return aligned.clone()
};
    fn text_justification(word: &str, mut max_width: i64) -> Vec<String> {
    let mut words: Vec<String> = split_words(word);
    let mut answer: Vec<String> = vec![];
    let mut line: Vec<String> = vec![];
    let mut width: i64 = 0;
    let mut idx: i64 = 0;
    while (idx < (words.len() as i64)) {
        let mut w: String = words[idx as usize].clone().clone();
        if (((width + (w.len() as i64)) + (line.len() as i64)) <= max_width) {
            line = { let mut _v = line.clone(); _v.push(w.clone()); _v };
            width = (width + (w.len() as i64));
        } else {
            answer = { let mut _v = answer.clone(); _v.push(justify_line(line.clone(), width, max_width)); _v };
            line = vec![w.clone()];
            width = (w.len() as i64);
        }
        idx = (idx + 1);
    }
    let mut remaining_spaces: i64 = ((max_width - width) - (line.len() as i64));
    let mut last_line: String = String::from("");
    let mut j: i64 = 0;
    while (j < (line.len() as i64)) {
        if (j > 0) {
            last_line = format!("{}{}", last_line, " ");
        }
        last_line = format!("{}{}", last_line, line[j as usize].clone());
        j = (j + 1);
    }
    last_line = format!("{}{}", last_line, repeat_str(&" ", (remaining_spaces + 1)));
    answer = { let mut _v = answer.clone(); _v.push(last_line.clone()); _v };
    return answer
};
    println!("{}", format!("{:?}", text_justification(&"This is an example of text justification.", 16)));
    println!("{}", format!("{:?}", text_justification(&"Two roads diverged in a yellow wood", 16)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
