// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_alphabet_size: i64 = 0;
static mut g_modulus: i64 = 0;
fn main() {
    unsafe {
        g_alphabet_size = 256;
        g_modulus = 1000003;
                let _start: i64 = _now();
        unsafe fn index_of_char(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut digits: String = String::from("0123456789").clone();
    let mut idx: i64 = index_of_char(&upper, &ch);
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = index_of_char(&lower, &ch);
    if (idx >= 0) {
        return (97 + idx)
    }
    idx = index_of_char(&digits, &ch);
    if (idx >= 0) {
        return (48 + idx)
    }
    if (ch.as_str() == "ü") {
        return 252
    }
    if (ch.as_str() == "Ü") {
        return 220
    }
    if (ch.as_str() == " ") {
        return 32
    }
    return 0
};
        unsafe fn rabin_karp(pattern: &str, mut text: String) -> bool {
    let mut p_len: i64 = (pattern.len() as i64);
    let mut t_len: i64 = (text.len() as i64);
    if (p_len > t_len) {
        return false
    }
    let mut p_hash: i64 = 0;
    let mut t_hash: i64 = 0;
    let mut modulus_power: i64 = 1;
    let mut i: i64 = 0;
    while (i < p_len) {
        p_hash = ((ord(pattern.chars().nth(i as usize).unwrap().to_string()) + (p_hash * g_alphabet_size)) % g_modulus);
        t_hash = ((ord(text.chars().nth(i as usize).unwrap().to_string()) + (t_hash * g_alphabet_size)) % g_modulus);
        if (i != (p_len - 1)) {
            modulus_power = ((modulus_power * g_alphabet_size) % g_modulus);
        }
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j <= (t_len - p_len)) {
        if ((t_hash == p_hash) && ({ let tmp = &text; tmp.chars().skip(j as usize).take(((j + p_len) - j) as usize).collect::<String>() } == pattern)) {
            return true
        }
        if (j == (t_len - p_len)) {
            j = (j + 1);
            continue
        }
        t_hash = ((((t_hash - (ord(text.chars().nth(j as usize).unwrap().to_string()) * modulus_power)) * g_alphabet_size) + ord(text.chars().nth((j + p_len) as usize).unwrap().to_string())) % g_modulus);
        if (t_hash < 0) {
            t_hash = (t_hash + g_modulus);
        }
        j = (j + 1);
    }
    return false
};
        unsafe fn test_rabin_karp() {
    let mut pattern1: String = String::from("abc1abc12");
    let mut text1: String = String::from("alskfjaldsabc1abc1abc12k23adsfabcabc");
    let mut text2: String = String::from("alskfjaldsk23adsfabcabc");
    if (!rabin_karp(&pattern1, text1.clone()) || rabin_karp(&pattern1, text2.clone())) {
        println!("{}", "Failure");
        return
    }
    let mut pattern2: String = String::from("ABABX");
    let mut text3: String = String::from("ABABZABABYABABX");
    if !rabin_karp(&pattern2, text3.clone()) {
        println!("{}", "Failure");
        return
    }
    let mut pattern3: String = String::from("AAAB");
    let mut text4: String = String::from("ABAAAAAB");
    if !rabin_karp(&pattern3, text4.clone()) {
        println!("{}", "Failure");
        return
    }
    let mut pattern4: String = String::from("abcdabcy");
    let mut text5: String = String::from("abcxabcdabxabcdabcdabcy");
    if !rabin_karp(&pattern4, text5.clone()) {
        println!("{}", "Failure");
        return
    }
    let mut pattern5: String = String::from("Lü");
    let mut text6: String = String::from("Lüsai");
    if !rabin_karp(&pattern5, text6.clone()) {
        println!("{}", "Failure");
        return
    }
    let mut pattern6: String = String::from("Lue");
    if rabin_karp(&pattern6, text6.clone()) {
        println!("{}", "Failure");
        return
    }
    println!("{}", "Success.");
};
        test_rabin_karp();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
