// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn z_function(s: &str) -> Vec<i64> {
    let mut z: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        z = { let mut _v = z.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut l: i64 = 0;
    let mut r: i64 = 0;
    i = 1;
    while (i < (s.len() as i64)) {
        if (i <= r) {
            let mut min_edge: i64 = ((r - i) + 1);
            let zi: i64 = z[(i - l) as usize];
            if (zi < min_edge) {
                min_edge = zi;
            }
            z[i as usize] = min_edge;
        }
        while go_next(i, z.clone(), s) {
            z[i as usize] = (z[i as usize] + 1);
        }
        if (((i + z[i as usize]) - 1) > r) {
            l = i;
            r = ((i + z[i as usize]) - 1);
        }
        i = (i + 1);
    }
    return z
};
    fn go_next(mut i: i64, mut z: Vec<i64>, s: &str) -> bool {
    return (((i + z[i as usize]) < (s.len() as i64)) && (s.chars().nth(z[i as usize] as usize).unwrap().to_string().as_str() == s.chars().nth((i + z[i as usize]) as usize).unwrap().to_string().as_str()))
};
    fn find_pattern(pattern: &str, input_str: &str) -> i64 {
    let mut answer: i64 = 0;
    let z_res: Vec<i64> = z_function(&format!("{}{}", pattern, input_str));
    let mut i: i64 = 0;
    while (i < (z_res.len() as i64)) {
        if (z_res[i as usize] >= (pattern.len() as i64)) {
            answer = (answer + 1);
        }
        i = (i + 1);
    }
    return answer
};
    fn list_eq_int(mut a: Vec<i64>, mut b: Vec<i64>) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn test_z_function() {
    let s1: String = String::from("abracadabra").clone();
    let expected1: Vec<i64> = vec![0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1];
    let r1: Vec<i64> = z_function(&s1);
    if !list_eq_int(r1.clone(), expected1.clone()) {
        panic!("z_function abracadabra failed");
    }
    let s2: String = String::from("aaaa").clone();
    let expected2: Vec<i64> = vec![0, 3, 2, 1];
    let r2: Vec<i64> = z_function(&s2);
    if !list_eq_int(r2.clone(), expected2.clone()) {
        panic!("z_function aaaa failed");
    }
    let s3: String = String::from("zxxzxxz").clone();
    let expected3: Vec<i64> = vec![0, 0, 0, 4, 0, 0, 1];
    let r3: Vec<i64> = z_function(&s3);
    if !list_eq_int(r3.clone(), expected3.clone()) {
        panic!("z_function zxxzxxz failed");
    }
};
    fn test_find_pattern() {
    if (find_pattern(&"abr", &"abracadabra") != 2) {
        panic!("find_pattern abr failed");
    }
    if (find_pattern(&"a", &"aaaa") != 4) {
        panic!("find_pattern aaaa failed");
    }
    if (find_pattern(&"xz", &"zxxzxxz") != 2) {
        panic!("find_pattern xz failed");
    }
};
    fn mochi_main() {
    test_z_function();
    test_find_pattern();
    let r1: Vec<i64> = z_function(&"abracadabra");
    let r2: Vec<i64> = z_function(&"aaaa");
    let r3: Vec<i64> = z_function(&"zxxzxxz");
    println!("{}", format!("{:?}", r1));
    println!("{}", format!("{:?}", r2));
    println!("{}", format!("{:?}", r3));
    println!("{}", find_pattern(&"abr", &"abracadabra").to_string());
    println!("{}", find_pattern(&"a", &"aaaa").to_string());
    println!("{}", find_pattern(&"xz", &"zxxzxxz").to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
