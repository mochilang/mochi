// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split_words(s: &str) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut current: String = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() == " ") {
            if ((current.len() as i64) > 0) {
                words = { let mut _v = words.clone(); _v.push(current.clone()); _v };
                current = String::from("");
            }
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    if ((current.len() as i64) > 0) {
        words = { let mut _v = words.clone(); _v.push(current.clone()); _v };
    }
    return words
};
    fn reverse_words(input_str: &str) -> String {
    let mut words: Vec<String> = split_words(input_str);
    let mut res: String = String::from("");
    let mut i = ((words.len() as i64) - 1);
    while (i >= 0) {
        res = format!("{}{}", res, words[i as usize].clone());
        if (i > 0) {
            res = format!("{}{}", res, " ");
        }
        i = (i - 1);
    }
    return res.clone()
};
    fn mochi_main() {
    println!("{}", reverse_words(&"I love Python"));
    println!("{}", reverse_words(&"I     Love          Python"));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
