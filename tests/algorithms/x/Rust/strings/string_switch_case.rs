// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split_words(s: &str) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut current: String = String::from("");
    for ch in s.chars() {
        let ch = ch.to_string();
        if (ch.as_str() == " ") {
            if (current.as_str() != "") {
                words = { let mut _v = words.clone(); _v.push(current.clone()); _v };
                current = String::from("");
            }
        } else {
            current = format!("{}{}", current, ch);
        }
    }
    if (current.as_str() != "") {
        words = { let mut _v = words.clone(); _v.push(current.clone()); _v };
    }
    return words
};
    fn is_alnum(c: &str) -> bool {
    return ((("0123456789".contains(c) || "abcdefghijklmnopqrstuvwxyz".contains(c)) || "ABCDEFGHIJKLMNOPQRSTUVWXYZ".contains(c)) || (c == " "))
};
    fn split_input(text: &str) -> Vec<Vec<String>> {
    let mut result: Vec<Vec<String>> = vec![];
    let mut current: String = String::from("");
    for ch in text.chars() {
        let ch = ch.to_string();
        if is_alnum(&ch) {
            current = format!("{}{}", current, ch);
        } else {
            if (current.as_str() != "") {
                result = { let mut _v = result.clone(); _v.push(split_words(&current)); _v };
                current = String::from("");
            }
        }
    }
    if (current.as_str() != "") {
        result = { let mut _v = result.clone(); _v.push(split_words(&current)); _v };
    }
    return result
};
    fn capitalize(mut word: String) -> String {
    if ((word.len() as i64) == 0) {
        return String::from("")
    }
    if ((word.len() as i64) == 1) {
        return (word.to_uppercase())
    }
    return format!("{}{}", (word.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>().to_uppercase()), (word.chars().skip(1 as usize).take(usize::MAX as usize).collect::<String>().to_lowercase())).clone()
};
    fn to_simple_case(text: &str) -> String {
    let mut parts: Vec<Vec<String>> = split_input(text);
    let mut res: String = String::from("");
    for sub in parts.iter() {
        for w in (*sub).clone() {
            res = format!("{}{}", res, capitalize(w.to_string()));
        }
    }
    return res.clone()
};
    fn to_complex_case(text: &str, mut upper_flag: bool, sep: &str) -> String {
    let mut parts: Vec<Vec<String>> = split_input(text);
    let mut res: String = String::from("");
    for sub in parts.iter() {
        let mut first: bool = true;
        for w in (*sub).clone() {
            let mut word: String = if upper_flag { (w.to_uppercase()) } else { (w.to_lowercase()) }.clone();
            if first {
                res = format!("{}{}", res, word);
                first = false;
            } else {
                res = format!("{}{}", format!("{}{}", res, sep), word);
            }
        }
    }
    return res.clone()
};
    fn to_pascal_case(mut text: String) -> String {
    return to_simple_case(&text).clone()
};
    fn to_camel_case(text: &str) -> String {
    let mut s: String = to_simple_case(text).clone();
    if ((s.len() as i64) == 0) {
        return String::from("")
    }
    return format!("{}{}", (s.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>().to_lowercase()), s.chars().skip(1 as usize).take(usize::MAX as usize).collect::<String>()).clone()
};
    fn to_snake_case(mut text: String, mut upper_flag: bool) -> String {
    return to_complex_case(&text, upper_flag, &"_").clone()
};
    fn to_kebab_case(mut text: String, mut upper_flag: bool) -> String {
    return to_complex_case(&text, upper_flag, &"-").clone()
};
    println!("{}", to_pascal_case(String::from("one two 31235three4four")));
    println!("{}", to_camel_case(&"one two 31235three4four"));
    println!("{}", to_snake_case(String::from("one two 31235three4four"), true));
    println!("{}", to_snake_case(String::from("one two 31235three4four"), false));
    println!("{}", to_kebab_case(String::from("one two 31235three4four"), true));
    println!("{}", to_kebab_case(String::from("one two 31235three4four"), false));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
