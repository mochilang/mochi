// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn word_occurrence(sentence: &str) -> HashMap<String, i64> {
    let mut occurrence: HashMap<String, i64> = HashMap::new();
    let mut word: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (sentence.len() as i64)) {
        let mut ch: String = { let tmp = &sentence; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == " ") {
            if (word.as_str() != "") {
                if occurrence.contains_key(&word) {
                    occurrence.insert(word.clone(), (occurrence.get(word.as_str()).cloned().unwrap_or_default() + 1));
                } else {
                    occurrence.insert(word.clone(), 1);
                }
                word = String::from("");
            }
        } else {
            word = format!("{}{}", word, ch);
        }
        i = (i + 1);
    }
    if (word.as_str() != "") {
        if occurrence.contains_key(&word) {
            occurrence.insert(word.clone(), (occurrence.get(word.as_str()).cloned().unwrap_or_default() + 1));
        } else {
            occurrence.insert(word.clone(), 1);
        }
    }
    return occurrence
};
    fn mochi_main() {
    let mut result: HashMap<String, i64> = word_occurrence(&"INPUT STRING");
    for w in result.keys().cloned() {
        println!("{}", format!("{}{}", format!("{}{}", w, ": "), result.get(w.as_str()).cloned().unwrap_or_default().to_string()));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
