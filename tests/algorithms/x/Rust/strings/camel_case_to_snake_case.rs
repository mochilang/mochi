// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LOWER: String = String::new();
static mut g_UPPER: String = String::new();
static mut g_DIGITS: String = String::new();
fn main() {
    unsafe {
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_DIGITS = String::from("0123456789").clone();
                let _start: i64 = _now();
        unsafe fn is_lower(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_LOWER.len() as i64)) {
        if (g_LOWER.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn is_upper(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_UPPER.len() as i64)) {
        if (g_UPPER.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn is_digit(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_DIGITS.len() as i64)) {
        if (g_DIGITS.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn is_alpha(ch: &str) -> bool {
    if is_lower(ch) {
        return true
    }
    if is_upper(ch) {
        return true
    }
    return false
};
        unsafe fn is_alnum(ch: &str) -> bool {
    if is_alpha(ch) {
        return true
    }
    if is_digit(ch) {
        return true
    }
    return false
};
        unsafe fn to_lower(ch: &str) -> String {
    let mut i: i64 = 0;
    while (i < (g_UPPER.len() as i64)) {
        if (g_UPPER.chars().nth(i as usize).unwrap().to_string() == ch) {
            return g_LOWER.chars().nth(i as usize).unwrap().to_string()
        }
        i = (i + 1);
    }
    return ch.to_string().clone()
};
        unsafe fn camel_to_snake_case(input_str: &str) -> String {
    let mut snake_str: String = String::from("").clone();
    let mut i: i64 = 0;
    let mut prev_is_digit: bool = false;
    let mut prev_is_alpha: bool = false;
    while (i < (input_str.len() as i64)) {
        let mut ch: String = input_str.chars().nth(i as usize).unwrap().to_string().clone();
        if is_upper(&ch) {
            snake_str = format!("{}{}", format!("{}{}", snake_str, "_"), to_lower(&ch));
        } else if (prev_is_digit && is_lower(&ch)) {
            snake_str = format!("{}{}", format!("{}{}", snake_str, "_"), ch);
        } else if (prev_is_alpha && is_digit(&ch)) {
            snake_str = format!("{}{}", format!("{}{}", snake_str, "_"), ch);
        } else if !is_alnum(&ch) {
            snake_str = format!("{}{}", snake_str, "_");
        } else {
            snake_str = format!("{}{}", snake_str, ch);
        }
        prev_is_digit = is_digit(&ch);
        prev_is_alpha = is_alpha(&ch);
        i = (i + 1);
    }
    if (((snake_str.len() as i64) > 0) && (snake_str.chars().nth(0 as usize).unwrap().to_string().as_str() == "_")) {
        snake_str = snake_str.chars().skip(1 as usize).take(((snake_str.len() as i64) - 1) as usize).collect::<String>();
    }
    return snake_str.clone()
};
        unsafe fn mochi_main() {
    println!("{}", camel_to_snake_case(&"someRandomString"));
    println!("{}", camel_to_snake_case(&"SomeRandomStr#ng"));
    println!("{}", camel_to_snake_case(&"123SomeRandom123String123"));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
