// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn naive_string_search(text: &str, pattern: &str) -> Vec<i64> {
    let mut pat_len = (pattern.len() as i64);
    let mut positions: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= ((text.len() as i64) - pat_len)) {
        let mut match_found: bool = true;
        let mut j: i64 = 0;
        while (j < pat_len) {
            if (text.chars().nth((i + j) as usize).unwrap().to_string().as_str() != pattern.chars().nth(j as usize).unwrap().to_string().as_str()) {
                match_found = false;
                break
            }
            j = (j + 1);
        }
        if match_found {
            positions = { let mut _v = positions.clone(); _v.push(i); _v };
        }
        i = (i + 1);
    }
    return positions
};
    println!("{:?}", naive_string_search(&"ABAAABCDBBABCDDEBCABC", &"ABC"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
