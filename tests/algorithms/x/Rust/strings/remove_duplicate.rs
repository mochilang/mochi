// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split_ws(s: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut word: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == " ") {
            if (word.as_str() != "") {
                res = { let mut _v = res.clone(); _v.push(word.clone()); _v };
                word = String::from("");
            }
        } else {
            word = format!("{}{}", word, ch);
        }
        i = (i + 1);
    }
    if (word.as_str() != "") {
        res = { let mut _v = res.clone(); _v.push(word.clone()); _v };
    }
    return res
};
    fn contains(mut xs: Vec<String>, x: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize].clone() == x) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn unique(mut xs: Vec<String>) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let mut w: String = xs[i as usize].clone().clone();
        if !contains(res.clone(), &w) {
            res = { let mut _v = res.clone(); _v.push(w.clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn insertion_sort(mut arr: Vec<String>) -> Vec<String> {
    let mut a: Vec<String> = arr.clone();
    let mut i: i64 = 1;
    while (i < (a.len() as i64)) {
        let mut key: String = a[i as usize].clone().clone();
        let mut j: i64 = (i - 1);
        while ((j >= 0) && (a[j as usize].clone().as_str() > key.as_str())) {
            a[(j + 1) as usize] = a[j as usize].clone();
            j = (j - 1);
        }
        a[(j + 1) as usize] = key.clone();
        i = (i + 1);
    }
    return a
};
    fn join_with_space(mut xs: Vec<String>) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            s = format!("{}{}", s, " ");
        }
        s = format!("{}{}", s, xs[i as usize].clone());
        i = (i + 1);
    }
    return s.clone()
};
    fn remove_duplicates(sentence: &str) -> String {
    let mut words: Vec<String> = split_ws(sentence);
    let mut uniq: Vec<String> = unique(words.clone());
    let mut sorted_words: Vec<String> = insertion_sort(uniq.clone());
    return join_with_space(sorted_words.clone()).clone()
};
    println!("{}", remove_duplicates(&"Python is great and Java is also great"));
    println!("{}", remove_duplicates(&"Python   is      great and Java is also great"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
