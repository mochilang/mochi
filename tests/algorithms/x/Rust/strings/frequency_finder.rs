// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_ETAOIN: String = String::new();
static mut g_LETTERS: String = String::new();
fn main() {
    unsafe {
        g_ETAOIN = String::from("ETAOINSHRDLCUMWFGYPBVKJXQZ").clone();
        g_LETTERS = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
                let _start: i64 = _now();
        unsafe fn etaoin_index(letter: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_ETAOIN.len() as i64)) {
        if ({ let tmp = &g_ETAOIN; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == letter) {
            return i
        }
        i = (i + 1);
    }
    return (g_ETAOIN.len() as i64)
};
        unsafe fn get_letter_count(message: &str) -> HashMap<String, i64> {
    let mut letter_count: HashMap<String, i64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        let mut c: String = { let tmp = &g_LETTERS; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        letter_count.insert(c.clone(), 0);
        i = (i + 1);
    }
    let mut msg: String = (message.to_uppercase()).clone();
    let mut j: i64 = 0;
    while (j < (msg.len() as i64)) {
        let mut ch: String = { let tmp = &msg; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.clone();
        if g_LETTERS.contains(&ch) {
            letter_count.insert(ch.clone(), (letter_count.get(ch.as_str()).cloned().unwrap_or_default() + 1));
        }
        j = (j + 1);
    }
    return letter_count
};
        unsafe fn get_frequency_order(message: &str) -> String {
    let mut letter_to_freq: HashMap<String, i64> = get_letter_count(message);
    let mut max_freq: i64 = 0;
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        let mut letter: String = { let tmp = &g_LETTERS; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut f: i64 = letter_to_freq.get(letter.as_str()).cloned().unwrap_or_default();
        if (f > max_freq) {
            max_freq = f;
        }
        i = (i + 1);
    }
    let mut result: String = String::from("").clone();
    let mut freq: i64 = max_freq;
    while (freq >= 0) {
        let mut group: Vec<String> = vec![];
        let mut j: i64 = 0;
        while (j < (g_LETTERS.len() as i64)) {
            let mut letter: String = { let tmp = &g_LETTERS; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.clone();
            if (letter_to_freq.get(letter.as_str()).cloned().unwrap_or_default() == freq) {
                group = { let mut _v = group.clone(); _v.push(letter.clone()); _v };
            }
            j = (j + 1);
        }
        let mut g_len = (group.len() as i64);
        let mut a: i64 = 0;
        while (a < g_len) {
            let mut b: i64 = 0;
            while (b < ((g_len - a) - 1)) {
                let mut g1: String = group[b as usize].clone().clone();
                let mut g2: String = group[(b + 1) as usize].clone().clone();
                let mut idx1: i64 = etaoin_index(&g1);
                let mut idx2: i64 = etaoin_index(&g2);
                if (idx1 < idx2) {
                    let mut tmp: String = group[b as usize].clone().clone();
                    group[b as usize] = group[(b + 1) as usize].clone();
                    group[(b + 1) as usize] = tmp.clone();
                }
                b = (b + 1);
            }
            a = (a + 1);
        }
        let mut g: i64 = 0;
        while (g < (group.len() as i64)) {
            result = format!("{}{}", result, group[g as usize].clone());
            g = (g + 1);
        }
        freq = (freq - 1);
    }
    return result.clone()
};
        unsafe fn english_freq_match_score(message: &str) -> i64 {
    let mut freq_order: String = get_frequency_order(message).clone();
    let mut top: String = { let tmp = &freq_order; tmp.chars().skip(0 as usize).take((6 - 0) as usize).collect::<String>() }.clone();
    let mut bottom: String = { let tmp = &freq_order; tmp.chars().skip(((freq_order.len() as i64) - 6) as usize).take(((freq_order.len() as i64) - ((freq_order.len() as i64) - 6)) as usize).collect::<String>() }.clone();
    let mut score: i64 = 0;
    let mut i: i64 = 0;
    while (i < 6) {
        let mut c: String = { let tmp = &g_ETAOIN; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if top.contains(&c) {
            score = (score + 1);
        }
        i = (i + 1);
    }
    let mut j = ((g_ETAOIN.len() as i64) - 6);
    while (j < (g_ETAOIN.len() as i64)) {
        let mut c: String = { let tmp = &g_ETAOIN; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.clone();
        if bottom.contains(&c) {
            score = (score + 1);
        }
        j = (j + 1);
    }
    return score
};
        unsafe fn mochi_main() {
    println!("{}", get_frequency_order(&"Hello World"));
    println!("{}", english_freq_match_score(&"Hello World"));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
