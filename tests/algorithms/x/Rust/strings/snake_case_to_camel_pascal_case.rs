// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split(s: &str, sep: &str) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch == sep) {
            res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
            current = String::from("");
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    return res
};
    fn capitalize(word: &str) -> String {
    if ((word.len() as i64) == 0) {
        return String::from("")
    }
    let mut first: String = ({ let tmp = &word; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.to_uppercase()).clone();
    let mut rest: String = { let tmp = &word; tmp.chars().skip(1 as usize).take(((word.len() as i64) - 1) as usize).collect::<String>() }.clone();
    return format!("{}{}", first, rest).clone()
};
    fn snake_to_camel_case(input_str: &str, mut use_pascal: bool) -> String {
    let mut words: Vec<String> = input_str.split("_").map(|x| x.to_string()).collect::<Vec<String>>();
    let mut result: String = String::from("").clone();
    let mut index: i64 = 0;
    if !use_pascal {
        if ((words.len() as i64) > 0) {
            result = words[0 as usize].clone();
            index = 1;
        }
    }
    while (index < (words.len() as i64)) {
        let mut word: String = words[index as usize].clone().clone();
        result = format!("{}{}", result, capitalize(&word));
        index = (index + 1);
    }
    return result.clone()
};
    println!("{}", snake_to_camel_case(&"some_random_string", false));
    println!("{}", snake_to_camel_case(&"some_random_string", true));
    println!("{}", snake_to_camel_case(&"some_random_string_with_numbers_123", false));
    println!("{}", snake_to_camel_case(&"some_random_string_with_numbers_123", true));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
