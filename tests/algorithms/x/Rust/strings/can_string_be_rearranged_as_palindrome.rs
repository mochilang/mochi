// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_LETTERS: String = String::new();
static mut g_LOWERCASE: String = String::new();
fn main() {
    unsafe {
        g_LETTERS = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_LOWERCASE = String::from("abcdefghijklmnopqrstuvwxyz").clone();
                let _start: i64 = _now();
        unsafe fn char_to_lower(c: &str) -> String {
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        if (c == { let tmp = &g_LETTERS; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }) {
            return { let tmp = &g_LOWERCASE; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }
        }
        i = (i + 1);
    }
    return c.to_string().clone()
};
        unsafe fn normalize(input_str: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (input_str.len() as i64)) {
        let mut ch: String = { let tmp = &input_str; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut lc: String = char_to_lower(&ch).clone();
        if ((lc.as_str() >= "a") && (lc.as_str() <= "z")) {
            res = format!("{}{}", res, lc);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn can_string_be_rearranged_as_palindrome_counter(input_str: &str) -> bool {
    let mut s: String = normalize(input_str).clone();
    let mut freq: HashMap<String, i64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if freq.contains_key(&ch) {
            freq.insert(ch.clone(), (freq.get(ch.as_str()).cloned().unwrap_or_default() + 1));
        } else {
            freq.insert(ch.clone(), 1);
        }
        i = (i + 1);
    }
    let mut odd: i64 = 0;
    for key in freq.keys().cloned() {
        if ((freq.get(key.as_str()).cloned().unwrap_or_default() % 2) != 0) {
            odd = (odd + 1);
        }
    }
    return (odd < 2)
};
        unsafe fn can_string_be_rearranged_as_palindrome(input_str: &str) -> bool {
    let mut s: String = normalize(input_str).clone();
    if ((s.len() as i64) == 0) {
        return true
    }
    let mut character_freq_dict: HashMap<String, i64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut character: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if character_freq_dict.contains_key(&character) {
            character_freq_dict.insert(character.clone(), (character_freq_dict.get(character.as_str()).cloned().unwrap_or_default() + 1));
        } else {
            character_freq_dict.insert(character.clone(), 1);
        }
        i = (i + 1);
    }
    let mut odd_char: i64 = 0;
    for character_key in character_freq_dict.keys().cloned() {
        let mut character_count: i64 = character_freq_dict.get(character_key.as_str()).cloned().unwrap_or_default();
        if ((character_count % 2) != 0) {
            odd_char = (odd_char + 1);
        }
    }
    return !(odd_char > 1)
};
        println!("{}", if can_string_be_rearranged_as_palindrome_counter(&"Momo") { 1 } else { 0 });
        println!("{}", if can_string_be_rearranged_as_palindrome_counter(&"Mother") { 1 } else { 0 });
        println!("{}", if can_string_be_rearranged_as_palindrome(&"Momo") { 1 } else { 0 });
        println!("{}", if can_string_be_rearranged_as_palindrome(&"Mother") { 1 } else { 0 });
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
