// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_DIGITS: String = String::new();
static mut g_UPPER: String = String::new();
static mut g_LOWER: String = String::new();
static mut g_LOOKUP_LETTERS: String = String::new();
static mut g_ERROR_MSG: String = String::new();
fn main() {
    unsafe {
        g_DIGITS = String::from("0123456789").clone();
        g_UPPER = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_LOWER = String::from("abcdefghijklmnopqrstuvwxyz").clone();
        g_LOOKUP_LETTERS = String::from("TRWAGMYFPDXBNJZSQVHLCKE").clone();
        g_ERROR_MSG = String::from("Input must be a string of 8 numbers plus letter").clone();
                let _start: i64 = _now();
        unsafe fn to_upper(s: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        let mut j: i64 = 0;
        let mut converted: String = ch.clone();
        while (j < (g_LOWER.len() as i64)) {
            if (g_LOWER.chars().nth(j as usize).unwrap().to_string().as_str() == ch.as_str()) {
                converted = g_UPPER.chars().nth(j as usize).unwrap().to_string();
                break
            }
            j = (j + 1);
        }
        res = format!("{}{}", res, converted);
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn is_digit(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_DIGITS.len() as i64)) {
        if (g_DIGITS.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn clean_id(spanish_id: &str) -> String {
    let mut upper_id: String = to_upper(spanish_id).clone();
    let mut cleaned: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (upper_id.len() as i64)) {
        let mut ch: String = upper_id.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() != "-") {
            cleaned = format!("{}{}", cleaned, ch);
        }
        i = (i + 1);
    }
    return cleaned.clone()
};
        unsafe fn is_spain_national_id(spanish_id: &str) -> bool {
    let mut sid: String = clean_id(spanish_id).clone();
    if ((sid.len() as i64) != 9) {
        panic!("{}", g_ERROR_MSG);
    }
    let mut i: i64 = 0;
    while (i < 8) {
        if !is_digit(&sid.chars().nth(i as usize).unwrap().to_string()) {
            panic!("{}", g_ERROR_MSG);
        }
        i = (i + 1);
    }
    let mut number = { let n: i64 = { let tmp = &sid; tmp.chars().skip(0 as usize).take((8 - 0) as usize).collect::<String>() }.parse().unwrap(); n };
    let mut letter: String = sid.chars().nth(8 as usize).unwrap().to_string().clone();
    if is_digit(&letter) {
        panic!("{}", g_ERROR_MSG);
    }
    let mut expected: String = g_LOOKUP_LETTERS.chars().nth((number % 23) as usize).unwrap().to_string().clone();
    return (letter.as_str() == expected.as_str())
};
        unsafe fn mochi_main() {
    println!("{}", if is_spain_national_id(&"12345678Z") { 1 } else { 0 });
    println!("{}", if is_spain_national_id(&"12345678z") { 1 } else { 0 });
    println!("{}", if is_spain_national_id(&"12345678x") { 1 } else { 0 });
    println!("{}", if is_spain_national_id(&"12345678I") { 1 } else { 0 });
    println!("{}", if is_spain_national_id(&"12345678-Z") { 1 } else { 0 });
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
