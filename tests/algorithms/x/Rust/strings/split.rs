// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split_with_sep(mut s: String, sep: &str) -> Vec<String> {
    let mut parts: Vec<String> = vec![];
    let mut last: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch == sep) {
            parts = { let mut _v = parts.clone(); _v.push({ let tmp = &s; tmp.chars().skip(last as usize).take((i - last) as usize).collect::<String>() }); _v };
            last = (i + 1);
        }
        if ((i + 1) == (s.len() as i64)) {
            parts = { let mut _v = parts.clone(); _v.push({ let tmp = &s; tmp.chars().skip(last as usize).take(((i + 1) - last) as usize).collect::<String>() }); _v };
        }
        i = (i + 1);
    }
    return parts
};
    fn split(mut s: String) -> Vec<String> {
    return split_with_sep(s.clone(), &" ")
};
    println!("{}", format!("{:?}", split_with_sep(String::from("apple#banana#cherry#orange"), &"#")));
    println!("{}", format!("{:?}", split(String::from("Hello there"))));
    println!("{}", format!("{:?}", split_with_sep(String::from("11/22/63"), &"/")));
    println!("{}", format!("{:?}", split_with_sep(String::from("12:43:39"), &":")));
    println!("{}", format!("{:?}", split_with_sep(String::from(";abbb;;c;"), &";")));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
