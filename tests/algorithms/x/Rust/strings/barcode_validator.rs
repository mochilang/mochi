// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_res: Vec<i64> = Vec::new();
static mut g_x: i64 = 0;
fn main() {
    unsafe {
        g_res = vec![];
        g_x = 0;
                let _start: i64 = _now();
        unsafe fn has_alpha(s: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if (((c.as_str() >= "a") && (c.as_str() <= "z")) || ((c.as_str() >= "A") && (c.as_str() <= "Z"))) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn parse_decimal(s: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() < "0") || (c.as_str() > "9")) {
            panic!("Non-digit character encountered");
        }
        value = ((value * 10) + { let n: i64 = c.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
        unsafe fn get_barcode(barcode: &str) -> i64 {
    if has_alpha(barcode) {
        panic!("{}", format!("{}{}", format!("{}{}", "Barcode '", barcode), "' has alphabetic characters."));
    }
    if (((barcode.len() as i64) > 0) && (barcode.chars().nth(0 as usize).unwrap().to_string().as_str() == "-")) {
        panic!("The entered barcode has a negative value. Try again.");
    }
    return parse_decimal(barcode)
};
        unsafe fn get_check_digit(mut barcode: i64) -> i64 {
    let mut num: i64 = (barcode / 10);
    let mut s: i64 = 0;
    let mut position: i64 = 0;
    while (num != 0) {
        let mut mult: i64 = if ((position % 2) == 0) { 3 } else { 1 };
        s = (s + (mult * (num % 10)));
        num = (num / 10);
        position = (position + 1);
    }
    return ((10 - (s % 10)) % 10)
};
        unsafe fn is_valid(mut barcode: i64) -> bool {
    return (((barcode.to_string().len() as i64) == 13) && (get_check_digit(barcode) == (barcode % 10)))
};
        println!("{}", get_check_digit(8718452538119).to_string());
        println!("{}", get_check_digit(87184523).to_string());
        println!("{}", get_check_digit(87193425381086).to_string());
        while (g_x < 100) {
            g_res = { let mut _v = g_res.clone(); _v.push(get_check_digit(g_x)); _v };
            g_x = (g_x + 10);
        }
        println!("{:?}", format!("{:?}", g_res));
        println!("{}", is_valid(8718452538119).to_string());
        println!("{}", is_valid(87184525).to_string());
        println!("{}", is_valid(87193425381089).to_string());
        println!("{}", is_valid(0).to_string());
        println!("{}", get_barcode(&"8718452538119").to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
