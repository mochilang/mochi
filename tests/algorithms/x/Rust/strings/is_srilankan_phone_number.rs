// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_phone: String = String::new();
fn main() {
    unsafe {
        g_phone = String::from("0094702343221").clone();
                let _start: i64 = _now();
        unsafe fn starts_with(mut s: String, prefix: &str) -> bool {
    if ((s.len() as i64) < (prefix.len() as i64)) {
        return false
    }
    return ({ let tmp = &s; tmp.chars().skip(0 as usize).take(((prefix.len() as i64) - 0) as usize).collect::<String>() } == prefix)
};
        unsafe fn all_digits(s: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() < "0") || (c.as_str() > "9")) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn is_sri_lankan_phone_number(phone: &str) -> bool {
    let mut p: String = phone.to_string().clone();
    if starts_with(p.clone(), &"+94") {
        p = { let tmp = &p; tmp.chars().skip(3 as usize).take(((p.len() as i64) - 3) as usize).collect::<String>() };
    } else if starts_with(p.clone(), &"0094") {
        p = { let tmp = &p; tmp.chars().skip(4 as usize).take(((p.len() as i64) - 4) as usize).collect::<String>() };
    } else if starts_with(p.clone(), &"94") {
        p = { let tmp = &p; tmp.chars().skip(2 as usize).take(((p.len() as i64) - 2) as usize).collect::<String>() };
    } else if starts_with(p.clone(), &"0") {
        p = { let tmp = &p; tmp.chars().skip(1 as usize).take(((p.len() as i64) - 1) as usize).collect::<String>() };
    } else {
        return false
    }
    if (((p.len() as i64) != 9) && ((p.len() as i64) != 10)) {
        return false
    }
    if (p.chars().nth(0 as usize).unwrap().to_string().as_str() != "7") {
        return false
    }
    let mut second: String = p.chars().nth(1 as usize).unwrap().to_string().clone();
    let mut allowed: Vec<String> = vec![String::from("0").clone(), String::from("1").clone(), String::from("2").clone(), String::from("4").clone(), String::from("5").clone(), String::from("6").clone(), String::from("7").clone(), String::from("8").clone()];
    if !allowed.contains(&second) {
        return false
    }
    let mut idx: i64 = 2;
    if ((p.len() as i64) == 10) {
        let mut sep: String = p.chars().nth(2 as usize).unwrap().to_string().clone();
        if ((sep.as_str() != "-") && (sep.as_str() != " ")) {
            return false
        }
        idx = 3;
    }
    if (((p.len() as i64) - idx) != 7) {
        return false
    }
    let mut rest: String = { let tmp = &p; tmp.chars().skip(idx as usize).take(((p.len() as i64) - idx) as usize).collect::<String>() }.clone();
    return all_digits(&rest)
};
        println!("{}", is_sri_lankan_phone_number(&g_phone).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
