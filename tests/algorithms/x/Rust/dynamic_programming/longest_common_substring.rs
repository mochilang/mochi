// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn longest_common_substring(mut text1: String, mut text2: String) -> String {
    if (((text1.len() as i64) == 0) || ((text2.len() as i64) == 0)) {
        return String::from("")
    }
    let mut m = (text1.len() as i64);
    let mut n = (text2.len() as i64);
    let mut dp: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (m + 1)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (n + 1)) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut end_pos: i64 = 0;
    let mut max_len: i64 = 0;
    let mut ii: i64 = 1;
    while (ii <= m) {
        let mut jj: i64 = 1;
        while (jj <= n) {
            if ({ let tmp = &text1; tmp.chars().skip((ii - 1) as usize).take((ii - (ii - 1)) as usize).collect::<String>() }.as_str() == { let tmp = &text2; tmp.chars().skip((jj - 1) as usize).take((jj - (jj - 1)) as usize).collect::<String>() }.as_str()) {
                dp[ii as usize][jj as usize] = (1 + dp[(ii - 1) as usize].clone()[(jj - 1) as usize]);
                if (dp[ii as usize].clone()[jj as usize] > max_len) {
                    max_len = dp[ii as usize].clone()[jj as usize];
                    end_pos = ii;
                }
            }
            jj = (jj + 1);
        }
        ii = (ii + 1);
    }
    return { let tmp = &text1; tmp.chars().skip((end_pos - max_len) as usize).take((end_pos - (end_pos - max_len)) as usize).collect::<String>() }.clone()
};
    println!("{}", longest_common_substring(String::from("abcdef"), String::from("xabded")));
    println!("{}", "\n");
    println!("{}", longest_common_substring(String::from("zxabcdezy"), String::from("yzabcdezx")));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
