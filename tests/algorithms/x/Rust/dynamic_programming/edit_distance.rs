// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn min3(mut a: i64, mut b: i64, mut c: i64) -> i64 {
    let mut m: i64 = a;
    if (b < m) {
        m = b;
    }
    if (c < m) {
        m = c;
    }
    return m
};
    fn helper_top_down(mut word1: String, mut word2: String, dp: &mut Vec<Vec<i64>>, mut i: i64, mut j: i64) -> i64 {
    if (i < 0) {
        return (j + 1)
    }
    if (j < 0) {
        return (i + 1)
    }
    if (dp[i as usize].clone()[j as usize] != (0 - 1)) {
        return dp[i as usize].clone()[j as usize]
    }
    if ({ let tmp = &word1; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == { let tmp = &word2; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str()) {
        (*dp)[i as usize][j as usize] = helper_top_down(word1.clone(), word2.clone(), dp, (i - 1), (j - 1));
    } else {
        let mut insert: i64 = helper_top_down(word1.clone(), word2.clone(), dp, i, (j - 1));
        let mut delete: i64 = helper_top_down(word1.clone(), word2.clone(), dp, (i - 1), j);
        let mut replace: i64 = helper_top_down(word1.clone(), word2.clone(), dp, (i - 1), (j - 1));
        (*dp)[i as usize][j as usize] = (1 + min3(insert, delete, replace));
    }
    return dp[i as usize].clone()[j as usize]
};
    fn min_dist_top_down(mut word1: String, mut word2: String) -> i64 {
    let mut m = (word1.len() as i64);
    let mut n = (word2.len() as i64);
    let mut dp: Vec<Vec<i64>> = vec![];
    for _ in 0..m {
        let mut row: Vec<i64> = vec![];
        for _2 in 0..n {
            row = { let mut _v = row.clone(); _v.push((0 - 1)); _v };
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
    }
    return helper_top_down(word1.clone(), word2.clone(), &mut dp, (m - 1), (n - 1))
};
    fn min_dist_bottom_up(mut word1: String, mut word2: String) -> i64 {
    let mut m = (word1.len() as i64);
    let mut n = (word2.len() as i64);
    let mut dp: Vec<Vec<i64>> = vec![];
    for _ in 0..(m + 1) {
        let mut row: Vec<i64> = vec![];
        for _2 in 0..(n + 1) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
    }
    for i in 0..(m + 1) {
        for j in 0..(n + 1) {
            if (i == 0) {
                dp[i as usize][j as usize] = j;
            } else if (j == 0) {
                dp[i as usize][j as usize] = i;
            } else if ({ let tmp = &word1; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.as_str() == { let tmp = &word2; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.as_str()) {
                dp[i as usize][j as usize] = dp[(i - 1) as usize].clone()[(j - 1) as usize];
            } else {
                let mut insert: i64 = dp[i as usize].clone()[(j - 1) as usize];
                let mut delete: i64 = dp[(i - 1) as usize].clone()[j as usize];
                let mut replace: i64 = dp[(i - 1) as usize].clone()[(j - 1) as usize];
                dp[i as usize][j as usize] = (1 + min3(insert, delete, replace));
            }
        }
    }
    return dp[m as usize].clone()[n as usize]
};
    println!("{}", min_dist_top_down(String::from("intention"), String::from("execution")).to_string());
    println!("{}", min_dist_top_down(String::from("intention"), String::from("")).to_string());
    println!("{}", min_dist_top_down(String::from(""), String::from("")).to_string());
    println!("{}", min_dist_bottom_up(String::from("intention"), String::from("execution")).to_string());
    println!("{}", min_dist_bottom_up(String::from("intention"), String::from("")).to_string());
    println!("{}", min_dist_bottom_up(String::from(""), String::from("")).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
