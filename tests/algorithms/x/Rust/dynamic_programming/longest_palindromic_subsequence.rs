// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn reverse(s: &str) -> String {
    let mut result: String = String::from("").clone();
    let mut i = ((s.len() as i64) - 1);
    while (i >= 0) {
        result = format!("{}{}", result, s[i as usize..(i + 1) as usize].to_string());
        i = (i - 1);
    }
    return result.clone()
};
    fn max_int(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    }
    return b
};
    fn longest_palindromic_subsequence(s: &str) -> i64 {
    let mut rev: String = reverse(s).clone();
    let mut n = (s.len() as i64);
    let mut m = (rev.len() as i64);
    let mut dp: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j <= m) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 1;
    while (i <= n) {
        let mut j: i64 = 1;
        while (j <= m) {
            let mut a_char: String = s[(i - 1) as usize..i as usize].to_string().clone();
            let mut b_char: String = rev.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>().clone();
            if (a_char.as_str() == b_char.as_str()) {
                dp[i as usize][j as usize] = (1 + dp[(i - 1) as usize].clone()[(j - 1) as usize]);
            } else {
                dp[i as usize][j as usize] = max_int(dp[(i - 1) as usize].clone()[j as usize], dp[i as usize].clone()[(j - 1) as usize]);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return dp[n as usize].clone()[m as usize]
};
    println!("{}", longest_palindromic_subsequence(&"bbbab").to_string());
    println!("{}", longest_palindromic_subsequence(&"bbabcbcab").to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
