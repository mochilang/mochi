// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_m1: Vec<Vec<i64>> = Vec::new();
static mut g_m2: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_m1 = vec![vec![2, 1], vec![3, 1], vec![4, 2]];
        g_m2 = vec![vec![2, 1, 4], vec![2, 1, 3], vec![3, 2, 1]];
                let _start: i64 = _now();
        unsafe fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    }
    return b
};
        unsafe fn minimum_cost_path(matrix: &mut Vec<Vec<i64>>) -> i64 {
    let mut rows = (matrix.len() as i64);
    let mut cols = (matrix[0 as usize].clone().len() as i64);
    let mut j: i64 = 1;
    while (j < cols) {
        let mut row0: Vec<i64> = matrix[0 as usize].clone();
        row0[j as usize] = (row0[j as usize] + row0[(j - 1) as usize]);
        (*matrix)[0 as usize] = row0.clone();
        j = (j + 1);
    }
    let mut i: i64 = 1;
    while (i < rows) {
        let mut row: Vec<i64> = matrix[i as usize].clone();
        row[0 as usize] = (row[0 as usize] + matrix[(i - 1) as usize].clone()[0 as usize]);
        (*matrix)[i as usize] = row.clone();
        i = (i + 1);
    }
    i = 1;
    while (i < rows) {
        let mut row: Vec<i64> = matrix[i as usize].clone();
        j = 1;
        while (j < cols) {
            let mut up: i64 = matrix[(i - 1) as usize].clone()[j as usize];
            let mut left: i64 = row[(j - 1) as usize];
            let mut best: i64 = min_int(up, left);
            row[j as usize] = (row[j as usize] + best);
            j = (j + 1);
        }
        (*matrix)[i as usize] = row.clone();
        i = (i + 1);
    }
    return matrix[(rows - 1) as usize].clone()[(cols - 1) as usize]
};
        println!("{}", minimum_cost_path(&mut g_m1).to_string());
        println!("{}", minimum_cost_path(&mut g_m2).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
