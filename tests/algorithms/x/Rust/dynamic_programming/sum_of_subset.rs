// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn create_bool_matrix(mut rows: i64, mut cols: i64) -> Vec<Vec<bool>> {
    let mut matrix: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i <= rows) {
        let mut row: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j <= cols) {
            row = { let mut _v = row.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return matrix
};
    fn is_sum_subset(mut arr: Vec<i64>, mut required_sum: i64) -> bool {
    let mut arr_len = (arr.len() as i64);
    let mut subset: Vec<Vec<bool>> = create_bool_matrix(arr_len, required_sum);
    let mut i: i64 = 0;
    while (i <= arr_len) {
        subset[i as usize][0 as usize] = true;
        i = (i + 1);
    }
    let mut j: i64 = 1;
    while (j <= required_sum) {
        subset[0 as usize][j as usize] = false;
        j = (j + 1);
    }
    i = 1;
    while (i <= arr_len) {
        j = 1;
        while (j <= required_sum) {
            if (arr[(i - 1) as usize] > j) {
                subset[i as usize][j as usize] = subset[(i - 1) as usize].clone()[j as usize];
            }
            if (arr[(i - 1) as usize] <= j) {
                subset[i as usize][j as usize] = (subset[(i - 1) as usize].clone()[j as usize] || subset[(i - 1) as usize].clone()[(j - arr[(i - 1) as usize]) as usize]);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return subset[arr_len as usize].clone()[required_sum as usize]
};
    println!("{}", if is_sum_subset(vec![2, 4, 6, 8], 5) { 1 } else { 0 });
    println!("{}", if is_sum_subset(vec![2, 4, 6, 8], 14) { 1 } else { 0 });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
