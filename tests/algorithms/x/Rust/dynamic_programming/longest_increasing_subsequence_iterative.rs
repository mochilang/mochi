// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn copy_list(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn longest_subsequence(mut arr: Vec<i64>) -> Vec<i64> {
    let mut n = (arr.len() as i64);
    let mut lis: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut single: Vec<i64> = vec![];
        single = { let mut _v = single.clone(); _v.push(arr[i as usize]); _v };
        lis = { let mut _v = lis.clone(); _v.push(single.clone()); _v };
        i = (i + 1);
    }
    i = 1;
    while (i < n) {
        let mut prev: i64 = 0;
        while (prev < i) {
            if ((arr[prev as usize] <= arr[i as usize]) && (((lis[prev as usize].clone().len() as i64) + 1) > (lis[i as usize].clone().len() as i64))) {
                let mut temp: Vec<i64> = copy_list(lis[prev as usize].clone());
                let mut temp2: Vec<i64> = { let mut _v = temp.clone(); _v.push(arr[i as usize]); _v };
                lis[i as usize] = temp2.clone();
            }
            prev = (prev + 1);
        }
        i = (i + 1);
    }
    let mut result: Vec<i64> = vec![];
    i = 0;
    while (i < n) {
        if ((lis[i as usize].clone().len() as i64) > (result.len() as i64)) {
            result = lis[i as usize].clone();
        }
        i = (i + 1);
    }
    return result
};
    fn mochi_main() {
    println!("{}", format!("{:?}", longest_subsequence(vec![10, 22, 9, 33, 21, 50, 41, 60, 80])));
    println!("{}", format!("{:?}", longest_subsequence(vec![4, 8, 7, 5, 1, 12, 2, 3, 9])));
    println!("{}", format!("{:?}", longest_subsequence(vec![9, 8, 7, 6, 5, 7])));
    println!("{}", format!("{:?}", longest_subsequence(vec![28, 26, 12, 23, 35, 39])));
    println!("{}", format!("{:?}", longest_subsequence(vec![1, 1, 1])));
    println!("{}", format!("{:?}", longest_subsequence(vec![])));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
