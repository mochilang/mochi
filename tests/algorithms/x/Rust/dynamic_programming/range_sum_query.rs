// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Query {
    left: i64,
    right: i64,
}
impl std::fmt::Display for Query {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

static mut g_arr1: Vec<i64> = Vec::new();
static mut g_queries1: Vec<Query> = Vec::new();
static mut g_arr2: Vec<i64> = Vec::new();
static mut g_queries2: Vec<Query> = Vec::new();
fn main() {
    unsafe {
        g_arr1 = vec![1, 4, 6, 2, 61, 12];
        g_queries1 = vec![Query {left: 2, right: 5}, Query {left: 1, right: 5}, Query {left: 3, right: 4}];
        g_arr2 = vec![4, 2, 1, 6, 3];
        g_queries2 = vec![Query {left: 3, right: 4}, Query {left: 1, right: 3}, Query {left: 0, right: 2}];
                let _start: i64 = _now();
        unsafe fn prefix_sum(mut arr: Vec<i64>, mut queries: Vec<Query>) -> Vec<i64> {
    let mut dp: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        if (i == 0) {
            dp = { let mut _v = dp.clone(); _v.push(arr[0 as usize]); _v };
        } else {
            dp = { let mut _v = dp.clone(); _v.push((dp[(i - 1) as usize] + arr[i as usize])); _v };
        }
        i = (i + 1);
    }
    let mut result: Vec<i64> = vec![];
    let mut j: i64 = 0;
    while (j < (queries.len() as i64)) {
        let mut q: Query = queries[j as usize].clone();
        let mut sum: i64 = dp[q.right as usize];
        if (q.left > 0) {
            sum = (sum - dp[(q.left - 1) as usize]);
        }
        result = { let mut _v = result.clone(); _v.push(sum); _v };
        j = (j + 1);
    }
    return result
};
        println!("{}", format!("{:?}", prefix_sum(g_arr1.clone().clone(), g_queries1.clone().clone())));
        println!("{}", format!("{:?}", prefix_sum(g_arr2.clone().clone(), g_queries2.clone().clone())));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
