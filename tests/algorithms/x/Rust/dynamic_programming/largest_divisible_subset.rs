// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sort_list(mut nums: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = nums.clone();
    let mut i: i64 = 1;
    while (i < (arr.len() as i64)) {
        let mut key: i64 = arr[i as usize];
        let mut j: i64 = (i - 1);
        while ((j >= 0) && (arr[j as usize] > key)) {
            arr[(j + 1) as usize] = arr[j as usize];
            j = (j - 1);
        }
        arr[(j + 1) as usize] = key;
        i = (i + 1);
    }
    return arr
};
    fn largest_divisible_subset(mut items: Vec<i64>) -> Vec<i64> {
    if ((items.len() as i64) == 0) {
        return vec![]
    }
    let mut nums: Vec<i64> = sort_list(items.clone());
    let mut n = (nums.len() as i64);
    let mut memo: Vec<i64> = vec![];
    let mut prev: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        memo = { let mut _v = memo.clone(); _v.push(1); _v };
        prev = { let mut _v = prev.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < i) {
            if (((nums[j as usize] == 0) || ((nums[i as usize] % nums[j as usize]) == 0)) && ((memo[j as usize] + 1) > memo[i as usize])) {
                memo[i as usize] = (memo[j as usize] + 1);
                prev[i as usize] = j;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut ans: i64 = (0 - 1);
    let mut last_index: i64 = (0 - 1);
    i = 0;
    while (i < n) {
        if (memo[i as usize] > ans) {
            ans = memo[i as usize];
            last_index = i;
        }
        i = (i + 1);
    }
    if (last_index == (0 - 1)) {
        return vec![]
    }
    let mut result: Vec<i64> = vec![nums[last_index as usize]];
    while (prev[last_index as usize] != last_index) {
        last_index = prev[last_index as usize];
        result = { let mut _v = result.clone(); _v.push(nums[last_index as usize]); _v };
    }
    return result
};
    fn mochi_main() {
    let mut items: Vec<i64> = vec![1, 16, 7, 8, 4];
    let mut subset: Vec<i64> = largest_divisible_subset(items.clone());
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "The longest divisible subset of ", format!("{:?}", items)), " is "), format!("{:?}", subset)), "."));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
