// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_prices: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_prices = vec![1, 5, 8, 9, 10, 17, 17, 20, 24, 30];
                let _start: i64 = _now();
        unsafe fn enforce_args(mut n: i64, mut prices: Vec<i64>) {
    if (n < 0) {
        panic!("n must be non-negative");
    }
    if (n > (prices.len() as i64)) {
        panic!("price list is shorter than n");
    }
};
        unsafe fn bottom_up_cut_rod(mut n: i64, prices: &mut Vec<i64>) -> i64 {
    enforce_args(n, prices.clone());
    let mut max_rev: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i <= n) {
        if (i == 0) {
            max_rev = { let mut _v = max_rev.clone(); _v.push(0); _v };
        } else {
            max_rev = { let mut _v = max_rev.clone(); _v.push(-2147483648); _v };
        }
        i = (i + 1);
    }
    let mut length: i64 = 1;
    while (length <= n) {
        let mut best: i64 = max_rev[length as usize];
        let mut j: i64 = 1;
        while (j <= length) {
            let mut candidate: i64 = (prices[(j - 1) as usize] + max_rev[(length - j) as usize]);
            if (candidate > best) {
                best = candidate;
            }
            j = (j + 1);
        }
        max_rev[length as usize] = best;
        length = (length + 1);
    }
    return max_rev[n as usize]
};
        println!("{}", bottom_up_cut_rod(4, &mut g_prices));
        println!("{}", bottom_up_cut_rod(10, &mut g_prices));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
