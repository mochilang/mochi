// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_list(mut len: i64, mut value: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < len) {
        arr = { let mut _v = arr.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return arr
};
    fn int_sqrt(mut n: i64) -> i64 {
    let mut r: i64 = 0;
    while (((r + 1) * (r + 1)) <= n) {
        r = (r + 1);
    }
    return r
};
    fn minimum_squares_to_represent_a_number(mut number: i64) -> i64 {
    if (number < 0) {
        panic!("the value of input must not be a negative number");
    }
    if (number == 0) {
        return 1
    }
    let mut answers: Vec<i64> = make_list((number + 1), -1);
    answers[0 as usize] = 0;
    let mut i: i64 = 1;
    while (i <= number) {
        let mut answer: i64 = i;
        let mut root: i64 = int_sqrt(i);
        let mut j: i64 = 1;
        while (j <= root) {
            let mut current_answer: i64 = (1 + answers[(i - (j * j)) as usize]);
            if (current_answer < answer) {
                answer = current_answer;
            }
            j = (j + 1);
        }
        answers[i as usize] = answer;
        i = (i + 1);
    }
    return answers[number as usize]
};
    println!("{}", minimum_squares_to_represent_a_number(25));
    println!("{}", minimum_squares_to_represent_a_number(21));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
