// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn ceil_index(mut v: Vec<i64>, mut left: i64, mut right: i64, mut key: i64) -> i64 {
    let mut l: i64 = left;
    let mut r: i64 = right;
    while ((r - l) > 1) {
        let mut middle: i64 = ((l + r) / 2);
        if (v[middle as usize] >= key) {
            r = middle;
        } else {
            l = middle;
        }
    }
    return r
};
    fn longest_increasing_subsequence_length(mut v: Vec<i64>) -> i64 {
    if ((v.len() as i64) == 0) {
        return 0
    }
    let mut tail: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        tail = { let mut _v = tail.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut length: i64 = 1;
    tail[0 as usize] = v[0 as usize];
    let mut j: i64 = 1;
    while (j < (v.len() as i64)) {
        if (v[j as usize] < tail[0 as usize]) {
            tail[0 as usize] = v[j as usize];
        } else if (v[j as usize] > tail[(length - 1) as usize]) {
            tail[length as usize] = v[j as usize];
            length = (length + 1);
        } else {
            let mut idx: i64 = ceil_index(tail.clone(), -1, (length - 1), v[j as usize]);
            tail[idx as usize] = v[j as usize];
        }
        j = (j + 1);
    }
    return length
};
    fn mochi_main() {
    let mut example1: Vec<i64> = vec![2, 5, 3, 7, 11, 8, 10, 13, 6];
    let mut example2: Vec<i64> = vec![];
    let mut example3: Vec<i64> = vec![0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    let mut example4: Vec<i64> = vec![5, 4, 3, 2, 1];
    println!("{}", longest_increasing_subsequence_length(example1.clone()));
    println!("{}", longest_increasing_subsequence_length(example2.clone()));
    println!("{}", longest_increasing_subsequence_length(example3.clone()));
    println!("{}", longest_increasing_subsequence_length(example4.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
