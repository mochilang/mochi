// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct MatrixChainResult {
    matrix: Vec<Vec<i64>>,
    solution: Vec<Vec<i64>>,
}
impl std::fmt::Display for MatrixChainResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"matrix\": {:?}", self.matrix)?;
        write!(f, ", ")?;
        write!(f, "\"solution\": {:?}", self.solution)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_2d(mut n: i64) -> Vec<Vec<i64>> {
    let mut res: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return res
};
    fn matrix_chain_order(mut arr: Vec<i64>) -> MatrixChainResult {
    let mut n = (arr.len() as i64);
    let mut m: Vec<Vec<i64>> = make_2d(n);
    let mut s: Vec<Vec<i64>> = make_2d(n);
    let mut chain_length: i64 = 2;
    while (chain_length < n) {
        let mut a: i64 = 1;
        while (a < ((n - chain_length) + 1)) {
            let mut b: i64 = ((a + chain_length) - 1);
            m[a as usize][b as usize] = 1000000000;
            let mut c: i64 = a;
            while (c < b) {
                let mut cost: i64 = ((m[a as usize].clone()[c as usize] + m[(c + 1) as usize].clone()[b as usize]) + ((arr[(a - 1) as usize] * arr[c as usize]) * arr[b as usize]));
                if (cost < m[a as usize].clone()[b as usize]) {
                    m[a as usize][b as usize] = cost;
                    s[a as usize][b as usize] = c;
                }
                c = (c + 1);
            }
            a = (a + 1);
        }
        chain_length = (chain_length + 1);
    }
    return MatrixChainResult {matrix: m, solution: s}
};
    fn optimal_parenthesization(mut s: Vec<Vec<i64>>, mut i: i64, mut j: i64) -> String {
    if (i == j) {
        return format!("{}{}", "A", i.to_string())
    } else {
        let mut left: String = optimal_parenthesization(s.clone(), i, s[i as usize].clone()[j as usize]).clone();
        let mut right: String = optimal_parenthesization(s.clone(), (s[i as usize].clone()[j as usize] + 1), j).clone();
        return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "( ", left), " "), right), " )")
    }
};
    fn mochi_main() {
    let mut arr: Vec<i64> = vec![30, 35, 15, 5, 10, 20, 25];
    let mut n = (arr.len() as i64);
    let mut res: MatrixChainResult = matrix_chain_order(arr.clone());
    let mut m: Vec<Vec<i64>> = res.matrix.clone();
    let mut s: Vec<Vec<i64>> = res.solution.clone();
    println!("{}", format!("{}{}", "No. of Operation required: ", m[1 as usize].clone()[(n - 1) as usize].to_string()));
    let mut seq: String = optimal_parenthesization(s.clone(), 1, (n - 1)).clone();
    println!("{}", seq);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
