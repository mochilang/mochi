// Generated by Mochi transpiler v0.10.64
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn build_set(mut words: Vec<String>) -> HashMap<String, bool> {
    let mut m: HashMap<String, bool> = HashMap::new();
    for w in words.iter().cloned() {
        m.insert(w.clone(), true);
    }
    return m
};
    fn word_break(mut s: String, mut words: Vec<String>) -> bool {
    let n: i64 = (s.len() as i64);
    let dict: HashMap<String, bool> = build_set(words.clone());
    let mut dp: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        dp = { let mut _v = dp.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    dp[0 as usize] = true;
    i = 1;
    while (i <= n) {
        let mut j: i64 = 0;
        while (j < i) {
            if dp[j as usize] {
                let sub: String = s.chars().skip(j as usize).take((i - j) as usize).collect::<String>().clone();
                if dict.contains_key(&sub) {
                    dp[i as usize] = true;
                    j = i;
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return dp[n as usize]
};
    fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
    print_bool(word_break(String::from("applepenapple"), vec![String::from("apple").clone(), String::from("pen").clone()]));
    print_bool(word_break(String::from("catsandog"), vec![String::from("cats").clone(), String::from("dog").clone(), String::from("sand").clone(), String::from("and").clone(), String::from("cat").clone()]));
    print_bool(word_break(String::from("cars"), vec![String::from("car").clone(), String::from("ca").clone(), String::from("rs").clone()]));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
