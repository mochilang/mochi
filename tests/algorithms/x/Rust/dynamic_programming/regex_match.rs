// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn recursive_match(mut text: String, mut pattern: String) -> bool {
    if ((pattern.len() as i64) == 0) {
        return ((text.len() as i64) == 0)
    }
    if ((text.len() as i64) == 0) {
        if (((pattern.len() as i64) >= 2) && ({ let tmp = &pattern; tmp.chars().skip(((pattern.len() as i64) - 1) as usize).take(((pattern.len() as i64) - ((pattern.len() as i64) - 1)) as usize).collect::<String>() }.as_str() == "*")) {
            return recursive_match(text.clone(), { let tmp = &pattern; tmp.chars().skip(0 as usize).take((((pattern.len() as i64) - 2) - 0) as usize).collect::<String>() })
        }
        return false
    }
    let mut last_text: String = { let tmp = &text; tmp.chars().skip(((text.len() as i64) - 1) as usize).take(((text.len() as i64) - ((text.len() as i64) - 1)) as usize).collect::<String>() }.clone();
    let mut last_pattern: String = { let tmp = &pattern; tmp.chars().skip(((pattern.len() as i64) - 1) as usize).take(((pattern.len() as i64) - ((pattern.len() as i64) - 1)) as usize).collect::<String>() }.clone();
    if ((last_text.as_str() == last_pattern.as_str()) || (last_pattern.as_str() == ".")) {
        return recursive_match({ let tmp = &text; tmp.chars().skip(0 as usize).take((((text.len() as i64) - 1) - 0) as usize).collect::<String>() }, { let tmp = &pattern; tmp.chars().skip(0 as usize).take((((pattern.len() as i64) - 1) - 0) as usize).collect::<String>() })
    }
    if (last_pattern.as_str() == "*") {
        if recursive_match({ let tmp = &text; tmp.chars().skip(0 as usize).take((((text.len() as i64) - 1) - 0) as usize).collect::<String>() }, pattern.clone()) {
            return true
        }
        return recursive_match(text.clone(), { let tmp = &pattern; tmp.chars().skip(0 as usize).take((((pattern.len() as i64) - 2) - 0) as usize).collect::<String>() })
    }
    return false
};
    fn dp_match(text: &str, mut pattern: String) -> bool {
    let mut m = (text.len() as i64);
    let mut n = (pattern.len() as i64);
    let mut dp: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i <= m) {
        let mut row: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j <= n) {
            row = { let mut _v = row.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    dp[0 as usize][0 as usize] = true;
    let mut j: i64 = 1;
    while (j <= n) {
        if (({ let tmp = &pattern; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.as_str() == "*") && (j >= 2)) {
            if dp[0 as usize].clone()[(j - 2) as usize] {
                dp[0 as usize][j as usize] = true;
            }
        }
        j = (j + 1);
    }
    i = 1;
    while (i <= m) {
        j = 1;
        while (j <= n) {
            let mut p_char: String = { let tmp = &pattern; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.clone();
            let mut t_char: String = { let tmp = &text; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.clone();
            if ((p_char.as_str() == ".") || (p_char.as_str() == t_char.as_str())) {
                if dp[(i - 1) as usize].clone()[(j - 1) as usize] {
                    dp[i as usize][j as usize] = true;
                }
            } else if (p_char.as_str() == "*") {
                if (j >= 2) {
                    if dp[i as usize].clone()[(j - 2) as usize] {
                        dp[i as usize][j as usize] = true;
                    }
                    let mut prev_p: String = { let tmp = &pattern; tmp.chars().skip((j - 2) as usize).take(((j - 1) - (j - 2)) as usize).collect::<String>() }.clone();
                    if ((prev_p.as_str() == ".") || (prev_p.as_str() == t_char.as_str())) {
                        if dp[(i - 1) as usize].clone()[j as usize] {
                            dp[i as usize][j as usize] = true;
                        }
                    }
                }
            } else {
                dp[i as usize][j as usize] = false;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return dp[m as usize].clone()[n as usize]
};
    fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
    print_bool(recursive_match(String::from("abc"), String::from("a.c")));
    print_bool(recursive_match(String::from("abc"), String::from("af*.c")));
    print_bool(recursive_match(String::from("abc"), String::from("a.c*")));
    print_bool(recursive_match(String::from("abc"), String::from("a.c*d")));
    print_bool(recursive_match(String::from("aa"), String::from(".*")));
    print_bool(dp_match(&"abc", String::from("a.c")));
    print_bool(dp_match(&"abc", String::from("af*.c")));
    print_bool(dp_match(&"abc", String::from("a.c*")));
    print_bool(dp_match(&"abc", String::from("a.c*d")));
    print_bool(dp_match(&"aa", String::from(".*")));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
