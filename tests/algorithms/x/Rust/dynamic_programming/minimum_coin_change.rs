// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn dp_count(mut s: Vec<i64>, mut n: i64) -> i64 {
    if (n < 0) {
        return 0
    }
    let mut table: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        table = { let mut _v = table.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    table[0 as usize] = 1;
    let mut idx: i64 = 0;
    while (idx < (s.len() as i64)) {
        let mut coin_val: i64 = s[idx as usize];
        let mut j: i64 = coin_val;
        while (j <= n) {
            table[j as usize] = (table[j as usize] + table[(j - coin_val) as usize]);
            j = (j + 1);
        }
        idx = (idx + 1);
    }
    return table[n as usize]
};
    println!("{}", dp_count(vec![1, 2, 3], 4));
    println!("{}", dp_count(vec![1, 2, 3], 7));
    println!("{}", dp_count(vec![2, 5, 3, 6], 10));
    println!("{}", dp_count(vec![10], 99));
    println!("{}", dp_count(vec![4, 5, 6], 0));
    println!("{}", dp_count(vec![1, 2, 3], -5));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
