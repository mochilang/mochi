// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_list(mut len: i64, mut value: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < len) {
        arr = { let mut _v = arr.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return arr
};
    fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    }
    return b
};
    fn min_steps_to_one(mut number: i64) -> i64 {
    if (number <= 0) {
        return 0
    }
    let mut table: Vec<i64> = make_list((number + 1), (number + 1));
    table[1 as usize] = 0;
    let mut i: i64 = 1;
    while (i < number) {
        table[(i + 1) as usize] = min_int(table[(i + 1) as usize], (table[i as usize] + 1));
        if ((i * 2) <= number) {
            table[(i * 2) as usize] = min_int(table[(i * 2) as usize], (table[i as usize] + 1));
        }
        if ((i * 3) <= number) {
            table[(i * 3) as usize] = min_int(table[(i * 3) as usize], (table[i as usize] + 1));
        }
        i = (i + 1);
    }
    return table[number as usize]
};
    println!("{}", min_steps_to_one(10).to_string());
    println!("{}", min_steps_to_one(15).to_string());
    println!("{}", min_steps_to_one(6).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
