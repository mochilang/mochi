// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn allConstruct(target: &str, mut wordBank: Vec<String>) -> Vec<Vec<String>> {
    let mut tableSize = ((target.len() as i64) + 1);
    let mut table: Vec<Vec<Vec<String>>> = vec![];
    let mut idx: i64 = 0;
    while (idx < tableSize) {
        let mut empty: Vec<Vec<String>> = vec![];
        table = { let mut _v = table.clone(); _v.push(empty.clone()); _v };
        idx = (idx + 1);
    }
    let mut base: Vec<String> = vec![];
    table[0 as usize] = vec![base];
    let mut i: i64 = 0;
    while (i < tableSize) {
        if ((table[i as usize].clone().len() as i64) != 0) {
            let mut w: i64 = 0;
            while (w < (wordBank.len() as i64)) {
                let mut word: String = wordBank[w as usize].clone().clone();
                let mut wordLen = (word.len() as i64);
                if (target[i as usize..(i + wordLen) as usize].to_string().as_str() == word.as_str()) {
                    let mut k: i64 = 0;
                    while (k < (table[i as usize].clone().len() as i64)) {
                        let mut way: Vec<String> = table[i as usize].clone()[k as usize].clone();
                        let mut combination: Vec<String> = vec![];
                        let mut m: i64 = 0;
                        while (m < (way.len() as i64)) {
                            combination = { let mut _v = combination.clone(); _v.push(way[m as usize].clone()); _v };
                            m = (m + 1);
                        }
                        combination = { let mut _v = combination.clone(); _v.push(word.clone()); _v };
                        let mut nextIndex: i64 = (i + wordLen);
                        table[nextIndex as usize] = { let mut _v = table[nextIndex as usize].clone().clone(); _v.push(combination.clone()); _v };
                        k = (k + 1);
                    }
                }
                w = (w + 1);
            }
        }
        i = (i + 1);
    }
    return table[(target.len() as i64) as usize].clone()
};
    println!("{}", format!("{:?}", allConstruct(&"jwajalapa", vec![String::from("jwa"), String::from("j"), String::from("w"), String::from("a"), String::from("la"), String::from("lapa")])));
    println!("{}", format!("{:?}", allConstruct(&"rajamati", vec![String::from("s"), String::from("raj"), String::from("amat"), String::from("raja"), String::from("ma"), String::from("i"), String::from("t")])));
    println!("{}", format!("{:?}", allConstruct(&"hexagonosaurus", vec![String::from("h"), String::from("ex"), String::from("hex"), String::from("ag"), String::from("ago"), String::from("ru"), String::from("auru"), String::from("rus"), String::from("go"), String::from("no"), String::from("o"), String::from("s")])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
