// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_list(mut len: i64, mut value: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < len) {
        arr = { let mut _v = arr.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return arr
};
    fn max_int(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    } else {
        return b
    }
};
    fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    } else {
        return b
    }
};
    fn min3(mut a: i64, mut b: i64, mut c: i64) -> i64 {
    return min_int(min_int(a, b), c)
};
    fn minimum_tickets_cost(mut days: Vec<i64>, mut costs: Vec<i64>) -> i64 {
    if ((days.len() as i64) == 0) {
        return 0
    }
    let mut last_day: i64 = days[((days.len() as i64) - 1) as usize];
    let mut dp: Vec<i64> = make_list((last_day + 1), 0);
    let mut day_index: i64 = 0;
    let mut d: i64 = 1;
    while (d <= last_day) {
        if ((day_index < (days.len() as i64)) && (d == days[day_index as usize])) {
            let mut cost1: i64 = (dp[(d - 1) as usize] + costs[0 as usize]);
            let mut cost7: i64 = (dp[max_int(0, (d - 7)) as usize] + costs[1 as usize]);
            let mut cost30: i64 = (dp[max_int(0, (d - 30)) as usize] + costs[2 as usize]);
            dp[d as usize] = min3(cost1, cost7, cost30);
            day_index = (day_index + 1);
        } else {
            dp[d as usize] = dp[(d - 1) as usize];
        }
        d = (d + 1);
    }
    return dp[last_day as usize]
};
    println!("{}", minimum_tickets_cost(vec![1, 4, 6, 7, 8, 20], vec![2, 7, 15]).to_string());
    println!("{}", minimum_tickets_cost(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], vec![2, 7, 15]).to_string());
    println!("{}", minimum_tickets_cost(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], vec![2, 90, 150]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
