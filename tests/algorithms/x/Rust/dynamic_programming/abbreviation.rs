// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn index_of(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s.chars().nth(i as usize).unwrap().to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut idx: i64 = index_of(&upper, &ch);
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = index_of(&lower, &ch);
    if (idx >= 0) {
        return (97 + idx)
    }
    return 0
};
    fn chr(mut n: i64) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    if ((n >= 65) && (n < 91)) {
        return upper.chars().skip((n - 65) as usize).take(((n - 64) - (n - 65)) as usize).collect::<String>()
    }
    if ((n >= 97) && (n < 123)) {
        return lower.chars().skip((n - 97) as usize).take(((n - 96) - (n - 97)) as usize).collect::<String>()
    }
    return String::from("?").clone()
};
    fn to_upper_char(c: &str) -> String {
    let mut code: i64 = ord(c.to_string());
    if ((code >= 97) && (code <= 122)) {
        return chr((code - 32))
    }
    return c.to_string().clone()
};
    fn is_lower(c: &str) -> bool {
    let mut code: i64 = ord(c.to_string());
    return ((code >= 97) && (code <= 122))
};
    fn abbr(a: &str, b: &str) -> bool {
    let mut n = (a.len() as i64);
    let mut m = (b.len() as i64);
    let mut dp: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        let mut row: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j <= m) {
            row = { let mut _v = row.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    dp[0 as usize][0 as usize] = true;
    i = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j <= m) {
            if dp[i as usize].clone()[j as usize] {
                if ((j < m) && (to_upper_char(&a.chars().nth(i as usize).unwrap().to_string()).as_str() == b.chars().nth(j as usize).unwrap().to_string().as_str())) {
                    dp[(i + 1) as usize][(j + 1) as usize] = true;
                }
                if is_lower(&a.chars().nth(i as usize).unwrap().to_string()) {
                    dp[(i + 1) as usize][j as usize] = true;
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return dp[n as usize].clone()[m as usize]
};
    fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
    print_bool(abbr(&"daBcd", &"ABC"));
    print_bool(abbr(&"dBcd", &"ABC"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
