// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn min_partitions(s: &str) -> i64 {
    let mut n = (s.len() as i64);
    let mut cut: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        cut = { let mut _v = cut.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut pal: Vec<Vec<bool>> = vec![];
    i = 0;
    while (i < n) {
        let mut row: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        pal = { let mut _v = pal.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        let mut mincut: i64 = i;
        let mut j: i64 = 0;
        while (j <= i) {
            if ((s.chars().nth(i as usize).unwrap().to_string().as_str() == s.chars().nth(j as usize).unwrap().to_string().as_str()) && (((i - j) < 2) || pal[(j + 1) as usize].clone()[(i - 1) as usize])) {
                pal[j as usize][i as usize] = true;
                if (j == 0) {
                    mincut = 0;
                } else {
                    let mut candidate: i64 = (cut[(j - 1) as usize] + 1);
                    if (candidate < mincut) {
                        mincut = candidate;
                    }
                }
            }
            j = (j + 1);
        }
        cut[i as usize] = mincut;
        i = (i + 1);
    }
    return cut[(n - 1) as usize]
};
    println!("{}", min_partitions(&"aab"));
    println!("{}", min_partitions(&"aaa"));
    println!("{}", min_partitions(&"ababbbabbababa"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
