// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_query: String = String::new();
static mut g_subject: String = String::new();
fn main() {
    unsafe {
        g_query = String::from("HEAGAWGHEE").clone();
        g_subject = String::from("PAWHEAE").clone();
                let _start: i64 = _now();
        unsafe fn score_function(source_char: &str, target_char: &str, mut match_score: i64, mut mismatch_score: i64, mut gap_score: i64) -> i64 {
    if ((source_char == "-") || (target_char == "-")) {
        return gap_score
    }
    if (source_char == target_char) {
        return match_score
    }
    return mismatch_score
};
        unsafe fn smith_waterman(query: &str, subject: &str, mut match_score: i64, mut mismatch_score: i64, mut gap_score: i64) -> Vec<Vec<i64>> {
    let mut q: String = (query.to_uppercase()).clone();
    let mut s: String = (subject.to_uppercase()).clone();
    let mut m = (q.len() as i64);
    let mut n = (s.len() as i64);
    let mut score: Vec<Vec<i64>> = vec![];
    for _ in 0..(m + 1) {
        let mut row: Vec<i64> = vec![];
        for _2 in 0..(n + 1) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
        }
        score = { let mut _v = score.clone(); _v.push(row.clone()); _v };
    }
    for i in 1..(m + 1) {
        for j in 1..(n + 1) {
            let mut qc: String = { let tmp = &q; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.clone();
            let mut sc: String = { let tmp = &s; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.clone();
            let mut diag: i64 = (score[(i - 1) as usize].clone()[(j - 1) as usize] + score_function(&qc, &sc, match_score, mismatch_score, gap_score));
            let mut delete: i64 = (score[(i - 1) as usize].clone()[j as usize] + gap_score);
            let mut insert: i64 = (score[i as usize].clone()[(j - 1) as usize] + gap_score);
            let mut max_val: i64 = 0;
            if (diag > max_val) {
                max_val = diag;
            }
            if (delete > max_val) {
                max_val = delete;
            }
            if (insert > max_val) {
                max_val = insert;
            }
            score[i as usize][j as usize] = max_val;
        }
    }
    return score
};
        unsafe fn traceback(mut score: Vec<Vec<i64>>, query: &str, subject: &str, mut match_score: i64, mut mismatch_score: i64, mut gap_score: i64) -> String {
    let mut q: String = (query.to_uppercase()).clone();
    let mut s: String = (subject.to_uppercase()).clone();
    let mut max_value: i64 = 0;
    let mut i_max: i64 = 0;
    let mut j_max: i64 = 0;
    for i in 0..(score.len() as i64) {
        for j in 0..(score[i as usize].clone().len() as i64) {
            if (score[i as usize].clone()[j as usize] > max_value) {
                max_value = score[i as usize].clone()[j as usize];
                i_max = i;
                j_max = j;
            }
        }
    }
    let mut i: i64 = i_max;
    let mut j: i64 = j_max;
    let mut align1: String = String::from("").clone();
    let mut align2: String = String::from("").clone();
    let mut gap_penalty: i64 = score_function(&"-", &"-", match_score, mismatch_score, gap_score);
    if ((i == 0) || (j == 0)) {
        return String::from("")
    }
    while ((i > 0) && (j > 0)) {
        let mut qc: String = { let tmp = &q; tmp.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>() }.clone();
        let mut sc: String = { let tmp = &s; tmp.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>() }.clone();
        if (score[i as usize].clone()[j as usize] == (score[(i - 1) as usize].clone()[(j - 1) as usize] + score_function(&qc, &sc, match_score, mismatch_score, gap_score))) {
            align1 = format!("{}{}", qc, align1);
            align2 = format!("{}{}", sc, align2);
            i = (i - 1);
            j = (j - 1);
        } else if (score[i as usize].clone()[j as usize] == (score[(i - 1) as usize].clone()[j as usize] + gap_penalty)) {
            align1 = format!("{}{}", qc, align1);
            align2 = format!("{}{}", "-", align2);
            i = (i - 1);
        } else {
            align1 = format!("{}{}", "-", align1);
            align2 = format!("{}{}", sc, align2);
            j = (j - 1);
        }
    }
    return format!("{}{}", format!("{}{}", align1, "\n"), align2).clone()
};
        let mut score: Vec<Vec<i64>> = smith_waterman(&g_query, &g_subject, 1, -1, -2);
        println!("{}", traceback(score.clone(), &g_query, &g_subject, 1, -1, -2));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
