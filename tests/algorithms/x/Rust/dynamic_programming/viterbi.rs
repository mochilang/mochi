// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
static mut g_observations: Vec<String> = Vec::new();
static mut g_states: Vec<String> = Vec::new();
static g_start_p: LazyLock<Mutex<HashMap<String, f64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("Healthy"), 0.6), (String::from("Fever"), 0.4)])));
static g_trans_p: LazyLock<Mutex<HashMap<String, HashMap<String, f64>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("Healthy"), HashMap::from([(String::from("Healthy"), 0.7), (String::from("Fever"), 0.3)])), (String::from("Fever"), HashMap::from([(String::from("Healthy"), 0.4), (String::from("Fever"), 0.6)]))])));
static g_emit_p: LazyLock<Mutex<HashMap<String, HashMap<String, f64>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("Healthy"), HashMap::from([(String::from("normal"), 0.5), (String::from("cold"), 0.4), (String::from("dizzy"), 0.1)])), (String::from("Fever"), HashMap::from([(String::from("normal"), 0.1), (String::from("cold"), 0.3), (String::from("dizzy"), 0.6)]))])));
unsafe fn key(state: &str, obs: &str) -> String {
    return format!("{}{}", format!("{}{}", state, "|"), obs).to_string().clone()
}

unsafe fn viterbi(mut observations: Vec<String>, mut states: Vec<String>, start_p: &HashMap<String, f64>, trans_p: &HashMap<String, HashMap<String, f64>>, emit_p: &HashMap<String, HashMap<String, f64>>) -> Vec<String> {
    if (((observations.len() as i64) == 0) || ((states.len() as i64) == 0)) {
        panic!("empty parameters");
    }
    let mut probs: HashMap<String, f64> = HashMap::new();
    let mut ptrs: HashMap<String, String> = HashMap::new();
    let mut first_obs: String = observations[0 as usize].clone().clone();
    let mut i: i64 = 0;
    while (i < (states.len() as i64)) {
        let mut state: String = states[i as usize].clone().clone();
        probs.insert(key(&state, &first_obs).clone(), (start_p.get(state.as_str()).cloned().unwrap_or_default() * emit_p.get(state.as_str()).cloned().unwrap_or_default()[first_obs.as_str()]));
        ptrs.insert(key(&state, &first_obs).clone(), String::from(""));
        i = (i + 1);
    }
    let mut t: i64 = 1;
    while (t < (observations.len() as i64)) {
        let mut obs: String = observations[t as usize].clone().clone();
        let mut j: i64 = 0;
        while (j < (states.len() as i64)) {
            let mut state: String = states[j as usize].clone().clone();
            let mut max_prob: f64 = -1.0;
            let mut prev_state: String = String::from("").clone();
            let mut k: i64 = 0;
            while (k < (states.len() as i64)) {
                let mut state0: String = states[k as usize].clone().clone();
                let mut obs0: String = observations[(t - 1) as usize].clone().clone();
                let mut prob_prev: f64 = probs.get(key(&state0, &obs0).as_str()).cloned().unwrap_or_default();
                let mut prob: f64 = ((prob_prev * trans_p.get(state0.as_str()).cloned().unwrap_or_default()[state.as_str()]) * emit_p.get(state.as_str()).cloned().unwrap_or_default()[obs.as_str()]);
                if (prob > max_prob) {
                    max_prob = prob;
                    prev_state = state0.clone();
                }
                k = (k + 1);
            }
            probs.insert(key(&state, &obs).clone(), max_prob);
            ptrs.insert(key(&state, &obs).clone(), prev_state);
            j = (j + 1);
        }
        t = (t + 1);
    }
    let mut path: Vec<String> = vec![];
    let mut n: i64 = 0;
    while (n < (observations.len() as i64)) {
        path = { let mut _v = path.clone(); _v.push("".to_string()); _v };
        n = (n + 1);
    }
    let mut last_obs: String = observations[((observations.len() as i64) - 1) as usize].clone().clone();
    let mut max_final: f64 = -1.0;
    let mut last_state: String = String::from("").clone();
    let mut m: i64 = 0;
    while (m < (states.len() as i64)) {
        let mut state: String = states[m as usize].clone().clone();
        let mut prob: f64 = probs.get(key(&state, &last_obs).as_str()).cloned().unwrap_or_default();
        if (prob > max_final) {
            max_final = prob;
            last_state = state.clone();
        }
        m = (m + 1);
    }
    let mut last_index: i64 = ((observations.len() as i64) - 1);
    path[last_index as usize] = last_state.clone();
    let mut idx: i64 = last_index;
    while (idx > 0) {
        let mut obs: String = observations[idx as usize].clone().clone();
        let mut prev: String = ptrs.get(key(&path[idx as usize].clone(), &obs).as_str()).cloned().unwrap_or_default().clone();
        path[(idx - 1) as usize] = prev.clone();
        idx = (idx - 1);
    }
    return path
}

unsafe fn join_words(mut words: Vec<String>) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (words.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, " ");
        }
        res = format!("{}{}", res, words[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
}

fn main() {
    unsafe {
        g_observations = vec![String::from("normal"), String::from("cold"), String::from("dizzy")];
        g_states = vec![String::from("Healthy"), String::from("Fever")];
        let mut result: Vec<String> = viterbi(g_observations.clone(), g_states.clone(), &*g_start_p.lock().unwrap(), &*g_trans_p.lock().unwrap(), &*g_emit_p.lock().unwrap());
        println!("{}", join_words(result.clone()));
    }
}
