// Generated by Mochi transpiler v0.10.65
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn key(mut state: String, mut obs: String) -> String {
    return format!("{}{}", format!("{}{}", state, "|"), obs).clone()
};
    fn viterbi(mut observations: Vec<String>, mut states: Vec<String>, mut start_p: HashMap<String, f64>, mut trans_p: HashMap<String, HashMap<String, f64>>, mut emit_p: HashMap<String, HashMap<String, f64>>) -> Vec<String> {
    if (((observations.len() as i64) == 0) || ((states.len() as i64) == 0)) {
        panic!("empty parameters");
    }
    let mut probs: HashMap<String, f64> = HashMap::new();
    let mut ptrs: HashMap<String, String> = HashMap::new();
    let first_obs: String = observations[0 as usize].clone().clone();
    let mut i: i64 = 0;
    while (i < (states.len() as i64)) {
        let state: String = states[i as usize].clone().clone();
        probs.insert(key(state.clone(), first_obs.clone()).clone(), (start_p.get(state.as_str()).cloned().unwrap_or_default() * emit_p.get(state.as_str()).cloned().unwrap_or_default()[first_obs.as_str()]));
        ptrs.insert(key(state.clone(), first_obs.clone()).clone(), String::from(""));
        i = (i + 1);
    }
    let mut t: i64 = 1;
    while (t < (observations.len() as i64)) {
        let obs: String = observations[t as usize].clone().clone();
        let mut j: i64 = 0;
        while (j < (states.len() as i64)) {
            let state: String = states[j as usize].clone().clone();
            let mut max_prob: f64 = -1.0;
            let mut prev_state: String = String::from("").clone();
            let mut k: i64 = 0;
            while (k < (states.len() as i64)) {
                let state0: String = states[k as usize].clone().clone();
                let obs0: String = observations[(t - 1) as usize].clone().clone();
                let prob_prev: f64 = probs.get(key(state0.clone(), obs0.clone()).as_str()).cloned().unwrap_or_default();
                let prob: f64 = ((prob_prev * trans_p.get(state0.as_str()).cloned().unwrap_or_default()[state.as_str()]) * emit_p.get(state.as_str()).cloned().unwrap_or_default()[obs.as_str()]);
                if (prob > max_prob) {
                    max_prob = prob;
                    prev_state = state0.clone();
                }
                k = (k + 1);
            }
            probs.insert(key(state.clone(), obs.clone()).clone(), max_prob);
            ptrs.insert(key(state.clone(), obs.clone()).clone(), prev_state);
            j = (j + 1);
        }
        t = (t + 1);
    }
    let mut path: Vec<String> = vec![];
    let mut n: i64 = 0;
    while (n < (observations.len() as i64)) {
        path = { let mut _v = path.clone(); _v.push("".to_string()); _v };
        n = (n + 1);
    }
    let last_obs: String = observations[((observations.len() as i64) - 1) as usize].clone().clone();
    let mut max_final: f64 = -1.0;
    let mut last_state: String = String::from("").clone();
    let mut m: i64 = 0;
    while (m < (states.len() as i64)) {
        let state: String = states[m as usize].clone().clone();
        let prob: f64 = probs.get(key(state.clone(), last_obs.clone()).as_str()).cloned().unwrap_or_default();
        if (prob > max_final) {
            max_final = prob;
            last_state = state.clone();
        }
        m = (m + 1);
    }
    let last_index: i64 = ((observations.len() as i64) - 1);
    path[last_index as usize] = last_state.clone();
    let mut idx: i64 = last_index;
    while (idx > 0) {
        let obs: String = observations[idx as usize].clone().clone();
        let prev: String = ptrs.get(key(path[idx as usize].clone(), obs.clone()).as_str()).cloned().unwrap_or_default().clone();
        path[(idx - 1) as usize] = prev.clone();
        idx = (idx - 1);
    }
    return path
};
    fn join_words(mut words: Vec<String>) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (words.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, " ");
        }
        res = format!("{}{}", res, words[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
    let mut observations: Vec<String> = vec![String::from("normal").clone(), String::from("cold").clone(), String::from("dizzy").clone()];
    let mut states: Vec<String> = vec![String::from("Healthy").clone(), String::from("Fever").clone()];
    let mut start_p: HashMap<String, f64> = HashMap::from([(String::from("Healthy"), 0.6), (String::from("Fever"), 0.4)]);
    let mut trans_p: HashMap<String, HashMap<String, f64>> = HashMap::from([(String::from("Healthy"), HashMap::from([(String::from("Healthy"), 0.7), (String::from("Fever"), 0.3)])), (String::from("Fever"), HashMap::from([(String::from("Healthy"), 0.4), (String::from("Fever"), 0.6)]))]);
    let mut emit_p: HashMap<String, HashMap<String, f64>> = HashMap::from([(String::from("Healthy"), HashMap::from([(String::from("normal"), 0.5), (String::from("cold"), 0.4), (String::from("dizzy"), 0.1)])), (String::from("Fever"), HashMap::from([(String::from("normal"), 0.1), (String::from("cold"), 0.3), (String::from("dizzy"), 0.6)]))]);
    let result: Vec<String> = viterbi(observations.clone(), states.clone(), start_p.clone(), trans_p.clone(), emit_p.clone());
    println!("{}", join_words(result.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
