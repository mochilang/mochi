// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_memo: Vec<i64> = Vec::new();
static mut g_results: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_memo = vec![1, 1];
        g_results = vec![];
                let _start: i64 = _now();
        unsafe fn factorial(mut num: i64) -> i64 {
    if (num < 0) {
        println!("{}", "Number should not be negative.");
        return 0
    }
    let mut m: Vec<i64> = g_memo.clone().clone();
    let mut i = (m.len() as i64);
    while (i <= num) {
        m = { let mut _v = m.clone(); _v.push((i * m[(i - 1) as usize])); _v };
        i = (i + 1);
    }
    g_memo = m.clone();
    return m[num as usize]
};
        println!("{}", factorial(7).to_string());
        factorial(-1);
        for i in 0..10 {
            g_results = { let mut _v = g_results.clone().clone(); _v.push(factorial(i)); _v };
        }
        println!("{}", format!("{:?}", g_results.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
