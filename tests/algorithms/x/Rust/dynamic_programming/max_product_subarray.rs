// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn max_product_subarray(mut numbers: Vec<i64>) -> i64 {
    if ((numbers.len() as i64) == 0) {
        return 0
    }
    let mut max_till_now: i64 = numbers[0 as usize];
    let mut min_till_now: i64 = numbers[0 as usize];
    let mut max_prod: i64 = numbers[0 as usize];
    let mut i: i64 = 1;
    while (i < (numbers.len() as i64)) {
        let mut number: i64 = numbers[i as usize];
        if (number < 0) {
            let mut temp: i64 = max_till_now;
            max_till_now = min_till_now;
            min_till_now = temp;
        }
        let mut prod_max: i64 = (max_till_now * number);
        if (number > prod_max) {
            max_till_now = number;
        } else {
            max_till_now = prod_max;
        }
        let mut prod_min: i64 = (min_till_now * number);
        if (number < prod_min) {
            min_till_now = number;
        } else {
            min_till_now = prod_min;
        }
        if (max_till_now > max_prod) {
            max_prod = max_till_now;
        }
        i = (i + 1);
    }
    return max_prod
};
    println!("{}", max_product_subarray(vec![2, 3, -2, 4]));
    println!("{}", max_product_subarray(vec![-2, 0, -1]));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
