// Generated by Mochi transpiler v0.10.64
#[derive(Debug, Clone, Default)]
struct KMeansResult {
    centroids: Vec<Vec<f64>>,
    assignments: Vec<i64>,
}
impl std::fmt::Display for KMeansResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"centroids\": {:?}", self.centroids)?;
        write!(f, ", ")?;
        write!(f, "\"assignments\": {:?}", self.assignments)?;
        write!(f, "}}")
    }
}

fn distance_sq(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut diff: f64 = (a[i as usize] - b[i as usize]);
        sum = (sum + (diff * diff));
        i = (i + 1);
    }
    return sum
}

fn mean(mut vectors: Vec<Vec<f64>>) -> Vec<f64> {
    let mut dim: i64 = (vectors[0 as usize].clone().len() as i64);
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < dim) {
        let mut total: f64 = 0.0;
        let mut j: i64 = 0;
        while (j < (vectors.len() as i64)) {
            total = (total + vectors[j as usize].clone()[i as usize]);
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push((total / ((vectors.len() as i64) as f64))); _v };
        i = (i + 1);
    }
    return res
}

fn k_means(mut vectors: Vec<Vec<f64>>, mut k: i64, mut iterations: i64) -> KMeansResult {
    let mut centroids: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < k) {
        centroids = { let mut _v = centroids.clone(); _v.push(vectors[i as usize].clone()); _v };
        i = (i + 1);
    }
    let mut assignments: Vec<i64> = vec![];
    let mut n: i64 = (vectors.len() as i64);
    i = 0;
    while (i < n) {
        assignments = { let mut _v = assignments.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut it: i64 = 0;
    while (it < iterations) {
        let mut v: i64 = 0;
        while (v < n) {
            let mut best: i64 = 0;
            let mut bestDist: f64 = distance_sq(vectors[v as usize].clone(), centroids[0 as usize].clone());
            let mut c: i64 = 1;
            while (c < k) {
                let mut d: f64 = distance_sq(vectors[v as usize].clone(), centroids[c as usize].clone());
                if (d < bestDist) {
                    bestDist = d;
                    best = c;
                }
                c = (c + 1);
            }
            assignments[v as usize] = best;
            v = (v + 1);
        }
        let mut cIdx: i64 = 0;
        while (cIdx < k) {
            let mut cluster: Vec<Vec<f64>> = vec![];
            let mut v2: i64 = 0;
            while (v2 < n) {
                if (assignments[v2 as usize] == cIdx) {
                    cluster = { let mut _v = cluster.clone(); _v.push(vectors[v2 as usize].clone()); _v };
                }
                v2 = (v2 + 1);
            }
            if ((cluster.len() as i64) > 0) {
                centroids[cIdx as usize] = mean(cluster.clone());
            }
            cIdx = (cIdx + 1);
        }
        it = (it + 1);
    }
    return KMeansResult {centroids: centroids.clone(), assignments: assignments.clone()}
}

fn mochi_main() {
    let vectors: Vec<Vec<f64>> = vec![vec![1.0, 2.0].clone(), vec![1.5, 1.8].clone(), vec![5.0, 8.0].clone(), vec![8.0, 8.0].clone(), vec![1.0, 0.6].clone(), vec![9.0, 11.0].clone()];
    let result: KMeansResult = k_means(vectors.clone(), 2, 5);
    println!("{}", format!("{:?}", result.centroids.clone()));
    println!("{}", format!("{:?}", result.assignments.clone()));
}

fn main() {
    mochi_main();
}
