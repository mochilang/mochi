// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn find_min(mut numbers: Vec<i64>) -> i64 {
    let mut n = (numbers.len() as i64);
    let mut s: i64 = 0;
    let mut idx: i64 = 0;
    while (idx < n) {
        s = (s + numbers[idx as usize]);
        idx = (idx + 1);
    }
    let mut dp: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        let mut row: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j <= s) {
            row = { let mut _v = row.clone(); _v.push(false); _v };
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i <= n) {
        dp[i as usize][0 as usize] = true;
        i = (i + 1);
    }
    let mut j: i64 = 1;
    while (j <= s) {
        dp[0 as usize][j as usize] = false;
        j = (j + 1);
    }
    i = 1;
    while (i <= n) {
        j = 1;
        while (j <= s) {
            dp[i as usize][j as usize] = dp[(i - 1) as usize].clone()[j as usize];
            if (numbers[(i - 1) as usize] <= j) {
                if dp[(i - 1) as usize].clone()[(j - numbers[(i - 1) as usize]) as usize] {
                    dp[i as usize][j as usize] = true;
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut diff: i64 = 0;
    j = (s / 2);
    while (j >= 0) {
        if dp[n as usize].clone()[j as usize] {
            diff = (s - (2 * j));
            break
        }
        j = (j - 1);
    }
    return diff
};
    println!("{}", find_min(vec![1, 2, 3, 4, 5]).to_string());
    println!("{}", find_min(vec![5, 5, 5, 5, 5]).to_string());
    println!("{}", find_min(vec![5, 5, 5, 5]).to_string());
    println!("{}", find_min(vec![3]).to_string());
    println!("{}", find_min(vec![]).to_string());
    println!("{}", find_min(vec![1, 2, 3, 4]).to_string());
    println!("{}", find_min(vec![0, 0, 0, 0]).to_string());
    println!("{}", find_min(vec![-1, -5, 5, 1]).to_string());
    println!("{}", find_min(vec![9, 9, 9, 9, 9]).to_string());
    println!("{}", find_min(vec![1, 5, 10, 3]).to_string());
    println!("{}", find_min(vec![-1, 0, 1]).to_string());
    println!("{}", find_min(vec![10, 9, 8, 7, 6, 5, 4, 3, 2, 1]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
