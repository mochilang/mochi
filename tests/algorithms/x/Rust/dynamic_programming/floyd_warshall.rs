// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Graph {
    n: i64,
    dp: Vec<Vec<i64>>,
}
impl std::fmt::Display for Graph {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"n\": {}", self.n)?;
        write!(f, ", ")?;
        write!(f, "\"dp\": {:?}", self.dp)?;
        write!(f, "}}")
    }
}

static mut g_INF: i64 = 0;
fn main() {
    unsafe {
        g_INF = 1000000000;
                let _start: i64 = _now();
        unsafe fn new_graph(mut n: i64) -> Graph {
    let mut dp: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(g_INF); _v };
            }
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Graph {n: n, dp: dp}
};
        unsafe fn add_edge(g: &mut Graph, mut u: i64, mut v: i64, mut w: i64) {
    let mut dp: Vec<Vec<i64>> = g.dp.clone();
    let mut row: Vec<i64> = dp[u as usize].clone();
    row[v as usize] = w;
    dp[u as usize] = row.clone();
    (*g).dp = dp.clone();
};
        unsafe fn floyd_warshall(g: &mut Graph) {
    let mut dp: Vec<Vec<i64>> = g.dp.clone();
    let mut k: i64 = 0;
    while (k < g.n) {
        let mut i: i64 = 0;
        while (i < g.n) {
            let mut j: i64 = 0;
            while (j < g.n) {
                let mut alt: i64 = (dp[i as usize].clone()[k as usize] + dp[k as usize].clone()[j as usize]);
                let mut row: Vec<i64> = dp[i as usize].clone();
                if (alt < row[j as usize]) {
                    row[j as usize] = alt;
                    dp[i as usize] = row.clone();
                }
                j = (j + 1);
            }
            i = (i + 1);
        }
        k = (k + 1);
    }
    (*g).dp = dp.clone();
};
        unsafe fn show_min(g: &Graph, mut u: i64, mut v: i64) -> i64 {
    return g.dp.clone()[u as usize].clone()[v as usize]
};
        let mut graph: Graph = new_graph(5);
        add_edge(&mut graph, 0, 2, 9);
        add_edge(&mut graph, 0, 4, 10);
        add_edge(&mut graph, 1, 3, 5);
        add_edge(&mut graph, 2, 3, 7);
        add_edge(&mut graph, 3, 0, 10);
        add_edge(&mut graph, 3, 1, 2);
        add_edge(&mut graph, 3, 2, 1);
        add_edge(&mut graph, 3, 4, 6);
        add_edge(&mut graph, 4, 1, 3);
        add_edge(&mut graph, 4, 2, 4);
        add_edge(&mut graph, 4, 3, 9);
        floyd_warshall(&mut graph);
        println!("{}", show_min(&graph, 1, 4).to_string());
        println!("{}", show_min(&graph, 0, 3).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
