// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn longest_subsequence(mut xs: Vec<i64>) -> Vec<i64> {
    let mut n = (xs.len() as i64);
    if (n <= 1) {
        return xs
    }
    let mut pivot: i64 = xs[0 as usize];
    let mut is_found: bool = false;
    let mut i: i64 = 1;
    let mut longest_subseq: Vec<i64> = vec![];
    while (!is_found && (i < n)) {
        if (xs[i as usize] < pivot) {
            is_found = true;
            let mut temp_array: Vec<i64> = xs[i as usize..n as usize].to_vec();
            temp_array = longest_subsequence(temp_array.clone());
            if ((temp_array.len() as i64) > (longest_subseq.len() as i64)) {
                longest_subseq = temp_array.clone();
            }
        } else {
            i = (i + 1);
        }
    }
    let mut filtered: Vec<i64> = vec![];
    let mut j: i64 = 1;
    while (j < n) {
        if (xs[j as usize] >= pivot) {
            filtered = { let mut _v = filtered.clone(); _v.push(xs[j as usize]); _v };
        }
        j = (j + 1);
    }
    let mut candidate: Vec<i64> = vec![];
    candidate = { let mut _v = candidate.clone(); _v.push(pivot); _v };
    candidate = vec![candidate, longest_subsequence(filtered.clone())].concat();
    if ((candidate.len() as i64) > (longest_subseq.len() as i64)) {
        return candidate
    } else {
        return longest_subseq
    }
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
