// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_list(mut len: i64, mut value: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < len) {
        arr = { let mut _v = arr.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return arr
};
    fn count_recursive(array: &mut Vec<i64>, mut target: i64) -> i64 {
    if (target < 0) {
        return 0
    }
    if (target == 0) {
        return 1
    }
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (array.len() as i64)) {
        total = (total + count_recursive(array, (target - array.clone()[i as usize])));
        i = (i + 1);
    }
    return total
};
    fn combination_sum_iv(array: &mut Vec<i64>, mut target: i64) -> i64 {
    return count_recursive(array, target)
};
    fn count_dp(array: &mut Vec<i64>, mut target: i64, dp: &mut Vec<i64>) -> i64 {
    if (target < 0) {
        return 0
    }
    if (target == 0) {
        return 1
    }
    if (dp[target as usize] > (0 - 1)) {
        return dp[target as usize]
    }
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (array.len() as i64)) {
        total = (total + count_dp(array, (target - array.clone()[i as usize]), dp));
        i = (i + 1);
    }
    (*dp)[target as usize] = total;
    return total
};
    fn combination_sum_iv_dp_array(array: &mut Vec<i64>, mut target: i64) -> i64 {
    let mut dp: Vec<i64> = make_list((target + 1), -1);
    return count_dp(array, target, &mut dp)
};
    fn combination_sum_iv_bottom_up(mut n: i64, mut array: Vec<i64>, mut target: i64) -> i64 {
    let mut dp: Vec<i64> = make_list((target + 1), 0);
    dp[0 as usize] = 1;
    let mut i: i64 = 1;
    while (i <= target) {
        let mut j: i64 = 0;
        while (j < n) {
            if ((i - array[j as usize]) >= 0) {
                dp[i as usize] = (dp[i as usize] + dp[(i - array[j as usize]) as usize]);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return dp[target as usize]
};
    println!("{}", combination_sum_iv(&mut vec![1, 2, 5], 5).to_string());
    println!("{}", combination_sum_iv_dp_array(&mut vec![1, 2, 5], 5).to_string());
    println!("{}", combination_sum_iv_bottom_up(3, vec![1, 2, 5], 5).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
