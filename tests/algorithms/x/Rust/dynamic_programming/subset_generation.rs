// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn copy_list(mut src: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (src.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(src[i as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn subset_combinations(mut elements: Vec<i64>, mut n: i64) -> Vec<Vec<i64>> {
    let mut r = (elements.len() as i64);
    if (n > r) {
        return vec![]
    }
    let mut dp: Vec<Vec<Vec<i64>>> = vec![];
    let mut i: i64 = 0;
    while (i <= r) {
        dp = { let mut _v = dp.clone(); _v.push(vec![]); _v };
        i = (i + 1);
    }
    dp[0 as usize] = { let mut _v = dp[0 as usize].clone().clone(); _v.push(vec![]); _v };
    i = 1;
    while (i <= r) {
        let mut j: i64 = i;
        while (j > 0) {
            let mut prevs: Vec<Vec<i64>> = dp[(j - 1) as usize].clone();
            let mut k: i64 = 0;
            while (k < (prevs.len() as i64)) {
                let mut prev: Vec<i64> = prevs[k as usize].clone();
                let mut comb: Vec<i64> = copy_list(prev.clone());
                comb = { let mut _v = comb.clone(); _v.push(elements[(i - 1) as usize]); _v };
                dp[j as usize] = { let mut _v = dp[j as usize].clone().clone(); _v.push(comb.clone()); _v };
                k = (k + 1);
            }
            j = (j - 1);
        }
        i = (i + 1);
    }
    return dp[n as usize].clone()
};
    println!("{}", format!("{:?}", subset_combinations(vec![10, 20, 30, 40], 2)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
