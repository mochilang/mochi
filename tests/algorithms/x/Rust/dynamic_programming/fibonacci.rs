// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Fibonacci {
    sequence: Vec<i64>,
}
impl std::fmt::Display for Fibonacci {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"sequence\": {:?}", self.sequence)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct FibGetResult {
    fib: Fibonacci,
    values: Vec<i64>,
}
impl std::fmt::Display for FibGetResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"fib\": {}", self.fib)?;
        write!(f, ", ")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn create_fibonacci() -> Fibonacci {
    return Fibonacci {sequence: vec![0, 1]}
};
    fn fib_get(f: &mut Fibonacci, mut index: i64) -> FibGetResult {
    let mut seq: Vec<i64> = f.sequence.clone();
    while ((seq.len() as i64) < index) {
        let mut next: i64 = (seq[((seq.len() as i64) - 1) as usize] + seq[((seq.len() as i64) - 2) as usize]);
        seq = { let mut _v = seq.clone(); _v.push(next); _v };
    }
    (*f).sequence = seq.clone();
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < index) {
        result = { let mut _v = result.clone(); _v.push(seq[i as usize]); _v };
        i = (i + 1);
    }
    return FibGetResult {fib: f.clone(), values: result}
};
    fn mochi_main() {
    let mut fib: Fibonacci = create_fibonacci();
    let mut res: FibGetResult = fib_get(&mut fib, 10);
    fib = res.fib.clone();
    println!("{}", format!("{:?}", res.values.clone()));
    res = fib_get(&mut fib, 5);
    fib = res.fib.clone();
    println!("{}", format!("{:?}", res.values.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
