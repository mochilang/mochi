// Generated by Mochi transpiler v0.10.64
#[derive(Debug, Clone, Default)]
struct Fibonacci {
    sequence: Vec<i64>,
}
impl std::fmt::Display for Fibonacci {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"sequence\": {:?}", self.sequence)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct FibGetResult {
    fib: Fibonacci,
    values: Vec<i64>,
}
impl std::fmt::Display for FibGetResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"fib\": {}", self.fib)?;
        write!(f, ", ")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, "}}")
    }
}

fn create_fibonacci() -> Fibonacci {
    return Fibonacci {sequence: vec![0, 1]}
}

fn fib_get(f: &mut Fibonacci, mut index: i64) -> FibGetResult {
    let mut seq: Vec<i64> = f.sequence.clone();
    while ((seq.len() as i64) < index) {
        let next: i64 = (seq[((seq.len() as i64) - 1) as usize] + seq[((seq.len() as i64) - 2) as usize]);
        seq = { let mut _v = seq.clone(); _v.push(next); _v };
    }
    (*f).sequence = seq.clone();
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < index) {
        result = { let mut _v = result.clone(); _v.push(seq[i as usize]); _v };
        i = (i + 1);
    }
    return FibGetResult {fib: f.clone(), values: result.clone()}
}

fn mochi_main() {
    let mut fib: Fibonacci = create_fibonacci();
    let mut res: FibGetResult = fib_get(&mut fib, 10);
    fib = res.fib.clone();
    println!("{}", format!("{:?}", res.values.clone()));
    res = fib_get(&mut fib, 5);
    fib = res.fib.clone();
    println!("{}", format!("{:?}", res.values.clone()));
}

fn main() {
    mochi_main();
}
