// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LcsResult {
    length: i64,
    sequence: String,
}
impl std::fmt::Display for LcsResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"length\": {}", self.length)?;
        write!(f, ", ")?;
        write!(f, "\"sequence\": \"{}\"", self.sequence)?;
        write!(f, "}}")
    }
}

static mut g_a: String = String::new();
static mut g_b: String = String::new();
fn main() {
    unsafe {
        g_a = String::from("AGGTAB").clone();
        g_b = String::from("GXTXAYB").clone();
                let _start: i64 = _now();
        unsafe fn zeros_matrix(mut rows: i64, mut cols: i64) -> Vec<Vec<i64>> {
    let mut matrix: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i <= rows) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j <= cols) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        matrix = { let mut _v = matrix.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return matrix
};
        unsafe fn longest_common_subsequence(x: &str, y: &str) -> LcsResult {
    let mut m = (x.len() as i64);
    let mut n = (y.len() as i64);
    let mut dp: Vec<Vec<i64>> = zeros_matrix(m, n);
    let mut i: i64 = 1;
    while (i <= m) {
        let mut j: i64 = 1;
        while (j <= n) {
            if (x.chars().nth((i - 1) as usize).unwrap().to_string().as_str() == y.chars().nth((j - 1) as usize).unwrap().to_string().as_str()) {
                dp[i as usize][j as usize] = (dp[(i - 1) as usize].clone()[(j - 1) as usize] + 1);
            } else {
                if (dp[(i - 1) as usize].clone()[j as usize] > dp[i as usize].clone()[(j - 1) as usize]) {
                    dp[i as usize][j as usize] = dp[(i - 1) as usize].clone()[j as usize];
                } else {
                    dp[i as usize][j as usize] = dp[i as usize].clone()[(j - 1) as usize];
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut seq: String = String::from("").clone();
    let mut i2: i64 = m;
    let mut j2: i64 = n;
    while ((i2 > 0) && (j2 > 0)) {
        if (x.chars().nth((i2 - 1) as usize).unwrap().to_string().as_str() == y.chars().nth((j2 - 1) as usize).unwrap().to_string().as_str()) {
            seq = format!("{}{}", x.chars().nth((i2 - 1) as usize).unwrap().to_string(), seq);
            i2 = (i2 - 1);
            j2 = (j2 - 1);
        } else if (dp[(i2 - 1) as usize].clone()[j2 as usize] >= dp[i2 as usize].clone()[(j2 - 1) as usize]) {
            i2 = (i2 - 1);
        } else {
            j2 = (j2 - 1);
        }
    }
    return LcsResult {length: dp[m as usize].clone()[n as usize], sequence: seq.clone()}
};
        let mut res: LcsResult = longest_common_subsequence(&g_a, &g_b);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len = ", res.length.to_string()), ", sub-sequence = "), res.sequence.clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
