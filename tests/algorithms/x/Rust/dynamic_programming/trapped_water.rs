// Generated by Mochi transpiler v0.10.62
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_list(mut len: i64, mut value: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < len) {
        arr = { let mut _v = arr.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return arr
};
    fn trapped_rainwater(mut heights: Vec<i64>) -> i64 {
    if ((heights.len() as i64) == 0) {
        return 0
    }
    let mut i: i64 = 0;
    while (i < (heights.len() as i64)) {
        if (heights[i as usize] < 0) {
            panic!("No height can be negative");
        }
        i = (i + 1);
    }
    let mut length: i64 = (heights.len() as i64);
    let mut left_max: Vec<i64> = make_list(length, 0);
    left_max[0 as usize] = heights[0 as usize];
    i = 1;
    while (i < length) {
        if (heights[i as usize] > left_max[(i - 1) as usize]) {
            left_max[i as usize] = heights[i as usize];
        } else {
            left_max[i as usize] = left_max[(i - 1) as usize];
        }
        i = (i + 1);
    }
    let mut right_max: Vec<i64> = make_list(length, 0);
    let mut last: i64 = (length - 1);
    right_max[last as usize] = heights[last as usize];
    i = (last - 1);
    while (i >= 0) {
        if (heights[i as usize] > right_max[(i + 1) as usize]) {
            right_max[i as usize] = heights[i as usize];
        } else {
            right_max[i as usize] = right_max[(i + 1) as usize];
        }
        i = (i - 1);
    }
    let mut total: i64 = 0;
    i = 0;
    while (i < length) {
        let mut left: i64 = left_max[i as usize];
        let mut right: i64 = right_max[i as usize];
        let mut smaller: i64 = if (left < right) { left } else { right };
        total = (total + (smaller - heights[i as usize]));
        i = (i + 1);
    }
    return total
};
    println!("{}", trapped_rainwater(vec![0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]).to_string());
    println!("{}", trapped_rainwater(vec![7, 1, 5, 3, 6, 4]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
