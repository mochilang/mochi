// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct FibPair {
    r#fn: i64,
    fn1: i64,
}
impl std::fmt::Display for FibPair {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"fn\": {}", self.r#fn)?;
        write!(f, ", ")?;
        write!(f, "\"fn1\": {}", self.fn1)?;
        write!(f, "}}")
    }
}

static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_i = 0;
                let _start: i64 = _now();
        unsafe fn _fib(mut n: i64) -> FibPair {
    if (n == 0) {
        return FibPair {r#fn: 0, fn1: 1}
    }
    let mut half: FibPair = _fib((n / 2));
    let mut a: i64 = half.r#fn;
    let mut b: i64 = half.fn1;
    let mut c: i64 = (a * ((b * 2) - a));
    let mut d: i64 = ((a * a) + (b * b));
    if ((n % 2) == 0) {
        return FibPair {r#fn: c, fn1: d}
    }
    return FibPair {r#fn: d, fn1: (c + d)}
};
        unsafe fn fibonacci(mut n: i64) -> i64 {
    if (n < 0) {
        panic!("Negative arguments are not supported");
    }
    let mut res: FibPair = _fib(n);
    return res.r#fn
};
        while (g_i < 13) {
            println!("{}", fibonacci(g_i).to_string());
            g_i = (g_i + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
