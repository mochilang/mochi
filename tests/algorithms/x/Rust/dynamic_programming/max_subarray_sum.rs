// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_empty: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_empty = vec![];
                let _start: i64 = _now();
        unsafe fn max_subarray_sum(mut nums: Vec<f64>, mut allow_empty: bool) -> f64 {
    if ((nums.len() as i64) == 0) {
        return 0.0
    }
    let mut max_sum: f64 = 0.0;
    let mut curr_sum: f64 = 0.0;
    if allow_empty {
        max_sum = 0.0;
        curr_sum = 0.0;
        let mut i: i64 = 0;
        while (i < (nums.len() as i64)) {
            let mut num: f64 = nums[i as usize];
            let mut temp: f64 = (curr_sum + num);
            curr_sum = if (temp > 0.0) { temp } else { 0.0 };
            if (curr_sum > max_sum) {
                max_sum = curr_sum;
            }
            i = (i + 1);
        }
    } else {
        max_sum = nums[0 as usize];
        curr_sum = nums[0 as usize];
        let mut i: i64 = 1;
        while (i < (nums.len() as i64)) {
            let mut num: f64 = nums[i as usize];
            let mut temp: f64 = (curr_sum + num);
            curr_sum = if (temp > num) { temp } else { num };
            if (curr_sum > max_sum) {
                max_sum = curr_sum;
            }
            i = (i + 1);
        }
    }
    return max_sum
};
        println!("{}", max_subarray_sum(vec![2.0, 8.0, 9.0], false).to_string());
        println!("{}", max_subarray_sum(vec![0.0, 0.0], false).to_string());
        println!("{}", max_subarray_sum(vec![-1.0, 0.0, 1.0], false).to_string());
        println!("{}", max_subarray_sum(vec![1.0, 2.0, 3.0, 4.0, -2.0], false).to_string());
        println!("{}", max_subarray_sum(vec![-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0], false).to_string());
        println!("{}", max_subarray_sum(vec![2.0, 3.0, -9.0, 8.0, -2.0], false).to_string());
        println!("{}", max_subarray_sum(vec![-2.0, -3.0, -1.0, -4.0, -6.0], false).to_string());
        println!("{}", max_subarray_sum(vec![-2.0, -3.0, -1.0, -4.0, -6.0], true).to_string());
        println!("{}", max_subarray_sum(g_empty.clone().clone(), false).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
