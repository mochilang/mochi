// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bitwise_and(mut a: i64, mut b: i64) -> i64 {
    let mut result: i64 = 0;
    let mut bit: i64 = 1;
    let mut x: i64 = a;
    let mut y: i64 = b;
    while ((x > 0) || (y > 0)) {
        let mut abit: i64 = (x % 2);
        let mut bbit: i64 = (y % 2);
        if ((abit == 1) && (bbit == 1)) {
            result = (result + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
    }
    return result
};
    fn list_of_submasks(mut mask: i64) -> Vec<i64> {
    if (mask <= 0) {
        panic!("{}", format!("{}{}", "mask needs to be positive integer, your input ", mask.to_string()));
    }
    let mut all_submasks: Vec<i64> = vec![];
    let mut submask: i64 = mask;
    while (submask != 0) {
        all_submasks = { let mut _v = all_submasks.clone(); _v.push(submask); _v };
        submask = bitwise_and((submask - 1), mask);
    }
    return all_submasks
};
    println!("{}", format!("{:?}", list_of_submasks(15)));
    println!("{}", format!("{:?}", list_of_submasks(13)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
