// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_INF: i64 = 0;
fn main() {
    unsafe {
        g_INF = 1000000000;
                let _start: i64 = _now();
        unsafe fn matrix_chain_multiply(mut arr: Vec<i64>) -> i64 {
    if ((arr.len() as i64) < 2) {
        return 0
    }
    let mut n = (arr.len() as i64);
    let mut dp: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(g_INF); _v };
            j = (j + 1);
        }
        dp = { let mut _v = dp.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = (n - 1);
    while (i > 0) {
        let mut j: i64 = i;
        while (j < n) {
            if (i == j) {
                dp[i as usize][j as usize] = 0;
            } else {
                let mut k: i64 = i;
                while (k < j) {
                    let mut cost: i64 = ((dp[i as usize].clone()[k as usize] + dp[(k + 1) as usize].clone()[j as usize]) + ((arr[(i - 1) as usize] * arr[k as usize]) * arr[j as usize]));
                    if (cost < dp[i as usize].clone()[j as usize]) {
                        dp[i as usize][j as usize] = cost;
                    }
                    k = (k + 1);
                }
            }
            j = (j + 1);
        }
        i = (i - 1);
    }
    return dp[1 as usize].clone()[(n - 1) as usize]
};
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
