// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_bool_list(mut n: i64) -> Vec<bool> {
    let mut row: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        row = { let mut _v = row.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    return row
};
    fn make_bool_matrix(mut rows: i64, mut cols: i64) -> Vec<Vec<bool>> {
    let mut matrix: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        matrix = { let mut _v = matrix.clone(); _v.push(make_bool_list(cols)); _v };
        i = (i + 1);
    }
    return matrix
};
    fn is_match(mut s: String, mut p: String) -> bool {
    let n: i64 = (s.len() as i64);
    let m: i64 = (p.len() as i64);
    let mut dp: Vec<Vec<bool>> = make_bool_matrix((n + 1), (m + 1));
    dp[0 as usize][0 as usize] = true;
    let mut j: i64 = 1;
    while (j <= m) {
        if (p.chars().skip((j - 1) as usize).take((j - (j - 1)) as usize).collect::<String>().as_str() == "*") {
            dp[0 as usize][j as usize] = dp[0 as usize].clone()[(j - 1) as usize];
        }
        j = (j + 1);
    }
    let mut i: i64 = 1;
    while (i <= n) {
        let mut j2: i64 = 1;
        while (j2 <= m) {
            let pc: String = p.chars().skip((j2 - 1) as usize).take((j2 - (j2 - 1)) as usize).collect::<String>().clone();
            let sc: String = s.chars().skip((i - 1) as usize).take((i - (i - 1)) as usize).collect::<String>().clone();
            if ((pc.as_str() == sc.as_str()) || (pc.as_str() == "?")) {
                dp[i as usize][j2 as usize] = dp[(i - 1) as usize].clone()[(j2 - 1) as usize];
            } else if (pc.as_str() == "*") {
                if (dp[(i - 1) as usize].clone()[j2 as usize] || dp[i as usize].clone()[(j2 - 1) as usize]) {
                    dp[i as usize][j2 as usize] = true;
                }
            }
            j2 = (j2 + 1);
        }
        i = (i + 1);
    }
    return dp[n as usize].clone()[m as usize]
};
    fn print_bool(mut b: bool) {
    if b {
        println!("{}", if true { 1 } else { 0 });
    } else {
        println!("{}", if false { 1 } else { 0 });
    }
};
    print_bool(is_match(String::from("abc"), String::from("a*c")));
    print_bool(is_match(String::from("abc"), String::from("a*d")));
    print_bool(is_match(String::from("baaabab"), String::from("*****ba*****ab")));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
