// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_days: Vec<String> = Vec::new();
static mut g_zodiac_names: Vec<String> = Vec::new();
static mut g_day_messages: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_days = vec![String::from("yesterday").clone().clone(), String::from("today").clone().clone(), String::from("tomorrow").clone().clone()];
        g_zodiac_names = vec![String::from("Aries").clone().clone(), String::from("Taurus").clone().clone(), String::from("Gemini").clone().clone(), String::from("Cancer").clone().clone(), String::from("Leo").clone().clone(), String::from("Virgo").clone().clone(), String::from("Libra").clone().clone(), String::from("Scorpio").clone().clone(), String::from("Sagittarius").clone().clone(), String::from("Capricorn").clone().clone(), String::from("Aquarius").clone().clone(), String::from("Pisces").clone().clone()];
        g_day_messages = vec![String::from("Reflect on what has passed and learn from it.").clone().clone(), String::from("Focus on the present and take decisive action.").clone().clone(), String::from("Prepare for future opportunities with optimism.").clone().clone()];
                let _start: i64 = _now();
        unsafe fn horoscope(mut zodiac_sign: i64, day: &str) -> String {
    let mut day_index: i64 = (0 - 1);
    let mut i: i64 = 0;
    while (i < (g_days.len() as i64)) {
        if (day == g_days[i as usize].clone()) {
            day_index = i;
            break
        }
        i = (i + 1);
    }
    let mut sign_index: i64 = (zodiac_sign - 1);
    if (day_index == (0 - 1)) {
        return String::from("Invalid zodiac sign or day")
    }
    if ((sign_index < 0) || (sign_index >= (g_zodiac_names.len() as i64))) {
        return String::from("Invalid zodiac sign or day")
    }
    return format!("{}{}", format!("{}{}", g_zodiac_names[sign_index as usize].clone(), ": "), g_day_messages[day_index as usize].clone()).clone()
};
        unsafe fn mochi_main() {
    let mut result: String = horoscope(1, &"today").clone();
    println!("{}", result);
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
