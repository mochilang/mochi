// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn index_of_from(s: &str, sub: &str, mut start: i64) -> i64 {
    let mut i: i64 = start;
    let mut max: i64 = ((s.len() as i64) - (sub.len() as i64));
    while (i <= max) {
        if (s.chars().skip(i as usize).take(((i + (sub.len() as i64)) - i) as usize).collect::<String>() == sub) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn extract_links(html: &str) -> Vec<HashMap<String, String>> {
    let mut res: Vec<HashMap<String, String>> = vec![];
    let mut i: i64 = 0;
    loop {
        let mut tag_start: i64 = index_of_from(html, &"<a class=\"eZt8xd\"", i);
        if (tag_start == -1) {
            break
        }
        let mut href_start: i64 = index_of_from(html, &"href=\"", tag_start);
        if (href_start == -1) {
            break
        }
        href_start = (href_start + ("href=\"".len() as i64));
        let mut href_end: i64 = index_of_from(html, &"\"", href_start);
        if (href_end == -1) {
            break
        }
        let mut href: String = html.chars().skip(href_start as usize).take((href_end - href_start) as usize).collect::<String>().clone();
        let mut text_start: i64 = (index_of_from(html, &">", href_end) + 1);
        let mut text_end: i64 = index_of_from(html, &"</a>", text_start);
        if (text_end == -1) {
            break
        }
        let mut text: String = html.chars().skip(text_start as usize).take((text_end - text_start) as usize).collect::<String>().clone();
        let mut link: HashMap<String, String> = HashMap::from([(String::from("href"), String::from(href.clone())), (String::from("text"), String::from(text.clone()))]);
        res = { let mut _v = res.clone(); _v.push(link.clone()); _v };
        i = (text_end + ("</a>".len() as i64));
    }
    return res
};
    fn mochi_main() {
    let mut html: String = format!("{}{}", format!("{}{}", "<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>", "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>"), "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>").clone();
    let mut links: Vec<HashMap<String, String>> = extract_links(&html);
    println!("{}", (links.len() as i64).to_string());
    let mut i: i64 = 0;
    while ((i < (links.len() as i64)) && (i < 5)) {
        let mut link: HashMap<String, String> = links[i as usize].clone();
        let mut href: String = link.get("href").cloned().unwrap_or_default().clone();
        let mut text: String = link.get("text").cloned().unwrap_or_default().clone();
        if (text.as_str() == "Maps") {
            println!("{}", href);
        } else {
            println!("{}", format!("{}{}", "https://google.com", href));
        }
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
