// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn find(text: &str, pattern: &str, mut start: i64) -> i64 {
    let mut i: i64 = start;
    let mut limit = ((text.len() as i64) - (pattern.len() as i64));
    while (i <= limit) {
        if ({ let tmp = &text; tmp.chars().skip(i as usize).take(((i + (pattern.len() as i64)) - i) as usize).collect::<String>() } == pattern) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn stock_price(symbol: &str) -> String {
    let mut pages: HashMap<String, String> = HashMap::from([(String::from("AAPL"), String::from("<span data-testid=\"qsp-price\">228.43</span>")), (String::from("AMZN"), String::from("<span data-testid=\"qsp-price\">201.85</span>")), (String::from("IBM"), String::from("<span data-testid=\"qsp-price\">210.30</span>")), (String::from("GOOG"), String::from("<span data-testid=\"qsp-price\">177.86</span>")), (String::from("MSFT"), String::from("<span data-testid=\"qsp-price\">414.82</span>")), (String::from("ORCL"), String::from("<span data-testid=\"qsp-price\">188.87</span>"))]);
    if pages.contains_key(symbol) {
        let mut html: String = pages.get(symbol).cloned().unwrap_or_default().clone();
        let mut marker: String = String::from("<span data-testid=\"qsp-price\">").clone();
        let mut start_idx: i64 = find(&html, &marker, 0);
        if (start_idx != -1) {
            let mut price_start: i64 = (start_idx + (marker.len() as i64));
            let mut end_idx: i64 = find(&html, &"</span>", price_start);
            if (end_idx != -1) {
                return { let tmp = &html; tmp.chars().skip(price_start as usize).take((end_idx - price_start) as usize).collect::<String>() }
            }
        }
    }
    return String::from("No <fin-streamer> tag with the specified data-testid attribute found.").clone()
};
    for symbol in vec![String::from("AAPL").clone(), String::from("AMZN").clone(), String::from("IBM").clone(), String::from("GOOG").clone(), String::from("MSFT").clone(), String::from("ORCL").clone()].iter().cloned() {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Current ", symbol), " stock price is "), stock_price(&symbol)));
    }
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
