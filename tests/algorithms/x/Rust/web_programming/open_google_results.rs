// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_query_words: Vec<String> = Vec::new();
static mut g_query: String = String::new();
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_query_words = vec![String::from("mochi").clone().clone(), String::from("language").clone().clone()];
        g_query = String::from("").clone();
        g_i = 0;
                let _start: i64 = _now();
        unsafe fn index_of_substr(s: &str, pat: &str) -> i64 {
    if ((pat.len() as i64) == 0) {
        return 0
    }
    let mut i: i64 = 0;
    while (i <= ((s.len() as i64) - (pat.len() as i64))) {
        let mut j: i64 = 0;
        while (j < (pat.len() as i64)) {
            if (s.chars().nth((i + j) as usize).unwrap().to_string().as_str() != pat.chars().nth(j as usize).unwrap().to_string().as_str()) {
                break
            }
            j = (j + 1);
        }
        if (j == (pat.len() as i64)) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn first_link(html: &str) -> String {
    let mut a_idx: i64 = index_of_substr(html, &"<a");
    if (a_idx < 0) {
        return String::from("")
    }
    let mut href_pat: String = String::from("href=\"").clone();
    let mut href_idx_rel: i64 = index_of_substr(&html.chars().skip(a_idx as usize).take(usize::MAX as usize).collect::<String>(), &href_pat);
    if (href_idx_rel < 0) {
        return String::from("")
    }
    let mut start: i64 = ((a_idx + href_idx_rel) + (href_pat.len() as i64));
    let mut end: i64 = start;
    while (end < (html.len() as i64)) {
        if (html.chars().nth(end as usize).unwrap().to_string().as_str() == "\"") {
            break
        }
        end = (end + 1);
    }
    return html.chars().skip(start as usize).take((end - start) as usize).collect::<String>().clone()
};
        while (g_i < (g_query_words.len() as i64)) {
            if (g_i > 0) {
                g_query = format!("{}{}", g_query, "%20");
            }
            g_query = format!("{}{}", g_query, g_query_words[g_i as usize].clone());
            g_i = (g_i + 1);
        }
        let mut url: String = format!("{}{}", format!("{}{}", "https://www.google.com/search?q=", g_query), "&num=100").clone();
        println!("{}", "Googling.....");
        let mut sample_html: String = format!("{}{}", "<div><a href=\"https://example.com\">Example</a></div>", "<div><a href=\"https://another.com\">Another</a></div>").clone();
        let mut link: String = first_link(&sample_html).clone();
        if ((link.len() as i64) > 0) {
            println!("{}", link);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
