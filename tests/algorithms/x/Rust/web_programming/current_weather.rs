// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    OpenWeatherMap: HashMap<String, String>,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"OpenWeatherMap\": {:?}", self.OpenWeatherMap)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Map1 {
    Weatherstack: HashMap<String, String>,
}
impl std::fmt::Display for Map1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"Weatherstack\": {:?}", self.Weatherstack)?;
        write!(f, "}}")
    }
}

static mut g_OPENWEATHERMAP_API_KEY: String = String::new();
static mut g_WEATHERSTACK_API_KEY: String = String::new();
static mut g_OPENWEATHERMAP_URL_BASE: String = String::new();
static mut g_WEATHERSTACK_URL_BASE: String = String::new();
fn main() {
    unsafe {
        g_OPENWEATHERMAP_API_KEY = String::from("demo").clone();
        g_WEATHERSTACK_API_KEY = String::from("").clone();
        g_OPENWEATHERMAP_URL_BASE = String::from("https://api.openweathermap.org/data/2.5/weather").clone();
        g_WEATHERSTACK_URL_BASE = String::from("http://api.weatherstack.com/current").clone();
                let _start: i64 = _now();
        unsafe fn http_get(url: &str, params: &HashMap<String, String>) -> HashMap<String, String> {
    if params.contains_key(&"q") {
        return HashMap::from([(String::from("location"), String::from(params.get("q").cloned().unwrap_or_default())), (String::from("temperature"), String::from("20"))])
    }
    return HashMap::from([(String::from("location"), String::from(params.get("query").cloned().unwrap_or_default())), (String::from("temperature"), String::from("20"))])
};
        unsafe fn current_weather(location: &str) -> Vec<HashMap<String, HashMap<String, String>>> {
    let mut weather_data: Vec<HashMap<String, HashMap<String, String>>> = vec![];
    if (g_OPENWEATHERMAP_API_KEY.as_str() != "") {
        let mut params_openweathermap: HashMap<String, String> = HashMap::from([(String::from("q"), format!("{}", location)), (String::from("appid"), String::from(g_OPENWEATHERMAP_API_KEY.clone()))]);
        let mut response_openweathermap: HashMap<String, String> = http_get(&g_OPENWEATHERMAP_URL_BASE, &params_openweathermap);
        weather_data = { let mut _v = weather_data.clone(); _v.push(Map {OpenWeatherMap: response_openweathermap}); _v };
    }
    if (g_WEATHERSTACK_API_KEY.as_str() != "") {
        let mut params_weatherstack: HashMap<String, String> = HashMap::from([(String::from("query"), format!("{}", location)), (String::from("access_key"), String::from(g_WEATHERSTACK_API_KEY.clone()))]);
        let mut response_weatherstack: HashMap<String, String> = http_get(&g_WEATHERSTACK_URL_BASE, &params_weatherstack);
        weather_data = { let mut _v = weather_data.clone(); _v.push(Map1 {Weatherstack: response_weatherstack}); _v };
    }
    if ((weather_data.len() as i64) == 0) {
        panic!("No API keys provided or no valid data returned.");
    }
    return weather_data
};
        unsafe fn mochi_main() {
    let mut data: Vec<HashMap<String, HashMap<String, String>>> = current_weather(&"New York");
    println!("{}", format!("{:?}", data));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
