// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_sample_html: String = String::new();
fn main() {
    unsafe {
        g_sample_html = String::from("<html><head><meta property=\"og:image\" content=\"https://example.com/pic.jpg\"/></head></html>");
                let _start: i64 = _now();
        unsafe fn find_from(s: &str, pattern: &str, mut start: i64) -> i64 {
    let mut n: i64 = (s.len() as i64);
    let mut m: i64 = (pattern.len() as i64);
    let mut i: i64 = start;
    while (i <= (n - m)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + m) - i) as usize).collect::<String>() } == pattern) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn download_image(html: &str) -> String {
    let mut tag: String = String::from("<meta property=\"og:image\"");
    let mut idx_tag: i64 = find_from(html, &tag, 0);
    if (idx_tag == -1) {
        return String::from("No meta tag with property 'og:image' was found.")
    }
    let mut key: String = String::from("content=\"");
    let mut idx_content: i64 = find_from(html, &key, idx_tag);
    if (idx_content == -1) {
        return String::from("Image URL not found in meta tag.")
    }
    let mut start: i64 = (idx_content + (key.len() as i64));
    let mut end: i64 = start;
    while ((end < (html.len() as i64)) && ({ let tmp = &html; tmp.chars().skip(end as usize).take(((end + 1) - end) as usize).collect::<String>() }.as_str() != "\"")) {
        end = (end + 1);
    }
    if (end >= (html.len() as i64)) {
        return String::from("Image URL not found in meta tag.")
    }
    let mut image_url: String = { let tmp = &html; tmp.chars().skip(start as usize).take((end - start) as usize).collect::<String>() }.clone();
    return format!("{}{}", "Image URL: ", image_url).clone()
};
        println!("{}", download_image(&g_sample_html));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
