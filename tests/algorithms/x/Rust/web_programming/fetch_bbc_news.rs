// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::process::Command;
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn _fetch(url: &str) -> String {
    let out = Command::new("curl").arg("-fsSL").arg(url).output().unwrap();
    let s = String::from_utf8_lossy(&out.stdout);
    if let Some(start) = s.find("\"title\"") {
        let rest = &s[start+8..];
        if let Some(begin) = rest.find('\"') {
            let rest2 = &rest[begin+1..];
            if let Some(end) = rest2.find('\"') {
                return rest2[..end].to_string();
            }
        }
    }
    String::new()
}
#[derive(Debug, Clone, Default)]
struct Article {
    title: String,
}
impl std::fmt::Display for Article {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"title\": \"{}\"", self.title)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct NewsResponse {
    articles: Vec<Article>,
}
impl std::fmt::Display for NewsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"articles\": {:?}", self.articles)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn fetch_bbc_news(api_key: &str) {
    let mut url: String = format!("{}{}", "https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=", api_key).clone();
    let mut resp: NewsResponse = NewsResponse {articles: 0};
    if ((resp.articles.clone().len() as i64) == 0) {
        println!("{}", "No articles found.");
        return
    }
    let mut i: i64 = 0;
    while (i < (resp.articles.clone().len() as i64)) {
        let mut article: Article = resp.articles.clone()[i as usize].clone();
        println!("{}", format!("{}{}", format!("{}{}", (i + 1).to_string(), ".) "), article.title.clone()));
        i = (i + 1);
    }
};
    fetch_bbc_news(&"test");
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
