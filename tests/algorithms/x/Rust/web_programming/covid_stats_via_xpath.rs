// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct CovidData {
    cases: i64,
    deaths: i64,
    recovered: i64,
}
impl std::fmt::Display for CovidData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"cases\": {}", self.cases)?;
        write!(f, ", ")?;
        write!(f, "\"deaths\": {}", self.deaths)?;
        write!(f, ", ")?;
        write!(f, "\"recovered\": {}", self.recovered)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn parse_int(s: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == ",") {
            i = (i + 1);
            continue
        }
        value = ((value * 10) + { let n: i64 = ch.parse().unwrap(); n });
        i = (i + 1);
    }
    return value
};
    fn find(haystack: &str, needle: &str, mut start: i64) -> i64 {
    let mut nlen = (needle.len() as i64);
    let mut i: i64 = start;
    while (i <= ((haystack.len() as i64) - nlen)) {
        let mut j: i64 = 0;
        let mut matched: bool = true;
        while (j < nlen) {
            if ({ let tmp = &haystack; tmp.chars().skip((i + j) as usize).take((((i + j) + 1) - (i + j)) as usize).collect::<String>() }.as_str() != { let tmp = &needle; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str()) {
                matched = false;
                break
            }
            j = (j + 1);
        }
        if matched {
            return i
        }
        i = (i + 1);
    }
    return (0 - 1)
};
    fn extract_numbers(html: &str) -> Vec<i64> {
    let mut nums: Vec<i64> = vec![];
    let mut pos: i64 = 0;
    let mut start_tag: String = String::from("<span>").clone();
    let mut end_tag: String = String::from("</span>").clone();
    loop {
        let mut s: i64 = find(html, &start_tag, pos);
        if (s == (0 - 1)) {
            break
        }
        let mut content_start: i64 = (s + (start_tag.len() as i64));
        let mut e: i64 = find(html, &end_tag, content_start);
        if (e == (0 - 1)) {
            break
        }
        let mut num_str: String = { let tmp = &html; tmp.chars().skip(content_start as usize).take((e - content_start) as usize).collect::<String>() }.clone();
        nums = { let mut _v = nums.clone(); _v.push(parse_int(&num_str)); _v };
        pos = (e + (end_tag.len() as i64));
    }
    return nums
};
    fn covid_stats(html: &str) -> CovidData {
    let mut nums: Vec<i64> = extract_numbers(html);
    return CovidData {cases: nums[0 as usize], deaths: nums[1 as usize], recovered: nums[2 as usize]}
};
    fn mochi_main() {
    let mut sample_html: String = format!("{}{}", format!("{}{}", "<div class=\"maincounter-number\"><span>123456</span></div>", "<div class=\"maincounter-number\"><span>7890</span></div>"), "<div class=\"maincounter-number\"><span>101112</span></div>").clone();
    let mut stats: CovidData = covid_stats(&sample_html);
    println!("{}", format!("{}{}", "Total COVID-19 cases in the world: ", stats.cases.to_string()));
    println!("{}", format!("{}{}", "Total deaths due to COVID-19 in the world: ", stats.deaths.to_string()));
    println!("{}", format!("{}{}", "Total COVID-19 patients recovered in the world: ", stats.recovered.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
