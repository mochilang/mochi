// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Rate {
    code: String,
    rate: f64,
}
impl std::fmt::Display for Rate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"code\": \"{}\"", self.code)?;
        write!(f, ", ")?;
        write!(f, "\"rate\": {}", self.rate)?;
        write!(f, "}}")
    }
}

static mut g_rates: Vec<Rate> = Vec::new();
fn main() {
    unsafe {
        g_rates = vec![Rate {code: String::from("USD"), rate: 1.0}.clone(), Rate {code: String::from("EUR"), rate: 0.9}.clone(), Rate {code: String::from("INR"), rate: 83.0}.clone(), Rate {code: String::from("JPY"), rate: 156.0}.clone(), Rate {code: String::from("GBP"), rate: 0.78}.clone()];
                let _start: i64 = _now();
        unsafe fn rate_of(code: &str) -> f64 {
    for r in g_rates.iter().cloned() {
        if (r.code.clone() == code) {
            return r.rate
        }
    }
    return 0.0
};
        unsafe fn convert_currency(from_: &str, to: &str, mut amount: f64) -> f64 {
    let mut from_rate: f64 = rate_of(from_);
    let mut to_rate: f64 = rate_of(to);
    if ((from_rate == 0.0) || (to_rate == 0.0)) {
        return 0.0
    }
    let mut usd: f64 = (amount / from_rate);
    return (usd * to_rate)
};
        let mut result: f64 = convert_currency(&"USD", &"INR", 10.0);
        println!("{}", result.to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
