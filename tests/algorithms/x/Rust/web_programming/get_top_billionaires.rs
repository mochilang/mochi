// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::process::Command;
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn _fetch(url: &str) -> String {
    let out = Command::new("curl").arg("-fsSL").arg(url).output().unwrap();
    let s = String::from_utf8_lossy(&out.stdout);
    if let Some(start) = s.find("\"title\"") {
        let rest = &s[start+8..];
        if let Some(begin) = rest.find('\"') {
            let rest2 = &rest[begin+1..];
            if let Some(end) = rest2.find('\"') {
                return rest2[..end].to_string();
            }
        }
    }
    String::new()
}
#[derive(Debug, Clone, Default)]
struct Person {
    finalWorth: f64,
    personName: String,
    source: String,
    countryOfCitizenship: String,
    gender: String,
    birthDate: f64,
}
impl std::fmt::Display for Person {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"finalWorth\": {}", self.finalWorth)?;
        write!(f, ", ")?;
        write!(f, "\"personName\": \"{}\"", self.personName)?;
        write!(f, ", ")?;
        write!(f, "\"source\": \"{}\"", self.source)?;
        write!(f, ", ")?;
        write!(f, "\"countryOfCitizenship\": \"{}\"", self.countryOfCitizenship)?;
        write!(f, ", ")?;
        write!(f, "\"gender\": \"{}\"", self.gender)?;
        write!(f, ", ")?;
        write!(f, "\"birthDate\": {}", self.birthDate)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct PersonsWrapper {
    personsLists: Vec<Person>,
    count: i64,
}
impl std::fmt::Display for PersonsWrapper {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"personsLists\": {:?}", self.personsLists)?;
        write!(f, ", ")?;
        write!(f, "\"count\": {}", self.count)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Response {
    personList: PersonsWrapper,
}
impl std::fmt::Display for Response {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"personList\": {}", self.personList)?;
        write!(f, "}}")
    }
}

static mut g_LIMIT: i64 = 0;
static mut g_TODAY_MS: f64 = 0.0;
fn main() {
    unsafe {
        g_LIMIT = 10;
        g_TODAY_MS = 1705017600000.0;
                let _start: i64 = _now();
        let mut API_URL: String = format!("{}{}", "https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=", g_LIMIT.to_string()).clone();
        let round1 = move |value: f64| -> f64 {
    if (value >= 0.0) {
        let mut scaled: i64 = (((value * 10.0) + 0.5) as i64);
        return ((scaled as f64) / 10.0)
    }
    let mut scaled: i64 = (((value * 10.0) - 0.5) as i64);
    return ((scaled as f64) / 10.0)
};
        let years_old = move |birth_ms: f64, today_ms: f64| -> i64 {
    let mut ms_per_year: f64 = 31557600000.0;
    return (((today_ms - birth_ms) / ms_per_year) as i64)
};
        let get_forbes_real_time_billionaires = move || -> Vec<HashMap<String, String>> {
    let mut response: Response = Response {personList: 0};
    let mut out: Vec<HashMap<String, String>> = vec![];
    for person in response.personList.clone().personsLists.clone().iter().cloned() {
        let mut worth_billion: f64 = round1((person.finalWorth / 1000.0));
        let mut age_years: i64 = years_old(person.birthDate, g_TODAY_MS);
        let mut entry: HashMap<String, String> = HashMap::from([(String::from("Name"), String::from(person.personName.clone())), (String::from("Source"), String::from(person.source.clone())), (String::from("Country"), String::from(person.countryOfCitizenship.clone())), (String::from("Gender"), String::from(person.gender.clone())), (String::from("Worth ($)"), format!("{}", format!("{}{}", worth_billion.to_string(), " Billion"))), (String::from("Age"), format!("{}", age_years.to_string()))]);
        out = { let mut _v = out.clone(); _v.push(entry.clone()); _v };
    }
    return out
};
        let display_billionaires = move |list: Vec<HashMap<String, String>>| {
    for b in list.iter() {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", (*b).clone()["Name" as usize], " | "), (*b).clone()["Source" as usize]), " | "), (*b).clone()["Country" as usize]), " | "), (*b).clone()["Gender" as usize]), " | "), (*b).clone()["Worth ($)" as usize]), " | "), (*b).clone()["Age" as usize]));
    }
};
        display_billionaires(get_forbes_real_time_billionaires());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
