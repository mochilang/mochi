// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Product {
    title: String,
    link: String,
    price: String,
    rating: String,
    mrp: String,
    discount: f64,
}
impl std::fmt::Display for Product {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"title\": \"{}\"", self.title)?;
        write!(f, ", ")?;
        write!(f, "\"link\": \"{}\"", self.link)?;
        write!(f, ", ")?;
        write!(f, "\"price\": \"{}\"", self.price)?;
        write!(f, ", ")?;
        write!(f, "\"rating\": \"{}\"", self.rating)?;
        write!(f, ", ")?;
        write!(f, "\"mrp\": \"{}\"", self.mrp)?;
        write!(f, ", ")?;
        write!(f, "\"discount\": {}", self.discount)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn find_index(s: &str, pat: &str, mut start: i64) -> i64 {
    let mut i: i64 = start;
    while (i <= ((s.len() as i64) - (pat.len() as i64))) {
        let mut j: i64 = 0;
        let mut ok: bool = true;
        while (j < (pat.len() as i64)) {
            if (s.chars().nth((i + j) as usize).unwrap().to_string().as_str() != pat.chars().nth(j as usize).unwrap().to_string().as_str()) {
                ok = false;
                break
            }
            j = (j + 1);
        }
        if ok {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn slice_between(s: &str, start_pat: &str, end_pat: &str, mut from: i64) -> String {
    let mut a: i64 = find_index(s, start_pat, from);
    if (a < 0) {
        return String::from("")
    }
    let mut b: i64 = (a + (start_pat.len() as i64));
    let mut c: i64 = find_index(s, end_pat, b);
    if (c < 0) {
        return String::from("")
    }
    return { let tmp = &s; tmp.chars().skip(b as usize).take((c - b) as usize).collect::<String>() }.clone()
};
    fn char_to_digit(c: &str) -> i64 {
    if (c == "0") {
        return 0
    }
    if (c == "1") {
        return 1
    }
    if (c == "2") {
        return 2
    }
    if (c == "3") {
        return 3
    }
    if (c == "4") {
        return 4
    }
    if (c == "5") {
        return 5
    }
    if (c == "6") {
        return 6
    }
    if (c == "7") {
        return 7
    }
    if (c == "8") {
        return 8
    }
    return 9
};
    fn parse_int(txt: &str) -> i64 {
    let mut n: i64 = 0;
    let mut i: i64 = 0;
    while (i < (txt.len() as i64)) {
        let mut c: String = txt.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() >= "0") && (c.as_str() <= "9")) {
            n = ((n * 10) + char_to_digit(&c));
        }
        i = (i + 1);
    }
    return n
};
    fn parse_product(block: &str) -> Product {
    let mut href: String = slice_between(block, &"href=\"", &"\"", 0).clone();
    let mut link: String = format!("{}{}", "https://www.amazon.in", href).clone();
    let mut title: String = slice_between(block, &">", &"</a>", find_index(block, &"<a", 0)).clone();
    let mut price: String = slice_between(block, &"<span class=\"a-offscreen\">", &"</span>", 0).clone();
    let mut rating: String = slice_between(block, &"<span class=\"a-icon-alt\">", &"</span>", 0).clone();
    if ((rating.len() as i64) == 0) {
        rating = String::from("Not available");
    }
    let mut mrp: String = slice_between(block, &"<span class=\"a-price a-text-price\">", &"</span>", 0).clone();
    let mut disc: f64 = 0.0;
    if (((mrp.len() as i64) > 0) && ((price.len() as i64) > 0)) {
        let mut p: i64 = parse_int(&price);
        let mut m: i64 = parse_int(&mrp);
        if (m > 0) {
            disc = ((((m - p) * 100) as f64) / (m as f64));
        }
    } else {
        mrp = String::from("");
        disc = 0.0;
    }
    return Product {title: title.clone(), link: link.clone(), price: price.clone(), rating: rating.clone(), mrp: mrp.clone(), discount: disc}
};
    fn get_amazon_product_data(product: &str) -> Vec<Product> {
    let mut html: String = String::from("<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>").clone();
    let mut out: Vec<Product> = vec![];
    let mut start: i64 = 0;
    loop {
        let mut div_start: i64 = find_index(&html, &"<div class=\"s-result-item\"", start);
        if (div_start < 0) {
            break
        }
        let mut div_end: i64 = find_index(&html, &"</div>", div_start);
        if (div_end < 0) {
            break
        }
        let mut block: String = { let tmp = &html; tmp.chars().skip(div_start as usize).take((div_end - div_start) as usize).collect::<String>() }.clone();
        out = { let mut _v = out.clone(); _v.push(parse_product(&block)); _v };
        start = (div_end + ("</div>".len() as i64));
    }
    return out
};
    fn mochi_main() {
    let mut products: Vec<Product> = get_amazon_product_data(&"laptop");
    let mut i: i64 = 0;
    while (i < (products.len() as i64)) {
        let mut p: Product = products[i as usize].clone();
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", p.title.clone(), " | "), p.link.clone()), " | "), p.price.clone()), " | "), p.rating.clone()), " | "), p.mrp.clone()), " | "), p.discount.to_string()));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
