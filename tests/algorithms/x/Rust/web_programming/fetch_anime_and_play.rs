// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct ANIME_DBItem {
    title: String,
    url: String,
}
impl std::fmt::Display for ANIME_DBItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"title\": \"{}\"", self.title)?;
        write!(f, ", ")?;
        write!(f, "\"url\": \"{}\"", self.url)?;
        write!(f, "}}")
    }
}

static mut g_BASE_URL: String = String::new();
static mut g_ANIME_DB: Vec<HashMap<String, String>> = Vec::new();
static g_EPISODE_DB: LazyLock<Mutex<HashMap<String, Vec<HashMap<String, String>>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("/anime/kimetsu-no-yaiba"), vec![HashMap::from([(String::from("title"), String::from("Episode 1")), (String::from("url"), String::from("/watch/kimetsu-no-yaiba/1"))]).clone(), HashMap::from([(String::from("title"), String::from("Episode 2")), (String::from("url"), String::from("/watch/kimetsu-no-yaiba/2"))]).clone()]), (String::from("/anime/naruto"), vec![HashMap::from([(String::from("title"), String::from("Episode 1")), (String::from("url"), String::from("/watch/naruto/1"))]).clone()])])));
static g_EPISODE_EMBED: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("/watch/kimetsu-no-yaiba/1"), String::from("/embed/kimetsu-no-yaiba/1")), (String::from("/watch/kimetsu-no-yaiba/2"), String::from("/embed/kimetsu-no-yaiba/2")), (String::from("/watch/naruto/1"), String::from("/embed/naruto/1"))])));
fn main() {
    unsafe {
        g_BASE_URL = String::from("https://ww7.gogoanime2.org").clone();
        g_ANIME_DB = vec![HashMap::from([(String::from("title"), String::from("Demon Slayer")), (String::from("url"), String::from("/anime/kimetsu-no-yaiba"))]).clone(), HashMap::from([(String::from("title"), String::from("Naruto")), (String::from("url"), String::from("/anime/naruto"))]).clone()];
                let _start: i64 = _now();
        unsafe fn contains_str(s: &str, sub: &str) -> bool {
    if ((sub.len() as i64) == 0) {
        return true
    }
    let mut i: i64 = 0;
    while ((i + (sub.len() as i64)) <= (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + (sub.len() as i64)) - i) as usize).collect::<String>() } == sub) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn search_scraper(anime_name: &str) -> Vec<HashMap<String, String>> {
    let mut term: String = (anime_name.to_lowercase()).clone();
    let mut res: Vec<HashMap<String, String>> = vec![];
    let mut i: i64 = 0;
    while (i < (g_ANIME_DB.len() as i64)) {
        let mut item: HashMap<String, String> = g_ANIME_DB[i as usize].clone();
        if contains_str(&(item.get("title").cloned().unwrap_or_default().to_lowercase()), &term) {
            res = { let mut _v = res.clone(); _v.push(item.clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
        unsafe fn search_anime_episode_list(endpoint: &str) -> Vec<HashMap<String, String>> {
    if g_EPISODE_DB.lock().unwrap().contains_key(endpoint) {
        return g_EPISODE_DB.get(endpoint).cloned().unwrap_or_default()
    }
    let mut empty: Vec<HashMap<String, String>> = vec![];
    return empty
};
        unsafe fn to_playlist(embed: &str) -> String {
    return format!("{}{}", format!("{}{}", "/playlist/", embed.chars().skip(7 as usize).take(usize::MAX as usize).collect::<String>()), ".m3u8").clone()
};
        unsafe fn get_anime_episode(endpoint: &str) -> Vec<String> {
    if g_EPISODE_EMBED.lock().unwrap().contains_key(endpoint) {
        let mut embed: String = g_EPISODE_EMBED.get(endpoint).cloned().unwrap_or_default().clone();
        let mut play: String = format!("{}{}", g_BASE_URL, embed).clone();
        let mut download: String = format!("{}{}", g_BASE_URL, to_playlist(&embed)).clone();
        return vec![play.clone(), download.clone()]
    }
    let mut empty: Vec<String> = vec![];
    return empty
};
        unsafe fn mochi_main() {
    let mut animes: Vec<HashMap<String, String>> = search_scraper(&"demon");
    println!("{:?}", format!("{:?}", animes));
    let mut episodes: Vec<HashMap<String, String>> = search_anime_episode_list(&"/anime/kimetsu-no-yaiba");
    println!("{:?}", format!("{:?}", episodes));
    let mut links: Vec<String> = get_anime_episode(&"/watch/kimetsu-no-yaiba/1");
    println!("{:?}", format!("{:?}", links));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
