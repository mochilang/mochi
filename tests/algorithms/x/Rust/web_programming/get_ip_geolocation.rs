// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
use std::process::Command;
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn _fetch(url: &str) -> String {
    let out = Command::new("curl").arg("-fsSL").arg(url).output().unwrap();
    let s = String::from_utf8_lossy(&out.stdout);
    if let Some(start) = s.find("\"title\"") {
        let rest = &s[start+8..];
        if let Some(begin) = rest.find('\"') {
            let rest2 = &rest[begin+1..];
            if let Some(end) = rest2.find('\"') {
                return rest2[..end].to_string();
            }
        }
    }
    String::new()
}
fn main() {
        let _start: i64 = _now();
    fn get_ip_geolocation(ip_address: &str) -> String {
    let mut url: String = format!("{}{}", format!("{}{}", "https://ipinfo.io/", ip_address), "/json").clone();
    let mut data: HashMap<String, String> = _fetch(url);
    if ((data.contains_key(&"city") && data.contains_key(&"region")) && data.contains_key(&"country")) {
        return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Location: ", data.get("city").cloned().unwrap_or_default()), ", "), data.get("region").cloned().unwrap_or_default()), ", "), data.get("country").cloned().unwrap_or_default())
    }
    return String::from("Location data not found.").clone()
};
    let mut ip_address: String = input().clone();
    let mut location: String = get_ip_geolocation(&ip_address).clone();
    println!("{}", location);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
