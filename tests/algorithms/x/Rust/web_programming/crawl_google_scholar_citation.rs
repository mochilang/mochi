// Generated by Mochi transpiler v0.10.63
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_DIGITS: String = String::new();
fn main() {
    unsafe {
        g_DIGITS = String::from("0123456789").clone();
                let _start: i64 = _now();
        unsafe fn is_digit(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_DIGITS.len() as i64)) {
        if (g_DIGITS.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn find_substring(haystack: &str, needle: &str) -> i64 {
    let mut i: i64 = 0;
    while (i <= ((haystack.len() as i64) - (needle.len() as i64))) {
        let mut j: i64 = 0;
        while (j < (needle.len() as i64)) {
            if (haystack.chars().nth((i + j) as usize).unwrap().to_string().as_str() != needle.chars().nth(j as usize).unwrap().to_string().as_str()) {
                break
            }
            j = (j + 1);
        }
        if (j == (needle.len() as i64)) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn extract_citation(html: &str) -> String {
    let mut marker: String = String::from("Cited by ").clone();
    let mut idx: i64 = find_substring(html, &marker);
    if (idx < 0) {
        return String::from("")
    }
    let mut pos: i64 = (idx + (marker.len() as i64));
    let mut result: String = String::from("").clone();
    while (pos < (html.len() as i64)) {
        let mut ch: String = html.chars().nth(pos as usize).unwrap().to_string().clone();
        if !is_digit(&ch) {
            break
        }
        result = format!("{}{}", result, ch);
        pos = (pos + 1);
    }
    return result.clone()
};
        unsafe fn get_citation(base_url: &str, params: &HashMap<String, String>) -> String {
    let mut html: String = String::from("<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>").clone();
    return extract_citation(&html).clone()
};
        if (__name__ == "__main__") {
            let mut params: HashMap<String, String> = HashMap::from([(String::from("title"), String::from("Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density")), (String::from("journal"), String::from("Chem. Mater.")), (String::from("volume"), String::from("30")), (String::from("pages"), String::from("3979-3990")), (String::from("year"), String::from("2018")), (String::from("hl"), String::from("en"))]);
            println!("{}", get_citation(&"https://scholar.google.com/scholar_lookup", &params));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
