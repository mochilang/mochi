// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn nor_gate(mut input_1: i64, mut input_2: i64) -> i64 {
    if ((input_1 == 0) && (input_2 == 0)) {
        return 1
    }
    return 0
};
    fn center(s: &str, mut width: i64) -> String {
    let mut total: i64 = (width - (s.len() as i64));
    if (total <= 0) {
        return s.to_string()
    }
    let mut left: i64 = (total / 2);
    let mut right: i64 = (total - left);
    let mut res: String = s.to_string().clone();
    let mut i: i64 = 0;
    while (i < left) {
        res = format!("{}{}", " ", res);
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < right) {
        res = format!("{}{}", res, " ");
        j = (j + 1);
    }
    return res.clone()
};
    fn make_table_row(mut i: i64, mut j: i64) -> String {
    let mut output: i64 = nor_gate(i, j);
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "| ", center(&i.to_string(), 8)), " | "), center(&j.to_string(), 8)), " | "), center(&output.to_string(), 8)), " |").clone()
};
    fn truth_table() -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Truth Table of NOR Gate:\n", "| Input 1 | Input 2 | Output  |\n"), make_table_row(0, 0)), "\n"), make_table_row(0, 1)), "\n"), make_table_row(1, 0)), "\n"), make_table_row(1, 1)).clone()
};
    println!("{}", nor_gate(0, 0));
    println!("{}", nor_gate(0, 1));
    println!("{}", nor_gate(1, 0));
    println!("{}", nor_gate(1, 1));
    println!("{}", truth_table());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
