// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_kmap: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_kmap = vec![vec![0, 1], vec![1, 1]];
                let _start: i64 = _now();
        unsafe fn row_string(mut row: Vec<i64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (row.len() as i64)) {
        s = format!("{}{}", s, row[i as usize].to_string());
        if (i < ((row.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
        unsafe fn print_kmap(mut kmap: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (kmap.len() as i64)) {
        println!("{}", row_string(kmap[i as usize].clone()));
        i = (i + 1);
    }
};
        unsafe fn join_terms(mut terms: Vec<String>) -> String {
    if ((terms.len() as i64) == 0) {
        return String::from("")
    }
    let mut res: String = terms[0 as usize].clone().clone();
    let mut i: i64 = 1;
    while (i < (terms.len() as i64)) {
        res = format!("{}{}", format!("{}{}", res, " + "), terms[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn simplify_kmap(mut board: Vec<Vec<i64>>) -> String {
    let mut terms: Vec<String> = vec![];
    let mut a: i64 = 0;
    while (a < (board.len() as i64)) {
        let mut row: Vec<i64> = board[a as usize].clone();
        let mut b: i64 = 0;
        while (b < (row.len() as i64)) {
            let mut item: i64 = row[b as usize];
            if (item != 0) {
                let mut term: String = format!("{}{}", if (a != 0) { String::from("A") } else { String::from("A'") }, if (b != 0) { String::from("B") } else { String::from("B'") }).clone();
                terms = { let mut _v = terms.clone(); _v.push(term.clone()); _v };
            }
            b = (b + 1);
        }
        a = (a + 1);
    }
    let mut expr: String = join_terms(terms.clone()).clone();
    return expr.clone()
};
        print_kmap(g_kmap.clone().clone());
        println!("{}", "Simplified Expression:");
        println!("{}", simplify_kmap(g_kmap.clone().clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
