// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 1;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        let NIL: i64 = (-1);
        let mut set_seed = |mut s: i64| {
    unsafe { g_seed = s };
};
        let mut randint = |mut a: i64, mut b: i64| -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return ((unsafe { g_seed.clone() } % ((b - a) + 1)) + a)
};
        let mut rand_bool = || -> bool {
    return (randint(0, 1) == 1)
};
        let mut nodes: Vec<HashMap<String, i64>> = vec![];
        let mut root: i64 = NIL;
        let mut new_heap = || {
    nodes = vec![];
    root = NIL;
};
        let mut merge = {
fn merge(mut NIL: i64, nodes: &mut Vec<HashMap<String, i64>>, rand_bool: &impl FnMut() -> bool, mut r1: i64, mut r2: i64) -> i64 {
    if (r1 == NIL) {
        return r2
    }
    if (r2 == NIL) {
        return r1
    }
    if (nodes[r1 as usize].clone()["value"] > nodes[r2 as usize].clone()["value"]) {
        let tmp: i64 = r1;
        r1 = r2;
        r2 = tmp;
    }
    if rand_bool() {
        let tmp: i64 = nodes[r1 as usize].clone()["left"];
        (*nodes)[r1 as usize].insert(String::from("left"), nodes[r1 as usize].clone()["right"]);
        (*nodes)[r1 as usize].insert(String::from("right"), tmp.clone());
    }
    (*nodes)[r1 as usize].insert(String::from("left"), merge(NIL, nodes.clone(), rand_bool, nodes[r1 as usize].clone()["left"], r2));
    return r1
}
|mut r1: i64, mut r2: i64| -> i64 { merge(NIL, &mut nodes, &rand_bool, r1, r2) }
};
        let mut insert = |mut value: i64| {
    let node: HashMap<String, i64> = HashMap::from([(String::from("value"), value), (String::from("left"), NIL), (String::from("right"), NIL)]);
    nodes = { let mut _v = nodes.clone(); _v.push(node.clone()); _v };
    let idx: i64 = ((nodes.len() as i64) - 1);
    root = merge(root, idx);
};
        let mut top = || -> i64 {
    if (root == NIL) {
        return 0
    }
    return nodes[root as usize].clone()["value"]
};
        let mut pop = || -> i64 {
    let result: i64 = top();
    let l: i64 = nodes[root as usize].clone()["left"];
    let r: i64 = nodes[root as usize].clone()["right"];
    root = merge(l, r);
    return result
};
        let mut is_empty = || -> bool {
    return (root == NIL)
};
        let mut to_sorted_list = || -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    while !is_empty() {
        res = { let mut _v = res.clone(); _v.push(pop()); _v };
    }
    return res
};
        set_seed(1);
        new_heap();
        insert(2);
        insert(3);
        insert(1);
        insert(5);
        insert(1);
        insert(7);
        println!("{:?}", format!("{:?}", to_sorted_list()));
        new_heap();
        insert(1);
        insert(-1);
        insert(0);
        println!("{:?}", format!("{:?}", to_sorted_list()));
        new_heap();
        insert(3);
        insert(1);
        insert(3);
        insert(7);
        println!("{}", pop());
        println!("{}", pop());
        println!("{}", pop());
        println!("{}", pop());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
