// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    name: String,
    val: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct MinHeap {
    heap: Vec<Node>,
    idx_of_element: HashMap<String, i64>,
    heap_dict: HashMap<String, i64>,
}
impl std::fmt::Display for MinHeap {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"heap\": {:?}", self.heap)?;
        write!(f, ", ")?;
        write!(f, "\"idx_of_element\": {:?}", self.idx_of_element)?;
        write!(f, ", ")?;
        write!(f, "\"heap_dict\": {:?}", self.heap_dict)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn get_parent_idx(mut idx: i64) -> i64 {
    return ((idx - 1) / 2)
};
    fn get_left_child_idx(mut idx: i64) -> i64 {
    return ((idx * 2) + 1)
};
    fn get_right_child_idx(mut idx: i64) -> i64 {
    return ((idx * 2) + 2)
};
    fn remove_key(mut m: HashMap<String, i64>, mut k: String) -> HashMap<String, i64> {
    let mut out: HashMap<String, i64> = HashMap::new();
    for key in m.keys().cloned() {
        if (key.as_str() != k.as_str()) {
            out.insert(key.clone(), m.get(key.as_str()).cloned().unwrap_or_default());
        }
    }
    return out
};
    fn slice_without_last(mut xs: Vec<Node>) -> Vec<Node> {
    let mut res: Vec<Node> = vec![];
    let mut i: i64 = 0;
    while (i < ((xs.len() as i64) - 1)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize].clone()); _v };
        i = (i + 1);
    }
    return res
};
    fn sift_down(mh: &mut MinHeap, mut idx: i64) {
    let mut heap: Vec<Node> = mh.heap.clone();
    let mut idx_map: HashMap<String, i64> = mh.idx_of_element.clone();
    let mut i: i64 = idx;
    loop {
        let left: i64 = get_left_child_idx(i);
        let right: i64 = get_right_child_idx(i);
        let mut smallest: i64 = i;
        if ((left < (heap.len() as i64)) && (heap[left as usize].clone().val < heap[smallest as usize].clone().val)) {
            smallest = left;
        }
        if ((right < (heap.len() as i64)) && (heap[right as usize].clone().val < heap[smallest as usize].clone().val)) {
            smallest = right;
        }
        if (smallest != i) {
            let tmp: Node = heap[i as usize].clone();
            heap[i as usize] = heap[smallest as usize].clone();
            heap[smallest as usize] = tmp.clone();
            idx_map.insert(heap[i as usize].name.clone(), i.clone());
            idx_map.insert(heap[smallest as usize].name.clone(), smallest.clone());
            i = smallest;
        } else {
            break
        }
    }
    (*mh).heap = heap.clone();
    (*mh).idx_of_element = idx_map.clone();
};
    fn sift_up(mh: &mut MinHeap, mut idx: i64) {
    let mut heap: Vec<Node> = mh.heap.clone();
    let mut idx_map: HashMap<String, i64> = mh.idx_of_element.clone();
    let mut i: i64 = idx;
    let mut p: i64 = get_parent_idx(i);
    while ((p >= 0) && (heap[p as usize].clone().val > heap[i as usize].clone().val)) {
        let tmp: Node = heap[p as usize].clone();
        heap[p as usize] = heap[i as usize].clone();
        heap[i as usize] = tmp.clone();
        idx_map.insert(heap[p as usize].name.clone(), p.clone());
        idx_map.insert(heap[i as usize].name.clone(), i.clone());
        i = p;
        p = get_parent_idx(i);
    }
    (*mh).heap = heap.clone();
    (*mh).idx_of_element = idx_map.clone();
};
    fn new_min_heap(mut array: Vec<Node>) -> MinHeap {
    let mut idx_map: HashMap<String, i64> = HashMap::new();
    let mut val_map: HashMap<String, i64> = HashMap::new();
    let mut heap: Vec<Node> = array.clone();
    let mut i: i64 = 0;
    while (i < (array.len() as i64)) {
        let n: Node = array[i as usize].clone();
        idx_map.insert(n.name.clone(), i.clone());
        val_map.insert(n.name.clone(), n.val);
        i = (i + 1);
    }
    let mut mh: MinHeap = MinHeap {heap: heap.clone(), idx_of_element: idx_map.clone(), heap_dict: val_map.clone()};
    let mut start: i64 = get_parent_idx(((array.len() as i64) - 1));
    while (start >= 0) {
        sift_down(&mut mh, start);
        start = (start - 1);
    }
    return mh
};
    fn peek(mut mh: MinHeap) -> Node {
    return mh.heap.clone()[0 as usize].clone()
};
    fn remove_min(mh: &mut MinHeap) -> Node {
    let mut heap: Vec<Node> = mh.heap.clone();
    let mut idx_map: HashMap<String, i64> = mh.idx_of_element.clone();
    let mut val_map: HashMap<String, i64> = mh.heap_dict.clone();
    let last_idx: i64 = ((heap.len() as i64) - 1);
    let top: Node = heap[0 as usize].clone();
    let last: Node = heap[last_idx as usize].clone();
    heap[0 as usize] = last.clone();
    idx_map.insert(last.name.clone(), 0);
    heap = slice_without_last(heap.clone());
    idx_map = remove_key(idx_map.clone(), top.name.clone());
    val_map = remove_key(val_map.clone(), top.name.clone());
    (*mh).heap = heap.clone();
    (*mh).idx_of_element = idx_map.clone();
    (*mh).heap_dict = val_map.clone();
    if ((heap.len() as i64) > 0) {
        sift_down(mh, 0);
    }
    return top
};
    fn insert(mh: &mut MinHeap, mut node: Node) {
    let mut heap: Vec<Node> = mh.heap.clone();
    let mut idx_map: HashMap<String, i64> = mh.idx_of_element.clone();
    let mut val_map: HashMap<String, i64> = mh.heap_dict.clone();
    heap = { let mut _v = heap.clone(); _v.push(node.clone()); _v };
    let idx: i64 = ((heap.len() as i64) - 1);
    idx_map.insert(node.name.clone(), idx.clone());
    val_map.insert(node.name.clone(), node.val);
    (*mh).heap = heap.clone();
    (*mh).idx_of_element = idx_map.clone();
    (*mh).heap_dict = val_map.clone();
    sift_up(mh, idx);
};
    fn is_empty(mut mh: MinHeap) -> bool {
    return ((mh.heap.clone().len() as i64) == 0)
};
    fn get_value(mut mh: MinHeap, mut key: String) -> i64 {
    return mh.heap_dict.clone()[key.as_str()]
};
    fn decrease_key(mh: &mut MinHeap, node: &mut Node, mut new_value: i64) {
    let mut heap: Vec<Node> = mh.heap.clone();
    let mut val_map: HashMap<String, i64> = mh.heap_dict.clone();
    let mut idx_map: HashMap<String, i64> = mh.idx_of_element.clone();
    let idx: i64 = idx_map.get(node.name.clone().as_str()).cloned().unwrap_or_default();
    if !(heap[idx as usize].clone().val > new_value) {
        panic!("newValue must be less than current value");
    }
    (*node).val = new_value;
    heap[idx as usize].val = new_value;
    val_map.insert((*node).name.clone(), new_value.clone());
    (*mh).heap = heap.clone();
    (*mh).heap_dict = val_map.clone();
    sift_up(mh, idx);
};
    fn node_to_string(mut n: Node) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Node(", n.name.clone()), ", "), n.val.to_string()), ")").clone()
};
    let mut r: Node = Node {name: String::from("R"), val: -1};
    let mut b: Node = Node {name: String::from("B"), val: 6};
    let mut a: Node = Node {name: String::from("A"), val: 3};
    let mut x: Node = Node {name: String::from("X"), val: 1};
    let mut e: Node = Node {name: String::from("E"), val: 4};
    let mut my_min_heap: MinHeap = new_min_heap(vec![r.clone(), b.clone(), a.clone(), x.clone(), e.clone()]);
    println!("{}", "Min Heap - before decrease key");
    for n in my_min_heap.heap.clone().iter().cloned() {
        println!("{}", node_to_string(n.clone()));
    }
    println!("{}", "Min Heap - After decrease key of node [B -> -17]");
    decrease_key(&mut my_min_heap, &mut b, -17);
    for n in my_min_heap.heap.clone().iter().cloned() {
        println!("{}", node_to_string(n.clone()));
    }
    println!("{}", get_value(my_min_heap.clone(), String::from("B")).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
