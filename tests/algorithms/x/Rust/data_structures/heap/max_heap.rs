// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_heap: Vec<i64> = Vec::new();
static mut g_size: i64 = 0;
fn main() {
    unsafe {
        g_heap = vec![0];
        g_size = 0;
                let _start: i64 = _now();
        unsafe fn swap_up(mut i: i64) {
    let mut temp: i64 = g_heap.clone()[i as usize];
    let mut idx: i64 = i;
    while ((idx / 2) > 0) {
        if (g_heap.clone()[idx as usize] > g_heap.clone()[(idx / 2) as usize]) {
            g_heap[idx as usize] = g_heap.clone()[(idx / 2) as usize];
            g_heap[(idx / 2) as usize] = temp;
        }
        idx = (idx / 2);
    }
};
        unsafe fn insert(mut value: i64) {
    g_heap = { let mut _v = g_heap.clone().clone(); _v.push(value); _v };
    g_size = (g_size + 1);
    swap_up(g_size);
};
        unsafe fn swap_down(mut i: i64) {
    let mut idx: i64 = i;
    while (g_size >= (2 * idx)) {
        let mut bigger_child: i64 = if (((2 * idx) + 1) > g_size) { (2 * idx) } else if (g_heap.clone()[(2 * idx) as usize] > g_heap.clone()[((2 * idx) + 1) as usize]) { (2 * idx) } else { ((2 * idx) + 1) };
        let mut temp: i64 = g_heap.clone()[idx as usize];
        if (g_heap.clone()[idx as usize] < g_heap.clone()[bigger_child as usize]) {
            g_heap[idx as usize] = g_heap.clone()[bigger_child as usize];
            g_heap[bigger_child as usize] = temp;
        }
        idx = bigger_child;
    }
};
        unsafe fn shrink() {
    let mut new_heap: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= g_size) {
        new_heap = { let mut _v = new_heap.clone(); _v.push(g_heap.clone()[i as usize]); _v };
        i = (i + 1);
    }
    g_heap = new_heap.clone();
};
        unsafe fn pop() -> i64 {
    let mut max_value: i64 = g_heap.clone()[1 as usize];
    g_heap[1 as usize] = g_heap.clone()[g_size as usize];
    g_size = (g_size - 1);
    shrink();
    swap_down(1);
    return max_value
};
        unsafe fn get_list() -> Vec<i64> {
    let mut out: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i <= g_size) {
        out = { let mut _v = out.clone(); _v.push(g_heap.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return out
};
        unsafe fn len() -> i64 {
    return g_size
};
        insert(6);
        insert(10);
        insert(15);
        insert(12);
        println!("{}", pop());
        println!("{}", pop());
        println!("{:?}", get_list());
        println!("{}", len());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
