// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    data: i64,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn inorder(nodes: &mut Vec<Node>, mut index: i64, mut acc: Vec<i64>) -> Vec<i64> {
    if (index == (0 - 1)) {
        return acc
    }
    let mut node: Node = nodes[index as usize].clone();
    let mut res: Vec<i64> = inorder(nodes, node.left, acc.clone());
    res = { let mut _v = res.clone(); _v.push(node.data); _v };
    res = inorder(nodes, node.right, res.clone());
    return res
};
    fn size(nodes: &mut Vec<Node>, mut index: i64) -> i64 {
    if (index == (0 - 1)) {
        return 0
    }
    let mut node: Node = nodes[index as usize].clone();
    return ((1 + size(nodes, node.left)) + size(nodes, node.right))
};
    fn depth(mut nodes: Vec<Node>, mut index: i64) -> i64 {
    if (index == (0 - 1)) {
        return 0
    }
    let mut node: Node = nodes[index as usize].clone();
    let mut left_depth: i64 = depth(nodes.clone(), node.left);
    let mut right_depth: i64 = depth(nodes.clone(), node.right);
    if (left_depth > right_depth) {
        return (left_depth + 1)
    }
    return (right_depth + 1)
};
    fn is_full(nodes: &mut Vec<Node>, mut index: i64) -> bool {
    if (index == (0 - 1)) {
        return true
    }
    let mut node: Node = nodes[index as usize].clone();
    if ((node.left == (0 - 1)) && (node.right == (0 - 1))) {
        return true
    }
    if ((node.left != (0 - 1)) && (node.right != (0 - 1))) {
        return (is_full(nodes, node.left) && is_full(nodes, node.right))
    }
    return false
};
    fn small_tree() -> Vec<Node> {
    let mut arr: Vec<Node> = vec![];
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 2, left: 1, right: 2}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 1, left: (0 - 1), right: (0 - 1)}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 3, left: (0 - 1), right: (0 - 1)}); _v };
    return arr
};
    fn medium_tree() -> Vec<Node> {
    let mut arr: Vec<Node> = vec![];
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 4, left: 1, right: 4}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 2, left: 2, right: 3}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 1, left: (0 - 1), right: (0 - 1)}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 3, left: (0 - 1), right: (0 - 1)}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 5, left: (0 - 1), right: 5}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 6, left: (0 - 1), right: 6}); _v };
    arr = { let mut _v = arr.clone(); _v.push(Node {data: 7, left: (0 - 1), right: (0 - 1)}); _v };
    return arr
};
    let mut small: Vec<Node> = small_tree();
    println!("{}", size(&mut small, 0));
    println!("{:?}", inorder(&mut small, 0, vec![]));
    println!("{}", depth(small.clone(), 0));
    println!("{}", if is_full(&mut small, 0) { 1 } else { 0 });
    let mut medium: Vec<Node> = medium_tree();
    println!("{}", size(&mut medium, 0));
    println!("{:?}", inorder(&mut medium, 0, vec![]));
    println!("{}", depth(medium.clone(), 0));
    println!("{}", if is_full(&mut medium, 0) { 1 } else { 0 });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
