// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn binomial_coefficient(mut n: i64, mut k: i64) -> i64 {
    let mut result: i64 = 1;
    let mut kk: i64 = k;
    if (k > (n - k)) {
        kk = (n - k);
    }
    for i in 0..kk {
        result = (result * (n - i));
        result = (result / (i + 1));
    }
    return result
};
    fn catalan_number(mut node_count: i64) -> i64 {
    return (binomial_coefficient((2 * node_count), node_count) / (node_count + 1))
};
    fn factorial(mut n: i64) -> i64 {
    if (n < 0) {
        println!("{}", "factorial() not defined for negative values");
        return 0
    }
    let mut result: i64 = 1;
    for i in 1..(n + 1) {
        result = (result * i);
    }
    return result
};
    fn binary_tree_count(mut node_count: i64) -> i64 {
    return (catalan_number(node_count) * factorial(node_count))
};
    println!("{}", "Enter the number of nodes:");
    let mut input_str: String = input().clone();
    let mut node_count: i64 = { let n: i64 = input_str.parse().unwrap(); n };
    if (node_count <= 0) {
        println!("{}", "We need some nodes to work with.");
    } else {
        let mut bst: i64 = catalan_number(node_count);
        let mut bt: i64 = binary_tree_count(node_count);
        println!("{}", format!("{} {} {} {} {} {} {}", "Given", node_count, "nodes, there are", bt, "binary trees and", bst, "binary search trees.").trim_end());
    }
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
