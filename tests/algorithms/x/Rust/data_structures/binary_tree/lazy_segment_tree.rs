// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_NEG_INF: i64 = 0;
static mut g_A: Vec<i64> = Vec::new();
static mut g_n: i64 = 0;
static mut g_segment_tree: Vec<i64> = Vec::new();
static mut g_lazy: Vec<i64> = Vec::new();
static mut g_flag: Vec<bool> = Vec::new();
fn main() {
    unsafe {
        g_NEG_INF = -1000000000;
        g_A = vec![1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8];
        g_n = 15;
        g_segment_tree = init_int_array(g_n);
        g_lazy = init_int_array(g_n);
        g_flag = init_bool_array(g_n);
                let _start: i64 = _now();
        unsafe fn init_int_array(mut n: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < ((4 * n) + 5)) {
        arr = { let mut _v = arr.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    return arr
};
        unsafe fn init_bool_array(mut n: i64) -> Vec<bool> {
    let mut arr: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < ((4 * n) + 5)) {
        arr = { let mut _v = arr.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    return arr
};
        unsafe fn left(mut idx: i64) -> i64 {
    return (idx * 2)
};
        unsafe fn right(mut idx: i64) -> i64 {
    return ((idx * 2) + 1)
};
        unsafe fn build(segment_tree: &mut Vec<i64>, mut idx: i64, mut l: i64, mut r: i64, a: &mut Vec<i64>) {
    if (l == r) {
        (*segment_tree)[idx as usize] = a[(l - 1) as usize];
    } else {
        let mut mid: i64 = ((l + r) / 2);
        build(segment_tree, left(idx), l, mid, a);
        build(segment_tree, right(idx), (mid + 1), r, a);
        let mut lv: i64 = segment_tree[left(idx) as usize];
        let mut rv: i64 = segment_tree[right(idx) as usize];
        if (lv > rv) {
            (*segment_tree)[idx as usize] = lv;
        } else {
            (*segment_tree)[idx as usize] = rv;
        }
    }
};
        unsafe fn update(segment_tree: &mut Vec<i64>, lazy: &mut Vec<i64>, flag: &mut Vec<bool>, mut idx: i64, mut l: i64, mut r: i64, mut a: i64, mut b: i64, mut val: i64) {
    if flag[idx as usize] {
        (*segment_tree)[idx as usize] = lazy[idx as usize];
        (*flag)[idx as usize] = false;
        if (l != r) {
            (*lazy)[left(idx) as usize] = lazy[idx as usize];
            (*lazy)[right(idx) as usize] = lazy[idx as usize];
            (*flag)[left(idx) as usize] = true;
            (*flag)[right(idx) as usize] = true;
        }
    }
    if ((r < a) || (l > b)) {
        return
    }
    if ((l >= a) && (r <= b)) {
        (*segment_tree)[idx as usize] = val;
        if (l != r) {
            (*lazy)[left(idx) as usize] = val;
            (*lazy)[right(idx) as usize] = val;
            (*flag)[left(idx) as usize] = true;
            (*flag)[right(idx) as usize] = true;
        }
        return
    }
    let mut mid: i64 = ((l + r) / 2);
    update(segment_tree, lazy, flag, left(idx), l, mid, a, b, val);
    update(segment_tree, lazy, flag, right(idx), (mid + 1), r, a, b, val);
    let mut lv: i64 = segment_tree[left(idx) as usize];
    let mut rv: i64 = segment_tree[right(idx) as usize];
    if (lv > rv) {
        (*segment_tree)[idx as usize] = lv;
    } else {
        (*segment_tree)[idx as usize] = rv;
    }
};
        unsafe fn query(segment_tree: &mut Vec<i64>, lazy: &mut Vec<i64>, flag: &mut Vec<bool>, mut idx: i64, mut l: i64, mut r: i64, mut a: i64, mut b: i64) -> i64 {
    if flag[idx as usize] {
        (*segment_tree)[idx as usize] = lazy[idx as usize];
        (*flag)[idx as usize] = false;
        if (l != r) {
            (*lazy)[left(idx) as usize] = lazy[idx as usize];
            (*lazy)[right(idx) as usize] = lazy[idx as usize];
            (*flag)[left(idx) as usize] = true;
            (*flag)[right(idx) as usize] = true;
        }
    }
    if ((r < a) || (l > b)) {
        return g_NEG_INF
    }
    if ((l >= a) && (r <= b)) {
        return segment_tree[idx as usize]
    }
    let mut mid: i64 = ((l + r) / 2);
    let mut q1: i64 = query(segment_tree, lazy, flag, left(idx), l, mid, a, b);
    let mut q2: i64 = query(segment_tree, lazy, flag, right(idx), (mid + 1), r, a, b);
    if (q1 > q2) {
        return q1
    } else {
        return q2
    }
};
        unsafe fn segtree_to_string(mut segment_tree: Vec<i64>, mut lazy: Vec<i64>, mut flag: Vec<bool>, mut n: i64) -> String {
    let mut res: String = String::from("[").clone();
    let mut i: i64 = 1;
    while (i <= n) {
        let mut v: i64 = query(&mut segment_tree, &mut lazy, &mut flag, 1, 1, n, i, i);
        res = format!("{}{}", res, v.to_string());
        if (i < n) {
            res = format!("{}{}", res, ", ");
        }
        i = (i + 1);
    }
    res = format!("{}{}", res, "]");
    return res.clone()
};
        build(&mut g_segment_tree, 1, 1, g_n, &mut g_A);
        println!("{}", query(&mut g_segment_tree, &mut g_lazy, &mut g_flag, 1, 1, g_n, 4, 6));
        println!("{}", query(&mut g_segment_tree, &mut g_lazy, &mut g_flag, 1, 1, g_n, 7, 11));
        println!("{}", query(&mut g_segment_tree, &mut g_lazy, &mut g_flag, 1, 1, g_n, 7, 12));
        update(&mut g_segment_tree, &mut g_lazy, &mut g_flag, 1, 1, g_n, 1, 3, 111);
        println!("{}", query(&mut g_segment_tree, &mut g_lazy, &mut g_flag, 1, 1, g_n, 1, 15));
        update(&mut g_segment_tree, &mut g_lazy, &mut g_flag, 1, 1, g_n, 7, 8, 235);
        println!("{}", segtree_to_string(g_segment_tree.clone().clone(), g_lazy.clone().clone(), g_flag.clone().clone(), g_n));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
