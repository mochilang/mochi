// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_node_data: Vec<i64> = Vec::new();
static mut g_left_child: Vec<i64> = Vec::new();
static mut g_right_child: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_node_data = vec![0];
        g_left_child = vec![0];
        g_right_child = vec![0];
                let _start: i64 = _now();
        unsafe fn new_node(mut value: i64) -> i64 {
    g_node_data = { let mut _v = g_node_data.clone().clone(); _v.push(value); _v };
    g_left_child = { let mut _v = g_left_child.clone().clone(); _v.push(0); _v };
    g_right_child = { let mut _v = g_right_child.clone().clone(); _v.push(0); _v };
    return ((g_node_data.clone().len() as i64) - 1)
};
        unsafe fn build_tree() -> i64 {
    let mut root: i64 = new_node(1);
    let mut n2: i64 = new_node(2);
    let mut n5: i64 = new_node(5);
    let mut n3: i64 = new_node(3);
    let mut n4: i64 = new_node(4);
    let mut n6: i64 = new_node(6);
    g_left_child[root as usize] = n2;
    g_right_child[root as usize] = n5;
    g_left_child[n2 as usize] = n3;
    g_right_child[n2 as usize] = n4;
    g_right_child[n5 as usize] = n6;
    return root
};
        unsafe fn flatten(mut root: i64) -> Vec<i64> {
    if (root == 0) {
        return vec![]
    }
    let mut res: Vec<i64> = vec![g_node_data.clone()[root as usize]];
    let mut left_vals: Vec<i64> = flatten(g_left_child.clone()[root as usize]);
    let mut right_vals: Vec<i64> = flatten(g_right_child.clone()[root as usize]);
    let mut i: i64 = 0;
    while (i < (left_vals.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(left_vals[i as usize]); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (right_vals.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(right_vals[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn display(mut values: Vec<i64>) {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        if (i == 0) {
            s = values[i as usize].to_string().to_string();
        } else {
            s = format!("{}{}", format!("{}{}", s, " "), values[i as usize].to_string());
        }
        i = (i + 1);
    }
    println!("{}", s);
};
        println!("{}", "Flattened Linked List:");
        let mut root: i64 = build_tree();
        let mut vals: Vec<i64> = flatten(root);
        display(vals.clone());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
