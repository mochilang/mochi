// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct FenwickTree {
    size: i64,
    tree: Vec<i64>,
}
impl std::fmt::Display for FenwickTree {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, ", ")?;
        write!(f, "\"tree\": {:?}", self.tree)?;
        write!(f, "}}")
    }
}

static mut g_f: FenwickTree = FenwickTree { size: 0, tree: Vec::new() };
fn main() {
    unsafe {
        g_f = fenwick_from_list(vec![1, 2, 3, 4, 5]);
                let _start: i64 = _now();
        unsafe fn fenwick_from_list(mut arr: Vec<i64>) -> FenwickTree {
    let mut size = (arr.len() as i64);
    let mut tree: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        tree = { let mut _v = tree.clone(); _v.push(arr[i as usize]); _v };
        i = (i + 1);
    }
    i = 1;
    while (i < size) {
        let mut j = fenwick_next(i);
        if (j < size) {
            tree[j as usize] = (tree[j as usize] + tree[i as usize]);
        }
        i = (i + 1);
    }
    return FenwickTree {size: size, tree: tree}
};
        unsafe fn fenwick_empty(mut size: i64) -> FenwickTree {
    let mut tree: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        tree = { let mut _v = tree.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    return FenwickTree {size: size, tree: tree}
};
        unsafe fn fenwick_get_array(f: &FenwickTree) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < f.size) {
        arr = { let mut _v = arr.clone(); _v.push(f.tree.clone()[i as usize]); _v };
        i = (i + 1);
    }
    i = (f.size - 1);
    while (i > 0) {
        let mut j = fenwick_next(i);
        if (j < f.size) {
            arr[j as usize] = (arr[j as usize] - arr[i as usize]);
        }
        i = (i - 1);
    }
    return arr
};
        unsafe fn bit_and(mut a: i64, mut b: i64) -> i64 {
    let mut ua: i64 = a;
    let mut ub: i64 = b;
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    while ((ua != 0) || (ub != 0)) {
        if (((ua % 2) == 1) && ((ub % 2) == 1)) {
            res = (res + bit);
        }
        ua = (ua / 2);
        ub = (ub / 2);
        bit = (bit * 2);
    }
    return res
};
        unsafe fn low_bit(mut x: i64) -> i64 {
    if (x == 0) {
        return 0
    }
    return (x - bit_and(x, (x - 1)))
};
        unsafe fn fenwick_next(mut index: i64) -> i64 {
    return (index + low_bit(index))
};
        unsafe fn fenwick_prev(mut index: i64) -> i64 {
    return (index - low_bit(index))
};
        unsafe fn fenwick_add(f: &FenwickTree, mut index: i64, mut value: i64) -> FenwickTree {
    let mut tree: Vec<i64> = f.tree.clone();
    if (index == 0) {
        tree[0 as usize] = (tree[0 as usize] + value);
        return FenwickTree {size: f.size, tree: tree}
    }
    let mut i: i64 = index;
    while (i < f.size) {
        tree[i as usize] = (tree[i as usize] + value);
        i = fenwick_next(i);
    }
    return FenwickTree {size: f.size, tree: tree}
};
        unsafe fn fenwick_update(mut f: FenwickTree, mut index: i64, mut value: i64) -> FenwickTree {
    let mut current = fenwick_get(&mut f, index);
    return fenwick_add(&f, index, (value - current))
};
        unsafe fn fenwick_prefix(f: &FenwickTree, mut right: i64) -> i64 {
    if (right == 0) {
        return 0
    }
    let mut result: i64 = f.tree.clone()[0 as usize];
    let mut r: i64 = (right - 1);
    while (r > 0) {
        result = (result + f.tree.clone()[r as usize]);
        r = fenwick_prev(r);
    }
    return result
};
        unsafe fn fenwick_query(f: &mut FenwickTree, mut left: i64, mut right: i64) -> i64 {
    return (fenwick_prefix(f, right) - fenwick_prefix(f, left))
};
        unsafe fn fenwick_get(f: &mut FenwickTree, mut index: i64) -> i64 {
    return fenwick_query(f, index, (index + 1))
};
        unsafe fn fenwick_rank_query(f: &FenwickTree, mut value: i64) -> i64 {
    let mut v: i64 = (value - f.tree.clone()[0 as usize]);
    if (v < 0) {
        return -1
    }
    let mut j: i64 = 1;
    while ((j * 2) < f.size) {
        j = (j * 2);
    }
    let mut i: i64 = 0;
    let mut jj: i64 = j;
    while (jj > 0) {
        if (((i + jj) < f.size) && (f.tree.clone()[(i + jj) as usize] <= v)) {
            v = (v - f.tree.clone()[(i + jj) as usize]);
            i = (i + jj);
        }
        jj = (jj / 2);
    }
    return i
};
        let mut f_base: FenwickTree = fenwick_from_list(vec![1, 2, 3, 4, 5]);
        println!("{:?}", fenwick_get_array(&f_base));
        g_f = fenwick_add(&g_f, 0, 1);
        g_f = fenwick_add(&g_f, 1, 2);
        g_f = fenwick_add(&g_f, 2, 3);
        g_f = fenwick_add(&g_f, 3, 4);
        g_f = fenwick_add(&g_f, 4, 5);
        println!("{:?}", fenwick_get_array(&g_f));
        let mut f2: FenwickTree = fenwick_from_list(vec![1, 2, 3, 4, 5]);
        println!("{}", fenwick_prefix(&f2, 3));
        println!("{}", fenwick_query(&mut f2, 1, 4));
        let mut f3: FenwickTree = fenwick_from_list(vec![1, 2, 0, 3, 0, 5]);
        println!("{}", fenwick_rank_query(&f3, 0));
        println!("{}", fenwick_rank_query(&f3, 2));
        println!("{}", fenwick_rank_query(&f3, 1));
        println!("{}", fenwick_rank_query(&f3, 3));
        println!("{}", fenwick_rank_query(&f3, 5));
        println!("{}", fenwick_rank_query(&f3, 6));
        println!("{}", fenwick_rank_query(&f3, 11));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
