// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SplitResult {
    left: i64,
    right: i64,
}
impl std::fmt::Display for SplitResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

static mut g_node_values: Vec<i64> = Vec::new();
static mut g_node_priors: Vec<f64> = Vec::new();
static mut g_node_lefts: Vec<i64> = Vec::new();
static mut g_node_rights: Vec<i64> = Vec::new();
static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_node_values = vec![];
        g_node_priors = vec![];
        g_node_lefts = vec![];
        g_node_rights = vec![];
        g_seed = 1;
                let _start: i64 = _now();
        let mut NIL: i64 = (0 - 1);
        let random = move || -> f64 {
    g_seed = (((g_seed * 13) + 7) % 100);
    return ((g_seed as f64) / 100.0)
};
        let new_node = move |value: i64| -> i64 {
    g_node_values = { let mut _v = g_node_values.clone().clone(); _v.push(value); _v };
    g_node_priors = { let mut _v = g_node_priors.clone().clone(); _v.push(random()); _v };
    g_node_lefts = { let mut _v = g_node_lefts.clone().clone(); _v.push(NIL); _v };
    g_node_rights = { let mut _v = g_node_rights.clone().clone(); _v.push(NIL); _v };
    return ((g_node_values.clone().len() as i64) - 1)
};
        let split = move |root: i64, value: i64| -> SplitResult {
    if (root == NIL) {
        return SplitResult {left: NIL, right: NIL}
    }
    if (value < g_node_values.clone()[root as usize]) {
        let mut res = g_node_lefts.clone()[root as usize].split(value).map(|x| x.to_string()).collect::<Vec<String>>();
        g_node_lefts[root as usize] = res.right;
        return SplitResult {left: res.left, right: root}
    }
    let mut res = g_node_rights.clone()[root as usize].split(value).map(|x| x.to_string()).collect::<Vec<String>>();
    g_node_rights[root as usize] = res.left;
    return SplitResult {left: root, right: res.right}
};
        let merge = move |left: i64, right: i64| -> i64 {
    if (left == NIL) {
        return right
    }
    if (right == NIL) {
        return left
    }
    if (g_node_priors.clone()[left as usize] < g_node_priors.clone()[right as usize]) {
        g_node_rights[left as usize] = merge(g_node_rights.clone()[left as usize], right);
        return left
    }
    g_node_lefts[right as usize] = merge(left, g_node_lefts.clone()[right as usize]);
    return right
};
        let insert = move |root: i64, value: i64| -> i64 {
    let mut node: i64 = new_node(value);
    let mut res = root.split(value).map(|x| x.to_string()).collect::<Vec<String>>();
    return merge(merge(res.left, node), res.right)
};
        let erase = move |root: i64, value: i64| -> i64 {
    let mut res1 = root.split((value - 1)).map(|x| x.to_string()).collect::<Vec<String>>();
    let mut res2 = res1.right.split(value).map(|x| x.to_string()).collect::<Vec<String>>();
    return merge(res1.left, res2.right)
};
        let inorder = move |i: i64, acc: Vec<i64>| -> Vec<i64> {
    if (i == NIL) {
        return acc
    }
    let mut left_acc: Vec<i64> = inorder(g_node_lefts.clone()[i as usize], acc.clone());
    let mut with_node: Vec<i64> = { let mut _v = left_acc.clone(); _v.push(g_node_values.clone()[i as usize]); _v };
    return inorder(g_node_rights.clone()[i as usize], with_node.clone())
};
        let mochi_main = move || {
    let mut root: i64 = NIL;
    root = insert(root, 1);
    println!("{}", format!("{:?}", inorder(root, vec![])));
    root = insert(root, 3);
    root = insert(root, 5);
    root = insert(root, 17);
    root = insert(root, 19);
    root = insert(root, 2);
    root = insert(root, 16);
    root = insert(root, 4);
    root = insert(root, 0);
    println!("{}", format!("{:?}", inorder(root, vec![])));
    root = insert(root, 4);
    root = insert(root, 4);
    root = insert(root, 4);
    println!("{}", format!("{:?}", inorder(root, vec![])));
    root = erase(root, 0);
    println!("{}", format!("{:?}", inorder(root, vec![])));
    root = erase(root, 4);
    println!("{}", format!("{:?}", inorder(root, vec![])));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
