// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn create_node(mut value: i64) -> Vec<String> {
    return vec![value, Default::default(), Default::default()]
};
    fn insert(mut node: Vec<String>, mut value: i64) -> Vec<String> {
    if node.is_empty() {
        return create_node(value)
    }
    if (value < node[0 as usize].clone()) {
        node[1 as usize] = insert(node[1 as usize].clone(), value);
    } else if (value > node[0 as usize].clone()) {
        node[2 as usize] = insert(node[2 as usize].clone(), value);
    }
    return node
};
    fn search(mut node: Vec<String>, mut value: i64) -> bool {
    if node.is_empty() {
        return false
    }
    if (value == node[0 as usize].clone()) {
        return true
    }
    if (value < node[0 as usize].clone()) {
        return search(node[1 as usize].clone(), value)
    }
    return search(node[2 as usize].clone(), value)
};
    fn inorder(mut node: Vec<String>, mut acc: Vec<i64>) -> Vec<i64> {
    if node.is_empty() {
        return acc
    }
    let mut left_acc: Vec<i64> = inorder(node[1 as usize].clone(), acc.clone());
    let mut with_node: Vec<i64> = { let mut _v = left_acc.clone(); _v.push(node[0 as usize].clone()); _v };
    return inorder(node[2 as usize].clone(), with_node.clone())
};
    fn find_min(mut node: Vec<String>) -> i64 {
    let mut current: Vec<String> = node.clone();
    while !current.chars().nth(1 as usize).unwrap().to_string().is_empty() {
        let mut current: String = current.chars().nth(1 as usize).unwrap().to_string();
    }
    return current.chars().nth(0 as usize).unwrap().to_string()
};
    fn find_max(mut node: Vec<String>) -> i64 {
    let mut current: Vec<String> = node.clone();
    while !current.chars().nth(2 as usize).unwrap().to_string().is_empty() {
        let mut current: String = current.chars().nth(2 as usize).unwrap().to_string();
    }
    return current.chars().nth(0 as usize).unwrap().to_string()
};
    fn delete(mut node: Vec<String>, mut value: i64) -> Vec<String> {
    if node.is_empty() {
        return Default::default()
    }
    if (value < node[0 as usize].clone()) {
        node[1 as usize] = delete(node[1 as usize].clone(), value);
    } else if (value > node[0 as usize].clone()) {
        node[2 as usize] = delete(node[2 as usize].clone(), value);
    } else {
        if node[1 as usize].clone().is_empty() {
            return node[2 as usize].clone()
        }
        if node[2 as usize].clone().is_empty() {
            return node[1 as usize].clone()
        }
        let mut min_val: i64 = find_min(node[2 as usize].clone());
        node[0 as usize] = min_val;
        node[2 as usize] = delete(node[2 as usize].clone(), min_val);
    }
    return node
};
    fn mochi_main() {
    let mut root: Vec<String> = Default::default();
    let mut nums: Vec<i64> = vec![8, 3, 6, 1, 10, 14, 13, 4, 7];
    for v in nums.iter().cloned() {
        root = insert(root.clone(), v);
    }
    println!("{}", format!("{:?}", inorder(root.clone(), vec![])));
    println!("{}", if search(root.clone(), 6) { 1 } else { 0 });
    println!("{}", if search(root.clone(), 20) { 1 } else { 0 });
    println!("{}", find_min(root.clone()));
    println!("{}", find_max(root.clone()));
    root = delete(root.clone(), 6);
    println!("{}", format!("{:?}", inorder(root.clone(), vec![])));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
