// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Tree {
    values: Vec<i64>,
    left: Vec<i64>,
    right: Vec<i64>,
    root: i64,
}
impl std::fmt::Display for Tree {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {:?}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {:?}", self.right)?;
        write!(f, ", ")?;
        write!(f, "\"root\": {}", self.root)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn mirror_node(left: &mut Vec<i64>, right: &mut Vec<i64>, mut idx: i64) {
    if (idx == -1) {
        return
    }
    let mut temp: i64 = left[idx as usize];
    (*left)[idx as usize] = right[idx as usize];
    (*right)[idx as usize] = temp;
    mirror_node(left, right, left[idx as usize]);
    mirror_node(left, right, right[idx as usize]);
};
    fn mirror(tree: &Tree) -> Tree {
    mirror_node(&mut tree.left.clone(), &mut tree.right.clone(), tree.root);
    return tree
};
    fn inorder(tree: &Tree, mut idx: i64) -> Vec<i64> {
    if (idx == -1) {
        return vec![]
    }
    let mut left_vals: Vec<i64> = inorder(tree, tree.left.clone()[idx as usize]);
    let mut right_vals: Vec<i64> = inorder(tree, tree.right.clone()[idx as usize]);
    return vec![vec![left_vals, vec![tree.values.clone()[idx as usize]]].concat(), right_vals].concat()
};
    fn make_tree_zero() -> Tree {
    return Tree {values: vec![0], left: vec![-1], right: vec![-1], root: 0}
};
    fn make_tree_seven() -> Tree {
    return Tree {values: vec![1, 2, 3, 4, 5, 6, 7], left: vec![1, 3, 5, -1, -1, -1, -1], right: vec![2, 4, 6, -1, -1, -1, -1], root: 0}
};
    fn make_tree_nine() -> Tree {
    return Tree {values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9], left: vec![1, 3, -1, 6, -1, -1, -1, -1, -1], right: vec![2, 4, 5, 7, 8, -1, -1, -1, -1], root: 0}
};
    fn mochi_main() {
    let mut names: Vec<String> = vec![String::from("zero").clone(), String::from("seven").clone(), String::from("nine").clone()];
    let mut trees: Vec<Tree> = vec![make_tree_zero(), make_tree_seven(), make_tree_nine()];
    let mut i: i64 = 0;
    while (i < (trees.len() as i64)) {
        let mut tree: Tree = trees[i as usize].clone();
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "      The ", names[i as usize].clone()), " tree: "), format!("{:?}", inorder(&tree, tree.root))));
        let mut mirrored: Tree = mirror(&tree);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Mirror of ", names[i as usize].clone()), " tree: "), format!("{:?}", inorder(&mirrored, mirrored.root))));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
