// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_arr: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_arr = vec![0, 0, 0, 0, 0];
                let _start: i64 = _now();
        unsafe fn zeros(mut n: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn update(arr: &mut Vec<i64>, mut idx: i64, mut value: i64) {
    (*arr)[idx as usize] = value;
};
        unsafe fn query(mut arr: Vec<i64>, mut left: i64, mut right: i64) -> i64 {
    let mut result: i64 = 0;
    let mut i: i64 = left;
    while (i < right) {
        if (arr[i as usize] > result) {
            result = arr[i as usize];
        }
        i = (i + 1);
    }
    return result
};
        println!("{}", query(g_arr.clone().clone(), 0, 5));
        update(&mut g_arr, 4, 100);
        println!("{}", query(g_arr.clone().clone(), 0, 5));
        update(&mut g_arr, 4, 0);
        update(&mut g_arr, 2, 20);
        println!("{}", query(g_arr.clone().clone(), 0, 5));
        update(&mut g_arr, 4, 10);
        println!("{}", query(g_arr.clone().clone(), 2, 5));
        println!("{}", query(g_arr.clone().clone(), 1, 5));
        update(&mut g_arr, 2, 0);
        println!("{}", query(g_arr.clone().clone(), 0, 5));
        g_arr = zeros(10000);
        update(&mut g_arr, 255, 30);
        println!("{}", query(g_arr.clone().clone(), 0, 10000));
        g_arr = zeros(6);
        update(&mut g_arr, 5, 1);
        println!("{}", query(g_arr.clone().clone(), 5, 6));
        g_arr = zeros(6);
        update(&mut g_arr, 0, 1000);
        println!("{}", query(g_arr.clone().clone(), 0, 1));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
