// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn make_symmetric_tree() -> Vec<Vec<i64>> {
    return vec![vec![1, 1, 2], vec![2, 3, 4], vec![2, 5, 6], vec![3, -1, -1], vec![4, -1, -1], vec![4, -1, -1], vec![3, -1, -1]]
};
    fn make_asymmetric_tree() -> Vec<Vec<i64>> {
    return vec![vec![1, 1, 2], vec![2, 3, 4], vec![2, 5, 6], vec![3, -1, -1], vec![4, -1, -1], vec![3, -1, -1], vec![4, -1, -1]]
};
    fn is_symmetric_tree(mut tree: Vec<Vec<i64>>) -> bool {
    let mut stack: Vec<i64> = vec![tree[0 as usize].clone()[1 as usize], tree[0 as usize].clone()[2 as usize]];
    while ((stack.len() as i64) >= 2) {
        let mut left: i64 = stack[((stack.len() as i64) - 2) as usize];
        let mut right: i64 = stack[((stack.len() as i64) - 1) as usize];
        stack = stack[0 as usize..((stack.len() as i64) - 2) as usize].to_vec();
        if ((left == -1) && (right == -1)) {
            continue
        }
        if ((left == -1) || (right == -1)) {
            return false
        }
        let mut lnode: Vec<i64> = tree[left as usize].clone();
        let mut rnode: Vec<i64> = tree[right as usize].clone();
        if (lnode[0 as usize] != rnode[0 as usize]) {
            return false
        }
        stack = { let mut _v = stack.clone(); _v.push(lnode[1 as usize]); _v };
        stack = { let mut _v = stack.clone(); _v.push(rnode[2 as usize]); _v };
        stack = { let mut _v = stack.clone(); _v.push(lnode[2 as usize]); _v };
        stack = { let mut _v = stack.clone(); _v.push(rnode[1 as usize]); _v };
    }
    return true
};
    let mut symmetric_tree: Vec<Vec<i64>> = make_symmetric_tree();
    let mut asymmetric_tree: Vec<Vec<i64>> = make_asymmetric_tree();
    println!("{}", is_symmetric_tree(symmetric_tree.clone()).to_string());
    println!("{}", is_symmetric_tree(asymmetric_tree.clone()).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
