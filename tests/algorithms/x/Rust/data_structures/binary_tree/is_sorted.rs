// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Tree {
    data: Vec<f64>,
    left: Vec<i64>,
    right: Vec<i64>,
}
impl std::fmt::Display for Tree {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {:?}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {:?}", self.right)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    let mut NONE: i64 = (0 - 1);
    let inorder = move |tree: &mut Tree, index: i64| -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    if (index == NONE) {
        return res
    }
    let mut left_idx: i64 = tree.left[index as usize];
    if (left_idx != NONE) {
        res = vec![res, inorder(&mut tree, left_idx)].concat();
    }
    res = { let mut _v = res.clone(); _v.push(tree.data[index as usize]); _v };
    let mut right_idx: i64 = tree.right[index as usize];
    if (right_idx != NONE) {
        res = vec![res, inorder(&mut tree, right_idx)].concat();
    }
    return res
};
    let is_sorted = move |tree: &mut Tree, index: i64| -> bool {
    if (index == NONE) {
        return true
    }
    let mut left_idx: i64 = tree.left[index as usize];
    if (left_idx != NONE) {
        if (tree.data[index as usize] < tree.data[left_idx as usize]) {
            return false
        }
        if !is_sorted(&mut tree, left_idx) {
            return false
        }
    }
    let mut right_idx: i64 = tree.right[index as usize];
    if (right_idx != NONE) {
        if (tree.data[index as usize] > tree.data[right_idx as usize]) {
            return false
        }
        if !is_sorted(&mut tree, right_idx) {
            return false
        }
    }
    return true
};
    let mut tree1: Tree = Tree {data: vec![2.1, 2.0, 2.2], left: vec![1, NONE, NONE], right: vec![2, NONE, NONE]};
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Tree ", format!("{:?}", inorder(&mut tree1, 0))), " is sorted: "), is_sorted(&mut tree1, 0).to_string()));
    let mut tree2: Tree = Tree {data: vec![2.1, 2.0, 2.0], left: vec![1, NONE, NONE], right: vec![2, NONE, NONE]};
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Tree ", format!("{:?}", inorder(&mut tree2, 0))), " is sorted: "), is_sorted(&mut tree2, 0).to_string()));
    let mut tree3: Tree = Tree {data: vec![2.1, 2.0, 2.1], left: vec![1, NONE, NONE], right: vec![2, NONE, NONE]};
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Tree ", format!("{:?}", inorder(&mut tree3, 0))), " is sorted: "), is_sorted(&mut tree3, 0).to_string()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
