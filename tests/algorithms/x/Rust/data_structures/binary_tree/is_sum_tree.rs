// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    value: i64,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn tree_sum(nodes: &mut Vec<Node>, mut idx: i64) -> i64 {
    if (idx == -1) {
        return 0
    }
    let mut node: Node = nodes[idx as usize].clone();
    return ((node.value + tree_sum(nodes, node.left)) + tree_sum(nodes, node.right))
};
    fn is_sum_node(nodes: &mut Vec<Node>, mut idx: i64) -> bool {
    let mut node: Node = nodes[idx as usize].clone();
    if ((node.left == -1) && (node.right == -1)) {
        return true
    }
    let mut left_sum: i64 = tree_sum(nodes, node.left);
    let mut right_sum: i64 = tree_sum(nodes, node.right);
    if (node.value != (left_sum + right_sum)) {
        return false
    }
    let mut left_ok: bool = true;
    if (node.left != -1) {
        left_ok = is_sum_node(nodes, node.left);
    }
    let mut right_ok: bool = true;
    if (node.right != -1) {
        right_ok = is_sum_node(nodes, node.right);
    }
    return (left_ok && right_ok)
};
    fn build_a_tree() -> Vec<Node> {
    return vec![Node {value: 11, left: 1, right: 2}, Node {value: 2, left: 3, right: 4}, Node {value: 29, left: 5, right: 6}, Node {value: 1, left: -1, right: -1}, Node {value: 7, left: -1, right: -1}, Node {value: 15, left: -1, right: -1}, Node {value: 40, left: 7, right: -1}, Node {value: 35, left: -1, right: -1}]
};
    fn build_a_sum_tree() -> Vec<Node> {
    return vec![Node {value: 26, left: 1, right: 2}, Node {value: 10, left: 3, right: 4}, Node {value: 3, left: -1, right: 5}, Node {value: 4, left: -1, right: -1}, Node {value: 6, left: -1, right: -1}, Node {value: 3, left: -1, right: -1}]
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
