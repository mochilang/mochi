// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    val: i64,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Info {
    is_bst: bool,
    min_val: i64,
    max_val: i64,
    total: i64,
    best: i64,
}
impl std::fmt::Display for Info {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"is_bst\": {}", self.is_bst)?;
        write!(f, ", ")?;
        write!(f, "\"min_val\": {}", self.min_val)?;
        write!(f, ", ")?;
        write!(f, "\"max_val\": {}", self.max_val)?;
        write!(f, ", ")?;
        write!(f, "\"total\": {}", self.total)?;
        write!(f, ", ")?;
        write!(f, "\"best\": {}", self.best)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    }
    return b
};
    fn max_int(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    }
    return b
};
    fn solver(mut nodes: Vec<Node>, mut idx: i64) -> Info {
    if (idx == (0 - 1)) {
        return Info {is_bst: true, min_val: 2147483647, max_val: -2147483648, total: 0, best: 0}
    }
    let mut node: Node = nodes[idx as usize].clone();
    let mut left_info: Info = solver(nodes.clone(), node.left);
    let mut right_info: Info = solver(nodes.clone(), node.right);
    let mut current_best: i64 = max_int(left_info.best, right_info.best);
    if (((left_info.is_bst && right_info.is_bst) && (left_info.max_val < node.val)) && (node.val < right_info.min_val)) {
        let mut sum_val: i64 = ((left_info.total + right_info.total) + node.val);
        current_best = max_int(current_best, sum_val);
        return Info {is_bst: true, min_val: min_int(left_info.min_val, node.val), max_val: max_int(right_info.max_val, node.val), total: sum_val, best: current_best}
    }
    return Info {is_bst: false, min_val: 0, max_val: 0, total: 0, best: current_best}
};
    fn max_sum_bst(mut nodes: Vec<Node>, mut root: i64) -> i64 {
    let mut info: Info = solver(nodes.clone(), root);
    return info.best
};
    fn mochi_main() {
    let mut t1_nodes: Vec<Node> = vec![Node {val: 4, left: 1, right: (0 - 1)}, Node {val: 3, left: 2, right: 3}, Node {val: 1, left: (0 - 1), right: (0 - 1)}, Node {val: 2, left: (0 - 1), right: (0 - 1)}];
    println!("{}", max_sum_bst(t1_nodes.clone(), 0));
    let mut t2_nodes: Vec<Node> = vec![Node {val: -4, left: 1, right: 2}, Node {val: -2, left: (0 - 1), right: (0 - 1)}, Node {val: -5, left: (0 - 1), right: (0 - 1)}];
    println!("{}", max_sum_bst(t2_nodes.clone(), 0));
    let mut t3_nodes: Vec<Node> = vec![Node {val: 1, left: 1, right: 2}, Node {val: 4, left: 3, right: 4}, Node {val: 3, left: 5, right: 6}, Node {val: 2, left: (0 - 1), right: (0 - 1)}, Node {val: 4, left: (0 - 1), right: (0 - 1)}, Node {val: 2, left: (0 - 1), right: (0 - 1)}, Node {val: 5, left: 7, right: 8}, Node {val: 4, left: (0 - 1), right: (0 - 1)}, Node {val: 6, left: (0 - 1), right: (0 - 1)}];
    println!("{}", max_sum_bst(t3_nodes.clone(), 0));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
