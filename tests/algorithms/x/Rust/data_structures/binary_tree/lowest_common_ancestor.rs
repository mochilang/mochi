// Generated by Mochi transpiler v0.10.60
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow2(mut exp: i64) -> i64 {
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        res = (res * 2);
        i = (i + 1);
    }
    return res
};
    fn create_sparse(mut max_node: i64, mut parent: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut j: i64 = 1;
    while (pow2(j) < max_node) {
        let mut i: i64 = 1;
        while (i <= max_node) {
            parent[j as usize][i as usize] = parent[(j - 1) as usize].clone()[parent[(j - 1) as usize].clone()[i as usize] as usize];
            i = (i + 1);
        }
        j = (j + 1);
    }
    return parent
};
    fn lowest_common_ancestor(mut u: i64, mut v: i64, mut level: Vec<i64>, mut parent: Vec<Vec<i64>>) -> i64 {
    if (level[u as usize] < level[v as usize]) {
        let mut temp: i64 = u;
        u = v;
        v = temp;
    }
    let mut i: i64 = 18;
    while (i >= 0) {
        if ((level[u as usize] - pow2(i)) >= level[v as usize]) {
            u = parent[i as usize].clone()[u as usize];
        }
        i = (i - 1);
    }
    if (u == v) {
        return u
    }
    i = 18;
    while (i >= 0) {
        let mut pu: i64 = parent[i as usize].clone()[u as usize];
        let mut pv: i64 = parent[i as usize].clone()[v as usize];
        if ((pu != 0) && (pu != pv)) {
            u = pu;
            v = pv;
        }
        i = (i - 1);
    }
    return parent[0 as usize].clone()[u as usize]
};
    fn breadth_first_search(level: &mut Vec<i64>, parent: &mut Vec<Vec<i64>>, mut max_node: i64, graph: &HashMap<i64, Vec<i64>>, mut root: i64) {
    (*level)[root as usize] = 0;
    let mut q: Vec<i64> = vec![];
    q = { let mut _v = q.clone(); _v.push(root); _v };
    let mut head: i64 = 0;
    while (head < (q.len() as i64)) {
        let mut u: i64 = q[head as usize];
        head = (head + 1);
        let mut adj: Vec<i64> = graph.get(&u).cloned().unwrap_or_default();
        let mut j: i64 = 0;
        while (j < (adj.len() as i64)) {
            let mut v: i64 = adj[j as usize];
            if (level[v as usize] == (0 - 1)) {
                (*level)[v as usize] = (level[u as usize] + 1);
                (*parent)[0 as usize][v as usize] = u;
                q = { let mut _v = q.clone(); _v.push(v); _v };
            }
            j = (j + 1);
        }
    }
};
    fn mochi_main() {
    let mut max_node: i64 = 13;
    let mut parent: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < 20) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (max_node + 10)) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        parent = { let mut _v = parent.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    let mut level: Vec<i64> = vec![];
    i = 0;
    while (i < (max_node + 10)) {
        level = { let mut _v = level.clone(); _v.push((0 - 1)); _v };
        i = (i + 1);
    }
    let mut graph: HashMap<i64, Vec<i64>> = HashMap::new();
    graph.insert(1.clone(), vec![2, 3, 4]);
    graph.insert(2.clone(), vec![5]);
    graph.insert(3.clone(), vec![6, 7]);
    graph.insert(4.clone(), vec![8]);
    graph.insert(5.clone(), vec![9, 10]);
    graph.insert(6.clone(), vec![11]);
    graph.insert(7.clone(), vec![]);
    graph.insert(8.clone(), vec![12, 13]);
    graph.insert(9.clone(), vec![]);
    graph.insert(10.clone(), vec![]);
    graph.insert(11.clone(), vec![]);
    graph.insert(12.clone(), vec![]);
    graph.insert(13.clone(), vec![]);
    breadth_first_search(&mut level, &mut parent, max_node, &graph, 1);
    parent = create_sparse(max_node, parent.clone());
    println!("{}", format!("{}{}", "LCA of node 1 and 3 is: ", lowest_common_ancestor(1, 3, level.clone(), parent.clone()).to_string()));
    println!("{}", format!("{}{}", "LCA of node 5 and 6 is: ", lowest_common_ancestor(5, 6, level.clone(), parent.clone()).to_string()));
    println!("{}", format!("{}{}", "LCA of node 7 and 11 is: ", lowest_common_ancestor(7, 11, level.clone(), parent.clone()).to_string()));
    println!("{}", format!("{}{}", "LCA of node 6 and 7 is: ", lowest_common_ancestor(6, 7, level.clone(), parent.clone()).to_string()));
    println!("{}", format!("{}{}", "LCA of node 4 and 12 is: ", lowest_common_ancestor(4, 12, level.clone(), parent.clone()).to_string()));
    println!("{}", format!("{}{}", "LCA of node 8 and 8 is: ", lowest_common_ancestor(8, 8, level.clone(), parent.clone()).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
