// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    minn: i64,
    maxx: i64,
    map_left: Vec<i64>,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"minn\": {}", self.minn)?;
        write!(f, ", ")?;
        write!(f, "\"maxx\": {}", self.maxx)?;
        write!(f, ", ")?;
        write!(f, "\"map_left\": {:?}", self.map_left)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

static mut g_nodes: Vec<Node> = Vec::new();
static mut g_test_array: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_nodes = vec![];
        g_test_array = vec![2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7];
                let _start: i64 = _now();
        unsafe fn make_list(mut length: i64, mut value: i64) -> Vec<i64> {
    let mut lst: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < length) {
        lst = { let mut _v = lst.clone(); _v.push(value); _v };
        i = (i + 1);
    }
    return lst
};
        unsafe fn min_list(mut arr: Vec<i64>) -> i64 {
    let mut m: i64 = arr[0 as usize];
    let mut i: i64 = 1;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize] < m) {
            m = arr[i as usize];
        }
        i = (i + 1);
    }
    return m
};
        unsafe fn max_list(mut arr: Vec<i64>) -> i64 {
    let mut m: i64 = arr[0 as usize];
    let mut i: i64 = 1;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize] > m) {
            m = arr[i as usize];
        }
        i = (i + 1);
    }
    return m
};
        unsafe fn build_tree(mut arr: Vec<i64>) -> i64 {
    let mut n: Node = Node {minn: min_list(arr.clone()), maxx: max_list(arr.clone()), map_left: make_list((arr.len() as i64), 0), left: -1, right: -1};
    if (n.minn == n.maxx) {
        g_nodes = { let mut _v = g_nodes.clone().clone(); _v.push(n.clone()); _v };
        return ((g_nodes.clone().len() as i64) - 1)
    }
    let mut pivot: i64 = ((n.minn + n.maxx) / 2);
    let mut left_arr: Vec<i64> = vec![];
    let mut right_arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut num: i64 = arr[i as usize];
        if (num <= pivot) {
            left_arr = { let mut _v = left_arr.clone(); _v.push(num); _v };
        } else {
            right_arr = { let mut _v = right_arr.clone(); _v.push(num); _v };
        }
        let mut ml: Vec<i64> = n.map_left;
        ml[i as usize] = (left_arr.len() as i64);
        n.map_left = ml.clone();
        i = (i + 1);
    }
    if ((left_arr.len() as i64) > 0) {
        n.left = build_tree(left_arr.clone());
    }
    if ((right_arr.len() as i64) > 0) {
        n.right = build_tree(right_arr.clone());
    }
    g_nodes = { let mut _v = g_nodes.clone().clone(); _v.push(n.clone()); _v };
    return ((g_nodes.clone().len() as i64) - 1)
};
        unsafe fn rank_till_index(mut node_idx: i64, mut num: i64, mut index: i64) -> i64 {
    if ((index < 0) || (node_idx < 0)) {
        return 0
    }
    let mut node: Node = g_nodes.clone()[node_idx as usize].clone();
    if (node.minn == node.maxx) {
        if (node.minn == num) {
            return (index + 1)
        } else {
            return 0
        }
    }
    let mut pivot: i64 = ((node.minn + node.maxx) / 2);
    if (num <= pivot) {
        return rank_till_index(node.left, num, (node.map_left[index as usize] - 1))
    } else {
        return rank_till_index(node.right, num, (index - node.map_left[index as usize]))
    }
};
        unsafe fn rank(mut node_idx: i64, mut num: i64, mut start: i64, mut end: i64) -> i64 {
    if (start > end) {
        return 0
    }
    let mut rank_till_end: i64 = rank_till_index(node_idx, num, end);
    let mut rank_before_start: i64 = rank_till_index(node_idx, num, (start - 1));
    return (rank_till_end - rank_before_start)
};
        unsafe fn quantile(mut node_idx: i64, mut index: i64, mut start: i64, mut end: i64) -> i64 {
    if (((index > (end - start)) || (start > end)) || (node_idx < 0)) {
        return -1
    }
    let mut node: Node = g_nodes.clone()[node_idx as usize].clone();
    if (node.minn == node.maxx) {
        return node.minn
    }
    let mut left_start: i64 = if (start == 0) { 0 } else { node.map_left[(start - 1) as usize] };
    let mut num_left: i64 = (node.map_left[end as usize] - left_start);
    if (num_left > index) {
        return quantile(node.left, index, left_start, (node.map_left[end as usize] - 1))
    } else {
        return quantile(node.right, (index - num_left), (start - left_start), (end - node.map_left[end as usize]))
    }
};
        unsafe fn range_counting(mut node_idx: i64, mut start: i64, mut end: i64, mut start_num: i64, mut end_num: i64) -> i64 {
    if (((start > end) || (node_idx < 0)) || (start_num > end_num)) {
        return 0
    }
    let mut node: Node = g_nodes.clone()[node_idx as usize].clone();
    if ((node.minn > end_num) || (node.maxx < start_num)) {
        return 0
    }
    if ((start_num <= node.minn) && (node.maxx <= end_num)) {
        return ((end - start) + 1)
    }
    let mut left: i64 = range_counting(node.left, if (start == 0) { 0 } else { node.map_left[(start - 1) as usize] }, (node.map_left[end as usize] - 1), start_num, end_num);
    let mut right: i64 = range_counting(node.right, (start - if (start == 0) { 0 } else { node.map_left[(start - 1) as usize] }), (end - node.map_left[end as usize]), start_num, end_num);
    return (left + right)
};
        let mut root: i64 = build_tree(g_test_array.clone().clone());
        println!("{}", format!("{}{}", "rank_till_index 6 at 6 -> ", rank_till_index(root, 6, 6).to_string()));
        println!("{}", format!("{}{}", "rank 6 in [3,13] -> ", rank(root, 6, 3, 13).to_string()));
        println!("{}", format!("{}{}", "quantile index 2 in [2,5] -> ", quantile(root, 2, 2, 5).to_string()));
        println!("{}", format!("{}{}", "range_counting [3,7] in [1,10] -> ", range_counting(root, 1, 10, 3, 7).to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
