// Generated by Mochi transpiler v0.10.60
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn binary_tree_mirror_dict(tree: &mut HashMap<i64, Vec<i64>>, mut root: i64) {
    if ((root == 0) || !tree.contains_key(&root)) {
        return
    }
    let mut children: Vec<i64> = tree.get(&root).cloned().unwrap_or_default();
    let mut left: i64 = children[0 as usize];
    let mut right: i64 = children[1 as usize];
    (*tree).insert(root.clone(), vec![right, left]);
    binary_tree_mirror_dict(tree, left);
    binary_tree_mirror_dict(tree, right);
};
    fn binary_tree_mirror(binary_tree: &HashMap<i64, Vec<i64>>, mut root: i64) -> HashMap<i64, Vec<i64>> {
    if ((binary_tree.len() as i64) == 0) {
        panic!("binary tree cannot be empty");
    }
    if !binary_tree.contains_key(&root) {
        panic!("{}", format!("{}{}", format!("{}{}", "root ", root.to_string()), " is not present in the binary_tree"));
    }
    let mut tree_copy: HashMap<i64, Vec<i64>> = HashMap::new();
    for k in binary_tree.keys().cloned() {
        tree_copy.insert(k.clone(), binary_tree.get(&k).cloned().unwrap_or_default());
    }
    binary_tree_mirror_dict(&mut tree_copy, root);
    return tree_copy
};
    fn mochi_main() {
    let mut binary_tree: HashMap<i64, Vec<i64>> = HashMap::from([(1, vec![2, 3]), (2, vec![4, 5]), (3, vec![6, 7]), (7, vec![8, 9])]);
    println!("{}", format!("{}{}", "Binary tree: ", format!("{:?}", binary_tree)));
    let mut mirrored: HashMap<i64, Vec<i64>> = binary_tree_mirror(&binary_tree, 1);
    println!("{}", format!("{}{}", "Binary tree mirror: ", format!("{:?}", mirrored)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
