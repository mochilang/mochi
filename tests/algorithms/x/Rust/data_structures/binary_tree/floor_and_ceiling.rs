// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    key: i64,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"key\": {}", self.key)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

static mut g_tree: Vec<Node> = Vec::new();
fn main() {
    unsafe {
        g_tree = vec![Node {key: 10, left: 1, right: 2}, Node {key: 5, left: 3, right: 4}, Node {key: 20, left: 5, right: 6}, Node {key: 3, left: -1, right: -1}, Node {key: 7, left: -1, right: -1}, Node {key: 15, left: -1, right: -1}, Node {key: 25, left: -1, right: -1}];
                let _start: i64 = _now();
        unsafe fn inorder(nodes: &mut Vec<Node>, mut idx: i64) -> Vec<i64> {
    if (idx == -1) {
        return vec![]
    }
    let mut node: Node = nodes[idx as usize].clone();
    let mut result: Vec<i64> = inorder(nodes, node.left);
    result = { let mut _v = result.clone(); _v.push(node.key); _v };
    result = vec![result, inorder(nodes, node.right)].concat();
    return result
};
        unsafe fn floor_ceiling(mut nodes: Vec<Node>, mut idx: i64, mut key: i64) -> Vec<i64> {
    let mut floor_val = Default::default();
    let mut ceiling_val = Default::default();
    let mut current: i64 = idx;
    while (current != -1) {
        let mut node: Node = nodes[current as usize].clone();
        if (node.key == key) {
            floor_val = node.key;
            ceiling_val = node.key;
            break
        }
        if (key < node.key) {
            ceiling_val = node.key;
            current = node.left;
        } else {
            floor_val = node.key;
            current = node.right;
        }
    }
    return vec![floor_val, ceiling_val]
};
        println!("{}", format!("{:?}", inorder(&mut g_tree, 0)));
        println!("{}", format!("{:?}", floor_ceiling(g_tree.clone().clone(), 0, 8)));
        println!("{}", format!("{:?}", floor_ceiling(g_tree.clone().clone(), 0, 14)));
        println!("{}", format!("{:?}", floor_ceiling(g_tree.clone().clone(), 0, -1)));
        println!("{}", format!("{:?}", floor_ceiling(g_tree.clone().clone(), 0, 30)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
