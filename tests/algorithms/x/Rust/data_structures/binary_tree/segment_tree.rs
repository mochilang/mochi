// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_A: Vec<i64> = Vec::new();
static mut g_N: i64 = 0;
static mut g_st: Vec<i64> = Vec::new();
static mut g_NEG_INF: i64 = 0;
fn main() {
    unsafe {
        g_A = vec![];
        g_N = 0;
        g_st = vec![];
        g_NEG_INF = -1000000000;
                let _start: i64 = _now();
        unsafe fn left_child(mut idx: i64) -> i64 {
    return (idx * 2)
};
        unsafe fn right_child(mut idx: i64) -> i64 {
    return ((idx * 2) + 1)
};
        unsafe fn build(mut idx: i64, mut left: i64, mut right: i64) {
    if (left == right) {
        g_st[idx as usize] = g_A.clone()[left as usize];
    } else {
        let mut mid: i64 = ((left + right) / 2);
        build(left_child(idx), left, mid);
        build(right_child(idx), (mid + 1), right);
        let mut left_val: i64 = g_st.clone()[left_child(idx) as usize];
        let mut right_val: i64 = g_st.clone()[right_child(idx) as usize];
        g_st[idx as usize] = if (left_val > right_val) { left_val } else { right_val };
    }
};
        unsafe fn update_recursive(mut idx: i64, mut left: i64, mut right: i64, mut a: i64, mut b: i64, mut val: i64) -> bool {
    if ((right < a) || (left > b)) {
        return true
    }
    if (left == right) {
        g_st[idx as usize] = val;
        return true
    }
    let mut mid: i64 = ((left + right) / 2);
    update_recursive(left_child(idx), left, mid, a, b, val);
    update_recursive(right_child(idx), (mid + 1), right, a, b, val);
    let mut left_val: i64 = g_st.clone()[left_child(idx) as usize];
    let mut right_val: i64 = g_st.clone()[right_child(idx) as usize];
    g_st[idx as usize] = if (left_val > right_val) { left_val } else { right_val };
    return true
};
        unsafe fn update(mut a: i64, mut b: i64, mut val: i64) -> bool {
    return update_recursive(1, 0, (g_N - 1), (a - 1), (b - 1), val)
};
        unsafe fn query_recursive(mut idx: i64, mut left: i64, mut right: i64, mut a: i64, mut b: i64) -> i64 {
    if ((right < a) || (left > b)) {
        return g_NEG_INF
    }
    if ((left >= a) && (right <= b)) {
        return g_st.clone()[idx as usize]
    }
    let mut mid: i64 = ((left + right) / 2);
    let mut q1: i64 = query_recursive(left_child(idx), left, mid, a, b);
    let mut q2: i64 = query_recursive(right_child(idx), (mid + 1), right, a, b);
    return if (q1 > q2) { q1 } else { q2 }
};
        unsafe fn query(mut a: i64, mut b: i64) -> i64 {
    return query_recursive(1, 0, (g_N - 1), (a - 1), (b - 1))
};
        unsafe fn show_data() {
    let mut i: i64 = 0;
    let mut show_list: Vec<i64> = vec![];
    while (i < g_N) {
        show_list = { let mut _v = show_list.clone(); _v.push(query((i + 1), (i + 1))); _v };
        i = (i + 1);
    }
    println!("{:?}", show_list);
};
        unsafe fn mochi_main() {
    g_A = vec![1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8];
    g_N = (g_A.clone().len() as i64);
    let mut i: i64 = 0;
    while (i < (4 * g_N)) {
        g_st = { let mut _v = g_st.clone().clone(); _v.push(0); _v };
        i = (i + 1);
    }
    if (g_N > 0) {
        build(1, 0, (g_N - 1));
    }
    println!("{}", query(4, 6));
    println!("{}", query(7, 11));
    println!("{}", query(7, 12));
    update(1, 3, 111);
    println!("{}", query(1, 15));
    update(7, 8, 235);
    show_data();
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
