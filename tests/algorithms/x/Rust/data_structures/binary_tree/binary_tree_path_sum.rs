// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone)]
enum Tree {
    Empty,
    Node { left: Box<Tree>, value: i64, right: Box<Tree> },
}

fn main() {
        let _start: i64 = _now();
    fn dfs(mut node: Tree, mut target: i64, mut current: i64) -> i64 {
    return match node { Tree::Empty => 0, Tree::Node { left: l, value: v, right: r } => ((if ((current + v) == target) { 1 } else { 0 } + dfs(*l.clone(), target, (current + v))) + dfs(*r.clone(), target, (current + v))), }
};
    fn path_sum(mut node: Tree, mut target: i64) -> i64 {
    return match node.clone() { Tree::Empty => 0, Tree::Node { left: l, value: v, right: r } => ((dfs(node.clone(), target, 0) + path_sum(*l.clone(), target)) + path_sum(*r.clone(), target)), }
};
    fn sample_tree_one() -> Tree {
    return Tree::Node { value: 10, left: Box::new(Tree::Node { value: 5, left: Box::new(Tree::Node { value: 3, left: Box::new(Tree::Node { value: 3, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()), right: Box::new(Tree::Node { value: -2, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()) }.clone()), right: Box::new(Tree::Node { value: 2, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Node { value: 1, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()) }.clone()) }.clone()), right: Box::new(Tree::Node { value: -3, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Node { value: 11, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()) }.clone()) }
};
    fn sample_tree_two() -> Tree {
    return Tree::Node { value: 10, left: Box::new(Tree::Node { value: 5, left: Box::new(Tree::Node { value: 3, left: Box::new(Tree::Node { value: 3, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()), right: Box::new(Tree::Node { value: -2, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()) }.clone()), right: Box::new(Tree::Node { value: 2, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Node { value: 1, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()) }.clone()) }.clone()), right: Box::new(Tree::Node { value: -3, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Node { value: 10, left: Box::new(Tree::Empty.clone()), right: Box::new(Tree::Empty.clone()) }.clone()) }.clone()) }
};
    let mut mochi_main = || {
    let tree1: Tree = sample_tree_one();
    println!("{}", path_sum(tree1.clone(), 8));
    println!("{}", path_sum(tree1.clone(), 7));
    let tree2: Tree = sample_tree_two();
    println!("{}", path_sum(tree2.clone(), 8));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
