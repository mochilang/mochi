// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_arr1: Vec<i64> = Vec::new();
static mut g_arr2: Vec<i64> = Vec::new();
static mut g_arr3: Vec<i64> = Vec::new();
static mut g_arr4: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_arr1 = vec![1, 2, 3];
        g_arr2 = vec![3, 1, 2];
        g_arr3 = vec![2, 3, 1];
        g_arr4 = vec![1, 5, 7, -1, 6];
                let _start: i64 = _now();
        unsafe fn build(mut arr: Vec<i64>, combine: &mut impl FnMut(i64, i64) -> i64) -> Vec<i64> {
    let mut n = (arr.len() as i64);
    let mut st: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (2 * n)) {
        st = { let mut _v = st.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        st[(n + i) as usize] = arr[i as usize];
        i = (i + 1);
    }
    i = (n - 1);
    while (i > 0) {
        st[i as usize] = combine(st[(i * 2) as usize], st[((i * 2) + 1) as usize]);
        i = (i - 1);
    }
    return st
};
        unsafe fn update(st: &mut Vec<i64>, mut n: i64, combine: &mut impl FnMut(i64, i64) -> i64, mut p: i64, mut v: i64) {
    let mut idx: i64 = (p + n);
    (*st)[idx as usize] = v;
    while (idx > 1) {
        idx = (idx / 2);
        (*st)[idx as usize] = combine(st[(idx * 2) as usize], st[((idx * 2) + 1) as usize]);
    }
};
        unsafe fn query(mut st: Vec<i64>, mut n: i64, combine: &mut impl FnMut(i64, i64) -> i64, mut left: i64, mut right: i64) -> i64 {
    let mut l: i64 = (left + n);
    let mut r: i64 = (right + n);
    let mut res: i64 = 0;
    let mut has: bool = false;
    while (l <= r) {
        if ((l % 2) == 1) {
            if !has {
                res = st[l as usize];
                has = true;
            } else {
                res = combine(res, st[l as usize]);
            }
            l = (l + 1);
        }
        if ((r % 2) == 0) {
            if !has {
                res = st[r as usize];
                has = true;
            } else {
                res = combine(res, st[r as usize]);
            }
            r = (r - 1);
        }
        l = (l / 2);
        r = (r / 2);
    }
    return res
};
        unsafe fn add(mut a: i64, mut b: i64) -> i64 {
    return (a + b)
};
        unsafe fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    } else {
        return b
    }
};
        unsafe fn max_int(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    } else {
        return b
    }
};
        let mut st1: Vec<i64> = build(g_arr1.clone().clone(), &mut add);
        println!("{}", query(st1.clone(), (g_arr1.clone().len() as i64), &mut add, 0, 2).to_string());
        let mut st2: Vec<i64> = build(g_arr2.clone().clone(), &mut min_int);
        println!("{}", query(st2.clone(), (g_arr2.clone().len() as i64), &mut min_int, 0, 2).to_string());
        let mut st3: Vec<i64> = build(g_arr3.clone().clone(), &mut max_int);
        println!("{}", query(st3.clone(), (g_arr3.clone().len() as i64), &mut max_int, 0, 2).to_string());
        let mut n4: i64 = (g_arr4.clone().len() as i64);
        let mut st4: Vec<i64> = build(g_arr4.clone().clone(), &mut add);
        update(&mut st4, n4, &mut add, 1, -1);
        update(&mut st4, n4, &mut add, 2, 3);
        println!("{}", query(st4.clone(), n4, &mut add, 1, 2).to_string());
        println!("{}", query(st4.clone(), n4, &mut add, 1, 1).to_string());
        update(&mut st4, n4, &mut add, 4, 1);
        println!("{}", query(st4.clone(), n4, &mut add, 3, 4).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
