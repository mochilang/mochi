// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_seed: i64 = 0;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        unsafe fn rand() -> i64 {
    g_seed = (((g_seed * 1103515245) + 12345) % 2147483648);
    return g_seed
};
        unsafe fn random() -> f64 {
    return ((rand() as f64) / 2147483648.0)
};
        unsafe fn hypercube_points(mut num_points: i64, mut hypercube_size: f64, mut num_dimensions: i64) -> Vec<Vec<f64>> {
    let mut points: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < num_points) {
        let mut point: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < num_dimensions) {
            let mut value: f64 = (hypercube_size * random());
            point = { let mut _v = point.clone(); _v.push(value); _v };
            j = (j + 1);
        }
        points = { let mut _v = points.clone(); _v.push(point.clone()); _v };
        i = (i + 1);
    }
    return points
};
        let mut pts: Vec<Vec<f64>> = hypercube_points(3, 1.0, 2);
        println!("{:?}", pts);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
