// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    point: Vec<f64>,
    left: i64,
    right: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct BuildResult {
    index: i64,
    nodes: Vec<Node>,
}
impl std::fmt::Display for BuildResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"index\": {}", self.index)?;
        write!(f, ", ")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct SearchResult {
    point: Vec<f64>,
    dist: f64,
    visited: i64,
}
impl std::fmt::Display for SearchResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"dist\": {}", self.dist)?;
        write!(f, ", ")?;
        write!(f, "\"visited\": {}", self.visited)?;
        write!(f, "}}")
    }
}

static mut g_seed: i64 = 1;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand() -> i64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return unsafe { g_seed.clone() }
};
        fn random() -> f64 {
    return ((1.0 * (rand() as f64)) / 2147483648.0)
};
        fn hypercube_points(mut num_points: i64, mut cube_size: f64, mut num_dimensions: i64) -> Vec<Vec<f64>> {
    let mut pts: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < num_points) {
        let mut p: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < num_dimensions) {
            p = { let mut _v = p.clone(); _v.push((cube_size * random())); _v };
            j = (j + 1);
        }
        pts = { let mut _v = pts.clone(); _v.push(p.clone()); _v };
        i = (i + 1);
    }
    return pts
};
        fn sort_points(mut points: Vec<Vec<f64>>, mut axis: i64) -> Vec<Vec<f64>> {
    let n: i64 = (points.len() as i64);
    let mut i: i64 = 1;
    while (i < n) {
        let mut key: Vec<f64> = points[i as usize].clone();
        let mut j: i64 = (i - 1);
        while ((j >= 0) && (points[j as usize].clone()[axis as usize] > key[axis as usize])) {
            points[(j + 1) as usize] = points[j as usize].clone();
            j = (j - 1);
        }
        points[(j + 1) as usize] = key.clone();
        i = (i + 1);
    }
    return points
};
        fn sublist(mut arr: Vec<Vec<f64>>, mut start: i64, mut end: i64) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut i: i64 = start;
    while (i < end) {
        res = { let mut _v = res.clone(); _v.push(arr[i as usize].clone()); _v };
        i = (i + 1);
    }
    return res
};
        fn shift_nodes(mut nodes: Vec<Node>, mut offset: i64) -> Vec<Node> {
    let mut i: i64 = 0;
    while (i < (nodes.len() as i64)) {
        if (nodes[i as usize].clone().left != (-1)) {
            nodes[i as usize].left = (nodes[i as usize].clone().left + offset);
        }
        if (nodes[i as usize].clone().right != (-1)) {
            nodes[i as usize].right = (nodes[i as usize].clone().right + offset);
        }
        i = (i + 1);
    }
    return nodes
};
        fn build_kdtree(mut points: Vec<Vec<f64>>, mut depth: i64) -> BuildResult {
    if ((points.len() as i64) == 0) {
        return BuildResult {index: (-1), nodes: vec![]}
    }
    let k: i64 = (points[0 as usize].clone().len() as i64);
    let axis: i64 = (depth % k);
    points = sort_points(points.clone(), axis);
    let median: i64 = ((points.len() as i64) / 2);
    let left_points: Vec<Vec<f64>> = sublist(points.clone(), 0, median);
    let right_points: Vec<Vec<f64>> = sublist(points.clone(), (median + 1), (points.len() as i64));
    let left_res: BuildResult = build_kdtree(left_points.clone(), (depth + 1));
    let right_res: BuildResult = build_kdtree(right_points.clone(), (depth + 1));
    let offset: i64 = ((left_res.nodes.clone().len() as i64) + 1);
    let shifted_right: Vec<Node> = shift_nodes(right_res.nodes.clone().clone(), offset);
    let mut nodes: Vec<Node> = left_res.nodes.clone();
    let left_index: i64 = left_res.index;
    let right_index: i64 = if (right_res.index == (-1)) { (-1) } else { (right_res.index + offset) };
    nodes = { let mut _v = nodes.clone(); _v.push(Node {point: points[median as usize].clone(), left: left_index, right: right_index}); _v };
    nodes = vec![nodes.clone(), shifted_right.clone()].concat();
    let root_index: i64 = (left_res.nodes.clone().len() as i64);
    return BuildResult {index: root_index, nodes: nodes.clone()}
};
        fn square_distance(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let diff: f64 = (a[i as usize] - b[i as usize]);
        sum = (sum + (diff * diff));
        i = (i + 1);
    }
    return sum
};
        fn nearest_neighbour_search(mut tree: Vec<Node>, mut root: i64, mut query_point: Vec<f64>) -> SearchResult {
    let mut nearest_point: Vec<f64> = vec![];
    let mut nearest_dist: f64 = 0.0;
    let mut visited: i64 = 0;
    let mut i: i64 = 0;
    while (i < (tree.len() as i64)) {
        let node: Node = tree[i as usize].clone();
        let dist: f64 = square_distance(query_point.clone(), node.point.clone().clone());
        visited = (visited + 1);
        if ((visited == 1) || (dist < nearest_dist)) {
            nearest_point = node.point.clone();
            nearest_dist = dist;
        }
        i = (i + 1);
    }
    return SearchResult {point: nearest_point.clone(), dist: nearest_dist, visited: visited}
};
        fn list_to_string(mut arr: Vec<f64>) -> String {
    let mut s: String = String::from("[");
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        s = format!("{}{}", s, arr[i as usize].to_string());
        if (i < ((arr.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    return format!("{}{}", s, "]").clone()
};
        let mut mochi_main = || {
    let num_points: i64 = 5000;
    let cube_size: f64 = 10.0;
    let num_dimensions: i64 = 10;
    let mut pts: Vec<Vec<f64>> = hypercube_points(num_points, cube_size, num_dimensions);
    let build: BuildResult = build_kdtree(pts.clone(), 0);
    let root: i64 = build.index;
    let tree: Vec<Node> = build.nodes.clone();
    let mut query: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < num_dimensions) {
        query = { let mut _v = query.clone(); _v.push(random()); _v };
        i = (i + 1);
    }
    let res: SearchResult = nearest_neighbour_search(tree.clone(), root, query.clone());
    println!("{}", format!("{}{}", "Query point: ", list_to_string(query.clone())));
    println!("{}", format!("{}{}", "Nearest point: ", list_to_string(res.point.clone().clone())));
    println!("{}", format!("{}{}", "Distance: ", res.dist.to_string()));
    println!("{}", format!("{}{}", "Nodes visited: ", res.visited.to_string()));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
