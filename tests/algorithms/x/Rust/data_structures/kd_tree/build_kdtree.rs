// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct KDNode {
    point: Vec<f64>,
    left: i64,
    right: i64,
}
impl std::fmt::Display for KDNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

static mut g_tree: Vec<KDNode> = Vec::new();
static mut g_pts: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_tree = vec![];
        g_pts = vec![vec![2.0, 3.0], vec![5.0, 4.0], vec![9.0, 6.0], vec![4.0, 7.0], vec![8.0, 1.0], vec![7.0, 2.0]];
                let _start: i64 = _now();
        unsafe fn sort_points(mut points: Vec<Vec<f64>>, mut axis: i64) -> Vec<Vec<f64>> {
    let mut arr: Vec<Vec<f64>> = points.clone();
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut j: i64 = 0;
        while (j < ((arr.len() as i64) - 1)) {
            if (arr[j as usize].clone()[axis as usize] > arr[(j + 1) as usize].clone()[axis as usize]) {
                let mut tmp: Vec<f64> = arr[j as usize].clone();
                arr[j as usize] = arr[(j + 1) as usize].clone();
                arr[(j + 1) as usize] = tmp.clone();
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
        unsafe fn build_kdtree(mut points: Vec<Vec<f64>>, mut depth: i64) -> i64 {
    if ((points.len() as i64) == 0) {
        return (0 - 1)
    }
    let mut k = (points[0 as usize].clone().len() as i64);
    let mut axis: i64 = (depth % k);
    let mut sorted: Vec<Vec<f64>> = sort_points(points.clone(), axis);
    let mut median_idx = ((sorted.len() as i64) / 2);
    let mut left_points: Vec<Vec<f64>> = sorted[0 as usize..median_idx as usize].to_vec();
    let mut right_points: Vec<Vec<f64>> = sorted[(median_idx + 1) as usize..(sorted.len() as i64) as usize].to_vec();
    let mut idx = (g_tree.clone().len() as i64);
    g_tree = { let mut _v = g_tree.clone().clone(); _v.push(KDNode {point: sorted[median_idx as usize].clone(), left: (0 - 1), right: (0 - 1)}); _v };
    let mut left_idx: i64 = build_kdtree(left_points.clone(), (depth + 1));
    let mut right_idx: i64 = build_kdtree(right_points.clone(), (depth + 1));
    let mut node: KDNode = g_tree.clone()[idx as usize].clone();
    node.left = left_idx;
    node.right = right_idx;
    g_tree[idx as usize] = node.clone();
    return idx
};
        let mut root: i64 = build_kdtree(g_pts.clone().clone(), 0);
        println!("{}", format!("{:?}", g_tree.clone()));
        println!("{}", root);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
