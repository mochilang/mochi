// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct KDNode {
    point: Vec<f64>,
    left: i64,
    right: i64,
}
impl std::fmt::Display for KDNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_kd_node(mut point: Vec<f64>, mut left: i64, mut right: i64) -> KDNode {
    return KDNode {point: point.clone(), left: left, right: right}
};
    let mut nodes: Vec<KDNode> = vec![];
    nodes = { let mut _v = nodes.clone(); _v.push(make_kd_node(vec![2.0, 3.0], 1, 2)); _v };
    nodes = { let mut _v = nodes.clone(); _v.push(make_kd_node(vec![1.0, 5.0], -1, -1)); _v };
    nodes = { let mut _v = nodes.clone(); _v.push(make_kd_node(vec![4.0, 2.0], -1, -1)); _v };
    let root: KDNode = nodes[0 as usize].clone();
    let left_child: KDNode = nodes[1 as usize].clone();
    let right_child: KDNode = nodes[2 as usize].clone();
    println!("{}", format!("{:?}", root.point.clone()));
    println!("{}", root.left.to_string());
    println!("{}", root.right.to_string());
    println!("{}", format!("{:?}", left_child.point.clone()));
    println!("{}", format!("{:?}", right_child.point.clone()));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
