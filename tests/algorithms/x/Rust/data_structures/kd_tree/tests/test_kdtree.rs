// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_INF: f64 = 1000000000.0;
static mut g_seed: i64 = 1;
fn main() {
    unsafe {
        g_seed = 1;
                let _start: i64 = _now();
        fn rand_float() -> f64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 1103515245) + 12345) % 2147483648) };
    return ((unsafe { g_seed.clone() } as f64) / 2147483648.0)
};
        fn hypercube_points(mut num_points: i64, mut cube_size: f64, mut num_dimensions: i64) -> Vec<Vec<f64>> {
    let mut pts: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < num_points) {
        let mut p: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < num_dimensions) {
            let v: f64 = (cube_size * rand_float());
            p = { let mut _v = p.clone(); _v.push(v); _v };
            j = (j + 1);
        }
        pts = { let mut _v = pts.clone(); _v.push(p.clone()); _v };
        i = (i + 1);
    }
    return pts
};
        fn build_kdtree(mut points: Vec<Vec<f64>>, mut depth: i64) -> Vec<Vec<f64>> {
    return points
};
        fn distance_sq(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let d: f64 = (a[i as usize] - b[i as usize]);
        sum = (sum + (d * d));
        i = (i + 1);
    }
    return sum
};
        fn nearest_neighbour_search(mut points: Vec<Vec<f64>>, mut query: Vec<f64>) -> HashMap<String, f64> {
    if ((points.len() as i64) == 0) {
        return HashMap::from([(String::from("index"), -1.0), (String::from("dist"), unsafe { g_INF.clone() }), (String::from("visited"), 0.0)])
    }
    let mut nearest_idx: i64 = 0;
    let mut nearest_dist: f64 = unsafe { g_INF.clone() };
    let mut visited: i64 = 0;
    let mut i: i64 = 0;
    while (i < (points.len() as i64)) {
        let d: f64 = distance_sq(query.clone(), points[i as usize].clone());
        visited = (visited + 1);
        if (d < nearest_dist) {
            nearest_dist = d;
            nearest_idx = i;
        }
        i = (i + 1);
    }
    return HashMap::from([(String::from("index"), (nearest_idx as f64)), (String::from("dist"), nearest_dist), (String::from("visited"), (visited as f64))])
};
        fn test_build_cases() {
    let empty_pts: Vec<Vec<f64>> = vec![];
    let tree0: Vec<Vec<f64>> = build_kdtree(empty_pts.clone(), 0);
    if ((tree0.len() as i64) == 0) {
        println!("{}", "case1 true");
    } else {
        println!("{}", "case1 false");
    }
    let pts1: Vec<Vec<f64>> = hypercube_points(10, 10.0, 2);
    let tree1: Vec<Vec<f64>> = build_kdtree(pts1.clone(), 2);
    if (((tree1.len() as i64) > 0) && ((tree1[0 as usize].clone().len() as i64) == 2)) {
        println!("{}", "case2 true");
    } else {
        println!("{}", "case2 false");
    }
    let pts2: Vec<Vec<f64>> = hypercube_points(10, 10.0, 3);
    let tree2: Vec<Vec<f64>> = build_kdtree(pts2.clone(), -2);
    if (((tree2.len() as i64) > 0) && ((tree2[0 as usize].clone().len() as i64) == 3)) {
        println!("{}", "case3 true");
    } else {
        println!("{}", "case3 false");
    }
};
        fn test_search() {
    let pts: Vec<Vec<f64>> = hypercube_points(10, 10.0, 2);
    let tree: Vec<Vec<f64>> = build_kdtree(pts.clone(), 0);
    let qp: Vec<f64> = hypercube_points(1, 10.0, 2)[0 as usize].clone();
    let res: HashMap<String, f64> = nearest_neighbour_search(tree.clone(), qp.clone());
    if (((res.get("index").cloned().unwrap_or_default() != -1.0) && (res.get("dist").cloned().unwrap_or_default() >= 0.0)) && (res.get("visited").cloned().unwrap_or_default() > 0.0)) {
        println!("{}", "search true");
    } else {
        println!("{}", "search false");
    }
};
        fn test_edge() {
    let empty_pts: Vec<Vec<f64>> = vec![];
    let tree: Vec<Vec<f64>> = build_kdtree(empty_pts.clone(), 0);
    let query: Vec<f64> = vec![0.0, 0.0];
    let res: HashMap<String, f64> = nearest_neighbour_search(tree.clone(), query.clone());
    if (((res.get("index").cloned().unwrap_or_default() == -1.0) && (res.get("dist").cloned().unwrap_or_default() > 100000000.0)) && (res.get("visited").cloned().unwrap_or_default() == 0.0)) {
        println!("{}", "edge true");
    } else {
        println!("{}", "edge false");
    }
};
        let mut mochi_main = || {
    unsafe { g_seed = 1 };
    test_build_cases();
    test_search();
    test_edge();
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
