// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct KDNode {
    point: Vec<f64>,
    left: i64,
    right: i64,
}
impl std::fmt::Display for KDNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"left\": {}", self.left)?;
        write!(f, ", ")?;
        write!(f, "\"right\": {}", self.right)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct SearchResult {
    point: Vec<f64>,
    distance: f64,
    nodes_visited: i64,
}
impl std::fmt::Display for SearchResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"point\": {:?}", self.point)?;
        write!(f, ", ")?;
        write!(f, "\"distance\": {}", self.distance)?;
        write!(f, ", ")?;
        write!(f, "\"nodes_visited\": {}", self.nodes_visited)?;
        write!(f, "}}")
    }
}

static mut g_q: i64 = 0;
fn main() {
    unsafe {
        g_q = 0;
                let _start: i64 = _now();
        fn square_distance(mut a: Vec<f64>, mut b: Vec<f64>) -> f64 {
    let mut i: i64 = 0;
    let mut total: f64 = 0.0;
    while (i < (a.len() as i64)) {
        let diff: f64 = (a[i as usize] - b[i as usize]);
        total = (total + (diff * diff));
        i = (i + 1);
    }
    return total
};
        fn search(mut nodes: Vec<KDNode>, mut index: i64, mut query_point: Vec<f64>, mut depth: i64, mut best: SearchResult) -> SearchResult {
    if (index == -1) {
        return best
    }
    let mut result: SearchResult = best.clone();
    result.nodes_visited = (result.nodes_visited + 1);
    let node: KDNode = nodes[index as usize].clone();
    let current_point: Vec<f64> = node.point.clone();
    let current_dist: f64 = square_distance(query_point.clone(), current_point.clone());
    if (((result.point.clone().len() as i64) == 0) || (current_dist < result.distance)) {
        result.point = current_point.clone();
        result.distance = current_dist;
    }
    let k: i64 = (query_point.len() as i64);
    let axis: i64 = (depth % k);
    let mut nearer: i64 = node.left;
    let mut further: i64 = node.right;
    if (query_point[axis as usize] > current_point[axis as usize]) {
        nearer = node.right;
        further = node.left;
    }
    result = search(nodes.clone(), nearer, query_point.clone(), (depth + 1), result.clone());
    let diff: f64 = (query_point[axis as usize] - current_point[axis as usize]);
    if ((diff * diff) < result.distance) {
        result = search(nodes.clone(), further, query_point.clone(), (depth + 1), result.clone());
    }
    return result
};
        fn nearest_neighbour_search(mut nodes: Vec<KDNode>, mut root: i64, mut query_point: Vec<f64>) -> SearchResult {
    let initial: SearchResult = SearchResult {point: vec![], distance: 1000000000000000000000000000000.0, nodes_visited: 0};
    return search(nodes.clone(), root, query_point.clone(), 0, initial.clone())
};
        let nodes: Vec<KDNode> = vec![KDNode {point: vec![9.0, 1.0], left: 1, right: 4}.clone(), KDNode {point: vec![2.0, 7.0], left: 2, right: 3}.clone(), KDNode {point: vec![3.0, 6.0], left: -1, right: -1}.clone(), KDNode {point: vec![6.0, 12.0], left: -1, right: -1}.clone(), KDNode {point: vec![17.0, 15.0], left: 5, right: 6}.clone(), KDNode {point: vec![13.0, 15.0], left: -1, right: -1}.clone(), KDNode {point: vec![10.0, 19.0], left: -1, right: -1}.clone()];
        let queries: Vec<Vec<f64>> = vec![vec![9.0, 2.0].clone(), vec![12.0, 15.0].clone(), vec![1.0, 3.0].clone()];
        while (unsafe { g_q.clone() } < (queries.len() as i64)) {
            let res: SearchResult = nearest_neighbour_search(nodes.clone(), 0, queries[unsafe { g_q.clone() } as usize].clone());
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{:?}", res.point.clone()), " "), res.distance.to_string()), " "), res.nodes_visited.to_string()), "\n"));
            unsafe { g_q = (unsafe { g_q.clone() } + 1) };
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
