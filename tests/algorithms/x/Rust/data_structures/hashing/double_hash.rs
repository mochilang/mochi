// Generated by Mochi transpiler v0.10.60
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_prime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    let mut i: i64 = 2;
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn prev_prime(mut n: i64) -> i64 {
    let mut p: i64 = (n - 1);
    while (p >= 2) {
        if is_prime(p) {
            return p
        }
        p = (p - 1);
    }
    return 1
};
    fn create_table(mut size: i64) -> Vec<i64> {
    let mut vals: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        vals = { let mut _v = vals.clone(); _v.push(-1); _v };
        i = (i + 1);
    }
    return vals
};
    fn hash1(mut size: i64, mut key: i64) -> i64 {
    return (key % size)
};
    fn hash2(mut prime: i64, mut key: i64) -> i64 {
    return (prime - (key % prime))
};
    fn insert_double_hash(mut values: Vec<i64>, mut size: i64, mut prime: i64, mut value: i64) -> Vec<i64> {
    let mut vals: Vec<i64> = values.clone();
    let mut idx: i64 = hash1(size, value);
    let mut step: i64 = hash2(prime, value);
    let mut count: i64 = 0;
    while ((vals[idx as usize] != -1) && (count < size)) {
        idx = ((idx + step) % size);
        count = (count + 1);
    }
    if (vals[idx as usize] == -1) {
        vals[idx as usize] = value;
    }
    return vals
};
    fn table_keys(mut values: Vec<i64>) -> HashMap<i64, i64> {
    let mut res: HashMap<i64, i64> = HashMap::new();
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        if (values[i as usize] != -1) {
            res.insert(i.clone(), values[i as usize]);
        }
        i = (i + 1);
    }
    return res
};
    fn run_example(mut size: i64, mut data: Vec<i64>) {
    let mut prime: i64 = prev_prime(size);
    let mut table: Vec<i64> = create_table(size);
    let mut i: i64 = 0;
    while (i < (data.len() as i64)) {
        table = insert_double_hash(table.clone(), size, prime, data[i as usize]);
        i = (i + 1);
    }
    println!("{}", format!("{:?}", table_keys(table.clone())));
};
    run_example(3, vec![10, 20, 30]);
    run_example(4, vec![10, 20, 30]);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
