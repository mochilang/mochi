// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct HashTable {
    size_table: i64,
    values: Vec<i64>,
    filled: Vec<bool>,
    charge_factor: i64,
    lim_charge: f64,
}
impl std::fmt::Display for HashTable {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"size_table\": {}", self.size_table)?;
        write!(f, ", ")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, ", ")?;
        write!(f, "\"filled\": {:?}", self.filled)?;
        write!(f, ", ")?;
        write!(f, "\"charge_factor\": {}", self.charge_factor)?;
        write!(f, ", ")?;
        write!(f, "\"lim_charge\": {}", self.lim_charge)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn repeat_int(mut n: i64, mut val: i64) -> Vec<i64> {
    let mut res: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(val); _v };
        i = (i + 1);
    }
    return res
};
    fn repeat_bool(mut n: i64, mut val: bool) -> Vec<bool> {
    let mut res: Vec<bool> = Default::default();
    let mut i: i64 = 0;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(val); _v };
        i = (i + 1);
    }
    return res
};
    fn set_int(mut xs: Vec<i64>, mut idx: i64, mut value: i64) -> Vec<i64> {
    let mut res: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i == idx) {
            res = { let mut _v = res.clone(); _v.push(value); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn set_bool(mut xs: Vec<bool>, mut idx: i64, mut value: bool) -> Vec<bool> {
    let mut res: Vec<bool> = Default::default();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i == idx) {
            res = { let mut _v = res.clone(); _v.push(value); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn create_table(mut size_table: i64, mut charge_factor: i64, mut lim_charge: f64) -> HashTable {
    return HashTable {size_table: size_table, values: repeat_int(size_table, 0), filled: repeat_bool(size_table, false), charge_factor: charge_factor, lim_charge: lim_charge}
};
    fn hash_function(ht: &HashTable, mut key: i64) -> i64 {
    let mut k: i64 = (key % ht.size_table);
    if (k < 0) {
        k = (k + ht.size_table);
    }
    return k
};
    fn is_prime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    let mut i: i64 = 3;
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            return false
        }
        i = (i + 2);
    }
    return true
};
    fn next_prime(mut value: i64, mut factor: i64) -> i64 {
    let mut candidate: i64 = ((value * factor) + 1);
    while !is_prime(candidate) {
        candidate = (candidate + 1);
    }
    return candidate
};
    fn set_value(ht: &HashTable, mut key: i64, mut data: i64) -> HashTable {
    let mut new_values: Vec<i64> = set_int(ht.values.clone().clone(), key, data);
    let mut new_filled: Vec<bool> = set_bool(ht.filled.clone().clone(), key, true);
    return HashTable {size_table: ht.size_table, values: new_values, filled: new_filled, charge_factor: ht.charge_factor, lim_charge: ht.lim_charge}
};
    fn collision_resolution(ht: &mut HashTable, mut key: i64) -> i64 {
    let mut new_key: i64 = hash_function(ht, (key + 1));
    let mut steps: i64 = 0;
    while ht.filled.clone()[new_key as usize] {
        new_key = hash_function(ht, (new_key + 1));
        steps = (steps + 1);
        if (steps >= ht.size_table) {
            return -1
        }
    }
    return new_key
};
    fn rehashing(ht: &HashTable) -> HashTable {
    let mut survivors: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i < (ht.values.clone().len() as i64)) {
        if ht.filled.clone()[i as usize] {
            survivors = { let mut _v = survivors.clone(); _v.push(ht.values.clone()[i as usize]); _v };
        }
        i = (i + 1);
    }
    let mut new_size: i64 = next_prime(ht.size_table, 2);
    let mut new_ht: HashTable = create_table(new_size, ht.charge_factor, ht.lim_charge);
    i = 0;
    while (i < (survivors.len() as i64)) {
        new_ht = insert_data(new_ht, survivors[i as usize]);
        i = (i + 1);
    }
    return new_ht
};
    fn insert_data(mut ht: HashTable, mut data: i64) -> HashTable {
    let mut key: i64 = hash_function(&ht, data);
    if !ht.filled.clone()[key as usize] {
        return set_value(&ht, key, data)
    }
    if (ht.values.clone()[key as usize] == data) {
        return ht
    }
    let mut new_key: i64 = collision_resolution(&mut ht, key);
    if (new_key >= 0) {
        return set_value(&ht, new_key, data)
    }
    let mut resized: HashTable = rehashing(&ht);
    return insert_data(resized, data)
};
    fn keys(ht: &HashTable) -> Vec<Vec<i64>> {
    let mut res: Vec<Vec<i64>> = Default::default();
    let mut i: i64 = 0;
    while (i < (ht.values.clone().len() as i64)) {
        if ht.filled.clone()[i as usize] {
            res = { let mut _v = res.clone(); _v.push(vec![i, ht.values.clone()[i as usize]]); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn mochi_main() {
    let mut ht: HashTable = create_table(3, 1, 0.75);
    ht = insert_data(ht, 17);
    ht = insert_data(ht, 18);
    ht = insert_data(ht, 99);
    println!("{:?}", keys(&ht));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
