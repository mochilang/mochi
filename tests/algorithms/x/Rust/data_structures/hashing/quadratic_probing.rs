// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct HashTable {
    size_table: i64,
    values: Vec<i64>,
    lim_charge: f64,
}
impl std::fmt::Display for HashTable {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"size_table\": {}", self.size_table)?;
        write!(f, ", ")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, ", ")?;
        write!(f, "\"lim_charge\": {}", self.lim_charge)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn create_hash_table(mut size: i64) -> HashTable {
    let mut vals: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        vals = { let mut _v = vals.clone(); _v.push(Default::default()); _v };
        i = (i + 1);
    }
    return HashTable {size_table: size, values: vals, lim_charge: 0.75}
};
    fn hash_function(table: &HashTable, mut key: i64) -> i64 {
    return (key % table.size_table)
};
    fn balanced_factor(table: &HashTable) -> f64 {
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (table.values.clone().len() as i64)) {
        if (table.values.clone()[i as usize] != Default::default()) {
            count = (count + 1);
        }
        i = (i + 1);
    }
    return ((count as f64) / (table.size_table as f64))
};
    fn collision_resolution(table: &mut HashTable, mut key: i64) -> i64 {
    let mut i: i64 = 1;
    let mut new_key: i64 = hash_function(table, (key + (i * i)));
    while ((table.values.clone()[new_key as usize] != Default::default()) && (table.values.clone()[new_key as usize] != key)) {
        i = (i + 1);
        if (balanced_factor(table) >= table.lim_charge) {
            return table.size_table
        }
        new_key = hash_function(table, (key + (i * i)));
    }
    return new_key
};
    fn insert_data(table: &mut HashTable, mut data: i64) {
    let mut key: i64 = hash_function(table, data);
    let mut vals: Vec<i64> = table.values.clone();
    if (vals[key as usize] == Default::default()) {
        vals[key as usize] = data;
    } else if (vals[key as usize] == data) {
        (*table).values = vals.clone();
        return
    } else {
        let mut new_key: i64 = collision_resolution(table, key);
        if ((new_key < (vals.len() as i64)) && (vals[new_key as usize] == Default::default())) {
            vals[new_key as usize] = data;
        }
    }
    (*table).values = vals.clone();
};
    fn int_to_string(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut num: i64 = n;
    let mut neg: bool = false;
    if (num < 0) {
        neg = true;
        num = -num;
    }
    let mut res: String = String::from("").clone();
    while (num > 0) {
        let mut digit: i64 = (num % 10);
        let mut ch: String = { let tmp = &"0123456789"; tmp.chars().skip(digit as usize).take(((digit + 1) - digit) as usize).collect::<String>() }.clone();
        res = format!("{}{}", ch, res);
        num = (num / 10);
    }
    if neg {
        res = format!("{}{}", "-", res);
    }
    return res.clone()
};
    fn keys_to_string(table: &HashTable) -> String {
    let mut result: String = String::from("{").clone();
    let mut first: bool = true;
    let mut i: i64 = 0;
    while (i < (table.values.clone().len() as i64)) {
        let mut v: i64 = table.values.clone()[i as usize];
        if (v != Default::default()) {
            if !first {
                result = format!("{}{}", result, ", ");
            }
            result = format!("{}{}", format!("{}{}", format!("{}{}", result, int_to_string(i)), ": "), int_to_string(v));
            first = false;
        }
        i = (i + 1);
    }
    result = format!("{}{}", result, "}");
    return result.clone()
};
    let mut qp: HashTable = create_hash_table(8);
    insert_data(&mut qp, 0);
    insert_data(&mut qp, 999);
    insert_data(&mut qp, 111);
    println!("{}", keys_to_string(&qp));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
