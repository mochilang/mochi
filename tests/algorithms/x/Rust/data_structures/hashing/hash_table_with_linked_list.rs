// Generated by Mochi transpiler v0.10.61
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct HashTableWithLinkedList {
    size_table: i64,
    charge_factor: i64,
    values: Vec<Vec<i64>>,
    keys: HashMap<i64, Vec<i64>>,
}
impl std::fmt::Display for HashTableWithLinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"size_table\": {}", self.size_table)?;
        write!(f, ", ")?;
        write!(f, "\"charge_factor\": {}", self.charge_factor)?;
        write!(f, ", ")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, ", ")?;
        write!(f, "\"keys\": {:?}", self.keys)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_table(mut size_table: i64, mut charge_factor: i64) -> HashTableWithLinkedList {
    let mut vals: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < size_table) {
        vals = { let mut _v = vals.clone(); _v.push(vec![]); _v };
        i = (i + 1);
    }
    return HashTableWithLinkedList {size_table: size_table, charge_factor: charge_factor, values: vals, keys: HashMap::new()}
};
    fn hash_function(ht: &HashTableWithLinkedList, mut key: i64) -> i64 {
    let mut res: i64 = (key % ht.size_table);
    if (res < 0) {
        res = (res + ht.size_table);
    }
    return res
};
    fn prepend(mut lst: Vec<i64>, mut value: i64) -> Vec<i64> {
    let mut result: Vec<i64> = vec![value];
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push(lst[i as usize]); _v };
        i = (i + 1);
    }
    return result
};
    fn set_value(ht: &mut HashTableWithLinkedList, mut key: i64, mut data: i64) {
    let mut current: Vec<i64> = ht.values.clone()[key as usize].clone();
    let mut updated: Vec<i64> = prepend(current.clone(), data);
    let mut vals: Vec<Vec<i64>> = ht.values.clone();
    vals[key as usize] = updated.clone();
    (*ht).values = vals.clone();
    let mut ks: HashMap<i64, Vec<i64>> = ht.keys.clone();
    ks.insert(key.clone(), updated);
    (*ht).keys = ks.clone();
};
    fn count_empty(ht: &HashTableWithLinkedList) -> i64 {
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (ht.values.clone().len() as i64)) {
        if ((ht.values.clone()[i as usize].clone().len() as i64) == 0) {
            count = (count + 1);
        }
        i = (i + 1);
    }
    return count
};
    fn balanced_factor(ht: &HashTableWithLinkedList) -> f64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (ht.values.clone().len() as i64)) {
        total = (total + (ht.charge_factor - (ht.values.clone()[i as usize].clone().len() as i64)));
        i = (i + 1);
    }
    return (((total as f64) / (ht.size_table as f64)) * (ht.charge_factor as f64))
};
    fn collision_resolution(ht: &mut HashTableWithLinkedList, mut key: i64) -> i64 {
    if !(((ht.values.clone()[key as usize].clone().len() as i64) == ht.charge_factor) && (count_empty(ht) == 0)) {
        return key
    }
    let mut new_key: i64 = ((key + 1) % ht.size_table);
    let mut steps: i64 = 0;
    while (((ht.values.clone()[new_key as usize].clone().len() as i64) == ht.charge_factor) && (steps < (ht.size_table - 1))) {
        new_key = ((new_key + 1) % ht.size_table);
        steps = (steps + 1);
    }
    if ((ht.values.clone()[new_key as usize].clone().len() as i64) < ht.charge_factor) {
        return new_key
    }
    return -1
};
    fn insert(ht: &mut HashTableWithLinkedList, mut data: i64) {
    let mut key: i64 = hash_function(ht, data);
    if (((ht.values.clone()[key as usize].clone().len() as i64) == 0) || ((ht.values.clone()[key as usize].clone().len() as i64) < ht.charge_factor)) {
        set_value(ht, key, data);
        return
    }
    let mut dest: i64 = collision_resolution(ht, key);
    if (dest >= 0) {
        set_value(ht, dest, data);
    } else {
        println!("{}", "table full");
    }
};
    fn mochi_main() {
    let mut ht: HashTableWithLinkedList = make_table(3, 2);
    insert(&mut ht, 10);
    insert(&mut ht, 20);
    insert(&mut ht, 30);
    insert(&mut ht, 40);
    insert(&mut ht, 50);
    println!("{}", format!("{:?}", ht.values.clone()));
    println!("{}", balanced_factor(&ht).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
