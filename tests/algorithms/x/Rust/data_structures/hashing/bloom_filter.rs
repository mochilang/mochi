// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Bloom {
    size: i64,
    bits: Vec<i64>,
}
impl std::fmt::Display for Bloom {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, ", ")?;
        write!(f, "\"bits\": {:?}", self.bits)?;
        write!(f, "}}")
    }
}

static mut g_ascii: String = String::new();
fn main() {
    unsafe {
        g_ascii = String::from(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~").clone();
                let _start: i64 = _now();
        unsafe fn ord(ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_ascii.len() as i64)) {
        if (g_ascii.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() == ch) {
            return (32 + i)
        }
        i = (i + 1);
    }
    return 0
};
        unsafe fn new_bloom(mut size: i64) -> Bloom {
    let mut bits: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < size) {
        bits = { let mut _v = bits.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    return Bloom {size: size, bits: bits}
};
        unsafe fn hash1(value: &str, mut size: i64) -> i64 {
    let mut h: i64 = 0;
    let mut i: i64 = 0;
    while (i < (value.len() as i64)) {
        h = (((h * 31) + ord(&value[i as usize..(i + 1) as usize].to_string())) % size);
        i = (i + 1);
    }
    return h
};
        unsafe fn hash2(value: &str, mut size: i64) -> i64 {
    let mut h: i64 = 0;
    let mut i: i64 = 0;
    while (i < (value.len() as i64)) {
        h = (((h * 131) + ord(&value[i as usize..(i + 1) as usize].to_string())) % size);
        i = (i + 1);
    }
    return h
};
        unsafe fn hash_positions(value: &str, mut size: i64) -> Vec<i64> {
    let mut h1: i64 = hash1(value, size);
    let mut h2: i64 = hash2(value, size);
    let mut res: Vec<i64> = vec![];
    res = { let mut _v = res.clone(); _v.push(h1); _v };
    res = { let mut _v = res.clone(); _v.push(h2); _v };
    return res
};
        unsafe fn bloom_add(b: &Bloom, value: &str) -> Bloom {
    let mut pos: Vec<i64> = hash_positions(value, b.size);
    let mut bits: Vec<i64> = b.bits.clone();
    let mut i: i64 = 0;
    while (i < (pos.len() as i64)) {
        let mut idx: i64 = ((b.size - 1) - pos[i as usize]);
        bits[idx as usize] = 1;
        i = (i + 1);
    }
    return Bloom {size: b.size, bits: bits}
};
        unsafe fn bloom_exists(b: &Bloom, value: &str) -> bool {
    let mut pos: Vec<i64> = hash_positions(value, b.size);
    let mut i: i64 = 0;
    while (i < (pos.len() as i64)) {
        let mut idx: i64 = ((b.size - 1) - pos[i as usize]);
        if (b.bits.clone()[idx as usize] != 1) {
            return false
        }
        i = (i + 1);
    }
    return true
};
        unsafe fn bitstring(b: &Bloom) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < b.size) {
        res = format!("{}{}", res, b.bits.clone()[i as usize].to_string());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn format_hash(b: &Bloom, value: &str) -> String {
    let mut pos: Vec<i64> = hash_positions(value, b.size);
    let mut bits: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < b.size) {
        bits = { let mut _v = bits.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (pos.len() as i64)) {
        let mut idx: i64 = ((b.size - 1) - pos[i as usize]);
        bits[idx as usize] = 1;
        i = (i + 1);
    }
    let mut res: String = String::from("").clone();
    i = 0;
    while (i < b.size) {
        res = format!("{}{}", res, bits[i as usize].to_string());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn estimated_error_rate(b: &Bloom) -> f64 {
    let mut ones: i64 = 0;
    let mut i: i64 = 0;
    while (i < b.size) {
        if (b.bits.clone()[i as usize] == 1) {
            ones = (ones + 1);
        }
        i = (i + 1);
    }
    let mut frac: f64 = ((ones as f64) / (b.size as f64));
    return (frac * frac)
};
        unsafe fn any_in(b: &mut Bloom, mut items: Vec<String>) -> bool {
    let mut i: i64 = 0;
    while (i < (items.len() as i64)) {
        if bloom_exists(b, &items[i as usize].clone()) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn mochi_main() {
    let mut bloom: Bloom = new_bloom(8);
    println!("{}", bitstring(&bloom));
    println!("{}", if bloom_exists(&bloom, &"Titanic") { 1 } else { 0 });
    bloom = bloom_add(&bloom, &"Titanic");
    println!("{}", bitstring(&bloom));
    println!("{}", if bloom_exists(&bloom, &"Titanic") { 1 } else { 0 });
    bloom = bloom_add(&bloom, &"Avatar");
    println!("{}", if bloom_exists(&bloom, &"Avatar") { 1 } else { 0 });
    println!("{}", format_hash(&bloom, &"Avatar"));
    println!("{}", bitstring(&bloom));
    let mut not_present: Vec<String> = vec![String::from("The Godfather").clone(), String::from("Interstellar").clone(), String::from("Parasite").clone(), String::from("Pulp Fiction").clone()];
    let mut i: i64 = 0;
    while (i < (not_present.len() as i64)) {
        let mut film: String = not_present[i as usize].clone().clone();
        println!("{}", format!("{}{}", format!("{}{}", film, ":"), format_hash(&bloom, &film)));
        i = (i + 1);
    }
    println!("{}", if any_in(&mut bloom, not_present.clone()) { 1 } else { 0 });
    println!("{}", if bloom_exists(&bloom, &"Ratatouille") { 1 } else { 0 });
    println!("{}", format_hash(&bloom, &"Ratatouille"));
    println!("{}", estimated_error_rate(&bloom).to_string());
    bloom = bloom_add(&bloom, &"The Godfather");
    println!("{}", estimated_error_rate(&bloom).to_string());
    println!("{}", bitstring(&bloom));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
