// Generated by Mochi transpiler v0.10.61
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_tests: Vec<String> = Vec::new();
static mut g_idx: i64 = 0;
fn main() {
    unsafe {
        g_tests = vec![String::from("([]{})"), String::from("[()]{}{[()()]()}"), String::from("[(])"), String::from("1+2*3-4"), String::from("")];
        g_idx = 0;
                let _start: i64 = _now();
        unsafe fn pop_last(mut xs: Vec<String>) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < ((xs.len() as i64) - 1)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize].clone()); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn balanced_parentheses(s: &str) -> bool {
    let mut stack: Vec<String> = vec![];
    let mut pairs: HashMap<String, String> = HashMap::from([(String::from("("), String::from(")")), (String::from("["), String::from("]")), (String::from("{"), String::from("}"))]);
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if pairs.contains_key(&ch) {
            stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
        } else if (((ch.as_str() == ")") || (ch.as_str() == "]")) || (ch.as_str() == "}")) {
            if ((stack.len() as i64) == 0) {
                return false
            }
            let mut top: String = stack[((stack.len() as i64) - 1) as usize].clone().clone();
            if (pairs.get(top.as_str()).cloned().unwrap_or_default().as_str() != ch.as_str()) {
                return false
            }
            stack = pop_last(stack.clone());
        }
        i = (i + 1);
    }
    return ((stack.len() as i64) == 0)
};
        while (g_idx < (g_tests.clone().len() as i64)) {
            println!("{}", if balanced_parentheses(&g_tests[g_idx as usize].clone()) { 1 } else { 0 });
            g_idx = (g_idx + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
