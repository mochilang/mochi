// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Stack {
    items: Vec<i64>,
    limit: i64,
}
impl std::fmt::Display for Stack {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"items\": {:?}", self.items)?;
        write!(f, ", ")?;
        write!(f, "\"limit\": {}", self.limit)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_stack(mut limit: i64) -> Stack {
    return Stack {items: vec![], limit: limit}
};
    fn is_empty(s: &Stack) -> bool {
    return ((s.items.clone().len() as i64) == 0)
};
    fn size(s: &Stack) -> i64 {
    return (s.items.clone().len() as i64)
};
    fn is_full(s: &Stack) -> bool {
    return ((s.items.clone().len() as i64) >= s.limit)
};
    fn push(s: &mut Stack, mut item: i64) {
    if is_full(s) {
        panic!("stack overflow");
    }
    (*s).items = { let mut _v = s.items.clone().clone(); _v.push(item); _v };
};
    fn pop(s: &mut Stack) -> i64 {
    if is_empty(s) {
        panic!("stack underflow");
    }
    let mut n = (s.items.clone().len() as i64);
    let mut val: i64 = s.items.clone()[(n - 1) as usize];
    (*s).items = s.items.clone()[0 as usize..(n - 1) as usize].to_vec();
    return val
};
    fn peek(s: &mut Stack) -> i64 {
    if is_empty(s) {
        panic!("peek from empty stack");
    }
    return s.items.clone()[((s.items.clone().len() as i64) - 1) as usize]
};
    fn contains(s: &Stack, mut item: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (s.items.clone().len() as i64)) {
        if (s.items.clone()[i as usize] == item) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn stack_repr(s: &Stack) -> String {
    return format!("{:?}", s.items.clone()).to_string().clone()
};
    fn mochi_main() {
    let mut s: Stack = make_stack(5);
    println!("{}", is_empty(&s).to_string());
    push(&mut s, 0);
    push(&mut s, 1);
    push(&mut s, 2);
    println!("{}", peek(&mut s).to_string());
    println!("{}", size(&s).to_string());
    println!("{}", is_full(&s).to_string());
    push(&mut s, 3);
    push(&mut s, 4);
    println!("{}", is_full(&s).to_string());
    println!("{}", stack_repr(&s));
    println!("{}", pop(&mut s).to_string());
    println!("{}", peek(&mut s).to_string());
    println!("{}", contains(&s, 1).to_string());
    println!("{}", contains(&s, 9).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
