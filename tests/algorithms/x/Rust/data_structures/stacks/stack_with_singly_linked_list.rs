// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    value: String,
    next: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"value\": \"{}\"", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Stack {
    nodes: Vec<Node>,
    top: i64,
}
impl std::fmt::Display for Stack {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, ", ")?;
        write!(f, "\"top\": {}", self.top)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct PopResult {
    stack: Stack,
    value: String,
}
impl std::fmt::Display for PopResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"stack\": {}", self.stack)?;
        write!(f, ", ")?;
        write!(f, "\"value\": \"{}\"", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_stack() -> Stack {
    return Stack {nodes: vec![], top: -1}
};
    fn is_empty(mut stack: Stack) -> bool {
    return (stack.top == -1)
};
    fn push(mut stack: Stack, mut item: String) -> Stack {
    let new_node: Node = Node {value: item.clone(), next: stack.top};
    let mut new_nodes: Vec<Node> = stack.nodes.clone();
    new_nodes = { let mut _v = new_nodes.clone(); _v.push(new_node.clone()); _v };
    let new_top: i64 = ((new_nodes.len() as i64) - 1);
    return Stack {nodes: new_nodes.clone(), top: new_top}
};
    fn pop(mut stack: Stack) -> PopResult {
    if (stack.top == -1) {
        panic!("pop from empty stack");
    }
    let node: Node = stack.nodes.clone()[stack.top as usize].clone();
    let new_top: i64 = node.next;
    let new_stack: Stack = Stack {nodes: stack.nodes.clone(), top: new_top};
    return PopResult {stack: new_stack.clone(), value: node.value.clone().clone()}
};
    fn peek(mut stack: Stack) -> String {
    if (stack.top == -1) {
        panic!("peek from empty stack");
    }
    let node: Node = stack.nodes.clone()[stack.top as usize].clone();
    return node.value.clone().clone()
};
    fn clear(mut stack: Stack) -> Stack {
    return Stack {nodes: vec![], top: -1}
};
    let mut mochi_main = || {
    let mut stack: Stack = empty_stack();
    println!("{}", if is_empty(stack.clone()) { 1 } else { 0 });
    stack = push(stack.clone(), String::from("5"));
    stack = push(stack.clone(), String::from("9"));
    stack = push(stack.clone(), String::from("python"));
    println!("{}", if is_empty(stack.clone()) { 1 } else { 0 });
    let mut res: PopResult = pop(stack.clone());
    stack = res.stack.clone();
    println!("{}", res.value.clone());
    stack = push(stack.clone(), String::from("algorithms"));
    res = pop(stack.clone());
    stack = res.stack.clone();
    println!("{}", res.value.clone());
    res = pop(stack.clone());
    stack = res.stack.clone();
    println!("{}", res.value.clone());
    res = pop(stack.clone());
    stack = res.stack.clone();
    println!("{}", res.value.clone());
    println!("{}", if is_empty(stack.clone()) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
