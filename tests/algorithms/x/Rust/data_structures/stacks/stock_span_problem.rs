// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_price: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_price = vec![10, 4, 5, 90, 120, 80];
                let _start: i64 = _now();
        unsafe fn calculation_span(mut price: Vec<i64>) -> Vec<i64> {
    let mut n = (price.len() as i64);
    let mut st: Vec<i64> = vec![];
    let mut span: Vec<i64> = vec![];
    st = { let mut _v = st.clone(); _v.push(0); _v };
    span = { let mut _v = span.clone(); _v.push(1); _v };
    for i in 1..n {
        while (((st.len() as i64) > 0) && (price[st[((st.len() as i64) - 1) as usize] as usize] <= price[i as usize])) {
            st = st[0 as usize..((st.len() as i64) - 1) as usize].to_vec();
        }
        let mut s: i64 = if ((st.len() as i64) <= 0) { (i + 1) } else { (i - st[((st.len() as i64) - 1) as usize]) };
        span = { let mut _v = span.clone(); _v.push(s); _v };
        st = { let mut _v = st.clone(); _v.push(i); _v };
    }
    return span
};
        unsafe fn print_array(mut arr: Vec<i64>) {
    for i in 0..(arr.len() as i64) {
        println!("{}", arr[i as usize]);
    }
};
        let mut spans: Vec<i64> = calculation_span(g_price.clone().clone());
        print_array(spans.clone());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
