// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    let PRECEDENCES: HashMap<String, i64> = HashMap::from([(String::from("+"), 1), (String::from("-"), 1), (String::from("*"), 2), (String::from("/"), 2), (String::from("^"), 3)]);
    let ASSOCIATIVITIES: HashMap<String, String> = HashMap::from([(String::from("+"), String::from("LR")), (String::from("-"), String::from("LR")), (String::from("*"), String::from("LR")), (String::from("/"), String::from("LR")), (String::from("^"), String::from("RL"))]);
    let mut precedence = |mut ch: String| -> i64 {
    if PRECEDENCES.contains_key(&ch) {
        return PRECEDENCES.get(ch.as_str()).cloned().unwrap_or_default()
    }
    return -1
};
    let mut associativity = |mut ch: String| -> String {
    if ASSOCIATIVITIES.contains_key(&ch) {
        return ASSOCIATIVITIES.get(ch.as_str()).cloned().unwrap_or_default()
    }
    return String::new()
};
    let mut balanced_parentheses = |mut expr: String| -> bool {
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    while (i < (expr.len() as i64)) {
        let ch: String = { let tmp = &expr; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == "(") {
            count = (count + 1);
        }
        if (ch.as_str() == ")") {
            count = (count - 1);
            if (count < 0) {
                return false
            }
        }
        i = (i + 1);
    }
    return (count == 0)
};
    let mut is_letter = |mut ch: String| -> bool {
    return ((("a" <= ch.as_str()) && (ch.as_str() <= "z")) || (("A" <= ch.as_str()) && (ch.as_str() <= "Z")))
};
    let mut is_digit = |mut ch: String| -> bool {
    return (("0" <= ch.as_str()) && (ch.as_str() <= "9"))
};
    let mut is_alnum = |mut ch: String| -> bool {
    return (is_letter(ch.clone()) || is_digit(ch.clone()))
};
    let mut infix_to_postfix = |mut expression: String| -> String {
    if (balanced_parentheses(expression.clone()) == false) {
        panic!("Mismatched parentheses");
    }
    let mut stack: Vec<String> = vec![];
    let mut postfix: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (expression.len() as i64)) {
        let ch: String = { let tmp = &expression; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if is_alnum(ch.clone()) {
            postfix = { let mut _v = postfix.clone(); _v.push(ch.clone()); _v };
        } else if (ch.as_str() == "(") {
            stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
        } else if (ch.as_str() == ")") {
            while (((stack.len() as i64) > 0) && (stack[((stack.len() as i64) - 1) as usize].clone().as_str() != "(")) {
                postfix = { let mut _v = postfix.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
                stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
            }
            if ((stack.len() as i64) > 0) {
                stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
            }
        } else if (ch.as_str() == " ") {
        } else {
            loop {
                if ((stack.len() as i64) == 0) {
                    stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
                    break
                }
                let cp: i64 = precedence(ch.clone());
                let tp: i64 = precedence(stack[((stack.len() as i64) - 1) as usize].clone());
                if (cp > tp) {
                    stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
                    break
                }
                if (cp < tp) {
                    postfix = { let mut _v = postfix.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
                    stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
                    continue
                }
                if (associativity(ch.clone()).as_str() == "RL") {
                    stack = { let mut _v = stack.clone(); _v.push(ch.clone()); _v };
                    break
                }
                postfix = { let mut _v = postfix.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
                stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
            }
        }
        i = (i + 1);
    }
    while ((stack.len() as i64) > 0) {
        postfix = { let mut _v = postfix.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
        stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
    }
    let mut res: String = String::new();
    let mut j: i64 = 0;
    while (j < (postfix.len() as i64)) {
        if (j > 0) {
            res = format!("{}{}", res, " ");
        }
        res = format!("{}{}", res, postfix[j as usize].clone());
        j = (j + 1);
    }
    return res.clone()
};
    let mut mochi_main = || {
    let expression: String = String::from("a+b*(c^d-e)^(f+g*h)-i");
    println!("{}", expression);
    println!("{}", infix_to_postfix(expression.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
