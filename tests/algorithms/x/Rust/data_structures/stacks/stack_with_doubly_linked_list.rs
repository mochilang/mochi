// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    data: i64,
    next: i64,
    prev: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, ", ")?;
        write!(f, "\"prev\": {}", self.prev)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Stack {
    nodes: Vec<Node>,
    head: i64,
}
impl std::fmt::Display for Stack {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, ", ")?;
        write!(f, "\"head\": {}", self.head)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct PopResult {
    stack: Stack,
    value: i64,
    ok: bool,
}
impl std::fmt::Display for PopResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"stack\": {}", self.stack)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct TopResult {
    value: i64,
    ok: bool,
}
impl std::fmt::Display for TopResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_stack() -> Stack {
    return Stack {nodes: vec![], head: (0 - 1)}
};
    fn push(stack: &Stack, mut value: i64) -> Stack {
    let mut nodes: Vec<Node> = stack.nodes.clone();
    let mut idx = (nodes.len() as i64);
    let mut new_node: Node = Node {data: value, next: stack.head, prev: (0 - 1)};
    nodes = { let mut _v = nodes.clone(); _v.push(new_node.clone()); _v };
    if (stack.head != (0 - 1)) {
        let mut head_node: Node = nodes[stack.head as usize].clone();
        head_node.prev = idx;
        nodes[(*stack).head as usize] = head_node.clone();
    }
    return Stack {nodes: nodes, head: idx}
};
    fn pop(stack: &Stack) -> PopResult {
    if (stack.head == (0 - 1)) {
        return PopResult {stack: stack.clone(), value: 0, ok: false}
    }
    let mut nodes: Vec<Node> = stack.nodes.clone();
    let mut head_node: Node = nodes[stack.head as usize].clone();
    let mut value: i64 = head_node.data;
    let mut next_idx: i64 = head_node.next;
    if (next_idx != (0 - 1)) {
        let mut next_node: Node = nodes[next_idx as usize].clone();
        next_node.prev = (0 - 1);
        nodes[next_idx as usize] = next_node.clone();
    }
    let mut new_stack: Stack = Stack {nodes: nodes, head: next_idx};
    return PopResult {stack: new_stack, value: value, ok: true}
};
    fn top(stack: &Stack) -> TopResult {
    if (stack.head == (0 - 1)) {
        return TopResult {value: 0, ok: false}
    }
    let mut node: Node = stack.nodes.clone()[stack.head as usize].clone();
    return TopResult {value: node.data, ok: true}
};
    fn size(stack: &Stack) -> i64 {
    let mut count: i64 = 0;
    let mut idx: i64 = stack.head;
    while (idx != (0 - 1)) {
        count = (count + 1);
        let mut node: Node = stack.nodes.clone()[idx as usize].clone();
        idx = node.next;
    }
    return count
};
    fn is_empty(stack: &Stack) -> bool {
    return (stack.head == (0 - 1))
};
    fn print_stack(stack: &Stack) {
    println!("{}", "stack elements are:");
    let mut idx: i64 = stack.head;
    let mut s: String = String::from("").clone();
    while (idx != (0 - 1)) {
        let mut node: Node = stack.nodes.clone()[idx as usize].clone();
        s = format!("{}{}", format!("{}{}", s, node.data.to_string()), "->");
        idx = node.next;
    }
    if ((s.len() as i64) > 0) {
        println!("{}", s);
    }
};
    fn mochi_main() {
    let mut stack: Stack = empty_stack();
    println!("{}", "Stack operations using Doubly LinkedList");
    stack = push(&stack, 4);
    stack = push(&stack, 5);
    stack = push(&stack, 6);
    stack = push(&stack, 7);
    print_stack(&stack);
    let mut t: TopResult = top(&stack);
    if t.ok {
        println!("{}", format!("{}{}", "Top element is ", t.value.to_string()));
    } else {
        println!("{}", "Top element is None");
    }
    println!("{}", format!("{}{}", "Size of the stack is ", size(&stack).to_string()));
    let mut p: PopResult = pop(&stack);
    stack = p.stack.clone();
    p = pop(&stack);
    stack = p.stack.clone();
    print_stack(&stack);
    println!("{}", format!("{}{}", "stack is empty: ", is_empty(&stack).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
