// Generated by Mochi transpiler v0.10.61
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PRIORITY: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("^"), 3), (String::from("*"), 2), (String::from("/"), 2), (String::from("%"), 2), (String::from("+"), 1), (String::from("-"), 1)])));
static mut g_LETTERS: String = String::new();
static mut g_DIGITS: String = String::new();
fn main() {
    unsafe {
        g_LETTERS = String::from("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
        g_DIGITS = String::from("0123456789").clone();
                let _start: i64 = _now();
        unsafe fn is_alpha(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_LETTERS.len() as i64)) {
        if (g_LETTERS.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn is_digit(ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (g_DIGITS.len() as i64)) {
        if (g_DIGITS.chars().nth(i as usize).unwrap().to_string() == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn reverse_string(s: &str) -> String {
    let mut out: String = String::from("").clone();
    let mut i = ((s.len() as i64) - 1);
    while (i >= 0) {
        out = format!("{}{}", out, s.chars().nth(i as usize).unwrap().to_string());
        i = (i - 1);
    }
    return out.clone()
};
        unsafe fn infix_to_postfix(infix: &str) -> String {
    let mut stack: Vec<String> = vec![];
    let mut post: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (infix.len() as i64)) {
        let mut x: String = infix.chars().nth(i as usize).unwrap().to_string().clone();
        if (is_alpha(&x) || is_digit(&x)) {
            post = { let mut _v = post.clone(); _v.push(x.clone()); _v };
        } else if (x.as_str() == "(") {
            stack = { let mut _v = stack.clone(); _v.push(x.clone()); _v };
        } else if (x.as_str() == ")") {
            if ((stack.len() as i64) == 0) {
                panic!("list index out of range");
            }
            while (stack[((stack.len() as i64) - 1) as usize].clone().as_str() != "(") {
                post = { let mut _v = post.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
                stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
            }
            stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
        } else if ((stack.len() as i64) == 0) {
            stack = { let mut _v = stack.clone(); _v.push(x.clone()); _v };
        } else {
            while ((((stack.len() as i64) > 0) && (stack[((stack.len() as i64) - 1) as usize].clone().as_str() != "(")) && ({ let _map = g_PRIORITY.lock().unwrap(); _map.get(x.as_str()).cloned().unwrap_or_default() } <= { let _map = g_PRIORITY.lock().unwrap(); _map.get(stack[((stack.len() as i64) - 1) as usize].clone().as_str()).cloned().unwrap_or_default() })) {
                post = { let mut _v = post.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
                stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
            }
            stack = { let mut _v = stack.clone(); _v.push(x.clone()); _v };
        }
        i = (i + 1);
    }
    while ((stack.len() as i64) > 0) {
        if (stack[((stack.len() as i64) - 1) as usize].clone().as_str() == "(") {
            panic!("invalid expression");
        }
        post = { let mut _v = post.clone(); _v.push(stack[((stack.len() as i64) - 1) as usize].clone()); _v };
        stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
    }
    let mut res: String = String::from("").clone();
    let mut j: i64 = 0;
    while (j < (post.len() as i64)) {
        res = format!("{}{}", res, post[j as usize].clone());
        j = (j + 1);
    }
    return res.clone()
};
        unsafe fn infix_to_prefix(infix: &str) -> String {
    let mut reversed: String = String::from("").clone();
    let mut i = ((infix.len() as i64) - 1);
    while (i >= 0) {
        let mut ch: String = infix.chars().nth(i as usize).unwrap().to_string().clone();
        if (ch.as_str() == "(") {
            reversed = format!("{}{}", reversed, ")");
        } else if (ch.as_str() == ")") {
            reversed = format!("{}{}", reversed, "(");
        } else {
            reversed = format!("{}{}", reversed, ch);
        }
        i = (i - 1);
    }
    let mut postfix: String = infix_to_postfix(&reversed).clone();
    let mut prefix: String = reverse_string(&postfix).clone();
    return prefix.clone()
};
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
