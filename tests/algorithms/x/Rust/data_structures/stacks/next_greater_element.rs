// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_arr: Vec<f64> = Vec::new();
static mut g_expected: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_arr = vec![-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0];
        g_expected = vec![-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0];
                let _start: i64 = _now();
        unsafe fn next_greatest_element_slow(mut xs: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let mut next: f64 = -1.0;
        let mut j: i64 = (i + 1);
        while (j < (xs.len() as i64)) {
            if (xs[i as usize] < xs[j as usize]) {
                next = xs[j as usize];
                break
            }
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(next); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn next_greatest_element_fast(mut xs: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let mut next: f64 = -1.0;
        let mut j: i64 = (i + 1);
        while (j < (xs.len() as i64)) {
            let mut inner: f64 = xs[j as usize];
            if (xs[i as usize] < inner) {
                next = inner;
                break
            }
            j = (j + 1);
        }
        res = { let mut _v = res.clone(); _v.push(next); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn set_at_float(mut xs: Vec<f64>, mut idx: i64, mut value: f64) -> Vec<f64> {
    let mut i: i64 = 0;
    let mut res: Vec<f64> = vec![];
    while (i < (xs.len() as i64)) {
        if (i == idx) {
            res = { let mut _v = res.clone(); _v.push(value); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        }
        i = (i + 1);
    }
    return res
};
        unsafe fn next_greatest_element(mut xs: Vec<f64>) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut k: i64 = 0;
    while (k < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(-1.0); _v };
        k = (k + 1);
    }
    let mut stack: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        while (((stack.len() as i64) > 0) && (xs[i as usize] > xs[stack[((stack.len() as i64) - 1) as usize] as usize])) {
            let mut idx: i64 = stack[((stack.len() as i64) - 1) as usize];
            stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
            res = set_at_float(res.clone(), idx, xs[i as usize]);
        }
        stack = { let mut _v = stack.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    return res
};
        println!("{}", format!("{:?}", next_greatest_element_slow(g_arr.clone().clone())));
        println!("{}", format!("{:?}", next_greatest_element_fast(g_arr.clone().clone())));
        println!("{}", format!("{:?}", next_greatest_element(g_arr.clone().clone())));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
