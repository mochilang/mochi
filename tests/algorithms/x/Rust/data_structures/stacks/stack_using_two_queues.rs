// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct StackWithQueues {
    main_queue: Vec<i64>,
    temp_queue: Vec<i64>,
}
impl std::fmt::Display for StackWithQueues {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"main_queue\": {:?}", self.main_queue)?;
        write!(f, ", ")?;
        write!(f, "\"temp_queue\": {:?}", self.temp_queue)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_stack() -> StackWithQueues {
    return StackWithQueues {main_queue: vec![], temp_queue: vec![]}
};
    fn push(s: &mut StackWithQueues, mut item: i64) {
    (*s).temp_queue = { let mut _v = s.temp_queue.clone().clone(); _v.push(item); _v };
    while ((s.main_queue.clone().len() as i64) > 0) {
        (*s).temp_queue = { let mut _v = s.temp_queue.clone().clone(); _v.push(s.main_queue.clone()[0 as usize]); _v };
        (*s).main_queue = s.main_queue.clone()[1 as usize..(s.main_queue.clone().len() as i64) as usize].to_vec();
    }
    let mut new_main: Vec<i64> = s.temp_queue.clone();
    (*s).temp_queue = s.main_queue.clone();
    (*s).main_queue = new_main.clone();
};
    fn pop(s: &mut StackWithQueues) -> i64 {
    if ((s.main_queue.clone().len() as i64) == 0) {
        panic!("pop from empty stack");
    }
    let mut item: i64 = s.main_queue.clone()[0 as usize];
    (*s).main_queue = s.main_queue.clone()[1 as usize..(s.main_queue.clone().len() as i64) as usize].to_vec();
    return item
};
    fn peek(s: &StackWithQueues) -> i64 {
    if ((s.main_queue.clone().len() as i64) == 0) {
        panic!("peek from empty stack");
    }
    return s.main_queue.clone()[0 as usize]
};
    fn is_empty(s: &StackWithQueues) -> bool {
    return ((s.main_queue.clone().len() as i64) == 0)
};
    let mut stack: StackWithQueues = make_stack();
    push(&mut stack, 1);
    push(&mut stack, 2);
    push(&mut stack, 3);
    println!("{}", peek(&stack).to_string());
    println!("{}", pop(&mut stack).to_string());
    println!("{}", peek(&stack).to_string());
    println!("{}", pop(&mut stack).to_string());
    println!("{}", pop(&mut stack).to_string());
    println!("{}", is_empty(&stack).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
