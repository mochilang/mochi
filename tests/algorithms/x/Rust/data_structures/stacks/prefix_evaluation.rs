// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn split_custom(mut s: String, mut sep: String) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut current: String = String::new();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == sep.as_str()) {
            res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
            current = String::new();
        } else {
            current = format!("{}{}", current, ch);
        }
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(current.clone()); _v };
    return res
};
    fn tokenize(mut s: String) -> Vec<String> {
    let parts: Vec<String> = split_custom(s.clone(), String::from(" "));
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (parts.len() as i64)) {
        let p: String = parts[i as usize].clone().clone();
        if (p.as_str() != "") {
            res = { let mut _v = res.clone(); _v.push(p.clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn is_digit(mut ch: String) -> bool {
    return ((ch.as_str() >= "0") && (ch.as_str() <= "9"))
};
    fn is_operand(mut token: String) -> bool {
    if (token.as_str() == "") {
        return false
    }
    let mut i: i64 = 0;
    while (i < (token.len() as i64)) {
        let ch: String = { let tmp = &token; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if !is_digit(ch.clone()) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn to_int(mut token: String) -> i64 {
    let mut res: i64 = 0;
    let mut i: i64 = 0;
    while (i < (token.len() as i64)) {
        res = ((res * 10) + { let n: i64 = { let tmp = &token; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.parse().unwrap(); n });
        i = (i + 1);
    }
    return res
};
    fn apply_op(mut op: String, mut a: f64, mut b: f64) -> f64 {
    if (op.as_str() == "+") {
        return (a + b)
    }
    if (op.as_str() == "-") {
        return (a - b)
    }
    if (op.as_str() == "*") {
        return (a * b)
    }
    if (op.as_str() == "/") {
        return (a / b)
    }
    return 0.0
};
    fn evaluate(mut expression: String) -> f64 {
    let tokens: Vec<String> = tokenize(expression.clone());
    let mut stack: Vec<f64> = vec![];
    let mut i: i64 = ((tokens.len() as i64) - 1);
    while (i >= 0) {
        let token: String = tokens[i as usize].clone().clone();
        if (token.as_str() != "") {
            if is_operand(token.clone()) {
                stack = { let mut _v = stack.clone(); _v.push((to_int(token.clone()) as f64)); _v };
            } else {
                let o1: f64 = stack[((stack.len() as i64) - 1) as usize];
                let o2: f64 = stack[((stack.len() as i64) - 2) as usize];
                stack = stack[0 as usize..((stack.len() as i64) - 2) as usize].to_vec();
                let res: f64 = apply_op(token.clone(), o1, o2);
                stack = { let mut _v = stack.clone(); _v.push(res); _v };
            }
        }
        i = (i - 1);
    }
    return stack[0 as usize]
};
    fn eval_rec(mut tokens: Vec<String>, mut pos: i64) -> Vec<f64> {
    let token: String = tokens[pos as usize].clone().clone();
    let next: i64 = (pos + 1);
    if is_operand(token.clone()) {
        return vec![(to_int(token.clone()) as f64), (next as f64)]
    }
    let left: Vec<f64> = eval_rec(tokens.clone(), next);
    let a: f64 = left[0 as usize];
    let p1: i64 = (left[1 as usize] as i64);
    let right: Vec<f64> = eval_rec(tokens.clone(), p1);
    let b: f64 = right[0 as usize];
    let p2: f64 = right[1 as usize];
    return vec![apply_op(token.clone(), a, b), p2]
};
    fn evaluate_recursive(mut expression: String) -> f64 {
    let tokens: Vec<String> = tokenize(expression.clone());
    let res: Vec<f64> = eval_rec(tokens.clone(), 0);
    return res[0 as usize]
};
    let test_expression: String = String::from("+ 9 * 2 6");
    println!("{}", evaluate(test_expression.clone()).to_string());
    let test_expression2: String = String::from("/ * 10 2 + 4 1 ");
    println!("{}", evaluate(test_expression2.clone()).to_string());
    let test_expression3: String = String::from("+ * 2 3 / 8 4");
    println!("{}", evaluate_recursive(test_expression3.clone()).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
