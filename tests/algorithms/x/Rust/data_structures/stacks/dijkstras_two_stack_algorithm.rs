// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_equation: String = String::new();
fn main() {
    unsafe {
        g_equation = String::from("(5 + ((4 * 2) * (2 + 3)))").clone();
                let _start: i64 = _now();
        unsafe fn is_digit(ch: &str) -> bool {
    return ((((((((((ch == "0") || (ch == "1")) || (ch == "2")) || (ch == "3")) || (ch == "4")) || (ch == "5")) || (ch == "6")) || (ch == "7")) || (ch == "8")) || (ch == "9"))
};
        unsafe fn slice_without_last_int(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < ((xs.len() as i64) - 1)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn slice_without_last_string(mut xs: Vec<String>) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < ((xs.len() as i64) - 1)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize].clone()); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn dijkstras_two_stack_algorithm(equation: &str) -> i64 {
    let mut operand_stack: Vec<i64> = vec![];
    let mut operator_stack: Vec<String> = vec![];
    let mut idx: i64 = 0;
    while (idx < (equation.len() as i64)) {
        let mut ch: String = { let tmp = &equation; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.clone();
        if is_digit(&ch) {
            operand_stack = { let mut _v = operand_stack.clone(); _v.push({ let n: i64 = ch.parse().unwrap(); n }); _v };
        } else if ((((ch.as_str() == "+") || (ch.as_str() == "-")) || (ch.as_str() == "*")) || (ch.as_str() == "/")) {
            operator_stack = { let mut _v = operator_stack.clone(); _v.push(ch.clone()); _v };
        } else if (ch.as_str() == ")") {
            let mut opr: String = operator_stack[((operator_stack.len() as i64) - 1) as usize].clone().clone();
            operator_stack = slice_without_last_string(operator_stack.clone());
            let mut num1: i64 = operand_stack[((operand_stack.len() as i64) - 1) as usize];
            operand_stack = slice_without_last_int(operand_stack.clone());
            let mut num2: i64 = operand_stack[((operand_stack.len() as i64) - 1) as usize];
            operand_stack = slice_without_last_int(operand_stack.clone());
            let mut total: i64 = if (opr.as_str() == "+") { (num2 + num1) } else if (opr.as_str() == "-") { (num2 - num1) } else if (opr.as_str() == "*") { (num2 * num1) } else { (num2 / num1) };
            operand_stack = { let mut _v = operand_stack.clone(); _v.push(total); _v };
        }
        idx = (idx + 1);
    }
    return operand_stack[((operand_stack.len() as i64) - 1) as usize]
};
        println!("{}", format!("{}{}", format!("{}{}", g_equation, " = "), dijkstras_two_stack_algorithm(&g_equation).to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
