// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn lexical_order(mut max_number: i64) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut stack: Vec<i64> = vec![1];
    while ((stack.len() as i64) > 0) {
        let mut idx = ((stack.len() as i64) - 1);
        let mut num: i64 = stack[idx as usize];
        stack = stack[0 as usize..idx as usize].to_vec();
        if (num > max_number) {
            continue
        }
        result = { let mut _v = result.clone(); _v.push(num); _v };
        if ((num % 10) != 9) {
            stack = { let mut _v = stack.clone(); _v.push((num + 1)); _v };
        }
        stack = { let mut _v = stack.clone(); _v.push((num * 10)); _v };
    }
    return result
};
    fn join_ints(mut xs: Vec<i64>) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, " ");
        }
        res = format!("{}{}", res, xs[i as usize].to_string());
        i = (i + 1);
    }
    return res.clone()
};
    println!("{}", join_ints(lexical_order(13)));
    println!("{}", format!("{:?}", lexical_order(1)));
    println!("{}", join_ints(lexical_order(20)));
    println!("{}", join_ints(lexical_order(25)));
    println!("{}", format!("{:?}", lexical_order(12)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
