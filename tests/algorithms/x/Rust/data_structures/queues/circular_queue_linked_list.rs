// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct CircularQueue {
    data: Vec<String>,
    next: Vec<i64>,
    prev: Vec<i64>,
    front: i64,
    rear: i64,
}
impl std::fmt::Display for CircularQueue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {:?}", self.next)?;
        write!(f, ", ")?;
        write!(f, "\"prev\": {:?}", self.prev)?;
        write!(f, ", ")?;
        write!(f, "\"front\": {}", self.front)?;
        write!(f, ", ")?;
        write!(f, "\"rear\": {}", self.rear)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct DequeueResult {
    queue: CircularQueue,
    value: String,
}
impl std::fmt::Display for DequeueResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"queue\": {}", self.queue)?;
        write!(f, ", ")?;
        write!(f, "\"value\": \"{}\"", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn create_queue(mut capacity: i64) -> CircularQueue {
    let mut data: Vec<String> = vec![];
    let mut next: Vec<i64> = vec![];
    let mut prev: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < capacity) {
        data = { let mut _v = data.clone(); _v.push("".to_string()); _v };
        next = { let mut _v = next.clone(); _v.push(((i + 1) % capacity)); _v };
        prev = { let mut _v = prev.clone(); _v.push((((i - 1) + capacity) % capacity)); _v };
        i = (i + 1);
    }
    return CircularQueue {data: data, next: next, prev: prev, front: 0, rear: 0}
};
    fn is_empty(q: &CircularQueue) -> bool {
    return ((q.front == q.rear) && (q.data.clone()[q.front as usize].clone().as_str() == ""))
};
    fn check_can_perform(q: &mut CircularQueue) {
    if is_empty(q) {
        panic!("Empty Queue");
    }
};
    fn check_is_full(q: &CircularQueue) {
    if (q.next.clone()[q.rear as usize] == q.front) {
        panic!("Full Queue");
    }
};
    fn peek(q: &mut CircularQueue) -> String {
    check_can_perform(q);
    return q.data.clone()[q.front as usize].clone().clone()
};
    fn enqueue(mut q: CircularQueue, value: &str) -> CircularQueue {
    check_is_full(&q);
    if !is_empty(&q) {
        q.rear = q.next.clone()[q.rear as usize];
    }
    let mut data: Vec<String> = q.data.clone();
    data[q.rear as usize] = value.to_string();
    q.data = data.clone();
    return q
};
    fn dequeue(q: &mut CircularQueue) -> DequeueResult {
    check_can_perform(q);
    let mut data: Vec<String> = q.data.clone();
    let mut val: String = data[q.front as usize].clone().clone();
    data[(*q).front as usize] = String::from("");
    (*q).data = data.clone();
    if (q.front != q.rear) {
        (*q).front = q.next.clone()[q.front as usize];
    }
    return DequeueResult {queue: q.clone(), value: val.clone()}
};
    fn mochi_main() {
    let mut q: CircularQueue = create_queue(3);
    println!("{}", is_empty(&q).to_string());
    q = enqueue(q, &"a");
    q = enqueue(q, &"b");
    println!("{}", peek(&mut q));
    let mut res: DequeueResult = dequeue(&mut q);
    q = res.queue.clone();
    println!("{}", res.value.clone());
    res = dequeue(&mut q);
    q = res.queue.clone();
    println!("{}", res.value.clone());
    println!("{}", is_empty(&q).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
