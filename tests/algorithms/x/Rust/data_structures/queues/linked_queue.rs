// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    data: String,
    next: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": \"{}\"", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct LinkedQueue {
    nodes: Vec<Node>,
    front: i64,
    rear: i64,
}
impl std::fmt::Display for LinkedQueue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, ", ")?;
        write!(f, "\"front\": {}", self.front)?;
        write!(f, ", ")?;
        write!(f, "\"rear\": {}", self.rear)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_queue() -> LinkedQueue {
    return LinkedQueue {nodes: vec![], front: (0 - 1), rear: (0 - 1)}
};
    fn is_empty(q: &LinkedQueue) -> bool {
    return (q.front == (0 - 1))
};
    fn put(q: &mut LinkedQueue, item: &str) {
    let mut node: Node = Node {data: item.to_string(), next: (0 - 1)};
    (*q).nodes = { let mut _v = q.nodes.clone().clone(); _v.push(node.clone()); _v };
    let mut idx = ((q.nodes.clone().len() as i64) - 1);
    if (q.front == (0 - 1)) {
        (*q).front = idx;
        (*q).rear = idx;
    } else {
        let mut nodes: Vec<Node> = q.nodes.clone();
        nodes[(*q).rear as usize].next = idx;
        (*q).nodes = nodes.clone();
        (*q).rear = idx;
    }
};
    fn get(q: &mut LinkedQueue) -> String {
    if is_empty(q) {
        panic!("dequeue from empty queue");
    }
    let mut idx: i64 = q.front;
    let mut node: Node = q.nodes.clone()[idx as usize].clone();
    (*q).front = node.next;
    if (q.front == (0 - 1)) {
        (*q).rear = (0 - 1);
    }
    return node.data.clone().clone()
};
    fn length(q: &LinkedQueue) -> i64 {
    let mut count: i64 = 0;
    let mut idx: i64 = q.front;
    while (idx != (0 - 1)) {
        count = (count + 1);
        idx = q.nodes.clone()[idx as usize].clone().next;
    }
    return count
};
    fn to_string(q: &LinkedQueue) -> String {
    let mut res: String = String::from("").clone();
    let mut idx: i64 = q.front;
    let mut first: bool = true;
    while (idx != (0 - 1)) {
        let mut node: Node = q.nodes.clone()[idx as usize].clone();
        if first {
            res = node.data.clone();
            first = false;
        } else {
            res = format!("{}{}", format!("{}{}", res, " <- "), node.data.clone());
        }
        idx = node.next;
    }
    return res.clone()
};
    fn clear(q: &mut LinkedQueue) {
    (*q).nodes = vec![];
    (*q).front = (0 - 1);
    (*q).rear = (0 - 1);
};
    let mut queue: LinkedQueue = new_queue();
    println!("{}", is_empty(&queue).to_string());
    put(&mut queue, &"5");
    put(&mut queue, &"9");
    put(&mut queue, &"python");
    println!("{}", is_empty(&queue).to_string());
    println!("{}", get(&mut queue));
    put(&mut queue, &"algorithms");
    println!("{}", get(&mut queue));
    println!("{}", get(&mut queue));
    println!("{}", get(&mut queue));
    println!("{}", is_empty(&queue).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
