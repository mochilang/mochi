// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Deque {
    data: Vec<i64>,
}
impl std::fmt::Display for Deque {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct PopResult {
    deque: Deque,
    value: i64,
}
impl std::fmt::Display for PopResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"deque\": {}", self.deque)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_deque() -> Deque {
    return Deque {data: vec![]}
};
    fn push_back(dq: &Deque, mut value: i64) -> Deque {
    return Deque {data: { let mut _v = dq.data.clone().clone(); _v.push(value); _v }}
};
    fn push_front(dq: &Deque, mut value: i64) -> Deque {
    let mut res: Vec<i64> = vec![value];
    let mut i: i64 = 0;
    while (i < (dq.data.clone().len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(dq.data.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return Deque {data: res}
};
    fn extend_back(dq: &Deque, mut values: Vec<i64>) -> Deque {
    let mut res: Vec<i64> = dq.data.clone();
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(values[i as usize]); _v };
        i = (i + 1);
    }
    return Deque {data: res}
};
    fn extend_front(dq: &Deque, mut values: Vec<i64>) -> Deque {
    let mut res: Vec<i64> = vec![];
    let mut i = ((values.len() as i64) - 1);
    while (i >= 0) {
        res = { let mut _v = res.clone(); _v.push(values[i as usize]); _v };
        i = (i - 1);
    }
    let mut j: i64 = 0;
    while (j < (dq.data.clone().len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(dq.data.clone()[j as usize]); _v };
        j = (j + 1);
    }
    return Deque {data: res}
};
    fn pop_back(dq: &Deque) -> PopResult {
    if ((dq.data.clone().len() as i64) == 0) {
        panic!("pop from empty deque");
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < ((dq.data.clone().len() as i64) - 1)) {
        res = { let mut _v = res.clone(); _v.push(dq.data.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return PopResult {deque: Deque {data: res}, value: dq.data.clone()[((dq.data.clone().len() as i64) - 1) as usize]}
};
    fn pop_front(dq: &Deque) -> PopResult {
    if ((dq.data.clone().len() as i64) == 0) {
        panic!("popleft from empty deque");
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (dq.data.clone().len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(dq.data.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return PopResult {deque: Deque {data: res}, value: dq.data.clone()[0 as usize]}
};
    fn is_empty(dq: &Deque) -> bool {
    return ((dq.data.clone().len() as i64) == 0)
};
    fn length(dq: &Deque) -> i64 {
    return (dq.data.clone().len() as i64)
};
    fn to_string(dq: &Deque) -> String {
    if ((dq.data.clone().len() as i64) == 0) {
        return String::from("[]")
    }
    let mut s: String = format!("{}{}", "[", dq.data.clone()[0 as usize].to_string()).clone();
    let mut i: i64 = 1;
    while (i < (dq.data.clone().len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, ", "), dq.data.clone()[i as usize].to_string());
        i = (i + 1);
    }
    return format!("{}{}", s, "]").clone()
};
    fn mochi_main() {
    let mut dq: Deque = empty_deque();
    dq = push_back(&dq, 2);
    dq = push_front(&dq, 1);
    dq = extend_back(&dq, vec![3, 4]);
    dq = extend_front(&dq, vec![0]);
    println!("{}", to_string(&dq));
    let mut r: PopResult = pop_back(&dq);
    dq = r.deque.clone();
    println!("{}", r.value);
    r = pop_front(&dq);
    dq = r.deque.clone();
    println!("{}", r.value);
    println!("{}", to_string(&dq));
    println!("{}", if is_empty(&empty_deque()) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
