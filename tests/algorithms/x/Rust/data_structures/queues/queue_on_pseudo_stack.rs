// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Queue {
    stack: Vec<i64>,
    length: i64,
}
impl std::fmt::Display for Queue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"stack\": {:?}", self.stack)?;
        write!(f, ", ")?;
        write!(f, "\"length\": {}", self.length)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct GetResult {
    queue: Queue,
    value: i64,
}
impl std::fmt::Display for GetResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"queue\": {}", self.queue)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct FrontResult {
    queue: Queue,
    value: i64,
}
impl std::fmt::Display for FrontResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"queue\": {}", self.queue)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_queue() -> Queue {
    return Queue {stack: vec![], length: 0}
};
    fn put(q: &Queue, mut item: i64) -> Queue {
    let mut s: Vec<i64> = { let mut _v = q.stack.clone().clone(); _v.push(item); _v };
    return Queue {stack: s, length: (q.length + 1)}
};
    fn drop_first(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn drop_last(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < ((xs.len() as i64) - 1)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn rotate(q: &Queue, mut rotation: i64) -> Queue {
    let mut s: Vec<i64> = q.stack.clone();
    let mut i: i64 = 0;
    while ((i < rotation) && ((s.len() as i64) > 0)) {
        let mut temp: i64 = s[0 as usize];
        s = drop_first(s.clone());
        s = { let mut _v = s.clone(); _v.push(temp); _v };
        i = (i + 1);
    }
    return Queue {stack: s, length: q.length}
};
    fn get(q: &Queue) -> GetResult {
    if (q.length == 0) {
        panic!("queue empty");
    }
    let mut q1: Queue = rotate(q, 1);
    let mut v: i64 = q1.stack.clone()[(q1.length - 1) as usize];
    let mut s: Vec<i64> = drop_last(q1.stack.clone().clone());
    let mut q2: Queue = Queue {stack: s, length: q1.length};
    q2 = rotate(&q2, (q2.length - 1));
    q2 = Queue {stack: q2.stack.clone(), length: (q2.length - 1)};
    return GetResult {queue: q2, value: v}
};
    fn front(q: &Queue) -> FrontResult {
    let mut r: GetResult = get(q);
    let mut q2: Queue = put(&r.queue.clone(), r.value);
    q2 = rotate(&q2, (q2.length - 1));
    return FrontResult {queue: q2, value: r.value}
};
    fn size(q: &Queue) -> i64 {
    return q.length
};
    fn to_string(q: &Queue) -> String {
    let mut s: String = String::from("<").clone();
    if (q.length > 0) {
        s = format!("{}{}", s, q.stack.clone()[0 as usize].to_string());
        let mut i: i64 = 1;
        while (i < q.length) {
            s = format!("{}{}", format!("{}{}", s, ", "), q.stack.clone()[i as usize].to_string());
            i = (i + 1);
        }
    }
    s = format!("{}{}", s, ">");
    return s.clone()
};
    fn mochi_main() {
    let mut q: Queue = empty_queue();
    q = put(&q, 1);
    q = put(&q, 2);
    q = put(&q, 3);
    println!("{}", to_string(&q));
    let mut g: GetResult = get(&q);
    q = g.queue.clone();
    println!("{}", g.value);
    println!("{}", to_string(&q));
    let mut f: FrontResult = front(&q);
    q = f.queue.clone();
    println!("{}", f.value);
    println!("{}", to_string(&q));
    println!("{}", size(&q));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
