// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct CircularQueue {
    data: Vec<i64>,
    front: i64,
    rear: i64,
    size: i64,
    capacity: i64,
}
impl std::fmt::Display for CircularQueue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"front\": {}", self.front)?;
        write!(f, ", ")?;
        write!(f, "\"rear\": {}", self.rear)?;
        write!(f, ", ")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, ", ")?;
        write!(f, "\"capacity\": {}", self.capacity)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct DequeueResult {
    queue: CircularQueue,
    value: i64,
}
impl std::fmt::Display for DequeueResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"queue\": {}", self.queue)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn create_queue(mut capacity: i64) -> CircularQueue {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < capacity) {
        arr = { let mut _v = arr.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    return CircularQueue {data: arr, front: 0, rear: 0, size: 0, capacity: capacity}
};
    fn length(q: &CircularQueue) -> i64 {
    return q.size
};
    fn is_empty(q: &CircularQueue) -> bool {
    return (q.size == 0)
};
    fn front(q: &mut CircularQueue) -> i64 {
    if is_empty(q) {
        return 0
    }
    return q.data.clone()[q.front as usize]
};
    fn enqueue(mut q: CircularQueue, mut value: i64) -> CircularQueue {
    if (q.size >= q.capacity) {
        panic!("QUEUE IS FULL");
    }
    let mut arr: Vec<i64> = q.data.clone();
    arr[q.rear as usize] = value;
    q.data = arr.clone();
    q.rear = ((q.rear + 1) % q.capacity);
    q.size = (q.size + 1);
    return q
};
    fn dequeue(q: &mut CircularQueue) -> DequeueResult {
    if (q.size == 0) {
        panic!("UNDERFLOW");
    }
    let mut value: i64 = q.data.clone()[q.front as usize];
    let mut arr2: Vec<i64> = q.data.clone();
    arr2[(*q).front as usize] = 0;
    (*q).data = arr2.clone();
    (*q).front = ((q.front + 1) % q.capacity);
    (*q).size = (q.size - 1);
    return DequeueResult {queue: q.clone(), value: value}
};
    fn mochi_main() {
    let mut q: CircularQueue = create_queue(5);
    println!("{}", if is_empty(&q) { 1 } else { 0 });
    q = enqueue(q, 10);
    println!("{}", if is_empty(&q) { 1 } else { 0 });
    q = enqueue(q, 20);
    q = enqueue(q, 30);
    println!("{}", front(&mut q));
    let mut r: DequeueResult = dequeue(&mut q);
    q = r.queue.clone();
    println!("{}", r.value);
    println!("{}", front(&mut q));
    println!("{}", length(&q));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
