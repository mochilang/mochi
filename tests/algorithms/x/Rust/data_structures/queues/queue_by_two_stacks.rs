// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Queue {
    stack1: Vec<i64>,
    stack2: Vec<i64>,
}
impl std::fmt::Display for Queue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"stack1\": {:?}", self.stack1)?;
        write!(f, ", ")?;
        write!(f, "\"stack2\": {:?}", self.stack2)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct GetResult {
    queue: Queue,
    value: i64,
}
impl std::fmt::Display for GetResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"queue\": {}", self.queue)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_queue(mut items: Vec<i64>) -> Queue {
    return Queue {stack1: items, stack2: vec![]}
};
    fn len_queue(q: &Queue) -> i64 {
    return ((q.stack1.clone().len() as i64) + (q.stack2.clone().len() as i64))
};
    fn str_queue(q: &Queue) -> String {
    let mut items: Vec<i64> = vec![];
    let mut i = ((q.stack2.clone().len() as i64) - 1);
    while (i >= 0) {
        items = { let mut _v = items.clone(); _v.push(q.stack2.clone()[i as usize]); _v };
        i = (i - 1);
    }
    let mut j: i64 = 0;
    while (j < (q.stack1.clone().len() as i64)) {
        items = { let mut _v = items.clone(); _v.push(q.stack1.clone()[j as usize]); _v };
        j = (j + 1);
    }
    let mut s: String = String::from("Queue((").clone();
    let mut k: i64 = 0;
    while (k < (items.len() as i64)) {
        s = format!("{}{}", s, items[k as usize].to_string());
        if (k < ((items.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        k = (k + 1);
    }
    s = format!("{}{}", s, "))");
    return s.clone()
};
    fn put(q: &Queue, mut item: i64) -> Queue {
    let mut s1: Vec<i64> = q.stack1.clone();
    s1 = { let mut _v = s1.clone(); _v.push(item); _v };
    return Queue {stack1: s1, stack2: q.stack2.clone()}
};
    fn get(q: &Queue) -> GetResult {
    let mut s1: Vec<i64> = q.stack1.clone();
    let mut s2: Vec<i64> = q.stack2.clone();
    if ((s2.len() as i64) == 0) {
        while ((s1.len() as i64) > 0) {
            let mut idx = ((s1.len() as i64) - 1);
            let mut v: i64 = s1[idx as usize];
            let mut new_s1: Vec<i64> = vec![];
            let mut i: i64 = 0;
            while (i < idx) {
                new_s1 = { let mut _v = new_s1.clone(); _v.push(s1[i as usize]); _v };
                i = (i + 1);
            }
            s1 = new_s1.clone();
            s2 = { let mut _v = s2.clone(); _v.push(v); _v };
        }
    }
    if ((s2.len() as i64) == 0) {
        panic!("Queue is empty");
    }
    let mut idx2 = ((s2.len() as i64) - 1);
    let mut value: i64 = s2[idx2 as usize];
    let mut new_s2: Vec<i64> = vec![];
    let mut j: i64 = 0;
    while (j < idx2) {
        new_s2 = { let mut _v = new_s2.clone(); _v.push(s2[j as usize]); _v };
        j = (j + 1);
    }
    s2 = new_s2.clone();
    return GetResult {queue: Queue {stack1: s1, stack2: s2}, value: value}
};
    let mut q: Queue = new_queue(vec![10, 20, 30]);
    let mut r1: GetResult = get(&q);
    q = r1.queue.clone();
    println!("{}", r1.value);
    q = put(&q, 40);
    let mut r2: GetResult = get(&q);
    q = r2.queue.clone();
    println!("{}", r2.value);
    let mut r3: GetResult = get(&q);
    q = r3.queue.clone();
    println!("{}", r3.value);
    println!("{}", len_queue(&q));
    let mut r4: GetResult = get(&q);
    q = r4.queue.clone();
    println!("{}", r4.value);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
