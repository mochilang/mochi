// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LinkedList {
    data: Vec<i64>,
}
impl std::fmt::Display for LinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_list() -> LinkedList {
    return LinkedList {data: vec![]}
};
    fn append_value(mut list: LinkedList, mut value: i64) -> LinkedList {
    let mut d: Vec<i64> = list.data.clone();
    d = { let mut _v = d.clone(); _v.push(value); _v };
    return LinkedList {data: d.clone()}
};
    fn extend_list(mut list: LinkedList, mut items: Vec<i64>) -> LinkedList {
    let mut result: LinkedList = list.clone();
    let mut i: i64 = 0;
    while (i < (items.len() as i64)) {
        result = append_value(result.clone(), items[i as usize]);
        i = (i + 1);
    }
    return result
};
    fn to_string(mut list: LinkedList) -> String {
    if ((list.data.clone().len() as i64) == 0) {
        return String::new()
    }
    let mut s: String = list.data.clone()[0 as usize].to_string().clone();
    let mut i: i64 = 1;
    while (i < (list.data.clone().len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, " -> "), list.data.clone()[i as usize].to_string());
        i = (i + 1);
    }
    return s.clone()
};
    fn make_linked_list(mut items: Vec<i64>) -> LinkedList {
    if ((items.len() as i64) == 0) {
        panic!("The Elements List is empty");
    }
    let mut ll: LinkedList = empty_list();
    ll = extend_list(ll.clone(), items.clone());
    return ll
};
    fn in_reverse(mut list: LinkedList) -> String {
    if ((list.data.clone().len() as i64) == 0) {
        return String::new()
    }
    let mut i: i64 = ((list.data.clone().len() as i64) - 1);
    let mut s: String = list.data.clone()[i as usize].to_string().clone();
    i = (i - 1);
    while (i >= 0) {
        s = format!("{}{}", format!("{}{}", s, " <- "), list.data.clone()[i as usize].to_string());
        i = (i - 1);
    }
    return s.clone()
};
    let mut mochi_main = || {
    let linked_list: LinkedList = make_linked_list(vec![14, 52, 14, 12, 43]);
    println!("{}", format!("{}{}", "Linked List:  ", to_string(linked_list.clone())));
    println!("{}", format!("{}{}", "Reverse List: ", in_reverse(linked_list.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
