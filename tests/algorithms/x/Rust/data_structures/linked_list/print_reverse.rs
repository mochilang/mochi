// Generated by Mochi transpiler v0.10.61
#[derive(Debug, Clone, Default)]
struct LinkedList {
    data: Vec<i64>,
}
impl std::fmt::Display for LinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

fn empty_list() -> LinkedList {
    return LinkedList {data: vec![]}
}

fn append_value(list: &LinkedList, mut value: i64) -> LinkedList {
    let mut d: Vec<i64> = list.data.clone();
    d = { let mut _v = d.clone(); _v.push(value); _v };
    return LinkedList {data: d}
}

fn extend_list(list: &LinkedList, mut items: Vec<i64>) -> LinkedList {
    let mut result: LinkedList = list.clone();
    let mut i: i64 = 0;
    while (i < (items.len() as i64)) {
        result = append_value(&result, items[i as usize]);
        i = (i + 1);
    }
    return result
}

fn to_string(list: &LinkedList) -> String {
    if ((list.data.clone().len() as i64) == 0) {
        return String::from("")
    }
    let mut s = list.data.clone()[0 as usize].to_string();
    let mut i: i64 = 1;
    while (i < (list.data.clone().len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, " -> "), list.data.clone()[i as usize].to_string());
        i = (i + 1);
    }
    return s.to_string().clone()
}

fn make_linked_list(items: &mut Vec<i64>) -> LinkedList {
    if ((items.len() as i64) == 0) {
        panic!("The Elements List is empty");
    }
    let mut ll: LinkedList = empty_list();
    ll = extend_list(&ll, items.clone());
    return ll
}

fn in_reverse(list: &LinkedList) -> String {
    if ((list.data.clone().len() as i64) == 0) {
        return String::from("")
    }
    let mut i = ((list.data.clone().len() as i64) - 1);
    let mut s = list.data.clone()[i as usize].to_string();
    i = (i - 1);
    while (i >= 0) {
        s = format!("{}{}", format!("{}{}", s, " <- "), list.data.clone()[i as usize].to_string());
        i = (i - 1);
    }
    return s.to_string().clone()
}

fn mochi_main() {
    let mut linked_list: LinkedList = make_linked_list(&mut vec![14, 52, 14, 12, 43]);
    println!("{}", format!("{}{}", "Linked List:  ", to_string(&linked_list)));
    println!("{}", format!("{}{}", "Reverse List: ", in_reverse(&linked_list)));
}

fn main() {
    mochi_main();
}
