// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    data: i64,
    next: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, "}}")
    }
}

static mut g_nodes: Vec<Node> = Vec::new();
fn main() {
    unsafe {
        g_nodes = vec![];
                let _start: i64 = _now();
        let mut NIL: i64 = (0 - 1);
        let make_linked_list = move |elements: Vec<i64>| -> i64 {
    if ((elements.len() as i64) == 0) {
        panic!("The Elements List is empty");
    }
    let mut nodes: Vec<i64> = vec![];
    g_nodes = { let mut _v = g_nodes.clone().clone(); _v.push(Node {data: elements[0 as usize], next: NIL}); _v };
    let mut head: i64 = 0;
    let mut current: i64 = head;
    let mut i: i64 = 1;
    while (i < (elements.len() as i64)) {
        g_nodes = { let mut _v = g_nodes.clone().clone(); _v.push(Node {data: elements[i as usize], next: NIL}); _v };
        g_nodes[current as usize].next = ((g_nodes.clone().len() as i64) - 1);
        current = ((g_nodes.clone().len() as i64) - 1);
        i = (i + 1);
    }
    return head
};
        let node_to_string = move |head: i64| -> String {
    let mut s: String = String::from("").clone();
    let mut index: i64 = head;
    while (index != NIL) {
        let mut node: Node = g_nodes.clone()[index as usize].clone();
        s = format!("{}{}", format!("{}{}", format!("{}{}", s, "<"), node.data.to_string()), "> ---> ");
        index = node.next;
    }
    s = format!("{}{}", s, "<END>");
    return s.clone()
};
        let mochi_main = move || {
    let mut list_data: Vec<i64> = vec![1, 3, 5, 32, 44, 12, 43];
    println!("{}", format!("{}{}", "List: ", format!("{:?}", list_data)));
    println!("{}", "Creating Linked List from List.");
    let mut head: i64 = make_linked_list(list_data.clone());
    println!("{}", "Linked List:");
    println!("{}", node_to_string(head));
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
