// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_MAX_LEVEL: i64 = 0;
static mut g_P: f64 = 0.0;
static mut g_seed: i64 = 0;
static mut g_node_keys: Vec<i64> = Vec::new();
static mut g_node_vals: Vec<i64> = Vec::new();
static mut g_node_forwards: Vec<Vec<i64>> = Vec::new();
static mut g_level: i64 = 0;
fn main() {
    unsafe {
        g_MAX_LEVEL = 6;
        g_P = 0.5;
        g_seed = 1;
        g_node_keys = vec![];
        g_node_vals = vec![];
        g_node_forwards = vec![];
        g_level = 1;
                let _start: i64 = _now();
        let mut NIL: i64 = (0 - 1);
        let random = move || -> f64 {
    g_seed = (((g_seed * 13) + 7) % 100);
    return ((g_seed as f64) / 100.0)
};
        let random_level = move || -> i64 {
    let mut lvl: i64 = 1;
    while ((random() < g_P) && (lvl < g_MAX_LEVEL)) {
        lvl = (lvl + 1);
    }
    return lvl
};
        let empty_forward = move || -> Vec<i64> {
    let mut f: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < g_MAX_LEVEL) {
        f = { let mut _v = f.clone(); _v.push(NIL); _v };
        i = (i + 1);
    }
    return f
};
        let init = move || {
    g_node_keys = vec![-1];
    g_node_vals = vec![0];
    g_node_forwards = vec![empty_forward()];
    g_level = 1;
};
        let insert = move |key: i64, value: i64| {
    let mut update: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < g_MAX_LEVEL) {
        update = { let mut _v = update.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut x: i64 = 0;
    i = (g_level - 1);
    while (i >= 0) {
        while ((g_node_forwards.clone()[x as usize].clone()[i as usize] != NIL) && (g_node_keys.clone()[g_node_forwards.clone()[x as usize].clone()[i as usize] as usize] < key)) {
            x = g_node_forwards.clone()[x as usize].clone()[i as usize];
        }
        update[i as usize] = x;
        i = (i - 1);
    }
    x = g_node_forwards.clone()[x as usize].clone()[0 as usize];
    if ((x != NIL) && (g_node_keys.clone()[x as usize] == key)) {
        g_node_vals[x as usize] = value;
        return
    }
    let mut lvl: i64 = random_level();
    if (lvl > g_level) {
        let mut j: i64 = g_level;
        while (j < lvl) {
            update[j as usize] = 0;
            j = (j + 1);
        }
        g_level = lvl;
    }
    g_node_keys = { let mut _v = g_node_keys.clone().clone(); _v.push(key); _v };
    g_node_vals = { let mut _v = g_node_vals.clone().clone(); _v.push(value); _v };
    let mut forwards: Vec<i64> = empty_forward();
    let mut idx = ((g_node_keys.clone().len() as i64) - 1);
    i = 0;
    while (i < lvl) {
        forwards[i as usize] = g_node_forwards.clone()[update[i as usize] as usize].clone()[i as usize];
        g_node_forwards[update[i as usize] as usize][i as usize] = idx;
        i = (i + 1);
    }
    g_node_forwards = { let mut _v = g_node_forwards.clone().clone(); _v.push(forwards.clone()); _v };
};
        let find = move |key: i64| -> i64 {
    let mut x: i64 = 0;
    let mut i: i64 = (g_level - 1);
    while (i >= 0) {
        while ((g_node_forwards.clone()[x as usize].clone()[i as usize] != NIL) && (g_node_keys.clone()[g_node_forwards.clone()[x as usize].clone()[i as usize] as usize] < key)) {
            x = g_node_forwards.clone()[x as usize].clone()[i as usize];
        }
        i = (i - 1);
    }
    x = g_node_forwards.clone()[x as usize].clone()[0 as usize];
    if ((x != NIL) && (g_node_keys.clone()[x as usize] == key)) {
        return g_node_vals.clone()[x as usize]
    }
    return -1
};
        let delete = move |key: i64| {
    let mut update: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < g_MAX_LEVEL) {
        update = { let mut _v = update.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut x: i64 = 0;
    i = (g_level - 1);
    while (i >= 0) {
        while ((g_node_forwards.clone()[x as usize].clone()[i as usize] != NIL) && (g_node_keys.clone()[g_node_forwards.clone()[x as usize].clone()[i as usize] as usize] < key)) {
            x = g_node_forwards.clone()[x as usize].clone()[i as usize];
        }
        update[i as usize] = x;
        i = (i - 1);
    }
    x = g_node_forwards.clone()[x as usize].clone()[0 as usize];
    if ((x == NIL) || (g_node_keys.clone()[x as usize] != key)) {
        return
    }
    i = 0;
    while (i < g_level) {
        if (g_node_forwards.clone()[update[i as usize] as usize].clone()[i as usize] == x) {
            g_node_forwards[update[i as usize] as usize][i as usize] = g_node_forwards.clone()[x as usize].clone()[i as usize];
        }
        i = (i + 1);
    }
    while ((g_level > 1) && (g_node_forwards.clone()[0 as usize].clone()[(g_level - 1) as usize] == NIL)) {
        g_level = (g_level - 1);
    }
};
        let to_string = move || -> String {
    let mut s: String = String::from("").clone();
    let mut x: i64 = g_node_forwards.clone()[0 as usize].clone()[0 as usize];
    while (x != NIL) {
        if (s.as_str() != "") {
            s = format!("{}{}", s, " -> ");
        }
        s = format!("{}{}", format!("{}{}", format!("{}{}", s, g_node_keys.clone()[x as usize].to_string()), ":"), g_node_vals.clone()[x as usize].to_string());
        x = g_node_forwards.clone()[x as usize].clone()[0 as usize];
    }
    return s.clone()
};
        let mochi_main = move || {
    init();
    insert(2, 2);
    insert(4, 4);
    insert(6, 4);
    insert(4, 5);
    insert(8, 4);
    insert(9, 4);
    delete(4);
    println!("{}", to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
