// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_MAX_LEVEL: i64 = 6;
static g_P: f64 = 0.5;
static mut g_seed: i64 = 1;
static mut g_level: i64 = 1;
fn main() {
    unsafe {
        g_seed = 1;
        g_level = 1;
                let _start: i64 = _now();
        let NIL: i64 = (-1);
        let mut random = || -> f64 {
    unsafe { g_seed = (((unsafe { g_seed.clone() } * 13) + 7) % 100) };
    return ((unsafe { g_seed.clone() } as f64) / 100.0)
};
        let mut random_level = || -> i64 {
    let mut lvl: i64 = 1;
    while ((random() < unsafe { g_P.clone() }) && (lvl < unsafe { g_MAX_LEVEL.clone() })) {
        lvl = (lvl + 1);
    }
    return lvl
};
        let mut empty_forward = || -> Vec<i64> {
    let mut f: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < unsafe { g_MAX_LEVEL.clone() }) {
        f = { let mut _v = f.clone(); _v.push(NIL); _v };
        i = (i + 1);
    }
    return f
};
        let mut node_keys: Vec<i64> = vec![];
        let mut node_vals: Vec<i64> = vec![];
        let mut node_forwards: Vec<Vec<i64>> = vec![];
        let mut init = || {
    node_keys = vec![-1];
    node_vals = vec![0];
    node_forwards = vec![empty_forward().clone()];
    unsafe { g_level = 1 };
};
        let mut insert = |mut key: i64, mut value: i64| {
    let mut update: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < unsafe { g_MAX_LEVEL.clone() }) {
        update = { let mut _v = update.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut x: i64 = 0;
    i = (unsafe { g_level.clone() } - 1);
    while (i >= 0) {
        while ((node_forwards[x as usize].clone()[i as usize] != NIL) && (node_keys[node_forwards[x as usize].clone()[i as usize] as usize] < key)) {
            x = node_forwards[x as usize].clone()[i as usize];
        }
        update[i as usize] = x;
        i = (i - 1);
    }
    x = node_forwards[x as usize].clone()[0 as usize];
    if ((x != NIL) && (node_keys[x as usize] == key)) {
        node_vals[x as usize] = value;
        return
    }
    let lvl: i64 = random_level();
    if (lvl > unsafe { g_level.clone() }) {
        let mut j: i64 = unsafe { g_level.clone() };
        while (j < lvl) {
            update[j as usize] = 0;
            j = (j + 1);
        }
        unsafe { g_level = lvl };
    }
    node_keys = { let mut _v = node_keys.clone(); _v.push(key); _v };
    node_vals = { let mut _v = node_vals.clone(); _v.push(value); _v };
    let mut forwards: Vec<i64> = empty_forward();
    let idx: i64 = ((node_keys.len() as i64) - 1);
    i = 0;
    while (i < lvl) {
        forwards[i as usize] = node_forwards[update[i as usize] as usize].clone()[i as usize];
        node_forwards[update[i as usize] as usize][i as usize] = idx;
        i = (i + 1);
    }
    node_forwards = { let mut _v = node_forwards.clone(); _v.push(forwards.clone()); _v };
};
        let mut find = |mut key: i64| -> i64 {
    let mut x: i64 = 0;
    let mut i: i64 = (unsafe { g_level.clone() } - 1);
    while (i >= 0) {
        while ((node_forwards[x as usize].clone()[i as usize] != NIL) && (node_keys[node_forwards[x as usize].clone()[i as usize] as usize] < key)) {
            x = node_forwards[x as usize].clone()[i as usize];
        }
        i = (i - 1);
    }
    x = node_forwards[x as usize].clone()[0 as usize];
    if ((x != NIL) && (node_keys[x as usize] == key)) {
        return node_vals[x as usize]
    }
    return -1
};
        let mut delete = |mut key: i64| {
    let mut update: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < unsafe { g_MAX_LEVEL.clone() }) {
        update = { let mut _v = update.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut x: i64 = 0;
    i = (unsafe { g_level.clone() } - 1);
    while (i >= 0) {
        while ((node_forwards[x as usize].clone()[i as usize] != NIL) && (node_keys[node_forwards[x as usize].clone()[i as usize] as usize] < key)) {
            x = node_forwards[x as usize].clone()[i as usize];
        }
        update[i as usize] = x;
        i = (i - 1);
    }
    x = node_forwards[x as usize].clone()[0 as usize];
    if ((x == NIL) || (node_keys[x as usize] != key)) {
        return
    }
    i = 0;
    while (i < unsafe { g_level.clone() }) {
        if (node_forwards[update[i as usize] as usize].clone()[i as usize] == x) {
            node_forwards[update[i as usize] as usize][i as usize] = node_forwards[x as usize].clone()[i as usize];
        }
        i = (i + 1);
    }
    while ((unsafe { g_level.clone() } > 1) && (node_forwards[0 as usize].clone()[(unsafe { g_level.clone() } - 1) as usize] == NIL)) {
        unsafe { g_level = (unsafe { g_level.clone() } - 1) };
    }
};
        let mut to_string = || -> String {
    let mut s: String = String::new();
    let mut x: i64 = node_forwards[0 as usize].clone()[0 as usize];
    while (x != NIL) {
        if (s.as_str() != "") {
            s = format!("{}{}", s, " -> ");
        }
        s = format!("{}{}", format!("{}{}", format!("{}{}", s, node_keys[x as usize].to_string()), ":"), node_vals[x as usize].to_string());
        x = node_forwards[x as usize].clone()[0 as usize];
    }
    return s.clone()
};
        let mut mochi_main = || {
    init();
    insert(2, 2);
    insert(4, 4);
    insert(6, 4);
    insert(4, 5);
    insert(8, 4);
    insert(9, 4);
    delete(4);
    println!("{}", to_string());
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
