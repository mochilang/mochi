// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LinkedList {
    data: Vec<i64>,
}
impl std::fmt::Display for LinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_list() -> LinkedList {
    return LinkedList {data: vec![]}
};
    fn push(list: &LinkedList, mut value: i64) -> LinkedList {
    let mut res: Vec<i64> = vec![value];
    res = vec![res, list.clone().data.clone()].concat();
    return LinkedList {data: res}
};
    fn swap_nodes(list: &LinkedList, mut v1: i64, mut v2: i64) -> LinkedList {
    if (v1 == v2) {
        return (*list).clone()
    }
    let mut idx1: i64 = (0 - 1);
    let mut idx2: i64 = (0 - 1);
    let mut i: i64 = 0;
    while (i < (list.clone().data.clone().len() as i64)) {
        if ((list.clone().data.clone()[i as usize] == v1) && (idx1 == (0 - 1))) {
            idx1 = i;
        }
        if ((list.clone().data.clone()[i as usize] == v2) && (idx2 == (0 - 1))) {
            idx2 = i;
        }
        i = (i + 1);
    }
    if ((idx1 == (0 - 1)) || (idx2 == (0 - 1))) {
        return (*list).clone()
    }
    let mut res: Vec<i64> = list.clone().data.clone();
    let mut temp: i64 = res[idx1 as usize];
    res[idx1 as usize] = res[idx2 as usize];
    res[idx2 as usize] = temp;
    return LinkedList {data: res}
};
    fn to_string(list: &LinkedList) -> String {
    return format!("{:?}", list.clone().data.clone()).to_string().clone()
};
    fn mochi_main() {
    let mut ll: LinkedList = empty_list();
    let mut i: i64 = 5;
    while (i > 0) {
        ll = push(&ll, i);
        i = (i - 1);
    }
    println!("{}", format!("{}{}", "Original Linked List: ", to_string(&ll)));
    ll = swap_nodes(&ll, 1, 4);
    println!("{}", format!("{}{}", "Modified Linked List: ", to_string(&ll)));
    println!("{}", "After swapping the nodes whose data is 1 and 4.");
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
