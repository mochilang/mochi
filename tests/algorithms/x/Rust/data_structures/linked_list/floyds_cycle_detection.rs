// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LinkedList {
    next: Vec<i64>,
    head: i64,
}
impl std::fmt::Display for LinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"next\": {:?}", self.next)?;
        write!(f, ", ")?;
        write!(f, "\"head\": {}", self.head)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    let mut NULL: i64 = (0 - 1);
    let empty_list = move || -> LinkedList {
    return LinkedList {next: vec![], head: NULL}
};
    let add_node = move |list: &LinkedList, value: i64| -> LinkedList {
    let mut nexts: Vec<i64> = list.next.clone();
    let mut new_index = (nexts.len() as i64);
    nexts = { let mut _v = nexts.clone(); _v.push(NULL); _v };
    if (list.head == NULL) {
        return LinkedList {next: nexts, head: new_index}
    }
    let mut last: i64 = list.head;
    while (nexts[last as usize] != NULL) {
        last = nexts[last as usize];
    }
    let mut new_nexts: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (nexts.len() as i64)) {
        if (i == last) {
            new_nexts = { let mut _v = new_nexts.clone(); _v.push(new_index); _v };
        } else {
            new_nexts = { let mut _v = new_nexts.clone(); _v.push(nexts[i as usize]); _v };
        }
        i = (i + 1);
    }
    return LinkedList {next: new_nexts, head: list.head}
};
    let set_next = move |list: &LinkedList, index: i64, next_index: i64| -> LinkedList {
    let mut nexts: Vec<i64> = list.next.clone();
    let mut new_nexts: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (nexts.len() as i64)) {
        if (i == index) {
            new_nexts = { let mut _v = new_nexts.clone(); _v.push(next_index); _v };
        } else {
            new_nexts = { let mut _v = new_nexts.clone(); _v.push(nexts[i as usize]); _v };
        }
        i = (i + 1);
    }
    return LinkedList {next: new_nexts, head: list.head}
};
    let detect_cycle = move |list: &LinkedList| -> bool {
    if (list.head == NULL) {
        return false
    }
    let mut nexts: Vec<i64> = list.next.clone();
    let mut slow: i64 = list.head;
    let mut fast: i64 = list.head;
    while ((fast != NULL) && (nexts[fast as usize] != NULL)) {
        slow = nexts[slow as usize];
        fast = nexts[nexts[fast as usize] as usize];
        if (slow == fast) {
            return true
        }
    }
    return false
};
    let mochi_main = move || {
    let mut ll: LinkedList = empty_list();
    ll = add_node(&ll, 1);
    ll = add_node(&ll, 2);
    ll = add_node(&ll, 3);
    ll = add_node(&ll, 4);
    ll = set_next(&ll, 3, 1);
    println!("{}", if detect_cycle(&ll) { 1 } else { 0 });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
