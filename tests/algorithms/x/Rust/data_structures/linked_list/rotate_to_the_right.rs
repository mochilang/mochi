// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn list_to_string(mut xs: Vec<i64>) -> String {
    if ((xs.len() as i64) == 0) {
        return String::from("")
    }
    let mut s = xs[0 as usize].to_string();
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, "->"), xs[i as usize].to_string());
        i = (i + 1);
    }
    return s.to_string().clone()
};
    fn insert_node(mut xs: Vec<i64>, mut data: i64) -> Vec<i64> {
    return { let mut _v = xs.clone(); _v.push(data); _v }
};
    fn rotate_to_the_right(mut xs: Vec<i64>, mut places: i64) -> Vec<i64> {
    if ((xs.len() as i64) == 0) {
        panic!("The linked list is empty.");
    }
    let mut n = (xs.len() as i64);
    let mut k: i64 = (places % n);
    if (k == 0) {
        return xs
    }
    let mut split: i64 = (n - k);
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = split;
    while (i < n) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < split) {
        res = { let mut _v = res.clone(); _v.push(xs[j as usize]); _v };
        j = (j + 1);
    }
    return res
};
    fn mochi_main() {
    let mut head: Vec<i64> = vec![];
    head = insert_node(head.clone(), 5);
    head = insert_node(head.clone(), 1);
    head = insert_node(head.clone(), 2);
    head = insert_node(head.clone(), 4);
    head = insert_node(head.clone(), 3);
    println!("{}", format!("{}{}", "Original list: ", list_to_string(head.clone())));
    let mut places: i64 = 3;
    let mut new_head: Vec<i64> = rotate_to_the_right(head.clone(), places);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "After ", places.to_string()), " iterations: "), list_to_string(new_head.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
