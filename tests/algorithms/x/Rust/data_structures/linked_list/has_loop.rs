// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    data: i64,
    next: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn has_loop(mut nodes: Vec<Node>, mut head: i64) -> bool {
    let mut slow: i64 = head;
    let mut fast: i64 = head;
    while (fast != (0 - 1)) {
        let mut fast_node1: Node = nodes[fast as usize].clone();
        if (fast_node1.next == (0 - 1)) {
            return false
        }
        let mut fast_node2: Node = nodes[fast_node1.next as usize].clone();
        if (fast_node2.next == (0 - 1)) {
            return false
        }
        let mut slow_node: Node = nodes[slow as usize].clone();
        slow = slow_node.next;
        fast = fast_node2.next;
        if (slow == fast) {
            return true
        }
    }
    return false
};
    fn make_nodes(mut values: Vec<i64>) -> Vec<Node> {
    let mut nodes: Vec<Node> = vec![];
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        let mut next_idx: i64 = if (i == ((values.len() as i64) - 1)) { (0 - 1) } else { (i + 1) };
        nodes = { let mut _v = nodes.clone(); _v.push(Node {data: values[i as usize], next: next_idx}); _v };
        i = (i + 1);
    }
    return nodes
};
    fn mochi_main() {
    let mut list1: Vec<Node> = make_nodes(vec![1, 2, 3, 4]);
    println!("{}", has_loop(list1.clone(), 0).to_string());
    list1[3 as usize].next = 1;
    println!("{}", has_loop(list1.clone(), 0).to_string());
    let mut list2: Vec<Node> = make_nodes(vec![5, 6, 5, 6]);
    println!("{}", has_loop(list2.clone(), 0).to_string());
    let mut list3: Vec<Node> = make_nodes(vec![1]);
    println!("{}", has_loop(list3.clone(), 0).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
