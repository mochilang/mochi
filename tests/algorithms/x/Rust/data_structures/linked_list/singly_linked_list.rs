// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SinglyLinkedList {
    data: Vec<i64>,
}
impl std::fmt::Display for SinglyLinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct DeleteResult {
    list: SinglyLinkedList,
    value: i64,
}
impl std::fmt::Display for DeleteResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"list\": {}", self.list)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_list() -> SinglyLinkedList {
    return SinglyLinkedList {data: vec![]}
};
    fn length(list: &SinglyLinkedList) -> i64 {
    return (list.data.clone().len() as i64)
};
    fn is_empty(list: &SinglyLinkedList) -> bool {
    return ((list.data.clone().len() as i64) == 0)
};
    fn to_string(list: &SinglyLinkedList) -> String {
    if ((list.data.clone().len() as i64) == 0) {
        return String::from("")
    }
    let mut s = list.data.clone()[0 as usize].to_string();
    let mut i: i64 = 1;
    while (i < (list.data.clone().len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, " -> "), list.data.clone()[i as usize].to_string());
        i = (i + 1);
    }
    return s.to_string().clone()
};
    fn insert_nth(list: &SinglyLinkedList, mut index: i64, mut value: i64) -> SinglyLinkedList {
    if ((index < 0) || (index > (list.data.clone().len() as i64))) {
        panic!("index out of range");
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < index) {
        res = { let mut _v = res.clone(); _v.push(list.data.clone()[i as usize]); _v };
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(value); _v };
    while (i < (list.data.clone().len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(list.data.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return SinglyLinkedList {data: res}
};
    fn insert_head(mut list: SinglyLinkedList, mut value: i64) -> SinglyLinkedList {
    return insert_nth(&list, 0, value)
};
    fn insert_tail(mut list: SinglyLinkedList, mut value: i64) -> SinglyLinkedList {
    return insert_nth(&list, (list.data.clone().len() as i64), value)
};
    fn delete_nth(list: &SinglyLinkedList, mut index: i64) -> DeleteResult {
    if ((index < 0) || (index >= (list.data.clone().len() as i64))) {
        panic!("index out of range");
    }
    let mut res: Vec<i64> = vec![];
    let mut val: i64 = 0;
    let mut i: i64 = 0;
    while (i < (list.data.clone().len() as i64)) {
        if (i == index) {
            val = list.data.clone()[i as usize];
        } else {
            res = { let mut _v = res.clone(); _v.push(list.data.clone()[i as usize]); _v };
        }
        i = (i + 1);
    }
    return DeleteResult {list: SinglyLinkedList {data: res}, value: val}
};
    fn delete_head(list: &mut SinglyLinkedList) -> DeleteResult {
    return delete_nth(list, 0)
};
    fn delete_tail(list: &mut SinglyLinkedList) -> DeleteResult {
    return delete_nth(list, ((list.data.clone().len() as i64) - 1))
};
    fn get_item(list: &SinglyLinkedList, mut index: i64) -> i64 {
    if ((index < 0) || (index >= (list.data.clone().len() as i64))) {
        panic!("index out of range");
    }
    return list.data.clone()[index as usize]
};
    fn set_item(list: &SinglyLinkedList, mut index: i64, mut value: i64) -> SinglyLinkedList {
    if ((index < 0) || (index >= (list.data.clone().len() as i64))) {
        panic!("index out of range");
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (list.data.clone().len() as i64)) {
        if (i == index) {
            res = { let mut _v = res.clone(); _v.push(value); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(list.data.clone()[i as usize]); _v };
        }
        i = (i + 1);
    }
    return SinglyLinkedList {data: res}
};
    fn reverse_list(list: &SinglyLinkedList) -> SinglyLinkedList {
    let mut res: Vec<i64> = vec![];
    let mut i = ((list.data.clone().len() as i64) - 1);
    while (i >= 0) {
        res = { let mut _v = res.clone(); _v.push(list.data.clone()[i as usize]); _v };
        i = (i - 1);
    }
    return SinglyLinkedList {data: res}
};
    fn mochi_main() {
    let mut lst: SinglyLinkedList = empty_list();
    let mut i: i64 = 1;
    while (i <= 5) {
        lst = insert_tail(lst, i);
        i = (i + 1);
    }
    println!("{}", to_string(&lst));
    lst = insert_head(lst, 0);
    println!("{}", to_string(&lst));
    let mut del: DeleteResult = delete_head(&mut lst);
    lst = del.list.clone();
    println!("{}", del.value.to_string());
    del = delete_tail(&mut lst);
    lst = del.list.clone();
    println!("{}", del.value.to_string());
    del = delete_nth(&lst, 2);
    lst = del.list.clone();
    println!("{}", del.value.to_string());
    lst = set_item(&lst, 1, 99);
    println!("{}", get_item(&lst, 1).to_string());
    lst = reverse_list(&lst);
    println!("{}", to_string(&lst));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
