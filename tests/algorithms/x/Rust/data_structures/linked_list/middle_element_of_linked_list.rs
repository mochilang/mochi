// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct List {
    data: Vec<i64>,
}
impl std::fmt::Display for List {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn empty_list() -> List {
    return List {data: vec![]}
};
    fn push(lst: &List, mut value: i64) -> List {
    let mut res: Vec<i64> = vec![value];
    let mut i: i64 = 0;
    while (i < (lst.data.clone().len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(lst.data.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return List {data: res}
};
    fn middle_element(lst: &List) -> i64 {
    let mut n = (lst.data.clone().len() as i64);
    if (n == 0) {
        println!("{}", "No element found.");
        return 0
    }
    let mut slow: i64 = 0;
    let mut fast: i64 = 0;
    while ((fast + 1) < n) {
        fast = (fast + 2);
        slow = (slow + 1);
    }
    return lst.data.clone()[slow as usize]
};
    fn mochi_main() {
    let mut lst: List = empty_list();
    middle_element(&lst);
    lst = push(&lst, 5);
    println!("{}", 5);
    lst = push(&lst, 6);
    println!("{}", 6);
    lst = push(&lst, 8);
    println!("{}", 8);
    lst = push(&lst, 8);
    println!("{}", 8);
    lst = push(&lst, 10);
    println!("{}", 10);
    lst = push(&lst, 12);
    println!("{}", 12);
    lst = push(&lst, 17);
    println!("{}", 17);
    lst = push(&lst, 7);
    println!("{}", 7);
    lst = push(&lst, 3);
    println!("{}", 3);
    lst = push(&lst, 20);
    println!("{}", 20);
    lst = push(&lst, -20);
    println!("{}", -20);
    println!("{}", middle_element(&lst));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
