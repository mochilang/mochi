// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    data: String,
    prev: i64,
    next: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"data\": \"{}\"", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"prev\": {}", self.prev)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {}", self.next)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct LinkedDeque {
    nodes: Vec<Node>,
    header: i64,
    trailer: i64,
    size: i64,
}
impl std::fmt::Display for LinkedDeque {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, ", ")?;
        write!(f, "\"header\": {}", self.header)?;
        write!(f, ", ")?;
        write!(f, "\"trailer\": {}", self.trailer)?;
        write!(f, ", ")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct DeleteResult {
    deque: LinkedDeque,
    value: String,
}
impl std::fmt::Display for DeleteResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"deque\": {}", self.deque)?;
        write!(f, ", ")?;
        write!(f, "\"value\": \"{}\"", self.value)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_deque() -> LinkedDeque {
    let mut nodes: Vec<Node> = vec![];
    nodes = { let mut _v = nodes.clone(); _v.push(Node {data: String::new(), prev: -1, next: 1}); _v };
    nodes = { let mut _v = nodes.clone(); _v.push(Node {data: String::new(), prev: 0, next: -1}); _v };
    return LinkedDeque {nodes: nodes.clone(), header: 0, trailer: 1, size: 0}
};
    fn is_empty(mut d: LinkedDeque) -> bool {
    return (d.size == 0)
};
    fn front(mut d: LinkedDeque) -> String {
    if is_empty(d.clone()) {
        panic!("List is empty");
    }
    let head: Node = d.nodes.clone()[d.header as usize].clone();
    let idx: i64 = head.next;
    let node: Node = d.nodes.clone()[idx as usize].clone();
    return node.data.clone().clone()
};
    fn back(mut d: LinkedDeque) -> String {
    if is_empty(d.clone()) {
        panic!("List is empty");
    }
    let tail: Node = d.nodes.clone()[d.trailer as usize].clone();
    let idx: i64 = tail.prev;
    let node: Node = d.nodes.clone()[idx as usize].clone();
    return node.data.clone().clone()
};
    fn insert(mut d: LinkedDeque, mut pred: i64, mut value: String, mut succ: i64) -> LinkedDeque {
    let mut nodes: Vec<Node> = d.nodes.clone();
    let new_idx: i64 = (nodes.len() as i64);
    nodes = { let mut _v = nodes.clone(); _v.push(Node {data: value.clone(), prev: pred, next: succ}); _v };
    let mut pred_node: Node = nodes[pred as usize].clone();
    pred_node.next = new_idx;
    nodes[pred as usize] = pred_node.clone();
    let mut succ_node: Node = nodes[succ as usize].clone();
    succ_node.prev = new_idx;
    nodes[succ as usize] = succ_node.clone();
    d.nodes = nodes.clone();
    d.size = (d.size + 1);
    return d
};
    fn delete(d: &mut LinkedDeque, mut idx: i64) -> DeleteResult {
    let mut nodes: Vec<Node> = d.nodes.clone();
    let node: Node = nodes[idx as usize].clone();
    let pred: i64 = node.prev;
    let succ: i64 = node.next;
    let mut pred_node: Node = nodes[pred as usize].clone();
    pred_node.next = succ;
    nodes[pred as usize] = pred_node.clone();
    let mut succ_node: Node = nodes[succ as usize].clone();
    succ_node.prev = pred;
    nodes[succ as usize] = succ_node.clone();
    let val: String = node.data.clone().clone();
    (*d).nodes = nodes.clone();
    (*d).size = (d.size - 1);
    return DeleteResult {deque: d.clone(), value: val.clone()}
};
    fn add_first(mut d: LinkedDeque, mut value: String) -> LinkedDeque {
    let head: Node = d.nodes.clone()[d.header as usize].clone();
    let succ: i64 = head.next;
    return insert(d.clone(), d.header, value.clone(), succ)
};
    fn add_last(mut d: LinkedDeque, mut value: String) -> LinkedDeque {
    let tail: Node = d.nodes.clone()[d.trailer as usize].clone();
    let pred: i64 = tail.prev;
    return insert(d.clone(), pred, value.clone(), d.trailer)
};
    fn remove_first(mut d: LinkedDeque) -> DeleteResult {
    if is_empty(d.clone()) {
        panic!("remove_first from empty list");
    }
    let head: Node = d.nodes.clone()[d.header as usize].clone();
    let idx: i64 = head.next;
    return delete(&mut d, idx)
};
    fn remove_last(mut d: LinkedDeque) -> DeleteResult {
    if is_empty(d.clone()) {
        panic!("remove_first from empty list");
    }
    let tail: Node = d.nodes.clone()[d.trailer as usize].clone();
    let idx: i64 = tail.prev;
    return delete(&mut d, idx)
};
    let mut mochi_main = || {
    let mut d: LinkedDeque = new_deque();
    d = add_first(d.clone(), String::from("A"));
    println!("{}", front(d.clone()));
    d = add_last(d.clone(), String::from("B"));
    println!("{}", back(d.clone()));
    let mut r: DeleteResult = remove_first(d.clone());
    d = r.deque.clone();
    println!("{}", r.value.clone());
    r = remove_last(d.clone());
    d = r.deque.clone();
    println!("{}", r.value.clone());
    println!("{}", is_empty(d.clone()).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
