// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SortedLinkedList {
    values: Vec<i64>,
}
impl std::fmt::Display for SortedLinkedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"values\": {:?}", self.values)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn sort_list(mut nums: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push(nums[i as usize]); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < (arr.len() as i64)) {
        let mut k: i64 = (j + 1);
        while (k < (arr.len() as i64)) {
            if (arr[k as usize] < arr[j as usize]) {
                let mut tmp: i64 = arr[j as usize];
                arr[j as usize] = arr[k as usize];
                arr[k as usize] = tmp;
            }
            k = (k + 1);
        }
        j = (j + 1);
    }
    return arr
};
    fn make_sorted_linked_list(mut ints: Vec<i64>) -> SortedLinkedList {
    return SortedLinkedList {values: sort_list(ints.clone())}
};
    fn len_sll(sll: &SortedLinkedList) -> i64 {
    return (sll.values.clone().len() as i64)
};
    fn str_sll(sll: &SortedLinkedList) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (sll.values.clone().len() as i64)) {
        res = format!("{}{}", res, sll.values.clone()[i as usize].to_string());
        if ((i + 1) < (sll.values.clone().len() as i64)) {
            res = format!("{}{}", res, " -> ");
        }
        i = (i + 1);
    }
    return res.clone()
};
    fn merge_lists(a: &SortedLinkedList, b: &SortedLinkedList) -> SortedLinkedList {
    let mut combined: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.values.clone().len() as i64)) {
        combined = { let mut _v = combined.clone(); _v.push(a.values.clone()[i as usize]); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (b.values.clone().len() as i64)) {
        combined = { let mut _v = combined.clone(); _v.push(b.values.clone()[i as usize]); _v };
        i = (i + 1);
    }
    return make_sorted_linked_list(combined.clone())
};
    fn mochi_main() {
    let mut test_data_odd: Vec<i64> = vec![3, 9, -11, 0, 7, 5, 1, -1];
    let mut test_data_even: Vec<i64> = vec![4, 6, 2, 0, 8, 10, 3, -2];
    let mut sll_one: SortedLinkedList = make_sorted_linked_list(test_data_odd.clone());
    let mut sll_two: SortedLinkedList = make_sorted_linked_list(test_data_even.clone());
    let mut merged: SortedLinkedList = merge_lists(&sll_one, &sll_two);
    println!("{}", len_sll(&merged).to_string());
    println!("{}", str_sll(&merged));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
