// Generated by Mochi transpiler v0.10.60
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    children: HashMap<String, i64>,
    is_end_of_string: bool,
    start: i64,
    end: i64,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"children\": {:?}", self.children)?;
        write!(f, ", ")?;
        write!(f, "\"is_end_of_string\": {}", self.is_end_of_string)?;
        write!(f, ", ")?;
        write!(f, "\"start\": {}", self.start)?;
        write!(f, ", ")?;
        write!(f, "\"end\": {}", self.end)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct SuffixTree {
    text: String,
    nodes: Vec<Node>,
}
impl std::fmt::Display for SuffixTree {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"text\": \"{}\"", self.text)?;
        write!(f, ", ")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_node() -> Node {
    return Node {children: HashMap::new(), is_end_of_string: false, start: -1, end: -1}
};
    fn has_key(m: &HashMap<String, i64>, k: &str) -> bool {
    for key in m.keys().cloned() {
        if (key == k) {
            return true
        }
    }
    return false
};
    fn add_suffix(mut tree: SuffixTree, suffix: &str, mut index: i64) -> SuffixTree {
    let mut nodes: Vec<Node> = tree.nodes.clone();
    let mut node_idx: i64 = 0;
    let mut j: i64 = 0;
    while (j < (suffix.len() as i64)) {
        let mut ch: String = { let tmp = &suffix; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.clone();
        let mut node: Node = nodes[node_idx as usize].clone();
        let mut children: HashMap<String, i64> = node.children.clone();
        if !has_key(&children, &ch) {
            nodes = { let mut _v = nodes.clone(); _v.push(new_node()); _v };
            let mut new_idx = ((nodes.len() as i64) - 1);
            children.insert(ch.clone(), new_idx);
        }
        node.children = children.clone();
        nodes[node_idx as usize] = node.clone();
        node_idx = children.get(ch.as_str()).cloned().unwrap_or_default();
        j = (j + 1);
    }
    let mut node: Node = nodes[node_idx as usize].clone();
    node.is_end_of_string = true;
    node.start = index;
    node.end = ((index + (suffix.len() as i64)) - 1);
    nodes[node_idx as usize] = node.clone();
    tree.nodes = nodes.clone();
    return tree
};
    fn build_suffix_tree(tree: &SuffixTree) -> SuffixTree {
    let mut text: String = tree.text.clone().clone();
    let mut n = (text.len() as i64);
    let mut i: i64 = 0;
    let mut t: SuffixTree = tree.clone();
    while (i < n) {
        let mut suffix: String = String::from("").clone();
        let mut k: i64 = i;
        while (k < n) {
            suffix = format!("{}{}", suffix, { let tmp = &text; tmp.chars().skip(k as usize).take(((k + 1) - k) as usize).collect::<String>() });
            k = (k + 1);
        }
        t = add_suffix(t, &suffix, i);
        i = (i + 1);
    }
    return t
};
    fn new_suffix_tree(text: &str) -> SuffixTree {
    let mut tree: SuffixTree = SuffixTree {text: text.to_string(), nodes: vec![]};
    tree.nodes = { let mut _v = tree.nodes.clone().clone(); _v.push(new_node()); _v };
    tree = build_suffix_tree(&tree);
    return tree
};
    fn search(tree: &SuffixTree, pattern: &str) -> bool {
    let mut node_idx: i64 = 0;
    let mut i: i64 = 0;
    let mut nodes: Vec<Node> = tree.nodes.clone();
    while (i < (pattern.len() as i64)) {
        let mut ch: String = { let tmp = &pattern; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut node: Node = nodes[node_idx as usize].clone();
        let mut children: HashMap<String, i64> = node.children.clone();
        if !has_key(&children, &ch) {
            return false
        }
        node_idx = children.get(ch.as_str()).cloned().unwrap_or_default();
        i = (i + 1);
    }
    return true
};
    let mut st: SuffixTree = new_suffix_tree(&"bananas");
    println!("{}", search(&st, &"ana").to_string());
    println!("{}", search(&st, &"apple").to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
