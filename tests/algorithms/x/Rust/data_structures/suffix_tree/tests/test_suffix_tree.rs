// Generated by Mochi transpiler v0.10.61
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SuffixTree {
    text: String,
}
impl std::fmt::Display for SuffixTree {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"text\": \"{}\"", self.text)?;
        write!(f, "}}")
    }
}

static mut g_text: String = String::new();
static mut g_patterns_exist: Vec<String> = Vec::new();
static mut g_i: i64 = 0;
static mut g_patterns_none: Vec<String> = Vec::new();
static mut g_substrings: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_text = String::from("banana").clone();
        g_patterns_exist = vec![String::from("ana").clone(), String::from("ban").clone(), String::from("na").clone()];
        g_i = 0;
        g_patterns_none = vec![String::from("xyz").clone(), String::from("apple").clone(), String::from("cat").clone()];
        g_substrings = vec![String::from("ban").clone(), String::from("ana").clone(), String::from("a").clone(), String::from("na").clone()];
                let _start: i64 = _now();
        unsafe fn suffix_tree_new(text: &str) -> SuffixTree {
    return SuffixTree {text: text.to_string()}
};
        unsafe fn suffix_tree_search(st: &SuffixTree, pattern: &str) -> bool {
    if ((pattern.len() as i64) == 0) {
        return true
    }
    let mut i: i64 = 0;
    let mut n = (st.text.clone().len() as i64);
    let mut m = (pattern.len() as i64);
    while (i <= (n - m)) {
        let mut j: i64 = 0;
        let mut found: bool = true;
        while (j < m) {
            if (st.text.clone().chars().nth((i + j) as usize).unwrap().to_string().as_str() != pattern.chars().nth(j as usize).unwrap().to_string().as_str()) {
                found = false;
                break
            }
            j = (j + 1);
        }
        if found {
            return true
        }
        i = (i + 1);
    }
    return false
};
        let mut st: SuffixTree = suffix_tree_new(&g_text);
        while (g_i < (g_patterns_exist.clone().len() as i64)) {
            println!("{}", suffix_tree_search(&st, &g_patterns_exist[g_i as usize].clone()).to_string());
            g_i = (g_i + 1);
        }
        g_i = 0;
        while (g_i < (g_patterns_none.clone().len() as i64)) {
            println!("{}", suffix_tree_search(&st, &g_patterns_none[g_i as usize].clone()).to_string());
            g_i = (g_i + 1);
        }
        println!("{}", suffix_tree_search(&st, &"").to_string());
        println!("{}", suffix_tree_search(&st, &g_text).to_string());
        g_i = 0;
        while (g_i < (g_substrings.clone().len() as i64)) {
            println!("{}", suffix_tree_search(&st, &g_substrings[g_i as usize].clone()).to_string());
            g_i = (g_i + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
