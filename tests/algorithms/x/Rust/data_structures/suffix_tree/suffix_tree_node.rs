// Generated by Mochi transpiler v0.10.60
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SuffixTreeNode {
    children: HashMap<String, i64>,
    is_end_of_string: bool,
    start: i64,
    end: i64,
    suffix_link: i64,
}
impl std::fmt::Display for SuffixTreeNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"children\": {:?}", self.children)?;
        write!(f, ", ")?;
        write!(f, "\"is_end_of_string\": {}", self.is_end_of_string)?;
        write!(f, ", ")?;
        write!(f, "\"start\": {}", self.start)?;
        write!(f, ", ")?;
        write!(f, "\"end\": {}", self.end)?;
        write!(f, ", ")?;
        write!(f, "\"suffix_link\": {}", self.suffix_link)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_suffix_tree_node(children: &HashMap<String, i64>, mut is_end_of_string: bool, mut start: i64, mut end: i64, mut suffix_link: i64) -> SuffixTreeNode {
    return SuffixTreeNode {children: children.clone(), is_end_of_string: is_end_of_string, start: start, end: end, suffix_link: suffix_link}
};
    fn empty_suffix_tree_node() -> SuffixTreeNode {
    return new_suffix_tree_node(&HashMap::new(), false, (0 - 1), (0 - 1), (0 - 1))
};
    fn has_key(m: &HashMap<String, i64>, k: &str) -> bool {
    for key in m.keys().cloned() {
        if (key == k) {
            return true
        }
    }
    return false
};
    let mut root: SuffixTreeNode = new_suffix_tree_node(&HashMap::from([(String::from("a"), 1)]), false, (0 - 1), (0 - 1), (0 - 1));
    let mut leaf: SuffixTreeNode = new_suffix_tree_node(&HashMap::new(), true, 0, 2, 0);
    let mut nodes: Vec<SuffixTreeNode> = vec![root, leaf];
    let mut root_check: SuffixTreeNode = nodes[0 as usize].clone();
    let mut leaf_check: SuffixTreeNode = nodes[1 as usize].clone();
    println!("{}", has_key(&root_check.children.clone(), &"a").to_string());
    println!("{}", leaf_check.is_end_of_string.to_string());
    println!("{}", leaf_check.start.to_string());
    println!("{}", leaf_check.end.to_string());
    println!("{}", leaf_check.suffix_link.to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
