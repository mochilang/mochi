// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sortFloats(mut xs: Vec<f64>) -> Vec<f64> {
    let mut arr: Vec<f64> = xs;
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut j: i64 = 0;
        while (j < ((arr.len() as i64) - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let mut t: f64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = t;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn find_median_sorted_arrays(mut nums1: Vec<f64>, mut nums2: Vec<f64>) -> f64 {
    if (((nums1.len() as i64) == 0) && ((nums2.len() as i64) == 0)) {
        panic!("Both input arrays are empty.");
    }
    let mut merged: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (nums1.len() as i64)) {
        merged = { let mut _v = merged.clone(); _v.push(nums1[i as usize]); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < (nums2.len() as i64)) {
        merged = { let mut _v = merged.clone(); _v.push(nums2[j as usize]); _v };
        j = (j + 1);
    }
    let mut sorted: Vec<f64> = sortFloats(merged.clone());
    let mut total = (sorted.len() as i64);
    if ((total % 2) == 1) {
        return sorted[(total / 2) as usize]
    }
    let mut middle1: f64 = sorted[((total / 2) - 1) as usize];
    let mut middle2: f64 = sorted[(total / 2) as usize];
    return ((middle1 + middle2) / 2.0)
};
    println!("{}", format!("{:?}", find_median_sorted_arrays(vec![1.0, 3.0], vec![2.0])));
    println!("{}", format!("{:?}", find_median_sorted_arrays(vec![1.0, 2.0], vec![3.0, 4.0])));
    println!("{}", format!("{:?}", find_median_sorted_arrays(vec![0.0, 0.0], vec![0.0, 0.0])));
    println!("{}", format!("{:?}", find_median_sorted_arrays(vec![], vec![1.0])));
    println!("{}", format!("{:?}", find_median_sorted_arrays(vec![-1000.0], vec![1000.0])));
    println!("{}", format!("{:?}", find_median_sorted_arrays(vec![-1.1, -2.2], vec![-3.3, -4.4])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
