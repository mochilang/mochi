// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_example: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_example = vec![5.to_string(), 2.to_string(), format!("[{}]", vec![(-7).to_string(), 1.to_string()].join(", ")), 3.to_string(), format!("[{}]", vec![6.to_string(), format!("[{}]", vec![(-13).to_string(), 8.to_string()].join(", ")), 4.to_string()].join(", "))];
                let _start: i64 = _now();
        unsafe fn product_sum(mut arr: Vec<String>, mut depth: i64) -> i64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut el: String = arr[i as usize].clone().clone();
        if !(el.is_empty()) {
            total = (total + product_sum(el.clone(), (depth + 1)));
        } else {
            total = (total + { let n: i64 = el.parse().unwrap(); n });
        }
        i = (i + 1);
    }
    return (total * depth)
};
        unsafe fn product_sum_array(mut array: Vec<String>) -> i64 {
    let mut res: i64 = product_sum(array.clone(), 1);
    return res
};
        println!("{}", product_sum_array(g_example.clone().clone()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
