// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sort_triplet(mut a: i64, mut b: i64, mut c: i64) -> Vec<i64> {
    let mut x: i64 = a;
    let mut y: i64 = b;
    let mut z: i64 = c;
    if (x > y) {
        let mut t: i64 = x;
        x = y;
        y = t;
    }
    if (y > z) {
        let mut t: i64 = y;
        y = z;
        z = t;
    }
    if (x > y) {
        let mut t: i64 = x;
        x = y;
        y = t;
    }
    return vec![x, y, z]
};
    fn contains_triplet(mut arr: Vec<Vec<i64>>, mut target: Vec<i64>) -> bool {
    for i in 0..(arr.len() as i64) {
        let mut item: Vec<i64> = arr[i as usize].clone();
        let mut same: bool = true;
        for j in 0..(target.len() as i64) {
            if (item[j as usize] != target[j as usize]) {
                same = false;
                break
            }
        }
        if same {
            return true
        }
    }
    return false
};
    fn contains_int(mut arr: Vec<i64>, mut value: i64) -> bool {
    for i in 0..(arr.len() as i64) {
        if (arr[i as usize] == value) {
            return true
        }
    }
    return false
};
    fn find_triplets_with_0_sum(mut nums: Vec<i64>) -> Vec<Vec<i64>> {
    let mut n = (nums.len() as i64);
    let mut result: Vec<Vec<i64>> = vec![];
    for i in 0..n {
        for j in (i + 1)..n {
            for k in (j + 1)..n {
                let mut a: i64 = nums[i as usize];
                let mut b: i64 = nums[j as usize];
                let mut c: i64 = nums[k as usize];
                if (((a + b) + c) == 0) {
                    let mut trip: Vec<i64> = sort_triplet(a, b, c);
                    if !contains_triplet(result.clone(), trip.clone()) {
                        result = { let mut _v = result.clone(); _v.push(trip.clone()); _v };
                    }
                }
            }
        }
    }
    return result
};
    fn find_triplets_with_0_sum_hashing(mut arr: Vec<i64>) -> Vec<Vec<i64>> {
    let mut target_sum: i64 = 0;
    let mut output: Vec<Vec<i64>> = vec![];
    for i in 0..(arr.len() as i64) {
        let mut seen: Vec<i64> = vec![];
        let mut current_sum: i64 = (target_sum - arr[i as usize]);
        for j in (i + 1)..(arr.len() as i64) {
            let mut other: i64 = arr[j as usize];
            let mut required: i64 = (current_sum - other);
            if contains_int(seen.clone(), required) {
                let mut trip: Vec<i64> = sort_triplet(arr[i as usize], other, required);
                if !contains_triplet(output.clone(), trip.clone()) {
                    output = { let mut _v = output.clone(); _v.push(trip.clone()); _v };
                }
            }
            seen = { let mut _v = seen.clone(); _v.push(other); _v };
        }
    }
    return output
};
    println!("{}", format!("{:?}", find_triplets_with_0_sum(vec![-1, 0, 1, 2, -1, -4])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum(vec![])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum(vec![0, 0, 0])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum(vec![1, 2, 3, 0, -1, -2, -3])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum_hashing(vec![-1, 0, 1, 2, -1, -4])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum_hashing(vec![])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum_hashing(vec![0, 0, 0])));
    println!("{}", format!("{:?}", find_triplets_with_0_sum_hashing(vec![1, 2, 3, 0, -1, -2, -3])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
