// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct PrefixSum {
    prefix_sum: Vec<i64>,
}
impl std::fmt::Display for PrefixSum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"prefix_sum\": {:?}", self.prefix_sum)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_prefix_sum(mut arr: Vec<i64>) -> PrefixSum {
    let mut prefix: Vec<i64> = vec![];
    let mut running: i64 = 0;
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        running = (running + arr[i as usize]);
        prefix = { let mut _v = prefix.clone(); _v.push(running); _v };
        i = (i + 1);
    }
    return PrefixSum {prefix_sum: prefix}
};
    fn get_sum(ps: &PrefixSum, mut start: i64, mut end: i64) -> i64 {
    let mut prefix: Vec<i64> = ps.prefix_sum.clone();
    if ((prefix.len() as i64) == 0) {
        panic!("The array is empty.");
    }
    if (((start < 0) || (end >= (prefix.len() as i64))) || (start > end)) {
        panic!("Invalid range specified.");
    }
    if (start == 0) {
        return prefix[end as usize]
    }
    return (prefix[end as usize] - prefix[(start - 1) as usize])
};
    fn contains_sum(ps: &PrefixSum, mut target_sum: i64) -> bool {
    let mut prefix: Vec<i64> = ps.prefix_sum.clone();
    let mut sums: Vec<i64> = vec![0];
    let mut i: i64 = 0;
    while (i < (prefix.len() as i64)) {
        let mut sum_item: i64 = prefix[i as usize];
        let mut j: i64 = 0;
        while (j < (sums.len() as i64)) {
            if (sums[j as usize] == (sum_item - target_sum)) {
                return true
            }
            j = (j + 1);
        }
        sums = { let mut _v = sums.clone(); _v.push(sum_item); _v };
        i = (i + 1);
    }
    return false
};
    let mut ps: PrefixSum = make_prefix_sum(vec![1, 2, 3]);
    println!("{}", get_sum(&ps, 0, 2).to_string());
    println!("{}", get_sum(&ps, 1, 2).to_string());
    println!("{}", get_sum(&ps, 2, 2).to_string());
    println!("{}", contains_sum(&ps, 6).to_string());
    println!("{}", contains_sum(&ps, 5).to_string());
    println!("{}", contains_sum(&ps, 3).to_string());
    println!("{}", contains_sum(&ps, 4).to_string());
    println!("{}", contains_sum(&ps, 7).to_string());
    let mut ps2: PrefixSum = make_prefix_sum(vec![1, -2, 3]);
    println!("{}", contains_sum(&ps2, 2).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
