// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_arr1: Vec<i64> = Vec::new();
static mut g_arr2: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_arr1 = vec![3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];
        g_arr2 = vec![2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5];
                let _start: i64 = _now();
        unsafe fn partition(arr: &mut Vec<i64>, mut low: i64, mut high: i64) -> i64 {
    let mut pivot: i64 = arr[high as usize];
    let mut i: i64 = (low - 1);
    let mut j: i64 = low;
    while (j < high) {
        if (arr[j as usize] >= pivot) {
            i = (i + 1);
            let mut tmp: i64 = arr[i as usize];
            (*arr)[i as usize] = arr[j as usize];
            (*arr)[j as usize] = tmp;
        }
        j = (j + 1);
    }
    let mut k: i64 = (i + 1);
    let mut tmp: i64 = arr[k as usize];
    (*arr)[k as usize] = arr[high as usize];
    (*arr)[high as usize] = tmp;
    return k
};
        unsafe fn kth_largest_element(mut arr: Vec<i64>, mut position: i64) -> i64 {
    if ((arr.len() as i64) == 0) {
        return -1
    }
    if ((position < 1) || (position > (arr.len() as i64))) {
        return -1
    }
    let mut low: i64 = 0;
    let mut high = ((arr.len() as i64) - 1);
    while (low <= high) {
        if ((low > ((arr.len() as i64) - 1)) || (high < 0)) {
            return -1
        }
        let mut pivot_index: i64 = partition(&mut arr, low, high);
        if (pivot_index == (position - 1)) {
            return arr[pivot_index as usize]
        } else if (pivot_index > (position - 1)) {
            high = (pivot_index - 1);
        } else {
            low = (pivot_index + 1);
        }
    }
    return -1
};
        println!("{}", kth_largest_element(g_arr1.clone().clone(), 3));
        println!("{}", "\n");
        println!("{}", kth_largest_element(g_arr2.clone().clone(), 1));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
