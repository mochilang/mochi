// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_puzzle: String = String::new();
fn main() {
    unsafe {
        g_puzzle = String::from("003020600900305001001806400008102900700000008006708200002609500800203009005010300").clone();
                let _start: i64 = _now();
        unsafe fn string_to_grid(s: &str) -> Vec<Vec<i64>> {
    let mut grid: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < 9) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < 9) {
            let mut ch: String = { let tmp = &s; tmp.chars().skip(((i * 9) + j) as usize).take(((((i * 9) + j) + 1) - ((i * 9) + j)) as usize).collect::<String>() }.clone();
            let mut val: i64 = 0;
            if ((ch.as_str() != "0") && (ch.as_str() != ".")) {
                val = { let n: i64 = ch.parse().unwrap(); n };
            }
            row = { let mut _v = row.clone(); _v.push(val); _v };
            j = (j + 1);
        }
        grid = { let mut _v = grid.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return grid
};
        unsafe fn print_grid(mut grid: Vec<Vec<i64>>) {
    for r in 0..9 {
        let mut line: String = String::from("").clone();
        for c in 0..9 {
            line = format!("{}{}", line, grid[r as usize].clone()[c as usize].to_string());
            if (c < 8) {
                line = format!("{}{}", line, " ");
            }
        }
        println!("{}", line);
    }
};
        unsafe fn is_safe(mut grid: Vec<Vec<i64>>, mut row: i64, mut column: i64, mut n: i64) -> bool {
    for i in 0..9 {
        if ((grid[row as usize].clone()[i as usize] == n) || (grid[i as usize].clone()[column as usize] == n)) {
            return false
        }
    }
    for i in 0..3 {
        for j in 0..3 {
            if (grid[((row - (row % 3)) + i) as usize].clone()[((column - (column % 3)) + j) as usize] == n) {
                return false
            }
        }
    }
    return true
};
        unsafe fn find_empty(mut grid: Vec<Vec<i64>>) -> Vec<i64> {
    for i in 0..9 {
        for j in 0..9 {
            if (grid[i as usize].clone()[j as usize] == 0) {
                return vec![i, j]
            }
        }
    }
    return vec![]
};
        unsafe fn solve(grid: &mut Vec<Vec<i64>>) -> bool {
    let mut loc: Vec<i64> = find_empty(grid.clone());
    if ((loc.len() as i64) == 0) {
        return true
    }
    let mut row: i64 = loc[0 as usize];
    let mut column: i64 = loc[1 as usize];
    for digit in 1..10 {
        if is_safe(grid.clone(), row, column, digit) {
            (*grid)[row as usize][column as usize] = digit;
            if solve(grid) {
                return true
            }
            (*grid)[row as usize][column as usize] = 0;
        }
    }
    return false
};
        let mut grid: Vec<Vec<i64>> = string_to_grid(&g_puzzle);
        println!("{}", "Original grid:");
        print_grid(grid.clone());
        if solve(&mut grid) {
            println!("{}", "\nSolved grid:");
            print_grid(grid.clone());
        } else {
            println!("{}", "\nNo solution found");
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
