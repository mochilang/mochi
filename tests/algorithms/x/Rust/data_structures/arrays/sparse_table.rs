// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow2(mut n: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * 2);
        i = (i + 1);
    }
    return result
};
    fn int_log2(mut n: i64) -> i64 {
    let mut v: i64 = n;
    let mut res: i64 = 0;
    while (v > 1) {
        v = (v / 2);
        res = (res + 1);
    }
    return res
};
    fn build_sparse_table(mut number_list: Vec<i64>) -> Vec<Vec<i64>> {
    if ((number_list.len() as i64) == 0) {
        panic!("empty number list not allowed");
    }
    let mut length = (number_list.len() as i64);
    let mut row: i64 = (int_log2(length) + 1);
    let mut sparse_table: Vec<Vec<i64>> = vec![];
    let mut j: i64 = 0;
    while (j < row) {
        let mut inner: Vec<i64> = vec![];
        let mut i: i64 = 0;
        while (i < length) {
            inner = { let mut _v = inner.clone(); _v.push(0); _v };
            i = (i + 1);
        }
        sparse_table = { let mut _v = sparse_table.clone(); _v.push(inner.clone()); _v };
        j = (j + 1);
    }
    let mut i: i64 = 0;
    while (i < length) {
        sparse_table[0 as usize][i as usize] = number_list[i as usize];
        i = (i + 1);
    }
    j = 1;
    while (pow2(j) <= length) {
        i = 0;
        while (((i + pow2(j)) - 1) < length) {
            let mut left: i64 = sparse_table[(j - 1) as usize].clone()[(i + pow2((j - 1))) as usize];
            let mut right: i64 = sparse_table[(j - 1) as usize].clone()[i as usize];
            if (left < right) {
                sparse_table[j as usize][i as usize] = left;
            } else {
                sparse_table[j as usize][i as usize] = right;
            }
            i = (i + 1);
        }
        j = (j + 1);
    }
    return sparse_table
};
    fn query(mut sparse_table: Vec<Vec<i64>>, mut left_bound: i64, mut right_bound: i64) -> i64 {
    if ((left_bound < 0) || (right_bound >= (sparse_table[0 as usize].clone().len() as i64))) {
        panic!("list index out of range");
    }
    let mut interval: i64 = ((right_bound - left_bound) + 1);
    let mut j: i64 = int_log2(interval);
    let mut val1: i64 = sparse_table[j as usize].clone()[((right_bound - pow2(j)) + 1) as usize];
    let mut val2: i64 = sparse_table[j as usize].clone()[left_bound as usize];
    if (val1 < val2) {
        return val1
    }
    return val2
};
    let mut st1: Vec<Vec<i64>> = build_sparse_table(vec![8, 1, 0, 3, 4, 9, 3]);
    println!("{}", format!("{:?}", st1));
    let mut st2: Vec<Vec<i64>> = build_sparse_table(vec![3, 1, 9]);
    println!("{}", format!("{:?}", st2));
    println!("{}", query(st1.clone(), 0, 4).to_string());
    println!("{}", query(st1.clone(), 4, 6).to_string());
    println!("{}", query(st2.clone(), 2, 2).to_string());
    println!("{}", query(st2.clone(), 0, 1).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
