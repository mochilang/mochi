// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn tail(mut xs: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    return res
};
    fn rotate_left(mut xs: Vec<i64>) -> Vec<i64> {
    if ((xs.len() as i64) == 0) {
        return xs
    }
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        i = (i + 1);
    }
    res = { let mut _v = res.clone(); _v.push(xs[0 as usize]); _v };
    return res
};
    fn permute_recursive(mut nums: Vec<i64>) -> Vec<Vec<i64>> {
    if ((nums.len() as i64) == 0) {
        let mut base: Vec<Vec<i64>> = vec![];
        return { let mut _v = base.clone(); _v.push(vec![]); _v }
    }
    let mut result: Vec<Vec<i64>> = vec![];
    let mut current: Vec<i64> = nums.clone();
    let mut count: i64 = 0;
    while (count < (nums.len() as i64)) {
        let mut n: i64 = current[0 as usize];
        let mut rest: Vec<i64> = tail(current.clone());
        let mut perms: Vec<Vec<i64>> = permute_recursive(rest.clone());
        let mut j: i64 = 0;
        while (j < (perms.len() as i64)) {
            let mut perm: Vec<i64> = { let mut _v = perms[j as usize].clone().clone(); _v.push(n); _v };
            result = { let mut _v = result.clone(); _v.push(perm.clone()); _v };
            j = (j + 1);
        }
        current = rotate_left(current.clone());
        count = (count + 1);
    }
    return result
};
    fn swap(mut xs: Vec<i64>, mut i: i64, mut j: i64) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut k: i64 = 0;
    while (k < (xs.len() as i64)) {
        if (k == i) {
            res = { let mut _v = res.clone(); _v.push(xs[j as usize]); _v };
        } else if (k == j) {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[k as usize]); _v };
        }
        k = (k + 1);
    }
    return res
};
    fn permute_backtrack_helper(nums: &mut Vec<i64>, mut start: i64, mut output: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    if (start == ((nums.len() as i64) - 1)) {
        return { let mut _v = output.clone(); _v.push(nums.clone()); _v }
    }
    let mut i: i64 = start;
    let mut res: Vec<Vec<i64>> = output.clone();
    while (i < (nums.len() as i64)) {
        let mut swapped: Vec<i64> = swap(nums.clone(), start, i);
        res = permute_backtrack_helper(&mut swapped, (start + 1), res.clone());
        i = (i + 1);
    }
    return res
};
    fn permute_backtrack(nums: &mut Vec<i64>) -> Vec<Vec<i64>> {
    let mut output: Vec<Vec<i64>> = vec![];
    return permute_backtrack_helper(nums, 0, output.clone())
};
    println!("{}", format!("{:?}", permute_recursive(vec![1, 2, 3])));
    println!("{}", format!("{:?}", permute_backtrack(&mut vec![1, 2, 3])));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
