// Generated by Mochi transpiler v0.10.60
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn iterator_values(mut matrix: Vec<Vec<i64>>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    for row in matrix.iter() {
        for value in (*row).clone() {
            result = { let mut _v = result.clone(); _v.push(value); _v };
        }
    }
    return result
};
    fn index_2d_array_in_1d(mut array: Vec<Vec<i64>>, mut index: i64) -> i64 {
    let mut rows = (array.len() as i64);
    let mut cols = (array[0 as usize].clone().len() as i64);
    if ((rows == 0) || (cols == 0)) {
        panic!("no items in array");
    }
    if ((index < 0) || (index >= (rows * cols))) {
        panic!("index out of range");
    }
    return array[int((index / cols)) as usize].clone()[(index % cols) as usize]
};
    println!("{}", format!("{:?}", iterator_values(vec![vec![5], vec![-523], vec![-1], vec![34], vec![0]])));
    println!("{}", format!("{:?}", iterator_values(vec![vec![5, -523, -1], vec![34, 0]])));
    println!("{}", index_2d_array_in_1d(vec![vec![0, 1, 2, 3], vec![4, 5, 6, 7], vec![8, 9, 10, 11]], 5).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
