// Generated by Mochi transpiler v0.10.72
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Node {
    children: HashMap<String, i64>,
    is_leaf: bool,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"children\": {:?}", self.children)?;
        write!(f, ", ")?;
        write!(f, "\"is_leaf\": {}", self.is_leaf)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Trie {
    nodes: Vec<Node>,
}
impl std::fmt::Display for Trie {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"nodes\": {:?}", self.nodes)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn new_trie() -> Trie {
    return Trie {nodes: vec![Node {children: HashMap::new(), is_leaf: false}.clone()]}
};
    fn remove_key(mut m: HashMap<String, i64>, mut k: String) -> HashMap<String, i64> {
    let mut out: HashMap<String, i64> = HashMap::new();
    for key in m.keys().cloned() {
        if (key.as_str() != k.as_str()) {
            out.insert(key.clone(), m.get(key.as_str()).cloned().unwrap_or_default());
        }
    }
    return out
};
    fn insert(trie: &mut Trie, mut word: String) {
    let mut nodes: Vec<Node> = trie.nodes.clone();
    let mut curr: i64 = 0;
    let mut i: i64 = 0;
    while (i < (word.len() as i64)) {
        let ch: String = word.chars().nth(i as usize).unwrap().to_string().clone();
        let mut child_idx: i64 = -1;
        let children: HashMap<String, i64> = nodes[curr as usize].clone().children.clone();
        if children.contains_key(&ch) {
            child_idx = children.get(ch.as_str()).cloned().unwrap_or_default();
        } else {
            let new_node: Node = Node {children: HashMap::new(), is_leaf: false};
            nodes = { let mut _v = nodes.clone(); _v.push(new_node.clone()); _v };
            child_idx = ((nodes.len() as i64) - 1);
            let mut new_children: HashMap<String, i64> = children.clone();
            new_children.insert(ch.clone(), child_idx.clone());
            let mut node: Node = nodes[curr as usize].clone();
            node.children = new_children.clone();
            nodes[curr as usize] = node.clone();
        }
        curr = child_idx;
        i = (i + 1);
    }
    let mut node: Node = nodes[curr as usize].clone();
    node.is_leaf = true;
    nodes[curr as usize] = node.clone();
    (*trie).nodes = nodes.clone();
};
    fn insert_many(mut trie: Trie, mut words: Vec<String>) {
    for w in words.iter().cloned() {
        insert(&mut trie, w.clone());
    }
};
    fn find(mut trie: Trie, mut word: String) -> bool {
    let nodes: Vec<Node> = trie.nodes.clone();
    let mut curr: i64 = 0;
    let mut i: i64 = 0;
    while (i < (word.len() as i64)) {
        let ch: String = word.chars().nth(i as usize).unwrap().to_string().clone();
        let children: HashMap<String, i64> = nodes[curr as usize].clone().children.clone();
        if !children.contains_key(&ch) {
            return false
        }
        curr = children.get(ch.as_str()).cloned().unwrap_or_default();
        i = (i + 1);
    }
    let node: Node = nodes[curr as usize].clone();
    return node.is_leaf
};
    fn delete(trie: &mut Trie, mut word: String) {
    let mut nodes: Vec<Node> = trie.nodes.clone();
    let mut _delete = {
fn _delete(nodes: &mut Vec<Node>, mut idx: i64, mut pos: i64) -> bool {
    if (pos == (word.len() as i64)) {
        let mut node: Node = nodes[idx as usize].clone();
        if (node.is_leaf == false) {
            return false
        }
        node.is_leaf = false;
        (*nodes)[idx as usize] = node.clone();
        return ((node.children.clone().len() as i64) == 0)
    }
    let mut node: Node = nodes[idx as usize].clone();
    let children: HashMap<String, i64> = node.children.clone();
    let ch: String = word.chars().nth(pos as usize).unwrap().to_string().clone();
    if !children.contains_key(&ch) {
        return false
    }
    let child_idx: i64 = children.get(ch.as_str()).cloned().unwrap_or_default();
    let should_delete: bool = _delete(nodes.clone(), child_idx, (pos + 1));
    node = nodes[idx as usize].clone();
    if should_delete {
        let mut new_children: HashMap<String, i64> = remove_key(node.children.clone().clone(), ch.clone());
        node.children = new_children.clone();
        (*nodes)[idx as usize] = node.clone();
        return (((new_children.len() as i64) == 0) && (node.is_leaf == false))
    }
    (*nodes)[idx as usize] = node.clone();
    return false
}
|mut idx: i64, mut pos: i64| -> bool { _delete(&mut nodes, idx, pos) }
};
    _delete(0, 0);
    trie.nodes = nodes.clone();
};
    fn print_words(mut trie: Trie) {
    let mut dfs = {
fn dfs(trie: &Trie, mut idx: i64, mut word: String) {
    let node: Node = trie.nodes.clone()[idx as usize].clone();
    if node.is_leaf {
        println!("{}", word);
    }
    for key in node.children.clone().keys().cloned() {
        dfs(trie, node.children.clone()[key.as_str()], format!("{}{}", word, key));
    }
}
|mut idx: i64, mut word: String| { dfs(&trie, idx, word) }
};
    dfs(0, "");
};
    fn test_trie() -> bool {
    let words: Vec<String> = vec![String::from("banana").clone(), String::from("bananas").clone(), String::from("bandana").clone(), String::from("band").clone(), String::from("apple").clone(), String::from("all").clone(), String::from("beast").clone()];
    let mut trie: Trie = new_trie();
    insert_many(trie.clone(), words.clone());
    let mut ok: bool = true;
    for w in words.iter().cloned() {
        ok = (ok && find(trie.clone(), w.clone()));
    }
    ok = (ok && find(trie.clone(), String::from("banana")));
    let mut t: bool = find(trie.clone(), String::from("bandanas"));
    ok = (ok && (t == false));
    let mut t2: bool = find(trie.clone(), String::from("apps"));
    ok = (ok && (t2 == false));
    ok = (ok && find(trie.clone(), String::from("apple")));
    ok = (ok && find(trie.clone(), String::from("all")));
    delete(&mut trie, String::from("all"));
    let mut t3: bool = find(trie.clone(), String::from("all"));
    ok = (ok && (t3 == false));
    delete(&mut trie, String::from("banana"));
    let mut t4: bool = find(trie.clone(), String::from("banana"));
    ok = (ok && (t4 == false));
    ok = (ok && find(trie.clone(), String::from("bananas")));
    return ok
};
    fn print_results(mut msg: String, mut passes: bool) {
    if passes {
        println!("{}", format!("{}{}", msg, " works!"));
    } else {
        println!("{}", format!("{}{}", msg, " doesn't work :("));
    }
};
    let mut trie: Trie = new_trie();
    print_results(String::from("Testing trie functionality"), test_trie());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
