// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn straight_line_depreciation(mut useful_years: i64, mut purchase_value: f64, mut residual_value: f64) -> Vec<f64> {
    if (useful_years < 1) {
        panic!("Useful years cannot be less than 1");
    }
    if (purchase_value < 0.0) {
        panic!("Purchase value cannot be less than zero");
    }
    if (purchase_value < residual_value) {
        panic!("Purchase value cannot be less than residual value");
    }
    let depreciable_cost: f64 = (purchase_value - residual_value);
    let annual_expense: f64 = (depreciable_cost / (1.0 * (useful_years as f64)));
    let mut expenses: Vec<f64> = vec![];
    let mut accumulated: f64 = 0.0;
    let mut period: i64 = 0;
    while (period < useful_years) {
        if (period != (useful_years - 1)) {
            accumulated = (accumulated + annual_expense);
            expenses = { let mut _v = expenses.clone(); _v.push(annual_expense); _v };
        } else {
            let end_year_expense: f64 = (depreciable_cost - accumulated);
            expenses = { let mut _v = expenses.clone(); _v.push(end_year_expense); _v };
        }
        period = (period + 1);
    }
    return expenses
};
    println!("{}", format!("{:?}", straight_line_depreciation(10, 1100.0, 100.0)));
    println!("{}", format!("{:?}", straight_line_depreciation(6, 1250.0, 50.0)));
    println!("{}", format!("{:?}", straight_line_depreciation(4, 1001.0, 0.0)));
    println!("{}", format!("{:?}", straight_line_depreciation(11, 380.0, 50.0)));
    println!("{}", format!("{:?}", straight_line_depreciation(1, 4985.0, 100.0)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
