// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn powf(mut base: f64, mut exponent: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exponent) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn round2(mut value: f64) -> f64 {
    if (value >= 0.0) {
        let scaled: i64 = (((value * 100.0) + 0.5) as i64);
        return ((scaled as f64) / 100.0)
    }
    let scaled: i64 = (((value * 100.0) - 0.5) as i64);
    return ((scaled as f64) / 100.0)
};
    fn present_value(mut discount_rate: f64, mut cash_flows: Vec<f64>) -> f64 {
    if (discount_rate < 0.0) {
        panic!("Discount rate cannot be negative");
    }
    if ((cash_flows.len() as i64) == 0) {
        panic!("Cash flows list cannot be empty");
    }
    let mut pv: f64 = 0.0;
    let mut i: i64 = 0;
    let factor: f64 = (1.0 + discount_rate);
    while (i < (cash_flows.len() as i64)) {
        let cf: f64 = cash_flows[i as usize];
        pv = (pv + (cf / powf(factor, i)));
        i = (i + 1);
    }
    return round2(pv)
};
    println!("{}", present_value(0.13, vec![10.0, 20.7, -293.0, 297.0]).to_string());
    println!("{}", present_value(0.07, vec![-109129.39, 30923.23, 15098.93, 29734.0, 39.0]).to_string());
    println!("{}", present_value(0.07, vec![109129.39, 30923.23, 15098.93, 29734.0, 39.0]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
