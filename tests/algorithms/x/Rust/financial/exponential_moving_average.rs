// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_window_size: i64 = 3;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn exponential_moving_average(mut stock_prices: Vec<f64>, mut window_size: i64) -> Vec<f64> {
    if (window_size <= 0) {
        panic!("window_size must be > 0");
    }
    let alpha: f64 = (2.0 / (1.0 + (window_size as f64)));
    let mut moving_average: f64 = 0.0;
    let mut result: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < (stock_prices.len() as i64)) {
        let price: f64 = stock_prices[i as usize];
        if (i <= window_size) {
            if (i == 0) {
                moving_average = price;
            } else {
                moving_average = ((moving_average + price) * 0.5);
            }
        } else {
            moving_average = ((alpha * price) + ((1.0 - alpha) * moving_average));
        }
        result = { let mut _v = result.clone(); _v.push(moving_average); _v };
        i = (i + 1);
    }
    return result
};
        let stock_prices: Vec<f64> = vec![2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0];
        let result: Vec<f64> = exponential_moving_average(stock_prices.clone(), unsafe { g_window_size.clone() });
        println!("{}", format!("{:?}", result));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
