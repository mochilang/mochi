// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn panic(mut msg: String) {
    println!("{}", msg);
};
    fn powf(mut base: f64, mut exp: f64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < (exp as i64)) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn simple_interest(mut principal: f64, mut daily_rate: f64, mut days: f64) -> f64 {
    if (days <= 0.0) {
        panic!("{}", String::from("days_between_payments must be > 0"));
        return 0.0
    }
    if (daily_rate < 0.0) {
        panic!("{}", String::from("daily_interest_rate must be >= 0"));
        return 0.0
    }
    if (principal <= 0.0) {
        panic!("{}", String::from("principal must be > 0"));
        return 0.0
    }
    return ((principal * daily_rate) * days)
};
    fn compound_interest(mut principal: f64, mut nominal_rate: f64, mut periods: f64) -> f64 {
    if (periods <= 0.0) {
        panic!("{}", String::from("number_of_compounding_periods must be > 0"));
        return 0.0
    }
    if (nominal_rate < 0.0) {
        panic!("{}", String::from("nominal_annual_interest_rate_percentage must be >= 0"));
        return 0.0
    }
    if (principal <= 0.0) {
        panic!("{}", String::from("principal must be > 0"));
        return 0.0
    }
    return (principal * (powf((1.0 + nominal_rate), periods) - 1.0))
};
    fn apr_interest(mut principal: f64, mut apr: f64, mut years: f64) -> f64 {
    if (years <= 0.0) {
        panic!("{}", String::from("number_of_years must be > 0"));
        return 0.0
    }
    if (apr < 0.0) {
        panic!("{}", String::from("nominal_annual_percentage_rate must be >= 0"));
        return 0.0
    }
    if (principal <= 0.0) {
        panic!("{}", String::from("principal must be > 0"));
        return 0.0
    }
    return compound_interest(principal, (apr / 365.0), (years * 365.0))
};
    fn mochi_main() {
    println!("{}", simple_interest(18000.0, 0.06, 3.0).to_string());
    println!("{}", simple_interest(0.5, 0.06, 3.0).to_string());
    println!("{}", simple_interest(18000.0, 0.01, 10.0).to_string());
    println!("{}", compound_interest(10000.0, 0.05, 3.0).to_string());
    println!("{}", compound_interest(10000.0, 0.05, 1.0).to_string());
    println!("{}", apr_interest(10000.0, 0.05, 3.0).to_string());
    println!("{}", apr_interest(10000.0, 0.05, 1.0).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
