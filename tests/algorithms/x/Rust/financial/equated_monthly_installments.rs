// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn equated_monthly_installments(mut principal: f64, mut rate_per_annum: f64, mut years_to_repay: i64) -> f64 {
    if (principal <= 0.0) {
        panic!("Principal borrowed must be > 0");
    }
    if (rate_per_annum < 0.0) {
        panic!("Rate of interest must be >= 0");
    }
    if (years_to_repay <= 0) {
        panic!("Years to repay must be an integer > 0");
    }
    let rate_per_month: f64 = (rate_per_annum / 12.0);
    let number_of_payments: i64 = (years_to_repay * 12);
    let factor: f64 = pow_float((1.0 + rate_per_month), number_of_payments);
    return (((principal * rate_per_month) * factor) / (factor - 1.0))
};
    println!("{}", equated_monthly_installments(25000.0, 0.12, 3).to_string());
    println!("{}", equated_monthly_installments(25000.0, 0.12, 10).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
