// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_GLIDER: Vec<Vec<i64>> = Vec::new();
static mut g_BLINKER: Vec<Vec<i64>> = Vec::new();
fn main() {
    unsafe {
        g_GLIDER = vec![vec![0, 1, 0, 0, 0, 0, 0, 0], vec![0, 0, 1, 0, 0, 0, 0, 0], vec![1, 1, 1, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0, 0, 0]];
        g_BLINKER = vec![vec![0, 1, 0], vec![0, 1, 0], vec![0, 1, 0]];
                let _start: i64 = _now();
        unsafe fn new_generation(mut cells: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut rows = (cells.len() as i64);
    let mut cols = (cells[0 as usize].clone().len() as i64);
    let mut next: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < rows) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < cols) {
            let mut count: i64 = 0;
            if ((i > 0) && (j > 0)) {
                count = (count + cells[(i - 1) as usize].clone()[(j - 1) as usize]);
            }
            if (i > 0) {
                count = (count + cells[(i - 1) as usize].clone()[j as usize]);
            }
            if ((i > 0) && (j < (cols - 1))) {
                count = (count + cells[(i - 1) as usize].clone()[(j + 1) as usize]);
            }
            if (j > 0) {
                count = (count + cells[i as usize].clone()[(j - 1) as usize]);
            }
            if (j < (cols - 1)) {
                count = (count + cells[i as usize].clone()[(j + 1) as usize]);
            }
            if ((i < (rows - 1)) && (j > 0)) {
                count = (count + cells[(i + 1) as usize].clone()[(j - 1) as usize]);
            }
            if (i < (rows - 1)) {
                count = (count + cells[(i + 1) as usize].clone()[j as usize]);
            }
            if ((i < (rows - 1)) && (j < (cols - 1))) {
                count = (count + cells[(i + 1) as usize].clone()[(j + 1) as usize]);
            }
            let mut alive: bool = (cells[i as usize].clone()[j as usize] == 1);
            if (((alive && (count >= 2)) && (count <= 3)) || (!alive && (count == 3))) {
                row = { let mut _v = row.clone(); _v.push(1); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            }
            j = (j + 1);
        }
        next = { let mut _v = next.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return next
};
        unsafe fn generate_generations(mut cells: Vec<Vec<i64>>, mut frames: i64) -> Vec<Vec<Vec<i64>>> {
    let mut result: Vec<Vec<Vec<i64>>> = vec![];
    let mut i: i64 = 0;
    let mut current: Vec<Vec<i64>> = cells;
    while (i < frames) {
        result = { let mut _v = result.clone(); _v.push(current.clone()); _v };
        current = new_generation(current.clone());
        i = (i + 1);
    }
    return result
};
        unsafe fn mochi_main() {
    let mut frames: Vec<Vec<Vec<i64>>> = generate_generations(g_GLIDER.clone().clone(), 4);
    let mut i: i64 = 0;
    while (i < (frames.len() as i64)) {
        println!("{:?}", frames[i as usize].clone());
        i = (i + 1);
    }
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
