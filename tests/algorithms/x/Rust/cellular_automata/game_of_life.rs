// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_glider: Vec<Vec<bool>> = Vec::new();
static mut g_board: Vec<Vec<bool>> = Vec::new();
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_glider = vec![vec![false, true, false, false, false], vec![false, false, true, false, false], vec![true, true, true, false, false], vec![false, false, false, false, false], vec![false, false, false, false, false]];
        g_board = g_glider.clone();
        g_i = 0;
                let _start: i64 = _now();
        unsafe fn count_alive_neighbours(mut board: Vec<Vec<bool>>, mut row: i64, mut col: i64) -> i64 {
    let mut size = (board.len() as i64);
    let mut alive: i64 = 0;
    let mut dr: i64 = -1;
    while (dr < 2) {
        let mut dc: i64 = -1;
        while (dc < 2) {
            let mut nr: i64 = (row + dr);
            let mut nc: i64 = (col + dc);
            if ((((!((dr == 0) && (dc == 0)) && (nr >= 0)) && (nr < size)) && (nc >= 0)) && (nc < size)) {
                if board[nr as usize].clone()[nc as usize] {
                    alive = (alive + 1);
                }
            }
            dc = (dc + 1);
        }
        dr = (dr + 1);
    }
    return alive
};
        unsafe fn next_state(mut current: bool, mut alive: i64) -> bool {
    let mut state: bool = current;
    if current {
        if (alive < 2) {
            state = false;
        } else if ((alive == 2) || (alive == 3)) {
            state = true;
        } else {
            state = false;
        }
    } else {
        if (alive == 3) {
            state = true;
        }
    }
    return state
};
        unsafe fn step(mut board: Vec<Vec<bool>>) -> Vec<Vec<bool>> {
    let mut size = (board.len() as i64);
    let mut new_board: Vec<Vec<bool>> = vec![];
    let mut r: i64 = 0;
    while (r < size) {
        let mut new_row: Vec<bool> = vec![];
        let mut c: i64 = 0;
        while (c < size) {
            let mut alive: i64 = count_alive_neighbours(board.clone(), r, c);
            let mut cell: bool = board[r as usize].clone()[c as usize];
            let mut updated: bool = next_state(cell, alive);
            new_row = { let mut _v = new_row.clone(); _v.push(updated); _v };
            c = (c + 1);
        }
        new_board = { let mut _v = new_board.clone(); _v.push(new_row.clone()); _v };
        r = (r + 1);
    }
    return new_board
};
        unsafe fn show(mut board: Vec<Vec<bool>>) {
    let mut r: i64 = 0;
    while (r < (board.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut c: i64 = 0;
        while (c < (board[r as usize].clone().len() as i64)) {
            if board[r as usize].clone()[c as usize] {
                line = format!("{}{}", line, "#");
            } else {
                line = format!("{}{}", line, ".");
            }
            c = (c + 1);
        }
        println!("{}", line);
        r = (r + 1);
    }
};
        println!("{}", "Initial");
        show(g_board.clone().clone());
        while (g_i < 4) {
            g_board = step(g_board.clone().clone());
            println!("{}", format!("{}{}", "\nStep ", (g_i + 1).to_string()));
            show(g_board.clone().clone());
            g_i = (g_i + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
