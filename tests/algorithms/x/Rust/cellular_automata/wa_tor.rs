// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_WIDTH: i64 = 0;
static mut g_HEIGHT: i64 = 0;
static mut g_PREY_INITIAL_COUNT: i64 = 0;
static mut g_PREY_REPRODUCTION_TIME: i64 = 0;
static mut g_PREDATOR_INITIAL_COUNT: i64 = 0;
static mut g_PREDATOR_REPRODUCTION_TIME: i64 = 0;
static mut g_PREDATOR_INITIAL_ENERGY: i64 = 0;
static mut g_PREDATOR_FOOD_VALUE: i64 = 0;
static mut g_TYPE_PREY: i64 = 0;
static mut g_TYPE_PREDATOR: i64 = 0;
static mut g_seed: i64 = 0;
static mut g_board: Vec<Vec<i64>> = Vec::new();
static mut g_entities: Vec<Vec<i64>> = Vec::new();
static mut g_dr: Vec<i64> = Vec::new();
static mut g_dc: Vec<i64> = Vec::new();
static mut g_t: i64 = 0;
fn main() {
    unsafe {
        g_WIDTH = 10;
        g_HEIGHT = 10;
        g_PREY_INITIAL_COUNT = 20;
        g_PREY_REPRODUCTION_TIME = 5;
        g_PREDATOR_INITIAL_COUNT = 5;
        g_PREDATOR_REPRODUCTION_TIME = 20;
        g_PREDATOR_INITIAL_ENERGY = 15;
        g_PREDATOR_FOOD_VALUE = 5;
        g_TYPE_PREY = 0;
        g_TYPE_PREDATOR = 1;
        g_seed = 123456789;
        g_board = create_board();
        g_entities = vec![];
        g_dr = vec![-1, 0, 1, 0];
        g_dc = vec![0, 1, 0, -1];
        g_t = 0;
                let _start: i64 = _now();
        unsafe fn rand() -> i64 {
    g_seed = (((g_seed * 1103515245) + 12345) % 2147483648);
    return g_seed
};
        unsafe fn rand_range(mut max: i64) -> i64 {
    return (rand() % max)
};
        unsafe fn shuffle(mut list_int: Vec<i64>) -> Vec<i64> {
    let mut i = ((list_int.len() as i64) - 1);
    while (i > 0) {
        let mut j: i64 = rand_range((i + 1));
        let mut tmp: i64 = list_int[i as usize];
        list_int[i as usize] = list_int[j as usize];
        list_int[j as usize] = tmp;
        i = (i - 1);
    }
    return list_int
};
        unsafe fn create_board() -> Vec<Vec<i64>> {
    let mut board: Vec<Vec<i64>> = vec![];
    let mut r: i64 = 0;
    while (r < g_HEIGHT) {
        let mut row: Vec<i64> = vec![];
        let mut c: i64 = 0;
        while (c < g_WIDTH) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            c = (c + 1);
        }
        board = { let mut _v = board.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return board
};
        unsafe fn create_prey(mut r: i64, mut c: i64) -> Vec<i64> {
    return vec![g_TYPE_PREY, r, c, g_PREY_REPRODUCTION_TIME, 0, 1]
};
        unsafe fn create_predator(mut r: i64, mut c: i64) -> Vec<i64> {
    return vec![g_TYPE_PREDATOR, r, c, g_PREDATOR_REPRODUCTION_TIME, g_PREDATOR_INITIAL_ENERGY, 1]
};
        unsafe fn empty_cell(mut r: i64, mut c: i64) -> bool {
    return (g_board.clone()[r as usize].clone()[c as usize] == 0)
};
        unsafe fn add_entity(mut typ: i64) {
    loop {
        let mut r: i64 = rand_range(g_HEIGHT);
        let mut c: i64 = rand_range(g_WIDTH);
        if empty_cell(r, c) {
            if (typ == g_TYPE_PREY) {
                g_board[r as usize][c as usize] = 1;
                g_entities = { let mut _v = g_entities.clone().clone(); _v.push(create_prey(r, c)); _v };
            } else {
                g_board[r as usize][c as usize] = 2;
                g_entities = { let mut _v = g_entities.clone().clone(); _v.push(create_predator(r, c)); _v };
            }
            return
        }
    }
};
        unsafe fn setup() {
    let mut i: i64 = 0;
    while (i < g_PREY_INITIAL_COUNT) {
        add_entity(g_TYPE_PREY);
        i = (i + 1);
    }
    i = 0;
    while (i < g_PREDATOR_INITIAL_COUNT) {
        add_entity(g_TYPE_PREDATOR);
        i = (i + 1);
    }
};
        unsafe fn inside(mut r: i64, mut c: i64) -> bool {
    return ((((r >= 0) && (r < g_HEIGHT)) && (c >= 0)) && (c < g_WIDTH))
};
        unsafe fn find_prey(mut r: i64, mut c: i64) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_entities.clone().len() as i64)) {
        let mut e: Vec<i64> = g_entities.clone()[i as usize].clone();
        if ((((e[5 as usize] == 1) && (e[0 as usize] == g_TYPE_PREY)) && (e[1 as usize] == r)) && (e[2 as usize] == c)) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn step_world() {
    let mut i: i64 = 0;
    while (i < (g_entities.clone().len() as i64)) {
        let mut e: Vec<i64> = g_entities.clone()[i as usize].clone();
        if (e[5 as usize] == 0) {
            i = (i + 1);
            continue
        }
        let mut typ: i64 = e[0 as usize];
        let mut row: i64 = e[1 as usize];
        let mut col: i64 = e[2 as usize];
        let mut repro: i64 = e[3 as usize];
        let mut energy: i64 = e[4 as usize];
        let mut dirs: Vec<i64> = vec![0, 1, 2, 3];
        dirs = shuffle(dirs.clone());
        let mut moved: bool = false;
        let mut old_r: i64 = row;
        let mut old_c: i64 = col;
        if (typ == g_TYPE_PREDATOR) {
            let mut j: i64 = 0;
            let mut ate: bool = false;
            while (j < 4) {
                let mut d: i64 = dirs[j as usize];
                let mut nr: i64 = (row + g_dr.clone()[d as usize]);
                let mut nc: i64 = (col + g_dc.clone()[d as usize]);
                if (inside(nr, nc) && (g_board.clone()[nr as usize].clone()[nc as usize] == 1)) {
                    let mut prey_index: i64 = find_prey(nr, nc);
                    if (prey_index >= 0) {
                        g_entities[prey_index as usize][5 as usize] = 0;
                    }
                    g_board[nr as usize][nc as usize] = 2;
                    g_board[row as usize][col as usize] = 0;
                    e[1 as usize] = nr;
                    e[2 as usize] = nc;
                    e[4 as usize] = ((energy + g_PREDATOR_FOOD_VALUE) - 1);
                    moved = true;
                    ate = true;
                    break
                }
                j = (j + 1);
            }
            if !ate {
                j = 0;
                while (j < 4) {
                    let mut d: i64 = dirs[j as usize];
                    let mut nr: i64 = (row + g_dr.clone()[d as usize]);
                    let mut nc: i64 = (col + g_dc.clone()[d as usize]);
                    if (inside(nr, nc) && (g_board.clone()[nr as usize].clone()[nc as usize] == 0)) {
                        g_board[nr as usize][nc as usize] = 2;
                        g_board[row as usize][col as usize] = 0;
                        e[1 as usize] = nr;
                        e[2 as usize] = nc;
                        moved = true;
                        break
                    }
                    j = (j + 1);
                }
                e[4 as usize] = (energy - 1);
            }
            if (e[4 as usize] <= 0) {
                e[5 as usize] = 0;
                g_board[e[1 as usize] as usize][e[2 as usize] as usize] = 0;
            }
        } else {
            let mut j: i64 = 0;
            while (j < 4) {
                let mut d: i64 = dirs[j as usize];
                let mut nr: i64 = (row + g_dr.clone()[d as usize]);
                let mut nc: i64 = (col + g_dc.clone()[d as usize]);
                if (inside(nr, nc) && (g_board.clone()[nr as usize].clone()[nc as usize] == 0)) {
                    g_board[nr as usize][nc as usize] = 1;
                    g_board[row as usize][col as usize] = 0;
                    e[1 as usize] = nr;
                    e[2 as usize] = nc;
                    moved = true;
                    break
                }
                j = (j + 1);
            }
        }
        if (e[5 as usize] == 1) {
            if (moved && (repro <= 0)) {
                if (typ == g_TYPE_PREY) {
                    g_board[old_r as usize][old_c as usize] = 1;
                    g_entities = { let mut _v = g_entities.clone().clone(); _v.push(create_prey(old_r, old_c)); _v };
                    e[3 as usize] = g_PREY_REPRODUCTION_TIME;
                } else {
                    g_board[old_r as usize][old_c as usize] = 2;
                    g_entities = { let mut _v = g_entities.clone().clone(); _v.push(create_predator(old_r, old_c)); _v };
                    e[3 as usize] = g_PREDATOR_REPRODUCTION_TIME;
                }
            } else {
                e[3 as usize] = (repro - 1);
            }
        }
        i = (i + 1);
    }
    let mut alive: Vec<Vec<i64>> = vec![];
    let mut k: i64 = 0;
    while (k < (g_entities.clone().len() as i64)) {
        let mut e2: Vec<i64> = g_entities.clone()[k as usize].clone();
        if (e2[5 as usize] == 1) {
            alive = { let mut _v = alive.clone(); _v.push(e2.clone()); _v };
        }
        k = (k + 1);
    }
    g_entities = alive.clone();
};
        unsafe fn count_entities(mut typ: i64) -> i64 {
    let mut cnt: i64 = 0;
    let mut i: i64 = 0;
    while (i < (g_entities.clone().len() as i64)) {
        if ((g_entities.clone()[i as usize].clone()[0 as usize] == typ) && (g_entities.clone()[i as usize].clone()[5 as usize] == 1)) {
            cnt = (cnt + 1);
        }
        i = (i + 1);
    }
    return cnt
};
        setup();
        while (g_t < 10) {
            step_world();
            g_t = (g_t + 1);
        }
        println!("{}", format!("{}{}", "Prey: ", count_entities(g_TYPE_PREY).to_string()));
        println!("{}", format!("{}{}", "Predators: ", count_entities(g_TYPE_PREDATOR).to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
