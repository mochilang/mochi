// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_initial: Vec<i64> = Vec::new();
static mut g_cells: Vec<Vec<i64>> = Vec::new();
static mut g_time: i64 = 0;
static mut g_t: i64 = 0;
fn main() {
    unsafe {
        g_initial = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        g_cells = vec![g_initial.clone().clone()];
        g_time = 0;
        g_t = 0;
                let _start: i64 = _now();
        unsafe fn format_ruleset(mut ruleset: i64) -> Vec<i64> {
    let mut rs: i64 = ruleset;
    let mut bits_rev: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 8) {
        bits_rev = { let mut _v = bits_rev.clone(); _v.push((rs % 2)); _v };
        rs = (rs / 2);
        i = (i + 1);
    }
    let mut bits: Vec<i64> = vec![];
    let mut j = ((bits_rev.len() as i64) - 1);
    while (j >= 0) {
        bits = { let mut _v = bits.clone(); _v.push(bits_rev[j as usize]); _v };
        j = (j - 1);
    }
    return bits
};
        unsafe fn new_generation(mut cells: Vec<Vec<i64>>, mut rules: Vec<i64>, mut time: i64) -> Vec<i64> {
    let mut population = (cells[0 as usize].clone().len() as i64);
    let mut next_generation: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < population) {
        let mut left_neighbor: i64 = if (i == 0) { 0 } else { cells[time as usize].clone()[(i - 1) as usize] };
        let mut right_neighbor: i64 = if (i == (population - 1)) { 0 } else { cells[time as usize].clone()[(i + 1) as usize] };
        let mut center: i64 = cells[time as usize].clone()[i as usize];
        let mut idx: i64 = (7 - (((left_neighbor * 4) + (center * 2)) + right_neighbor));
        next_generation = { let mut _v = next_generation.clone(); _v.push(rules[idx as usize]); _v };
        i = (i + 1);
    }
    return next_generation
};
        unsafe fn cells_to_string(mut row: Vec<i64>) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (row.len() as i64)) {
        if (row[i as usize] == 1) {
            result = format!("{}{}", result, "#");
        } else {
            result = format!("{}{}", result, ".");
        }
        i = (i + 1);
    }
    return result.clone()
};
        let mut rules: Vec<i64> = format_ruleset(30);
        while (g_time < 16) {
            let mut next: Vec<i64> = new_generation(g_cells.clone().clone(), rules.clone(), g_time);
            g_cells = { let mut _v = g_cells.clone().clone(); _v.push(next.clone()); _v };
            g_time = (g_time + 1);
        }
        while (g_t < (g_cells.clone().len() as i64)) {
            println!("{}", cells_to_string(g_cells.clone()[g_t as usize].clone()));
            g_t = (g_t + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
