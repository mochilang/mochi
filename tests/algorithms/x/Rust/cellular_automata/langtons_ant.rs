// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn create_board(mut width: i64, mut height: i64) -> Vec<Vec<bool>> {
    let mut board: Vec<Vec<bool>> = vec![];
    let mut i: i64 = 0;
    while (i < height) {
        let mut row: Vec<bool> = vec![];
        let mut j: i64 = 0;
        while (j < width) {
            row = { let mut _v = row.clone(); _v.push(true); _v };
            j = (j + 1);
        }
        board = { let mut _v = board.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return board
};
    fn move_ant(board: &mut Vec<Vec<bool>>, mut x: i64, mut y: i64, mut direction: i64) -> Vec<i64> {
    if board[x as usize].clone()[y as usize] {
        direction = ((direction + 1) % 4);
    } else {
        direction = ((direction + 3) % 4);
    }
    let mut old_x: i64 = x;
    let mut old_y: i64 = y;
    if (direction == 0) {
        x = (x - 1);
    } else if (direction == 1) {
        y = (y + 1);
    } else if (direction == 2) {
        x = (x + 1);
    } else {
        y = (y - 1);
    }
    (*board)[old_x as usize][old_y as usize] = !board[old_x as usize].clone()[old_y as usize];
    return vec![x, y, direction]
};
    fn langtons_ant(mut width: i64, mut height: i64, mut steps: i64) -> Vec<Vec<bool>> {
    let mut board: Vec<Vec<bool>> = create_board(width, height);
    let mut x: i64 = (width / 2);
    let mut y: i64 = (height / 2);
    let mut dir: i64 = 3;
    let mut s: i64 = 0;
    while (s < steps) {
        let mut state: Vec<i64> = move_ant(&mut board, x, y, dir);
        x = state[0 as usize];
        y = state[1 as usize];
        dir = state[2 as usize];
        s = (s + 1);
    }
    return board
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
