// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
static g_AXIS_A: f64 = 6378137.0;
static g_AXIS_B: f64 = 6356752.314245;
static g_RADIUS: f64 = 6378137.0;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn to_radians(mut deg: f64) -> f64 {
    return ((deg * unsafe { g_PI.clone() }) / 180.0)
};
        fn sin_taylor(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = (2.0 * (i as f64));
        let k2: f64 = (k1 + 1.0);
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        fn cos_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = ((2.0 * (i as f64)) - 1.0);
        let k2: f64 = (2.0 * (i as f64));
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        fn tan_approx(mut x: f64) -> f64 {
    return (sin_taylor(x) / cos_taylor(x))
};
        fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        fn atanApprox(mut x: f64) -> f64 {
    if (x > 1.0) {
        return ((unsafe { g_PI.clone() } / 2.0) - (x / ((x * x) + 0.28)))
    }
    if (x < -1.0) {
        return ((-unsafe { g_PI.clone() } / 2.0) - (x / ((x * x) + 0.28)))
    }
    return (x / (1.0 + ((0.28 * x) * x)))
};
        fn atan2Approx(mut y: f64, mut x: f64) -> f64 {
    if (x > 0.0) {
        let val: f64 = atanApprox((y / x));
        return val
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return (atanApprox((y / x)) + unsafe { g_PI.clone() })
        }
        return (atanApprox((y / x)) - unsafe { g_PI.clone() })
    }
    if (y > 0.0) {
        return (unsafe { g_PI.clone() } / 2.0)
    }
    if (y < 0.0) {
        return (-unsafe { g_PI.clone() } / 2.0)
    }
    return 0.0
};
        fn asinApprox(mut x: f64) -> f64 {
    let denom: f64 = sqrtApprox((1.0 - (x * x)));
    let res: f64 = atan2Approx(x, denom);
    return res
};
        fn haversine_distance(mut lat1: f64, mut lon1: f64, mut lat2: f64, mut lon2: f64) -> f64 {
    let flattening: f64 = ((unsafe { g_AXIS_A.clone() } - unsafe { g_AXIS_B.clone() }) / unsafe { g_AXIS_A.clone() });
    let phi_1: f64 = atanApprox(((1.0 - flattening) * tan_approx(to_radians(lat1))));
    let phi_2: f64 = atanApprox(((1.0 - flattening) * tan_approx(to_radians(lat2))));
    let lambda_1: f64 = to_radians(lon1);
    let lambda_2: f64 = to_radians(lon2);
    let mut sin_sq_phi: f64 = sin_taylor(((phi_2 - phi_1) / 2.0));
    let mut sin_sq_lambda: f64 = sin_taylor(((lambda_2 - lambda_1) / 2.0));
    sin_sq_phi = (sin_sq_phi * sin_sq_phi);
    sin_sq_lambda = (sin_sq_lambda * sin_sq_lambda);
    let h_value: f64 = sqrtApprox((sin_sq_phi + ((cos_taylor(phi_1) * cos_taylor(phi_2)) * sin_sq_lambda)));
    return ((2.0 * unsafe { g_RADIUS.clone() }) * asinApprox(h_value))
};
        let SAN_FRANCISCO: Vec<f64> = vec![37.774856, -122.424227];
        let YOSEMITE: Vec<f64> = vec![37.864742, -119.537521];
        println!("{}", haversine_distance(SAN_FRANCISCO[0 as usize], SAN_FRANCISCO[1 as usize], YOSEMITE[0 as usize], YOSEMITE[1 as usize]).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
