// Generated by Mochi transpiler v0.10.64
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Point {
    x: i64,
    y: i64,
}
impl std::fmt::Display for Point {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn round_int(mut x: f64) -> i64 {
    return ((x + 0.5) as i64)
};
    fn digital_differential_analyzer_line(mut p1: Point, mut p2: Point) -> Vec<Point> {
    let dx: i64 = (p2.x - p1.x);
    let dy: i64 = (p2.y - p1.y);
    let abs_dx: i64 = abs_int(dx);
    let abs_dy: i64 = abs_int(dy);
    let steps: i64 = if (abs_dx > abs_dy) { abs_dx } else { abs_dy };
    let x_increment: f64 = ((dx as f64) / (steps as f64));
    let y_increment: f64 = ((dy as f64) / (steps as f64));
    let mut coordinates: Vec<Point> = vec![];
    let mut x: f64 = (p1.x as f64);
    let mut y: f64 = (p1.y as f64);
    let mut i: i64 = 0;
    while (i < steps) {
        x = (x + x_increment);
        y = (y + y_increment);
        let point: Point = Point {x: round_int(x), y: round_int(y)};
        coordinates = { let mut _v = coordinates.clone(); _v.push(point.clone()); _v };
        i = (i + 1);
    }
    return coordinates
};
    fn mochi_main() {
    let result: Vec<Point> = digital_differential_analyzer_line(Point {x: 1, y: 1}, Point {x: 4, y: 4});
    println!("{}", { let tmp = result.clone(); tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
