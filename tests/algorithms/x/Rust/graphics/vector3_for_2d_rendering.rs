// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_PI: f64 = 3.141592653589793;
fn main() {
    unsafe {
                let _start: i64 = _now();
        fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        fn modf(mut x: f64, mut m: f64) -> f64 {
    return (x - (floor((x / m)) * m))
};
        fn sin_taylor(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = (2.0 * (i as f64));
        let k2: f64 = (k1 + 1.0);
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        fn cos_taylor(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 10) {
        let k1: f64 = ((2.0 * (i as f64)) - 1.0);
        let k2: f64 = (2.0 * (i as f64));
        term = (((-term * x) * x) / (k1 * k2));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
        fn convert_to_2d(mut x: f64, mut y: f64, mut z: f64, mut scale: f64, mut distance: f64) -> Vec<f64> {
    let projected_x: f64 = (((x * distance) / (z + distance)) * scale);
    let projected_y: f64 = (((y * distance) / (z + distance)) * scale);
    return vec![projected_x, projected_y]
};
        fn rotate(mut x: f64, mut y: f64, mut z: f64, mut axis: String, mut angle: f64) -> Vec<f64> {
    let mut angle: f64 = (((modf(angle, 360.0) / 450.0) * 180.0) / unsafe { g_PI.clone() });
    angle = modf(angle, (2.0 * unsafe { g_PI.clone() }));
    if (angle > unsafe { g_PI.clone() }) {
        angle = (angle - (2.0 * unsafe { g_PI.clone() }));
    }
    if (axis.as_str() == "z") {
        let new_x: f64 = ((x * cos_taylor(angle)) - (y * sin_taylor(angle)));
        let new_y: f64 = ((y * cos_taylor(angle)) + (x * sin_taylor(angle)));
        let new_z: f64 = z;
        return vec![new_x, new_y, new_z]
    }
    if (axis.as_str() == "x") {
        let new_y: f64 = ((y * cos_taylor(angle)) - (z * sin_taylor(angle)));
        let new_z: f64 = ((z * cos_taylor(angle)) + (y * sin_taylor(angle)));
        let new_x: f64 = x;
        return vec![new_x, new_y, new_z]
    }
    if (axis.as_str() == "y") {
        let new_x: f64 = ((x * cos_taylor(angle)) - (z * sin_taylor(angle)));
        let new_z: f64 = ((z * cos_taylor(angle)) + (x * sin_taylor(angle)));
        let new_y: f64 = y;
        return vec![new_x, new_y, new_z]
    }
    println!("{}", "not a valid axis, choose one of 'x', 'y', 'z'");
    return vec![0.0, 0.0, 0.0]
};
        println!("{}", format!("{:?}", convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)));
        println!("{}", format!("{:?}", rotate(1.0, 2.0, 3.0, String::from("y"), 90.0)));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
