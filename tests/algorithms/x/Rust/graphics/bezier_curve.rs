// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn n_choose_k(mut n: i64, mut k: i64) -> f64 {
    if ((k < 0) || (k > n)) {
        return 0.0
    }
    if ((k == 0) || (k == n)) {
        return 1.0
    }
    let mut result: f64 = 1.0;
    let mut i: i64 = 1;
    while (i <= k) {
        result = ((result * (1.0 * (((n - k) + i) as f64))) / (1.0 * (i as f64)));
        i = (i + 1);
    }
    return result
};
    fn pow_float(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn basis_function(mut points: Vec<Vec<f64>>, mut t: f64) -> Vec<f64> {
    let degree: i64 = ((points.len() as i64) - 1);
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i <= degree) {
        let coef: f64 = n_choose_k(degree, i);
        let term: f64 = (pow_float((1.0 - t), (degree - i)) * pow_float(t, i));
        res = { let mut _v = res.clone(); _v.push((coef * term)); _v };
        i = (i + 1);
    }
    return res
};
    fn bezier_point(mut points: Vec<Vec<f64>>, mut t: f64) -> Vec<f64> {
    let basis: Vec<f64> = basis_function(points.clone(), t);
    let mut x: f64 = 0.0;
    let mut y: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (points.len() as i64)) {
        x = (x + (basis[i as usize] * points[i as usize].clone()[0 as usize]));
        y = (y + (basis[i as usize] * points[i as usize].clone()[1 as usize]));
        i = (i + 1);
    }
    return vec![x, y]
};
    let control: Vec<Vec<f64>> = vec![vec![1.0, 1.0].clone(), vec![1.0, 2.0].clone()];
    println!("{}", format!("{:?}", basis_function(control.clone(), 0.0)));
    println!("{}", format!("{:?}", basis_function(control.clone(), 1.0)));
    println!("{}", format!("{:?}", bezier_point(control.clone(), 0.0)));
    println!("{}", format!("{:?}", bezier_point(control.clone(), 1.0)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
