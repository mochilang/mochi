// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn repeat_char(mut ch: String, mut count: i64) -> String {
    let mut result: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < count) {
        result = format!("{}{}", result, ch);
        i = (i + 1);
    }
    return result.clone()
};
    fn butterfly_pattern(mut n: i64) -> String {
    let mut lines: Vec<String> = vec![];
    let mut i: i64 = 1;
    while (i < n) {
        let left: String = repeat_char(String::from("*"), i).clone();
        let mid: String = repeat_char(String::from(" "), ((2 * (n - i)) - 1)).clone();
        let right: String = repeat_char(String::from("*"), i).clone();
        lines = { let mut _v = lines.clone(); _v.push(format!("{}{}", format!("{}{}", left, mid), right)); _v };
        i = (i + 1);
    }
    lines = { let mut _v = lines.clone(); _v.push(repeat_char(String::from("*"), ((2 * n) - 1))); _v };
    let mut j: i64 = (n - 1);
    while (j > 0) {
        let left: String = repeat_char(String::from("*"), j).clone();
        let mid: String = repeat_char(String::from(" "), ((2 * (n - j)) - 1)).clone();
        let right: String = repeat_char(String::from("*"), j).clone();
        lines = { let mut _v = lines.clone(); _v.push(format!("{}{}", format!("{}{}", left, mid), right)); _v };
        j = (j - 1);
    }
    let mut out: String = String::from("").clone();
    let mut k: i64 = 0;
    while (k < (lines.len() as i64)) {
        if (k > 0) {
            out = format!("{}{}", out, "\n");
        }
        out = format!("{}{}", out, lines[k as usize].clone());
        k = (k + 1);
    }
    return out.clone()
};
    println!("{}", butterfly_pattern(3));
    println!("{}", butterfly_pattern(5));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
