// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_values: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_values = vec![String::from("0").clone(), String::from("1").clone(), String::from("2").clone(), String::from("3").clone(), String::from("4").clone(), String::from("5").clone(), String::from("6").clone(), String::from("7").clone(), String::from("8").clone(), String::from("9").clone(), String::from("a").clone(), String::from("b").clone(), String::from("c").clone(), String::from("d").clone(), String::from("e").clone(), String::from("f").clone()];
                let _start: i64 = _now();
        unsafe fn decimal_to_hexadecimal(mut decimal: i64) -> String {
    let mut num: i64 = decimal;
    let mut negative: bool = false;
    if (num < 0) {
        negative = true;
        num = -num;
    }
    if (num == 0) {
        if negative {
            return String::from("-0x0")
        }
        return String::from("0x0")
    }
    let mut hex: String = String::from("").clone();
    while (num > 0) {
        let mut remainder: i64 = (num % 16);
        hex = format!("{}{}", g_values.clone()[remainder as usize].clone(), hex);
        num = (num / 16);
    }
    if negative {
        return format!("{}{}", "-0x", hex)
    }
    return format!("{}{}", "0x", hex).clone()
};
        println!("{}", decimal_to_hexadecimal(5));
        println!("{}", decimal_to_hexadecimal(15));
        println!("{}", decimal_to_hexadecimal(37));
        println!("{}", decimal_to_hexadecimal(255));
        println!("{}", decimal_to_hexadecimal(4096));
        println!("{}", decimal_to_hexadecimal(999098));
        println!("{}", decimal_to_hexadecimal(-256));
        println!("{}", decimal_to_hexadecimal(0));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
