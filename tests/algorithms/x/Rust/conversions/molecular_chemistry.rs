// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn round_to_int(mut x: f64) -> i64 {
    if (x >= 0.0) {
        return ((x + 0.5) as i64)
    }
    return ((x - 0.5) as i64)
};
    fn molarity_to_normality(mut nfactor: f64, mut moles: f64, mut volume: f64) -> i64 {
    return round_to_int(((moles / volume) * nfactor))
};
    fn moles_to_pressure(mut volume: f64, mut moles: f64, mut temperature: f64) -> i64 {
    return round_to_int((((moles * 0.0821) * temperature) / volume))
};
    fn moles_to_volume(mut pressure: f64, mut moles: f64, mut temperature: f64) -> i64 {
    return round_to_int((((moles * 0.0821) * temperature) / pressure))
};
    fn pressure_and_volume_to_temperature(mut pressure: f64, mut moles: f64, mut volume: f64) -> i64 {
    return round_to_int(((pressure * volume) / (0.0821 * moles)))
};
    println!("{}", molarity_to_normality(2.0, 3.1, 0.31).to_string());
    println!("{}", molarity_to_normality(4.0, 11.4, 5.7).to_string());
    println!("{}", moles_to_pressure(0.82, 3.0, 300.0).to_string());
    println!("{}", moles_to_pressure(8.2, 5.0, 200.0).to_string());
    println!("{}", moles_to_volume(0.82, 3.0, 300.0).to_string());
    println!("{}", moles_to_volume(8.2, 5.0, 200.0).to_string());
    println!("{}", pressure_and_volume_to_temperature(0.82, 1.0, 2.0).to_string());
    println!("{}", pressure_and_volume_to_temperature(8.2, 5.0, 3.0).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
