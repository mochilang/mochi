// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_roman_values: Vec<i64> = Vec::new();
static mut g_roman_symbols: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_roman_values = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
        g_roman_symbols = vec![String::from("M").clone(), String::from("CM").clone(), String::from("D").clone(), String::from("CD").clone(), String::from("C").clone(), String::from("XC").clone(), String::from("L").clone(), String::from("XL").clone(), String::from("X").clone(), String::from("IX").clone(), String::from("V").clone(), String::from("IV").clone(), String::from("I").clone()];
                let _start: i64 = _now();
        unsafe fn char_value(c: &str) -> i64 {
    if (c == "I") {
        return 1
    }
    if (c == "V") {
        return 5
    }
    if (c == "X") {
        return 10
    }
    if (c == "L") {
        return 50
    }
    if (c == "C") {
        return 100
    }
    if (c == "D") {
        return 500
    }
    if (c == "M") {
        return 1000
    }
    return 0
};
        unsafe fn roman_to_int(roman: &str) -> i64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (roman.len() as i64)) {
        if (((i + 1) < (roman.len() as i64)) && (char_value(&roman.chars().nth(i as usize).unwrap().to_string()) < char_value(&roman.chars().nth((i + 1) as usize).unwrap().to_string()))) {
            total = ((total + char_value(&roman.chars().nth((i + 1) as usize).unwrap().to_string())) - char_value(&roman.chars().nth(i as usize).unwrap().to_string()));
            i = (i + 2);
        } else {
            total = (total + char_value(&roman.chars().nth(i as usize).unwrap().to_string()));
            i = (i + 1);
        }
    }
    return total
};
        unsafe fn int_to_roman(mut number: i64) -> String {
    let mut num: i64 = number;
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (g_roman_values.clone().len() as i64)) {
        let mut value: i64 = g_roman_values.clone()[i as usize];
        let mut symbol: String = g_roman_symbols.clone()[i as usize].clone().clone();
        let mut factor: i64 = (num / value);
        num = (num % value);
        let mut j: i64 = 0;
        while (j < factor) {
            res = format!("{}{}", res, symbol);
            j = (j + 1);
        }
        if (num == 0) {
            break
        }
        i = (i + 1);
    }
    return res.clone()
};
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
