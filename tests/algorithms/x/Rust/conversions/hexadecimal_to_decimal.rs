// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn strip(mut s: String) -> String {
    let mut start: i64 = 0;
    let mut end = (s.len() as i64);
    while ((start < end) && ({ let tmp = &s; tmp.chars().skip(start as usize).take(((start + 1) - start) as usize).collect::<String>() }.as_str() == " ")) {
        start = (start + 1);
    }
    while ((end > start) && ({ let tmp = &s; tmp.chars().skip((end - 1) as usize).take((end - (end - 1)) as usize).collect::<String>() }.as_str() == " ")) {
        end = (end - 1);
    }
    return { let tmp = &s; tmp.chars().skip(start as usize).take((end - start) as usize).collect::<String>() }.clone()
};
    fn hex_digit_value(c: &str) -> i64 {
    if (c == "0") {
        return 0
    }
    if (c == "1") {
        return 1
    }
    if (c == "2") {
        return 2
    }
    if (c == "3") {
        return 3
    }
    if (c == "4") {
        return 4
    }
    if (c == "5") {
        return 5
    }
    if (c == "6") {
        return 6
    }
    if (c == "7") {
        return 7
    }
    if (c == "8") {
        return 8
    }
    if (c == "9") {
        return 9
    }
    if ((c == "a") || (c == "A")) {
        return 10
    }
    if ((c == "b") || (c == "B")) {
        return 11
    }
    if ((c == "c") || (c == "C")) {
        return 12
    }
    if ((c == "d") || (c == "D")) {
        return 13
    }
    if ((c == "e") || (c == "E")) {
        return 14
    }
    if ((c == "f") || (c == "F")) {
        return 15
    }
    println!("{}", "Non-hexadecimal value was passed to the function");
    return 0
};
    fn hex_to_decimal(hex_string: &str) -> i64 {
    let mut s: String = strip(hex_string.to_string()).clone();
    if ((s.len() as i64) == 0) {
        println!("{}", "Empty string was passed to the function");
        return 0
    }
    let mut is_negative: bool = false;
    if ({ let tmp = &s; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.as_str() == "-") {
        is_negative = true;
        s = { let tmp = &s; tmp.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>() };
    }
    let mut decimal_number: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut value: i64 = hex_digit_value(&c);
        decimal_number = ((16 * decimal_number) + value);
        i = (i + 1);
    }
    if is_negative {
        return -decimal_number
    }
    return decimal_number
};
    fn mochi_main() {
    println!("{}", hex_to_decimal(&"a").to_string());
    println!("{}", hex_to_decimal(&"12f").to_string());
    println!("{}", hex_to_decimal(&"   12f   ").to_string());
    println!("{}", hex_to_decimal(&"FfFf").to_string());
    println!("{}", hex_to_decimal(&"-Ff").to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
