// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_SI_UNITS: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("yotta"), 24), (String::from("zetta"), 21), (String::from("exa"), 18), (String::from("peta"), 15), (String::from("tera"), 12), (String::from("giga"), 9), (String::from("mega"), 6), (String::from("kilo"), 3), (String::from("hecto"), 2), (String::from("deca"), 1), (String::from("deci"), -1), (String::from("centi"), -2), (String::from("milli"), -3), (String::from("micro"), -6), (String::from("nano"), -9), (String::from("pico"), -12), (String::from("femto"), -15), (String::from("atto"), -18), (String::from("zepto"), -21), (String::from("yocto"), -24)])));
static g_BINARY_UNITS: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("yotta"), 8), (String::from("zetta"), 7), (String::from("exa"), 6), (String::from("peta"), 5), (String::from("tera"), 4), (String::from("giga"), 3), (String::from("mega"), 2), (String::from("kilo"), 1)])));
fn main() {
    unsafe {
                let _start: i64 = _now();
        unsafe fn pow(mut base: f64, mut exp: i64) -> f64 {
    if (exp == 0) {
        return 1.0
    }
    let mut e: i64 = exp;
    if (e < 0) {
        e = -e;
    }
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < e) {
        result = (result * base);
        i = (i + 1);
    }
    if (exp < 0) {
        return (1.0 / result)
    }
    return result
};
        unsafe fn convert_si_prefix(mut known_amount: f64, known_prefix: &str, unknown_prefix: &str) -> f64 {
    let mut kp: String = (known_prefix.to_lowercase()).clone();
    let mut up: String = (unknown_prefix.to_lowercase()).clone();
    if !g_SI_UNITS.lock().unwrap().contains_key(&kp) {
        panic!("{}", format!("{}{}", "unknown prefix: ", known_prefix));
    }
    if !g_SI_UNITS.lock().unwrap().contains_key(&up) {
        panic!("{}", format!("{}{}", "unknown prefix: ", unknown_prefix));
    }
    let mut diff: i64 = ({ let _map = g_SI_UNITS.lock().unwrap(); _map.get(kp.as_str()).cloned().unwrap_or_default() } - { let _map = g_SI_UNITS.lock().unwrap(); _map.get(up.as_str()).cloned().unwrap_or_default() });
    return (known_amount * pow(10.0, diff))
};
        unsafe fn convert_binary_prefix(mut known_amount: f64, known_prefix: &str, unknown_prefix: &str) -> f64 {
    let mut kp: String = (known_prefix.to_lowercase()).clone();
    let mut up: String = (unknown_prefix.to_lowercase()).clone();
    if !g_BINARY_UNITS.lock().unwrap().contains_key(&kp) {
        panic!("{}", format!("{}{}", "unknown prefix: ", known_prefix));
    }
    if !g_BINARY_UNITS.lock().unwrap().contains_key(&up) {
        panic!("{}", format!("{}{}", "unknown prefix: ", unknown_prefix));
    }
    let mut diff: i64 = (({ let _map = g_BINARY_UNITS.lock().unwrap(); _map.get(kp.as_str()).cloned().unwrap_or_default() } - { let _map = g_BINARY_UNITS.lock().unwrap(); _map.get(up.as_str()).cloned().unwrap_or_default() }) * 10);
    return (known_amount * pow(2.0, diff))
};
        println!("{}", convert_si_prefix(1.0, &"giga", &"mega").to_string());
        println!("{}", convert_si_prefix(1.0, &"mega", &"giga").to_string());
        println!("{}", convert_si_prefix(1.0, &"kilo", &"kilo").to_string());
        println!("{}", convert_binary_prefix(1.0, &"giga", &"mega").to_string());
        println!("{}", convert_binary_prefix(1.0, &"mega", &"giga").to_string());
        println!("{}", convert_binary_prefix(1.0, &"kilo", &"kilo").to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
