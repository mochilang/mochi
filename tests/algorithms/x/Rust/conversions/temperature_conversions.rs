// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
    fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 10.0);
        i = (i + 1);
    }
    return p
};
    fn round_to(mut x: f64, mut ndigits: i64) -> f64 {
    let mut m: f64 = pow10(ndigits);
    return (floor(((x * m) + 0.5)) / m)
};
    fn celsius_to_fahrenheit(mut c: f64, mut ndigits: i64) -> f64 {
    return round_to((((c * 9.0) / 5.0) + 32.0), ndigits)
};
    fn celsius_to_kelvin(mut c: f64, mut ndigits: i64) -> f64 {
    return round_to((c + 273.15), ndigits)
};
    fn celsius_to_rankine(mut c: f64, mut ndigits: i64) -> f64 {
    return round_to((((c * 9.0) / 5.0) + 491.67), ndigits)
};
    fn fahrenheit_to_celsius(mut f: f64, mut ndigits: i64) -> f64 {
    return round_to((((f - 32.0) * 5.0) / 9.0), ndigits)
};
    fn fahrenheit_to_kelvin(mut f: f64, mut ndigits: i64) -> f64 {
    return round_to(((((f - 32.0) * 5.0) / 9.0) + 273.15), ndigits)
};
    fn fahrenheit_to_rankine(mut f: f64, mut ndigits: i64) -> f64 {
    return round_to((f + 459.67), ndigits)
};
    fn kelvin_to_celsius(mut k: f64, mut ndigits: i64) -> f64 {
    return round_to((k - 273.15), ndigits)
};
    fn kelvin_to_fahrenheit(mut k: f64, mut ndigits: i64) -> f64 {
    return round_to(((((k - 273.15) * 9.0) / 5.0) + 32.0), ndigits)
};
    fn kelvin_to_rankine(mut k: f64, mut ndigits: i64) -> f64 {
    return round_to(((k * 9.0) / 5.0), ndigits)
};
    fn rankine_to_celsius(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to((((r - 491.67) * 5.0) / 9.0), ndigits)
};
    fn rankine_to_fahrenheit(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to((r - 459.67), ndigits)
};
    fn rankine_to_kelvin(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to(((r * 5.0) / 9.0), ndigits)
};
    fn reaumur_to_kelvin(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to(((r * 1.25) + 273.15), ndigits)
};
    fn reaumur_to_fahrenheit(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to(((r * 2.25) + 32.0), ndigits)
};
    fn reaumur_to_celsius(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to((r * 1.25), ndigits)
};
    fn reaumur_to_rankine(mut r: f64, mut ndigits: i64) -> f64 {
    return round_to((((r * 2.25) + 32.0) + 459.67), ndigits)
};
    println!("{}", format!("{:?}", celsius_to_fahrenheit(0.0, 2)));
    println!("{}", format!("{:?}", celsius_to_kelvin(0.0, 2)));
    println!("{}", format!("{:?}", celsius_to_rankine(0.0, 2)));
    println!("{}", format!("{:?}", fahrenheit_to_celsius(32.0, 2)));
    println!("{}", format!("{:?}", fahrenheit_to_kelvin(32.0, 2)));
    println!("{}", format!("{:?}", fahrenheit_to_rankine(32.0, 2)));
    println!("{}", format!("{:?}", kelvin_to_celsius(273.15, 2)));
    println!("{}", format!("{:?}", kelvin_to_fahrenheit(273.15, 2)));
    println!("{}", format!("{:?}", kelvin_to_rankine(273.15, 2)));
    println!("{}", format!("{:?}", rankine_to_celsius(491.67, 2)));
    println!("{}", format!("{:?}", rankine_to_fahrenheit(491.67, 2)));
    println!("{}", format!("{:?}", rankine_to_kelvin(491.67, 2)));
    println!("{}", format!("{:?}", reaumur_to_kelvin(80.0, 2)));
    println!("{}", format!("{:?}", reaumur_to_fahrenheit(80.0, 2)));
    println!("{}", format!("{:?}", reaumur_to_celsius(80.0, 2)));
    println!("{}", format!("{:?}", reaumur_to_rankine(80.0, 2)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
