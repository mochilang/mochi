// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn round_int(mut x: f64) -> i64 {
    return ((x + 0.5) as i64)
};
    fn rgb_to_cmyk(mut r_input: i64, mut g_input: i64, mut b_input: i64) -> Vec<i64> {
    if ((((((r_input < 0) || (r_input >= 256)) || (g_input < 0)) || (g_input >= 256)) || (b_input < 0)) || (b_input >= 256)) {
        panic!("Expected int of the range 0..255");
    }
    let mut r: f64 = ((r_input as f64) / 255.0);
    let mut g: f64 = ((g_input as f64) / 255.0);
    let mut b: f64 = ((b_input as f64) / 255.0);
    let mut max_val: f64 = r;
    if (g > max_val) {
        max_val = g;
    }
    if (b > max_val) {
        max_val = b;
    }
    let mut k_float: f64 = (1.0 - max_val);
    if (k_float == 1.0) {
        return vec![0, 0, 0, 100]
    }
    let mut c_float: f64 = ((100.0 * ((1.0 - r) - k_float)) / (1.0 - k_float));
    let mut m_float: f64 = ((100.0 * ((1.0 - g) - k_float)) / (1.0 - k_float));
    let mut y_float: f64 = ((100.0 * ((1.0 - b) - k_float)) / (1.0 - k_float));
    let mut k_percent: f64 = (100.0 * k_float);
    let mut c: i64 = round_int(c_float);
    let mut m: i64 = round_int(m_float);
    let mut y: i64 = round_int(y_float);
    let mut k: i64 = round_int(k_percent);
    return vec![c, m, y, k]
};
    println!("{:?}", rgb_to_cmyk(255, 255, 255));
    println!("{:?}", rgb_to_cmyk(128, 128, 128));
    println!("{:?}", rgb_to_cmyk(0, 0, 0));
    println!("{:?}", rgb_to_cmyk(255, 0, 0));
    println!("{:?}", rgb_to_cmyk(0, 255, 0));
    println!("{:?}", rgb_to_cmyk(0, 0, 255));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
