// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn strip_spaces(s: &str) -> String {
    let mut start: i64 = 0;
    let mut end = ((s.len() as i64) - 1);
    while ((start < (s.len() as i64)) && (s.chars().nth(start as usize).unwrap().to_string().as_str() == " ")) {
        start = (start + 1);
    }
    while ((end >= start) && (s.chars().nth(end as usize).unwrap().to_string().as_str() == " ")) {
        end = (end - 1);
    }
    let mut res: String = String::from("").clone();
    let mut i: i64 = start;
    while (i <= end) {
        res = format!("{}{}", res, s.chars().nth(i as usize).unwrap().to_string());
        i = (i + 1);
    }
    return res.clone()
};
    fn repeat_char(ch: &str, mut count: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < count) {
        res = format!("{}{}", res, ch);
        i = (i + 1);
    }
    return res.clone()
};
    fn slice(s: &str, mut start: i64, mut end: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = start;
    while (i < end) {
        res = format!("{}{}", res, s.chars().nth(i as usize).unwrap().to_string());
        i = (i + 1);
    }
    return res.clone()
};
    fn bits_to_int(bits: &str) -> i64 {
    let mut value: i64 = 0;
    let mut i: i64 = 0;
    while (i < (bits.len() as i64)) {
        value = (value * 2);
        if (bits.chars().nth(i as usize).unwrap().to_string().as_str() == "1") {
            value = (value + 1);
        }
        i = (i + 1);
    }
    return value
};
    fn bin_to_hexadecimal(binary_str: &str) -> String {
    let mut s: String = strip_spaces(binary_str).clone();
    if ((s.len() as i64) == 0) {
        panic!("Empty string was passed to the function");
    }
    let mut is_negative: bool = false;
    if (s.chars().nth(0 as usize).unwrap().to_string().as_str() == "-") {
        is_negative = true;
        s = s.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>();
    }
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().nth(i as usize).unwrap().to_string().clone();
        if ((c.as_str() != "0") && (c.as_str() != "1")) {
            panic!("Non-binary value was passed to the function");
        }
        i = (i + 1);
    }
    let mut groups = (((s.len() as i64) / 4) + 1);
    let mut pad_len: i64 = ((groups * 4) - (s.len() as i64));
    s = format!("{}{}", repeat_char(&"0", pad_len), s);
    let mut digits: String = String::from("0123456789abcdef").clone();
    let mut res: String = String::from("0x").clone();
    let mut j: i64 = 0;
    while (j < (s.len() as i64)) {
        let mut chunk: String = s.chars().skip(j as usize).take(((j + 4) - j) as usize).collect::<String>().clone();
        let mut val: i64 = bits_to_int(&chunk);
        res = format!("{}{}", res, digits.chars().nth(val as usize).unwrap().to_string());
        j = (j + 4);
    }
    if is_negative {
        return format!("{}{}", "-", res)
    }
    return res.clone()
};
    println!("{}", bin_to_hexadecimal(&"101011111"));
    println!("{}", bin_to_hexadecimal(&" 1010   "));
    println!("{}", bin_to_hexadecimal(&"-11101"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
