// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow10(mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    if (exp >= 0) {
        let mut i: i64 = 0;
        while (i < exp) {
            result = (result * 10.0);
            i = (i + 1);
        }
    } else {
        let mut i: i64 = 0;
        while (i < (0 - exp)) {
            result = (result / 10.0);
            i = (i + 1);
        }
    }
    return result
};
    let mut KILOGRAM_CHART: HashMap<String, f64> = HashMap::from([(String::from("kilogram"), 1.0), (String::from("gram"), 1000.0), (String::from("milligram"), 1000000.0), (String::from("metric-ton"), 0.001), (String::from("long-ton"), 0.0009842073), (String::from("short-ton"), 0.0011023122), (String::from("pound"), 2.2046244202), (String::from("stone"), 0.1574731728), (String::from("ounce"), 35.273990723), (String::from("carrat"), 5000.0), (String::from("atomic-mass-unit"), (6.022136652 * pow10(26)))]);
    let mut WEIGHT_TYPE_CHART: HashMap<String, f64> = HashMap::from([(String::from("kilogram"), 1.0), (String::from("gram"), 0.001), (String::from("milligram"), 0.000001), (String::from("metric-ton"), 1000.0), (String::from("long-ton"), 1016.04608), (String::from("short-ton"), 907.184), (String::from("pound"), 0.453592), (String::from("stone"), 6.35029), (String::from("ounce"), 0.0283495), (String::from("carrat"), 0.0002), (String::from("atomic-mass-unit"), (1.660540199 * pow10(-27)))]);
    let weight_conversion = move |from_type: &str, to_type: &str, value: f64| -> f64 {
    let mut has_to: bool = KILOGRAM_CHART.contains_key(to_type);
    let mut has_from: bool = WEIGHT_TYPE_CHART.contains_key(from_type);
    if (has_to && has_from) {
        return ((value * KILOGRAM_CHART.get(to_type).cloned().unwrap_or_default()) * WEIGHT_TYPE_CHART.get(from_type).cloned().unwrap_or_default())
    }
    println!("{}", "Invalid 'from_type' or 'to_type'");
    return 0.0
};
    println!("{}", format!("{:?}", weight_conversion(&"kilogram", &"gram", 1.0)));
    println!("{}", format!("{:?}", weight_conversion(&"gram", &"pound", 3.0)));
    println!("{}", format!("{:?}", weight_conversion(&"ounce", &"kilogram", 3.0)));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
