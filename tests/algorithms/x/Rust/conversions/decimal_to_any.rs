// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn decimal_to_any(mut num: i64, mut base: i64) -> String {
    if (num < 0) {
        panic!("parameter must be positive int");
    }
    if (base < 2) {
        panic!("base must be >= 2");
    }
    if (base > 36) {
        panic!("base must be <= 36");
    }
    if (num == 0) {
        return String::from("0")
    }
    let mut symbols: String = String::from("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut n: i64 = num;
    let mut result: String = String::from("").clone();
    while (n > 0) {
        let mut r#mod: i64 = (n % base);
        let mut digit: String = { let tmp = &symbols; tmp.chars().skip(r#mod as usize).take(((r#mod + 1) - r#mod) as usize).collect::<String>() }.clone();
        result = format!("{}{}", digit, result);
        n = (n / base);
    }
    return result.clone()
};
    fn mochi_main() {
    println!("{}", decimal_to_any(0, 2));
    println!("{}", decimal_to_any(5, 4));
    println!("{}", decimal_to_any(20, 3));
    println!("{}", decimal_to_any(58, 16));
    println!("{}", decimal_to_any(243, 17));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
