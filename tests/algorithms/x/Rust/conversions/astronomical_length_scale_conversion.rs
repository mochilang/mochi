// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_UNIT_SYMBOL: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("meter"), String::from("m")), (String::from("kilometer"), String::from("km")), (String::from("megametre"), String::from("Mm")), (String::from("gigametre"), String::from("Gm")), (String::from("terametre"), String::from("Tm")), (String::from("petametre"), String::from("Pm")), (String::from("exametre"), String::from("Em")), (String::from("zettametre"), String::from("Zm")), (String::from("yottametre"), String::from("Ym"))])));
static g_METRIC_CONVERSION: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("m"), 0), (String::from("km"), 3), (String::from("Mm"), 6), (String::from("Gm"), 9), (String::from("Tm"), 12), (String::from("Pm"), 15), (String::from("Em"), 18), (String::from("Zm"), 21), (String::from("Ym"), 24)])));
static mut g_ABBREVIATIONS: String = String::new();
fn main() {
    unsafe {
        g_ABBREVIATIONS = String::from("m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym").clone();
                let _start: i64 = _now();
        unsafe fn sanitize(unit: &str) -> String {
    let mut res: String = (unit.to_lowercase()).clone();
    if ((res.len() as i64) > 0) {
        let mut last: String = { let tmp = &res; tmp.chars().skip(((res.len() as i64) - 1) as usize).take(((res.len() as i64) - ((res.len() as i64) - 1)) as usize).collect::<String>() }.clone();
        if (last.as_str() == "s") {
            res = { let tmp = &res; tmp.chars().skip(0 as usize).take((((res.len() as i64) - 1) - 0) as usize).collect::<String>() };
        }
    }
    if g_UNIT_SYMBOL.lock().unwrap().contains_key(&res) {
        return g_UNIT_SYMBOL.lock().unwrap().get(res.as_str()).cloned().unwrap_or_default()
    }
    return res.clone()
};
        unsafe fn pow10(mut exp: i64) -> f64 {
    if (exp == 0) {
        return 1.0
    }
    let mut e: i64 = exp;
    let mut res: f64 = 1.0;
    if (e < 0) {
        e = -e;
    }
    let mut i: i64 = 0;
    while (i < e) {
        res = (res * 10.0);
        i = (i + 1);
    }
    if (exp < 0) {
        return (1.0 / res)
    }
    return res
};
        unsafe fn length_conversion(mut value: f64, from_type: &str, to_type: &str) -> f64 {
    let mut from_sanitized: String = sanitize(from_type).clone();
    let mut to_sanitized: String = sanitize(to_type).clone();
    if !g_METRIC_CONVERSION.lock().unwrap().contains_key(&from_sanitized) {
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Invalid 'from_type' value: '", from_type), "'.\nConversion abbreviations are: "), g_ABBREVIATIONS));
    }
    if !g_METRIC_CONVERSION.lock().unwrap().contains_key(&to_sanitized) {
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Invalid 'to_type' value: '", to_type), "'.\nConversion abbreviations are: "), g_ABBREVIATIONS));
    }
    let mut from_exp: i64 = g_METRIC_CONVERSION.lock().unwrap().get(from_sanitized.as_str()).cloned().unwrap_or_default();
    let mut to_exp: i64 = g_METRIC_CONVERSION.lock().unwrap().get(to_sanitized.as_str()).cloned().unwrap_or_default();
    let mut exponent: i64 = 0;
    if (from_exp > to_exp) {
        exponent = (from_exp - to_exp);
    } else {
        exponent = -(to_exp - from_exp);
    }
    return (value * pow10(exponent))
};
        println!("{}", length_conversion(1.0, &"meter", &"kilometer").to_string());
        println!("{}", length_conversion(1.0, &"meter", &"megametre").to_string());
        println!("{}", length_conversion(1.0, &"gigametre", &"meter").to_string());
        println!("{}", length_conversion(1.0, &"terametre", &"zettametre").to_string());
        println!("{}", length_conversion(1.0, &"yottametre", &"zettametre").to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
