// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_units: Vec<String> = Vec::new();
static mut g_speed_chart: Vec<f64> = Vec::new();
static mut g_speed_chart_inverse: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_units = vec![String::from("km/h").clone(), String::from("m/s").clone(), String::from("mph").clone(), String::from("knot").clone()];
        g_speed_chart = vec![1.0, 3.6, 1.609344, 1.852];
        g_speed_chart_inverse = vec![1.0, 0.277777778, 0.621371192, 0.539956803];
                let _start: i64 = _now();
        unsafe fn index_of(mut arr: Vec<String>, value: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize].clone() == value) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn units_string(mut arr: Vec<String>) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        if (i > 0) {
            s = format!("{}{}", s, ", ");
        }
        s = format!("{}{}", s, arr[i as usize].clone());
        i = (i + 1);
    }
    return s.clone()
};
        unsafe fn round3(mut x: f64) -> f64 {
    let mut y: f64 = ((x * 1000.0) + 0.5);
    let mut z: i64 = (y as i64);
    let mut zf: f64 = (z as f64);
    return (zf / 1000.0)
};
        unsafe fn convert_speed(mut speed: f64, unit_from: &str, unit_to: &str) -> f64 {
    let mut from_index: i64 = index_of(g_units.clone().clone(), unit_from);
    let mut to_index: i64 = index_of(g_units.clone().clone(), unit_to);
    if ((from_index < 0) || (to_index < 0)) {
        let mut msg: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Incorrect 'from_type' or 'to_type' value: ", unit_from), ", "), unit_to), "\nValid values are: "), units_string(g_units.clone().clone())).clone();
        panic!("{}", msg);
    }
    let mut result: f64 = ((speed * g_speed_chart.clone()[from_index as usize]) * g_speed_chart_inverse.clone()[to_index as usize]);
    let mut r: f64 = round3(result);
    return r
};
        println!("{}", convert_speed(100.0, &"km/h", &"m/s").to_string());
        println!("{}", convert_speed(100.0, &"km/h", &"mph").to_string());
        println!("{}", convert_speed(100.0, &"km/h", &"knot").to_string());
        println!("{}", convert_speed(100.0, &"m/s", &"km/h").to_string());
        println!("{}", convert_speed(100.0, &"m/s", &"mph").to_string());
        println!("{}", convert_speed(100.0, &"m/s", &"knot").to_string());
        println!("{}", convert_speed(100.0, &"mph", &"km/h").to_string());
        println!("{}", convert_speed(100.0, &"mph", &"m/s").to_string());
        println!("{}", convert_speed(100.0, &"mph", &"knot").to_string());
        println!("{}", convert_speed(100.0, &"knot", &"km/h").to_string());
        println!("{}", convert_speed(100.0, &"knot", &"m/s").to_string());
        println!("{}", convert_speed(100.0, &"knot", &"mph").to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
