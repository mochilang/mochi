// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn trim(mut s: String) -> String {
    let mut start: i64 = 0;
    while (start < (s.len() as i64)) {
        let mut ch: String = s.chars().skip(start as usize).take(((start + 1) - start) as usize).collect::<String>().clone();
        if ((((ch.as_str() != " ") && (ch.as_str() != "\n")) && (ch.as_str() != "\t")) && (ch.as_str() != "\r")) {
            break
        }
        start = (start + 1);
    }
    let mut end = (s.len() as i64);
    while (end > start) {
        let mut ch: String = s.chars().skip((end - 1) as usize).take((end - (end - 1)) as usize).collect::<String>().clone();
        if ((((ch.as_str() != " ") && (ch.as_str() != "\n")) && (ch.as_str() != "\t")) && (ch.as_str() != "\r")) {
            break
        }
        end = (end - 1);
    }
    return { let tmp = &s; tmp.chars().skip(start as usize).take((end - start) as usize).collect::<String>() }.clone()
};
    fn bin_to_decimal(bin_string: &str) -> i64 {
    let mut trimmed: String = trim(bin_string.to_string()).clone();
    if (trimmed.as_str() == "") {
        panic!("Empty string was passed to the function");
    }
    let mut is_negative: bool = false;
    let mut s: String = trimmed.clone();
    if (s.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>().as_str() == "-") {
        is_negative = true;
        s = { let tmp = &s; tmp.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>() };
    }
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        if ((c.as_str() != "0") && (c.as_str() != "1")) {
            panic!("Non-binary value was passed to the function");
        }
        i = (i + 1);
    }
    let mut decimal_number: i64 = 0;
    i = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = s.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>().clone();
        let mut digit = { let n: i64 = c.parse().unwrap(); n };
        decimal_number = ((2 * decimal_number) + digit);
        i = (i + 1);
    }
    if is_negative {
        return -decimal_number
    }
    return decimal_number
};
    println!("{}", bin_to_decimal(&"101").to_string());
    println!("{}", bin_to_decimal(&" 1010   ").to_string());
    println!("{}", bin_to_decimal(&"-11101").to_string());
    println!("{}", bin_to_decimal(&"0").to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
