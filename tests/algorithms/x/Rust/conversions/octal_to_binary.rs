// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn octal_to_binary(octal_number: &str) -> String {
    if ((octal_number.len() as i64) == 0) {
        panic!("Empty string was passed to the function");
    }
    let mut octal_digits: String = String::from("01234567").clone();
    let mut binary_number: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (octal_number.len() as i64)) {
        let mut digit: String = octal_number.chars().nth(i as usize).unwrap().to_string().clone();
        let mut valid: bool = false;
        let mut j: i64 = 0;
        while (j < (octal_digits.len() as i64)) {
            if (digit.as_str() == octal_digits.chars().nth(j as usize).unwrap().to_string().as_str()) {
                valid = true;
                break
            }
            j = (j + 1);
        }
        if !valid {
            panic!("Non-octal value was passed to the function");
        }
        let mut value = { let n: i64 = digit.parse().unwrap(); n };
        let mut k: i64 = 0;
        let mut binary_digit: String = String::from("").clone();
        while (k < 3) {
            binary_digit = format!("{}{}", (value % 2).to_string(), binary_digit).to_string();
            value = (value / 2);
            k = (k + 1);
        }
        binary_number = format!("{}{}", binary_number, binary_digit);
        i = (i + 1);
    }
    return binary_number.clone()
};
    println!("{}", octal_to_binary(&"17"));
    println!("{}", octal_to_binary(&"7"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
