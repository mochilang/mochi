// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn _keys<K: std::cmp::Eq + std::hash::Hash + Clone, V>(m: HashMap<K, V>) -> Vec<K> {
    m.keys().cloned().collect()
}
#[derive(Debug, Clone, Default)]
struct FromTo {
    from_factor: f64,
    to_factor: f64,
}
impl std::fmt::Display for FromTo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"from_factor\": {}", self.from_factor)?;
        write!(f, ", ")?;
        write!(f, "\"to_factor\": {}", self.to_factor)?;
        write!(f, "}}")
    }
}

static g_PRESSURE_CONVERSION: LazyLock<Mutex<HashMap<String, FromTo>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("atm"), FromTo {from_factor: 1.0, to_factor: 1.0}), (String::from("pascal"), FromTo {from_factor: 0.0000098, to_factor: 101325.0}), (String::from("bar"), FromTo {from_factor: 0.986923, to_factor: 1.01325}), (String::from("kilopascal"), FromTo {from_factor: 0.00986923, to_factor: 101.325}), (String::from("megapascal"), FromTo {from_factor: 9.86923, to_factor: 0.101325}), (String::from("psi"), FromTo {from_factor: 0.068046, to_factor: 14.6959}), (String::from("inHg"), FromTo {from_factor: 0.0334211, to_factor: 29.9213}), (String::from("torr"), FromTo {from_factor: 0.00131579, to_factor: 760.0})])));
fn main() {
    unsafe {
                let _start: i64 = _now();
        unsafe fn pressure_conversion(mut value: f64, from_type: &str, to_type: &str) -> f64 {
    if !g_PRESSURE_CONVERSION.lock().unwrap().contains_key(from_type) {
        let mut keys: String = _keys(g_PRESSURE_CONVERSION.lock().unwrap().clone().clone()).join(", ").clone();
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Invalid 'from_type' value: '", from_type), "'  Supported values are:\n"), keys));
    }
    if !g_PRESSURE_CONVERSION.lock().unwrap().contains_key(to_type) {
        let mut keys: String = _keys(g_PRESSURE_CONVERSION.lock().unwrap().clone().clone()).join(", ").clone();
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Invalid 'to_type' value: '", to_type), ".  Supported values are:\n"), keys));
    }
    let mut from: FromTo = { let _map = g_PRESSURE_CONVERSION.lock().unwrap(); _map.get(from_type).cloned().unwrap_or_default() };
    let mut to: FromTo = { let _map = g_PRESSURE_CONVERSION.lock().unwrap(); _map.get(to_type).cloned().unwrap_or_default() };
    return ((value * from.from_factor) * to.to_factor)
};
        println!("{}", format!("{:?}", pressure_conversion(4.0, &"atm", &"pascal")));
        println!("{}", format!("{:?}", pressure_conversion(1.0, &"pascal", &"psi")));
        println!("{}", format!("{:?}", pressure_conversion(1.0, &"bar", &"atm")));
        println!("{}", format!("{:?}", pressure_conversion(3.0, &"kilopascal", &"bar")));
        println!("{}", format!("{:?}", pressure_conversion(2.0, &"megapascal", &"psi")));
        println!("{}", format!("{:?}", pressure_conversion(4.0, &"psi", &"torr")));
        println!("{}", format!("{:?}", pressure_conversion(1.0, &"inHg", &"atm")));
        println!("{}", format!("{:?}", pressure_conversion(1.0, &"torr", &"psi")));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
