// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_units: Vec<String> = Vec::new();
static mut g_from_factors: Vec<f64> = Vec::new();
static mut g_to_factors: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_units = vec![String::from("cubic meter").clone(), String::from("litre").clone(), String::from("kilolitre").clone(), String::from("gallon").clone(), String::from("cubic yard").clone(), String::from("cubic foot").clone(), String::from("cup").clone()];
        g_from_factors = vec![1.0, 0.001, 1.0, 0.00454, 0.76455, 0.028, 0.000236588];
        g_to_factors = vec![1.0, 1000.0, 1.0, 264.172, 1.30795, 35.3147, 4226.75];
                let _start: i64 = _now();
        unsafe fn supported_values() -> String {
    let mut result: String = g_units.clone()[0 as usize].clone().clone();
    let mut i: i64 = 1;
    while (i < (g_units.clone().len() as i64)) {
        result = format!("{}{}", format!("{}{}", result, ", "), g_units.clone()[i as usize].clone());
        i = (i + 1);
    }
    return result.clone()
};
        unsafe fn find_index(name: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (g_units.clone().len() as i64)) {
        if (g_units.clone()[i as usize].clone() == name) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn get_from_factor(name: &str) -> f64 {
    let mut idx: i64 = find_index(name);
    if (idx < 0) {
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Invalid 'from_type' value: '", name), "' Supported values are: "), supported_values()));
    }
    return g_from_factors.clone()[idx as usize]
};
        unsafe fn get_to_factor(name: &str) -> f64 {
    let mut idx: i64 = find_index(name);
    if (idx < 0) {
        panic!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Invalid 'to_type' value: '", name), "' Supported values are: "), supported_values()));
    }
    return g_to_factors.clone()[idx as usize]
};
        unsafe fn volume_conversion(mut value: f64, from_type: &str, to_type: &str) -> f64 {
    let mut from_factor: f64 = get_from_factor(from_type);
    let mut to_factor: f64 = get_to_factor(to_type);
    return ((value * from_factor) * to_factor)
};
        println!("{}", volume_conversion(4.0, &"cubic meter", &"litre").to_string());
        println!("{}", volume_conversion(1.0, &"litre", &"gallon").to_string());
        println!("{}", volume_conversion(1.0, &"kilolitre", &"cubic meter").to_string());
        println!("{}", volume_conversion(3.0, &"gallon", &"cubic yard").to_string());
        println!("{}", volume_conversion(2.0, &"cubic yard", &"litre").to_string());
        println!("{}", volume_conversion(4.0, &"cubic foot", &"cup").to_string());
        println!("{}", volume_conversion(1.0, &"cup", &"kilolitre").to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
