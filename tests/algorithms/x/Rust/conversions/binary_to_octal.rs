// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bin_to_octal(bin_string: &str) -> String {
    let mut i: i64 = 0;
    while (i < (bin_string.len() as i64)) {
        let mut c: String = bin_string.chars().nth(i as usize).unwrap().to_string().clone();
        if !((c.as_str() == "0") || (c.as_str() == "1")) {
            panic!("Non-binary value was passed to the function");
        }
        i = (i + 1);
    }
    if ((bin_string.len() as i64) == 0) {
        panic!("Empty string was passed to the function");
    }
    let mut padded: String = bin_string.to_string().clone();
    while (((padded.len() as i64) % 3) != 0) {
        padded = format!("{}{}", "0", padded);
    }
    let mut oct_string: String = String::from("").clone();
    let mut index: i64 = 0;
    while (index < (padded.len() as i64)) {
        let mut group: String = padded.chars().skip(index as usize).take(((index + 3) - index) as usize).collect::<String>().clone();
        let mut b0: i64 = if (group.chars().nth(0 as usize).unwrap().to_string().as_str() == "1") { 1 } else { 0 };
        let mut b1: i64 = if (group.chars().nth(1 as usize).unwrap().to_string().as_str() == "1") { 1 } else { 0 };
        let mut b2: i64 = if (group.chars().nth(2 as usize).unwrap().to_string().as_str() == "1") { 1 } else { 0 };
        let mut oct_val: i64 = (((b0 * 4) + (b1 * 2)) + b2);
        oct_string = format!("{}{}", oct_string, oct_val.to_string());
        index = (index + 3);
    }
    return oct_string.clone()
};
    println!("{}", bin_to_octal(&"1111"));
    println!("{}", bin_to_octal(&"101010101010011"));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
