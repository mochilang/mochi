// Generated by Mochi transpiler v0.10.59
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_ENERGY_CONVERSION: LazyLock<Mutex<HashMap<String, f64>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("joule"), 1.0), (String::from("kilojoule"), 1000.0), (String::from("megajoule"), 1000000.0), (String::from("gigajoule"), 1000000000.0), (String::from("wattsecond"), 1.0), (String::from("watthour"), 3600.0), (String::from("kilowatthour"), 3600000.0), (String::from("newtonmeter"), 1.0), (String::from("calorie_nutr"), 4186.8), (String::from("kilocalorie_nutr"), 4186800.0), (String::from("electronvolt"), 0.0000000000000000001602176634), (String::from("britishthermalunit_it"), 1055.05585), (String::from("footpound"), 1.355818)])));
fn main() {
    unsafe {
                let _start: i64 = _now();
        unsafe fn energy_conversion(from_type: &str, to_type: &str, mut value: f64) -> f64 {
    if ((g_ENERGY_CONVERSION.lock().unwrap().contains_key(from_type) == false) || (g_ENERGY_CONVERSION.lock().unwrap().contains_key(to_type) == false)) {
        panic!("Incorrect 'from_type' or 'to_type'");
    }
    return ((value * g_ENERGY_CONVERSION.lock().unwrap().get(from_type).cloned().unwrap_or_default()) / g_ENERGY_CONVERSION.lock().unwrap().get(to_type).cloned().unwrap_or_default())
};
        println!("{}", energy_conversion(&"joule", &"kilojoule", 1.0).to_string());
        println!("{}", energy_conversion(&"kilowatthour", &"joule", 10.0).to_string());
        println!("{}", energy_conversion(&"britishthermalunit_it", &"footpound", 1.0).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
