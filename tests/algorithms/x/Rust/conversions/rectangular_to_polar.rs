// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
                let _start: i64 = _now();
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = (x / 2.0);
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn atanApprox(mut x: f64) -> f64 {
    if (x > 1.0) {
        return ((g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    if (x < -1.0) {
        return ((-g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    return (x / (1.0 + ((0.28 * x) * x)))
};
        unsafe fn atan2Approx(mut y: f64, mut x: f64) -> f64 {
    if (x > 0.0) {
        let mut r: f64 = atanApprox((y / x));
        return r
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return (atanApprox((y / x)) + g_PI)
        }
        return (atanApprox((y / x)) - g_PI)
    }
    if (y > 0.0) {
        return (g_PI / 2.0)
    }
    if (y < 0.0) {
        return (-g_PI / 2.0)
    }
    return 0.0
};
        unsafe fn deg(mut rad: f64) -> f64 {
    return ((rad * 180.0) / g_PI)
};
        unsafe fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        unsafe fn pow10(mut n: i64) -> f64 {
    let mut p: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 10.0);
        i = (i + 1);
    }
    return p
};
        unsafe fn round(mut x: f64, mut n: i64) -> f64 {
    let mut m: f64 = pow10(n);
    return (floor(((x * m) + 0.5)) / m)
};
        unsafe fn rectangular_to_polar(mut real: f64, mut img: f64) -> Vec<f64> {
    let mut r#mod: f64 = round(sqrtApprox(((real * real) + (img * img))), 2);
    let mut ang: f64 = round(deg(atan2Approx(img, real)), 2);
    return vec![r#mod, ang]
};
        unsafe fn show(mut real: f64, mut img: f64) {
    let mut r: Vec<f64> = rectangular_to_polar(real, img);
    println!("{}", format!("{:?}", r));
};
        show(5.0, -5.0);
        show(-1.0, 1.0);
        show(-1.0, -1.0);
        show(0.0000000001, 0.0000000001);
        show(-0.0000000001, 0.0000000001);
        show(9.75, 5.93);
        show(10000.0, 99999.0);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
