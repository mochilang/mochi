// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn indexOf(mut s: String, sub: &str) -> i64 {
    let mut n = (s.len() as i64);
    let mut m = (sub.len() as i64);
    let mut i: i64 = 0;
    while (i <= (n - m)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + m) - i) as usize).collect::<String>() } == sub) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn contains(mut s: String, mut sub: String) -> bool {
    return ({ let s = s.clone(); let p = sub.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } } >= 0)
};
    fn validate(mut files: Vec<String>) -> i64 {
    let mut upper: Vec<String> = vec![];
    let mut space: Vec<String> = vec![];
    let mut hyphen: Vec<String> = vec![];
    let mut nodir: Vec<String> = vec![];
    for f in files.iter().cloned() {
        if (f.as_str() != (f.to_lowercase()).as_str()) {
            upper = { let mut _v = upper.clone(); _v.push(f.clone()); _v };
        }
        if contains(f.clone(), String::from(" ")) {
            space = { let mut _v = space.clone(); _v.push(f.clone()); _v };
        }
        if (contains(f.clone(), String::from("-")) && (contains(f.clone(), String::from("/site-packages/")) == false)) {
            hyphen = { let mut _v = hyphen.clone(); _v.push(f.clone()); _v };
        }
        if !contains(f.clone(), String::from("/")) {
            nodir = { let mut _v = nodir.clone(); _v.push(f.clone()); _v };
        }
    }
    if ((upper.len() as i64) > 0) {
        println!("{}", format!("{}{}", (upper.len() as i64).to_string(), " files contain uppercase characters:"));
        for f in upper.iter().cloned() {
            println!("{}", f);
        }
        println!("{}", "");
    }
    if ((space.len() as i64) > 0) {
        println!("{}", format!("{}{}", (space.len() as i64).to_string(), " files contain space characters:"));
        for f in space.iter().cloned() {
            println!("{}", f);
        }
        println!("{}", "");
    }
    if ((hyphen.len() as i64) > 0) {
        println!("{}", format!("{}{}", (hyphen.len() as i64).to_string(), " files contain hyphen characters:"));
        for f in hyphen.iter().cloned() {
            println!("{}", f);
        }
        println!("{}", "");
    }
    if ((nodir.len() as i64) > 0) {
        println!("{}", format!("{}{}", (nodir.len() as i64).to_string(), " files are not in a directory:"));
        for f in nodir.iter().cloned() {
            println!("{}", f);
        }
        println!("{}", "");
    }
    return ((((upper.len() as i64) + (space.len() as i64)) + (hyphen.len() as i64)) + (nodir.len() as i64))
};
    fn mochi_main() {
    let mut files: Vec<String> = vec![String::from("scripts/Validate_filenames.py").clone().clone(), String::from("good/file.txt").clone().clone(), String::from("bad file.txt").clone().clone(), String::from("/site-packages/pkg-name.py").clone().clone(), String::from("nopath").clone().clone(), String::from("src/hyphen-name.py").clone().clone()];
    let mut bad: i64 = validate(files.clone());
    println!("{}", bad.to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
