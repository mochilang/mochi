// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn max_tasks(mut tasks_info: Vec<Vec<i64>>) -> Vec<i64> {
    let mut order: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (tasks_info.len() as i64)) {
        order = { let mut _v = order.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    let mut n = (order.len() as i64);
    i = 0;
    while (i < n) {
        let mut j: i64 = (i + 1);
        while (j < n) {
            if (tasks_info[order[j as usize] as usize].clone()[1 as usize] > tasks_info[order[i as usize] as usize].clone()[1 as usize]) {
                let mut tmp: i64 = order[i as usize];
                order[i as usize] = order[j as usize];
                order[j as usize] = tmp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut result: Vec<i64> = vec![];
    let mut pos: i64 = 1;
    i = 0;
    while (i < n) {
        let mut id: i64 = order[i as usize];
        let mut deadline: i64 = tasks_info[id as usize].clone()[0 as usize];
        if (deadline >= pos) {
            result = { let mut _v = result.clone(); _v.push(id); _v };
        }
        i = (i + 1);
        pos = (pos + 1);
    }
    return result
};
    fn mochi_main() {
    let mut ex1: Vec<Vec<i64>> = vec![vec![4, 20].clone(), vec![1, 10].clone(), vec![1, 40].clone(), vec![1, 30].clone()];
    let mut ex2: Vec<Vec<i64>> = vec![vec![1, 10].clone(), vec![2, 20].clone(), vec![3, 30].clone(), vec![2, 40].clone()];
    println!("{}", format!("{:?}", max_tasks(ex1.clone())));
    println!("{}", format!("{:?}", max_tasks(ex2.clone())));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
