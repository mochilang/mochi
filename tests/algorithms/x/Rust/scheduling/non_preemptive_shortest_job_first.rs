// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_no_of_processes: i64 = 0;
static mut g_burst_time: Vec<i64> = Vec::new();
static mut g_arrival_time: Vec<i64> = Vec::new();
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_no_of_processes = 4;
        g_burst_time = vec![2, 5, 3, 7];
        g_arrival_time = vec![0, 0, 0, 0];
        g_i = 0;
                let _start: i64 = _now();
        unsafe fn calculate_waitingtime(mut arrival_time: Vec<i64>, mut burst_time: Vec<i64>, mut no_of_processes: i64) -> Vec<i64> {
    let mut waiting_time: Vec<i64> = Default::default();
    let mut remaining_time: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i < no_of_processes) {
        waiting_time = { let mut _v = waiting_time.clone(); _v.push(0); _v };
        remaining_time = { let mut _v = remaining_time.clone(); _v.push(burst_time[i as usize]); _v };
        i = (i + 1);
    }
    let mut completed: i64 = 0;
    let mut total_time: i64 = 0;
    while (completed != no_of_processes) {
        let mut ready_process: Vec<i64> = vec![];
        let mut target_process: i64 = -1;
        let mut j: i64 = 0;
        while (j < no_of_processes) {
            if ((arrival_time[j as usize] <= total_time) && (remaining_time[j as usize] > 0)) {
                ready_process = { let mut _v = ready_process.clone(); _v.push(j); _v };
            }
            j = (j + 1);
        }
        if ((ready_process.len() as i64) > 0) {
            target_process = ready_process[0 as usize];
            let mut k: i64 = 0;
            while (k < (ready_process.len() as i64)) {
                let mut idx: i64 = ready_process[k as usize];
                if (remaining_time[idx as usize] < remaining_time[target_process as usize]) {
                    target_process = idx;
                }
                k = (k + 1);
            }
            total_time = (total_time + burst_time[target_process as usize]);
            completed = (completed + 1);
            remaining_time[target_process as usize] = 0;
            waiting_time[target_process as usize] = ((total_time - arrival_time[target_process as usize]) - burst_time[target_process as usize]);
        } else {
            total_time = (total_time + 1);
        }
    }
    return waiting_time
};
        unsafe fn calculate_turnaroundtime(mut burst_time: Vec<i64>, mut no_of_processes: i64, mut waiting_time: Vec<i64>) -> Vec<i64> {
    let mut turn_around_time: Vec<i64> = Default::default();
    let mut i: i64 = 0;
    while (i < no_of_processes) {
        turn_around_time = { let mut _v = turn_around_time.clone(); _v.push((burst_time[i as usize] + waiting_time[i as usize])); _v };
        i = (i + 1);
    }
    return turn_around_time
};
        unsafe fn average(mut values: Vec<i64>) -> f64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        total = (total + values[i as usize]);
        i = (i + 1);
    }
    return ((total as f64) / ((values.len() as i64) as f64))
};
        println!("{}", "[TEST CASE 01]");
        let mut waiting_time: Vec<i64> = calculate_waitingtime(g_arrival_time.clone(), g_burst_time.clone(), g_no_of_processes);
        let mut turn_around_time: Vec<i64> = calculate_turnaroundtime(g_burst_time.clone(), g_no_of_processes, waiting_time.clone());
        println!("{}", "PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time");
        while (g_i < g_no_of_processes) {
            let mut pid: i64 = (g_i + 1);
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pid.to_string(), "\t"), g_burst_time[g_i as usize].to_string()), "\t\t\t"), g_arrival_time[g_i as usize].to_string()), "\t\t\t\t"), waiting_time[g_i as usize].to_string()), "\t\t\t\t"), turn_around_time[g_i as usize].to_string()));
            g_i = (g_i + 1);
        }
        let mut avg_wait: f64 = average(waiting_time.clone());
        let mut avg_turn: f64 = average(turn_around_time.clone());
        println!("{}", format!("{}{}", "\nAverage waiting time = ", avg_wait.to_string()));
        println!("{}", format!("{}{}", "Average turnaround time = ", avg_turn.to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
