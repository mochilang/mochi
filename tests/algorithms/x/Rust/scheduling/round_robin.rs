// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn calculate_waiting_times(mut burst_times: Vec<i64>) -> Vec<i64> {
    let mut quantum: i64 = 2;
    let mut rem: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (burst_times.len() as i64)) {
        rem = { let mut _v = rem.clone(); _v.push(burst_times[i as usize]); _v };
        i = (i + 1);
    }
    let mut waiting: Vec<i64> = vec![];
    i = 0;
    while (i < (burst_times.len() as i64)) {
        waiting = { let mut _v = waiting.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut t: i64 = 0;
    loop {
        let mut done: bool = true;
        let mut j: i64 = 0;
        while (j < (burst_times.len() as i64)) {
            if (rem[j as usize] > 0) {
                done = false;
                if (rem[j as usize] > quantum) {
                    t = (t + quantum);
                    rem[j as usize] = (rem[j as usize] - quantum);
                } else {
                    t = (t + rem[j as usize]);
                    waiting[j as usize] = (t - burst_times[j as usize]);
                    rem[j as usize] = 0;
                }
            }
            j = (j + 1);
        }
        if done {
            return waiting
        }
    }
    return waiting
};
    fn calculate_turn_around_times(mut burst_times: Vec<i64>, mut waiting_times: Vec<i64>) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (burst_times.len() as i64)) {
        result = { let mut _v = result.clone(); _v.push((burst_times[i as usize] + waiting_times[i as usize])); _v };
        i = (i + 1);
    }
    return result
};
    fn mean(mut values: Vec<i64>) -> f64 {
    let mut total: i64 = 0;
    let mut i: i64 = 0;
    while (i < (values.len() as i64)) {
        total = (total + values[i as usize]);
        i = (i + 1);
    }
    return ((total as f64) / ((values.len() as i64) as f64))
};
    fn format_float_5(mut x: f64) -> String {
    let mut scaled: i64 = (((x * 100000.0) + 0.5) as i64);
    let mut int_part: i64 = (scaled / 100000);
    let mut frac_part: i64 = (scaled % 100000);
    let mut frac_str = frac_part.to_string();
    while ((frac_str.len() as i64) < 5) {
        frac_str = format!("{}{}", "0", frac_str);
    }
    return format!("{}{}", format!("{}{}", int_part.to_string(), "."), frac_str).to_string().clone()
};
    fn mochi_main() {
    let mut burst_times: Vec<i64> = vec![3, 5, 7];
    let mut waiting_times: Vec<i64> = calculate_waiting_times(burst_times.clone());
    let mut turn_around_times: Vec<i64> = calculate_turn_around_times(burst_times.clone(), waiting_times.clone());
    println!("{}", "Process ID \tBurst Time \tWaiting Time \tTurnaround Time");
    let mut i: i64 = 0;
    while (i < (burst_times.len() as i64)) {
        let mut line: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "  ", (i + 1).to_string()), "\t\t  "), burst_times[i as usize].to_string()), "\t\t  "), waiting_times[i as usize].to_string()), "\t\t  "), turn_around_times[i as usize].to_string()).clone();
        println!("{}", line);
        i = (i + 1);
    }
    println!("{}", "");
    println!("{}", format!("{}{}", "Average waiting time = ", format_float_5(mean(waiting_times.clone()))));
    println!("{}", format!("{}{}", "Average turn around time = ", format_float_5(mean(turn_around_times.clone()))));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
