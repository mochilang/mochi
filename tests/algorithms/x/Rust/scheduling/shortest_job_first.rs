// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn calculate_waitingtime(mut arrival_time: Vec<i64>, mut burst_time: Vec<i64>, mut no_of_processes: i64) -> Vec<i64> {
    let mut remaining_time: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < no_of_processes) {
        remaining_time = { let mut _v = remaining_time.clone(); _v.push(burst_time[i as usize]); _v };
        i = (i + 1);
    }
    let mut waiting_time: Vec<i64> = vec![];
    i = 0;
    while (i < no_of_processes) {
        waiting_time = { let mut _v = waiting_time.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut complete: i64 = 0;
    let mut increment_time: i64 = 0;
    let mut minm: i64 = 1000000000;
    let mut short: i64 = 0;
    let mut check: bool = false;
    while (complete != no_of_processes) {
        let mut j: i64 = 0;
        while (j < no_of_processes) {
            if (((arrival_time[j as usize] <= increment_time) && (remaining_time[j as usize] > 0)) && (remaining_time[j as usize] < minm)) {
                minm = remaining_time[j as usize];
                short = j;
                check = true;
            }
            j = (j + 1);
        }
        if !check {
            increment_time = (increment_time + 1);
            continue
        }
        remaining_time[short as usize] = (remaining_time[short as usize] - 1);
        minm = remaining_time[short as usize];
        if (minm == 0) {
            minm = 1000000000;
        }
        if (remaining_time[short as usize] == 0) {
            complete = (complete + 1);
            check = false;
            let mut finish_time: i64 = (increment_time + 1);
            let mut finar: i64 = (finish_time - arrival_time[short as usize]);
            waiting_time[short as usize] = (finar - burst_time[short as usize]);
            if (waiting_time[short as usize] < 0) {
                waiting_time[short as usize] = 0;
            }
        }
        increment_time = (increment_time + 1);
    }
    return waiting_time
};
    fn calculate_turnaroundtime(mut burst_time: Vec<i64>, mut no_of_processes: i64, mut waiting_time: Vec<i64>) -> Vec<i64> {
    let mut turn_around_time: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < no_of_processes) {
        turn_around_time = { let mut _v = turn_around_time.clone(); _v.push((burst_time[i as usize] + waiting_time[i as usize])); _v };
        i = (i + 1);
    }
    return turn_around_time
};
    fn to_float(mut x: i64) -> f64 {
    return ((x as f64) * 1.0)
};
    fn calculate_average_times(mut waiting_time: Vec<i64>, mut turn_around_time: Vec<i64>, mut no_of_processes: i64) {
    let mut total_waiting_time: i64 = 0;
    let mut total_turn_around_time: i64 = 0;
    let mut i: i64 = 0;
    while (i < no_of_processes) {
        total_waiting_time = (total_waiting_time + waiting_time[i as usize]);
        total_turn_around_time = (total_turn_around_time + turn_around_time[i as usize]);
        i = (i + 1);
    }
    let mut avg_wait: f64 = (to_float(total_waiting_time) / to_float(no_of_processes));
    let mut avg_turn: f64 = (to_float(total_turn_around_time) / to_float(no_of_processes));
    println!("{}", format!("{}{}", "Average waiting time = ", avg_wait.to_string()));
    println!("{}", format!("{}{}", "Average turn around time = ", avg_turn.to_string()));
};
    println!("{:?}", calculate_waitingtime(vec![1, 2, 3, 4], vec![3, 3, 5, 1], 4));
    println!("{:?}", calculate_waitingtime(vec![1, 2, 3], vec![2, 5, 1], 3));
    println!("{:?}", calculate_waitingtime(vec![2, 3], vec![5, 1], 2));
    println!("{:?}", calculate_turnaroundtime(vec![3, 3, 5, 1], 4, vec![0, 3, 5, 0]));
    println!("{:?}", calculate_turnaroundtime(vec![3, 3], 2, vec![0, 3]));
    println!("{:?}", calculate_turnaroundtime(vec![8, 10, 1], 3, vec![1, 0, 3]));
    calculate_average_times(vec![0, 3, 5, 0], vec![3, 6, 10, 1], 4);
    calculate_average_times(vec![2, 3], vec![3, 6], 2);
    calculate_average_times(vec![10, 4, 3], vec![2, 7, 6], 3);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
