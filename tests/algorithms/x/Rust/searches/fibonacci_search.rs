// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_example1: Vec<i64> = Vec::new();
static mut g_example2: Vec<i64> = Vec::new();
static mut g_example3: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_example1 = vec![4, 5, 6, 7];
        g_example2 = vec![-18, 2];
        g_example3 = vec![0, 5, 10, 15, 20, 25, 30];
                let _start: i64 = _now();
        unsafe fn fibonacci(mut k: i64) -> i64 {
    if (k < 0) {
        panic!("k must be >= 0");
    }
    let mut a: i64 = 0;
    let mut b: i64 = 1;
    let mut i: i64 = 0;
    while (i < k) {
        let mut tmp: i64 = (a + b);
        a = b;
        b = tmp;
        i = (i + 1);
    }
    return a
};
        unsafe fn min_int(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    } else {
        return b
    }
};
        unsafe fn fibonacci_search(mut arr: Vec<i64>, mut val: i64) -> i64 {
    let mut n = (arr.len() as i64);
    let mut m: i64 = 0;
    while (fibonacci(m) < n) {
        m = (m + 1);
    }
    let mut offset: i64 = 0;
    while (m > 0) {
        let mut i: i64 = min_int((offset + fibonacci((m - 1))), (n - 1));
        let mut item: i64 = arr[i as usize];
        if (item == val) {
            return i
        } else if (val < item) {
            m = (m - 1);
        } else {
            offset = (offset + fibonacci((m - 1)));
            m = (m - 2);
        }
    }
    return -1
};
        println!("{}", fibonacci_search(g_example1.clone(), 4).to_string());
        println!("{}", fibonacci_search(g_example1.clone(), -10).to_string());
        println!("{}", fibonacci_search(g_example2.clone(), -18).to_string());
        println!("{}", fibonacci_search(g_example3.clone(), 15).to_string());
        println!("{}", fibonacci_search(g_example3.clone(), 17).to_string());
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
