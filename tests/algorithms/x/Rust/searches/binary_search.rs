// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn is_sorted(mut arr: Vec<i64>) -> bool {
    let mut i: i64 = 1;
    while (i < (arr.len() as i64)) {
        if (arr[(i - 1) as usize] > arr[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn binary_search(mut sorted_collection: Vec<i64>, mut item: i64) -> i64 {
    if !is_sorted(sorted_collection.clone()) {
        return -1
    }
    let mut left: i64 = 0;
    let mut right: i64 = ((sorted_collection.len() as i64) - 1);
    while (left <= right) {
        let mut midpoint: i64 = (left + ((right - left) / 2));
        let mut current_item: i64 = sorted_collection[midpoint as usize];
        if (current_item == item) {
            return midpoint
        }
        if (item < current_item) {
            right = (midpoint - 1);
        } else {
            left = (midpoint + 1);
        }
    }
    return -1
};
    fn binary_search_by_recursion(mut sorted_collection: Vec<i64>, mut item: i64, mut left: i64, mut right: i64) -> i64 {
    if (right < left) {
        return -1
    }
    let mut midpoint: i64 = (left + ((right - left) / 2));
    if (sorted_collection[midpoint as usize] == item) {
        return midpoint
    }
    if (sorted_collection[midpoint as usize] > item) {
        return binary_search_by_recursion(sorted_collection.clone(), item, left, (midpoint - 1))
    }
    return binary_search_by_recursion(sorted_collection.clone(), item, (midpoint + 1), right)
};
    fn exponential_search(mut sorted_collection: Vec<i64>, mut item: i64) -> i64 {
    if !is_sorted(sorted_collection.clone()) {
        return -1
    }
    if ((sorted_collection.len() as i64) == 0) {
        return -1
    }
    let mut bound: i64 = 1;
    while ((bound < (sorted_collection.len() as i64)) && (sorted_collection[bound as usize] < item)) {
        bound = (bound * 2);
    }
    let mut left: i64 = (bound / 2);
    let mut right: i64 = { let tmp = vec![bound, ((sorted_collection.len() as i64) - 1).clone()].clone(); *tmp.iter().min().unwrap_or(&0) };
    return binary_search_by_recursion(sorted_collection.clone(), item, left, right)
};
    fn mochi_main() {
    let mut data: Vec<i64> = vec![0, 5, 7, 10, 15];
    println!("{}", binary_search(data.clone(), 0).to_string());
    println!("{}", binary_search(data.clone(), 15).to_string());
    println!("{}", binary_search(data.clone(), 5).to_string());
    println!("{}", binary_search(data.clone(), 6).to_string());
    println!("{}", binary_search_by_recursion(data.clone(), 0, 0, ((data.len() as i64) - 1)).to_string());
    println!("{}", binary_search_by_recursion(data.clone(), 15, 0, ((data.len() as i64) - 1)).to_string());
    println!("{}", binary_search_by_recursion(data.clone(), 5, 0, ((data.len() as i64) - 1)).to_string());
    println!("{}", binary_search_by_recursion(data.clone(), 6, 0, ((data.len() as i64) - 1)).to_string());
    println!("{}", exponential_search(data.clone(), 0).to_string());
    println!("{}", exponential_search(data.clone(), 15).to_string());
    println!("{}", exponential_search(data.clone(), 5).to_string());
    println!("{}", exponential_search(data.clone(), 6).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
