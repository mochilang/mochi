// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
#[derive(Debug, Clone, Default)]
struct SearchProblem {
    x: f64,
    y: f64,
    step: f64,
    f: i64,
}
impl std::fmt::Display for SearchProblem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"step\": {}", self.step)?;
        write!(f, ", ")?;
        write!(f, "\"f\": {}", self.f)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn score(sp: &SearchProblem) -> f64 {
    return SearchProblem_f(sp, sp.x, sp.y)
};
    fn neighbors(sp: &SearchProblem) -> Vec<SearchProblem> {
    let mut s: f64 = sp.step;
    return vec![SearchProblem {x: (sp.x - s), y: (sp.y - s), step: s, f: sp.f.clone()}.clone(), SearchProblem {x: (sp.x - s), y: sp.y, step: s, f: sp.f.clone()}.clone(), SearchProblem {x: (sp.x - s), y: (sp.y + s), step: s, f: sp.f.clone()}.clone(), SearchProblem {x: sp.x, y: (sp.y - s), step: s, f: sp.f.clone()}.clone(), SearchProblem {x: sp.x, y: (sp.y + s), step: s, f: sp.f.clone()}.clone(), SearchProblem {x: (sp.x + s), y: (sp.y - s), step: s, f: sp.f.clone()}.clone(), SearchProblem {x: (sp.x + s), y: sp.y, step: s, f: sp.f.clone()}.clone(), SearchProblem {x: (sp.x + s), y: (sp.y + s), step: s, f: sp.f.clone()}.clone()]
};
    fn equal_state(a: &SearchProblem, b: &SearchProblem) -> bool {
    return ((a.x == b.x) && (a.y == b.y))
};
    fn contains_state(mut lst: Vec<SearchProblem>, sp: &SearchProblem) -> bool {
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        if equal_state(&lst[i as usize].clone(), sp) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn hill_climbing(sp: &SearchProblem, mut find_max: bool, mut max_x: f64, mut min_x: f64, mut max_y: f64, mut min_y: f64, mut max_iter: i64) -> SearchProblem {
    let mut current: SearchProblem = sp.clone();
    let mut visited: Vec<SearchProblem> = vec![];
    let mut iterations: i64 = 0;
    let mut solution_found: bool = false;
    while ((solution_found == false) && (iterations < max_iter)) {
        visited = { let mut _v = visited.clone(); _v.push(current.clone()); _v };
        iterations = (iterations + 1);
        let mut current_score: f64 = score(&current);
        let mut neighs: Vec<SearchProblem> = neighbors(&current);
        let mut max_change: f64 = -1000000000000000000.0;
        let mut min_change: f64 = 1000000000000000000.0;
        let mut next: SearchProblem = current.clone();
        let mut improved: bool = false;
        let mut i: i64 = 0;
        while (i < (neighs.len() as i64)) {
            let mut n: SearchProblem = neighs[i as usize].clone();
            i = (i + 1);
            if contains_state(visited.clone(), &n) {
                continue
            }
            if ((((n.x > max_x) || (n.x < min_x)) || (n.y > max_y)) || (n.y < min_y)) {
                continue
            }
            let mut change: f64 = (score(&n) - current_score);
            if find_max {
                if ((change > max_change) && (change > 0.0)) {
                    max_change = change;
                    next = n.clone();
                    improved = true;
                }
            } else {
                if ((change < min_change) && (change < 0.0)) {
                    min_change = change;
                    next = n.clone();
                    improved = true;
                }
            }
        }
        if improved {
            current = next.clone();
        } else {
            solution_found = true;
        }
    }
    return current
};
    fn test_f1(mut x: f64, mut y: f64) -> f64 {
    return ((x * x) + (y * y))
};
    fn mochi_main() {
    let mut prob1: SearchProblem = SearchProblem {x: 3.0, y: 4.0, step: 1.0, f: test_f1};
    let mut local_min1: SearchProblem = hill_climbing(&prob1, false, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 10000);
    println!("{}", (score(&local_min1) as i64).to_string());
    let mut prob2: SearchProblem = SearchProblem {x: 12.0, y: 47.0, step: 1.0, f: test_f1};
    let mut local_min2: SearchProblem = hill_climbing(&prob2, false, 100.0, 5.0, 50.0, -5.0, 10000);
    println!("{}", (score(&local_min2) as i64).to_string());
    let mut prob3: SearchProblem = SearchProblem {x: 3.0, y: 4.0, step: 1.0, f: test_f1};
    let mut local_max: SearchProblem = hill_climbing(&prob3, true, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 1000);
    println!("{}", (score(&local_max) as i64).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
