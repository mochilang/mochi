// Generated by Mochi transpiler v0.10.63
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn search(mut list_data: Vec<i64>, mut key: i64, mut left: i64, mut right: i64) -> i64 {
    let mut r: i64 = right;
    if (r == 0) {
        r = ((list_data.len() as i64) - 1);
    }
    if (left > r) {
        return -1
    } else if (list_data[left as usize] == key) {
        return left
    } else if (list_data[r as usize] == key) {
        return r
    } else {
        return search(list_data.clone(), key, (left + 1), (r - 1))
    }
};
    fn mochi_main() {
    println!("{}", search(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 0, 0));
    println!("{}", search(vec![1, 2, 4, 5, 3], 4, 0, 0));
    println!("{}", search(vec![1, 2, 4, 5, 3], 6, 0, 0));
    println!("{}", search(vec![5], 5, 0, 0));
    println!("{}", search(vec![], 1, 0, 0));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
