// Generated by Mochi transpiler v0.10.65
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct ConnMock {
    recv_called: i64,
    send_called: i64,
    close_called: i64,
}
impl std::fmt::Display for ConnMock {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"recv_called\": {}", self.recv_called)?;
        write!(f, ", ")?;
        write!(f, "\"send_called\": {}", self.send_called)?;
        write!(f, ", ")?;
        write!(f, "\"close_called\": {}", self.close_called)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct SocketMock {
    bind_called: i64,
    listen_called: i64,
    accept_called: i64,
    shutdown_called: i64,
    close_called: i64,
    conn: ConnMock,
}
impl std::fmt::Display for SocketMock {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"bind_called\": {}", self.bind_called)?;
        write!(f, ", ")?;
        write!(f, "\"listen_called\": {}", self.listen_called)?;
        write!(f, ", ")?;
        write!(f, "\"accept_called\": {}", self.accept_called)?;
        write!(f, ", ")?;
        write!(f, "\"shutdown_called\": {}", self.shutdown_called)?;
        write!(f, ", ")?;
        write!(f, "\"close_called\": {}", self.close_called)?;
        write!(f, ", ")?;
        write!(f, "\"conn\": {}", self.conn)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct FileMock {
    read_called: i64,
    data: Vec<i64>,
}
impl std::fmt::Display for FileMock {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"read_called\": {}", self.read_called)?;
        write!(f, ", ")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn make_conn_mock() -> ConnMock {
    return ConnMock {recv_called: 0, send_called: 0, close_called: 0}
};
    fn conn_recv(conn: &mut ConnMock, mut size: i64) -> i64 {
    (*conn).recv_called = (conn.recv_called + 1);
    return 0
};
    fn conn_send(conn: &mut ConnMock, mut data: i64) {
    (*conn).send_called = (conn.send_called + 1);
};
    fn conn_close(conn: &mut ConnMock) {
    (*conn).close_called = (conn.close_called + 1);
};
    fn make_socket_mock(mut conn: ConnMock) -> SocketMock {
    return SocketMock {bind_called: 0, listen_called: 0, accept_called: 0, shutdown_called: 0, close_called: 0, conn: conn.clone()}
};
    fn socket_bind(sock: &mut SocketMock) {
    (*sock).bind_called = (sock.bind_called + 1);
};
    fn socket_listen(sock: &mut SocketMock) {
    (*sock).listen_called = (sock.listen_called + 1);
};
    fn socket_accept(sock: &mut SocketMock) -> ConnMock {
    (*sock).accept_called = (sock.accept_called + 1);
    return sock.conn.clone()
};
    fn socket_shutdown(sock: &mut SocketMock) {
    (*sock).shutdown_called = (sock.shutdown_called + 1);
};
    fn socket_close(sock: &mut SocketMock) {
    (*sock).close_called = (sock.close_called + 1);
};
    fn make_file_mock(mut values: Vec<i64>) -> FileMock {
    return FileMock {read_called: 0, data: values.clone()}
};
    fn file_read(f: &mut FileMock, mut size: i64) -> i64 {
    if (f.read_called < (f.data.clone().len() as i64)) {
        let value: i64 = f.data.clone()[f.read_called as usize];
        (*f).read_called = (f.read_called + 1);
        return value
    }
    (*f).read_called = (f.read_called + 1);
    return 0
};
    fn file_open() -> FileMock {
    return make_file_mock(vec![1, 0])
};
    fn send_file(mut sock: SocketMock, mut f: FileMock) {
    socket_bind(&mut sock);
    socket_listen(&mut sock);
    let mut conn: ConnMock = socket_accept(&mut sock);
    let _: i64 = conn_recv(&mut conn, 1024);
    let mut data: i64 = file_read(&mut f, 1024);
    while (data != 0) {
        conn_send(&mut conn, data);
        data = file_read(&mut f, 1024);
    }
    conn_close(&mut conn);
    socket_shutdown(&mut sock);
    socket_close(&mut sock);
};
    fn test_send_file_running_as_expected() -> String {
    let mut conn: ConnMock = make_conn_mock();
    let mut sock: SocketMock = make_socket_mock(conn.clone());
    let mut f: FileMock = file_open();
    send_file(sock.clone(), f.clone());
    if (((((((((sock.bind_called == 1) && (sock.listen_called == 1)) && (sock.accept_called == 1)) && (conn.recv_called == 1)) && (f.read_called >= 1)) && (conn.send_called == 1)) && (conn.close_called == 1)) && (sock.shutdown_called == 1)) && (sock.close_called == 1)) {
        return String::from("pass")
    }
    return String::from("fail").clone()
};
    println!("{}", test_send_file_running_as_expected());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
