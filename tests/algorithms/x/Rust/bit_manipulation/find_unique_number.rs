// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn bit_xor(mut a: i64, mut b: i64) -> i64 {
    let mut ua: i64 = a;
    let mut ub: i64 = b;
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    while ((ua > 0) || (ub > 0)) {
        let mut abit: i64 = (ua % 2);
        let mut bbit: i64 = (ub % 2);
        if (((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1))) {
            res = (res + bit);
        }
        ua = (ua / 2);
        ub = (ub / 2);
        bit = (bit * 2);
    }
    return res
};
    fn find_unique_number(mut arr: Vec<i64>) -> i64 {
    if ((arr.len() as i64) == 0) {
        panic!("input list must not be empty");
    }
    let mut result: i64 = 0;
    for num in arr.iter().cloned() {
        result = bit_xor(result, num);
    }
    return result
};
    println!("{}", find_unique_number(vec![1, 1, 2, 2, 3]).to_string());
    println!("{}", find_unique_number(vec![4, 5, 4, 6, 6]).to_string());
    println!("{}", find_unique_number(vec![7]).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
