// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow2(mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * 2);
        i = (i + 1);
    }
    return result
};
    fn gray_code(mut bit_count: i64) -> Vec<i64> {
    if (bit_count == 0) {
        return vec![0]
    }
    let mut prev: Vec<i64> = gray_code((bit_count - 1));
    let mut add_val: i64 = pow2((bit_count - 1));
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (prev.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push(prev[i as usize]); _v };
        i = (i + 1);
    }
    let mut j = ((prev.len() as i64) - 1);
    while (j >= 0) {
        res = { let mut _v = res.clone(); _v.push((prev[j as usize] + add_val)); _v };
        j = (j - 1);
    }
    return res
};
    let mut seq2: Vec<i64> = gray_code(2);
    println!("{}", format!("{:?}", seq2));
    let mut seq1: Vec<i64> = gray_code(1);
    println!("{}", format!("{:?}", seq1));
    let mut seq3: Vec<i64> = gray_code(3);
    println!("{}", format!("{:?}", seq3));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
