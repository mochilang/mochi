// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn get_reverse_bit_string(mut number: i64) -> String {
    let mut bit_string: String = String::from("").clone();
    let mut n: i64 = number;
    let mut i: i64 = 0;
    while (i < 32) {
        bit_string = format!("{}{}", bit_string, (n % 2).to_string());
        n = (n / 2);
        i = (i + 1);
    }
    return bit_string.clone()
};
    fn reverse_bit(mut number: i64) -> String {
    if (number < 0) {
        panic!("the value of input must be positive");
    }
    let mut n: i64 = number;
    let mut result: i64 = 0;
    let mut i: i64 = 1;
    while (i <= 32) {
        result = (result * 2);
        let mut end_bit: i64 = (n % 2);
        n = (n / 2);
        result = (result + end_bit);
        i = (i + 1);
    }
    return get_reverse_bit_string(result).clone()
};
    println!("{}", reverse_bit(25));
    println!("{}", reverse_bit(37));
    println!("{}", reverse_bit(21));
    println!("{}", reverse_bit(58));
    println!("{}", reverse_bit(0));
    println!("{}", reverse_bit(256));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
