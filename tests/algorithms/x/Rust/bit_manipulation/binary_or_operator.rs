// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn binary_or(mut a: i64, mut b: i64) -> String {
    if ((a < 0) || (b < 0)) {
        return String::from("ValueError")
    }
    let mut res: String = String::from("").clone();
    let mut x: i64 = a;
    let mut y: i64 = b;
    while ((x > 0) || (y > 0)) {
        let mut bit_a: i64 = (x % 2);
        let mut bit_b: i64 = (y % 2);
        if ((bit_a == 1) || (bit_b == 1)) {
            res = format!("{}{}", "1", res);
        } else {
            res = format!("{}{}", "0", res);
        }
        x = (x / 2);
        y = (y / 2);
    }
    if (res.as_str() == "") {
        res = String::from("0");
    }
    return format!("{}{}", "0b", res).clone()
};
    println!("{}", binary_or(25, 32));
    println!("{}", binary_or(37, 50));
    println!("{}", binary_or(21, 30));
    println!("{}", binary_or(58, 73));
    println!("{}", binary_or(0, 255));
    println!("{}", binary_or(0, 256));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
