// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pad_left_num(mut n: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < 5) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn to_binary(mut n: i64) -> String {
    let mut sign: String = String::from("").clone();
    let mut num: i64 = n;
    if (num < 0) {
        sign = String::from("-");
        num = (0 - num);
    }
    let mut bits: String = String::from("").clone();
    while (num > 0) {
        bits = format!("{}{}", (num % 2).to_string(), bits).to_string();
        num = ((num - (num % 2)) / 2);
    }
    if (bits.as_str() == "") {
        bits = String::from("0");
    }
    let mut min_width: i64 = 8;
    while ((bits.len() as i64) < (min_width - (sign.len() as i64))) {
        bits = format!("{}{}", "0", bits);
    }
    return format!("{}{}", sign, bits).clone()
};
    fn show_bits(mut before: i64, mut after: i64) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad_left_num(before), ": "), to_binary(before)), "\n"), pad_left_num(after)), ": "), to_binary(after)).clone()
};
    fn lshift(mut num: i64, mut k: i64) -> i64 {
    let mut result: i64 = num;
    let mut i: i64 = 0;
    while (i < k) {
        result = (result * 2);
        i = (i + 1);
    }
    return result
};
    fn rshift(mut num: i64, mut k: i64) -> i64 {
    let mut result: i64 = num;
    let mut i: i64 = 0;
    while (i < k) {
        result = ((result - (result % 2)) / 2);
        i = (i + 1);
    }
    return result
};
    fn swap_odd_even_bits(mut num: i64) -> i64 {
    let mut n: i64 = num;
    if (n < 0) {
        n = (n + 4294967296);
    }
    let mut result: i64 = 0;
    let mut i: i64 = 0;
    while (i < 32) {
        let mut bit1: i64 = (rshift(n, i) % 2);
        let mut bit2: i64 = (rshift(n, (i + 1)) % 2);
        result = ((result + lshift(bit1, (i + 1))) + lshift(bit2, i));
        i = (i + 2);
    }
    return result
};
    fn mochi_main() {
    let mut nums: Vec<i64> = vec![-1, 0, 1, 2, 3, 4, 23, 24];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut n: i64 = nums[i as usize];
        println!("{}", show_bits(n, swap_odd_even_bits(n)));
        println!("{}", "");
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
