// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn repeat_char(ch: &str, mut count: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < count) {
        res = format!("{}{}", res, ch);
        i = (i + 1);
    }
    return res.clone()
};
    fn abs_int(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn pow2(mut exp: i64) -> i64 {
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        res = (res * 2);
        i = (i + 1);
    }
    return res
};
    fn to_binary_no_prefix(mut n: i64) -> String {
    let mut v: i64 = n;
    if (v < 0) {
        v = -v;
    }
    if (v == 0) {
        return String::from("0")
    }
    let mut res: String = String::from("").clone();
    while (v > 0) {
        res = format!("{}{}", (v % 2).to_string(), res).to_string();
        v = (v / 2);
    }
    return res.clone()
};
    fn logical_left_shift(mut number: i64, mut shift_amount: i64) -> String {
    if ((number < 0) || (shift_amount < 0)) {
        panic!("both inputs must be positive integers");
    }
    let mut binary_number: String = format!("{}{}", "0b", to_binary_no_prefix(number)).clone();
    return format!("{}{}", binary_number, repeat_char(&"0", shift_amount)).clone()
};
    fn logical_right_shift(mut number: i64, mut shift_amount: i64) -> String {
    if ((number < 0) || (shift_amount < 0)) {
        panic!("both inputs must be positive integers");
    }
    let mut binary_number: String = to_binary_no_prefix(number).clone();
    if (shift_amount >= (binary_number.len() as i64)) {
        return String::from("0b0")
    }
    let mut shifted: String = { let tmp = &binary_number; tmp.chars().skip(0 as usize).take((((binary_number.len() as i64) - shift_amount) - 0) as usize).collect::<String>() }.clone();
    return format!("{}{}", "0b", shifted).clone()
};
    fn arithmetic_right_shift(mut number: i64, mut shift_amount: i64) -> String {
    let mut binary_number: String = String::from("");
    if (number >= 0) {
        binary_number = format!("{}{}", "0", to_binary_no_prefix(number));
    } else {
        let mut length = (to_binary_no_prefix(-number).len() as i64);
        let mut intermediate: i64 = (abs_int(number) - pow2(length));
        let mut bin_repr: String = to_binary_no_prefix(intermediate).clone();
        binary_number = format!("{}{}", format!("{}{}", "1", repeat_char(&"0", (length - (bin_repr.len() as i64)))), bin_repr);
    }
    if (shift_amount >= (binary_number.len() as i64)) {
        let mut sign: String = { let tmp = &binary_number; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
        return format!("{}{}", "0b", repeat_char(&sign, (binary_number.len() as i64)))
    }
    let mut sign: String = { let tmp = &binary_number; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
    let mut shifted: String = { let tmp = &binary_number; tmp.chars().skip(0 as usize).take((((binary_number.len() as i64) - shift_amount) - 0) as usize).collect::<String>() }.clone();
    return format!("{}{}", format!("{}{}", "0b", repeat_char(&sign, shift_amount)), shifted).clone()
};
    fn mochi_main() {
    println!("{}", logical_left_shift(17, 2));
    println!("{}", logical_right_shift(1983, 4));
    println!("{}", arithmetic_right_shift(-17, 2));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
