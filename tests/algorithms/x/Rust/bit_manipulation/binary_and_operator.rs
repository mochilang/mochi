// Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:42 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn to_binary(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut num: i64 = n;
    let mut res: String = String::from("").clone();
    while (num > 0) {
        let mut bit: i64 = (num % 2);
        res = format!("{}{}", bit.to_string(), res).to_string();
        num = (num / 2);
    }
    return res.clone()
};
    fn zfill(s: &str, mut width: i64) -> String {
    let mut res: String = s.to_string().clone();
    let mut pad: i64 = (width - (s.len() as i64));
    while (pad > 0) {
        res = format!("{}{}", "0", res);
        pad = (pad - 1);
    }
    return res.clone()
};
    fn binary_and(mut a: i64, mut b: i64) -> String {
    if ((a < 0) || (b < 0)) {
        panic!("the value of both inputs must be positive");
    }
    let mut a_bin: String = to_binary(a).clone();
    let mut b_bin: String = to_binary(b).clone();
    let mut max_len = (a_bin.len() as i64);
    if ((b_bin.len() as i64) > max_len) {
        max_len = (b_bin.len() as i64);
    }
    let mut a_pad: String = zfill(&a_bin, max_len).clone();
    let mut b_pad: String = zfill(&b_bin, max_len).clone();
    let mut i: i64 = 0;
    let mut res: String = String::from("").clone();
    while (i < max_len) {
        if ((a_pad.chars().nth(i as usize).unwrap().to_string().as_str() == "1") && (b_pad.chars().nth(i as usize).unwrap().to_string().as_str() == "1")) {
            res = format!("{}{}", res, "1");
        } else {
            res = format!("{}{}", res, "0");
        }
        i = (i + 1);
    }
    return format!("{}{}", "0b", res).clone()
};
    println!("{}", binary_and(25, 32));
    println!("{}", binary_and(37, 50));
    println!("{}", binary_and(21, 30));
    println!("{}", binary_and(58, 73));
    println!("{}", binary_and(0, 255));
    println!("{}", binary_and(256, 256));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
