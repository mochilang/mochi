// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn pow2(mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * 2);
        i = (i + 1);
    }
    return result
};
    fn is_bit_set(mut number: i64, mut position: i64) -> bool {
    let mut shifted: i64 = (number / pow2(position));
    let mut remainder: i64 = (shifted % 2);
    return (remainder == 1)
};
    fn set_bit(mut number: i64, mut position: i64) -> i64 {
    if is_bit_set(number, position) {
        return number
    }
    return (number + pow2(position))
};
    fn clear_bit(mut number: i64, mut position: i64) -> i64 {
    if is_bit_set(number, position) {
        return (number - pow2(position))
    }
    return number
};
    fn flip_bit(mut number: i64, mut position: i64) -> i64 {
    if is_bit_set(number, position) {
        return (number - pow2(position))
    }
    return (number + pow2(position))
};
    fn get_bit(mut number: i64, mut position: i64) -> i64 {
    if is_bit_set(number, position) {
        return 1
    }
    return 0
};
    println!("{}", set_bit(13, 1).to_string());
    println!("{}", clear_bit(18, 1).to_string());
    println!("{}", flip_bit(5, 1).to_string());
    println!("{}", is_bit_set(10, 3).to_string());
    println!("{}", get_bit(10, 1).to_string());
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
