// Generated by Mochi transpiler v0.10.59
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn repeat_char(ch: &str, mut times: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < times) {
        res = format!("{}{}", res, ch);
        i = (i + 1);
    }
    return res.clone()
};
    fn to_binary(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut res: String = String::from("").clone();
    let mut v: i64 = n;
    while (v > 0) {
        res = format!("{}{}", (v % 2).to_string(), res).to_string();
        v = (v / 2);
    }
    return res.clone()
};
    fn pow2(mut exp: i64) -> i64 {
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        res = (res * 2);
        i = (i + 1);
    }
    return res
};
    fn twos_complement(mut number: i64) -> String {
    if (number > 0) {
        panic!("input must be a negative integer");
    }
    if (number == 0) {
        return String::from("0b0")
    }
    let mut abs_number: i64 = if (number < 0) { -number } else { number };
    let mut binary_number_length = (to_binary(abs_number).len() as i64);
    let mut complement_value: i64 = (pow2(binary_number_length) - abs_number);
    let mut complement_binary: String = to_binary(complement_value).clone();
    let mut padding: String = repeat_char(&"0", (binary_number_length - (complement_binary.len() as i64))).clone();
    let mut twos_complement_number: String = format!("{}{}", format!("{}{}", "1", padding), complement_binary).clone();
    return format!("{}{}", "0b", twos_complement_number).clone()
};
    println!("{}", twos_complement(0));
    println!("{}", twos_complement(-1));
    println!("{}", twos_complement(-5));
    println!("{}", twos_complement(-17));
    println!("{}", twos_complement(-207));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
