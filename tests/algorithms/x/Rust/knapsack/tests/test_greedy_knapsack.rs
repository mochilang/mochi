// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct CalcResult {
    ok: bool,
    value: f64,
    error: String,
}
impl std::fmt::Display for CalcResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, ", ")?;
        write!(f, "\"value\": {}", self.value)?;
        write!(f, ", ")?;
        write!(f, "\"error\": \"{}\"", self.error)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn calc_profit(mut profit: Vec<i64>, mut weight: Vec<i64>, mut max_weight: i64) -> CalcResult {
    if ((profit.len() as i64) != (weight.len() as i64)) {
        return CalcResult {ok: false, value: 0.0, error: String::from("The length of profit and weight must be same.")}
    }
    if (max_weight <= 0) {
        return CalcResult {ok: false, value: 0.0, error: String::from("max_weight must greater than zero.")}
    }
    let mut i: i64 = 0;
    while (i < (profit.len() as i64)) {
        if (profit[i as usize] < 0) {
            return CalcResult {ok: false, value: 0.0, error: String::from("Profit can not be negative.")}
        }
        if (weight[i as usize] < 0) {
            return CalcResult {ok: false, value: 0.0, error: String::from("Weight can not be negative.")}
        }
        i = (i + 1);
    }
    let mut used: Vec<bool> = vec![];
    let mut j: i64 = 0;
    while (j < (profit.len() as i64)) {
        used = { let mut _v = used.clone(); _v.push(false); _v };
        j = (j + 1);
    }
    let mut limit: i64 = 0;
    let mut gain: f64 = 0.0;
    while (limit < max_weight) {
        let mut max_ratio: f64 = -1.0;
        let mut idx: i64 = (0 - 1);
        let mut k: i64 = 0;
        while (k < (profit.len() as i64)) {
            if !used[k as usize] {
                let ratio: f64 = ((profit[k as usize] as f64) / (weight[k as usize] as f64));
                if (ratio > max_ratio) {
                    max_ratio = ratio;
                    idx = k;
                }
            }
            k = (k + 1);
        }
        if (idx == (0 - 1)) {
            break
        }
        used[idx as usize] = true;
        if ((max_weight - limit) >= weight[idx as usize]) {
            limit = (limit + weight[idx as usize]);
            gain = (gain + (profit[idx as usize] as f64));
        } else {
            gain = (gain + ((((max_weight - limit) as f64) / (weight[idx as usize] as f64)) * (profit[idx as usize] as f64)));
            break
        }
    }
    return CalcResult {ok: true, value: gain, error: String::new()}
};
    fn test_sorted() -> bool {
    let profit: Vec<i64> = vec![10, 20, 30, 40, 50, 60];
    let weight: Vec<i64> = vec![2, 4, 6, 8, 10, 12];
    let res: CalcResult = calc_profit(profit.clone(), weight.clone(), 100);
    return (res.ok && (res.value == 210.0))
};
    fn test_negative_max_weight() -> bool {
    let profit: Vec<i64> = vec![10, 20, 30, 40, 50, 60];
    let weight: Vec<i64> = vec![2, 4, 6, 8, 10, 12];
    let res: CalcResult = calc_profit(profit.clone(), weight.clone(), -15);
    return (!res.ok && (res.error.clone().as_str() == "max_weight must greater than zero."))
};
    fn test_negative_profit_value() -> bool {
    let profit: Vec<i64> = vec![10, -20, 30, 40, 50, 60];
    let weight: Vec<i64> = vec![2, 4, 6, 8, 10, 12];
    let res: CalcResult = calc_profit(profit.clone(), weight.clone(), 15);
    return (!res.ok && (res.error.clone().as_str() == "Profit can not be negative."))
};
    fn test_negative_weight_value() -> bool {
    let profit: Vec<i64> = vec![10, 20, 30, 40, 50, 60];
    let weight: Vec<i64> = vec![2, -4, 6, -8, 10, 12];
    let res: CalcResult = calc_profit(profit.clone(), weight.clone(), 15);
    return (!res.ok && (res.error.clone().as_str() == "Weight can not be negative."))
};
    fn test_null_max_weight() -> bool {
    let profit: Vec<i64> = vec![10, 20, 30, 40, 50, 60];
    let weight: Vec<i64> = vec![2, 4, 6, 8, 10, 12];
    let res: CalcResult = calc_profit(profit.clone(), weight.clone(), 0);
    return (!res.ok && (res.error.clone().as_str() == "max_weight must greater than zero."))
};
    fn test_unequal_list_length() -> bool {
    let profit: Vec<i64> = vec![10, 20, 30, 40, 50];
    let weight: Vec<i64> = vec![2, 4, 6, 8, 10, 12];
    let res: CalcResult = calc_profit(profit.clone(), weight.clone(), 100);
    return (!res.ok && (res.error.clone().as_str() == "The length of profit and weight must be same."))
};
    println!("{}", if test_sorted() { 1 } else { 0 });
    println!("{}", if test_negative_max_weight() { 1 } else { 0 });
    println!("{}", if test_negative_profit_value() { 1 } else { 0 });
    println!("{}", if test_negative_weight_value() { 1 } else { 0 });
    println!("{}", if test_null_max_weight() { 1 } else { 0 });
    println!("{}", if test_unequal_list_length() { 1 } else { 0 });
    println!("{}", if true { 1 } else { 0 });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
