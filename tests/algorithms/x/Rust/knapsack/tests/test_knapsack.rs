// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn knapsack(mut capacity: i64, mut weights: Vec<i64>, mut values: Vec<i64>, mut counter: i64) -> i64 {
    if ((counter == 0) || (capacity == 0)) {
        return 0
    }
    if (weights[(counter - 1) as usize] > capacity) {
        return knapsack(capacity, weights.clone(), values.clone(), (counter - 1))
    }
    let left_capacity: i64 = (capacity - weights[(counter - 1) as usize]);
    let include_val: i64 = (values[(counter - 1) as usize] + knapsack(left_capacity, weights.clone(), values.clone(), (counter - 1)));
    let exclude_val: i64 = knapsack(capacity, weights.clone(), values.clone(), (counter - 1));
    if (include_val > exclude_val) {
        return include_val
    }
    return exclude_val
};
    fn test_base_case() -> bool {
    let cap: i64 = 0;
    let val: Vec<i64> = vec![0];
    let w: Vec<i64> = vec![0];
    let c: i64 = (val.len() as i64);
    if (knapsack(cap, w.clone(), val.clone(), c) != 0) {
        return false
    }
    let val2: Vec<i64> = vec![60];
    let w2: Vec<i64> = vec![10];
    let c2: i64 = (val2.len() as i64);
    return (knapsack(cap, w2.clone(), val2.clone(), c2) == 0)
};
    fn test_easy_case() -> bool {
    let cap: i64 = 3;
    let val: Vec<i64> = vec![1, 2, 3];
    let w: Vec<i64> = vec![3, 2, 1];
    let c: i64 = (val.len() as i64);
    return (knapsack(cap, w.clone(), val.clone(), c) == 5)
};
    fn test_knapsack() -> bool {
    let cap: i64 = 50;
    let val: Vec<i64> = vec![60, 100, 120];
    let w: Vec<i64> = vec![10, 20, 30];
    let c: i64 = (val.len() as i64);
    return (knapsack(cap, w.clone(), val.clone(), c) == 220)
};
    println!("{}", if test_base_case() { 1 } else { 0 });
    println!("{}", if test_easy_case() { 1 } else { 0 });
    println!("{}", if test_knapsack() { 1 } else { 0 });
    println!("{}", if true { 1 } else { 0 });
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
