// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn calc_profit(mut profit: Vec<i64>, mut weight: Vec<i64>, mut max_weight: i64) -> f64 {
    if ((profit.len() as i64) != (weight.len() as i64)) {
        panic!("The length of profit and weight must be same.");
    }
    if (max_weight <= 0) {
        panic!("max_weight must greater than zero.");
    }
    let mut i: i64 = 0;
    while (i < (profit.len() as i64)) {
        if (profit[i as usize] < 0) {
            panic!("Profit can not be negative.");
        }
        if (weight[i as usize] < 0) {
            panic!("Weight can not be negative.");
        }
        i = (i + 1);
    }
    let n: i64 = (profit.len() as i64);
    let mut used: Vec<bool> = vec![];
    let mut j: i64 = 0;
    while (j < n) {
        used = { let mut _v = used.clone(); _v.push(false); _v };
        j = (j + 1);
    }
    let mut limit: i64 = 0;
    let mut gain: f64 = 0.0;
    let mut count: i64 = 0;
    while ((limit < max_weight) && (count < n)) {
        let mut maxRatio: f64 = -1.0;
        let mut maxIndex: i64 = -1;
        let mut k: i64 = 0;
        while (k < n) {
            if !used[k as usize] {
                let ratio: f64 = ((profit[k as usize] as f64) / (weight[k as usize] as f64));
                if (ratio > maxRatio) {
                    maxRatio = ratio;
                    maxIndex = k;
                }
            }
            k = (k + 1);
        }
        if (maxIndex < 0) {
            break
        }
        used[maxIndex as usize] = true;
        if ((max_weight - limit) >= weight[maxIndex as usize]) {
            limit = (limit + weight[maxIndex as usize]);
            gain = (gain + (profit[maxIndex as usize] as f64));
        } else {
            gain = (gain + ((((max_weight - limit) as f64) / (weight[maxIndex as usize] as f64)) * (profit[maxIndex as usize] as f64)));
            break
        }
        count = (count + 1);
    }
    return gain
};
    fn mochi_main() {
    println!("{}", format!("{:?}", calc_profit(vec![1, 2, 3], vec![3, 4, 5], 15)));
    println!("{}", format!("{:?}", calc_profit(vec![10, 9, 8], vec![3, 4, 5], 25)));
    println!("{}", format!("{:?}", calc_profit(vec![10, 9, 8], vec![3, 4, 5], 5)));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
