// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn knapsack(mut capacity: i64, mut weights: Vec<i64>, mut values: Vec<i64>, mut counter: i64) -> i64 {
    if ((counter == 0) || (capacity == 0)) {
        return 0
    }
    if (weights[(counter - 1) as usize] > capacity) {
        return knapsack(capacity, weights.clone(), values.clone(), (counter - 1))
    } else {
        let mut left_capacity: i64 = (capacity - weights[(counter - 1) as usize]);
        let mut new_value_included: i64 = (values[(counter - 1) as usize] + knapsack(left_capacity, weights.clone(), values.clone(), (counter - 1)));
        let mut without_new_value: i64 = knapsack(capacity, weights.clone(), values.clone(), (counter - 1));
        if (new_value_included > without_new_value) {
            return new_value_included
        } else {
            return without_new_value
        }
    }
};
    fn mochi_main() {
    let mut weights: Vec<i64> = vec![10, 20, 30];
    let mut values: Vec<i64> = vec![60, 100, 120];
    let mut cap: i64 = 50;
    let mut count: i64 = (values.len() as i64);
    let mut result: i64 = knapsack(cap, weights.clone(), values.clone(), count);
    println!("{}", result.to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
