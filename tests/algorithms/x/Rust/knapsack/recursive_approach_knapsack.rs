// Generated by Mochi transpiler v0.10.66
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn knapsack(mut weights: Vec<i64>, mut values: Vec<i64>, mut number_of_items: i64, mut max_weight: i64, mut index: i64) -> i64 {
    if (index == number_of_items) {
        return 0
    }
    let ans1: i64 = knapsack(weights.clone(), values.clone(), number_of_items, max_weight, (index + 1));
    let mut ans2: i64 = 0;
    if (weights[index as usize] <= max_weight) {
        ans2 = (values[index as usize] + knapsack(weights.clone(), values.clone(), number_of_items, (max_weight - weights[index as usize]), (index + 1)));
    }
    if (ans1 > ans2) {
        return ans1
    }
    return ans2
};
    fn mochi_main() {
    let w1: Vec<i64> = vec![1, 2, 4, 5];
    let v1: Vec<i64> = vec![5, 4, 8, 6];
    let r1: i64 = knapsack(w1.clone(), v1.clone(), 4, 5, 0);
    println!("{}", r1.to_string());
    let w2: Vec<i64> = vec![3, 4, 5];
    let v2: Vec<i64> = vec![10, 9, 8];
    let r2: i64 = knapsack(w2.clone(), v2.clone(), 3, 25, 0);
    println!("{}", r2.to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
