// Generated by Mochi 0.10.61 on 2025-08-08 21:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Net.Http;
using System.Numerics;
using System.Collections;

class Post {
    public string title;
    public string url;
    public string selftext;
    public override string ToString() => $"Post {{title = \"{title}\", url = \"{url}\", selftext = \"{selftext}\"}}";
}
class Child {
    public Post data;
    public override string ToString() => $"Child {{data = {data}}}";
}
class ListingData {
    public Child[] children;
    public override string ToString() => $"ListingData {{children = {children}}}";
}
class Listing {
    public ListingData data;
    public override string ToString() => $"Listing {{data = {data}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static object _fetch(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            using var stream = client.GetStreamAsync(url).Result;
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            return JsonSerializer.Deserialize<object>(stream, opts);
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            return JsonSerializer.Deserialize<object>(stream, opts);
        }
    }
    static Listing _fetch_Listing(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            using var stream = client.GetStreamAsync(url).Result;
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<Listing>(stream, opts);
            return res == null ? new Listing() : res;
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<Listing>(stream, opts);
            return res == null ? new Listing() : res;
        }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] valid_terms_6 = new string[]{"approved_at_utc", "approved_by", "author_flair_background_color", "author_flair_css_class", "author_flair_richtext", "author_flair_template_id", "author_fullname", "author_premium", "can_mod_post", "category", "clicked", "content_categories", "created_utc", "downs", "edited", "gilded", "gildings", "hidden", "hide_score", "is_created_from_ads_ui", "is_meta", "is_original_content", "is_reddit_media_domain", "is_video", "link_flair_css_class", "link_flair_richtext", "link_flair_text", "link_flair_text_color", "media_embed", "mod_reason_title", "name", "permalink", "pwls", "quarantine", "saved", "score", "secure_media", "secure_media_embed", "selftext", "subreddit", "subreddit_name_prefixed", "subreddit_type", "thumbnail", "title", "top_awarded_type", "total_awards_received", "ups", "upvote_ratio", "url", "user_reports"};
    public static bool contains(string[] xs_0, string x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2 < 0 ? xs_0.Length + (i_2) : i_2)] == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static string join_with_comma(string[] xs_3) {
        string s_4 = "";
        long i_5 = 0;
        while ((i_5 < xs_3.Length)) {
            if ((i_5 > 0)) {
                s_4 = (s_4 + ", ");
            }
            s_4 = (s_4 + xs_3[(int)(i_5 < 0 ? xs_3.Length + (i_5) : i_5)]);
            i_5 = (i_5 + 1);
        };
        return s_4;
    }

    public static Dictionary<long, Dictionary<string, string>> get_subreddit_data(string subreddit_7, long limit_8, string age_9, string[] wanted_data_10) {
        string[] invalid_11 = new string[]{};
        long i_12 = 0;
        while ((i_12 < wanted_data_10.Length)) {
            string term_13 = wanted_data_10[(int)(i_12 < 0 ? wanted_data_10.Length + (i_12) : i_12)];
            if ((!Program.contains(valid_terms_6, term_13))) {
                invalid_11 = (Enumerable.ToArray(Enumerable.Append<string>(invalid_11, term_13)));
            }
            i_12 = (i_12 + 1);
        };
        if ((invalid_11.Length > 0)) {
            string msg_14 = ("Invalid search term: " + Program.join_with_comma(invalid_11));
            throw new Exception(msg_14);
        };
        Listing resp_15 = _fetch_Listing("tests/github/TheAlgorithms/Mochi/web_programming/reddit_sample.json");
        Dictionary<long, Dictionary<string, string>> result_16 = new Dictionary<long, Dictionary<string, string>>{};
        long idx_17 = 0;
        while ((idx_17 < limit_8)) {
            Post post_18 = resp_15.data.children[(int)(idx_17 < 0 ? resp_15.data.children.Length + (idx_17) : idx_17)].data;
            Dictionary<string, string> post_map_19 = new Dictionary<string, string>{};
            if ((wanted_data_10.Length == 0)) {
                post_map_19["title"] = post_18.title;
                post_map_19["url"] = post_18.url;
                post_map_19["selftext"] = post_18.selftext;
            } else {
                long j_20 = 0;
                while ((j_20 < wanted_data_10.Length)) {
                    string field_21 = wanted_data_10[(int)(j_20 < 0 ? wanted_data_10.Length + (j_20) : j_20)];
                    if ((field_21 == "title")) {
                        post_map_19["title"] = post_18.title;
                    } else if ((field_21 == "url")) {
                        post_map_19["url"] = post_18.url;
                    } else if ((field_21 == "selftext")) {
                        post_map_19["selftext"] = post_18.selftext;
                    }
                    j_20 = (j_20 + 1);
                }
            }
            result_16[idx_17] = post_map_19;
            idx_17 = (idx_17 + 1);
        };
        return result_16;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.get_subreddit_data("learnpython", 1, "new", new string[]{"title", "url", "selftext"})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
