// Generated by Mochi 0.10.61 on 2025-08-08 19:15 +0700
#pragma warning disable CS0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class ApodData {
    public string url;
    public string title;
    public override string ToString() => $"ApodData {{url = \"{url}\", title = \"{title}\"}}";
}
class ArchiveItemData {
    public string description;
    public override string ToString() => $"ArchiveItemData {{description = \"{description}\"}}";
}
class ArchiveItem {
    public ArchiveItemData[] data;
    public override string ToString() => $"ArchiveItem {{data = {data}}}";
}
class ArchiveCollection {
    public ArchiveItem[] items;
    public override string ToString() => $"ArchiveCollection {{items = {items}}}";
}
class ArchiveResult {
    public ArchiveCollection collection;
    public override string ToString() => $"ArchiveResult {{collection = {collection}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fetch(string url) {
        if (url == "https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY") {
            return "{\"url\":\"https://example.com/apod.jpg\",\"title\":\"APOD\"}";
        }
        if (url == "https://images-api.nasa.gov/search?q=apollo%202011") {
            return "{\"collection\":{\"items\":[{\"data\":[{\"description\":\"Apollo 2011 mission\"}]}]}}";
        }
        return "";
    }
    static ApodData _fetch_ApodData(string url) {
        var json = _fetch(url);
        return JsonSerializer.Deserialize<ApodData>(json, new JsonSerializerOptions{PropertyNameCaseInsensitive=true, IncludeFields=true});
    }
    static ArchiveResult _fetch_ArchiveResult(string url) {
        var json = _fetch(url);
        return JsonSerializer.Deserialize<ArchiveResult>(json, new JsonSerializerOptions{PropertyNameCaseInsensitive=true, IncludeFields=true});
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static ApodData get_apod_data(string api_key_0) {
        ApodData data_1 = _fetch_ApodData("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY");
        return data_1;
    }

    public static ApodData save_apod(string api_key_2) {
        ApodData apod_3 = Program.get_apod_data(api_key_2);
        return apod_3;
    }

    public static ArchiveResult get_archive_data(string query_4) {
        ArchiveResult data_5 = _fetch_ArchiveResult("https://images-api.nasa.gov/search?q=apollo%202011");
        return data_5;
    }

    public static void main() {
        ApodData apod_6 = Program.save_apod("DEMO_KEY");
        Console.WriteLine(Program._fmtTop(apod_6.title));
        ArchiveResult archive_7 = Program.get_archive_data("apollo 2011");
        ArchiveItem[] items_8 = archive_7.collection.items;
        ArchiveItem first_item_9 = items_8[(int)(0 < 0 ? items_8.Length + (0) : 0)];
        ArchiveItemData first_data_10 = first_item_9.data[(int)(0 < 0 ? first_item_9.data.Length + (0) : 0)];
        Console.WriteLine(Program._fmtTop(first_data_10.description));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
