// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class ANIME_DB {
    public string title;
    public string url;
    public override string ToString() => $"ANIME_DB {{title = \"{title}\", url = \"{url}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string BASE_URL_0 = "https://ww7.gogoanime2.org";
    static Dictionary<string, string>[] ANIME_DB_4 = new ANIME_DB[]{new ANIME_DB{title = "Demon Slayer", url = "/anime/kimetsu-no-yaiba"}, new ANIME_DB{title = "Naruto", url = "/anime/naruto"}};
    static Dictionary<string, Dictionary<string, string>[]> EPISODE_DB_10 = new Dictionary<string, Dictionary<string, string>[]>{{"/anime/kimetsu-no-yaiba", new Dictionary<string, string>[]{new Dictionary<string, string>{{"title", "Episode 1"}, {"url", "/watch/kimetsu-no-yaiba/1"}}, new Dictionary<string, string>{{"title", "Episode 2"}, {"url", "/watch/kimetsu-no-yaiba/2"}}}}, {"/anime/naruto", new Dictionary<string, string>[]{new Dictionary<string, string>{{"title", "Episode 1"}, {"url", "/watch/naruto/1"}}}}};
    static Dictionary<string, string> EPISODE_EMBED_13 = new Dictionary<string, string>{{"/watch/kimetsu-no-yaiba/1", "/embed/kimetsu-no-yaiba/1"}, {"/watch/kimetsu-no-yaiba/2", "/embed/kimetsu-no-yaiba/2"}, {"/watch/naruto/1", "/embed/naruto/1"}};
    public static bool contains_str(string s_1, string sub_2) {
        if ((sub_2.Length == 0)) {
            return true;
        };
        long i_3 = 0;
        while (((i_3 + sub_2.Length) <= s_1.Length)) {
            if ((_substr(s_1, i_3, (i_3 + sub_2.Length)) == sub_2)) {
                return true;
            }
            i_3 = (i_3 + 1);
        };
        return false;
    }

    public static Dictionary<string, string>[] search_scraper(string anime_name_5) {
        string term_6 = anime_name_5.ToLower();
        Dictionary<string, string>[] res_7 = new Dictionary<string, string>[]{};
        long i_8 = 0;
        while ((i_8 < ANIME_DB_4.Length)) {
            Dictionary<string, string> item_9 = ANIME_DB_4[(int)(i_8 < 0 ? ANIME_DB_4.Length + (i_8) : i_8)];
            if (Program.contains_str((item_9.ContainsKey("title") ? item_9["title"] : "").ToLower(), term_6)) {
                res_7 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, string>>(res_7, item_9)));
            }
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static Dictionary<string, string>[] search_anime_episode_list(string endpoint_11) {
        if ((EPISODE_DB_10.ContainsKey(endpoint_11))) {
            return (EPISODE_DB_10.ContainsKey(endpoint_11) ? EPISODE_DB_10[endpoint_11] : null);
        };
        Dictionary<string, string>[] empty_12 = new Dictionary<string, string>[]{};
        return empty_12;
    }

    public static string to_playlist(string embed_14) {
        return (("/playlist/" + _substr(embed_14, 7, embed_14.Length)) + ".m3u8");
    }

    public static string[] get_anime_episode(string endpoint_15) {
        if ((EPISODE_EMBED_13.ContainsKey(endpoint_15))) {
            string embed_16 = (EPISODE_EMBED_13.ContainsKey(endpoint_15) ? EPISODE_EMBED_13[endpoint_15] : "");
            string play_17 = (BASE_URL_0 + embed_16);
            string download_18 = (BASE_URL_0 + Program.to_playlist(embed_16));
            return new string[]{play_17, download_18};
        };
        string[] empty_19 = new string[]{};
        return empty_19;
    }

    public static void main() {
        Dictionary<string, string>[] animes_20 = Program.search_scraper("demon");
        Console.WriteLine(Program._fmtTop(animes_20));
        Dictionary<string, string>[] episodes_21 = Program.search_anime_episode_list("/anime/kimetsu-no-yaiba");
        Console.WriteLine(Program._fmtTop(episodes_21));
        string[] links_22 = Program.get_anime_episode("/watch/kimetsu-no-yaiba/1");
        Console.WriteLine(Program._fmtTop(links_22));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
