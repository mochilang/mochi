// Generated by Mochi 0.10.61 on 2025-08-08 21:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string sample_html_26 = "<h1>Coronavirus Cases:</h1><div class=\"maincounter-number\"><span>100</span></div><h1>Deaths:</h1><div class=\"maincounter-number\"><span>10</span></div><h1>Recovered:</h1><div class=\"maincounter-number\"><span>50</span></div><span class=\"panel-title\">Active Cases</span><div class=\"number-table-main\">20</div><span class=\"panel-title\">Closed Cases</span><div class=\"number-table-main\">80</div>";
    static string[][] stats_27 = Program.world_covid19_stats(sample_html_26);
    public static long index_of(string s_0, string sub_1, long start_2) {
        long n_3 = s_0.Length;
        long m_4 = sub_1.Length;
        long i_5 = start_2;
        while ((i_5 <= (n_3 - m_4))) {
            long j_6 = 0;
            while (((j_6 < m_4) && (_substr(s_0, (i_5 + j_6), ((i_5 + j_6) + 1)) == _substr(sub_1, j_6, (j_6 + 1))))) {
                j_6 = (j_6 + 1);
            }
            if ((j_6 == m_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    public static string[] find_all(string html_7, string open_8, string close_9) {
        string[] res_10 = new string[]{};
        long pos_11 = 0;
        long ol_12 = open_8.Length;
        long cl_13 = close_9.Length;
        while (true) {
            long start_14 = Program.index_of(html_7, open_8, pos_11);
            if ((start_14 < 0)) {
                break;
            }
            long begin_15 = (start_14 + ol_12);
            long end_16 = Program.index_of(html_7, close_9, begin_15);
            if ((end_16 < 0)) {
                break;
            }
            res_10 = (Enumerable.ToArray(Enumerable.Append<string>(res_10, _substr(html_7, begin_15, end_16))));
            pos_11 = (end_16 + cl_13);
        };
        return res_10;
    }

    public static string[][] world_covid19_stats(string html_17) {
        string[] keys_18 = Program.find_all(html_17, "<h1>", "</h1>");
        string[] values_19 = Program.find_all(html_17, "<div class=\"maincounter-number\"><span>", "</span></div>");
        string[] extra_keys_20 = Program.find_all(html_17, "<span class=\"panel-title\">", "</span>");
        foreach (string k_21 in extra_keys_20) {
            keys_18 = (Enumerable.ToArray(Enumerable.Append<string>(keys_18, k_21)));
        };
        string[] extra_vals_22 = Program.find_all(html_17, "<div class=\"number-table-main\">", "</div>");
        foreach (string v_23 in extra_vals_22) {
            values_19 = (Enumerable.ToArray(Enumerable.Append<string>(values_19, v_23)));
        };
        string[][] res_24 = new string[][]{};
        long i_25 = 0;
        while (((i_25 < keys_18.Length) && (i_25 < values_19.Length))) {
            res_24 = (Enumerable.ToArray(Enumerable.Append<string[]>(res_24, new string[]{keys_18[(int)(i_25 < 0 ? keys_18.Length + (i_25) : i_25)], values_19[(int)(i_25 < 0 ? values_19.Length + (i_25) : i_25)]})));
            i_25 = (i_25 + 1);
        };
        return res_24;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("COVID-19 Status of the World\n"));
            long i_28 = 0;
            while ((i_28 < stats_27.Length)) {
                Console.WriteLine(Program._fmtTop(stats_27[(int)(i_28 < 0 ? stats_27.Length + (i_28) : i_28)][(int)(0 < 0 ? stats_27[(int)(i_28 < 0 ? stats_27.Length + (i_28) : i_28)].Length + (0) : 0)]));
                Console.WriteLine(Program._fmtTop(stats_27[(int)(i_28 < 0 ? stats_27.Length + (i_28) : i_28)][(int)(1 < 0 ? stats_27[(int)(i_28 < 0 ? stats_27.Length + (i_28) : i_28)].Length + (1) : 1)]));
                i_28 = (i_28 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
