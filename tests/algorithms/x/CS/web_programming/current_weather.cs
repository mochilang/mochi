// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string OPENWEATHERMAP_API_KEY_0 = "demo";
    static string WEATHERSTACK_API_KEY_1 = "";
    static string OPENWEATHERMAP_URL_BASE_2 = "https://api.openweathermap.org/data/2.5/weather";
    static string WEATHERSTACK_URL_BASE_3 = "http://api.weatherstack.com/current";
    public static Dictionary<string, string> http_get(string url_4, Dictionary<string, string> params_5) {
        if ((params_5.ContainsKey("q"))) {
            return new Dictionary<string, string>{{"location", (params_5.ContainsKey("q") ? params_5["q"] : "")}, {"temperature", "20"}};
        };
        return new Dictionary<string, string>{{"location", (params_5.ContainsKey("query") ? params_5["query"] : "")}, {"temperature", "20"}};
    }

    public static Dictionary<string, Dictionary<string, string>>[] current_weather(string location_6) {
        Dictionary<string, Dictionary<string, string>>[] weather_data_7 = new Dictionary<string, Dictionary<string, string>>[]{};
        if ((OPENWEATHERMAP_API_KEY_0 != "")) {
            Dictionary<string, string> params_openweathermap_8 = new Dictionary<string, string>{{"q", location_6}, {"appid", OPENWEATHERMAP_API_KEY_0}};
            Dictionary<string, string> response_openweathermap_9 = Program.http_get(OPENWEATHERMAP_URL_BASE_2, params_openweathermap_8);
            weather_data_7 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, Dictionary<string, string>>>(weather_data_7, new Dictionary<string, Dictionary<string, string>>{{"OpenWeatherMap", response_openweathermap_9}})));
        };
        if ((WEATHERSTACK_API_KEY_1 != "")) {
            Dictionary<string, string> params_weatherstack_10 = new Dictionary<string, string>{{"query", location_6}, {"access_key", WEATHERSTACK_API_KEY_1}};
            Dictionary<string, string> response_weatherstack_11 = Program.http_get(WEATHERSTACK_URL_BASE_3, params_weatherstack_10);
            weather_data_7 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, Dictionary<string, string>>>(weather_data_7, new Dictionary<string, Dictionary<string, string>>{{"Weatherstack", response_weatherstack_11}})));
        };
        if ((weather_data_7.Length == 0)) {
            throw new Exception("No API keys provided or no valid data returned.");
        };
        return weather_data_7;
    }

    public static void main() {
        Dictionary<string, Dictionary<string, string>>[] data_12 = Program.current_weather("New York");
        Console.WriteLine(Program._fmtTop(_fmtStr(data_12)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
