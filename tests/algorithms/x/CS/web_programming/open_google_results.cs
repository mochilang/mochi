// Generated by Mochi 0.10.61 on 2025-08-08 21:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] query_words_10 = new string[]{"mochi", "language"};
    static string query_11 = "";
    static long i_12 = 0;
    public static long index_of_substr(string s_0, string pat_1) {
        if ((pat_1.Length == 0)) {
            return 0;
        };
        long i_2 = 0;
        while ((i_2 <= (s_0.Length - pat_1.Length))) {
            long j_3 = 0;
            while ((j_3 < pat_1.Length)) {
                if ((s_0.Substring((int)((i_2 + j_3)), 1) != pat_1.Substring((int)(j_3), 1))) {
                    break;
                }
                j_3 = (j_3 + 1);
            }
            if ((j_3 == pat_1.Length)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static string first_link(string html_4) {
        long a_idx_5 = Program.index_of_substr(html_4, "<a");
        if ((a_idx_5 < 0)) {
            return "";
        };
        string href_pat_6 = "href=\"";
        long href_idx_rel_7 = Program.index_of_substr(_substr(html_4, a_idx_5, html_4.Length), href_pat_6);
        if ((href_idx_rel_7 < 0)) {
            return "";
        };
        long start_8 = ((a_idx_5 + href_idx_rel_7) + href_pat_6.Length);
        long end_9 = start_8;
        while ((end_9 < html_4.Length)) {
            if ((html_4.Substring((int)(end_9), 1) == "\"")) {
                break;
            }
            end_9 = (end_9 + 1);
        };
        return _substr(html_4, start_8, end_9);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_12 < query_words_10.Length)) {
                if ((i_12 > 0)) {
                    query_11 = (query_11 + "%20");
                }
                query_11 = (query_11 + query_words_10[(int)(i_12 < 0 ? query_words_10.Length + (i_12) : i_12)]);
                i_12 = (i_12 + 1);
            }
            string url_13 = (("https://www.google.com/search?q=" + query_11) + "&num=100");
            Console.WriteLine(Program._fmtTop("Googling....."));
            string sample_html_14 = ("<div><a href=\"https://example.com\">Example</a></div>" + "<div><a href=\"https://another.com\">Another</a></div>");
            string link_15 = Program.first_link(sample_html_14);
            if ((link_15.Length > 0)) {
                Console.WriteLine(Program._fmtTop(link_15));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
