// Generated by Mochi 0.10.61 on 2025-08-08 21:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class GitHubUser {
    public string login;
    public long id;
    public override string ToString() => $"GitHubUser {{login = \"{login}\", id = {id}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string AUTHENTICATED_USER_ENDPOINT_0 = "https://api.github.com/user";
    public static string get_header(string[][] hs_1, string key_2) {
        long i_3 = 0;
        while ((i_3 < hs_1.Length)) {
            string[] pair_4 = hs_1[(int)(i_3 < 0 ? hs_1.Length + (i_3) : i_3)];
            if ((pair_4[(int)(0 < 0 ? pair_4.Length + (0) : 0)] == key_2)) {
                return pair_4[(int)(1 < 0 ? pair_4.Length + (1) : 1)];
            }
            i_3 = (i_3 + 1);
        };
        return "";
    }

    public static GitHubUser mock_response(string url_5, string[][] headers_6) {
        if ((url_5 != AUTHENTICATED_USER_ENDPOINT_0)) {
            throw new Exception("wrong url");
        };
        string auth_7 = Program.get_header(headers_6, "Authorization");
        if ((auth_7.Length == 0)) {
            throw new Exception("missing Authorization");
        };
        if ((_substr(auth_7, 0, 6) != "token ")) {
            throw new Exception("bad token prefix");
        };
        string accept_8 = Program.get_header(headers_6, "Accept");
        if ((accept_8.Length == 0)) {
            throw new Exception("missing Accept");
        };
        return new GitHubUser{login = "test", id = 1};
    }

    public static GitHubUser fetch_github_info(string auth_token_9) {
        string[][] headers_10 = new string[][]{new string[]{"Authorization", ("token " + auth_token_9)}, new string[]{"Accept", "application/vnd.github.v3+json"}};
        return Program.mock_response(AUTHENTICATED_USER_ENDPOINT_0, headers_10);
    }

    public static void test_fetch_github_info() {
        GitHubUser result_11 = Program.fetch_github_info("token");
        if ((result_11.login != "test")) {
            throw new Exception("login mismatch");
        };
        if ((result_11.id != 1)) {
            throw new Exception("id mismatch");
        };
        Console.WriteLine(Program._fmtTop(result_11.login));
        Console.WriteLine(Program._fmtTop(_fmtStr(result_11.id)));
    }

    public static void main() {
        Program.test_fetch_github_info();
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
