// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long find(string text_0, string pattern_1, long start_2) {
        long i_3 = start_2;
        long limit_4 = (text_0.Length - pattern_1.Length);
        while ((i_3 <= limit_4)) {
            if ((_substr(text_0, i_3, (i_3 + pattern_1.Length)) == pattern_1)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static string stock_price(string symbol_5) {
        Dictionary<string, string> pages_6 = new Dictionary<string, string>{{"AAPL", "<span data-testid=\"qsp-price\">228.43</span>"}, {"AMZN", "<span data-testid=\"qsp-price\">201.85</span>"}, {"IBM", "<span data-testid=\"qsp-price\">210.30</span>"}, {"GOOG", "<span data-testid=\"qsp-price\">177.86</span>"}, {"MSFT", "<span data-testid=\"qsp-price\">414.82</span>"}, {"ORCL", "<span data-testid=\"qsp-price\">188.87</span>"}};
        if ((pages_6.ContainsKey(symbol_5))) {
            string html_7 = (pages_6.ContainsKey(symbol_5) ? pages_6[symbol_5] : "");
            string marker_8 = "<span data-testid=\"qsp-price\">";
            long start_idx_9 = Program.find(html_7, marker_8, 0);
            if ((start_idx_9 != -1)) {
                long price_start_10 = (start_idx_9 + marker_8.Length);
                long end_idx_11 = Program.find(html_7, "</span>", price_start_10);
                if ((end_idx_11 != -1)) {
                    return _substr(html_7, price_start_10, end_idx_11);
                }
            }
        };
        return "No <fin-streamer> tag with the specified data-testid attribute found.";
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (string symbol_12 in new string[]{"AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL"}) {
                Console.WriteLine(Program._fmtTop(((("Current " + symbol_12) + " stock price is ") + Program.stock_price(symbol_12))));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
