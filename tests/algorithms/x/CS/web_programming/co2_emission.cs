// Generated by Mochi 0.10.63 on 2025-08-11 15:03 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Net.Http;
using System.Numerics;
using System.Collections;

class Intensity {
    public long forecast;
    public long actual;
    public string index;
    public override string ToString() => $"Intensity {{forecast = {forecast}, actual = {actual}, index = \"{index}\"}}";
}
class Entry {
    public string from;
    public string to;
    public Intensity intensity;
    public override string ToString() => $"Entry {{from = \"{from}\", to = \"{to}\", intensity = {intensity}}}";
}
class Response {
    public Entry[] data;
    public override string ToString() => $"Response {{data = {data}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static object _fetch(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            var resp = client.GetAsync(url).Result;
            using var stream = resp.Content.ReadAsStream();
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            return JsonSerializer.Deserialize<object>(stream, opts);
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            return JsonSerializer.Deserialize<object>(stream, opts);
        }
    }
    static string _fetch(string url, object optsObj) {
        if (!(optsObj is System.Collections.IDictionary o)) return Convert.ToString(_fetch(url));
        var tmp = new Dictionary<string, object>();
        foreach (System.Collections.DictionaryEntry kv in o) {
            var k = kv.Key.ToString();
            var i = k.IndexOf('_');
            if (i >= 0) k = k.Substring(0, i);
            tmp[k] = kv.Value;
        }
        var method = tmp.ContainsKey("method") ? Convert.ToString(tmp["method"]) : "GET";
        Dictionary<string, string>? headers = null;
        if (tmp.ContainsKey("headers")) {
            headers = new Dictionary<string, string>();
            if (tmp["headers"] is System.Collections.IDictionary hd) {
                foreach (System.Collections.DictionaryEntry kv in hd) {
                    headers[kv.Key.ToString()] = kv.Value.ToString();
                }
            }
        }
        object bodyObj = null;
        if (tmp.ContainsKey("body")) bodyObj = tmp["body"];
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            if (method == "POST") {
                var jsonBody = bodyObj == null ? "" : JsonSerializer.Serialize(bodyObj);
                var content = new StringContent(jsonBody);
                if (headers != null) foreach (var kv in headers) content.Headers.TryAddWithoutValidation(kv.Key, kv.Value);
                var respPost = client.PostAsync(url, content).Result;
                return respPost.Content.ReadAsStringAsync().Result;
            }
            if (headers != null) foreach (var kv in headers) client.DefaultRequestHeaders.TryAddWithoutValidation(kv.Key, kv.Value);
            var resp = client.GetAsync(url).Result;
            return resp.Content.ReadAsStringAsync().Result;
        }
        return Convert.ToString(_fetch(url));
    }
    static Response _fetch_Response(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            var resp = client.GetAsync(url).Result;
            using var stream = resp.Content.ReadAsStream();
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<Response>(stream, opts);
            return res == null ? new Response() : res;
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<Response>(stream, opts);
            return res == null ? new Response() : res;
        }
    }
    static Response _fetch_Response(string url, object optsObj) {
        var str = _fetch(url, optsObj);
        var opts = new JsonSerializerOptions{ IncludeFields = true };
        var res = JsonSerializer.Deserialize<Response>(str, opts);
        return res == null ? new Response() : res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string BASE_URL_0 = "https://api.carbonintensity.org.uk/intensity";
    public static long fetch_last_half_hour() {
        Response resp_1 = _fetch_Response(BASE_URL_0, new Dictionary<string, double>{{"timeout", 10.0}});
        Entry entry_2 = _idx(resp_1.data, 0);
        return entry_2.intensity.actual;
    }

    public static Entry[] fetch_from_to(string start_3, string end_4) {
        string url_5 = ((((BASE_URL_0 + "/") + start_3) + "/") + end_4);
        Response resp_6 = _fetch_Response(url_5, new Dictionary<string, double>{{"timeout", 10.0}});
        return resp_6.data;
    }

    public static void main() {
        Entry[] entries_7 = Program.fetch_from_to("2020-10-01", "2020-10-03");
        long i_8 = 0;
        while ((i_8 < entries_7.Length)) {
            Entry e_9 = _idx(entries_7, i_8);
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("from"), Program._fmtTop(e_9.from), Program._fmtTop("to"), Program._fmtTop(e_9.to), Program._fmtTop(":"), Program._fmtTop(e_9.intensity.actual)}));
            i_8 = (i_8 + 1);
        };
        long last_10 = Program.fetch_last_half_hour();
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("fetch_last_half_hour() ="), Program._fmtTop(last_10)}));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
