// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class CovidData {
    public long cases;
    public long deaths;
    public long recovered;
    public override string ToString() => $"CovidData {{cases = {cases}, deaths = {deaths}, recovered = {recovered}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long parse_int(string s_0) {
        long value_1 = 0;
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            string ch_3 = _substr(s_0, i_2, (i_2 + 1));
            if ((ch_3 == ",")) {
                i_2 = (i_2 + 1);
                continue;
            }
            value_1 = ((value_1 * 10) + long.Parse(ch_3));
            i_2 = (i_2 + 1);
        };
        return value_1;
    }

    public static long find(string haystack_4, string needle_5, long start_6) {
        long nlen_7 = needle_5.Length;
        long i_8 = start_6;
        while ((i_8 <= (haystack_4.Length - nlen_7))) {
            long j_9 = 0;
            bool matched_10 = true;
            while ((j_9 < nlen_7)) {
                if ((_substr(haystack_4, (i_8 + j_9), ((i_8 + j_9) + 1)) != _substr(needle_5, j_9, (j_9 + 1)))) {
                    matched_10 = false;
                    break;
                }
                j_9 = (j_9 + 1);
            }
            if (matched_10) {
                return i_8;
            }
            i_8 = (i_8 + 1);
        };
        return (0 - 1);
    }

    public static long[] extract_numbers(string html_11) {
        long[] nums_12 = new long[]{};
        long pos_13 = 0;
        string start_tag_14 = "<span>";
        string end_tag_15 = "</span>";
        while (true) {
            long s_16 = Program.find(html_11, start_tag_14, pos_13);
            if ((s_16 == (0 - 1))) {
                break;
            }
            long content_start_17 = (s_16 + start_tag_14.Length);
            long e_18 = Program.find(html_11, end_tag_15, content_start_17);
            if ((e_18 == (0 - 1))) {
                break;
            }
            string num_str_19 = _substr(html_11, content_start_17, e_18);
            nums_12 = (Enumerable.ToArray(Enumerable.Append<long>(nums_12, Program.parse_int(num_str_19))));
            pos_13 = (e_18 + end_tag_15.Length);
        };
        return nums_12;
    }

    public static CovidData covid_stats(string html_20) {
        long[] nums_21 = Program.extract_numbers(html_20);
        return new CovidData{cases = nums_21[(int)(0 < 0 ? nums_21.Length + (0) : 0)], deaths = nums_21[(int)(1 < 0 ? nums_21.Length + (1) : 1)], recovered = nums_21[(int)(2 < 0 ? nums_21.Length + (2) : 2)]};
    }

    public static void main() {
        string sample_html_22 = (("<div class=\"maincounter-number\"><span>123456</span></div>" + "<div class=\"maincounter-number\"><span>7890</span></div>") + "<div class=\"maincounter-number\"><span>101112</span></div>");
        CovidData stats_23 = Program.covid_stats(sample_html_22);
        Console.WriteLine(Program._fmtTop(("Total COVID-19 cases in the world: " + _fmtStr(stats_23.cases))));
        Console.WriteLine(Program._fmtTop(("Total deaths due to COVID-19 in the world: " + _fmtStr(stats_23.deaths))));
        Console.WriteLine(Program._fmtTop(("Total COVID-19 patients recovered in the world: " + _fmtStr(stats_23.recovered))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
