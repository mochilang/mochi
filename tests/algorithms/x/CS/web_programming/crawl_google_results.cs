// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long index_of_from(string s_0, string sub_1, long start_2) {
        long i_3 = start_2;
        long max_4 = (s_0.Length - sub_1.Length);
        while ((i_3 <= max_4)) {
            if ((_substr(s_0, i_3, (i_3 + sub_1.Length)) == sub_1)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static Dictionary<string, string>[] extract_links(string html_5) {
        Dictionary<string, string>[] res_6 = new Dictionary<string, string>[]{};
        long i_7 = 0;
        while (true) {
            long tag_start_8 = Program.index_of_from(html_5, "<a class=\"eZt8xd\"", i_7);
            if ((tag_start_8 == -1)) {
                break;
            }
            long href_start_9 = Program.index_of_from(html_5, "href=\"", tag_start_8);
            if ((href_start_9 == -1)) {
                break;
            }
            href_start_9 = (href_start_9 + "href=\"".Length);
            long href_end_10 = Program.index_of_from(html_5, "\"", href_start_9);
            if ((href_end_10 == -1)) {
                break;
            }
            string href_11 = _substr(html_5, href_start_9, href_end_10);
            long text_start_12 = (Program.index_of_from(html_5, ">", href_end_10) + 1);
            long text_end_13 = Program.index_of_from(html_5, "</a>", text_start_12);
            if ((text_end_13 == -1)) {
                break;
            }
            string text_14 = _substr(html_5, text_start_12, text_end_13);
            Dictionary<string, string> link_15 = new Dictionary<string, string>{{"href", href_11}, {"text", text_14}};
            res_6 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, string>>(res_6, link_15)));
            i_7 = (text_end_13 + "</a>".Length);
        };
        return res_6;
    }

    public static void main() {
        string html_16 = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" + "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") + "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>");
        Dictionary<string, string>[] links_17 = Program.extract_links(html_16);
        Console.WriteLine(Program._fmtTop(_fmtStr(links_17.Length)));
        long i_18 = 0;
        while (((i_18 < links_17.Length) && (i_18 < 5))) {
            Dictionary<string, string> link_19 = links_17[(int)(i_18 < 0 ? links_17.Length + (i_18) : i_18)];
            string href_20 = (link_19.ContainsKey("href") ? link_19["href"] : "");
            string text_21 = (link_19.ContainsKey("text") ? link_19["text"] : "");
            if ((text_21 == "Maps")) {
                Console.WriteLine(Program._fmtTop(href_20));
            } else {
                Console.WriteLine(Program._fmtTop(("https://google.com" + href_20)));
            }
            i_18 = (i_18 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
