// Generated by Mochi 0.10.61 on 2025-08-08 21:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Request {
    public string method;
    public Dictionary<string, string> post;
    public override string ToString() => $"Request {{method = \"{method}\", post = {post}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Request get_request_14 = new Request{method = "GET", post = new Dictionary<string, string>{}};
    public static Dictionary<string, bool> http_post(string secret_0, string client_1) {
        bool success_2 = ((secret_0 == "secretKey") && (client_1 == "clientKey"));
        return new Dictionary<string, bool>{{"success", success_2}};
    }

    public static bool authenticate(string username_3, string password_4) {
        return ((username_3 == "user") && (password_4 == "pass"));
    }

    public static void login(string _user_5) {
    }

    public static string render(string page_6) {
        return ("render:" + page_6);
    }

    public static string redirect(string url_7) {
        return ("redirect:" + url_7);
    }

    public static string login_using_recaptcha(Request request_8) {
        string secret_key_9 = "secretKey";
        if ((request_8.method != "POST")) {
            return Program.render("login.html");
        };
        string username_10 = (request_8.post.ContainsKey("username") ? request_8.post["username"] : "");
        string password_11 = (request_8.post.ContainsKey("password") ? request_8.post["password"] : "");
        string client_key_12 = (request_8.post.ContainsKey("g-recaptcha-response") ? request_8.post["g-recaptcha-response"] : "");
        Dictionary<string, bool> response_13 = Program.http_post(secret_key_9, client_key_12);
        if ((response_13.ContainsKey("success") ? response_13["success"] : false)) {
            if (Program.authenticate(username_10, password_11)) {
                Program.login(username_10);
                return Program.redirect("/your-webpage");
            }
        };
        return Program.render("login.html");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.login_using_recaptcha(get_request_14)));
            Request ok_request_15 = new Request{method = "POST", post = new Dictionary<string, string>{{"username", "user"}, {"password", "pass"}, {"g-recaptcha-response", "clientKey"}}};
            Console.WriteLine(Program._fmtTop(Program.login_using_recaptcha(ok_request_15)));
            Request bad_request_16 = new Request{method = "POST", post = new Dictionary<string, string>{{"username", "user"}, {"password", "wrong"}, {"g-recaptcha-response", "clientKey"}}};
            Console.WriteLine(Program._fmtTop(Program.login_using_recaptcha(bad_request_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
