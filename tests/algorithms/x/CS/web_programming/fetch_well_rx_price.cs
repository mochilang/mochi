// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string SAMPLE_HTML_0 = "<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>";
    static Dictionary<string, string>[] pharmacy_price_list_20 = Program.fetch_pharmacy_and_price_list("aspirin", "30303");
    public static long find_substring(string s_1, string sub_2, long from_3) {
        long i_4 = from_3;
        while ((i_4 <= (s_1.Length - sub_2.Length))) {
            long j_5 = 0;
            while (((j_5 < sub_2.Length) && (_substr(s_1, (i_4 + j_5), ((i_4 + j_5) + 1)) == _substr(sub_2, j_5, (j_5 + 1))))) {
                j_5 = (j_5 + 1);
            }
            if ((j_5 == sub_2.Length)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    public static Dictionary<string, string>[] fetch_pharmacy_and_price_list(string drug_name_6, string zip_code_7) {
        if (((drug_name_6 == "") || (zip_code_7 == ""))) {
            return (Dictionary<string, string>[])null;
        };
        Dictionary<string, string>[] results_8 = new Dictionary<string, string>[]{};
        long pos_9 = 0;
        string block_tag_10 = "<div class=\"grid-x pharmCard\">";
        string name_tag_11 = "<p class=\"list-title\">";
        string price_tag_12 = "<span class=\"price price-large\">";
        while (true) {
            long div_idx_13 = Program.find_substring(SAMPLE_HTML_0, block_tag_10, pos_9);
            if ((div_idx_13 < 0)) {
                break;
            }
            long name_start_14 = Program.find_substring(SAMPLE_HTML_0, name_tag_11, div_idx_13);
            if ((name_start_14 < 0)) {
                break;
            }
            name_start_14 = (name_start_14 + name_tag_11.Length);
            long name_end_15 = Program.find_substring(SAMPLE_HTML_0, "</p>", name_start_14);
            if ((name_end_15 < 0)) {
                break;
            }
            string name_16 = _substr(SAMPLE_HTML_0, name_start_14, name_end_15);
            long price_start_17 = Program.find_substring(SAMPLE_HTML_0, price_tag_12, name_end_15);
            if ((price_start_17 < 0)) {
                break;
            }
            price_start_17 = (price_start_17 + price_tag_12.Length);
            long price_end_18 = Program.find_substring(SAMPLE_HTML_0, "</span>", price_start_17);
            if ((price_end_18 < 0)) {
                break;
            }
            string price_19 = _substr(SAMPLE_HTML_0, price_start_17, price_end_18);
            results_8 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, string>>(results_8, new Dictionary<string, string>{{"pharmacy_name", name_16}, {"price", price_19}})));
            pos_9 = price_end_18;
        };
        return results_8;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if ((!Enumerable.SequenceEqual<Dictionary<string, string>>(pharmacy_price_list_20, null))) {
                long i_21 = 0;
                while ((i_21 < pharmacy_price_list_20.Length)) {
                    Dictionary<string, string> entry_22 = pharmacy_price_list_20[(int)(i_21 < 0 ? pharmacy_price_list_20.Length + (i_21) : i_21)];
                    Console.WriteLine(Program._fmtTop(((("Pharmacy: " + (entry_22.ContainsKey("pharmacy_name") ? entry_22["pharmacy_name"] : "")) + " Price: ") + (entry_22.ContainsKey("price") ? entry_22["price"] : ""))));
                    i_21 = (i_21 + 1);
                }
            } else {
                Console.WriteLine(Program._fmtTop("No results found"));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
