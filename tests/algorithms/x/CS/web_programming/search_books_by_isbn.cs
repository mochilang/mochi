// Generated by Mochi 0.10.61 on 2025-08-08 21:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Net.Http;
using System.Numerics;
using System.Collections;

class AuthorRef {
    public string key;
    public override string ToString() => $"AuthorRef {{key = \"{key}\"}}";
}
class BookData {
    public string title;
    public string publish_date;
    public AuthorRef[] authors;
    public long number_of_pages;
    public string[] isbn_10;
    public string[] isbn_13;
    public override string ToString() => $"BookData {{title = \"{title}\", publish_date = \"{publish_date}\", authors = {authors}, number_of_pages = {number_of_pages}, isbn_10 = {isbn_10}, isbn_13 = {isbn_13}}}";
}
class AuthorData {
    public string name;
    public override string ToString() => $"AuthorData {{name = \"{name}\"}}";
}
class BookSummary {
    public string title;
    public string publish_date;
    public string authors;
    public long number_of_pages;
    public string isbn_10;
    public string isbn_13;
    public override string ToString() => $"BookSummary {{title = \"{title}\", publish_date = \"{publish_date}\", authors = \"{authors}\", number_of_pages = {number_of_pages}, isbn_10 = \"{isbn_10}\", isbn_13 = \"{isbn_13}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static object _fetch(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            using var stream = client.GetStreamAsync(url).Result;
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            return JsonSerializer.Deserialize<object>(stream, opts);
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            return JsonSerializer.Deserialize<object>(stream, opts);
        }
    }
    static AuthorData _fetch_AuthorData(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            using var stream = client.GetStreamAsync(url).Result;
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<AuthorData>(stream, opts);
            return res == null ? new AuthorData() : res;
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<AuthorData>(stream, opts);
            return res == null ? new AuthorData() : res;
        }
    }
    static BookData _fetch_BookData(string url) {
        if (url.StartsWith("http://") || url.StartsWith("https://")) {
            using var client = new HttpClient();
            using var stream = client.GetStreamAsync(url).Result;
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<BookData>(stream, opts);
            return res == null ? new BookData() : res;
        } else {
            var path = url;
            if (!System.IO.Path.IsPathRooted(path)) {
                var root = Environment.GetEnvironmentVariable("MOCHI_ROOT");
                if (!string.IsNullOrEmpty(root)) {
                    var combined = System.IO.Path.Combine(root, path.Replace('/', System.IO.Path.DirectorySeparatorChar));
                    if (System.IO.File.Exists(combined)) path = combined;
                }
            }
            using var stream = System.IO.File.OpenRead(path);
            var opts = new JsonSerializerOptions{ IncludeFields = true };
            var res = JsonSerializer.Deserialize<BookData>(stream, opts);
            return res == null ? new BookData() : res;
        }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string join(string[] xs_0, string sep_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < xs_0.Length)) {
            if ((i_3 > 0)) {
                res_2 = (res_2 + sep_1);
            }
            res_2 = (res_2 + xs_0[(int)(i_3 < 0 ? xs_0.Length + (i_3) : i_3)]);
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long count_char(string s_4, string ch_5) {
        long cnt_6 = 0;
        long i_7 = 0;
        while ((i_7 < s_4.Length)) {
            if ((_substr(s_4, i_7, (i_7 + 1)) == ch_5)) {
                cnt_6 = (cnt_6 + 1);
            }
            i_7 = (i_7 + 1);
        };
        return cnt_6;
    }

    public static string strip(string s_8) {
        long start_9 = 0;
        long end_10 = s_8.Length;
        while (((start_9 < end_10) && (_substr(s_8, start_9, (start_9 + 1)) == " "))) {
            start_9 = (start_9 + 1);
        };
        while (((end_10 > start_9) && (_substr(s_8, (end_10 - 1), end_10) == " "))) {
            end_10 = (end_10 - 1);
        };
        return _substr(s_8, start_9, end_10);
    }

    public static string trim_slashes(string s_11) {
        long start_12 = 0;
        long end_13 = s_11.Length;
        while (((start_12 < end_13) && (_substr(s_11, start_12, (start_12 + 1)) == "/"))) {
            start_12 = (start_12 + 1);
        };
        while (((end_13 > start_12) && (_substr(s_11, (end_13 - 1), end_13) == "/"))) {
            end_13 = (end_13 - 1);
        };
        return _substr(s_11, start_12, end_13);
    }

    public static string normalize_olid(string olid_14) {
        string stripped_15 = Program.strip(olid_14);
        string cleaned_16 = Program.trim_slashes(stripped_15);
        if ((Program.count_char(cleaned_16, "/") != 1)) {
            throw new Exception((olid_14 + " is not a valid Open Library olid"));
        };
        return cleaned_16;
    }

    public static BookData get_book_data(string olid_17) {
        string norm_18 = Program.normalize_olid(olid_17);
        string url_19 = (("https://openlibrary.org/" + norm_18) + ".json");
        BookData data_20 = _fetch_BookData(url_19);
        return data_20;
    }

    public static AuthorData get_author_data(string olid_21) {
        string norm_22 = Program.normalize_olid(olid_21);
        string url_23 = (("https://openlibrary.org/" + norm_22) + ".json");
        AuthorData data_24 = _fetch_AuthorData(url_23);
        return data_24;
    }

    public static BookSummary summarize_book(BookData book_25) {
        string[] names_26 = new string[]{};
        long i_27 = 0;
        while ((i_27 < book_25.authors.Length)) {
            AuthorRef ref_28 = book_25.authors[(int)(i_27 < 0 ? book_25.authors.Length + (i_27) : i_27)];
            AuthorData auth_29 = Program.get_author_data(ref_28.key);
            names_26 = (Enumerable.ToArray(Enumerable.Append<string>(names_26, auth_29.name)));
            i_27 = (i_27 + 1);
        };
        return new BookSummary{title = book_25.title, publish_date = book_25.publish_date, authors = Program.join(names_26, ", "), number_of_pages = book_25.number_of_pages, isbn_10 = Program.join(book_25.isbn_10, ", "), isbn_13 = Program.join(book_25.isbn_13, ", ")};
    }

    public static void main() {
        BookData book_30 = Program.get_book_data("isbn/0140328726");
        BookSummary summary_31 = Program.summarize_book(book_30);
        Console.WriteLine(Program._fmtTop(("Title: " + summary_31.title)));
        Console.WriteLine(Program._fmtTop(("Publish date: " + summary_31.publish_date)));
        Console.WriteLine(Program._fmtTop(("Authors: " + summary_31.authors)));
        Console.WriteLine(Program._fmtTop(("Number of pages: " + _fmtStr(summary_31.number_of_pages))));
        Console.WriteLine(Program._fmtTop(("ISBN (10): " + summary_31.isbn_10)));
        Console.WriteLine(Program._fmtTop(("ISBN (13): " + summary_31.isbn_13)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
