// Generated by Mochi 0.10.63 on 2025-08-11 15:03 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string DIGITS_0 = "0123456789";
    public static bool is_digit(string ch_1) {
        long i_2 = 0;
        while ((i_2 < DIGITS_0.Length)) {
            if ((DIGITS_0.Substring((int)(i_2), 1) == ch_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static long find_substring(string haystack_3, string needle_4) {
        long i_5 = 0;
        while ((i_5 <= (haystack_3.Length - needle_4.Length))) {
            long j_6 = 0;
            while ((j_6 < needle_4.Length)) {
                if ((haystack_3.Substring((int)((i_5 + j_6)), 1) != needle_4.Substring((int)(j_6), 1))) {
                    break;
                }
                j_6 = (j_6 + 1);
            }
            if ((j_6 == needle_4.Length)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    public static string extract_citation(string html_7) {
        string marker_8 = "Cited by ";
        long idx_9 = Program.find_substring(html_7, marker_8);
        if ((idx_9 < 0)) {
            return "";
        };
        long pos_10 = (idx_9 + marker_8.Length);
        string result_11 = "";
        while ((pos_10 < html_7.Length)) {
            string ch_12 = html_7.Substring((int)(pos_10), 1);
            if ((!Program.is_digit(ch_12))) {
                break;
            }
            result_11 = (result_11 + ch_12);
            pos_10 = (pos_10 + 1);
        };
        return result_11;
    }

    public static string get_citation(string base_url_13, Dictionary<string, string> params_14) {
        string html_15 = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>";
        return Program.extract_citation(html_15);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if ((__name__ == "__main__")) {
                Dictionary<string, string> params_16 = new Dictionary<string, string>{{"title", "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density"}, {"journal", "Chem. Mater."}, {"volume", "30"}, {"pages", "3979-3990"}, {"year", "2018"}, {"hl", "en"}};
                Console.WriteLine(Program._fmtTop(Program.get_citation("https://scholar.google.com/scholar_lookup", params_16)));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
