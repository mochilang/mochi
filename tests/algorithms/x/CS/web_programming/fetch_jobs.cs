// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Job {
    public string title;
    public string company;
    public override string ToString() => $"Job {{title = \"{title}\", company = \"{company}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string SAMPLE_HTML_0 = "<div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">Android Developer</a><span class=\"company\">ABC Corp</span></div><div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">iOS Engineer</a><span class=\"company\">XYZ Ltd</span></div>";
    public static long indexOf(string s_1, string sub_2, long start_3) {
        long n_4 = s_1.Length;
        long m_5 = sub_2.Length;
        long i_6 = start_3;
        while ((i_6 <= (n_4 - m_5))) {
            long j_7 = 0;
            bool ok_8 = true;
            while ((j_7 < m_5)) {
                if ((_substr(s_1, (i_6 + j_7), ((i_6 + j_7) + 1)) != _substr(sub_2, j_7, (j_7 + 1)))) {
                    ok_8 = false;
                    break;
                }
                j_7 = (j_7 + 1);
            }
            if (ok_8) {
                return i_6;
            }
            i_6 = (i_6 + 1);
        };
        return (0 - 1);
    }

    public static string[] splitBy(string s_9, string sep_10) {
        string[] res_11 = new string[]{};
        long start_12 = 0;
        long sepLen_13 = sep_10.Length;
        long idx_14 = Program.indexOf(s_9, sep_10, 0);
        while ((idx_14 != (0 - 1))) {
            res_11 = (Enumerable.ToArray(Enumerable.Append<string>(res_11, _substr(s_9, start_12, idx_14))));
            start_12 = (idx_14 + sepLen_13);
            idx_14 = Program.indexOf(s_9, sep_10, start_12);
        };
        res_11 = (Enumerable.ToArray(Enumerable.Append<string>(res_11, _substr(s_9, start_12, s_9.Length))));
        return res_11;
    }

    public static string between(string s_15, string startTag_16, string endTag_17) {
        long startIdx_18 = Program.indexOf(s_15, startTag_16, 0);
        if ((startIdx_18 == (0 - 1))) {
            return "";
        };
        startIdx_18 = (startIdx_18 + startTag_16.Length);
        long endIdx_19 = Program.indexOf(s_15, endTag_17, startIdx_18);
        if ((endIdx_19 == (0 - 1))) {
            return "";
        };
        return _substr(s_15, startIdx_18, endIdx_19);
    }

    public static string intToString(long n_20) {
        if ((n_20 == 0)) {
            return "0";
        };
        long num_21 = n_20;
        string digits_22 = "";
        while ((num_21 > 0)) {
            long d_23 = _mod(num_21, 10);
            digits_22 = (_substr("0123456789", d_23, (d_23 + 1)) + digits_22);
            num_21 = (num_21 / 10);
        };
        return digits_22;
    }

    public static Job[] fetch_jobs(string location_24) {
        string[] blocks_25 = Program.splitBy(SAMPLE_HTML_0, "data-tn-component=\"organicJob\"");
        Job[] jobs_26 = new Job[]{};
        long i_27 = 1;
        while ((i_27 < blocks_25.Length)) {
            string block_28 = blocks_25[(int)(i_27 < 0 ? blocks_25.Length + (i_27) : i_27)];
            string title_29 = Program.between(block_28, "data-tn-element=\"jobTitle\">", "</a>");
            string company_30 = Program.between(block_28, "class=\"company\">", "</span>");
            jobs_26 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs_26, new Job{title = title_29, company = company_30})));
            i_27 = (i_27 + 1);
        };
        return jobs_26;
    }

    public static void main() {
        Job[] jobs_31 = Program.fetch_jobs("Bangalore");
        long i_32 = 0;
        while ((i_32 < jobs_31.Length)) {
            Job j_33 = jobs_31[(int)(i_32 < 0 ? jobs_31.Length + (i_32) : i_32)];
            long idx_34 = (i_32 + 1);
            Console.WriteLine(Program._fmtTop(((((("Job " + Program.intToString(idx_34)) + " is ") + j_33.title) + " at ") + j_33.company)));
            i_32 = (i_32 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
