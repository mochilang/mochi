// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Product {
    public string title;
    public string link;
    public string price;
    public string rating;
    public string mrp;
    public double discount;
    public override string ToString() => $"Product {{title = \"{title}\", link = \"{link}\", price = \"{price}\", rating = \"{rating}\", mrp = \"{mrp}\", discount = {discount.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long find_index(string s_0, string pat_1, long start_2) {
        long i_3 = start_2;
        while ((i_3 <= (s_0.Length - pat_1.Length))) {
            long j_4 = 0;
            bool ok_5 = true;
            while ((j_4 < pat_1.Length)) {
                if ((s_0.Substring((int)((i_3 + j_4)), 1) != pat_1.Substring((int)(j_4), 1))) {
                    ok_5 = false;
                    break;
                }
                j_4 = (j_4 + 1);
            }
            if (ok_5) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static string slice_between(string s_6, string start_pat_7, string end_pat_8, long from_9) {
        long a_10 = Program.find_index(s_6, start_pat_7, from_9);
        if ((a_10 < 0)) {
            return "";
        };
        long b_11 = (a_10 + start_pat_7.Length);
        long c_12 = Program.find_index(s_6, end_pat_8, b_11);
        if ((c_12 < 0)) {
            return "";
        };
        return _substr(s_6, b_11, c_12);
    }

    public static long char_to_digit(string c_13) {
        if ((c_13 == "0")) {
            return 0;
        };
        if ((c_13 == "1")) {
            return 1;
        };
        if ((c_13 == "2")) {
            return 2;
        };
        if ((c_13 == "3")) {
            return 3;
        };
        if ((c_13 == "4")) {
            return 4;
        };
        if ((c_13 == "5")) {
            return 5;
        };
        if ((c_13 == "6")) {
            return 6;
        };
        if ((c_13 == "7")) {
            return 7;
        };
        if ((c_13 == "8")) {
            return 8;
        };
        return 9;
    }

    public static long parse_int(string txt_14) {
        long n_15 = 0;
        long i_16 = 0;
        while ((i_16 < txt_14.Length)) {
            string c_17 = txt_14.Substring((int)(i_16), 1);
            if (((string.Compare(c_17, "0") >= 0) && (string.Compare(c_17, "9") <= 0))) {
                n_15 = ((n_15 * 10) + Program.char_to_digit(c_17));
            }
            i_16 = (i_16 + 1);
        };
        return n_15;
    }

    public static Product parse_product(string block_18) {
        string href_19 = Program.slice_between(block_18, "href=\"", "\"", 0);
        string link_20 = ("https://www.amazon.in" + href_19);
        string title_21 = Program.slice_between(block_18, ">", "</a>", Program.find_index(block_18, "<a", 0));
        string price_22 = Program.slice_between(block_18, "<span class=\"a-offscreen\">", "</span>", 0);
        string rating_23 = Program.slice_between(block_18, "<span class=\"a-icon-alt\">", "</span>", 0);
        if ((rating_23.Length == 0)) {
            rating_23 = "Not available";
        };
        string mrp_24 = Program.slice_between(block_18, "<span class=\"a-price a-text-price\">", "</span>", 0);
        double disc_25 = 0.0;
        if (((mrp_24.Length > 0) && (price_22.Length > 0))) {
            long p_26 = Program.parse_int(price_22);
            long m_27 = Program.parse_int(mrp_24);
            if ((m_27 > 0)) {
                disc_25 = (Convert.ToDouble(((m_27 - p_26) * 100)) / Convert.ToDouble(m_27));
            }
        } else {
            mrp_24 = "";
            disc_25 = 0.0;
        };
        return new Product{title = title_21, link = link_20, price = price_22, rating = rating_23, mrp = mrp_24, discount = disc_25};
    }

    public static Product[] get_amazon_product_data(string product_28) {
        string html_29 = "<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>";
        Product[] out_30 = new Product[]{};
        long start_31 = 0;
        while (true) {
            long div_start_32 = Program.find_index(html_29, "<div class=\"s-result-item\"", start_31);
            if ((div_start_32 < 0)) {
                break;
            }
            long div_end_33 = Program.find_index(html_29, "</div>", div_start_32);
            if ((div_end_33 < 0)) {
                break;
            }
            string block_34 = _substr(html_29, div_start_32, div_end_33);
            out_30 = (Enumerable.ToArray(Enumerable.Append<Product>(out_30, Program.parse_product(block_34))));
            start_31 = (div_end_33 + "</div>".Length);
        };
        return out_30;
    }

    public static void main() {
        Product[] products_35 = Program.get_amazon_product_data("laptop");
        long i_36 = 0;
        while ((i_36 < products_35.Length)) {
            Product p_37 = products_35[(int)(i_36 < 0 ? products_35.Length + (i_36) : i_36)];
            Console.WriteLine(Program._fmtTop(((((((((((p_37.title + " | ") + p_37.link) + " | ") + p_37.price) + " | ") + p_37.rating) + " | ") + p_37.mrp) + " | ") + _fmtStr(p_37.discount))));
            i_36 = (i_36 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
