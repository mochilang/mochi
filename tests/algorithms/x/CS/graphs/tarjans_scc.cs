// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[][] tarjan(long[][] g_0) {
        long n_1 = g_0.Length;
        long[] stack_2 = new long[]{};
        bool[] on_stack_3 = new bool[]{};
        long[] index_of_4 = new long[]{};
        long[] lowlink_of_5 = new long[]{};
        long i_6 = 0;
        while ((i_6 < n_1)) {
            on_stack_3 = ((Func<bool[]>)(() => { var _tmp = on_stack_3.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            index_of_4 = ((Func<long[]>)(() => { var _tmp = index_of_4.ToList(); _tmp.Add((0 - 1)); return _tmp.ToArray(); }))();
            lowlink_of_5 = ((Func<long[]>)(() => { var _tmp = lowlink_of_5.ToList(); _tmp.Add((0 - 1)); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        long[][] components_7 = new long[][]{};
        Func<long, long, long> strong_connect = null;
        strong_connect = (long v_8, long index_9) => {index_of_4[(int)(v_8)] = index_9; lowlink_of_5[(int)(v_8)] = index_9; long current_index_10 = (index_9 + 1); stack_2 = ((Func<long[]>)(() => { var _tmp = stack_2.ToList(); _tmp.Add(v_8); return _tmp.ToArray(); }))(); on_stack_3[(int)(v_8)] = true; foreach (long w_11 in _idx(g_0, v_8)) {
            if ((_idx(index_of_4, w_11) == (0 - 1))) {
                current_index_10 = strong_connect(w_11, current_index_10);
                if ((_idx(lowlink_of_5, w_11) < _idx(lowlink_of_5, v_8))) {
                    lowlink_of_5[(int)(v_8)] = _idx(lowlink_of_5, w_11);
                }
            } else if (_idx(on_stack_3, w_11)) {
                if ((_idx(lowlink_of_5, w_11) < _idx(lowlink_of_5, v_8))) {
                    lowlink_of_5[(int)(v_8)] = _idx(lowlink_of_5, w_11);
                }
            }
        }; if ((_idx(lowlink_of_5, v_8) == _idx(index_of_4, v_8))) {
            long[] component_12 = new long[]{};
            long w_13 = _idx(stack_2, (stack_2.Length - 1));
            stack_2 = _slice<long>(stack_2, 0, (stack_2.Length - 1));
            on_stack_3[(int)(w_13)] = false;
            component_12 = ((Func<long[]>)(() => { var _tmp = component_12.ToList(); _tmp.Add(w_13); return _tmp.ToArray(); }))();
            while ((w_13 != v_8)) {
                w_13 = _idx(stack_2, (stack_2.Length - 1));
                stack_2 = _slice<long>(stack_2, 0, (stack_2.Length - 1));
                on_stack_3[(int)(w_13)] = false;
                component_12 = ((Func<long[]>)(() => { var _tmp = component_12.ToList(); _tmp.Add(w_13); return _tmp.ToArray(); }))();
            }
            components_7 = ((Func<long[][]>)(() => { var _tmp = components_7.ToList(); _tmp.Add(component_12); return _tmp.ToArray(); }))();
        }; return current_index_10;};
        long v_14 = 0;
        while ((v_14 < n_1)) {
            if ((_idx(index_of_4, v_14) == (0 - 1))) {
                strong_connect(v_14, 0);
            }
            v_14 = (v_14 + 1);
        };
        return components_7;
    }

    public static long[][] create_graph(long n_15, long[][] edges_16) {
        long[][] g_17 = new long[][]{};
        long i_18 = 0;
        while ((i_18 < n_15)) {
            g_17 = ((Func<long[][]>)(() => { var _tmp = g_17.ToList(); _tmp.Add(new long[]{}); return _tmp.ToArray(); }))();
            i_18 = (i_18 + 1);
        };
        foreach (long[] e_19 in edges_16) {
            long u_20 = _idx(e_19, 0);
            long v_21 = _idx(e_19, 1);
            g_17[(int)(u_20)] = ((Func<long[]>)(() => { var _tmp = _idx(g_17, u_20).ToList(); _tmp.Add(v_21); return _tmp.ToArray(); }))();
        };
        return g_17;
    }

    public static void main() {
        long n_vertices_22 = 7;
        long[] source_23 = new long[]{0, 0, 1, 2, 3, 3, 4, 4, 6};
        long[] target_24 = new long[]{1, 3, 2, 0, 1, 4, 5, 6, 5};
        long[][] edges_25 = new long[][]{};
        long i_26 = 0;
        while ((i_26 < source_23.Length)) {
            edges_25 = ((Func<long[][]>)(() => { var _tmp = edges_25.ToList(); _tmp.Add(new long[]{_idx(source_23, i_26), _idx(target_24, i_26)}); return _tmp.ToArray(); }))();
            i_26 = (i_26 + 1);
        };
        long[][] g_27 = Program.create_graph(n_vertices_22, edges_25);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.tarjan(g_27))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
