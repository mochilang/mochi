// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Edge {
    public long node;
    public long weight;
    public override string ToString() => $"Edge {{node = {node}, weight = {weight}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Edge[][] graph_21 = new Edge[][]{new Edge[]{new Edge{node = 1, weight = 10}, new Edge{node = 3, weight = 5}}, new Edge[]{new Edge{node = 2, weight = 1}, new Edge{node = 3, weight = 2}}, new Edge[]{new Edge{node = 4, weight = 4}}, new Edge[]{new Edge{node = 1, weight = 3}, new Edge{node = 2, weight = 9}, new Edge{node = 4, weight = 2}}, new Edge[]{new Edge{node = 0, weight = 7}, new Edge{node = 2, weight = 6}}};
    static long[] dist_22 = Program.dijkstra(graph_21, 0);
    public static long[] make_int_list(long n_0, long value_1) {
        long[] lst_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < n_0)) {
            lst_2 = ((Func<long[]>)(() => { var _tmp = lst_2.ToList(); _tmp.Add(value_1); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return lst_2;
    }

    public static bool[] make_bool_list(long n_4) {
        bool[] lst_5 = new bool[]{};
        long i_6 = 0;
        while ((i_6 < n_4)) {
            lst_5 = ((Func<bool[]>)(() => { var _tmp = lst_5.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        return lst_5;
    }

    public static long[] dijkstra(Edge[][] graph_7, long src_8) {
        long n_9 = graph_7.Length;
        long[] dist_10 = Program.make_int_list(n_9, 1000000000);
        bool[] visited_11 = Program.make_bool_list(n_9);
        dist_10[(int)(src_8)] = 0;
        long count_12 = 0;
        while ((count_12 < n_9)) {
            long u_13 = -1;
            long min_dist_14 = 1000000000;
            long i_15 = 0;
            while ((i_15 < n_9)) {
                if (((!_idx(visited_11, i_15)) && (_idx(dist_10, i_15) < min_dist_14))) {
                    min_dist_14 = _idx(dist_10, i_15);
                    u_13 = i_15;
                }
                i_15 = (i_15 + 1);
            }
            if ((u_13 < 0)) {
                break;
            }
            visited_11[(int)(u_13)] = true;
            long j_16 = 0;
            while ((j_16 < _idx(graph_7, u_13).Length)) {
                Edge e_17 = _idx(_idx(graph_7, u_13), j_16);
                long v_18 = e_17.node;
                long w_19 = e_17.weight;
                if ((!_idx(visited_11, v_18))) {
                    long new_dist_20 = (_idx(dist_10, u_13) + w_19);
                    if ((new_dist_20 < _idx(dist_10, v_18))) {
                        dist_10[(int)(v_18)] = new_dist_20;
                    }
                }
                j_16 = (j_16 + 1);
            }
            count_12 = (count_12 + 1);
        };
        return dist_10;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(_idx(dist_22, 0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(_idx(dist_22, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(_idx(dist_22, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(_idx(dist_22, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(_idx(dist_22, 4))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
