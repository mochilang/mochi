// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double INF_0 = 1e+09;
    public static void print_dist(double[] dist_1) {
        Console.WriteLine(Program._fmtTop("Vertex Distance"));
        long i_2 = 0;
        while ((i_2 < dist_1.Length)) {
            if ((dist_1[(int)(i_2)] >= INF_0)) {
                Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop(i_2), Program._fmtTop("\tINF")}));
            } else {
                Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop(i_2), Program._fmtTop("\t"), Program._fmtTop(Convert.ToInt64(dist_1[(int)(i_2)]))}));
            }
            i_2 = (i_2 + 1);
        };
    }

    public static long min_dist(double[] mdist_3, bool[] vset_4) {
        double min_val_5 = INF_0;
        long min_ind_6 = -1;
        long i_7 = 0;
        while ((i_7 < mdist_3.Length)) {
            if (((!vset_4[(int)(i_7)]) && (mdist_3[(int)(i_7)] < min_val_5))) {
                min_val_5 = mdist_3[(int)(i_7)];
                min_ind_6 = i_7;
            }
            i_7 = (i_7 + 1);
        };
        return min_ind_6;
    }

    public static double[] dijkstra(double[][] graph_8, long src_9) {
        long v_10 = graph_8.Length;
        double[] mdist_11 = new double[]{};
        bool[] vset_12 = new bool[]{};
        long i_13 = 0;
        while ((i_13 < v_10)) {
            mdist_11 = (Enumerable.ToArray(Enumerable.Append<double>(mdist_11, INF_0)));
            vset_12 = (Enumerable.ToArray(Enumerable.Append<bool>(vset_12, false)));
            i_13 = (i_13 + 1);
        };
        mdist_11[src_9] = 0.0;
        long count_14 = 0;
        while ((count_14 < (v_10 - 1))) {
            long u_15 = Program.min_dist(mdist_11, vset_12);
            vset_12[u_15] = true;
            long i_16 = 0;
            while ((i_16 < v_10)) {
                double alt_17 = (mdist_11[(int)(u_15)] + graph_8[(int)(u_15)][(int)(i_16)]);
                if ((((!vset_12[(int)(i_16)]) && (graph_8[(int)(u_15)][(int)(i_16)] < INF_0)) && (alt_17 < mdist_11[(int)(i_16)]))) {
                    mdist_11[i_16] = alt_17;
                }
                i_16 = (i_16 + 1);
            }
            count_14 = (count_14 + 1);
        };
        return mdist_11;
    }

    public static void main() {
        double[][] graph_18 = new double[][]{new double[]{0.0, 10.0, INF_0, INF_0, 5.0}, new double[]{INF_0, 0.0, 1.0, INF_0, 2.0}, new double[]{INF_0, INF_0, 0.0, 4.0, INF_0}, new double[]{INF_0, INF_0, 6.0, 0.0, INF_0}, new double[]{INF_0, 3.0, 9.0, 2.0, 0.0}};
        double[] dist_19 = Program.dijkstra(graph_18, 0);
        Program.print_dist(dist_19);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
