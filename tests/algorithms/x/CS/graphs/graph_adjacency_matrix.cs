// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Graph {
    public bool directed;
    public Dictionary<long, long> vertex_to_index;
    public long[][] adj_matrix;
    public override string ToString() => $"Graph {{directed = {directed}, vertex_to_index = {vertex_to_index}, adj_matrix = {adj_matrix}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Graph g_53 = Program.make_graph(new long[]{1, 2, 3}, new long[][]{new long[]{1, 2}, new long[]{2, 3}}, false);
    public static Graph make_graph(long[] vertices_0, long[][] edges_1, bool directed_2) {
        Graph g_3 = new Graph{directed = directed_2, vertex_to_index = new Dictionary<long, long>{}, adj_matrix = new long[][]{}};
        long i_4 = 0;
        while ((i_4 < vertices_0.Length)) {
            Program.add_vertex(g_3, _idx(vertices_0, i_4));
            i_4 = (i_4 + 1);
        };
        long j_5 = 0;
        while ((j_5 < edges_1.Length)) {
            long[] e_6 = _idx(edges_1, j_5);
            Program.add_edge(g_3, _idx(e_6, 0), _idx(e_6, 1));
            j_5 = (j_5 + 1);
        };
        return g_3;
    }

    public static bool contains_vertex(Graph g_7, long v_8) {
        return (g_7.vertex_to_index.ContainsKey(v_8));
    }

    public static void add_vertex(Graph g_9, long v_10) {
        if (Program.contains_vertex(g_9, v_10)) {
            throw new Exception("vertex already exists");
        };
        long[][] matrix_11 = g_9.adj_matrix;
        long i_12 = 0;
        while ((i_12 < matrix_11.Length)) {
            matrix_11[(int)(i_12)] = ((Func<long[]>)(() => { var _tmp = _idx(matrix_11, i_12).ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_12 = (i_12 + 1);
        };
        long[] row_13 = new long[]{};
        long j_14 = 0;
        while ((j_14 < (matrix_11.Length + 1))) {
            row_13 = ((Func<long[]>)(() => { var _tmp = row_13.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            j_14 = (j_14 + 1);
        };
        matrix_11 = ((Func<long[][]>)(() => { var _tmp = matrix_11.ToList(); _tmp.Add(row_13); return _tmp.ToArray(); }))();
        g_9.adj_matrix = matrix_11;
        Dictionary<long, long> idx_map_15 = g_9.vertex_to_index;
        idx_map_15[v_10] = (matrix_11.Length - 1);
        g_9.vertex_to_index = idx_map_15;
    }

    public static Dictionary<long, long> remove_key(Dictionary<long, long> m_16, long k_17) {
        Dictionary<long, long> out_18 = new Dictionary<long, long>{};
        foreach (long key_19 in m_16.Keys) {
            if ((key_19 != k_17)) {
                out_18[key_19] = (m_16.ContainsKey(key_19) ? m_16[key_19] : 0);
            }
        };
        return out_18;
    }

    public static Dictionary<long, long> decrement_indices(Dictionary<long, long> m_20, long start_21) {
        Dictionary<long, long> out_22 = new Dictionary<long, long>{};
        foreach (long key_23 in m_20.Keys) {
            long idx_24 = (m_20.ContainsKey(key_23) ? m_20[key_23] : 0);
            if ((idx_24 > start_21)) {
                out_22[key_23] = (idx_24 - 1);
            } else {
                out_22[key_23] = idx_24;
            }
        };
        return out_22;
    }

    public static void remove_vertex(Graph g_25, long v_26) {
        if ((!Program.contains_vertex(g_25, v_26))) {
            throw new Exception("vertex does not exist");
        };
        long idx_27 = (g_25.vertex_to_index.ContainsKey(v_26) ? g_25.vertex_to_index[v_26] : 0);
        long[][] new_matrix_28 = new long[][]{};
        long i_29 = 0;
        while ((i_29 < g_25.adj_matrix.Length)) {
            if ((i_29 != idx_27)) {
                long[] row_30 = _idx(g_25.adj_matrix, i_29);
                long[] new_row_31 = new long[]{};
                long j_32 = 0;
                while ((j_32 < row_30.Length)) {
                    if ((j_32 != idx_27)) {
                        new_row_31 = ((Func<long[]>)(() => { var _tmp = new_row_31.ToList(); _tmp.Add(_idx(row_30, j_32)); return _tmp.ToArray(); }))();
                    }
                    j_32 = (j_32 + 1);
                }
                new_matrix_28 = ((Func<long[][]>)(() => { var _tmp = new_matrix_28.ToList(); _tmp.Add(new_row_31); return _tmp.ToArray(); }))();
            }
            i_29 = (i_29 + 1);
        };
        g_25.adj_matrix = new_matrix_28;
        Dictionary<long, long> m_33 = Program.remove_key(g_25.vertex_to_index, v_26);
        g_25.vertex_to_index = Program.decrement_indices(m_33, idx_27);
    }

    public static void add_edge(Graph g_34, long u_35, long v_36) {
        if ((!(Program.contains_vertex(g_34, u_35) && Program.contains_vertex(g_34, v_36)))) {
            throw new Exception("missing vertex");
        };
        long i_37 = (g_34.vertex_to_index.ContainsKey(u_35) ? g_34.vertex_to_index[u_35] : 0);
        long j_38 = (g_34.vertex_to_index.ContainsKey(v_36) ? g_34.vertex_to_index[v_36] : 0);
        long[][] matrix_39 = g_34.adj_matrix;
        _idx(matrix_39, i_37)[(int)(j_38)] = 1;
        if ((!g_34.directed)) {
            _idx(matrix_39, j_38)[(int)(i_37)] = 1;
        };
        g_34.adj_matrix = matrix_39;
    }

    public static void remove_edge(Graph g_40, long u_41, long v_42) {
        if ((!(Program.contains_vertex(g_40, u_41) && Program.contains_vertex(g_40, v_42)))) {
            throw new Exception("missing vertex");
        };
        long i_43 = (g_40.vertex_to_index.ContainsKey(u_41) ? g_40.vertex_to_index[u_41] : 0);
        long j_44 = (g_40.vertex_to_index.ContainsKey(v_42) ? g_40.vertex_to_index[v_42] : 0);
        long[][] matrix_45 = g_40.adj_matrix;
        _idx(matrix_45, i_43)[(int)(j_44)] = 0;
        if ((!g_40.directed)) {
            _idx(matrix_45, j_44)[(int)(i_43)] = 0;
        };
        g_40.adj_matrix = matrix_45;
    }

    public static bool contains_edge(Graph g_46, long u_47, long v_48) {
        if ((!(Program.contains_vertex(g_46, u_47) && Program.contains_vertex(g_46, v_48)))) {
            throw new Exception("missing vertex");
        };
        long i_49 = (g_46.vertex_to_index.ContainsKey(u_47) ? g_46.vertex_to_index[u_47] : 0);
        long j_50 = (g_46.vertex_to_index.ContainsKey(v_48) ? g_46.vertex_to_index[v_48] : 0);
        long[][] matrix_51 = g_46.adj_matrix;
        return (_idx(_idx(matrix_51, i_49), j_50) == 1);
    }

    public static void clear_graph(Graph g_52) {
        g_52.vertex_to_index = new Dictionary<long, long>{};
        g_52.adj_matrix = new long[][]{};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(g_53.adj_matrix)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_edge(g_53, 1, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_edge(g_53, 2, 1))));
            Program.remove_edge(g_53, 1, 2);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_edge(g_53, 1, 2))));
            Program.remove_vertex(g_53, 2);
            Console.WriteLine(Program._fmtTop(_fmtStr(g_53.adj_matrix)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
