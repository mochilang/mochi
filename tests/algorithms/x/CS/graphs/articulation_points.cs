// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long dfs_skip(long[][] graph_0, bool[] visited_1, long skip_2, long at_3) {
        visited_1[at_3] = true;
        long count_4 = 1;
        foreach (long to_5 in graph_0[(int)(at_3)]) {
            if ((to_5 == skip_2)) {
                continue;
            }
            if ((visited_1[(int)(to_5)] == false)) {
                count_4 = (count_4 + Program.dfs_skip(graph_0, visited_1, skip_2, to_5));
            }
        };
        return count_4;
    }

    public static long[] articulation_points(long[][] graph_6) {
        long n_7 = graph_6.Length;
        long[] result_8 = new long[]{};
        long v_9 = 0;
        while ((v_9 < n_7)) {
            bool[] visited_10 = new bool[]{};
            long i_11 = 0;
            while ((i_11 < n_7)) {
                visited_10 = (Enumerable.ToArray(Enumerable.Append<bool>(visited_10, false)));
                i_11 = (i_11 + 1);
            }
            long start_12 = 0;
            while (((start_12 == v_9) && (start_12 < n_7))) {
                start_12 = (start_12 + 1);
            }
            long reach_13 = Program.dfs_skip(graph_6, visited_10, v_9, start_12);
            if ((reach_13 < (n_7 - 1))) {
                result_8 = (Enumerable.ToArray(Enumerable.Append<long>(result_8, v_9)));
                Console.WriteLine(Program._fmtTop(v_9));
            }
            v_9 = (v_9 + 1);
        };
        return result_8;
    }

    public static void main() {
        long[][] graph_14 = new long[][]{new long[]{1, 2}, new long[]{0, 2}, new long[]{0, 1, 3, 5}, new long[]{2, 4}, new long[]{3}, new long[]{2, 6, 8}, new long[]{5, 7}, new long[]{6, 8}, new long[]{5, 7}};
        Program.articulation_points(graph_14);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
