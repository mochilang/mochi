// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Edge {
    public long to;
    public long weight;
    public override string ToString() => $"Edge {{to = {to}, weight = {weight}}}";
}
class Pair {
    public long u;
    public long v;
    public override string ToString() => $"Pair {{u = {u}, v = {v}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long INF_0 = 1000000000;
    static Edge[][] adjacency_list_17 = new Edge[][]{new Edge[]{new Edge{to = 1, weight = 1}, new Edge{to = 3, weight = 3}}, new Edge[]{new Edge{to = 0, weight = 1}, new Edge{to = 2, weight = 6}, new Edge{to = 3, weight = 5}, new Edge{to = 4, weight = 1}}, new Edge[]{new Edge{to = 1, weight = 6}, new Edge{to = 4, weight = 5}, new Edge{to = 5, weight = 2}}, new Edge[]{new Edge{to = 0, weight = 3}, new Edge{to = 1, weight = 5}, new Edge{to = 4, weight = 1}}, new Edge[]{new Edge{to = 1, weight = 1}, new Edge{to = 2, weight = 5}, new Edge{to = 3, weight = 1}, new Edge{to = 5, weight = 4}}, new Edge[]{new Edge{to = 2, weight = 2}, new Edge{to = 4, weight = 4}}};
    static Pair[] mst_edges_18 = Program.prim_mst(adjacency_list_17);
    public static string pairs_to_string(Pair[] edges_1) {
        string s_2 = "[";
        long i_3 = 0;
        while ((i_3 < edges_1.Length)) {
            Pair e_4 = _idx(edges_1, i_3);
            s_2 = (((((s_2 + "(") + _fmtStr(e_4.u)) + ", ") + _fmtStr(e_4.v)) + ")");
            if ((i_3 < (edges_1.Length - 1))) {
                s_2 = (s_2 + ", ");
            }
            i_3 = (i_3 + 1);
        };
        return (s_2 + "]");
    }

    public static Pair[] prim_mst(Edge[][] graph_5) {
        long n_6 = graph_5.Length;
        bool[] visited_7 = new bool[]{};
        long[] dist_8 = new long[]{};
        long[] parent_9 = new long[]{};
        long i_10 = 0;
        while ((i_10 < n_6)) {
            visited_7 = ((Func<bool[]>)(() => { var _tmp = visited_7.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            dist_8 = ((Func<long[]>)(() => { var _tmp = dist_8.ToList(); _tmp.Add(INF_0); return _tmp.ToArray(); }))();
            parent_9 = ((Func<long[]>)(() => { var _tmp = parent_9.ToList(); _tmp.Add(-1); return _tmp.ToArray(); }))();
            i_10 = (i_10 + 1);
        };
        dist_8[(int)(0)] = 0;
        Pair[] result_11 = new Pair[]{};
        long count_12 = 0;
        while ((count_12 < n_6)) {
            long min_val_13 = INF_0;
            long u_14 = 0;
            long v_15 = 0;
            while ((v_15 < n_6)) {
                if (((_idx(visited_7, v_15) == false) && (_idx(dist_8, v_15) < min_val_13))) {
                    min_val_13 = _idx(dist_8, v_15);
                    u_14 = v_15;
                }
                v_15 = (v_15 + 1);
            }
            if ((min_val_13 == INF_0)) {
                break;
            }
            visited_7[(int)(u_14)] = true;
            if ((u_14 != 0)) {
                result_11 = ((Func<Pair[]>)(() => { var _tmp = result_11.ToList(); _tmp.Add(new Pair{u = _idx(parent_9, u_14), v = u_14}); return _tmp.ToArray(); }))();
            }
            foreach (Edge e_16 in _idx(graph_5, u_14)) {
                if (((_idx(visited_7, e_16.to) == false) && (e_16.weight < _idx(dist_8, e_16.to)))) {
                    dist_8[(int)(e_16.to)] = e_16.weight;
                    parent_9[(int)(e_16.to)] = u_14;
                }
            }
            count_12 = (count_12 + 1);
        };
        return result_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.pairs_to_string(mst_edges_18)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
