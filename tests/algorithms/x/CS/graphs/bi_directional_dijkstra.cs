// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Edge {
    public string to;
    public long cost;
    public override string ToString() => $"Edge {{to = \"{to}\", cost = {cost}}}";
}
class QItem {
    public string node;
    public long cost;
    public override string ToString() => $"QItem {{node = \"{node}\", cost = {cost}}}";
}
class PassResult {
    public QItem[] queue;
    public long dist;
    public override string ToString() => $"PassResult {{queue = {queue}, dist = {dist}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, Edge[]> graph_fwd_46 = new Dictionary<string, Edge[]>{{"B", new Edge[]{new Edge{to = "C", cost = 1}}}, {"C", new Edge[]{new Edge{to = "D", cost = 1}}}, {"D", new Edge[]{new Edge{to = "F", cost = 1}}}, {"E", new Edge[]{new Edge{to = "B", cost = 1}, new Edge{to = "G", cost = 2}}}, {"F", new Edge[]{}}, {"G", new Edge[]{new Edge{to = "F", cost = 1}}}};
    static Dictionary<string, Edge[]> graph_bwd_47 = new Dictionary<string, Edge[]>{{"B", new Edge[]{new Edge{to = "E", cost = 1}}}, {"C", new Edge[]{new Edge{to = "B", cost = 1}}}, {"D", new Edge[]{new Edge{to = "C", cost = 1}}}, {"F", new Edge[]{new Edge{to = "D", cost = 1}, new Edge{to = "G", cost = 1}}}, {"E", new Edge[]{}}, {"G", new Edge[]{new Edge{to = "E", cost = 2}}}};
    public static long get_min_index(QItem[] q_0) {
        long idx_1 = 0;
        long i_2 = 1;
        while ((i_2 < q_0.Length)) {
            if ((_idx(q_0, i_2).cost < _idx(q_0, idx_1).cost)) {
                idx_1 = i_2;
            }
            i_2 = (i_2 + 1);
        };
        return idx_1;
    }

    public static QItem[] remove_at(QItem[] q_3, long idx_4) {
        QItem[] res_5 = new QItem[]{};
        long i_6 = 0;
        while ((i_6 < q_3.Length)) {
            if ((i_6 != idx_4)) {
                res_5 = ((Func<QItem[]>)(() => { var _tmp = res_5.ToList(); _tmp.Add(_idx(q_3, i_6)); return _tmp.ToArray(); }))();
            }
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static PassResult pass_and_relaxation(Dictionary<string, Edge[]> graph_7, string v_8, Dictionary<string, bool> visited_forward_9, Dictionary<string, bool> visited_backward_10, Dictionary<string, long> cst_fwd_11, Dictionary<string, long> cst_bwd_12, QItem[] queue_13, Dictionary<string, string> parent_14, long shortest_distance_15) {
        QItem[] q_16 = queue_13;
        long sd_17 = shortest_distance_15;
        foreach (Edge e_18 in (graph_7.ContainsKey(v_8) ? graph_7[v_8] : null)) {
            string nxt_19 = e_18.to;
            long d_20 = e_18.cost;
            if ((visited_forward_9.ContainsKey(nxt_19))) {
                continue;
            }
            long old_cost_21 = ((cst_fwd_11.ContainsKey(nxt_19)) ? (cst_fwd_11.ContainsKey(nxt_19) ? cst_fwd_11[nxt_19] : 0) : 2147483647);
            long new_cost_22 = ((cst_fwd_11.ContainsKey(v_8) ? cst_fwd_11[v_8] : 0) + d_20);
            if ((new_cost_22 < old_cost_21)) {
                q_16 = ((Func<QItem[]>)(() => { var _tmp = q_16.ToList(); _tmp.Add(new QItem{node = nxt_19, cost = new_cost_22}); return _tmp.ToArray(); }))();
                cst_fwd_11[nxt_19] = new_cost_22;
                parent_14[nxt_19] = v_8;
            }
            if ((visited_backward_10.ContainsKey(nxt_19))) {
                long alt_23 = (((cst_fwd_11.ContainsKey(v_8) ? cst_fwd_11[v_8] : 0) + d_20) + (cst_bwd_12.ContainsKey(nxt_19) ? cst_bwd_12[nxt_19] : 0));
                if ((alt_23 < sd_17)) {
                    sd_17 = alt_23;
                }
            }
        };
        return new PassResult{queue = q_16, dist = sd_17};
    }

    public static long bidirectional_dij(string source_24, string destination_25, Dictionary<string, Edge[]> graph_forward_26, Dictionary<string, Edge[]> graph_backward_27) {
        long shortest_path_distance_28 = -1;
        Dictionary<string, bool> visited_forward_29 = new Dictionary<string, bool>{};
        Dictionary<string, bool> visited_backward_30 = new Dictionary<string, bool>{};
        Dictionary<string, long> cst_fwd_31 = new Dictionary<string, long>{};
        cst_fwd_31[source_24] = 0;
        Dictionary<string, long> cst_bwd_32 = new Dictionary<string, long>{};
        cst_bwd_32[destination_25] = 0;
        Dictionary<string, string> parent_forward_33 = new Dictionary<string, string>{};
        parent_forward_33[source_24] = "";
        Dictionary<string, string> parent_backward_34 = new Dictionary<string, string>{};
        parent_backward_34[destination_25] = "";
        QItem[] queue_forward_35 = new QItem[]{};
        queue_forward_35 = ((Func<QItem[]>)(() => { var _tmp = queue_forward_35.ToList(); _tmp.Add(new QItem{node = source_24, cost = 0}); return _tmp.ToArray(); }))();
        QItem[] queue_backward_36 = new QItem[]{};
        queue_backward_36 = ((Func<QItem[]>)(() => { var _tmp = queue_backward_36.ToList(); _tmp.Add(new QItem{node = destination_25, cost = 0}); return _tmp.ToArray(); }))();
        long shortest_distance_37 = 2147483647;
        if ((source_24 == destination_25)) {
            return 0;
        };
        while (((queue_forward_35.Length > 0) && (queue_backward_36.Length > 0))) {
            long idx_f_38 = Program.get_min_index(queue_forward_35);
            QItem item_f_39 = _idx(queue_forward_35, idx_f_38);
            queue_forward_35 = Program.remove_at(queue_forward_35, idx_f_38);
            string v_fwd_40 = item_f_39.node;
            visited_forward_29[v_fwd_40] = true;
            long idx_b_41 = Program.get_min_index(queue_backward_36);
            QItem item_b_42 = _idx(queue_backward_36, idx_b_41);
            queue_backward_36 = Program.remove_at(queue_backward_36, idx_b_41);
            string v_bwd_43 = item_b_42.node;
            visited_backward_30[v_bwd_43] = true;
            PassResult res_f_44 = Program.pass_and_relaxation(graph_forward_26, v_fwd_40, visited_forward_29, visited_backward_30, cst_fwd_31, cst_bwd_32, queue_forward_35, parent_forward_33, shortest_distance_37);
            queue_forward_35 = res_f_44.queue;
            shortest_distance_37 = res_f_44.dist;
            PassResult res_b_45 = Program.pass_and_relaxation(graph_backward_27, v_bwd_43, visited_backward_30, visited_forward_29, cst_bwd_32, cst_fwd_31, queue_backward_36, parent_backward_34, shortest_distance_37);
            queue_backward_36 = res_b_45.queue;
            shortest_distance_37 = res_b_45.dist;
            if ((((cst_fwd_31.ContainsKey(v_fwd_40) ? cst_fwd_31[v_fwd_40] : 0) + (cst_bwd_32.ContainsKey(v_bwd_43) ? cst_bwd_32[v_bwd_43] : 0)) >= shortest_distance_37)) {
                break;
            }
        };
        if ((shortest_distance_37 != 2147483647)) {
            shortest_path_distance_28 = shortest_distance_37;
        };
        return shortest_path_distance_28;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bidirectional_dij("E", "F", graph_fwd_46, graph_bwd_47))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
