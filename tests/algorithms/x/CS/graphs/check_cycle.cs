// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] g1_11 = new long[][]{new long[]{}, new long[]{0, 3}, new long[]{0, 4}, new long[]{5}, new long[]{5}, new long[]{}};
    public static bool depth_first_search(long[][] graph_0, long vertex_1, bool[] visited_2, bool[] rec_stk_3) {
        visited_2[vertex_1] = true;
        rec_stk_3[vertex_1] = true;
        foreach (long node_4 in graph_0[(int)(vertex_1)]) {
            if ((!visited_2[(int)(node_4)])) {
                if (Program.depth_first_search(graph_0, node_4, visited_2, rec_stk_3)) {
                    return true;
                }
            } else if (rec_stk_3[(int)(node_4)]) {
                return true;
            }
        };
        rec_stk_3[vertex_1] = false;
        return false;
    }

    public static bool check_cycle(long[][] graph_5) {
        long n_6 = graph_5.Length;
        bool[] visited_7 = new bool[]{};
        bool[] rec_stk_8 = new bool[]{};
        long i_9 = 0;
        while ((i_9 < n_6)) {
            visited_7 = (Enumerable.ToArray(Enumerable.Append<bool>(visited_7, false)));
            rec_stk_8 = (Enumerable.ToArray(Enumerable.Append<bool>(rec_stk_8, false)));
            i_9 = (i_9 + 1);
        };
        i_9 = 0;
        while ((i_9 < n_6)) {
            if ((!visited_7[(int)(i_9)])) {
                if (Program.depth_first_search(graph_5, i_9, visited_7, rec_stk_8)) {
                    return true;
                }
            }
            i_9 = (i_9 + 1);
        };
        return false;
    }

    public static void print_bool(bool b_10) {
        if (b_10) {
            Console.WriteLine(Program._fmtTop(true));
        } else {
            Console.WriteLine(Program._fmtTop(false));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_bool(Program.check_cycle(g1_11));
            long[][] g2_12 = new long[][]{new long[]{1, 2}, new long[]{2}, new long[]{0, 3}, new long[]{3}};
            Program.print_bool(Program.check_cycle(g2_12));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
