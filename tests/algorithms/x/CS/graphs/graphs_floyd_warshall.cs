// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double INF_0 = 1e+09;
    static double[][] graph_14 = new double[][]{new double[]{0.0, 5.0, INF_0, 10.0}, new double[]{INF_0, 0.0, 3.0, INF_0}, new double[]{INF_0, INF_0, 0.0, 1.0}, new double[]{INF_0, INF_0, INF_0, 0.0}};
    static double[][] result_15 = Program.floyd_warshall(graph_14);
    public static double[][] floyd_warshall(double[][] graph_1) {
        long v_2 = graph_1.Length;
        double[][] dist_3 = new double[][]{};
        long i_4 = 0;
        while ((i_4 < v_2)) {
            double[] row_5 = new double[]{};
            long j_6 = 0;
            while ((j_6 < v_2)) {
                row_5 = (Enumerable.ToArray(Enumerable.Append<double>(row_5, graph_1[(int)(i_4)][(int)(j_6)])));
                j_6 = (j_6 + 1);
            }
            dist_3 = (Enumerable.ToArray(Enumerable.Append<double[]>(dist_3, row_5)));
            i_4 = (i_4 + 1);
        };
        long k_7 = 0;
        while ((k_7 < v_2)) {
            long i_8 = 0;
            while ((i_8 < v_2)) {
                long j_9 = 0;
                while ((j_9 < v_2)) {
                    if ((((dist_3[(int)(i_8)][(int)(k_7)] < INF_0) && (dist_3[(int)(k_7)][(int)(j_9)] < INF_0)) && ((dist_3[(int)(i_8)][(int)(k_7)] + dist_3[(int)(k_7)][(int)(j_9)]) < dist_3[(int)(i_8)][(int)(j_9)]))) {
                        dist_3[(int)(i_8)][j_9] = (dist_3[(int)(i_8)][(int)(k_7)] + dist_3[(int)(k_7)][(int)(j_9)]);
                    }
                    j_9 = (j_9 + 1);
                }
                i_8 = (i_8 + 1);
            }
            k_7 = (k_7 + 1);
        };
        return dist_3;
    }

    public static void print_dist(double[][] dist_10) {
        Console.WriteLine(Program._fmtTop("\nThe shortest path matrix using Floyd Warshall algorithm\n"));
        long i_11 = 0;
        while ((i_11 < dist_10.Length)) {
            long j_12 = 0;
            string line_13 = "";
            while ((j_12 < dist_10[(int)(i_11)].Length)) {
                if ((dist_10[(int)(i_11)][(int)(j_12)] >= (INF_0 / 2.0))) {
                    line_13 = (line_13 + "INF\t");
                } else {
                    line_13 = ((line_13 + _fmtStr(Convert.ToInt64(dist_10[(int)(i_11)][(int)(j_12)]))) + "\t");
                }
                j_12 = (j_12 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_13));
            i_11 = (i_11 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_dist(result_15);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
