// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class GraphAdjacencyList {
    public Dictionary<string, string[]> adj_list;
    public bool directed;
    public override string ToString() => $"GraphAdjacencyList {{adj_list = {adj_list}, directed = {directed}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static GraphAdjacencyList d_graph_9 = Program.make_graph(true);
    public static GraphAdjacencyList make_graph(bool directed_0) {
        Dictionary<string, string[]> m_1 = new Dictionary<string, string[]>{};
        return new GraphAdjacencyList{adj_list = m_1, directed = directed_0};
    }

    public static bool contains_vertex(Dictionary<string, string[]> m_2, string v_3) {
        return (m_2.ContainsKey(v_3));
    }

    public static GraphAdjacencyList add_edge(GraphAdjacencyList g_4, string s_5, string d_6) {
        Dictionary<string, string[]> adj_7 = g_4.adj_list;
        if ((!g_4.directed)) {
            if ((Program.contains_vertex(adj_7, s_5) && Program.contains_vertex(adj_7, d_6))) {
                adj_7[s_5] = (Enumerable.ToArray(Enumerable.Append<string>((adj_7.ContainsKey(s_5) ? adj_7[s_5] : null), d_6)));
                adj_7[d_6] = (Enumerable.ToArray(Enumerable.Append<string>((adj_7.ContainsKey(d_6) ? adj_7[d_6] : null), s_5)));
            } else if (Program.contains_vertex(adj_7, s_5)) {
                adj_7[s_5] = (Enumerable.ToArray(Enumerable.Append<string>((adj_7.ContainsKey(s_5) ? adj_7[s_5] : null), d_6)));
                adj_7[d_6] = new string[]{s_5};
            } else if (Program.contains_vertex(adj_7, d_6)) {
                adj_7[d_6] = (Enumerable.ToArray(Enumerable.Append<string>((adj_7.ContainsKey(d_6) ? adj_7[d_6] : null), s_5)));
                adj_7[s_5] = new string[]{d_6};
            } else {
                adj_7[s_5] = new string[]{d_6};
                adj_7[d_6] = new string[]{s_5};
            }
        } else if ((Program.contains_vertex(adj_7, s_5) && Program.contains_vertex(adj_7, d_6))) {
            adj_7[s_5] = (Enumerable.ToArray(Enumerable.Append<string>((adj_7.ContainsKey(s_5) ? adj_7[s_5] : null), d_6)));
        } else if (Program.contains_vertex(adj_7, s_5)) {
            adj_7[s_5] = (Enumerable.ToArray(Enumerable.Append<string>((adj_7.ContainsKey(s_5) ? adj_7[s_5] : null), d_6)));
            adj_7[d_6] = new string[]{};
        } else if (Program.contains_vertex(adj_7, d_6)) {
            adj_7[s_5] = new string[]{d_6};
        } else {
            adj_7[s_5] = new string[]{d_6};
            adj_7[d_6] = new string[]{};
        };
        g_4.adj_list = adj_7;
        return g_4;
    }

    public static string graph_to_string(GraphAdjacencyList g_8) {
        return _fmtStr(g_8.adj_list);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(0), _fmtStr(1));
            Console.WriteLine(Program._fmtTop(Program.graph_to_string(d_graph_9)));
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(1), _fmtStr(2));
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(1), _fmtStr(4));
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(1), _fmtStr(5));
            Console.WriteLine(Program._fmtTop(Program.graph_to_string(d_graph_9)));
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(2), _fmtStr(0));
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(2), _fmtStr(6));
            d_graph_9 = Program.add_edge(d_graph_9, _fmtStr(2), _fmtStr(7));
            Console.WriteLine(Program._fmtTop(Program.graph_to_string(d_graph_9)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
