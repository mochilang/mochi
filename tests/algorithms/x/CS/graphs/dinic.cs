// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Dinic {
    public long n;
    public long[] lvl;
    public long[] ptr;
    public long[] q;
    public long[][][] adj;
    public override string ToString() => $"Dinic {{n = {n}, lvl = {lvl}, ptr = {ptr}, q = {q}, adj = {adj}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long INF_0 = 1000000000;
    static Dinic graph_57 = Program.new_dinic(10);
    static long source_58 = 0;
    static long sink_59 = 9;
    static long v_60 = 1;
    public static long pow2(long k_1) {
        long res_2 = 1;
        long i_3 = 0;
        while ((i_3 < k_1)) {
            res_2 = (res_2 * 2);
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long min2(long a_4, long b_5) {
        if ((a_4 < b_5)) {
            return a_4;
        };
        return b_5;
    }

    public static Dinic new_dinic(long n_6) {
        long[] lvl_7 = new long[]{};
        long[] ptr_8 = new long[]{};
        long[] q_9 = new long[]{};
        long[][][] adj_10 = new long[][][]{};
        long i_11 = 0;
        while ((i_11 < n_6)) {
            lvl_7 = (Enumerable.ToArray(Enumerable.Append<long>(lvl_7, 0)));
            ptr_8 = (Enumerable.ToArray(Enumerable.Append<long>(ptr_8, 0)));
            q_9 = (Enumerable.ToArray(Enumerable.Append<long>(q_9, 0)));
            long[][] edges_12 = new long[][]{};
            adj_10 = (Enumerable.ToArray(Enumerable.Append<long[][]>(adj_10, edges_12)));
            i_11 = (i_11 + 1);
        };
        return new Dinic{n = n_6, lvl = lvl_7, ptr = ptr_8, q = q_9, adj = adj_10};
    }

    public static void add_edge(Dinic g_13, long a_14, long b_15, long c_16, long rcap_17) {
        long[][][] adj_18 = g_13.adj;
        long[][] list_a_19 = adj_18[(int)(a_14)];
        long[][] list_b_20 = adj_18[(int)(b_15)];
        long[] e1_21 = new long[]{b_15, list_b_20.Length, c_16, 0};
        long[] e2_22 = new long[]{a_14, list_a_19.Length, rcap_17, 0};
        list_a_19 = (Enumerable.ToArray(Enumerable.Append<long[]>(list_a_19, e1_21)));
        list_b_20 = (Enumerable.ToArray(Enumerable.Append<long[]>(list_b_20, e2_22)));
        adj_18[a_14] = list_a_19;
        adj_18[b_15] = list_b_20;
        g_13.adj = adj_18;
    }

    public static long dfs(Dinic g_23, long v_24, long sink_25, long flow_26) {
        if (((v_24 == sink_25) || (flow_26 == 0))) {
            return flow_26;
        };
        long[] ptr_27 = g_23.ptr;
        long i_28 = ptr_27[(int)(v_24)];
        long[][][] adj_all_29 = g_23.adj;
        long[][] adj_v_30 = adj_all_29[(int)(v_24)];
        while ((i_28 < adj_v_30.Length)) {
            long[] e_31 = adj_v_30[(int)(i_28)];
            long to_32 = e_31[(int)(0)];
            if ((g_23.lvl[(int)(to_32)] == (g_23.lvl[(int)(v_24)] + 1))) {
                long avail_33 = (e_31[(int)(2)] - e_31[(int)(3)]);
                long pushed_34 = Program.dfs(g_23, to_32, sink_25, Program.min2(flow_26, avail_33));
                if ((pushed_34 > 0)) {
                    e_31[3] = (e_31[(int)(3)] + pushed_34);
                    adj_v_30[i_28] = e_31;
                    long[][] adj_to_35 = adj_all_29[(int)(to_32)];
                    long[] back_36 = adj_to_35[(int)(e_31[(int)(1)])];
                    back_36[3] = (back_36[(int)(3)] - pushed_34);
                    adj_to_35[e_31[(int)(1)]] = back_36;
                    adj_all_29[to_32] = adj_to_35;
                    adj_all_29[v_24] = adj_v_30;
                    g_23.adj = adj_all_29;
                    return pushed_34;
                }
            }
            i_28 = (i_28 + 1);
            ptr_27[v_24] = i_28;
        };
        g_23.ptr = ptr_27;
        adj_all_29[v_24] = adj_v_30;
        g_23.adj = adj_all_29;
        return 0;
    }

    public static long max_flow(Dinic g_37, long source_38, long sink_39) {
        long flow_40 = 0;
        long l_41 = 0;
        while ((l_41 < 31)) {
            long threshold_42 = Program.pow2((30 - l_41));
            while (true) {
                long[] lvl_43 = new long[]{};
                long[] ptr_44 = new long[]{};
                long i_45 = 0;
                while ((i_45 < g_37.n)) {
                    lvl_43 = (Enumerable.ToArray(Enumerable.Append<long>(lvl_43, 0)));
                    ptr_44 = (Enumerable.ToArray(Enumerable.Append<long>(ptr_44, 0)));
                    i_45 = (i_45 + 1);
                }
                g_37.lvl = lvl_43;
                g_37.ptr = ptr_44;
                long qi_46 = 0;
                long qe_47 = 1;
                lvl_43[source_38] = 1;
                g_37.lvl = lvl_43;
                long[] q_48 = g_37.q;
                q_48[0] = source_38;
                while (((qi_46 < qe_47) && (g_37.lvl[(int)(sink_39)] == 0))) {
                    long v_49 = q_48[(int)(qi_46)];
                    qi_46 = (qi_46 + 1);
                    long[][] edges_50 = g_37.adj[(int)(v_49)];
                    long j_51 = 0;
                    while ((j_51 < edges_50.Length)) {
                        long[] e_52 = edges_50[(int)(j_51)];
                        long to_53 = e_52[(int)(0)];
                        long residual_54 = (e_52[(int)(2)] - e_52[(int)(3)]);
                        long[] lvl_inner_55 = g_37.lvl;
                        if (((lvl_inner_55[(int)(to_53)] == 0) && (residual_54 >= threshold_42))) {
                            q_48[qe_47] = to_53;
                            qe_47 = (qe_47 + 1);
                            lvl_inner_55[to_53] = (lvl_inner_55[(int)(v_49)] + 1);
                            g_37.lvl = lvl_inner_55;
                        }
                        j_51 = (j_51 + 1);
                    }
                }
                long p_56 = Program.dfs(g_37, source_38, sink_39, INF_0);
                while ((p_56 > 0)) {
                    flow_40 = (flow_40 + p_56);
                    p_56 = Program.dfs(g_37, source_38, sink_39, INF_0);
                }
                if ((g_37.lvl[(int)(sink_39)] == 0)) {
                    break;
                }
            }
            l_41 = (l_41 + 1);
        };
        return flow_40;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((v_60 < 5)) {
                Program.add_edge(graph_57, source_58, v_60, 1, 0);
                v_60 = (v_60 + 1);
            }
            v_60 = 5;
            while ((v_60 < 9)) {
                Program.add_edge(graph_57, v_60, sink_59, 1, 0);
                v_60 = (v_60 + 1);
            }
            v_60 = 1;
            while ((v_60 < 5)) {
                Program.add_edge(graph_57, v_60, (v_60 + 4), 1, 0);
                v_60 = (v_60 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_flow(graph_57, source_58, sink_59))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
