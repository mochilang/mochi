// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Edge {
    public long destination_vertex;
    public long weight;
    public override string ToString() => $"Edge {{destination_vertex = {destination_vertex}, weight = {weight}}}";
}
class AdjacencyList {
    public Edge[][] graph;
    public long size;
    public override string ToString() => $"AdjacencyList {{graph = {graph}, size = {size}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static AdjacencyList g_32 = Program.new_adjacency_list(11);
    public static AdjacencyList new_adjacency_list(long size_0) {
        Edge[][] g_1 = new Edge[][]{};
        long i_2 = 0;
        while ((i_2 < size_0)) {
            g_1 = (Enumerable.ToArray(Enumerable.Append<Edge[]>(g_1, new Edge[]{})));
            i_2 = (i_2 + 1);
        };
        return new AdjacencyList{graph = g_1, size = size_0};
    }

    public static void add_edge(AdjacencyList al_3, long from_vertex_4, long to_vertex_5, long weight_6) {
        if ((!((weight_6 == 0) || (weight_6 == 1)))) {
            throw new Exception("Edge weight must be either 0 or 1.");
        };
        if (((to_vertex_5 < 0) || (to_vertex_5 >= al_3.size))) {
            throw new Exception("Vertex indexes must be in [0; size).");
        };
        Edge[][] g_7 = al_3.graph;
        Edge[] edges_8 = g_7[(int)(from_vertex_4)];
        g_7[from_vertex_4] = (Enumerable.ToArray(Enumerable.Append<Edge>(edges_8, new Edge{destination_vertex = to_vertex_5, weight = weight_6})));
        al_3.graph = g_7;
    }

    public static long[] push_front(long[] q_9, long v_10) {
        long[] res_11 = new long[]{v_10};
        long i_12 = 0;
        while ((i_12 < q_9.Length)) {
            res_11 = (Enumerable.ToArray(Enumerable.Append<long>(res_11, q_9[(int)(i_12)])));
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static long[] pop_front(long[] q_13) {
        long[] res_14 = new long[]{};
        long i_15 = 1;
        while ((i_15 < q_13.Length)) {
            res_14 = (Enumerable.ToArray(Enumerable.Append<long>(res_14, q_13[(int)(i_15)])));
            i_15 = (i_15 + 1);
        };
        return res_14;
    }

    public static long front(long[] q_16) {
        return q_16[(int)(0)];
    }

    public static long get_shortest_path(AdjacencyList al_17, long start_vertex_18, long finish_vertex_19) {
        long[] queue_20 = new long[]{start_vertex_18};
        long[] distances_21 = new long[]{};
        long i_22 = 0;
        while ((i_22 < al_17.size)) {
            distances_21 = (Enumerable.ToArray(Enumerable.Append<long>(distances_21, -1)));
            i_22 = (i_22 + 1);
        };
        distances_21[start_vertex_18] = 0;
        while ((queue_20.Length > 0)) {
            long current_vertex_23 = Program.front(queue_20);
            queue_20 = Program.pop_front(queue_20);
            long current_distance_24 = distances_21[(int)(current_vertex_23)];
            Edge[] edges_25 = al_17.graph[(int)(current_vertex_23)];
            long j_26 = 0;
            while ((j_26 < edges_25.Length)) {
                Edge edge_27 = edges_25[(int)(j_26)];
                long new_distance_28 = (current_distance_24 + edge_27.weight);
                long dest_29 = edge_27.destination_vertex;
                long dest_distance_30 = distances_21[(int)(dest_29)];
                if (((dest_distance_30 >= 0) && (new_distance_28 >= dest_distance_30))) {
                    j_26 = (j_26 + 1);
                    continue;
                }
                distances_21[dest_29] = new_distance_28;
                if ((edge_27.weight == 0)) {
                    queue_20 = Program.push_front(queue_20, dest_29);
                } else {
                    queue_20 = (Enumerable.ToArray(Enumerable.Append<long>(queue_20, dest_29)));
                }
                j_26 = (j_26 + 1);
            }
        };
        long result_31 = distances_21[(int)(finish_vertex_19)];
        if ((result_31 < 0)) {
            throw new Exception("No path from start_vertex to finish_vertex.");
        };
        return result_31;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.add_edge(g_32, 0, 1, 0);
            Program.add_edge(g_32, 0, 3, 1);
            Program.add_edge(g_32, 1, 2, 0);
            Program.add_edge(g_32, 2, 3, 0);
            Program.add_edge(g_32, 4, 2, 1);
            Program.add_edge(g_32, 4, 5, 1);
            Program.add_edge(g_32, 4, 6, 1);
            Program.add_edge(g_32, 5, 9, 0);
            Program.add_edge(g_32, 6, 7, 1);
            Program.add_edge(g_32, 7, 8, 1);
            Program.add_edge(g_32, 8, 10, 1);
            Program.add_edge(g_32, 9, 7, 0);
            Program.add_edge(g_32, 9, 10, 1);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_shortest_path(g_32, 0, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_shortest_path(g_32, 4, 10))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_shortest_path(g_32, 4, 8))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_shortest_path(g_32, 0, 1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
