// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] edges1_21 = new long[][]{new long[]{0, 1, 3}, new long[]{1, 2, 5}, new long[]{2, 3, 1}};
    public static long[][] sort_edges(long[][] edges_0) {
        long[][] es_1 = edges_0;
        long i_2 = 0;
        while ((i_2 < es_1.Length)) {
            long j_3 = 0;
            while ((j_3 < ((es_1.Length - i_2) - 1))) {
                if ((_idx(_idx(es_1, j_3), 2) > _idx(_idx(es_1, (j_3 + 1)), 2))) {
                    long[] temp_4 = _idx(es_1, j_3);
                    es_1[(int)(j_3)] = _idx(es_1, (j_3 + 1));
                    es_1[(int)((j_3 + 1))] = temp_4;
                }
                j_3 = (j_3 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return es_1;
    }

    public static long find_parent(long[] parent_5, long i_6) {
        if ((_idx(parent_5, i_6) != i_6)) {
            parent_5[(int)(i_6)] = Program.find_parent(parent_5, _idx(parent_5, i_6));
        };
        return _idx(parent_5, i_6);
    }

    public static long[][] kruskal(long num_nodes_7, long[][] edges_8) {
        long[][] es_9 = Program.sort_edges(edges_8);
        long[] parent_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < num_nodes_7)) {
            parent_10 = ((Func<long[]>)(() => { var _tmp = parent_10.ToList(); _tmp.Add(i_11); return _tmp.ToArray(); }))();
            i_11 = (i_11 + 1);
        };
        long[][] mst_12 = new long[][]{};
        long idx_13 = 0;
        while ((idx_13 < es_9.Length)) {
            long[] e_14 = _idx(es_9, idx_13);
            long pa_15 = Program.find_parent(parent_10, _idx(e_14, 0));
            long pb_16 = Program.find_parent(parent_10, _idx(e_14, 1));
            if ((pa_15 != pb_16)) {
                mst_12 = ((Func<long[][]>)(() => { var _tmp = mst_12.ToList(); _tmp.Add(e_14); return _tmp.ToArray(); }))();
                parent_10[(int)(pa_15)] = pb_16;
            }
            idx_13 = (idx_13 + 1);
        };
        return mst_12;
    }

    public static string edges_to_string(long[][] es_17) {
        string s_18 = "[";
        long i_19 = 0;
        while ((i_19 < es_17.Length)) {
            long[] e_20 = _idx(es_17, i_19);
            s_18 = (((((((s_18 + "(") + _fmtStr(_idx(e_20, 0))) + ", ") + _fmtStr(_idx(e_20, 1))) + ", ") + _fmtStr(_idx(e_20, 2))) + ")");
            if ((i_19 < (es_17.Length - 1))) {
                s_18 = (s_18 + ", ");
            }
            i_19 = (i_19 + 1);
        };
        s_18 = (s_18 + "]");
        return s_18;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.edges_to_string(Program.kruskal(4, edges1_21))));
            long[][] edges2_22 = new long[][]{new long[]{0, 1, 3}, new long[]{1, 2, 5}, new long[]{2, 3, 1}, new long[]{0, 2, 1}, new long[]{0, 3, 2}};
            Console.WriteLine(Program._fmtTop(Program.edges_to_string(Program.kruskal(4, edges2_22))));
            long[][] edges3_23 = new long[][]{new long[]{0, 1, 3}, new long[]{1, 2, 5}, new long[]{2, 3, 1}, new long[]{0, 2, 1}, new long[]{0, 3, 2}, new long[]{2, 1, 1}};
            Console.WriteLine(Program._fmtTop(Program.edges_to_string(Program.kruskal(4, edges3_23))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
