// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<long, long[]> tree_0 = new Dictionary<long, long[]>{};
    public static long[] dfs(long start_1, Dictionary<long, bool> visited_2) {
        long size_3 = 1;
        long cuts_4 = 0;
        visited_2[start_1] = true;
        foreach (long v_5 in (tree_0.ContainsKey(start_1) ? tree_0[start_1] : null)) {
            if ((!(visited_2.ContainsKey(v_5)))) {
                long[] res_6 = Program.dfs(v_5, visited_2);
                size_3 = (size_3 + _idx(res_6, 0));
                cuts_4 = (cuts_4 + _idx(res_6, 1));
            }
        };
        if ((_mod(size_3, 2) == 0)) {
            cuts_4 = (cuts_4 + 1);
        };
        return new long[]{size_3, cuts_4};
    }

    public static long even_tree() {
        Dictionary<long, bool> visited_7 = new Dictionary<long, bool>{};
        long[] res_8 = Program.dfs(1, visited_7);
        return (_idx(res_8, 1) - 1);
    }

    public static void main() {
        long[][] edges_9 = new long[][]{new long[]{2, 1}, new long[]{3, 1}, new long[]{4, 3}, new long[]{5, 2}, new long[]{6, 1}, new long[]{7, 2}, new long[]{8, 6}, new long[]{9, 8}, new long[]{10, 8}};
        long i_10 = 0;
        while ((i_10 < edges_9.Length)) {
            long u_11 = _idx(_idx(edges_9, i_10), 0);
            long v_12 = _idx(_idx(edges_9, i_10), 1);
            if ((!(tree_0.ContainsKey(u_11)))) {
                tree_0[u_11] = new long[]{};
            }
            if ((!(tree_0.ContainsKey(v_12)))) {
                tree_0[v_12] = new long[]{};
            }
            tree_0[u_11] = ((Func<long[]>)(() => { var _tmp = (tree_0.ContainsKey(u_11) ? tree_0[u_11] : null).ToList(); _tmp.Add(v_12); return _tmp.ToArray(); }))();
            tree_0[v_12] = ((Func<long[]>)(() => { var _tmp = (tree_0.ContainsKey(v_12) ? tree_0[v_12] : null).ToList(); _tmp.Add(u_11); return _tmp.ToArray(); }))();
            i_10 = (i_10 + 1);
        };
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.even_tree())));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
