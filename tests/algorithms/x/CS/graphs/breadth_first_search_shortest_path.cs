// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Graph {
    public Dictionary<string, string[]> graph;
    public Dictionary<string, string> parent;
    public string source;
    public override string ToString() => $"Graph {{graph = {graph}, parent = {parent}, source = \"{source}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, string[]> graph_11 = new Dictionary<string, string[]>{{"A", new string[]{"B", "C", "E"}}, {"B", new string[]{"A", "D", "E"}}, {"C", new string[]{"A", "F", "G"}}, {"D", new string[]{"B"}}, {"E", new string[]{"A", "B", "D"}}, {"F", new string[]{"C"}}, {"G", new string[]{"C"}}};
    static Graph g_12 = Program.newGraph(graph_11, "G");
    public static Graph newGraph(Dictionary<string, string[]> g_0, string s_1) {
        return new Graph{graph = g_0, parent = new Dictionary<string, string>{}, source = s_1};
    }

    public static Graph breath_first_search(Graph g_2) {
        Dictionary<string, string> parent_3 = g_2.parent;
        parent_3[g_2.source] = g_2.source;
        string[] queue_4 = new string[]{g_2.source};
        long idx_5 = 0;
        while ((idx_5 < queue_4.Length)) {
            string vertex_6 = queue_4[(int)(idx_5)];
            foreach (string adj_7 in (g_2.graph.ContainsKey(vertex_6) ? g_2.graph[vertex_6] : null)) {
                if ((!(parent_3.ContainsKey(adj_7)))) {
                    parent_3[adj_7] = vertex_6;
                    queue_4 = (Enumerable.ToArray(Enumerable.Append<string>(queue_4, adj_7)));
                }
            }
            idx_5 = (idx_5 + 1);
        };
        g_2.parent = parent_3;
        return g_2;
    }

    public static string shortest_path(Graph g_8, string target_9) {
        if ((target_9 == g_8.source)) {
            return g_8.source;
        };
        if ((!(g_8.parent.ContainsKey(target_9)))) {
            return ((("No path from vertex: " + g_8.source) + " to vertex: ") + target_9);
        };
        string p_10 = (g_8.parent.ContainsKey(target_9) ? g_8.parent[target_9] : "");
        return ((Program.shortest_path(g_8, p_10) + "->") + target_9);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            g_12 = Program.breath_first_search(g_12);
            Console.WriteLine(Program._fmtTop(Program.shortest_path(g_12, "D")));
            Console.WriteLine(Program._fmtTop(Program.shortest_path(g_12, "G")));
            Console.WriteLine(Program._fmtTop(Program.shortest_path(g_12, "Foo")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
