// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] sort_edges(long[][] edges_0) {
        long[][] es_1 = edges_0;
        long i_2 = 0;
        while ((i_2 < es_1.Length)) {
            long j_3 = 0;
            while ((j_3 < ((es_1.Length - i_2) - 1))) {
                if ((es_1[(int)(j_3)][(int)(2)] > es_1[(int)((j_3 + 1))][(int)(2)])) {
                    long[] tmp_4 = es_1[(int)(j_3)];
                    es_1[j_3] = es_1[(int)((j_3 + 1))];
                    es_1[(j_3 + 1)] = tmp_4;
                }
                j_3 = (j_3 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return es_1;
    }

    public static long find(long[] parent_5, long x_6) {
        long r_7 = x_6;
        while ((parent_5[(int)(r_7)] != r_7)) {
            r_7 = parent_5[(int)(r_7)];
        };
        return r_7;
    }

    public static long[][] kruskal(long n_8, long[][] edges_9) {
        long[] parent_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < n_8)) {
            parent_10 = (Enumerable.ToArray(Enumerable.Append<long>(parent_10, i_11)));
            i_11 = (i_11 + 1);
        };
        long[][] sorted_12 = Program.sort_edges(edges_9);
        long[][] mst_13 = new long[][]{};
        long e_14 = 0;
        while ((e_14 < sorted_12.Length)) {
            if ((mst_13.Length == (n_8 - 1))) {
                break;
            }
            long[] edge_15 = sorted_12[(int)(e_14)];
            e_14 = (e_14 + 1);
            long u_16 = edge_15[(int)(0)];
            long v_17 = edge_15[(int)(1)];
            long w_18 = edge_15[(int)(2)];
            long ru_19 = Program.find(parent_10, u_16);
            long rv_20 = Program.find(parent_10, v_17);
            if ((ru_19 != rv_20)) {
                parent_10[ru_19] = rv_20;
                mst_13 = (Enumerable.ToArray(Enumerable.Append<long[]>(mst_13, new long[]{u_16, v_17, w_18})));
            }
        };
        return mst_13;
    }

    public static bool edges_equal(long[][] a_21, long[][] b_22) {
        if ((a_21.Length != b_22.Length)) {
            return false;
        };
        long i_23 = 0;
        while ((i_23 < a_21.Length)) {
            long[] e1_24 = a_21[(int)(i_23)];
            long[] e2_25 = b_22[(int)(i_23)];
            if ((((e1_24[(int)(0)] != e2_25[(int)(0)]) || (e1_24[(int)(1)] != e2_25[(int)(1)])) || (e1_24[(int)(2)] != e2_25[(int)(2)]))) {
                return false;
            }
            i_23 = (i_23 + 1);
        };
        return true;
    }

    public static void main() {
        long num_nodes_26 = 9;
        long[][] edges_27 = new long[][]{new long[]{0, 1, 4}, new long[]{0, 7, 8}, new long[]{1, 2, 8}, new long[]{7, 8, 7}, new long[]{7, 6, 1}, new long[]{2, 8, 2}, new long[]{8, 6, 6}, new long[]{2, 3, 7}, new long[]{2, 5, 4}, new long[]{6, 5, 2}, new long[]{3, 5, 14}, new long[]{3, 4, 9}, new long[]{5, 4, 10}, new long[]{1, 7, 11}};
        long[][] expected_28 = new long[][]{new long[]{7, 6, 1}, new long[]{2, 8, 2}, new long[]{6, 5, 2}, new long[]{0, 1, 4}, new long[]{2, 5, 4}, new long[]{2, 3, 7}, new long[]{0, 7, 8}, new long[]{3, 4, 9}};
        long[][] result_29 = Program.kruskal(num_nodes_26, edges_27);
        long[][] sorted_result_30 = Program.sort_edges(result_29);
        long[][] sorted_expected_31 = Program.sort_edges(expected_28);
        Console.WriteLine(Program._fmtTop(_fmtStr(sorted_result_30)));
        if (Program.edges_equal(sorted_expected_31, sorted_result_30)) {
            Console.WriteLine(Program._fmtTop(true));
        } else {
            Console.WriteLine(Program._fmtTop(false));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
