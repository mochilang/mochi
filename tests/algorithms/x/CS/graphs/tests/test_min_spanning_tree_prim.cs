// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Neighbor {
    public long node;
    public long cost;
    public override string ToString() => $"Neighbor {{node = {node}, cost = {cost}}}";
}
class EdgePair {
    public long u;
    public long v;
    public override string ToString() => $"EdgePair {{u = {u}, v = {v}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static EdgePair[] prims_algorithm(Dictionary<long, Neighbor[]> adjacency_0) {
        Dictionary<long, bool> visited_1 = new Dictionary<long, bool>{};
        visited_1[0] = true;
        EdgePair[] mst_2 = new EdgePair[]{};
        long count_3 = 1;
        long total_4 = 0;
        foreach (long k_5 in adjacency_0.Keys) {
            total_4 = (total_4 + 1);
        };
        while ((count_3 < total_4)) {
            long best_u_6 = 0;
            long best_v_7 = 0;
            long best_cost_8 = 2147483647;
            foreach (long u_str_9 in adjacency_0.Keys) {
                long u_10 = Convert.ToInt64(u_str_9);
                if ((visited_1.ContainsKey(u_10) ? visited_1[u_10] : false)) {
                    foreach (Neighbor n_11 in (adjacency_0.ContainsKey(u_10) ? adjacency_0[u_10] : null)) {
                        if (((!(visited_1.ContainsKey(n_11.node) ? visited_1[n_11.node] : false)) && (n_11.cost < best_cost_8))) {
                            best_cost_8 = n_11.cost;
                            best_u_6 = u_10;
                            best_v_7 = n_11.node;
                        }
                    }
                }
            }
            visited_1[best_v_7] = true;
            mst_2 = (Enumerable.ToArray(Enumerable.Append<EdgePair>(mst_2, new EdgePair{u = best_u_6, v = best_v_7})));
            count_3 = (count_3 + 1);
        };
        return mst_2;
    }

    public static bool test_prim_successful_result() {
        long[][] edges_12 = new long[][]{new long[]{0, 1, 4}, new long[]{0, 7, 8}, new long[]{1, 2, 8}, new long[]{7, 8, 7}, new long[]{7, 6, 1}, new long[]{2, 8, 2}, new long[]{8, 6, 6}, new long[]{2, 3, 7}, new long[]{2, 5, 4}, new long[]{6, 5, 2}, new long[]{3, 5, 14}, new long[]{3, 4, 9}, new long[]{5, 4, 10}, new long[]{1, 7, 11}};
        Dictionary<long, Neighbor[]> adjacency_13 = new Dictionary<long, Neighbor[]>{};
        foreach (long[] e_14 in edges_12) {
            long u_15 = e_14[(int)(0)];
            long v_16 = e_14[(int)(1)];
            long w_17 = e_14[(int)(2)];
            if ((!(adjacency_13.ContainsKey(u_15)))) {
                adjacency_13[u_15] = new Neighbor[]{};
            }
            if ((!(adjacency_13.ContainsKey(v_16)))) {
                adjacency_13[v_16] = new Neighbor[]{};
            }
            adjacency_13[u_15] = (Enumerable.ToArray(Enumerable.Append<Neighbor>((adjacency_13.ContainsKey(u_15) ? adjacency_13[u_15] : null), new Neighbor{node = v_16, cost = w_17})));
            adjacency_13[v_16] = (Enumerable.ToArray(Enumerable.Append<Neighbor>((adjacency_13.ContainsKey(v_16) ? adjacency_13[v_16] : null), new Neighbor{node = u_15, cost = w_17})));
        };
        EdgePair[] result_18 = Program.prims_algorithm(adjacency_13);
        Dictionary<string, bool> seen_19 = new Dictionary<string, bool>{};
        foreach (EdgePair e_20 in result_18) {
            string key1_21 = ((_fmtStr(e_20.u) + ",") + _fmtStr(e_20.v));
            string key2_22 = ((_fmtStr(e_20.v) + ",") + _fmtStr(e_20.u));
            seen_19[key1_21] = true;
            seen_19[key2_22] = true;
        };
        long[][] expected_23 = new long[][]{new long[]{7, 6, 1}, new long[]{2, 8, 2}, new long[]{6, 5, 2}, new long[]{0, 1, 4}, new long[]{2, 5, 4}, new long[]{2, 3, 7}, new long[]{0, 7, 8}, new long[]{3, 4, 9}};
        foreach (long[] ans_24 in expected_23) {
            string key_25 = ((_fmtStr(ans_24[(int)(0)]) + ",") + _fmtStr(ans_24[(int)(1)]));
            if ((!(seen_19.ContainsKey(key_25) ? seen_19[key_25] : false))) {
                return false;
            }
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.test_prim_successful_result()));
            Console.WriteLine(Program._fmtTop(true));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
