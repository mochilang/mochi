// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<long, long[]> graph_19 = new Dictionary<long, long[]>{{0, new long[]{1, 3}}, {1, new long[]{0, 3}}, {2, new long[]{0, 3, 4}}, {3, new long[]{0, 1, 2}}, {4, new long[]{2, 3}}};
    static long[] cover_20 = Program.matching_min_vertex_cover(graph_19);
    public static bool contains(long[] xs_0, long v_1) {
        foreach (long x_2 in xs_0) {
            if ((x_2 == v_1)) {
                return true;
            }
        };
        return false;
    }

    public static long[][] get_edges(Dictionary<long, long[]> graph_3) {
        long n_4 = graph_3.Count;
        long[][] edges_5 = new long[][]{};
        for (var i_6 = 0; i_6 < n_4; i_6++) {
            foreach (long j_7 in (graph_3.ContainsKey(i_6) ? graph_3[i_6] : null)) {
                edges_5 = ((Func<long[][]>)(() => { var _tmp = edges_5.ToList(); _tmp.Add(new long[]{i_6, j_7}); return _tmp.ToArray(); }))();
            }
        };
        return edges_5;
    }

    public static long[] matching_min_vertex_cover(Dictionary<long, long[]> graph_8) {
        long[] chosen_9 = new long[]{};
        long[][] edges_10 = Program.get_edges(graph_8);
        while ((edges_10.Length > 0)) {
            long idx_11 = (edges_10.Length - 1);
            long[] e_12 = _idx(edges_10, idx_11);
            edges_10 = _slice<long[]>(edges_10, 0, idx_11);
            long u_13 = _idx(e_12, 0);
            long v_14 = _idx(e_12, 1);
            if ((!Program.contains(chosen_9, u_13))) {
                chosen_9 = ((Func<long[]>)(() => { var _tmp = chosen_9.ToList(); _tmp.Add(u_13); return _tmp.ToArray(); }))();
            }
            if ((!Program.contains(chosen_9, v_14))) {
                chosen_9 = ((Func<long[]>)(() => { var _tmp = chosen_9.ToList(); _tmp.Add(v_14); return _tmp.ToArray(); }))();
            }
            long[][] filtered_15 = new long[][]{};
            foreach (long[] edge_16 in edges_10) {
                long a_17 = _idx(edge_16, 0);
                long b_18 = _idx(edge_16, 1);
                if (((((a_17 != u_13) && (b_18 != u_13)) && (a_17 != v_14)) && (b_18 != v_14))) {
                    filtered_15 = ((Func<long[][]>)(() => { var _tmp = filtered_15.ToList(); _tmp.Add(edge_16); return _tmp.ToArray(); }))();
                }
            }
            edges_10 = filtered_15;
        };
        return chosen_9;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(cover_20)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
