// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] dfs(long u_0, long[][] graph_1, bool[] visit_2, long[] stack_3) {
        if (visit_2[(int)(u_0)]) {
            return stack_3;
        };
        visit_2[u_0] = true;
        foreach (long v_4 in graph_1[(int)(u_0)]) {
            stack_3 = Program.dfs(v_4, graph_1, visit_2, stack_3);
        };
        stack_3 = (Enumerable.ToArray(Enumerable.Append<long>(stack_3, u_0)));
        return stack_3;
    }

    public static long[] dfs2(long u_5, long[][] reversed_graph_6, bool[] visit_7, long[] component_8) {
        if (visit_7[(int)(u_5)]) {
            return component_8;
        };
        visit_7[u_5] = true;
        component_8 = (Enumerable.ToArray(Enumerable.Append<long>(component_8, u_5)));
        foreach (long v_9 in reversed_graph_6[(int)(u_5)]) {
            component_8 = Program.dfs2(v_9, reversed_graph_6, visit_7, component_8);
        };
        return component_8;
    }

    public static long[][] kosaraju(long[][] graph_10) {
        long n_11 = graph_10.Length;
        long[][] reversed_graph_12 = new long[][]{};
        long i_13 = 0;
        while ((i_13 < n_11)) {
            reversed_graph_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(reversed_graph_12, new long[]{})));
            i_13 = (i_13 + 1);
        };
        i_13 = 0;
        while ((i_13 < n_11)) {
            foreach (long v_14 in graph_10[(int)(i_13)]) {
                reversed_graph_12[v_14] = (Enumerable.ToArray(Enumerable.Append<long>(reversed_graph_12[(int)(v_14)], i_13)));
            }
            i_13 = (i_13 + 1);
        };
        bool[] visit_15 = new bool[]{};
        i_13 = 0;
        while ((i_13 < n_11)) {
            visit_15 = (Enumerable.ToArray(Enumerable.Append<bool>(visit_15, false)));
            i_13 = (i_13 + 1);
        };
        long[] stack_16 = new long[]{};
        i_13 = 0;
        while ((i_13 < n_11)) {
            if ((visit_15[(int)(i_13)] == false)) {
                stack_16 = Program.dfs(i_13, graph_10, visit_15, stack_16);
            }
            i_13 = (i_13 + 1);
        };
        i_13 = 0;
        while ((i_13 < n_11)) {
            visit_15[i_13] = false;
            i_13 = (i_13 + 1);
        };
        long[][] scc_17 = new long[][]{};
        long idx_18 = (stack_16.Length - 1);
        while ((idx_18 >= 0)) {
            long node_19 = stack_16[(int)(idx_18)];
            if ((visit_15[(int)(node_19)] == false)) {
                long[] component_20 = new long[]{};
                component_20 = Program.dfs2(node_19, reversed_graph_12, visit_15, component_20);
                scc_17 = (Enumerable.ToArray(Enumerable.Append<long[]>(scc_17, component_20)));
            }
            idx_18 = (idx_18 - 1);
        };
        return scc_17;
    }

    public static void main() {
        long[][] graph_21 = new long[][]{new long[]{1}, new long[]{2}, new long[]{0, 3}, new long[]{4}, new long[]{}};
        long[][] comps_22 = Program.kosaraju(graph_21);
        long i_23 = 0;
        while ((i_23 < comps_22.Length)) {
            Console.WriteLine(Program._fmtTop(comps_22[(int)(i_23)]));
            i_23 = (i_23 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
