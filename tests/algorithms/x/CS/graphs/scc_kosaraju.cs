// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] dfs(long u_0, long[][] graph_1, bool[] visit_2, long[] stack_3) {
        if (_idx(visit_2, u_0)) {
            return stack_3;
        };
        visit_2[(int)(u_0)] = true;
        foreach (long v_4 in _idx(graph_1, u_0)) {
            stack_3 = Program.dfs(v_4, graph_1, visit_2, stack_3);
        };
        stack_3 = ((Func<long[]>)(() => { var _tmp = stack_3.ToList(); _tmp.Add(u_0); return _tmp.ToArray(); }))();
        return stack_3;
    }

    public static long[] dfs2(long u_5, long[][] reversed_graph_6, bool[] visit_7, long[] component_8) {
        if (_idx(visit_7, u_5)) {
            return component_8;
        };
        visit_7[(int)(u_5)] = true;
        component_8 = ((Func<long[]>)(() => { var _tmp = component_8.ToList(); _tmp.Add(u_5); return _tmp.ToArray(); }))();
        foreach (long v_9 in _idx(reversed_graph_6, u_5)) {
            component_8 = Program.dfs2(v_9, reversed_graph_6, visit_7, component_8);
        };
        return component_8;
    }

    public static long[][] kosaraju(long[][] graph_10) {
        long n_11 = graph_10.Length;
        long[][] reversed_graph_12 = new long[][]{};
        long i_13 = 0;
        while ((i_13 < n_11)) {
            reversed_graph_12 = ((Func<long[][]>)(() => { var _tmp = reversed_graph_12.ToList(); _tmp.Add(new long[]{}); return _tmp.ToArray(); }))();
            i_13 = (i_13 + 1);
        };
        i_13 = 0;
        while ((i_13 < n_11)) {
            foreach (long v_14 in _idx(graph_10, i_13)) {
                reversed_graph_12[(int)(v_14)] = ((Func<long[]>)(() => { var _tmp = _idx(reversed_graph_12, v_14).ToList(); _tmp.Add(i_13); return _tmp.ToArray(); }))();
            }
            i_13 = (i_13 + 1);
        };
        bool[] visit_15 = new bool[]{};
        i_13 = 0;
        while ((i_13 < n_11)) {
            visit_15 = ((Func<bool[]>)(() => { var _tmp = visit_15.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            i_13 = (i_13 + 1);
        };
        long[] stack_16 = new long[]{};
        i_13 = 0;
        while ((i_13 < n_11)) {
            if ((_idx(visit_15, i_13) == false)) {
                stack_16 = Program.dfs(i_13, graph_10, visit_15, stack_16);
            }
            i_13 = (i_13 + 1);
        };
        i_13 = 0;
        while ((i_13 < n_11)) {
            visit_15[(int)(i_13)] = false;
            i_13 = (i_13 + 1);
        };
        long[][] scc_17 = new long[][]{};
        long idx_18 = (stack_16.Length - 1);
        while ((idx_18 >= 0)) {
            long node_19 = _idx(stack_16, idx_18);
            if ((_idx(visit_15, node_19) == false)) {
                long[] component_20 = new long[]{};
                component_20 = Program.dfs2(node_19, reversed_graph_12, visit_15, component_20);
                scc_17 = ((Func<long[][]>)(() => { var _tmp = scc_17.ToList(); _tmp.Add(component_20); return _tmp.ToArray(); }))();
            }
            idx_18 = (idx_18 - 1);
        };
        return scc_17;
    }

    public static void main() {
        long[][] graph_21 = new long[][]{new long[]{1}, new long[]{2}, new long[]{0, 3}, new long[]{4}, new long[]{}};
        long[][] comps_22 = Program.kosaraju(graph_21);
        long i_23 = 0;
        while ((i_23 < comps_22.Length)) {
            Console.WriteLine(Program._fmtTop(_idx(comps_22, i_23)));
            i_23 = (i_23 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
