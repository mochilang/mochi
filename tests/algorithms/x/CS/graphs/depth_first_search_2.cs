// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Graph {
    public Dictionary<long, long[]> vertex;
    public long size;
    public override string ToString() => $"Graph {{vertex = {vertex}, size = {size}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Graph g_27 = new Graph{vertex = new Dictionary<long, long[]>{}, size = 0};
    public static Graph add_edge(Graph g_0, long from_vertex_1, long to_vertex_2) {
        Dictionary<long, long[]> v_3 = g_0.vertex;
        if ((v_3.ContainsKey(from_vertex_1))) {
            long[] lst_4 = (v_3.ContainsKey(from_vertex_1) ? v_3[from_vertex_1] : null);
            lst_4 = (Enumerable.ToArray(Enumerable.Append<long>(lst_4, to_vertex_2)));
            v_3[from_vertex_1] = lst_4;
        } else {
            v_3[from_vertex_1] = new long[]{to_vertex_2};
        };
        g_0.vertex = v_3;
        if (((from_vertex_1 + 1) > g_0.size)) {
            g_0.size = (from_vertex_1 + 1);
        };
        if (((to_vertex_2 + 1) > g_0.size)) {
            g_0.size = (to_vertex_2 + 1);
        };
        return g_0;
    }

    public static string list_to_string(long[] lst_5) {
        string res_6 = "";
        long i_7 = 0;
        while ((i_7 < lst_5.Length)) {
            res_6 = (res_6 + _fmtStr(lst_5[(int)(i_7)]));
            if ((i_7 < (lst_5.Length - 1))) {
                res_6 = (res_6 + " ");
            }
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static string list_to_arrow(long[] lst_8) {
        string res_9 = "";
        long i_10 = 0;
        while ((i_10 < lst_8.Length)) {
            res_9 = (res_9 + _fmtStr(lst_8[(int)(i_10)]));
            if ((i_10 < (lst_8.Length - 1))) {
                res_9 = (res_9 + " -> ");
            }
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static void print_graph(Graph g_11) {
        Console.WriteLine(Program._fmtTop(_fmtStr(g_11.vertex)));
        long i_12 = 0;
        while ((i_12 < g_11.size)) {
            long[] edges_13 = new long[]{};
            if ((g_11.vertex.ContainsKey(i_12))) {
                edges_13 = (g_11.vertex.ContainsKey(i_12) ? g_11.vertex[i_12] : null);
            }
            string line_14 = ((_fmtStr(i_12) + "  ->  ") + Program.list_to_arrow(edges_13));
            Console.WriteLine(Program._fmtTop(line_14));
            i_12 = (i_12 + 1);
        };
    }

    public static long[] dfs_recursive(Graph g_15, long start_vertex_16, bool[] visited_17, long[] order_18) {
        visited_17[start_vertex_16] = true;
        order_18 = (Enumerable.ToArray(Enumerable.Append<long>(order_18, start_vertex_16)));
        if ((g_15.vertex.ContainsKey(start_vertex_16))) {
            long[] neighbors_19 = (g_15.vertex.ContainsKey(start_vertex_16) ? g_15.vertex[start_vertex_16] : null);
            long i_20 = 0;
            while ((i_20 < neighbors_19.Length)) {
                long nb_21 = neighbors_19[(int)(i_20)];
                if ((!visited_17[(int)(nb_21)])) {
                    order_18 = Program.dfs_recursive(g_15, nb_21, visited_17, order_18);
                }
                i_20 = (i_20 + 1);
            }
        };
        return order_18;
    }

    public static long[] dfs(Graph g_22) {
        long n_23 = g_22.size;
        bool[] visited_24 = new bool[]{};
        long i_25 = 0;
        while ((i_25 < n_23)) {
            visited_24 = (Enumerable.ToArray(Enumerable.Append<bool>(visited_24, false)));
            i_25 = (i_25 + 1);
        };
        long[] order_26 = new long[]{};
        i_25 = 0;
        while ((i_25 < n_23)) {
            if ((!visited_24[(int)(i_25)])) {
                order_26 = Program.dfs_recursive(g_22, i_25, visited_24, order_26);
            }
            i_25 = (i_25 + 1);
        };
        return order_26;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            g_27 = Program.add_edge(g_27, 0, 1);
            g_27 = Program.add_edge(g_27, 0, 2);
            g_27 = Program.add_edge(g_27, 1, 2);
            g_27 = Program.add_edge(g_27, 2, 0);
            g_27 = Program.add_edge(g_27, 2, 3);
            g_27 = Program.add_edge(g_27, 3, 3);
            Program.print_graph(g_27);
            Console.WriteLine(Program._fmtTop("DFS:"));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.dfs(g_27))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
