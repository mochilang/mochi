// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Pair {
    public string a;
    public string b;
    public override string ToString() => $"Pair {{a = \"{a}\", b = \"{b}\"}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_0 = 1;
    static Dictionary<string, string[]> TEST_GRAPH_44 = new Dictionary<string, string[]>{{"1", new string[]{"2", "3", "4", "5"}}, {"2", new string[]{"1", "3", "4", "5"}}, {"3", new string[]{"1", "2", "4", "5", "10"}}, {"4", new string[]{"1", "2", "3", "5", "6"}}, {"5", new string[]{"1", "2", "3", "4", "7"}}, {"6", new string[]{"7", "8", "9", "10", "4"}}, {"7", new string[]{"6", "8", "9", "10", "5"}}, {"8", new string[]{"6", "7", "9", "10"}}, {"9", new string[]{"6", "7", "8", "10"}}, {"10", new string[]{"6", "7", "8", "9", "3"}}};
    static Pair[] result_45 = Program.partition_graph(TEST_GRAPH_44);
    public static long rand_int(long n_1) {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return _mod(seed_0, n_1);
    }

    public static bool contains(string[] list_2, string value_3) {
        long i_4 = 0;
        while ((i_4 < list_2.Length)) {
            if ((_idx(list_2, i_4) == value_3)) {
                return true;
            }
            i_4 = (i_4 + 1);
        };
        return false;
    }

    public static string[] remove_all(string[] list_5, string value_6) {
        string[] res_7 = new string[]{};
        long i_8 = 0;
        while ((i_8 < list_5.Length)) {
            if ((_idx(list_5, i_8) != value_6)) {
                res_7 = ((Func<string[]>)(() => { var _tmp = res_7.ToList(); _tmp.Add(_idx(list_5, i_8)); return _tmp.ToArray(); }))();
            }
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static Pair[] partition_graph(Dictionary<string, string[]> graph_9) {
        Dictionary<string, string[]> contracted_10 = new Dictionary<string, string[]>{};
        foreach (string node_11 in graph_9.Keys.ToArray()) {
            contracted_10[node_11] = new string[]{node_11};
        };
        Dictionary<string, string[]> graph_copy_12 = new Dictionary<string, string[]>{};
        foreach (string node_13 in graph_9.Keys.ToArray()) {
            string[] lst_14 = new string[]{};
            string[] neigh_15 = (graph_9.ContainsKey(node_13) ? graph_9[node_13] : null);
            long i_16 = 0;
            while ((i_16 < neigh_15.Length)) {
                lst_14 = ((Func<string[]>)(() => { var _tmp = lst_14.ToList(); _tmp.Add(_idx(neigh_15, i_16)); return _tmp.ToArray(); }))();
                i_16 = (i_16 + 1);
            }
            graph_copy_12[node_13] = lst_14;
        };
        string[] nodes_17 = graph_copy_12.Keys.ToArray();
        while ((nodes_17.Length > 2)) {
            string u_18 = _idx(nodes_17, Program.rand_int(nodes_17.Length));
            string[] u_neighbors_19 = (graph_copy_12.ContainsKey(u_18) ? graph_copy_12[u_18] : null);
            string v_20 = _idx(u_neighbors_19, Program.rand_int(u_neighbors_19.Length));
            string uv_21 = (u_18 + v_20);
            string[] uv_neighbors_22 = new string[]{};
            long i_23 = 0;
            while ((i_23 < (graph_copy_12.ContainsKey(u_18) ? graph_copy_12[u_18] : null).Length)) {
                string n_24 = _idx((graph_copy_12.ContainsKey(u_18) ? graph_copy_12[u_18] : null), i_23);
                if ((((n_24 != u_18) && (n_24 != v_20)) && (Program.contains(uv_neighbors_22, n_24) == false))) {
                    uv_neighbors_22 = ((Func<string[]>)(() => { var _tmp = uv_neighbors_22.ToList(); _tmp.Add(n_24); return _tmp.ToArray(); }))();
                }
                i_23 = (i_23 + 1);
            }
            i_23 = 0;
            while ((i_23 < (graph_copy_12.ContainsKey(v_20) ? graph_copy_12[v_20] : null).Length)) {
                string n_25 = _idx((graph_copy_12.ContainsKey(v_20) ? graph_copy_12[v_20] : null), i_23);
                if ((((n_25 != u_18) && (n_25 != v_20)) && (Program.contains(uv_neighbors_22, n_25) == false))) {
                    uv_neighbors_22 = ((Func<string[]>)(() => { var _tmp = uv_neighbors_22.ToList(); _tmp.Add(n_25); return _tmp.ToArray(); }))();
                }
                i_23 = (i_23 + 1);
            }
            graph_copy_12[uv_21] = uv_neighbors_22;
            long k_26 = 0;
            while ((k_26 < uv_neighbors_22.Length)) {
                string nb_27 = _idx(uv_neighbors_22, k_26);
                graph_copy_12[nb_27] = ((Func<string[]>)(() => { var _tmp = (graph_copy_12.ContainsKey(nb_27) ? graph_copy_12[nb_27] : null).ToList(); _tmp.Add(uv_21); return _tmp.ToArray(); }))();
                graph_copy_12[nb_27] = Program.remove_all((graph_copy_12.ContainsKey(nb_27) ? graph_copy_12[nb_27] : null), u_18);
                graph_copy_12[nb_27] = Program.remove_all((graph_copy_12.ContainsKey(nb_27) ? graph_copy_12[nb_27] : null), v_20);
                k_26 = (k_26 + 1);
            }
            string[] group_28 = new string[]{};
            i_23 = 0;
            while ((i_23 < (contracted_10.ContainsKey(u_18) ? contracted_10[u_18] : null).Length)) {
                group_28 = ((Func<string[]>)(() => { var _tmp = group_28.ToList(); _tmp.Add(_idx((contracted_10.ContainsKey(u_18) ? contracted_10[u_18] : null), i_23)); return _tmp.ToArray(); }))();
                i_23 = (i_23 + 1);
            }
            i_23 = 0;
            while ((i_23 < (contracted_10.ContainsKey(v_20) ? contracted_10[v_20] : null).Length)) {
                string val_29 = _idx((contracted_10.ContainsKey(v_20) ? contracted_10[v_20] : null), i_23);
                if ((Program.contains(group_28, val_29) == false)) {
                    group_28 = ((Func<string[]>)(() => { var _tmp = group_28.ToList(); _tmp.Add(val_29); return _tmp.ToArray(); }))();
                }
                i_23 = (i_23 + 1);
            }
            contracted_10[uv_21] = group_28;
            nodes_17 = Program.remove_all(nodes_17, u_18);
            nodes_17 = Program.remove_all(nodes_17, v_20);
            nodes_17 = ((Func<string[]>)(() => { var _tmp = nodes_17.ToList(); _tmp.Add(uv_21); return _tmp.ToArray(); }))();
        };
        string[][] groups_30 = new string[][]{};
        long j_31 = 0;
        while ((j_31 < nodes_17.Length)) {
            string n_32 = _idx(nodes_17, j_31);
            groups_30 = ((Func<string[][]>)(() => { var _tmp = groups_30.ToList(); _tmp.Add((contracted_10.ContainsKey(n_32) ? contracted_10[n_32] : null)); return _tmp.ToArray(); }))();
            j_31 = (j_31 + 1);
        };
        string[] groupA_33 = _idx(groups_30, 0);
        string[] groupB_34 = _idx(groups_30, 1);
        Pair[] cut_35 = new Pair[]{};
        j_31 = 0;
        while ((j_31 < groupA_33.Length)) {
            string node_36 = _idx(groupA_33, j_31);
            string[] neigh_37 = (graph_9.ContainsKey(node_36) ? graph_9[node_36] : null);
            long l_38 = 0;
            while ((l_38 < neigh_37.Length)) {
                string nb_39 = _idx(neigh_37, l_38);
                if (Program.contains(groupB_34, nb_39)) {
                    cut_35 = ((Func<Pair[]>)(() => { var _tmp = cut_35.ToList(); _tmp.Add(new Pair{a = node_36, b = nb_39}); return _tmp.ToArray(); }))();
                }
                l_38 = (l_38 + 1);
            }
            j_31 = (j_31 + 1);
        };
        return cut_35;
    }

    public static string cut_to_string(Pair[] cut_40) {
        string s_41 = "{";
        long i_42 = 0;
        while ((i_42 < cut_40.Length)) {
            Pair p_43 = _idx(cut_40, i_42);
            s_41 = (((((s_41 + "(") + p_43.a) + ", ") + p_43.b) + ")");
            if ((i_42 < (cut_40.Length - 1))) {
                s_41 = (s_41 + ", ");
            }
            i_42 = (i_42 + 1);
        };
        s_41 = (s_41 + "}");
        return s_41;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.cut_to_string(result_45)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
