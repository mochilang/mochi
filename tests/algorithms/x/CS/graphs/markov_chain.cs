// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Transition {
    public string src;
    public string dst;
    public double prob;
    public override string ToString() => $"Transition {{src = \"{src}\", dst = \"{dst}\", prob = {prob.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_0 = 1;
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return seed_0;
    }

    public static double random() {
        return ((1.0 * Program.rand()) / 2147483648.0);
    }

    public static string[] get_nodes(Transition[] trans_1) {
        Dictionary<string, bool> seen_2 = new Dictionary<string, bool>{};
        foreach (Transition t_3 in trans_1) {
            seen_2[t_3.src] = true;
            seen_2[t_3.dst] = true;
        };
        string[] nodes_4 = new string[]{};
        foreach (string k_5 in seen_2.Keys.ToArray()) {
            nodes_4 = ((Func<string[]>)(() => { var _tmp = nodes_4.ToList(); _tmp.Add(k_5); return _tmp.ToArray(); }))();
        };
        return nodes_4;
    }

    public static string transition(string current_6, Transition[] trans_7) {
        double current_probability_8 = 0.0;
        double random_value_9 = Program.random();
        foreach (Transition t_10 in trans_7) {
            if ((t_10.src == current_6)) {
                current_probability_8 = (current_probability_8 + t_10.prob);
                if ((current_probability_8 > random_value_9)) {
                    return t_10.dst;
                }
            }
        };
        return "";
    }

    public static Dictionary<string, long> get_transitions(string start_11, Transition[] trans_12, long steps_13) {
        Dictionary<string, long> visited_14 = new Dictionary<string, long>{};
        foreach (string node_15 in Program.get_nodes(trans_12)) {
            long one_16 = 1;
            visited_14[node_15] = one_16;
        };
        string node_17 = start_11;
        long i_18 = 0;
        while ((i_18 < steps_13)) {
            node_17 = Program.transition(node_17, trans_12);
            long count_19 = (visited_14.ContainsKey(node_17) ? visited_14[node_17] : 0);
            count_19 = (count_19 + 1);
            visited_14[node_17] = count_19;
            i_18 = (i_18 + 1);
        };
        return visited_14;
    }

    public static void main() {
        Transition[] transitions_20 = new Transition[]{new Transition{src = "a", dst = "a", prob = 0.90000000000000002}, new Transition{src = "a", dst = "b", prob = 0.074999999999999997}, new Transition{src = "a", dst = "c", prob = 0.025000000000000001}, new Transition{src = "b", dst = "a", prob = 0.14999999999999999}, new Transition{src = "b", dst = "b", prob = 0.80000000000000004}, new Transition{src = "b", dst = "c", prob = 0.050000000000000003}, new Transition{src = "c", dst = "a", prob = 0.25}, new Transition{src = "c", dst = "b", prob = 0.25}, new Transition{src = "c", dst = "c", prob = 0.5}};
        Dictionary<string, long> result_21 = Program.get_transitions("a", transitions_20, 5000);
        Console.WriteLine(Program._fmtTop(((((_fmtStr((result_21.ContainsKey("a") ? result_21["a"] : 0)) + " ") + _fmtStr((result_21.ContainsKey("b") ? result_21["b"] : 0))) + " ") + _fmtStr((result_21.ContainsKey("c") ? result_21["c"] : 0)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
