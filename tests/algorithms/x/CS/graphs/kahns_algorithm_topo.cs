// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] topological_sort(Dictionary<long, long[]> graph_0) {
        long[] indegree_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < graph_0.Count)) {
            indegree_1 = (Enumerable.ToArray(Enumerable.Append<long>(indegree_1, 0)));
            i_2 = (i_2 + 1);
        };
        foreach (long[] edges_3 in graph_0.Values.ToList()) {
            long j_4 = 0;
            while ((j_4 < edges_3.Length)) {
                long v_5 = edges_3[(int)(j_4)];
                indegree_1[v_5] = (indegree_1[(int)(v_5)] + 1);
                j_4 = (j_4 + 1);
            }
        };
        long[] queue_6 = new long[]{};
        i_2 = 0;
        while ((i_2 < indegree_1.Length)) {
            if ((indegree_1[(int)(i_2)] == 0)) {
                queue_6 = (Enumerable.ToArray(Enumerable.Append<long>(queue_6, i_2)));
            }
            i_2 = (i_2 + 1);
        };
        long[] order_7 = new long[]{};
        long head_8 = 0;
        long processed_9 = 0;
        while ((head_8 < queue_6.Length)) {
            long v_10 = queue_6[(int)(head_8)];
            head_8 = (head_8 + 1);
            processed_9 = (processed_9 + 1);
            order_7 = (Enumerable.ToArray(Enumerable.Append<long>(order_7, v_10)));
            long[] neighbors_11 = (graph_0.ContainsKey(v_10) ? graph_0[v_10] : null);
            long k_12 = 0;
            while ((k_12 < neighbors_11.Length)) {
                long nb_13 = neighbors_11[(int)(k_12)];
                indegree_1[nb_13] = (indegree_1[(int)(nb_13)] - 1);
                if ((indegree_1[(int)(nb_13)] == 0)) {
                    queue_6 = (Enumerable.ToArray(Enumerable.Append<long>(queue_6, nb_13)));
                }
                k_12 = (k_12 + 1);
            }
        };
        if ((processed_9 != graph_0.Count)) {
            return (long[])null;
        };
        return order_7;
    }

    public static void main() {
        Dictionary<long, long[]> graph_14 = new Dictionary<long, long[]>{{0, new long[]{1, 2}}, {1, new long[]{3}}, {2, new long[]{3}}, {3, new long[]{4, 5}}, {4, new long[]{}}, {5, new long[]{}}};
        Console.WriteLine(Program._fmtTop(Program.topological_sort(graph_14)));
        Dictionary<long, long[]> cyclic_15 = new Dictionary<long, long[]>{{0, new long[]{1}}, {1, new long[]{2}}, {2, new long[]{0}}};
        Console.WriteLine(Program._fmtTop(Program.topological_sort(cyclic_15)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
