// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static Dictionary<string, string[]> demo_graph_27 = new Dictionary<string, string[]>{{"A", new string[]{"B", "C", "E"}}, {"B", new string[]{"A", "D", "E"}}, {"C", new string[]{"A", "F", "G"}}, {"D", new string[]{"B"}}, {"E", new string[]{"A", "B", "D"}}, {"F", new string[]{"C"}}, {"G", new string[]{"C"}}};
    public static bool contains(string[] xs_0, string x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static bool contains_key(Dictionary<string, string[]> m_3, string key_4) {
        foreach (string k_5 in m_3.Keys) {
            if ((k_5 == key_4)) {
                return true;
            }
        };
        return false;
    }

    public static string[] bfs_shortest_path(Dictionary<string, string[]> graph_6, string start_7, string goal_8) {
        string[] explored_9 = new string[]{};
        string[][] queue_10 = new string[][]{new string[]{start_7}};
        if ((start_7 == goal_8)) {
            return new string[]{start_7};
        };
        while ((queue_10.Length > 0)) {
            string[] path_11 = queue_10[(int)(0)];
            queue_10 = queue_10.Skip((int)(1)).Take((int)((queue_10.Length - 1))).ToArray();
            string node_12 = path_11[(int)((path_11.Length - 1))];
            if ((!Program.contains(explored_9, node_12))) {
                string[] neighbours_13 = (graph_6.ContainsKey(node_12) ? graph_6[node_12] : null);
                long i_14 = 0;
                while ((i_14 < neighbours_13.Length)) {
                    string neighbour_15 = neighbours_13[(int)(i_14)];
                    string[] new_path_16 = path_11;
                    new_path_16 = (Enumerable.ToArray(Enumerable.Append<string>(new_path_16, neighbour_15)));
                    queue_10 = (Enumerable.ToArray(Enumerable.Append<string[]>(queue_10, new_path_16)));
                    if ((neighbour_15 == goal_8)) {
                        return new_path_16;
                    }
                    i_14 = (i_14 + 1);
                }
                explored_9 = (Enumerable.ToArray(Enumerable.Append<string>(explored_9, node_12)));
            }
        };
        return new string[]{};
    }

    public static long bfs_shortest_path_distance(Dictionary<string, string[]> graph_17, string start_18, string target_19) {
        if (((Program.contains_key(graph_17, start_18) == false) || (Program.contains_key(graph_17, target_19) == false))) {
            return -1;
        };
        if ((start_18 == target_19)) {
            return 0;
        };
        string[] queue_20 = new string[]{start_18};
        string[] visited_21 = new string[]{start_18};
        Dictionary<string, long> dist_22 = new Dictionary<string, long>{};
        dist_22[start_18] = 0;
        dist_22[target_19] = -1;
        while ((queue_20.Length > 0)) {
            string node_23 = queue_20[(int)(0)];
            queue_20 = queue_20.Skip((int)(1)).Take((int)((queue_20.Length - 1))).ToArray();
            if ((node_23 == target_19)) {
                if ((((dist_22.ContainsKey(target_19) ? dist_22[target_19] : 0) == -1) || ((dist_22.ContainsKey(node_23) ? dist_22[node_23] : 0) < (dist_22.ContainsKey(target_19) ? dist_22[target_19] : 0)))) {
                    dist_22[target_19] = (dist_22.ContainsKey(node_23) ? dist_22[node_23] : 0);
                }
            }
            string[] adj_24 = (graph_17.ContainsKey(node_23) ? graph_17[node_23] : null);
            long i_25 = 0;
            while ((i_25 < adj_24.Length)) {
                string next_26 = adj_24[(int)(i_25)];
                if ((!Program.contains(visited_21, next_26))) {
                    visited_21 = (Enumerable.ToArray(Enumerable.Append<string>(visited_21, next_26)));
                    queue_20 = (Enumerable.ToArray(Enumerable.Append<string>(queue_20, next_26)));
                    dist_22[next_26] = ((dist_22.ContainsKey(node_23) ? dist_22[node_23] : 0) + 1);
                }
                i_25 = (i_25 + 1);
            }
        };
        return (dist_22.ContainsKey(target_19) ? dist_22[target_19] : 0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
