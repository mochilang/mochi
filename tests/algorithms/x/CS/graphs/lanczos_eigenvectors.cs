// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class LanczosResult {
    public double[][] t;
    public double[][] q;
    public override string ToString() => $"LanczosResult {{t = {t}, q = {q}}}";
}
class EigenResult {
    public double[] values;
    public double[][] vectors;
    public override string ToString() => $"EigenResult {{values = {values}, vectors = {vectors}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_0 = 123456789;
    static long[][] graph_118 = new long[][]{new long[]{1, 2}, new long[]{0, 2}, new long[]{0, 1}};
    static EigenResult result_119 = Program.find_lanczos_eigenvectors(graph_118, 2);
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return seed_0;
    }

    public static double random() {
        return ((1.0 * Program.rand()) / 2147483648.0);
    }

    public static double sqrtApprox(double x_1) {
        if ((x_1 <= 0.0)) {
            return 0.0;
        };
        double guess_2 = x_1;
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double absf(double x_4) {
        return ((x_4 < 0.0) ? -x_4 : x_4);
    }

    public static double dot(double[] a_5, double[] b_6) {
        double s_7 = 0.0;
        long i_8 = 0;
        while ((i_8 < a_5.Length)) {
            s_7 = (s_7 + (_idx(a_5, i_8) * _idx(b_6, i_8)));
            i_8 = (i_8 + 1);
        };
        return s_7;
    }

    public static double[] vector_scale(double[] v_9, double s_10) {
        double[] res_11 = new double[]{};
        long i_12 = 0;
        while ((i_12 < v_9.Length)) {
            res_11 = ((Func<double[]>)(() => { var _tmp = res_11.ToList(); _tmp.Add((_idx(v_9, i_12) * s_10)); return _tmp.ToArray(); }))();
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static double[] vector_sub(double[] a_13, double[] b_14) {
        double[] res_15 = new double[]{};
        long i_16 = 0;
        while ((i_16 < a_13.Length)) {
            res_15 = ((Func<double[]>)(() => { var _tmp = res_15.ToList(); _tmp.Add((_idx(a_13, i_16) - _idx(b_14, i_16))); return _tmp.ToArray(); }))();
            i_16 = (i_16 + 1);
        };
        return res_15;
    }

    public static double[] vector_add(double[] a_17, double[] b_18) {
        double[] res_19 = new double[]{};
        long i_20 = 0;
        while ((i_20 < a_17.Length)) {
            res_19 = ((Func<double[]>)(() => { var _tmp = res_19.ToList(); _tmp.Add((_idx(a_17, i_20) + _idx(b_18, i_20))); return _tmp.ToArray(); }))();
            i_20 = (i_20 + 1);
        };
        return res_19;
    }

    public static double[][] zeros_matrix(long r_21, long c_22) {
        double[][] m_23 = new double[][]{};
        long i_24 = 0;
        while ((i_24 < r_21)) {
            double[] row_25 = new double[]{};
            long j_26 = 0;
            while ((j_26 < c_22)) {
                row_25 = ((Func<double[]>)(() => { var _tmp = row_25.ToList(); _tmp.Add(0.0); return _tmp.ToArray(); }))();
                j_26 = (j_26 + 1);
            }
            m_23 = ((Func<double[][]>)(() => { var _tmp = m_23.ToList(); _tmp.Add(row_25); return _tmp.ToArray(); }))();
            i_24 = (i_24 + 1);
        };
        return m_23;
    }

    public static double[] column(double[][] m_27, long idx_28) {
        double[] col_29 = new double[]{};
        long i_30 = 0;
        while ((i_30 < m_27.Length)) {
            col_29 = ((Func<double[]>)(() => { var _tmp = col_29.ToList(); _tmp.Add(_idx(_idx(m_27, i_30), idx_28)); return _tmp.ToArray(); }))();
            i_30 = (i_30 + 1);
        };
        return col_29;
    }

    public static void validate_adjacency_list(long[][] graph_31) {
        long i_32 = 0;
        while ((i_32 < graph_31.Length)) {
            long j_33 = 0;
            while ((j_33 < _idx(graph_31, i_32).Length)) {
                long v_34 = _idx(_idx(graph_31, i_32), j_33);
                if (((v_34 < 0) || (v_34 >= graph_31.Length))) {
                    throw new Exception("Invalid neighbor");
                }
                j_33 = (j_33 + 1);
            }
            i_32 = (i_32 + 1);
        };
    }

    public static double[] multiply_matrix_vector(long[][] graph_35, double[] vector_36) {
        long n_37 = graph_35.Length;
        if ((vector_36.Length != n_37)) {
            throw new Exception("Vector length must match number of nodes");
        };
        double[] result_38 = new double[]{};
        long i_39 = 0;
        while ((i_39 < n_37)) {
            double sum_40 = 0.0;
            long j_41 = 0;
            while ((j_41 < _idx(graph_35, i_39).Length)) {
                long nb_42 = _idx(_idx(graph_35, i_39), j_41);
                sum_40 = (sum_40 + _idx(vector_36, nb_42));
                j_41 = (j_41 + 1);
            }
            result_38 = ((Func<double[]>)(() => { var _tmp = result_38.ToList(); _tmp.Add(sum_40); return _tmp.ToArray(); }))();
            i_39 = (i_39 + 1);
        };
        return result_38;
    }

    public static LanczosResult lanczos_iteration(long[][] graph_43, long k_44) {
        long n_45 = graph_43.Length;
        if (((k_44 < 1) || (k_44 > n_45))) {
            throw new Exception("invalid number of eigenvectors");
        };
        double[][] q_46 = Program.zeros_matrix(n_45, k_44);
        double[][] t_47 = Program.zeros_matrix(k_44, k_44);
        double[] v_48 = new double[]{};
        long i_49 = 0;
        while ((i_49 < n_45)) {
            v_48 = ((Func<double[]>)(() => { var _tmp = v_48.ToList(); _tmp.Add(Program.random()); return _tmp.ToArray(); }))();
            i_49 = (i_49 + 1);
        };
        double ss_50 = 0.0;
        i_49 = 0;
        while ((i_49 < n_45)) {
            ss_50 = (ss_50 + (_idx(v_48, i_49) * _idx(v_48, i_49)));
            i_49 = (i_49 + 1);
        };
        double vnorm_51 = Program.sqrtApprox(ss_50);
        i_49 = 0;
        while ((i_49 < n_45)) {
            _idx(q_46, i_49)[(int)(0)] = (_idx(v_48, i_49) / vnorm_51);
            i_49 = (i_49 + 1);
        };
        double beta_52 = 0.0;
        long j_53 = 0;
        while ((j_53 < k_44)) {
            double[] w_54 = Program.multiply_matrix_vector(graph_43, Program.column(q_46, j_53));
            if ((j_53 > 0)) {
                w_54 = Program.vector_sub(w_54, Program.vector_scale(Program.column(q_46, (j_53 - 1)), beta_52));
            }
            double alpha_55 = Program.dot(Program.column(q_46, j_53), w_54);
            w_54 = Program.vector_sub(w_54, Program.vector_scale(Program.column(q_46, j_53), alpha_55));
            double ss2_56 = 0.0;
            long p_57 = 0;
            while ((p_57 < n_45)) {
                ss2_56 = (ss2_56 + (_idx(w_54, p_57) * _idx(w_54, p_57)));
                p_57 = (p_57 + 1);
            }
            beta_52 = Program.sqrtApprox(ss2_56);
            _idx(t_47, j_53)[(int)(j_53)] = alpha_55;
            if ((j_53 < (k_44 - 1))) {
                _idx(t_47, j_53)[(int)((j_53 + 1))] = beta_52;
                _idx(t_47, (j_53 + 1))[(int)(j_53)] = beta_52;
                if ((beta_52 > 1e-10)) {
                    double[] wnorm_58 = Program.vector_scale(w_54, (1.0 / beta_52));
                    long r_59 = 0;
                    while ((r_59 < n_45)) {
                        _idx(q_46, r_59)[(int)((j_53 + 1))] = _idx(wnorm_58, r_59);
                        r_59 = (r_59 + 1);
                    }
                }
            }
            j_53 = (j_53 + 1);
        };
        return new LanczosResult{t = t_47, q = q_46};
    }

    public static EigenResult jacobi_eigen(double[][] a_in_60, long max_iter_61) {
        long n_62 = a_in_60.Length;
        double[][] a_63 = a_in_60;
        double[][] v_64 = Program.zeros_matrix(n_62, n_62);
        long i_65 = 0;
        while ((i_65 < n_62)) {
            _idx(v_64, i_65)[(int)(i_65)] = 1.0;
            i_65 = (i_65 + 1);
        };
        long iter_66 = 0;
        while ((iter_66 < max_iter_61)) {
            long p_67 = 0;
            long q_68 = 1;
            double max_69 = Program.absf(_idx(_idx(a_63, p_67), q_68));
            i_65 = 0;
            while ((i_65 < n_62)) {
                long j_70 = (i_65 + 1);
                while ((j_70 < n_62)) {
                    double val_71 = Program.absf(_idx(_idx(a_63, i_65), j_70));
                    if ((val_71 > max_69)) {
                        max_69 = val_71;
                        p_67 = i_65;
                        q_68 = j_70;
                    }
                    j_70 = (j_70 + 1);
                }
                i_65 = (i_65 + 1);
            }
            if ((max_69 < 1e-08)) {
                break;
            }
            double app_72 = _idx(_idx(a_63, p_67), p_67);
            double aqq_73 = _idx(_idx(a_63, q_68), q_68);
            double apq_74 = _idx(_idx(a_63, p_67), q_68);
            double theta_75 = ((aqq_73 - app_72) / (2.0 * apq_74));
            double t_76 = (1.0 / (Program.absf(theta_75) + Program.sqrtApprox(((theta_75 * theta_75) + 1.0))));
            if ((theta_75 < 0.0)) {
                t_76 = -t_76;
            }
            double c_77 = (1.0 / Program.sqrtApprox((1.0 + (t_76 * t_76))));
            double s_78 = (t_76 * c_77);
            double tau_79 = (s_78 / (1.0 + c_77));
            _idx(a_63, p_67)[(int)(p_67)] = (app_72 - (t_76 * apq_74));
            _idx(a_63, q_68)[(int)(q_68)] = (aqq_73 + (t_76 * apq_74));
            _idx(a_63, p_67)[(int)(q_68)] = 0.0;
            _idx(a_63, q_68)[(int)(p_67)] = 0.0;
            long k_80 = 0;
            while ((k_80 < n_62)) {
                if (((k_80 != p_67) && (k_80 != q_68))) {
                    double akp_81 = _idx(_idx(a_63, k_80), p_67);
                    double akq_82 = _idx(_idx(a_63, k_80), q_68);
                    _idx(a_63, k_80)[(int)(p_67)] = (akp_81 - (s_78 * (akq_82 + (tau_79 * akp_81))));
                    _idx(a_63, p_67)[(int)(k_80)] = _idx(_idx(a_63, k_80), p_67);
                    _idx(a_63, k_80)[(int)(q_68)] = (akq_82 + (s_78 * (akp_81 - (tau_79 * akq_82))));
                    _idx(a_63, q_68)[(int)(k_80)] = _idx(_idx(a_63, k_80), q_68);
                }
                k_80 = (k_80 + 1);
            }
            k_80 = 0;
            while ((k_80 < n_62)) {
                double vkp_83 = _idx(_idx(v_64, k_80), p_67);
                double vkq_84 = _idx(_idx(v_64, k_80), q_68);
                _idx(v_64, k_80)[(int)(p_67)] = (vkp_83 - (s_78 * (vkq_84 + (tau_79 * vkp_83))));
                _idx(v_64, k_80)[(int)(q_68)] = (vkq_84 + (s_78 * (vkp_83 - (tau_79 * vkq_84))));
                k_80 = (k_80 + 1);
            }
            iter_66 = (iter_66 + 1);
        };
        double[] eigenvalues_85 = new double[]{};
        i_65 = 0;
        while ((i_65 < n_62)) {
            eigenvalues_85 = ((Func<double[]>)(() => { var _tmp = eigenvalues_85.ToList(); _tmp.Add(_idx(_idx(a_63, i_65), i_65)); return _tmp.ToArray(); }))();
            i_65 = (i_65 + 1);
        };
        return new EigenResult{values = eigenvalues_85, vectors = v_64};
    }

    public static double[][] matmul(double[][] a_86, double[][] b_87) {
        long rows_88 = a_86.Length;
        long cols_89 = _idx(b_87, 0).Length;
        long inner_90 = b_87.Length;
        double[][] m_91 = Program.zeros_matrix(rows_88, cols_89);
        long i_92 = 0;
        while ((i_92 < rows_88)) {
            long j_93 = 0;
            while ((j_93 < cols_89)) {
                double s_94 = 0.0;
                long k_95 = 0;
                while ((k_95 < inner_90)) {
                    s_94 = (s_94 + (_idx(_idx(a_86, i_92), k_95) * _idx(_idx(b_87, k_95), j_93)));
                    k_95 = (k_95 + 1);
                }
                _idx(m_91, i_92)[(int)(j_93)] = s_94;
                j_93 = (j_93 + 1);
            }
            i_92 = (i_92 + 1);
        };
        return m_91;
    }

    public static EigenResult sort_eigenpairs(double[] vals_96, double[][] vecs_97) {
        long n_98 = vals_96.Length;
        double[] values_99 = vals_96;
        double[][] vectors_100 = vecs_97;
        long i_101 = 0;
        while ((i_101 < n_98)) {
            long j_102 = 0;
            while ((j_102 < (n_98 - 1))) {
                if ((_idx(values_99, j_102) < _idx(values_99, (j_102 + 1)))) {
                    double tmp_103 = _idx(values_99, j_102);
                    values_99[(int)(j_102)] = _idx(values_99, (j_102 + 1));
                    values_99[(int)((j_102 + 1))] = tmp_103;
                    long r_104 = 0;
                    while ((r_104 < vectors_100.Length)) {
                        double tv_105 = _idx(_idx(vectors_100, r_104), j_102);
                        _idx(vectors_100, r_104)[(int)(j_102)] = _idx(_idx(vectors_100, r_104), (j_102 + 1));
                        _idx(vectors_100, r_104)[(int)((j_102 + 1))] = tv_105;
                        r_104 = (r_104 + 1);
                    }
                }
                j_102 = (j_102 + 1);
            }
            i_101 = (i_101 + 1);
        };
        return new EigenResult{values = values_99, vectors = vectors_100};
    }

    public static EigenResult find_lanczos_eigenvectors(long[][] graph_106, long k_107) {
        Program.validate_adjacency_list(graph_106);
        LanczosResult res_108 = Program.lanczos_iteration(graph_106, k_107);
        EigenResult eig_109 = Program.jacobi_eigen(res_108.t, 50);
        EigenResult sorted_110 = Program.sort_eigenpairs(eig_109.values, eig_109.vectors);
        double[][] final_vectors_111 = Program.matmul(res_108.q, sorted_110.vectors);
        return new EigenResult{values = sorted_110.values, vectors = final_vectors_111};
    }

    public static string list_to_string(double[] arr_112) {
        string s_113 = "[";
        long i_114 = 0;
        while ((i_114 < arr_112.Length)) {
            s_113 = (s_113 + _fmtStr(_idx(arr_112, i_114)));
            if ((i_114 < (arr_112.Length - 1))) {
                s_113 = (s_113 + ", ");
            }
            i_114 = (i_114 + 1);
        };
        return (s_113 + "]");
    }

    public static string matrix_to_string(double[][] m_115) {
        string s_116 = "[";
        long i_117 = 0;
        while ((i_117 < m_115.Length)) {
            s_116 = (s_116 + Program.list_to_string(_idx(m_115, i_117)));
            if ((i_117 < (m_115.Length - 1))) {
                s_116 = (s_116 + "; ");
            }
            i_117 = (i_117 + 1);
        };
        return (s_116 + "]");
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(result_119.values)));
            Console.WriteLine(Program._fmtTop(Program.matrix_to_string(result_119.vectors)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
