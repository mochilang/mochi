// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<long, long[]> test_graph_1_0 = new Dictionary<long, long[]>{{0, new long[]{1, 2}}, {1, new long[]{0, 3}}, {2, new long[]{0}}, {3, new long[]{1}}, {4, new long[]{5, 6}}, {5, new long[]{4, 6}}, {6, new long[]{4, 5}}};
    static Dictionary<long, long[]> test_graph_2_1 = new Dictionary<long, long[]>{{0, new long[]{1, 2, 3}}, {1, new long[]{0, 3}}, {2, new long[]{0}}, {3, new long[]{0, 1}}, {4, new long[]{}}, {5, new long[]{}}};
    public static long[] dfs(Dictionary<long, long[]> graph_2, long vert_3, bool[] visited_4) {
        visited_4[(int)(vert_3)] = true;
        long[] connected_verts_5 = new long[]{};
        foreach (long neighbour_6 in (graph_2.ContainsKey(vert_3) ? graph_2[vert_3] : null)) {
            if ((!_idx(visited_4, neighbour_6))) {
                connected_verts_5 = (Enumerable.ToArray(Enumerable.Concat(connected_verts_5, Program.dfs(graph_2, neighbour_6, visited_4))));
            }
        };
        return (Enumerable.ToArray(Enumerable.Concat(new long[]{vert_3}, connected_verts_5)));
    }

    public static long[][] connected_components(Dictionary<long, long[]> graph_7) {
        long graph_size_8 = graph_7.Count;
        bool[] visited_9 = new bool[]{};
        for (var __10 = 0; __10 < graph_size_8; __10++) {
            visited_9 = ((Func<bool[]>)(() => { var _tmp = visited_9.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
        };
        long[][] components_list_11 = new long[][]{};
        for (var i_12 = 0; i_12 < graph_size_8; i_12++) {
            if ((!_idx(visited_9, i_12))) {
                long[] component_13 = Program.dfs(graph_7, i_12, visited_9);
                components_list_11 = ((Func<long[][]>)(() => { var _tmp = components_list_11.ToList(); _tmp.Add(component_13); return _tmp.ToArray(); }))();
            }
        };
        return components_list_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.connected_components(test_graph_1_0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.connected_components(test_graph_2_1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
