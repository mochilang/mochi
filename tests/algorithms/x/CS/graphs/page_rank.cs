// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Node {
    public string name;
    public string[] inbound;
    public string[] outbound;
    public override string ToString() => $"Node {{name = \"{name}\", inbound = {inbound}, outbound = {outbound}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string[] names_12 = new string[]{"A", "B", "C"};
    static long[][] graph_13 = new long[][]{new long[]{0, 1, 1}, new long[]{0, 0, 1}, new long[]{1, 0, 0}};
    static Node[] nodes_14 = new Node[]{};
    public static string node_to_string(Node n_0) {
        return (((((("<node=" + n_0.name) + " inbound=") + string.Concat(n_0.inbound)) + " outbound=") + string.Concat(n_0.outbound)) + ">");
    }

    public static Dictionary<string, double> page_rank(Node[] nodes_1, long limit_2, double d_3) {
        Dictionary<string, double> ranks_4 = new Dictionary<string, double>{};
        foreach (Node n_5 in nodes_1) {
            ranks_4[n_5.name] = 1.0;
        };
        Dictionary<string, double> outbounds_6 = new Dictionary<string, double>{};
        foreach (Node n_7 in nodes_1) {
            outbounds_6[n_7.name] = (1.0 * n_7.outbound.Length);
        };
        long i_8 = 0;
        while ((i_8 < limit_2)) {
            Console.WriteLine(Program._fmtTop((("======= Iteration " + _fmtStr((i_8 + 1))) + " =======")));
            foreach (Node n_9 in nodes_1) {
                double sum_val_10 = 0.0;
                foreach (string ib_11 in n_9.inbound) {
                    sum_val_10 = (sum_val_10 + ((ranks_4.ContainsKey(ib_11) ? ranks_4[ib_11] : 0.0) / (outbounds_6.ContainsKey(ib_11) ? outbounds_6[ib_11] : 0.0)));
                }
                ranks_4[n_9.name] = ((1.0 - d_3) + (d_3 * sum_val_10));
            }
            Console.WriteLine(Program._fmtTop(ranks_4));
            i_8 = (i_8 + 1);
        };
        return ranks_4;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (string name_15 in names_12) {
                nodes_14 = ((Func<Node[]>)(() => { var _tmp = nodes_14.ToList(); _tmp.Add(new Node{name = name_15, inbound = new string[]{}, outbound = new string[]{}}); return _tmp.ToArray(); }))();
            }
            long ri_16 = 0;
            while ((ri_16 < graph_13.Length)) {
                long[] row_17 = _idx(graph_13, ri_16);
                long ci_18 = 0;
                while ((ci_18 < row_17.Length)) {
                    if ((_idx(row_17, ci_18) == 1)) {
                        Node n_in_19 = _idx(nodes_14, ci_18);
                        n_in_19.inbound = ((Func<string[]>)(() => { var _tmp = n_in_19.inbound.ToList(); _tmp.Add(_idx(names_12, ri_16)); return _tmp.ToArray(); }))();
                        nodes_14[(int)(ci_18)] = n_in_19;
                        Node n_out_20 = _idx(nodes_14, ri_16);
                        n_out_20.outbound = ((Func<string[]>)(() => { var _tmp = n_out_20.outbound.ToList(); _tmp.Add(_idx(names_12, ci_18)); return _tmp.ToArray(); }))();
                        nodes_14[(int)(ri_16)] = n_out_20;
                    }
                    ci_18 = (ci_18 + 1);
                }
                ri_16 = (ri_16 + 1);
            }
            Console.WriteLine(Program._fmtTop("======= Nodes ======="));
            foreach (Node n_21 in nodes_14) {
                Console.WriteLine(Program._fmtTop(n_21));
            }
            Program.page_rank(nodes_14, 3, 0.84999999999999998);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
