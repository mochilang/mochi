// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Edge {
    public long u;
    public long v;
    public long w;
    public override string ToString() => $"Edge {{u = {u}, v = {v}, w = {w}}}";
}
class Graph {
    public Edge[] edges;
    public long num_nodes;
    public override string ToString() => $"Graph {{edges = {edges}, num_nodes = {num_nodes}}}";
}
class DS {
    public long[] parent;
    public long[] rank;
    public override string ToString() => $"DS {{parent = {parent}, rank = {rank}}}";
}
class FindResult {
    public DS ds;
    public long root;
    public override string ToString() => $"FindResult {{ds = {ds}, root = {root}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Graph new_graph() {
        return new Graph{edges = new Edge[]{}, num_nodes = 0};
    }

    public static Graph add_edge(Graph g_0, long u_1, long v_2, long w_3) {
        Edge[] es_4 = g_0.edges;
        es_4 = (Enumerable.ToArray(Enumerable.Append<Edge>(es_4, new Edge{u = u_1, v = v_2, w = w_3})));
        long n_5 = g_0.num_nodes;
        if ((u_1 > n_5)) {
            n_5 = u_1;
        };
        if ((v_2 > n_5)) {
            n_5 = v_2;
        };
        return new Graph{edges = es_4, num_nodes = n_5};
    }

    public static DS make_ds(long n_6) {
        long[] parent_7 = new long[]{};
        long[] rank_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 <= n_6)) {
            parent_7 = (Enumerable.ToArray(Enumerable.Append<long>(parent_7, i_9)));
            rank_8 = (Enumerable.ToArray(Enumerable.Append<long>(rank_8, 0)));
            i_9 = (i_9 + 1);
        };
        return new DS{parent = parent_7, rank = rank_8};
    }

    public static FindResult find_set(DS ds_10, long x_11) {
        if ((ds_10.parent[(int)(x_11)] == x_11)) {
            return new FindResult{ds = ds_10, root = x_11};
        };
        FindResult res_12 = Program.find_set(ds_10, ds_10.parent[(int)(x_11)]);
        long[] p_13 = res_12.ds.parent;
        p_13[x_11] = res_12.root;
        return new FindResult{ds = new DS{parent = p_13, rank = res_12.ds.rank}, root = res_12.root};
    }

    public static DS union_set(DS ds_14, long x_15, long y_16) {
        FindResult fx_17 = Program.find_set(ds_14, x_15);
        DS ds1_18 = fx_17.ds;
        long x_root_19 = fx_17.root;
        FindResult fy_20 = Program.find_set(ds1_18, y_16);
        DS ds2_21 = fy_20.ds;
        long y_root_22 = fy_20.root;
        if ((x_root_19 == y_root_22)) {
            return ds2_21;
        };
        long[] p_23 = ds2_21.parent;
        long[] r_24 = ds2_21.rank;
        if ((r_24[(int)(x_root_19)] > r_24[(int)(y_root_22)])) {
            p_23[y_root_22] = x_root_19;
        } else {
            p_23[x_root_19] = y_root_22;
            if ((r_24[(int)(x_root_19)] == r_24[(int)(y_root_22)])) {
                r_24[y_root_22] = (r_24[(int)(y_root_22)] + 1);
            }
        };
        return new DS{parent = p_23, rank = r_24};
    }

    public static Edge[] sort_edges(Edge[] edges_25) {
        Edge[] arr_26 = edges_25;
        long i_27 = 1;
        while ((i_27 < arr_26.Length)) {
            Edge key_28 = arr_26[(int)(i_27)];
            long j_29 = (i_27 - 1);
            while ((j_29 >= 0)) {
                Edge temp_30 = arr_26[(int)(j_29)];
                if (((temp_30.w > key_28.w) || ((temp_30.w == key_28.w) && ((temp_30.u > key_28.u) || ((temp_30.u == key_28.u) && (temp_30.v > key_28.v)))))) {
                    arr_26[(j_29 + 1)] = temp_30;
                    j_29 = (j_29 - 1);
                } else {
                    break;
                }
            }
            arr_26[(j_29 + 1)] = key_28;
            i_27 = (i_27 + 1);
        };
        return arr_26;
    }

    public static Graph kruskal(Graph g_31) {
        Edge[] edges_32 = Program.sort_edges(g_31.edges);
        DS ds_33 = Program.make_ds(g_31.num_nodes);
        Edge[] mst_edges_34 = new Edge[]{};
        long i_35 = 0;
        long added_36 = 0;
        while (((added_36 < (g_31.num_nodes - 1)) && (i_35 < edges_32.Length))) {
            Edge e_37 = edges_32[(int)(i_35)];
            i_35 = (i_35 + 1);
            FindResult fu_38 = Program.find_set(ds_33, e_37.u);
            ds_33 = fu_38.ds;
            long ru_39 = fu_38.root;
            FindResult fv_40 = Program.find_set(ds_33, e_37.v);
            ds_33 = fv_40.ds;
            long rv_41 = fv_40.root;
            if ((ru_39 != rv_41)) {
                mst_edges_34 = (Enumerable.ToArray(Enumerable.Append<Edge>(mst_edges_34, e_37)));
                added_36 = (added_36 + 1);
                ds_33 = Program.union_set(ds_33, ru_39, rv_41);
            }
        };
        return new Graph{edges = mst_edges_34, num_nodes = g_31.num_nodes};
    }

    public static void print_mst(Graph g_42) {
        Edge[] es_43 = Program.sort_edges(g_42.edges);
        foreach (Edge e_44 in es_43) {
            Console.WriteLine(Program._fmtTop(((((_fmtStr(e_44.u) + "-") + _fmtStr(e_44.v)) + ":") + _fmtStr(e_44.w))));
        };
    }

    public static void main() {
        Graph g_45 = Program.new_graph();
        g_45 = Program.add_edge(g_45, 1, 2, 1);
        g_45 = Program.add_edge(g_45, 2, 3, 2);
        g_45 = Program.add_edge(g_45, 3, 4, 1);
        g_45 = Program.add_edge(g_45, 3, 5, 100);
        g_45 = Program.add_edge(g_45, 4, 5, 5);
        Graph mst_46 = Program.kruskal(g_45);
        Program.print_mst(mst_46);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
