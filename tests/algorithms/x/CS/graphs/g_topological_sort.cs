// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] depth_first_search(long u_0, bool[] visited_1, long[][] graph_2, long[] stack_3) {
        visited_1[u_0] = true;
        long i_4 = 0;
        while ((i_4 < graph_2[(int)(u_0)].Length)) {
            long v_5 = graph_2[(int)(u_0)][(int)(i_4)];
            if ((!visited_1[(int)(v_5)])) {
                stack_3 = Program.depth_first_search(v_5, visited_1, graph_2, stack_3);
            }
            i_4 = (i_4 + 1);
        };
        stack_3 = (Enumerable.ToArray(Enumerable.Append<long>(stack_3, u_0)));
        return stack_3;
    }

    public static long[] topological_sort(long[][] graph_6) {
        bool[] visited_7 = new bool[]{};
        long i_8 = 0;
        while ((i_8 < graph_6.Length)) {
            visited_7 = (Enumerable.ToArray(Enumerable.Append<bool>(visited_7, false)));
            i_8 = (i_8 + 1);
        };
        long[] stack_9 = new long[]{};
        i_8 = 0;
        while ((i_8 < graph_6.Length)) {
            if ((!visited_7[(int)(i_8)])) {
                stack_9 = Program.depth_first_search(i_8, visited_7, graph_6, stack_9);
            }
            i_8 = (i_8 + 1);
        };
        return stack_9;
    }

    public static void print_stack(long[] stack_10, Dictionary<long, string> clothes_11) {
        long order_12 = 1;
        long[] s_13 = stack_10;
        while ((s_13.Length > 0)) {
            long idx_14 = s_13[(int)((s_13.Length - 1))];
            s_13 = s_13.Skip((int)(0)).Take((int)(((s_13.Length - 1) - 0))).ToArray();
            Console.WriteLine(Program._fmtTop(((_fmtStr(order_12) + " ") + (clothes_11.ContainsKey(idx_14) ? clothes_11[idx_14] : ""))));
            order_12 = (order_12 + 1);
        };
    }

    public static string format_list(long[] xs_15) {
        string res_16 = "[";
        long i_17 = 0;
        while ((i_17 < xs_15.Length)) {
            res_16 = (res_16 + _fmtStr(xs_15[(int)(i_17)]));
            if ((i_17 < (xs_15.Length - 1))) {
                res_16 = (res_16 + ", ");
            }
            i_17 = (i_17 + 1);
        };
        res_16 = (res_16 + "]");
        return res_16;
    }

    public static void main() {
        Dictionary<long, string> clothes_18 = new Dictionary<long, string>{{0, "underwear"}, {1, "pants"}, {2, "belt"}, {3, "suit"}, {4, "shoe"}, {5, "socks"}, {6, "shirt"}, {7, "tie"}, {8, "watch"}};
        long[][] graph_19 = new long[][]{new long[]{1, 4}, new long[]{2, 4}, new long[]{3}, new long[]{}, new long[]{}, new long[]{4}, new long[]{2, 7}, new long[]{3}, new long[]{}};
        long[] stack_20 = Program.topological_sort(graph_19);
        Console.WriteLine(Program._fmtTop(Program.format_list(stack_20)));
        Program.print_stack(stack_20, clothes_18);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
