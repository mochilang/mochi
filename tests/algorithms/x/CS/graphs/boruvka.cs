// Generated by Mochi 0.10.65 (commit 58783dcfb8) on 2025-08-14 17:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Edge {
    public long u;
    public long v;
    public long w;
    public override string ToString() => $"Edge {{u = {u}, v = {v}, w = {w}}}";
}
class Graph {
    public long num_nodes;
    public Edge[] edges;
    public Dictionary<long, long> component;
    public override string ToString() => $"Graph {{num_nodes = {num_nodes}, edges = {edges}, component = {component}}}";
}
class UnionResult {
    public Graph graph;
    public long[] component_size;
    public override string ToString() => $"UnionResult {{graph = {graph}, component_size = {component_size}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Graph new_graph(long num_nodes_0) {
        return new Graph{num_nodes = num_nodes_0, edges = new Edge[]{}, component = new Dictionary<long, long>{}};
    }

    public static Graph add_edge(Graph g_1, long u_2, long v_3, long w_4) {
        Edge[] es_5 = g_1.edges;
        es_5 = ((Func<Edge[]>)(() => { var _tmp = es_5.ToList(); _tmp.Add(new Edge{u = u_2, v = v_3, w = w_4}); return _tmp.ToArray(); }))();
        return new Graph{num_nodes = g_1.num_nodes, edges = es_5, component = g_1.component};
    }

    public static long find_component(Graph g_6, long node_7) {
        if (((g_6.component.ContainsKey(node_7) ? g_6.component[node_7] : 0) == node_7)) {
            return node_7;
        };
        return Program.find_component(g_6, (g_6.component.ContainsKey(node_7) ? g_6.component[node_7] : 0));
    }

    public static Graph set_component(Graph g_8, long node_9) {
        if (((g_8.component.ContainsKey(node_9) ? g_8.component[node_9] : 0) != node_9)) {
            Dictionary<long, long> comp_10 = g_8.component;
            long k_11 = 0;
            while ((k_11 < g_8.num_nodes)) {
                comp_10[k_11] = Program.find_component(g_8, k_11);
                k_11 = (k_11 + 1);
            }
            g_8 = new Graph{num_nodes = g_8.num_nodes, edges = g_8.edges, component = comp_10};
        };
        return g_8;
    }

    public static UnionResult union(Graph g_12, long[] component_size_13, long u_14, long v_15) {
        long[] comp_size_16 = component_size_13;
        Dictionary<long, long> comp_17 = g_12.component;
        if ((_idx(comp_size_16, u_14) <= _idx(comp_size_16, v_15))) {
            comp_17[u_14] = v_15;
            comp_size_16[(int)(v_15)] = (_idx(comp_size_16, v_15) + _idx(comp_size_16, u_14));
            g_12 = new Graph{num_nodes = g_12.num_nodes, edges = g_12.edges, component = comp_17};
            g_12 = Program.set_component(g_12, u_14);
        } else {
            comp_17[v_15] = u_14;
            comp_size_16[(int)(u_14)] = (_idx(comp_size_16, u_14) + _idx(comp_size_16, v_15));
            g_12 = new Graph{num_nodes = g_12.num_nodes, edges = g_12.edges, component = comp_17};
            g_12 = Program.set_component(g_12, v_15);
        };
        return new UnionResult{graph = g_12, component_size = comp_size_16};
    }

    public static Edge[] create_empty_edges(long n_18) {
        Edge[] res_19 = new Edge[]{};
        long i_20 = 0;
        while ((i_20 < n_18)) {
            res_19 = ((Func<Edge[]>)(() => { var _tmp = res_19.ToList(); _tmp.Add(new Edge{u = (0 - 1), v = (0 - 1), w = (0 - 1)}); return _tmp.ToArray(); }))();
            i_20 = (i_20 + 1);
        };
        return res_19;
    }

    public static long boruvka(Graph g_21) {
        long[] component_size_22 = new long[]{};
        long i_23 = 0;
        while ((i_23 < g_21.num_nodes)) {
            component_size_22 = ((Func<long[]>)(() => { var _tmp = component_size_22.ToList(); _tmp.Add(1); return _tmp.ToArray(); }))();
            Dictionary<long, long> comp_24 = g_21.component;
            comp_24[i_23] = i_23;
            g_21 = new Graph{num_nodes = g_21.num_nodes, edges = g_21.edges, component = comp_24};
            i_23 = (i_23 + 1);
        };
        long mst_weight_25 = 0;
        long num_components_26 = g_21.num_nodes;
        Edge[] minimum_weight_edge_27 = Program.create_empty_edges(g_21.num_nodes);
        while ((num_components_26 > 1)) {
            foreach (Edge e_28 in g_21.edges) {
                long u_29 = e_28.u;
                long v_30 = e_28.v;
                long w_31 = e_28.w;
                long u_comp_32 = (g_21.component.ContainsKey(u_29) ? g_21.component[u_29] : 0);
                long v_comp_33 = (g_21.component.ContainsKey(v_30) ? g_21.component[v_30] : 0);
                if ((u_comp_32 != v_comp_33)) {
                    Edge current_u_34 = _idx(minimum_weight_edge_27, u_comp_32);
                    if (((current_u_34.u == (0 - 1)) || (current_u_34.w > w_31))) {
                        minimum_weight_edge_27[(int)(u_comp_32)] = new Edge{u = u_29, v = v_30, w = w_31};
                    }
                    Edge current_v_35 = _idx(minimum_weight_edge_27, v_comp_33);
                    if (((current_v_35.u == (0 - 1)) || (current_v_35.w > w_31))) {
                        minimum_weight_edge_27[(int)(v_comp_33)] = new Edge{u = u_29, v = v_30, w = w_31};
                    }
                }
            }
            foreach (Edge e_36 in minimum_weight_edge_27) {
                if ((e_36.u != (0 - 1))) {
                    long u_37 = e_36.u;
                    long v_38 = e_36.v;
                    long w_39 = e_36.w;
                    long u_comp_40 = (g_21.component.ContainsKey(u_37) ? g_21.component[u_37] : 0);
                    long v_comp_41 = (g_21.component.ContainsKey(v_38) ? g_21.component[v_38] : 0);
                    if ((u_comp_40 != v_comp_41)) {
                        mst_weight_25 = (mst_weight_25 + w_39);
                        UnionResult res_42 = Program.union(g_21, component_size_22, u_comp_40, v_comp_41);
                        g_21 = res_42.graph;
                        component_size_22 = res_42.component_size;
                        Console.WriteLine(Program._fmtTop((((("Added edge [" + _fmtStr(u_37)) + " - ") + _fmtStr(v_38)) + "]")));
                        Console.WriteLine(Program._fmtTop(("Added weight: " + _fmtStr(w_39))));
                        Console.WriteLine(Program._fmtTop(""));
                        num_components_26 = (num_components_26 - 1);
                    }
                }
            }
            minimum_weight_edge_27 = Program.create_empty_edges(g_21.num_nodes);
        };
        Console.WriteLine(Program._fmtTop(("The total weight of the minimal spanning tree is: " + _fmtStr(mst_weight_25))));
        return mst_weight_25;
    }

    public static void main() {
        Graph g_43 = Program.new_graph(8);
        long[][] edges_44 = new long[][]{new long[]{0, 1, 10}, new long[]{0, 2, 6}, new long[]{0, 3, 5}, new long[]{1, 3, 15}, new long[]{2, 3, 4}, new long[]{3, 4, 8}, new long[]{4, 5, 10}, new long[]{4, 6, 6}, new long[]{4, 7, 5}, new long[]{5, 7, 15}, new long[]{6, 7, 4}};
        foreach (long[] e_45 in edges_44) {
            g_43 = Program.add_edge(g_43, _idx(e_45, 0), _idx(e_45, 1), _idx(e_45, 2));
        };
        Program.boruvka(g_43);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
