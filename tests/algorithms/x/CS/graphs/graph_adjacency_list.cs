// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Graph {
    public Dictionary<string, string[]> adj;
    public bool directed;
    public override string ToString() => $"Graph {{adj = {adj}, directed = {directed}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Graph create_graph(string[] vertices_0, string[][] edges_1, bool directed_2) {
        Dictionary<string, string[]> adj_3 = new Dictionary<string, string[]>{};
        foreach (string v_4 in vertices_0) {
            adj_3[v_4] = new string[]{};
        };
        foreach (string[] e_5 in edges_1) {
            string s_6 = _idx(e_5, 0);
            string d_7 = _idx(e_5, 1);
            if ((!(adj_3.ContainsKey(s_6)))) {
                adj_3[s_6] = new string[]{};
            }
            if ((!(adj_3.ContainsKey(d_7)))) {
                adj_3[d_7] = new string[]{};
            }
            adj_3[s_6] = ((Func<string[]>)(() => { var _tmp = (adj_3.ContainsKey(s_6) ? adj_3[s_6] : null).ToList(); _tmp.Add(d_7); return _tmp.ToArray(); }))();
            if ((!directed_2)) {
                adj_3[d_7] = ((Func<string[]>)(() => { var _tmp = (adj_3.ContainsKey(d_7) ? adj_3[d_7] : null).ToList(); _tmp.Add(s_6); return _tmp.ToArray(); }))();
            }
        };
        return new Graph{adj = adj_3, directed = directed_2};
    }

    public static Graph add_vertex(Graph graph_8, string v_9) {
        if ((graph_8.adj.ContainsKey(v_9))) {
            throw new Exception("vertex exists");
        };
        Dictionary<string, string[]> adj_10 = new Dictionary<string, string[]>{};
        foreach (string k_11 in graph_8.adj.Keys) {
            adj_10[k_11] = (graph_8.adj.ContainsKey(k_11) ? graph_8.adj[k_11] : null);
        };
        adj_10[v_9] = new string[]{};
        return new Graph{adj = adj_10, directed = graph_8.directed};
    }

    public static string[] remove_from_list(string[] lst_12, string value_13) {
        string[] res_14 = new string[]{};
        long i_15 = 0;
        while ((i_15 < lst_12.Length)) {
            if ((_idx(lst_12, i_15) != value_13)) {
                res_14 = ((Func<string[]>)(() => { var _tmp = res_14.ToList(); _tmp.Add(_idx(lst_12, i_15)); return _tmp.ToArray(); }))();
            }
            i_15 = (i_15 + 1);
        };
        return res_14;
    }

    public static Dictionary<string, string[]> remove_key(Dictionary<string, string[]> m_16, string key_17) {
        Dictionary<string, string[]> res_18 = new Dictionary<string, string[]>{};
        foreach (string k_19 in m_16.Keys) {
            if ((k_19 != key_17)) {
                res_18[k_19] = (m_16.ContainsKey(k_19) ? m_16[k_19] : null);
            }
        };
        return res_18;
    }

    public static Graph add_edge(Graph graph_20, string s_21, string d_22) {
        if (((!(graph_20.adj.ContainsKey(s_21))) || (!(graph_20.adj.ContainsKey(d_22))))) {
            throw new Exception("vertex missing");
        };
        if (Program.contains_edge(graph_20, s_21, d_22)) {
            throw new Exception("edge exists");
        };
        Dictionary<string, string[]> adj_23 = new Dictionary<string, string[]>{};
        foreach (string k_24 in graph_20.adj.Keys) {
            adj_23[k_24] = (graph_20.adj.ContainsKey(k_24) ? graph_20.adj[k_24] : null);
        };
        string[] list_s_25 = (adj_23.ContainsKey(s_21) ? adj_23[s_21] : null);
        list_s_25 = ((Func<string[]>)(() => { var _tmp = list_s_25.ToList(); _tmp.Add(d_22); return _tmp.ToArray(); }))();
        adj_23[s_21] = list_s_25;
        if ((!graph_20.directed)) {
            string[] list_d_26 = (adj_23.ContainsKey(d_22) ? adj_23[d_22] : null);
            list_d_26 = ((Func<string[]>)(() => { var _tmp = list_d_26.ToList(); _tmp.Add(s_21); return _tmp.ToArray(); }))();
            adj_23[d_22] = list_d_26;
        };
        return new Graph{adj = adj_23, directed = graph_20.directed};
    }

    public static Graph remove_edge(Graph graph_27, string s_28, string d_29) {
        if (((!(graph_27.adj.ContainsKey(s_28))) || (!(graph_27.adj.ContainsKey(d_29))))) {
            throw new Exception("vertex missing");
        };
        if ((!Program.contains_edge(graph_27, s_28, d_29))) {
            throw new Exception("edge missing");
        };
        Dictionary<string, string[]> adj_30 = new Dictionary<string, string[]>{};
        foreach (string k_31 in graph_27.adj.Keys) {
            adj_30[k_31] = (graph_27.adj.ContainsKey(k_31) ? graph_27.adj[k_31] : null);
        };
        adj_30[s_28] = Program.remove_from_list((adj_30.ContainsKey(s_28) ? adj_30[s_28] : null), d_29);
        if ((!graph_27.directed)) {
            adj_30[d_29] = Program.remove_from_list((adj_30.ContainsKey(d_29) ? adj_30[d_29] : null), s_28);
        };
        return new Graph{adj = adj_30, directed = graph_27.directed};
    }

    public static Graph remove_vertex(Graph graph_32, string v_33) {
        if ((!(graph_32.adj.ContainsKey(v_33)))) {
            throw new Exception("vertex missing");
        };
        Dictionary<string, string[]> adj_34 = new Dictionary<string, string[]>{};
        foreach (string k_35 in graph_32.adj.Keys) {
            if ((k_35 != v_33)) {
                adj_34[k_35] = Program.remove_from_list((graph_32.adj.ContainsKey(k_35) ? graph_32.adj[k_35] : null), v_33);
            }
        };
        return new Graph{adj = adj_34, directed = graph_32.directed};
    }

    public static bool contains_vertex(Graph graph_36, string v_37) {
        return (graph_36.adj.ContainsKey(v_37));
    }

    public static bool contains_edge(Graph graph_38, string s_39, string d_40) {
        if (((!(graph_38.adj.ContainsKey(s_39))) || (!(graph_38.adj.ContainsKey(d_40))))) {
            throw new Exception("vertex missing");
        };
        foreach (string x_41 in (graph_38.adj.ContainsKey(s_39) ? graph_38.adj[s_39] : null)) {
            if ((x_41 == d_40)) {
                return true;
            }
        };
        return false;
    }

    public static Graph clear_graph(Graph graph_42) {
        return new Graph{adj = new Dictionary<string, string[]>{}, directed = graph_42.directed};
    }

    public static string to_string(Graph graph_43) {
        return _fmtStr(graph_43.adj);
    }

    public static void main() {
        string[] vertices_44 = new string[]{"1", "2", "3", "4"};
        string[][] edges_45 = new string[][]{new string[]{"1", "2"}, new string[]{"2", "3"}, new string[]{"3", "4"}};
        Graph g_46 = Program.create_graph(vertices_44, edges_45, false);
        Console.WriteLine(Program._fmtTop(Program.to_string(g_46)));
        g_46 = Program.add_vertex(g_46, "5");
        g_46 = Program.add_edge(g_46, "4", "5");
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_edge(g_46, "4", "5"))));
        g_46 = Program.remove_edge(g_46, "1", "2");
        g_46 = Program.remove_vertex(g_46, "3");
        Console.WriteLine(Program._fmtTop(Program.to_string(g_46)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
