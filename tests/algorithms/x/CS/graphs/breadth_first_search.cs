// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<long, long[]> g_18 = new Dictionary<long, long[]>{};
    public static void add_edge(Dictionary<long, long[]> graph_0, long from_1, long to_2) {
        if ((graph_0.ContainsKey(from_1))) {
            graph_0[from_1] = (Enumerable.ToArray(Enumerable.Append<long>((graph_0.ContainsKey(from_1) ? graph_0[from_1] : null), to_2)));
        } else {
            graph_0[from_1] = new long[]{to_2};
        };
    }

    public static void print_graph(Dictionary<long, long[]> graph_3) {
        foreach (long v_4 in graph_3.Keys) {
            long[] adj_5 = (graph_3.ContainsKey(v_4) ? graph_3[v_4] : null);
            string line_6 = (_fmtStr(v_4) + "  :  ");
            long i_7 = 0;
            while ((i_7 < adj_5.Length)) {
                line_6 = (line_6 + _fmtStr(adj_5[(int)(i_7)]));
                if ((i_7 < (adj_5.Length - 1))) {
                    line_6 = (line_6 + " -> ");
                }
                i_7 = (i_7 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_6));
        };
    }

    public static long[] bfs(Dictionary<long, long[]> graph_8, long start_9) {
        Dictionary<long, bool> visited_10 = new Dictionary<long, bool>{};
        long[] queue_11 = new long[]{};
        long[] order_12 = new long[]{};
        queue_11 = (Enumerable.ToArray(Enumerable.Append<long>(queue_11, start_9)));
        visited_10[start_9] = true;
        long head_13 = 0;
        while ((head_13 < queue_11.Length)) {
            long vertex_14 = queue_11[(int)(head_13)];
            head_13 = (head_13 + 1);
            order_12 = (Enumerable.ToArray(Enumerable.Append<long>(order_12, vertex_14)));
            long[] neighbors_15 = (graph_8.ContainsKey(vertex_14) ? graph_8[vertex_14] : null);
            long i_16 = 0;
            while ((i_16 < neighbors_15.Length)) {
                long neighbor_17 = neighbors_15[(int)(i_16)];
                if ((!(visited_10.ContainsKey(neighbor_17)))) {
                    visited_10[neighbor_17] = true;
                    queue_11 = (Enumerable.ToArray(Enumerable.Append<long>(queue_11, neighbor_17)));
                }
                i_16 = (i_16 + 1);
            }
        };
        return order_12;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.add_edge(g_18, 0, 1);
            Program.add_edge(g_18, 0, 2);
            Program.add_edge(g_18, 1, 2);
            Program.add_edge(g_18, 2, 0);
            Program.add_edge(g_18, 2, 3);
            Program.add_edge(g_18, 3, 3);
            Program.print_graph(g_18);
            Console.WriteLine(Program._fmtTop(Program.bfs(g_18, 2)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
