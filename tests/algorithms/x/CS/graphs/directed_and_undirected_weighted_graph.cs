// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class DirectedGraph {
    public Dictionary<long, long[][]> graph;
    public override string ToString() => $"DirectedGraph {{graph = {graph}}}";
}
class Graph {
    public Dictionary<long, long[][]> graph;
    public override string ToString() => $"Graph {{graph = {graph}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool list_contains_int(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((_idx(xs_0, i_2) == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static bool edge_exists(long[][] edges_3, long w_4, long v_5) {
        long i_6 = 0;
        while ((i_6 < edges_3.Length)) {
            if (((_idx(_idx(edges_3, i_6), 0) == w_4) && (_idx(_idx(edges_3, i_6), 1) == v_5))) {
                return true;
            }
            i_6 = (i_6 + 1);
        };
        return false;
    }

    public static long first_key(Dictionary<long, long[][]> m_7) {
        foreach (long k_8 in m_7.Keys) {
            return k_8;
        };
        return 0;
    }

    public static long rand_range(long low_9, long high_10) {
        return (_mod(_now(), (high_10 - low_9)) + low_9);
    }

    public static DirectedGraph dg_make_graph() {
        return new DirectedGraph{graph = new Dictionary<long, long[][]>{}};
    }

    public static void dg_add_pair(DirectedGraph g_11, long u_12, long v_13, long w_14) {
        if ((g_11.graph.ContainsKey(u_12))) {
            long[][] edges_15 = (g_11.graph.ContainsKey(u_12) ? g_11.graph[u_12] : null);
            if ((!Program.edge_exists(edges_15, w_14, v_13))) {
                edges_15 = ((Func<long[][]>)(() => { var _tmp = edges_15.ToList(); _tmp.Add(new long[]{w_14, v_13}); return _tmp.ToArray(); }))();
                Dictionary<long, long[][]> m_16 = g_11.graph;
                m_16[u_12] = edges_15;
                g_11.graph = m_16;
            }
        } else {
            Dictionary<long, long[][]> m0_17 = g_11.graph;
            m0_17[u_12] = new long[][]{new long[]{w_14, v_13}};
            g_11.graph = m0_17;
        };
        if ((!(g_11.graph.ContainsKey(v_13)))) {
            Dictionary<long, long[][]> m1_18 = g_11.graph;
            m1_18[v_13] = new long[][]{};
            g_11.graph = m1_18;
        };
    }

    public static void dg_remove_pair(DirectedGraph g_19, long u_20, long v_21) {
        if ((g_19.graph.ContainsKey(u_20))) {
            long[][] edges_22 = (g_19.graph.ContainsKey(u_20) ? g_19.graph[u_20] : null);
            long[][] new_edges_23 = new long[][]{};
            long i_24 = 0;
            while ((i_24 < edges_22.Length)) {
                if ((_idx(_idx(edges_22, i_24), 1) != v_21)) {
                    new_edges_23 = ((Func<long[][]>)(() => { var _tmp = new_edges_23.ToList(); _tmp.Add(_idx(edges_22, i_24)); return _tmp.ToArray(); }))();
                }
                i_24 = (i_24 + 1);
            }
            Dictionary<long, long[][]> m_25 = g_19.graph;
            m_25[u_20] = new_edges_23;
            g_19.graph = m_25;
        };
    }

    public static long[] dg_all_nodes(DirectedGraph g_26) {
        long[] res_27 = new long[]{};
        foreach (long k_28 in g_26.graph.Keys) {
            res_27 = ((Func<long[]>)(() => { var _tmp = res_27.ToList(); _tmp.Add(k_28); return _tmp.ToArray(); }))();
        };
        return res_27;
    }

    public static long[] dg_dfs_util(DirectedGraph g_29, long node_30, Dictionary<long, bool> visited_31, long[] order_32, long d_33) {
        visited_31[node_30] = true;
        order_32 = ((Func<long[]>)(() => { var _tmp = order_32.ToList(); _tmp.Add(node_30); return _tmp.ToArray(); }))();
        if (((d_33 != -1) && (node_30 == d_33))) {
            return order_32;
        };
        long[][] edges_34 = (g_29.graph.ContainsKey(node_30) ? g_29.graph[node_30] : null);
        long i_35 = 0;
        while ((i_35 < edges_34.Length)) {
            long neigh_36 = _idx(_idx(edges_34, i_35), 1);
            if ((!(visited_31.ContainsKey(neigh_36)))) {
                order_32 = Program.dg_dfs_util(g_29, neigh_36, visited_31, order_32, d_33);
                if (((d_33 != -1) && (_idx(order_32, (order_32.Length - 1)) == d_33))) {
                    return order_32;
                }
            }
            i_35 = (i_35 + 1);
        };
        return order_32;
    }

    public static long[] dg_dfs(DirectedGraph g_37, long s_38, long d_39) {
        if ((s_38 == d_39)) {
            return new long[]{};
        };
        long start_40 = ((s_38 == -2) ? Program.first_key(g_37.graph) : s_38);
        Dictionary<long, bool> visited_41 = new Dictionary<long, bool>{};
        long[] order_42 = new long[]{};
        order_42 = Program.dg_dfs_util(g_37, start_40, visited_41, order_42, d_39);
        return order_42;
    }

    public static long[] dg_bfs(DirectedGraph g_43, long s_44) {
        long[] queue_45 = new long[]{};
        Dictionary<long, bool> visited_46 = new Dictionary<long, bool>{};
        long[] order_47 = new long[]{};
        long start_48 = ((s_44 == -2) ? Program.first_key(g_43.graph) : s_44);
        queue_45 = ((Func<long[]>)(() => { var _tmp = queue_45.ToList(); _tmp.Add(start_48); return _tmp.ToArray(); }))();
        visited_46[start_48] = true;
        while ((queue_45.Length > 0)) {
            long node_49 = _idx(queue_45, 0);
            queue_45 = _slice<long>(queue_45, 1, queue_45.Length);
            order_47 = ((Func<long[]>)(() => { var _tmp = order_47.ToList(); _tmp.Add(node_49); return _tmp.ToArray(); }))();
            long[][] edges_50 = (g_43.graph.ContainsKey(node_49) ? g_43.graph[node_49] : null);
            long i_51 = 0;
            while ((i_51 < edges_50.Length)) {
                long neigh_52 = _idx(_idx(edges_50, i_51), 1);
                if ((!(visited_46.ContainsKey(neigh_52)))) {
                    queue_45 = ((Func<long[]>)(() => { var _tmp = queue_45.ToList(); _tmp.Add(neigh_52); return _tmp.ToArray(); }))();
                    visited_46[neigh_52] = true;
                }
                i_51 = (i_51 + 1);
            }
        };
        return order_47;
    }

    public static long dg_in_degree(DirectedGraph g_53, long u_54) {
        long count_55 = 0;
        foreach (long k_56 in g_53.graph.Keys) {
            long[][] edges_57 = (g_53.graph.ContainsKey(k_56) ? g_53.graph[k_56] : null);
            long i_58 = 0;
            while ((i_58 < edges_57.Length)) {
                if ((_idx(_idx(edges_57, i_58), 1) == u_54)) {
                    count_55 = (count_55 + 1);
                }
                i_58 = (i_58 + 1);
            }
        };
        return count_55;
    }

    public static long dg_out_degree(DirectedGraph g_59, long u_60) {
        if ((g_59.graph.ContainsKey(u_60))) {
            return (g_59.graph.ContainsKey(u_60) ? g_59.graph[u_60] : null).Length;
        };
        return 0;
    }

    public static long[] dg_topo_util(DirectedGraph g_61, long node_62, Dictionary<long, bool> visited_63, long[] stack_64) {
        visited_63[node_62] = true;
        long[][] edges_65 = (g_61.graph.ContainsKey(node_62) ? g_61.graph[node_62] : null);
        long i_66 = 0;
        while ((i_66 < edges_65.Length)) {
            long neigh_67 = _idx(_idx(edges_65, i_66), 1);
            if ((!(visited_63.ContainsKey(neigh_67)))) {
                stack_64 = Program.dg_topo_util(g_61, neigh_67, visited_63, stack_64);
            }
            i_66 = (i_66 + 1);
        };
        stack_64 = ((Func<long[]>)(() => { var _tmp = stack_64.ToList(); _tmp.Add(node_62); return _tmp.ToArray(); }))();
        return stack_64;
    }

    public static long[] dg_topological_sort(DirectedGraph g_68) {
        Dictionary<long, bool> visited_69 = new Dictionary<long, bool>{};
        long[] stack_70 = new long[]{};
        foreach (long k_71 in g_68.graph.Keys) {
            if ((!(visited_69.ContainsKey(k_71)))) {
                stack_70 = Program.dg_topo_util(g_68, k_71, visited_69, stack_70);
            }
        };
        long[] res_72 = new long[]{};
        long i_73 = (stack_70.Length - 1);
        while ((i_73 >= 0)) {
            res_72 = ((Func<long[]>)(() => { var _tmp = res_72.ToList(); _tmp.Add(_idx(stack_70, i_73)); return _tmp.ToArray(); }))();
            i_73 = (i_73 - 1);
        };
        return res_72;
    }

    public static long[] dg_cycle_util(DirectedGraph g_74, long node_75, Dictionary<long, bool> visited_76, Dictionary<long, bool> rec_77, long[] res_78) {
        visited_76[node_75] = true;
        rec_77[node_75] = true;
        long[][] edges_79 = (g_74.graph.ContainsKey(node_75) ? g_74.graph[node_75] : null);
        long i_80 = 0;
        while ((i_80 < edges_79.Length)) {
            long neigh_81 = _idx(_idx(edges_79, i_80), 1);
            if ((!(visited_76.ContainsKey(neigh_81)))) {
                res_78 = Program.dg_cycle_util(g_74, neigh_81, visited_76, rec_77, res_78);
            } else if ((rec_77.ContainsKey(neigh_81) ? rec_77[neigh_81] : false)) {
                if ((!Program.list_contains_int(res_78, neigh_81))) {
                    res_78 = ((Func<long[]>)(() => { var _tmp = res_78.ToList(); _tmp.Add(neigh_81); return _tmp.ToArray(); }))();
                }
                if ((!Program.list_contains_int(res_78, node_75))) {
                    res_78 = ((Func<long[]>)(() => { var _tmp = res_78.ToList(); _tmp.Add(node_75); return _tmp.ToArray(); }))();
                }
            }
            i_80 = (i_80 + 1);
        };
        rec_77[node_75] = false;
        return res_78;
    }

    public static long[] dg_cycle_nodes(DirectedGraph g_82) {
        Dictionary<long, bool> visited_83 = new Dictionary<long, bool>{};
        Dictionary<long, bool> rec_84 = new Dictionary<long, bool>{};
        long[] res_85 = new long[]{};
        foreach (long k_86 in g_82.graph.Keys) {
            if ((!(visited_83.ContainsKey(k_86)))) {
                res_85 = Program.dg_cycle_util(g_82, k_86, visited_83, rec_84, res_85);
            }
        };
        return res_85;
    }

    public static bool dg_has_cycle_util(DirectedGraph g_87, long node_88, Dictionary<long, bool> visited_89, Dictionary<long, bool> rec_90) {
        visited_89[node_88] = true;
        rec_90[node_88] = true;
        long[][] edges_91 = (g_87.graph.ContainsKey(node_88) ? g_87.graph[node_88] : null);
        long i_92 = 0;
        while ((i_92 < edges_91.Length)) {
            long neigh_93 = _idx(_idx(edges_91, i_92), 1);
            if ((!(visited_89.ContainsKey(neigh_93)))) {
                if (Program.dg_has_cycle_util(g_87, neigh_93, visited_89, rec_90)) {
                    return true;
                }
            } else if ((rec_90.ContainsKey(neigh_93) ? rec_90[neigh_93] : false)) {
                return true;
            }
            i_92 = (i_92 + 1);
        };
        rec_90[node_88] = false;
        return false;
    }

    public static bool dg_has_cycle(DirectedGraph g_94) {
        Dictionary<long, bool> visited_95 = new Dictionary<long, bool>{};
        Dictionary<long, bool> rec_96 = new Dictionary<long, bool>{};
        foreach (long k_97 in g_94.graph.Keys) {
            if ((!(visited_95.ContainsKey(k_97)))) {
                if (Program.dg_has_cycle_util(g_94, k_97, visited_95, rec_96)) {
                    return true;
                }
            }
        };
        return false;
    }

    public static void dg_fill_graph_randomly(DirectedGraph g_98, long c_99) {
        long count_100 = c_99;
        if ((count_100 == -1)) {
            count_100 = Program.rand_range(10, 10010);
        };
        long i_101 = 0;
        while ((i_101 < count_100)) {
            long edge_count_102 = Program.rand_range(1, 103);
            long j_103 = 0;
            while ((j_103 < edge_count_102)) {
                long n_104 = Program.rand_range(0, count_100);
                if ((n_104 != i_101)) {
                    Program.dg_add_pair(g_98, i_101, n_104, 1);
                }
                j_103 = (j_103 + 1);
            }
            i_101 = (i_101 + 1);
        };
    }

    public static long dg_dfs_time(DirectedGraph g_105, long s_106, long e_107) {
        long begin_108 = _now();
        Program.dg_dfs(g_105, s_106, e_107);
        long end_109 = _now();
        return (end_109 - begin_108);
    }

    public static long dg_bfs_time(DirectedGraph g_110, long s_111) {
        long begin_112 = _now();
        Program.dg_bfs(g_110, s_111);
        long end_113 = _now();
        return (end_113 - begin_112);
    }

    public static Graph g_make_graph() {
        return new Graph{graph = new Dictionary<long, long[][]>{}};
    }

    public static void g_add_pair(Graph g_114, long u_115, long v_116, long w_117) {
        if ((g_114.graph.ContainsKey(u_115))) {
            long[][] edges_118 = (g_114.graph.ContainsKey(u_115) ? g_114.graph[u_115] : null);
            if ((!Program.edge_exists(edges_118, w_117, v_116))) {
                edges_118 = ((Func<long[][]>)(() => { var _tmp = edges_118.ToList(); _tmp.Add(new long[]{w_117, v_116}); return _tmp.ToArray(); }))();
                Dictionary<long, long[][]> m_119 = g_114.graph;
                m_119[u_115] = edges_118;
                g_114.graph = m_119;
            }
        } else {
            Dictionary<long, long[][]> m0_120 = g_114.graph;
            m0_120[u_115] = new long[][]{new long[]{w_117, v_116}};
            g_114.graph = m0_120;
        };
        if ((g_114.graph.ContainsKey(v_116))) {
            long[][] edges2_121 = (g_114.graph.ContainsKey(v_116) ? g_114.graph[v_116] : null);
            if ((!Program.edge_exists(edges2_121, w_117, u_115))) {
                edges2_121 = ((Func<long[][]>)(() => { var _tmp = edges2_121.ToList(); _tmp.Add(new long[]{w_117, u_115}); return _tmp.ToArray(); }))();
                Dictionary<long, long[][]> m2_122 = g_114.graph;
                m2_122[v_116] = edges2_121;
                g_114.graph = m2_122;
            }
        } else {
            Dictionary<long, long[][]> m3_123 = g_114.graph;
            m3_123[v_116] = new long[][]{new long[]{w_117, u_115}};
            g_114.graph = m3_123;
        };
    }

    public static void g_remove_pair(Graph g_124, long u_125, long v_126) {
        if ((g_124.graph.ContainsKey(u_125))) {
            long[][] edges_127 = (g_124.graph.ContainsKey(u_125) ? g_124.graph[u_125] : null);
            long[][] new_edges_128 = new long[][]{};
            long i_129 = 0;
            while ((i_129 < edges_127.Length)) {
                if ((_idx(_idx(edges_127, i_129), 1) != v_126)) {
                    new_edges_128 = ((Func<long[][]>)(() => { var _tmp = new_edges_128.ToList(); _tmp.Add(_idx(edges_127, i_129)); return _tmp.ToArray(); }))();
                }
                i_129 = (i_129 + 1);
            }
            Dictionary<long, long[][]> m_130 = g_124.graph;
            m_130[u_125] = new_edges_128;
            g_124.graph = m_130;
        };
        if ((g_124.graph.ContainsKey(v_126))) {
            long[][] edges2_131 = (g_124.graph.ContainsKey(v_126) ? g_124.graph[v_126] : null);
            long[][] new_edges2_132 = new long[][]{};
            long j_133 = 0;
            while ((j_133 < edges2_131.Length)) {
                if ((_idx(_idx(edges2_131, j_133), 1) != u_125)) {
                    new_edges2_132 = ((Func<long[][]>)(() => { var _tmp = new_edges2_132.ToList(); _tmp.Add(_idx(edges2_131, j_133)); return _tmp.ToArray(); }))();
                }
                j_133 = (j_133 + 1);
            }
            Dictionary<long, long[][]> m2_134 = g_124.graph;
            m2_134[v_126] = new_edges2_132;
            g_124.graph = m2_134;
        };
    }

    public static long[] g_all_nodes(Graph g_135) {
        long[] res_136 = new long[]{};
        foreach (long k_137 in g_135.graph.Keys) {
            res_136 = ((Func<long[]>)(() => { var _tmp = res_136.ToList(); _tmp.Add(k_137); return _tmp.ToArray(); }))();
        };
        return res_136;
    }

    public static long[] g_dfs_util(Graph g_138, long node_139, Dictionary<long, bool> visited_140, long[] order_141, long d_142) {
        visited_140[node_139] = true;
        order_141 = ((Func<long[]>)(() => { var _tmp = order_141.ToList(); _tmp.Add(node_139); return _tmp.ToArray(); }))();
        if (((d_142 != -1) && (node_139 == d_142))) {
            return order_141;
        };
        long[][] edges_143 = (g_138.graph.ContainsKey(node_139) ? g_138.graph[node_139] : null);
        long i_144 = 0;
        while ((i_144 < edges_143.Length)) {
            long neigh_145 = _idx(_idx(edges_143, i_144), 1);
            if ((!(visited_140.ContainsKey(neigh_145)))) {
                order_141 = Program.g_dfs_util(g_138, neigh_145, visited_140, order_141, d_142);
                if (((d_142 != -1) && (_idx(order_141, (order_141.Length - 1)) == d_142))) {
                    return order_141;
                }
            }
            i_144 = (i_144 + 1);
        };
        return order_141;
    }

    public static long[] g_dfs(Graph g_146, long s_147, long d_148) {
        if ((s_147 == d_148)) {
            return new long[]{};
        };
        long start_149 = ((s_147 == -2) ? Program.first_key(g_146.graph) : s_147);
        Dictionary<long, bool> visited_150 = new Dictionary<long, bool>{};
        long[] order_151 = new long[]{};
        order_151 = Program.g_dfs_util(g_146, start_149, visited_150, order_151, d_148);
        return order_151;
    }

    public static long[] g_bfs(Graph g_152, long s_153) {
        long[] queue_154 = new long[]{};
        Dictionary<long, bool> visited_155 = new Dictionary<long, bool>{};
        long[] order_156 = new long[]{};
        long start_157 = ((s_153 == -2) ? Program.first_key(g_152.graph) : s_153);
        queue_154 = ((Func<long[]>)(() => { var _tmp = queue_154.ToList(); _tmp.Add(start_157); return _tmp.ToArray(); }))();
        visited_155[start_157] = true;
        while ((queue_154.Length > 0)) {
            long node_158 = _idx(queue_154, 0);
            queue_154 = _slice<long>(queue_154, 1, queue_154.Length);
            order_156 = ((Func<long[]>)(() => { var _tmp = order_156.ToList(); _tmp.Add(node_158); return _tmp.ToArray(); }))();
            long[][] edges_159 = (g_152.graph.ContainsKey(node_158) ? g_152.graph[node_158] : null);
            long i_160 = 0;
            while ((i_160 < edges_159.Length)) {
                long neigh_161 = _idx(_idx(edges_159, i_160), 1);
                if ((!(visited_155.ContainsKey(neigh_161)))) {
                    queue_154 = ((Func<long[]>)(() => { var _tmp = queue_154.ToList(); _tmp.Add(neigh_161); return _tmp.ToArray(); }))();
                    visited_155[neigh_161] = true;
                }
                i_160 = (i_160 + 1);
            }
        };
        return order_156;
    }

    public static long g_degree(Graph g_162, long u_163) {
        if ((g_162.graph.ContainsKey(u_163))) {
            return (g_162.graph.ContainsKey(u_163) ? g_162.graph[u_163] : null).Length;
        };
        return 0;
    }

    public static long[] g_cycle_util(Graph g_164, long node_165, Dictionary<long, bool> visited_166, long parent_167, long[] res_168) {
        visited_166[node_165] = true;
        long[][] edges_169 = (g_164.graph.ContainsKey(node_165) ? g_164.graph[node_165] : null);
        long i_170 = 0;
        while ((i_170 < edges_169.Length)) {
            long neigh_171 = _idx(_idx(edges_169, i_170), 1);
            if ((!(visited_166.ContainsKey(neigh_171)))) {
                res_168 = Program.g_cycle_util(g_164, neigh_171, visited_166, node_165, res_168);
            } else if ((neigh_171 != parent_167)) {
                if ((!Program.list_contains_int(res_168, neigh_171))) {
                    res_168 = ((Func<long[]>)(() => { var _tmp = res_168.ToList(); _tmp.Add(neigh_171); return _tmp.ToArray(); }))();
                }
                if ((!Program.list_contains_int(res_168, node_165))) {
                    res_168 = ((Func<long[]>)(() => { var _tmp = res_168.ToList(); _tmp.Add(node_165); return _tmp.ToArray(); }))();
                }
            }
            i_170 = (i_170 + 1);
        };
        return res_168;
    }

    public static long[] g_cycle_nodes(Graph g_172) {
        Dictionary<long, bool> visited_173 = new Dictionary<long, bool>{};
        long[] res_174 = new long[]{};
        foreach (long k_175 in g_172.graph.Keys) {
            if ((!(visited_173.ContainsKey(k_175)))) {
                res_174 = Program.g_cycle_util(g_172, k_175, visited_173, -1, res_174);
            }
        };
        return res_174;
    }

    public static bool g_has_cycle_util(Graph g_176, long node_177, Dictionary<long, bool> visited_178, long parent_179) {
        visited_178[node_177] = true;
        long[][] edges_180 = (g_176.graph.ContainsKey(node_177) ? g_176.graph[node_177] : null);
        long i_181 = 0;
        while ((i_181 < edges_180.Length)) {
            long neigh_182 = _idx(_idx(edges_180, i_181), 1);
            if ((!(visited_178.ContainsKey(neigh_182)))) {
                if (Program.g_has_cycle_util(g_176, neigh_182, visited_178, node_177)) {
                    return true;
                }
            } else if ((neigh_182 != parent_179)) {
                return true;
            }
            i_181 = (i_181 + 1);
        };
        return false;
    }

    public static bool g_has_cycle(Graph g_183) {
        Dictionary<long, bool> visited_184 = new Dictionary<long, bool>{};
        foreach (long k_185 in g_183.graph.Keys) {
            if ((!(visited_184.ContainsKey(k_185)))) {
                if (Program.g_has_cycle_util(g_183, k_185, visited_184, -1)) {
                    return true;
                }
            }
        };
        return false;
    }

    public static void g_fill_graph_randomly(Graph g_186, long c_187) {
        long count_188 = c_187;
        if ((count_188 == -1)) {
            count_188 = Program.rand_range(10, 10010);
        };
        long i_189 = 0;
        while ((i_189 < count_188)) {
            long edge_count_190 = Program.rand_range(1, 103);
            long j_191 = 0;
            while ((j_191 < edge_count_190)) {
                long n_192 = Program.rand_range(0, count_188);
                if ((n_192 != i_189)) {
                    Program.g_add_pair(g_186, i_189, n_192, 1);
                }
                j_191 = (j_191 + 1);
            }
            i_189 = (i_189 + 1);
        };
    }

    public static long g_dfs_time(Graph g_193, long s_194, long e_195) {
        long begin_196 = _now();
        Program.g_dfs(g_193, s_194, e_195);
        long end_197 = _now();
        return (end_197 - begin_196);
    }

    public static long g_bfs_time(Graph g_198, long s_199) {
        long begin_200 = _now();
        Program.g_bfs(g_198, s_199);
        long end_201 = _now();
        return (end_201 - begin_200);
    }

    public static void main() {
        DirectedGraph dg_202 = Program.dg_make_graph();
        Program.dg_add_pair(dg_202, 0, 1, 5);
        Program.dg_add_pair(dg_202, 0, 2, 3);
        Program.dg_add_pair(dg_202, 1, 3, 2);
        Program.dg_add_pair(dg_202, 2, 3, 4);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.dg_dfs(dg_202, -2, -1))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.dg_bfs(dg_202, -2))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.dg_in_degree(dg_202, 3))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.dg_out_degree(dg_202, 0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.dg_topological_sort(dg_202))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.dg_has_cycle(dg_202))));
        Graph ug_203 = Program.g_make_graph();
        Program.g_add_pair(ug_203, 0, 1, 1);
        Program.g_add_pair(ug_203, 1, 2, 1);
        Program.g_add_pair(ug_203, 2, 0, 1);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.g_dfs(ug_203, -2, -1))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.g_bfs(ug_203, -2))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.g_degree(ug_203, 1))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.g_has_cycle(ug_203))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
