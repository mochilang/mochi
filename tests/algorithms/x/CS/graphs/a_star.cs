// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SearchResult {
    public long[][] path;
    public long[][] action;
    public override string ToString() => $"SearchResult {{path = {path}, action = {action}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] DIRECTIONS_0 = new long[][]{new long[]{-1, 0}, new long[]{0, -1}, new long[]{1, 0}, new long[]{0, 1}};
    public static long iabs(long x_1) {
        if ((x_1 < 0)) {
            return -x_1;
        };
        return x_1;
    }

    public static SearchResult search(long[][] grid_2, long[] init_3, long[] goal_4, long cost_5, long[][] heuristic_6) {
        long[][] closed_7 = new long[][]{};
        long r_8 = 0;
        while ((r_8 < grid_2.Length)) {
            long[] row_9 = new long[]{};
            long c_10 = 0;
            while ((c_10 < grid_2[(int)(0)].Length)) {
                row_9 = (Enumerable.ToArray(Enumerable.Append<long>(row_9, 0)));
                c_10 = (c_10 + 1);
            }
            closed_7 = (Enumerable.ToArray(Enumerable.Append<long[]>(closed_7, row_9)));
            r_8 = (r_8 + 1);
        };
        closed_7[(int)(init_3[(int)(0)])][init_3[(int)(1)]] = 1;
        long[][] action_11 = new long[][]{};
        r_8 = 0;
        while ((r_8 < grid_2.Length)) {
            long[] row_12 = new long[]{};
            long c_13 = 0;
            while ((c_13 < grid_2[(int)(0)].Length)) {
                row_12 = (Enumerable.ToArray(Enumerable.Append<long>(row_12, 0)));
                c_13 = (c_13 + 1);
            }
            action_11 = (Enumerable.ToArray(Enumerable.Append<long[]>(action_11, row_12)));
            r_8 = (r_8 + 1);
        };
        long x_14 = init_3[(int)(0)];
        long y_15 = init_3[(int)(1)];
        long g_16 = 0;
        long f_17 = (g_16 + heuristic_6[(int)(x_14)][(int)(y_15)]);
        long[][] cell_18 = new long[][]{new long[]{f_17, g_16, x_14, y_15}};
        bool found_19 = false;
        bool resign_20 = false;
        while (((!found_19) && (!resign_20))) {
            if ((cell_18.Length == 0)) {
                throw new Exception("Algorithm is unable to find solution");
            } else {
                long best_i_21 = 0;
                long best_f_22 = cell_18[(int)(0)][(int)(0)];
                long i_23 = 1;
                while ((i_23 < cell_18.Length)) {
                    if ((cell_18[(int)(i_23)][(int)(0)] < best_f_22)) {
                        best_f_22 = cell_18[(int)(i_23)][(int)(0)];
                        best_i_21 = i_23;
                    }
                    i_23 = (i_23 + 1);
                }
                long[] next_cell_24 = cell_18[(int)(best_i_21)];
                long[][] new_cell_25 = new long[][]{};
                i_23 = 0;
                while ((i_23 < cell_18.Length)) {
                    if ((i_23 != best_i_21)) {
                        new_cell_25 = (Enumerable.ToArray(Enumerable.Append<long[]>(new_cell_25, cell_18[(int)(i_23)])));
                    }
                    i_23 = (i_23 + 1);
                }
                cell_18 = new_cell_25;
                x_14 = next_cell_24[(int)(2)];
                y_15 = next_cell_24[(int)(3)];
                g_16 = next_cell_24[(int)(1)];
                if (((x_14 == goal_4[(int)(0)]) && (y_15 == goal_4[(int)(1)]))) {
                    found_19 = true;
                } else {
                    long d_26 = 0;
                    while ((d_26 < DIRECTIONS_0.Length)) {
                        long x2_27 = (x_14 + DIRECTIONS_0[(int)(d_26)][(int)(0)]);
                        long y2_28 = (y_15 + DIRECTIONS_0[(int)(d_26)][(int)(1)]);
                        if (((((((x2_27 >= 0) && (x2_27 < grid_2.Length)) && (y2_28 >= 0)) && (y2_28 < grid_2[(int)(0)].Length)) && (closed_7[(int)(x2_27)][(int)(y2_28)] == 0)) && (grid_2[(int)(x2_27)][(int)(y2_28)] == 0))) {
                            long g2_29 = (g_16 + cost_5);
                            long f2_30 = (g2_29 + heuristic_6[(int)(x2_27)][(int)(y2_28)]);
                            cell_18 = (Enumerable.ToArray(Enumerable.Append<long[]>(cell_18, new long[]{f2_30, g2_29, x2_27, y2_28})));
                            closed_7[(int)(x2_27)][y2_28] = 1;
                            action_11[(int)(x2_27)][y2_28] = d_26;
                        }
                        d_26 = (d_26 + 1);
                    }
                }
            }
        };
        long[][] invpath_31 = new long[][]{};
        x_14 = goal_4[(int)(0)];
        y_15 = goal_4[(int)(1)];
        invpath_31 = (Enumerable.ToArray(Enumerable.Append<long[]>(invpath_31, new long[]{x_14, y_15})));
        while (((x_14 != init_3[(int)(0)]) || (y_15 != init_3[(int)(1)]))) {
            long dir_32 = action_11[(int)(x_14)][(int)(y_15)];
            long x2_33 = (x_14 - DIRECTIONS_0[(int)(dir_32)][(int)(0)]);
            long y2_34 = (y_15 - DIRECTIONS_0[(int)(dir_32)][(int)(1)]);
            x_14 = x2_33;
            y_15 = y2_34;
            invpath_31 = (Enumerable.ToArray(Enumerable.Append<long[]>(invpath_31, new long[]{x_14, y_15})));
        };
        long[][] path_35 = new long[][]{};
        long idx_36 = (invpath_31.Length - 1);
        while ((idx_36 >= 0)) {
            path_35 = (Enumerable.ToArray(Enumerable.Append<long[]>(path_35, invpath_31[(int)(idx_36)])));
            idx_36 = (idx_36 - 1);
        };
        return new SearchResult{path = path_35, action = action_11};
    }

    public static void main() {
        long[][] grid_37 = new long[][]{new long[]{0, 1, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 1, 0}, new long[]{0, 0, 0, 0, 1, 0}};
        long[] init_38 = new long[]{0, 0};
        long[] goal_39 = new long[]{(grid_37.Length - 1), (grid_37[(int)(0)].Length - 1)};
        long cost_40 = 1;
        long[][] heuristic_41 = new long[][]{};
        long i_42 = 0;
        while ((i_42 < grid_37.Length)) {
            long[] row_43 = new long[]{};
            long j_44 = 0;
            while ((j_44 < grid_37[(int)(0)].Length)) {
                long h_45 = (Program.iabs((i_42 - goal_39[(int)(0)])) + Program.iabs((j_44 - goal_39[(int)(1)])));
                if ((grid_37[(int)(i_42)][(int)(j_44)] == 1)) {
                    row_43 = (Enumerable.ToArray(Enumerable.Append<long>(row_43, 99)));
                } else {
                    row_43 = (Enumerable.ToArray(Enumerable.Append<long>(row_43, h_45)));
                }
                j_44 = (j_44 + 1);
            }
            heuristic_41 = (Enumerable.ToArray(Enumerable.Append<long[]>(heuristic_41, row_43)));
            i_42 = (i_42 + 1);
        };
        SearchResult result_46 = Program.search(grid_37, init_38, goal_39, cost_40, heuristic_41);
        Console.WriteLine(Program._fmtTop("ACTION MAP"));
        long rr_47 = 0;
        while ((rr_47 < result_46.action.Length)) {
            Console.WriteLine(Program._fmtTop(result_46.action[(int)(rr_47)]));
            rr_47 = (rr_47 + 1);
        };
        long p_48 = 0;
        while ((p_48 < result_46.path.Length)) {
            Console.WriteLine(Program._fmtTop(result_46.path[(int)(p_48)]));
            p_48 = (p_48 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
