// Generated by Mochi 0.10.64 (commit 1f50014211) on 2025-08-13 15:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class SearchResult {
    public long[][] path;
    public long[][] action;
    public override string ToString() => $"SearchResult {{path = {path}, action = {action}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] DIRECTIONS_0 = new long[][]{new long[]{-1, 0}, new long[]{0, -1}, new long[]{1, 0}, new long[]{0, 1}};
    public static long iabs(long x_1) {
        if ((x_1 < 0)) {
            return -x_1;
        };
        return x_1;
    }

    public static SearchResult search(long[][] grid_2, long[] init_3, long[] goal_4, long cost_5, long[][] heuristic_6) {
        long[][] closed_7 = new long[][]{};
        long r_8 = 0;
        while ((r_8 < grid_2.Length)) {
            long[] row_9 = new long[]{};
            long c_10 = 0;
            while ((c_10 < _idx(grid_2, 0).Length)) {
                row_9 = ((Func<long[]>)(() => { var _tmp = row_9.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                c_10 = (c_10 + 1);
            }
            closed_7 = ((Func<long[][]>)(() => { var _tmp = closed_7.ToList(); _tmp.Add(row_9); return _tmp.ToArray(); }))();
            r_8 = (r_8 + 1);
        };
        _idx(closed_7, _idx(init_3, 0))[(int)(_idx(init_3, 1))] = 1;
        long[][] action_11 = new long[][]{};
        r_8 = 0;
        while ((r_8 < grid_2.Length)) {
            long[] row_12 = new long[]{};
            long c_13 = 0;
            while ((c_13 < _idx(grid_2, 0).Length)) {
                row_12 = ((Func<long[]>)(() => { var _tmp = row_12.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                c_13 = (c_13 + 1);
            }
            action_11 = ((Func<long[][]>)(() => { var _tmp = action_11.ToList(); _tmp.Add(row_12); return _tmp.ToArray(); }))();
            r_8 = (r_8 + 1);
        };
        long x_14 = _idx(init_3, 0);
        long y_15 = _idx(init_3, 1);
        long g_16 = 0;
        long f_17 = (g_16 + _idx(_idx(heuristic_6, x_14), y_15));
        long[][] cell_18 = new long[][]{new long[]{f_17, g_16, x_14, y_15}};
        bool found_19 = false;
        bool resign_20 = false;
        while (((!found_19) && (!resign_20))) {
            if ((cell_18.Length == 0)) {
                throw new Exception("Algorithm is unable to find solution");
            } else {
                long best_i_21 = 0;
                long best_f_22 = _idx(_idx(cell_18, 0), 0);
                long i_23 = 1;
                while ((i_23 < cell_18.Length)) {
                    if ((_idx(_idx(cell_18, i_23), 0) < best_f_22)) {
                        best_f_22 = _idx(_idx(cell_18, i_23), 0);
                        best_i_21 = i_23;
                    }
                    i_23 = (i_23 + 1);
                }
                long[] next_cell_24 = _idx(cell_18, best_i_21);
                long[][] new_cell_25 = new long[][]{};
                i_23 = 0;
                while ((i_23 < cell_18.Length)) {
                    if ((i_23 != best_i_21)) {
                        new_cell_25 = ((Func<long[][]>)(() => { var _tmp = new_cell_25.ToList(); _tmp.Add(_idx(cell_18, i_23)); return _tmp.ToArray(); }))();
                    }
                    i_23 = (i_23 + 1);
                }
                cell_18 = new_cell_25;
                x_14 = _idx(next_cell_24, 2);
                y_15 = _idx(next_cell_24, 3);
                g_16 = _idx(next_cell_24, 1);
                if (((x_14 == _idx(goal_4, 0)) && (y_15 == _idx(goal_4, 1)))) {
                    found_19 = true;
                } else {
                    long d_26 = 0;
                    while ((d_26 < DIRECTIONS_0.Length)) {
                        long x2_27 = (x_14 + _idx(_idx(DIRECTIONS_0, d_26), 0));
                        long y2_28 = (y_15 + _idx(_idx(DIRECTIONS_0, d_26), 1));
                        if (((((((x2_27 >= 0) && (x2_27 < grid_2.Length)) && (y2_28 >= 0)) && (y2_28 < _idx(grid_2, 0).Length)) && (_idx(_idx(closed_7, x2_27), y2_28) == 0)) && (_idx(_idx(grid_2, x2_27), y2_28) == 0))) {
                            long g2_29 = (g_16 + cost_5);
                            long f2_30 = (g2_29 + _idx(_idx(heuristic_6, x2_27), y2_28));
                            cell_18 = ((Func<long[][]>)(() => { var _tmp = cell_18.ToList(); _tmp.Add(new long[]{f2_30, g2_29, x2_27, y2_28}); return _tmp.ToArray(); }))();
                            _idx(closed_7, x2_27)[(int)(y2_28)] = 1;
                            _idx(action_11, x2_27)[(int)(y2_28)] = d_26;
                        }
                        d_26 = (d_26 + 1);
                    }
                }
            }
        };
        long[][] invpath_31 = new long[][]{};
        x_14 = _idx(goal_4, 0);
        y_15 = _idx(goal_4, 1);
        invpath_31 = ((Func<long[][]>)(() => { var _tmp = invpath_31.ToList(); _tmp.Add(new long[]{x_14, y_15}); return _tmp.ToArray(); }))();
        while (((x_14 != _idx(init_3, 0)) || (y_15 != _idx(init_3, 1)))) {
            long dir_32 = _idx(_idx(action_11, x_14), y_15);
            long x2_33 = (x_14 - _idx(_idx(DIRECTIONS_0, dir_32), 0));
            long y2_34 = (y_15 - _idx(_idx(DIRECTIONS_0, dir_32), 1));
            x_14 = x2_33;
            y_15 = y2_34;
            invpath_31 = ((Func<long[][]>)(() => { var _tmp = invpath_31.ToList(); _tmp.Add(new long[]{x_14, y_15}); return _tmp.ToArray(); }))();
        };
        long[][] path_35 = new long[][]{};
        long idx_36 = (invpath_31.Length - 1);
        while ((idx_36 >= 0)) {
            path_35 = ((Func<long[][]>)(() => { var _tmp = path_35.ToList(); _tmp.Add(_idx(invpath_31, idx_36)); return _tmp.ToArray(); }))();
            idx_36 = (idx_36 - 1);
        };
        return new SearchResult{path = path_35, action = action_11};
    }

    public static void main() {
        long[][] grid_37 = new long[][]{new long[]{0, 1, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 1, 0}, new long[]{0, 0, 0, 0, 1, 0}};
        long[] init_38 = new long[]{0, 0};
        long[] goal_39 = new long[]{(grid_37.Length - 1), (_idx(grid_37, 0).Length - 1)};
        long cost_40 = 1;
        long[][] heuristic_41 = new long[][]{};
        long i_42 = 0;
        while ((i_42 < grid_37.Length)) {
            long[] row_43 = new long[]{};
            long j_44 = 0;
            while ((j_44 < _idx(grid_37, 0).Length)) {
                long h_45 = (Program.iabs((i_42 - _idx(goal_39, 0))) + Program.iabs((j_44 - _idx(goal_39, 1))));
                if ((_idx(_idx(grid_37, i_42), j_44) == 1)) {
                    row_43 = ((Func<long[]>)(() => { var _tmp = row_43.ToList(); _tmp.Add(99); return _tmp.ToArray(); }))();
                } else {
                    row_43 = ((Func<long[]>)(() => { var _tmp = row_43.ToList(); _tmp.Add(h_45); return _tmp.ToArray(); }))();
                }
                j_44 = (j_44 + 1);
            }
            heuristic_41 = ((Func<long[][]>)(() => { var _tmp = heuristic_41.ToList(); _tmp.Add(row_43); return _tmp.ToArray(); }))();
            i_42 = (i_42 + 1);
        };
        SearchResult result_46 = Program.search(grid_37, init_38, goal_39, cost_40, heuristic_41);
        Console.WriteLine(Program._fmtTop("ACTION MAP"));
        long rr_47 = 0;
        while ((rr_47 < result_46.action.Length)) {
            Console.WriteLine(Program._fmtTop(_idx(result_46.action, rr_47)));
            rr_47 = (rr_47 + 1);
        };
        long p_48 = 0;
        while ((p_48 < result_46.path.Length)) {
            Console.WriteLine(Program._fmtTop(_idx(result_46.path, p_48)));
            p_48 = (p_48 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
