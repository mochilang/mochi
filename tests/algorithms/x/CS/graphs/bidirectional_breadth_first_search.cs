// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public string pos;
    public string[] path;
    public override string ToString() => $"Node {{pos = \"{pos}\", path = {path}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] grid_0 = new long[][]{new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 0, 1, 0, 0, 0, 0}, new long[]{1, 0, 1, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 1, 0, 0}};
    static long[][] delta_1 = new long[][]{new long[]{-1, 0}, new long[]{0, -1}, new long[]{1, 0}, new long[]{0, 1}};
    static string start_60 = Program.key(0, 0);
    static string goal_61 = Program.key((grid_0.Length - 1), (grid_0[(int)(0)].Length - 1));
    static string[] path1_62 = Program.bfs(start_60, goal_61);
    public static string key(long y_2, long x_3) {
        return ((_fmtStr(y_2) + ",") + _fmtStr(x_3));
    }

    public static long parse_int(string s_4) {
        long value_5 = 0;
        long i_6 = 0;
        while ((i_6 < s_4.Length)) {
            string c_7 = s_4.Substring((int)(i_6), 1);
            value_5 = ((value_5 * 10) + Convert.ToInt64(c_7));
            i_6 = (i_6 + 1);
        };
        return value_5;
    }

    public static long[] parse_key(string k_8) {
        long idx_9 = 0;
        while (((idx_9 < k_8.Length) && (_substr(k_8, idx_9, (idx_9 + 1)) != ","))) {
            idx_9 = (idx_9 + 1);
        };
        long y_10 = Program.parse_int(_substr(k_8, 0, idx_9));
        long x_11 = Program.parse_int(_substr(k_8, (idx_9 + 1), k_8.Length));
        return new long[]{y_10, x_11};
    }

    public static string[] neighbors(string pos_12) {
        long[] coords_13 = Program.parse_key(pos_12);
        long y_14 = coords_13[(int)(0)];
        long x_15 = coords_13[(int)(1)];
        string[] res_16 = new string[]{};
        long i_17 = 0;
        while ((i_17 < delta_1.Length)) {
            long ny_18 = (y_14 + delta_1[(int)(i_17)][(int)(0)]);
            long nx_19 = (x_15 + delta_1[(int)(i_17)][(int)(1)]);
            if (((((ny_18 >= 0) && (ny_18 < grid_0.Length)) && (nx_19 >= 0)) && (nx_19 < grid_0[(int)(0)].Length))) {
                if ((grid_0[(int)(ny_18)][(int)(nx_19)] == 0)) {
                    res_16 = (Enumerable.ToArray(Enumerable.Append<string>(res_16, Program.key(ny_18, nx_19))));
                }
            }
            i_17 = (i_17 + 1);
        };
        return res_16;
    }

    public static string[] reverse_list(string[] lst_20) {
        string[] res_21 = new string[]{};
        long i_22 = (lst_20.Length - 1);
        while ((i_22 >= 0)) {
            res_21 = (Enumerable.ToArray(Enumerable.Append<string>(res_21, lst_20[(int)(i_22)])));
            i_22 = (i_22 - 1);
        };
        return res_21;
    }

    public static string[] bfs(string start_23, string goal_24) {
        Node[] queue_25 = new Node[]{};
        queue_25 = (Enumerable.ToArray(Enumerable.Append<Node>(queue_25, new Node{pos = start_23, path = new string[]{start_23}})));
        long head_26 = 0;
        Dictionary<string, bool> visited_27 = new Dictionary<string, bool>{{"start_23", true}};
        while ((head_26 < queue_25.Length)) {
            Node node_28 = queue_25[(int)(head_26)];
            head_26 = (head_26 + 1);
            if ((node_28.pos == goal_24)) {
                return node_28.path;
            }
            string[] neigh_29 = Program.neighbors(node_28.pos);
            long i_30 = 0;
            while ((i_30 < neigh_29.Length)) {
                string npos_31 = neigh_29[(int)(i_30)];
                if ((!(visited_27.ContainsKey(npos_31)))) {
                    visited_27[npos_31] = true;
                    string[] new_path_32 = (Enumerable.ToArray(Enumerable.Append<string>(node_28.path, npos_31)));
                    queue_25 = (Enumerable.ToArray(Enumerable.Append<Node>(queue_25, new Node{pos = npos_31, path = new_path_32})));
                }
                i_30 = (i_30 + 1);
            }
        };
        return new string[]{};
    }

    public static string[] bidirectional_bfs(string start_33, string goal_34) {
        Node[] queue_f_35 = new Node[]{};
        Node[] queue_b_36 = new Node[]{};
        queue_f_35 = (Enumerable.ToArray(Enumerable.Append<Node>(queue_f_35, new Node{pos = start_33, path = new string[]{start_33}})));
        queue_b_36 = (Enumerable.ToArray(Enumerable.Append<Node>(queue_b_36, new Node{pos = goal_34, path = new string[]{goal_34}})));
        long head_f_37 = 0;
        long head_b_38 = 0;
        Dictionary<string, string[]> visited_f_39 = new Dictionary<string, string[]>{{"start_33", new string[]{start_33}}};
        Dictionary<string, string[]> visited_b_40 = new Dictionary<string, string[]>{{"goal_34", new string[]{goal_34}}};
        while (((head_f_37 < queue_f_35.Length) && (head_b_38 < queue_b_36.Length))) {
            Node node_f_41 = queue_f_35[(int)(head_f_37)];
            head_f_37 = (head_f_37 + 1);
            string[] neigh_f_42 = Program.neighbors(node_f_41.pos);
            long i_43 = 0;
            while ((i_43 < neigh_f_42.Length)) {
                string npos_44 = neigh_f_42[(int)(i_43)];
                if ((!(visited_f_39.ContainsKey(npos_44)))) {
                    string[] new_path_45 = (Enumerable.ToArray(Enumerable.Append<string>(node_f_41.path, npos_44)));
                    visited_f_39[npos_44] = new_path_45;
                    if ((visited_b_40.ContainsKey(npos_44))) {
                        string[] rev_46 = Program.reverse_list((visited_b_40.ContainsKey(npos_44) ? visited_b_40[npos_44] : null));
                        long j_47 = 1;
                        while ((j_47 < rev_46.Length)) {
                            new_path_45 = (Enumerable.ToArray(Enumerable.Append<string>(new_path_45, rev_46[(int)(j_47)])));
                            j_47 = (j_47 + 1);
                        }
                        return new_path_45;
                    }
                    queue_f_35 = (Enumerable.ToArray(Enumerable.Append<Node>(queue_f_35, new Node{pos = npos_44, path = new_path_45})));
                }
                i_43 = (i_43 + 1);
            }
            Node node_b_48 = queue_b_36[(int)(head_b_38)];
            head_b_38 = (head_b_38 + 1);
            string[] neigh_b_49 = Program.neighbors(node_b_48.pos);
            long j_50 = 0;
            while ((j_50 < neigh_b_49.Length)) {
                string nposb_51 = neigh_b_49[(int)(j_50)];
                if ((!(visited_b_40.ContainsKey(nposb_51)))) {
                    string[] new_path_b_52 = (Enumerable.ToArray(Enumerable.Append<string>(node_b_48.path, nposb_51)));
                    visited_b_40[nposb_51] = new_path_b_52;
                    if ((visited_f_39.ContainsKey(nposb_51))) {
                        string[] path_f_53 = (visited_f_39.ContainsKey(nposb_51) ? visited_f_39[nposb_51] : null);
                        new_path_b_52 = Program.reverse_list(new_path_b_52);
                        long t_54 = 1;
                        while ((t_54 < new_path_b_52.Length)) {
                            path_f_53 = (Enumerable.ToArray(Enumerable.Append<string>(path_f_53, new_path_b_52[(int)(t_54)])));
                            t_54 = (t_54 + 1);
                        }
                        return path_f_53;
                    }
                    queue_b_36 = (Enumerable.ToArray(Enumerable.Append<Node>(queue_b_36, new Node{pos = nposb_51, path = new_path_b_52})));
                }
                j_50 = (j_50 + 1);
            }
        };
        return new string[]{start_33};
    }

    public static string path_to_string(string[] path_55) {
        if ((path_55.Length == 0)) {
            return "[]";
        };
        long[] first_56 = Program.parse_key(path_55[(int)(0)]);
        string s_57 = (((("[(" + _fmtStr(first_56[(int)(0)])) + ", ") + _fmtStr(first_56[(int)(1)])) + ")");
        long i_58 = 1;
        while ((i_58 < path_55.Length)) {
            long[] c_59 = Program.parse_key(path_55[(int)(i_58)]);
            s_57 = (((((s_57 + ", (") + _fmtStr(c_59[(int)(0)])) + ", ") + _fmtStr(c_59[(int)(1)])) + ")");
            i_58 = (i_58 + 1);
        };
        s_57 = (s_57 + "]");
        return s_57;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.path_to_string(path1_62)));
            string[] path2_63 = Program.bidirectional_bfs(start_60, goal_61);
            Console.WriteLine(Program._fmtTop(Program.path_to_string(path2_63)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
