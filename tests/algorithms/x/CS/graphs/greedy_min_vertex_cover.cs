// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<long, long[]> graph_15 = new Dictionary<long, long[]>{{0, new long[]{1, 3}}, {1, new long[]{0, 3}}, {2, new long[]{0, 3, 4}}, {3, new long[]{0, 1, 2}}, {4, new long[]{2, 3}}};
    public static long[] remove_value(long[] lst_0, long val_1) {
        long[] res_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < lst_0.Length)) {
            if ((_idx(lst_0, i_3) != val_1)) {
                res_2 = ((Func<long[]>)(() => { var _tmp = res_2.ToList(); _tmp.Add(_idx(lst_0, i_3)); return _tmp.ToArray(); }))();
            }
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long[] greedy_min_vertex_cover(Dictionary<long, long[]> graph_4) {
        Dictionary<long, long[]> g_5 = graph_4;
        long[] cover_6 = new long[]{};
        while (true) {
            long max_v_7 = 0;
            long max_deg_8 = 0;
            foreach (long v_9 in g_5.Keys) {
                long key_10 = (long)(v_9);
                long deg_11 = (g_5.ContainsKey(key_10) ? g_5[key_10] : null).Length;
                if ((deg_11 > max_deg_8)) {
                    max_deg_8 = deg_11;
                    max_v_7 = key_10;
                }
            }
            if ((max_deg_8 == 0)) {
                break;
            }
            cover_6 = ((Func<long[]>)(() => { var _tmp = cover_6.ToList(); _tmp.Add(max_v_7); return _tmp.ToArray(); }))();
            long[] neighbors_12 = (g_5.ContainsKey(max_v_7) ? g_5[max_v_7] : null);
            long i_13 = 0;
            while ((i_13 < neighbors_12.Length)) {
                long n_14 = _idx(neighbors_12, i_13);
                g_5[n_14] = Program.remove_value((g_5.ContainsKey(n_14) ? g_5[n_14] : null), max_v_7);
                i_13 = (i_13 + 1);
            }
            g_5[max_v_7] = new long[]{};
        };
        return cover_6;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.greedy_min_vertex_cover(graph_15)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
