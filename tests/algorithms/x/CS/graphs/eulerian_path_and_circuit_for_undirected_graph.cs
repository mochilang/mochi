// Generated by Mochi 0.10.59 on 2025-08-07 00:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class CheckResult {
    public long status;
    public long odd_node;
    public override string ToString() => $"CheckResult {{status = {status}, odd_node = {odd_node}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<long, long[]> g1_23 = new Dictionary<long, long[]>{{1, new long[]{2, 3, 4}}, {2, new long[]{1, 3}}, {3, new long[]{1, 2}}, {4, new long[]{1, 5}}, {5, new long[]{4}}};
    static Dictionary<long, long[]> g2_24 = new Dictionary<long, long[]>{{1, new long[]{2, 3, 4, 5}}, {2, new long[]{1, 3}}, {3, new long[]{1, 2}}, {4, new long[]{1, 5}}, {5, new long[]{1, 4}}};
    static Dictionary<long, long[]> g3_25 = new Dictionary<long, long[]>{{1, new long[]{2, 3, 4}}, {2, new long[]{1, 3, 4}}, {3, new long[]{1, 2}}, {4, new long[]{1, 2, 5}}, {5, new long[]{4}}};
    static Dictionary<long, long[]> g4_26 = new Dictionary<long, long[]>{{1, new long[]{2, 3}}, {2, new long[]{1, 3}}, {3, new long[]{1, 2}}};
    static Dictionary<long, long[]> g5_27 = new Dictionary<long, long[]>{{1, new long[]{}}, {2, new long[]{}}};
    static long max_node_28 = 10;
    public static bool[][] make_matrix(long n_0) {
        bool[][] matrix_1 = new bool[][]{};
        long i_2 = 0;
        while ((i_2 <= n_0)) {
            bool[] row_3 = new bool[]{};
            long j_4 = 0;
            while ((j_4 <= n_0)) {
                row_3 = (Enumerable.ToArray(Enumerable.Append<bool>(row_3, false)));
                j_4 = (j_4 + 1);
            }
            matrix_1 = (Enumerable.ToArray(Enumerable.Append<bool[]>(matrix_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return matrix_1;
    }

    public static long[] dfs(long u_5, Dictionary<long, long[]> graph_6, bool[][] visited_edge_7, long[] path_8) {
        path_8 = (Enumerable.ToArray(Enumerable.Append<long>(path_8, u_5)));
        if ((graph_6.ContainsKey(u_5))) {
            long[] neighbors_9 = (graph_6.ContainsKey(u_5) ? graph_6[u_5] : null);
            long i_10 = 0;
            while ((i_10 < neighbors_9.Length)) {
                long v_11 = neighbors_9[(int)(i_10)];
                if ((visited_edge_7[(int)(u_5)][(int)(v_11)] == false)) {
                    visited_edge_7[(int)(u_5)][v_11] = true;
                    visited_edge_7[(int)(v_11)][u_5] = true;
                    path_8 = Program.dfs(v_11, graph_6, visited_edge_7, path_8);
                }
                i_10 = (i_10 + 1);
            }
        };
        return path_8;
    }

    public static CheckResult check_circuit_or_path(Dictionary<long, long[]> graph_12, long max_node_13) {
        long odd_degree_nodes_14 = 0;
        long odd_node_15 = -1;
        long i_16 = 0;
        while ((i_16 < max_node_13)) {
            if ((graph_12.ContainsKey(i_16))) {
                if ((_mod((graph_12.ContainsKey(i_16) ? graph_12[i_16] : null).Length, 2) == 1)) {
                    odd_degree_nodes_14 = (odd_degree_nodes_14 + 1);
                    odd_node_15 = i_16;
                }
            }
            i_16 = (i_16 + 1);
        };
        if ((odd_degree_nodes_14 == 0)) {
            return new CheckResult{status = 1, odd_node = odd_node_15};
        };
        if ((odd_degree_nodes_14 == 2)) {
            return new CheckResult{status = 2, odd_node = odd_node_15};
        };
        return new CheckResult{status = 3, odd_node = odd_node_15};
    }

    public static void check_euler(Dictionary<long, long[]> graph_17, long max_node_18) {
        bool[][] visited_edge_19 = Program.make_matrix(max_node_18);
        CheckResult res_20 = Program.check_circuit_or_path(graph_17, max_node_18);
        if ((res_20.status == 3)) {
            Console.WriteLine(Program._fmtTop("graph is not Eulerian"));
            Console.WriteLine(Program._fmtTop("no path"));
            return;
        };
        long start_node_21 = 1;
        if ((res_20.status == 2)) {
            start_node_21 = res_20.odd_node;
            Console.WriteLine(Program._fmtTop("graph has a Euler path"));
        };
        if ((res_20.status == 1)) {
            Console.WriteLine(Program._fmtTop("graph has a Euler cycle"));
        };
        long[] path_22 = Program.dfs(start_node_21, graph_17, visited_edge_19, new long[]{});
        Console.WriteLine(Program._fmtTop(_fmtStr(path_22)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.check_euler(g1_23, max_node_28);
            Program.check_euler(g2_24, max_node_28);
            Program.check_euler(g3_25, max_node_28);
            Program.check_euler(g4_26, max_node_28);
            Program.check_euler(g5_27, max_node_28);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
