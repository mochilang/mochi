// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Pos {
    public long y;
    public long x;
    public override string ToString() => $"Pos {{y = {y}, x = {x}}}";
}
class Node {
    public long pos_x;
    public long pos_y;
    public long goal_x;
    public long goal_y;
    public long g_cost;
    public long f_cost;
    public Pos[] path;
    public override string ToString() => $"Node {{pos_x = {pos_x}, pos_y = {pos_y}, goal_x = {goal_x}, goal_y = {goal_y}, g_cost = {g_cost}, f_cost = {f_cost}, path = {path}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Pos[] delta_15 = new Pos[]{new Pos{y = -1, x = 0}, new Pos{y = 0, x = -1}, new Pos{y = 1, x = 0}, new Pos{y = 0, x = 1}};
    static long[][][] TEST_GRIDS_50 = new long[][][]{new long[][]{new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 0, 1, 0, 0, 0, 0}, new long[]{1, 0, 1, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 1, 0, 0}}, new long[][]{new long[]{0, 0, 0, 1, 1, 0, 0}, new long[]{0, 0, 0, 0, 1, 0, 1}, new long[]{0, 0, 0, 1, 1, 0, 0}, new long[]{0, 1, 0, 0, 1, 0, 0}, new long[]{1, 0, 0, 1, 1, 0, 1}, new long[]{0, 0, 0, 0, 0, 0, 0}}, new long[][]{new long[]{0, 0, 1, 0, 0}, new long[]{0, 1, 0, 0, 0}, new long[]{0, 0, 1, 0, 1}, new long[]{1, 0, 0, 1, 1}, new long[]{0, 0, 0, 0, 0}}};
    public static long abs(long x_0) {
        if ((x_0 < 0)) {
            return (0 - x_0);
        };
        return x_0;
    }

    public static long manhattan(long x1_1, long y1_2, long x2_3, long y2_4) {
        return (Program.abs((x1_1 - x2_3)) + Program.abs((y1_2 - y2_4)));
    }

    public static Pos[] clone_path(Pos[] p_5) {
        Pos[] res_6 = new Pos[]{};
        long i_7 = 0;
        while ((i_7 < p_5.Length)) {
            res_6 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_6, p_5[(int)(i_7)])));
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static Node make_node(long pos_x_8, long pos_y_9, long goal_x_10, long goal_y_11, long g_cost_12, Pos[] path_13) {
        long f_14 = Program.manhattan(pos_x_8, pos_y_9, goal_x_10, goal_y_11);
        return new Node{pos_x = pos_x_8, pos_y = pos_y_9, goal_x = goal_x_10, goal_y = goal_y_11, g_cost = g_cost_12, f_cost = f_14, path = path_13};
    }

    public static bool node_equal(Node a_16, Node b_17) {
        return ((a_16.pos_x == b_17.pos_x) && (a_16.pos_y == b_17.pos_y));
    }

    public static bool contains(Node[] nodes_18, Node node_19) {
        long i_20 = 0;
        while ((i_20 < nodes_18.Length)) {
            if (Program.node_equal(nodes_18[(int)(i_20)], node_19)) {
                return true;
            }
            i_20 = (i_20 + 1);
        };
        return false;
    }

    public static Node[] sort_nodes(Node[] nodes_21) {
        Node[] arr_22 = nodes_21;
        long i_23 = 1;
        while ((i_23 < arr_22.Length)) {
            Node key_node_24 = arr_22[(int)(i_23)];
            long j_25 = (i_23 - 1);
            while ((j_25 >= 0)) {
                Node temp_26 = arr_22[(int)(j_25)];
                if ((temp_26.f_cost > key_node_24.f_cost)) {
                    arr_22[(j_25 + 1)] = temp_26;
                    j_25 = (j_25 - 1);
                } else {
                    break;
                }
            }
            arr_22[(j_25 + 1)] = key_node_24;
            i_23 = (i_23 + 1);
        };
        return arr_22;
    }

    public static Node[] get_successors(long[][] grid_27, Node parent_28, Pos target_29) {
        Node[] res_30 = new Node[]{};
        long i_31 = 0;
        while ((i_31 < delta_15.Length)) {
            Pos d_32 = delta_15[(int)(i_31)];
            long pos_x_33 = (parent_28.pos_x + d_32.x);
            long pos_y_34 = (parent_28.pos_y + d_32.y);
            if ((((((pos_x_33 >= 0) && (pos_x_33 < grid_27[(int)(0)].Length)) && (pos_y_34 >= 0)) && (pos_y_34 < grid_27.Length)) && (grid_27[(int)(pos_y_34)][(int)(pos_x_33)] == 0))) {
                Pos[] new_path_35 = Program.clone_path(parent_28.path);
                new_path_35 = (Enumerable.ToArray(Enumerable.Append<Pos>(new_path_35, new Pos{y = pos_y_34, x = pos_x_33})));
                res_30 = (Enumerable.ToArray(Enumerable.Append<Node>(res_30, Program.make_node(pos_x_33, pos_y_34, target_29.x, target_29.y, (parent_28.g_cost + 1), new_path_35))));
            }
            i_31 = (i_31 + 1);
        };
        return res_30;
    }

    public static Pos[] greedy_best_first(long[][] grid_36, Pos init_37, Pos goal_38) {
        Pos[] start_path_39 = new Pos[]{init_37};
        Node start_40 = Program.make_node(init_37.x, init_37.y, goal_38.x, goal_38.y, 0, start_path_39);
        Node[] open_nodes_41 = new Node[]{start_40};
        Node[] closed_nodes_42 = new Node[]{};
        while ((open_nodes_41.Length > 0)) {
            open_nodes_41 = Program.sort_nodes(open_nodes_41);
            Node current_43 = open_nodes_41[(int)(0)];
            Node[] new_open_44 = new Node[]{};
            long idx_45 = 1;
            while ((idx_45 < open_nodes_41.Length)) {
                new_open_44 = (Enumerable.ToArray(Enumerable.Append<Node>(new_open_44, open_nodes_41[(int)(idx_45)])));
                idx_45 = (idx_45 + 1);
            }
            open_nodes_41 = new_open_44;
            if (((current_43.pos_x == goal_38.x) && (current_43.pos_y == goal_38.y))) {
                return current_43.path;
            }
            closed_nodes_42 = (Enumerable.ToArray(Enumerable.Append<Node>(closed_nodes_42, current_43)));
            Node[] successors_46 = Program.get_successors(grid_36, current_43, goal_38);
            long i_47 = 0;
            while ((i_47 < successors_46.Length)) {
                Node child_48 = successors_46[(int)(i_47)];
                if (((!Program.contains(closed_nodes_42, child_48)) && (!Program.contains(open_nodes_41, child_48)))) {
                    open_nodes_41 = (Enumerable.ToArray(Enumerable.Append<Node>(open_nodes_41, child_48)));
                }
                i_47 = (i_47 + 1);
            }
        };
        Pos[] r_49 = new Pos[]{init_37};
        return r_49;
    }

    public static void print_grid(long[][] grid_51) {
        long i_52 = 0;
        while ((i_52 < grid_51.Length)) {
            Console.WriteLine(Program._fmtTop(_fmtStr(grid_51[(int)(i_52)])));
            i_52 = (i_52 + 1);
        };
    }

    public static void main() {
        long idx_53 = 0;
        while ((idx_53 < TEST_GRIDS_50.Length)) {
            Console.WriteLine(Program._fmtTop((("==grid-" + _fmtStr((idx_53 + 1))) + "==")));
            long[][] grid_54 = TEST_GRIDS_50[(int)(idx_53)];
            Pos init_55 = new Pos{y = 0, x = 0};
            Pos goal_56 = new Pos{y = (grid_54.Length - 1), x = (grid_54[(int)(0)].Length - 1)};
            Program.print_grid(grid_54);
            Console.WriteLine(Program._fmtTop("------"));
            Pos[] path_57 = Program.greedy_best_first(grid_54, init_55, goal_56);
            long j_58 = 0;
            while ((j_58 < path_57.Length)) {
                Pos p_59 = path_57[(int)(j_58)];
                grid_54[(int)(p_59.y)][p_59.x] = 2;
                j_58 = (j_58 + 1);
            }
            Program.print_grid(grid_54);
            idx_53 = (idx_53 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
