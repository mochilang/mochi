// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] graph_37 = new long[][]{new long[]{0, 7, 0, 0}, new long[]{0, 0, 6, 0}, new long[]{0, 0, 0, 8}, new long[]{9, 0, 0, 0}};
    static long[] sources_38 = new long[]{0};
    static long[] sinks_39 = new long[]{3};
    static long result_40 = Program.push_relabel_max_flow(graph_37, sources_38, sinks_39);
    public static long push_relabel_max_flow(long[][] graph_0, long[] sources_1, long[] sinks_2) {
        if (((sources_1.Length == 0) || (sinks_2.Length == 0))) {
            return 0;
        };
        long[][] g_3 = graph_0;
        long source_index_4 = _idx(sources_1, 0);
        long sink_index_5 = _idx(sinks_2, 0);
        if (((sources_1.Length > 1) || (sinks_2.Length > 1))) {
            long max_input_flow_6 = 0;
            long i_7 = 0;
            while ((i_7 < sources_1.Length)) {
                long j_8 = 0;
                while ((j_8 < _idx(g_3, _idx(sources_1, i_7)).Length)) {
                    max_input_flow_6 = (max_input_flow_6 + _idx(_idx(g_3, _idx(sources_1, i_7)), j_8));
                    j_8 = (j_8 + 1);
                }
                i_7 = (i_7 + 1);
            }
            long size_9 = (g_3.Length + 1);
            long[][] new_graph_10 = new long[][]{};
            long[] zero_row_11 = new long[]{};
            long j_12 = 0;
            while ((j_12 < size_9)) {
                zero_row_11 = ((Func<long[]>)(() => { var _tmp = zero_row_11.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_12 = (j_12 + 1);
            }
            new_graph_10 = ((Func<long[][]>)(() => { var _tmp = new_graph_10.ToList(); _tmp.Add(zero_row_11); return _tmp.ToArray(); }))();
            long r_13 = 0;
            while ((r_13 < g_3.Length)) {
                long[] row_14 = new long[]{0};
                long c_15 = 0;
                while ((c_15 < _idx(g_3, r_13).Length)) {
                    row_14 = ((Func<long[]>)(() => { var _tmp = row_14.ToList(); _tmp.Add(_idx(_idx(g_3, r_13), c_15)); return _tmp.ToArray(); }))();
                    c_15 = (c_15 + 1);
                }
                new_graph_10 = ((Func<long[][]>)(() => { var _tmp = new_graph_10.ToList(); _tmp.Add(row_14); return _tmp.ToArray(); }))();
                r_13 = (r_13 + 1);
            }
            g_3 = new_graph_10;
            i_7 = 0;
            while ((i_7 < sources_1.Length)) {
                _idx(g_3, 0)[(int)((_idx(sources_1, i_7) + 1))] = max_input_flow_6;
                i_7 = (i_7 + 1);
            }
            source_index_4 = 0;
            size_9 = (g_3.Length + 1);
            new_graph_10 = new long[][]{};
            r_13 = 0;
            while ((r_13 < g_3.Length)) {
                long[] row2_16 = _idx(g_3, r_13);
                row2_16 = ((Func<long[]>)(() => { var _tmp = row2_16.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                new_graph_10 = ((Func<long[][]>)(() => { var _tmp = new_graph_10.ToList(); _tmp.Add(row2_16); return _tmp.ToArray(); }))();
                r_13 = (r_13 + 1);
            }
            long[] last_row_17 = new long[]{};
            j_12 = 0;
            while ((j_12 < size_9)) {
                last_row_17 = ((Func<long[]>)(() => { var _tmp = last_row_17.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_12 = (j_12 + 1);
            }
            new_graph_10 = ((Func<long[][]>)(() => { var _tmp = new_graph_10.ToList(); _tmp.Add(last_row_17); return _tmp.ToArray(); }))();
            g_3 = new_graph_10;
            i_7 = 0;
            while ((i_7 < sinks_2.Length)) {
                _idx(g_3, (_idx(sinks_2, i_7) + 1))[(int)((size_9 - 1))] = max_input_flow_6;
                i_7 = (i_7 + 1);
            }
            sink_index_5 = (size_9 - 1);
        };
        long n_18 = g_3.Length;
        long[][] preflow_19 = new long[][]{};
        long i_20 = 0;
        while ((i_20 < n_18)) {
            long[] row_21 = new long[]{};
            long j_22 = 0;
            while ((j_22 < n_18)) {
                row_21 = ((Func<long[]>)(() => { var _tmp = row_21.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_22 = (j_22 + 1);
            }
            preflow_19 = ((Func<long[][]>)(() => { var _tmp = preflow_19.ToList(); _tmp.Add(row_21); return _tmp.ToArray(); }))();
            i_20 = (i_20 + 1);
        };
        long[] heights_23 = new long[]{};
        i_20 = 0;
        while ((i_20 < n_18)) {
            heights_23 = ((Func<long[]>)(() => { var _tmp = heights_23.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_20 = (i_20 + 1);
        };
        long[] excesses_24 = new long[]{};
        i_20 = 0;
        while ((i_20 < n_18)) {
            excesses_24 = ((Func<long[]>)(() => { var _tmp = excesses_24.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_20 = (i_20 + 1);
        };
        heights_23[(int)(source_index_4)] = n_18;
        i_20 = 0;
        while ((i_20 < n_18)) {
            long bandwidth_25 = _idx(_idx(g_3, source_index_4), i_20);
            _idx(preflow_19, source_index_4)[(int)(i_20)] = (_idx(_idx(preflow_19, source_index_4), i_20) + bandwidth_25);
            _idx(preflow_19, i_20)[(int)(source_index_4)] = (_idx(_idx(preflow_19, i_20), source_index_4) - bandwidth_25);
            excesses_24[(int)(i_20)] = (_idx(excesses_24, i_20) + bandwidth_25);
            i_20 = (i_20 + 1);
        };
        long[] vertices_list_26 = new long[]{};
        i_20 = 0;
        while ((i_20 < n_18)) {
            if (((i_20 != source_index_4) && (i_20 != sink_index_5))) {
                vertices_list_26 = ((Func<long[]>)(() => { var _tmp = vertices_list_26.ToList(); _tmp.Add(i_20); return _tmp.ToArray(); }))();
            }
            i_20 = (i_20 + 1);
        };
        long idx_27 = 0;
        while ((idx_27 < vertices_list_26.Length)) {
            long v_28 = _idx(vertices_list_26, idx_27);
            long prev_height_29 = _idx(heights_23, v_28);
            while ((_idx(excesses_24, v_28) > 0)) {
                long nb_30 = 0;
                while ((nb_30 < n_18)) {
                    if ((((_idx(_idx(g_3, v_28), nb_30) - _idx(_idx(preflow_19, v_28), nb_30)) > 0) && (_idx(heights_23, v_28) > _idx(heights_23, nb_30)))) {
                        long delta_31 = _idx(excesses_24, v_28);
                        long capacity_32 = (_idx(_idx(g_3, v_28), nb_30) - _idx(_idx(preflow_19, v_28), nb_30));
                        if ((delta_31 > capacity_32)) {
                            delta_31 = capacity_32;
                        }
                        _idx(preflow_19, v_28)[(int)(nb_30)] = (_idx(_idx(preflow_19, v_28), nb_30) + delta_31);
                        _idx(preflow_19, nb_30)[(int)(v_28)] = (_idx(_idx(preflow_19, nb_30), v_28) - delta_31);
                        excesses_24[(int)(v_28)] = (_idx(excesses_24, v_28) - delta_31);
                        excesses_24[(int)(nb_30)] = (_idx(excesses_24, nb_30) + delta_31);
                    }
                    nb_30 = (nb_30 + 1);
                }
                long min_height_33 = -1;
                nb_30 = 0;
                while ((nb_30 < n_18)) {
                    if (((_idx(_idx(g_3, v_28), nb_30) - _idx(_idx(preflow_19, v_28), nb_30)) > 0)) {
                        if (((min_height_33 == -1) || (_idx(heights_23, nb_30) < min_height_33))) {
                            min_height_33 = _idx(heights_23, nb_30);
                        }
                    }
                    nb_30 = (nb_30 + 1);
                }
                if ((min_height_33 != -1)) {
                    heights_23[(int)(v_28)] = (min_height_33 + 1);
                } else {
                    break;
                }
            }
            if ((_idx(heights_23, v_28) > prev_height_29)) {
                long vertex_34 = _idx(vertices_list_26, idx_27);
                long j_35 = idx_27;
                while ((j_35 > 0)) {
                    vertices_list_26[(int)(j_35)] = _idx(vertices_list_26, (j_35 - 1));
                    j_35 = (j_35 - 1);
                }
                vertices_list_26[(int)(0)] = vertex_34;
                idx_27 = 0;
            } else {
                idx_27 = (idx_27 + 1);
            }
        };
        long flow_36 = 0;
        i_20 = 0;
        while ((i_20 < n_18)) {
            flow_36 = (flow_36 + _idx(_idx(preflow_19, source_index_4), i_20));
            i_20 = (i_20 + 1);
        };
        if ((flow_36 < 0)) {
            flow_36 = -flow_36;
        };
        return flow_36;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("maximum flow is " + _fmtStr(result_40))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
