// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class QueueNode {
    public string node;
    public long weight;
    public override string ToString() => $"QueueNode {{node = \"{node}\", weight = {weight}}}";
}
class MSTResult {
    public Dictionary<string, long> dist;
    public Dictionary<string, string> parent;
    public override string ToString() => $"MSTResult {{dist = {dist}, parent = {parent}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, Dictionary<string, long>> graph_25 = new Dictionary<string, Dictionary<string, long>>{};
    public static MSTResult prims_algo(Dictionary<string, Dictionary<string, long>> graph_0) {
        long INF_1 = 2147483647;
        Dictionary<string, long> dist_2 = new Dictionary<string, long>{};
        Dictionary<string, string> parent_3 = new Dictionary<string, string>{};
        QueueNode[] queue_4 = new QueueNode[]{};
        foreach (var node_5 in graph_0.Keys) {
            dist_2[node_5] = INF_1;
            parent_3[node_5] = "";
            queue_4 = (Enumerable.ToArray(Enumerable.Append<QueueNode>(queue_4, new QueueNode{node = node_5, weight = INF_1})));
        };
        if ((queue_4.Length == 0)) {
            return new MSTResult{dist = dist_2, parent = parent_3};
        };
        long min_idx_6 = 0;
        long i_7 = 1;
        while ((i_7 < queue_4.Length)) {
            if ((queue_4[(int)(i_7)].weight < queue_4[(int)(min_idx_6)].weight)) {
                min_idx_6 = i_7;
            }
            i_7 = (i_7 + 1);
        };
        QueueNode start_node_8 = queue_4[(int)(min_idx_6)];
        string start_9 = start_node_8.node;
        QueueNode[] new_q_10 = new QueueNode[]{};
        long j_11 = 0;
        while ((j_11 < queue_4.Length)) {
            if ((j_11 != min_idx_6)) {
                new_q_10 = (Enumerable.ToArray(Enumerable.Append<QueueNode>(new_q_10, queue_4[(int)(j_11)])));
            }
            j_11 = (j_11 + 1);
        };
        queue_4 = new_q_10;
        dist_2[start_9] = 0;
        foreach (string neighbour_12 in (graph_0.ContainsKey(start_9) ? graph_0[start_9] : null).Keys) {
            long w_13 = ((graph_0.ContainsKey(start_9) ? graph_0[start_9] : null).ContainsKey(neighbour_12) ? (graph_0.ContainsKey(start_9) ? graph_0[start_9] : null)[neighbour_12] : 0);
            if (((dist_2.ContainsKey(neighbour_12) ? dist_2[neighbour_12] : 0) > ((dist_2.ContainsKey(start_9) ? dist_2[start_9] : 0) + w_13))) {
                dist_2[neighbour_12] = ((dist_2.ContainsKey(start_9) ? dist_2[start_9] : 0) + w_13);
                parent_3[neighbour_12] = start_9;
                long k_14 = 0;
                while ((k_14 < queue_4.Length)) {
                    if ((queue_4[(int)(k_14)].node == neighbour_12)) {
                        queue_4[(int)(k_14)].weight = (dist_2.ContainsKey(neighbour_12) ? dist_2[neighbour_12] : 0);
                        break;
                    }
                    k_14 = (k_14 + 1);
                }
            }
        };
        while ((queue_4.Length > 0)) {
            long best_idx_15 = 0;
            long p_16 = 1;
            while ((p_16 < queue_4.Length)) {
                if ((queue_4[(int)(p_16)].weight < queue_4[(int)(best_idx_15)].weight)) {
                    best_idx_15 = p_16;
                }
                p_16 = (p_16 + 1);
            }
            QueueNode node_entry_17 = queue_4[(int)(best_idx_15)];
            string node_18 = node_entry_17.node;
            QueueNode[] tmp_19 = new QueueNode[]{};
            long q_20 = 0;
            while ((q_20 < queue_4.Length)) {
                if ((q_20 != best_idx_15)) {
                    tmp_19 = (Enumerable.ToArray(Enumerable.Append<QueueNode>(tmp_19, queue_4[(int)(q_20)])));
                }
                q_20 = (q_20 + 1);
            }
            queue_4 = tmp_19;
            foreach (string neighbour_21 in (graph_0.ContainsKey(node_18) ? graph_0[node_18] : null).Keys) {
                long w_22 = ((graph_0.ContainsKey(node_18) ? graph_0[node_18] : null).ContainsKey(neighbour_21) ? (graph_0.ContainsKey(node_18) ? graph_0[node_18] : null)[neighbour_21] : 0);
                if (((dist_2.ContainsKey(neighbour_21) ? dist_2[neighbour_21] : 0) > ((dist_2.ContainsKey(node_18) ? dist_2[node_18] : 0) + w_22))) {
                    dist_2[neighbour_21] = ((dist_2.ContainsKey(node_18) ? dist_2[node_18] : 0) + w_22);
                    parent_3[neighbour_21] = node_18;
                    long r_23 = 0;
                    while ((r_23 < queue_4.Length)) {
                        if ((queue_4[(int)(r_23)].node == neighbour_21)) {
                            queue_4[(int)(r_23)].weight = (dist_2.ContainsKey(neighbour_21) ? dist_2[neighbour_21] : 0);
                            break;
                        }
                        r_23 = (r_23 + 1);
                    }
                }
            }
        };
        return new MSTResult{dist = dist_2, parent = parent_3};
    }

    public static long iabs(long x_24) {
        if ((x_24 < 0)) {
            return -x_24;
        };
        return x_24;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            graph_25["a"] = new Dictionary<string, long>{{"b", 3}, {"c", 15}};
            graph_25["b"] = new Dictionary<string, long>{{"a", 3}, {"c", 10}, {"d", 100}};
            graph_25["c"] = new Dictionary<string, long>{{"a", 15}, {"b", 10}, {"d", 5}};
            graph_25["d"] = new Dictionary<string, long>{{"b", 100}, {"c", 5}};
            MSTResult res_26 = Program.prims_algo(graph_25);
            Dictionary<string, long> dist_27 = res_26.dist;
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.iabs(((dist_27.ContainsKey("a") ? dist_27["a"] : 0) - (dist_27.ContainsKey("b") ? dist_27["b"] : 0))))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.iabs(((dist_27.ContainsKey("d") ? dist_27["d"] : 0) - (dist_27.ContainsKey("b") ? dist_27["b"] : 0))))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.iabs(((dist_27.ContainsKey("a") ? dist_27["a"] : 0) - (dist_27.ContainsKey("c") ? dist_27["c"] : 0))))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
