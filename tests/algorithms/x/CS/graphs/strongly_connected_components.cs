// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] topology_sort(long[][] graph_0, long vert_1, bool[] visited_2) {
        visited_2[(int)(vert_1)] = true;
        long[] order_3 = new long[]{};
        foreach (long neighbour_4 in _idx(graph_0, vert_1)) {
            if ((!_idx(visited_2, neighbour_4))) {
                order_3 = (Enumerable.ToArray(Enumerable.Concat(order_3, Program.topology_sort(graph_0, neighbour_4, visited_2))));
            }
        };
        order_3 = ((Func<long[]>)(() => { var _tmp = order_3.ToList(); _tmp.Add(vert_1); return _tmp.ToArray(); }))();
        return order_3;
    }

    public static long[] find_component(long[][] graph_5, long vert_6, bool[] visited_7) {
        visited_7[(int)(vert_6)] = true;
        long[] comp_8 = new long[]{vert_6};
        foreach (long neighbour_9 in _idx(graph_5, vert_6)) {
            if ((!_idx(visited_7, neighbour_9))) {
                comp_8 = (Enumerable.ToArray(Enumerable.Concat(comp_8, Program.find_component(graph_5, neighbour_9, visited_7))));
            }
        };
        return comp_8;
    }

    public static long[][] strongly_connected_components(long[][] graph_10) {
        long n_11 = graph_10.Length;
        bool[] visited_12 = new bool[]{};
        for (var __13 = 0; __13 < n_11; __13++) {
            visited_12 = ((Func<bool[]>)(() => { var _tmp = visited_12.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
        };
        long[][] reversed_14 = new long[][]{};
        for (var __15 = 0; __15 < n_11; __15++) {
            reversed_14 = ((Func<long[][]>)(() => { var _tmp = reversed_14.ToList(); _tmp.Add(new long[]{}); return _tmp.ToArray(); }))();
        };
        for (var i_16 = 0; i_16 < n_11; i_16++) {
            foreach (long neighbour_17 in _idx(graph_10, i_16)) {
                reversed_14[(int)(neighbour_17)] = ((Func<long[]>)(() => { var _tmp = _idx(reversed_14, neighbour_17).ToList(); _tmp.Add(i_16); return _tmp.ToArray(); }))();
            }
        };
        long[] order_18 = new long[]{};
        for (var i_19 = 0; i_19 < n_11; i_19++) {
            if ((!_idx(visited_12, i_19))) {
                order_18 = (Enumerable.ToArray(Enumerable.Concat(order_18, Program.topology_sort(graph_10, i_19, visited_12))));
            }
        };
        visited_12 = new bool[]{};
        for (var __20 = 0; __20 < n_11; __20++) {
            visited_12 = ((Func<bool[]>)(() => { var _tmp = visited_12.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
        };
        long[][] components_21 = new long[][]{};
        long i_22 = 0;
        while ((i_22 < n_11)) {
            long v_23 = _idx(order_18, ((n_11 - i_22) - 1));
            if ((!_idx(visited_12, v_23))) {
                long[] comp_24 = Program.find_component(reversed_14, v_23, visited_12);
                components_21 = ((Func<long[][]>)(() => { var _tmp = components_21.ToList(); _tmp.Add(comp_24); return _tmp.ToArray(); }))();
            }
            i_22 = (i_22 + 1);
        };
        return components_21;
    }

    public static void main() {
        long[][] test_graph_1_25 = new long[][]{new long[]{2, 3}, new long[]{0}, new long[]{1}, new long[]{4}, new long[]{}};
        long[][] test_graph_2_26 = new long[][]{new long[]{1, 2, 3}, new long[]{2}, new long[]{0}, new long[]{4}, new long[]{5}, new long[]{3}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.strongly_connected_components(test_graph_1_25))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.strongly_connected_components(test_graph_2_26))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
