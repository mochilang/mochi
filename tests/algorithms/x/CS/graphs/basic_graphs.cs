// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<long, long[]> g_dfs_101 = new Dictionary<long, long[]>{{1, new long[]{2, 3}}, {2, new long[]{4, 5}}, {3, new long[]{}}, {4, new long[]{}}, {5, new long[]{}}};
    static Dictionary<long, long[]> g_bfs_102 = new Dictionary<long, long[]>{{1, new long[]{2, 3}}, {2, new long[]{4, 5}}, {3, new long[]{6, 7}}, {4, new long[]{}}, {5, new long[]{8}}, {6, new long[]{}}, {7, new long[]{}}, {8, new long[]{}}};
    static Dictionary<long, long[][]> g_weighted_103 = new Dictionary<long, long[][]>{{1, new long[][]{new long[]{2, 7}, new long[]{3, 9}, new long[]{6, 14}}}, {2, new long[][]{new long[]{1, 7}, new long[]{3, 10}, new long[]{4, 15}}}, {3, new long[][]{new long[]{1, 9}, new long[]{2, 10}, new long[]{4, 11}, new long[]{6, 2}}}, {4, new long[][]{new long[]{2, 15}, new long[]{3, 11}, new long[]{5, 6}}}, {5, new long[][]{new long[]{4, 6}, new long[]{6, 9}}}, {6, new long[][]{new long[]{1, 14}, new long[]{3, 2}, new long[]{5, 9}}}};
    static Dictionary<long, long[]> g_topo_104 = new Dictionary<long, long[]>{{1, new long[]{2, 3}}, {2, new long[]{4}}, {3, new long[]{4}}, {4, new long[]{}}};
    static long[][] matrix_105 = new long[][]{new long[]{0, 5, 9, 100000}, new long[]{100000, 0, 2, 8}, new long[]{100000, 100000, 0, 7}, new long[]{4, 100000, 100000, 0}};
    static Dictionary<long, long[][]> g_prim_106 = new Dictionary<long, long[][]>{{1, new long[][]{new long[]{2, 1}, new long[]{3, 3}}}, {2, new long[][]{new long[]{1, 1}, new long[]{3, 1}, new long[]{4, 6}}}, {3, new long[][]{new long[]{1, 3}, new long[]{2, 1}, new long[]{4, 2}}}, {4, new long[][]{new long[]{2, 6}, new long[]{3, 2}}}};
    static long[][] edges_kruskal_107 = new long[][]{new long[]{1, 2, 1}, new long[]{2, 3, 2}, new long[]{1, 3, 2}, new long[]{3, 4, 1}};
    static Dictionary<long, long[]> g_iso_108 = new Dictionary<long, long[]>{{1, new long[]{2, 3}}, {2, new long[]{1, 3}}, {3, new long[]{1, 2}}, {4, new long[]{}}};
    public static void dfs(Dictionary<long, long[]> g_0, long s_1) {
        Dictionary<long, bool> visited_2 = new Dictionary<long, bool>{};
        long[] stack_3 = new long[]{};
        visited_2[s_1] = true;
        stack_3 = ((Func<long[]>)(() => { var _tmp = stack_3.ToList(); _tmp.Add(s_1); return _tmp.ToArray(); }))();
        Console.WriteLine(Program._fmtTop(s_1));
        while ((stack_3.Length > 0)) {
            long u_4 = _idx(stack_3, (stack_3.Length - 1));
            bool found_5 = false;
            foreach (long v_6 in (g_0.ContainsKey(u_4) ? g_0[u_4] : null)) {
                if ((!(visited_2.ContainsKey(v_6)))) {
                    visited_2[v_6] = true;
                    stack_3 = ((Func<long[]>)(() => { var _tmp = stack_3.ToList(); _tmp.Add(v_6); return _tmp.ToArray(); }))();
                    Console.WriteLine(Program._fmtTop(v_6));
                    found_5 = true;
                    break;
                }
            }
            if ((!found_5)) {
                stack_3 = _slice<long>(stack_3, 0, (stack_3.Length - 1));
            }
        };
    }

    public static void bfs(Dictionary<long, long[]> g_7, long s_8) {
        Dictionary<long, bool> visited_9 = new Dictionary<long, bool>{};
        long[] q_10 = new long[]{};
        visited_9[s_8] = true;
        q_10 = ((Func<long[]>)(() => { var _tmp = q_10.ToList(); _tmp.Add(s_8); return _tmp.ToArray(); }))();
        Console.WriteLine(Program._fmtTop(s_8));
        while ((q_10.Length > 0)) {
            long u_11 = _idx(q_10, 0);
            q_10 = _slice<long>(q_10, 1, q_10.Length);
            foreach (long v_12 in (g_7.ContainsKey(u_11) ? g_7[u_11] : null)) {
                if ((!(visited_9.ContainsKey(v_12)))) {
                    visited_9[v_12] = true;
                    q_10 = ((Func<long[]>)(() => { var _tmp = q_10.ToList(); _tmp.Add(v_12); return _tmp.ToArray(); }))();
                    Console.WriteLine(Program._fmtTop(v_12));
                }
            }
        };
    }

    public static long[] sort_ints(long[] a_13) {
        long[] arr_14 = a_13;
        long i_15 = 0;
        while ((i_15 < arr_14.Length)) {
            long j_16 = 0;
            while ((j_16 < ((arr_14.Length - i_15) - 1))) {
                if ((_idx(arr_14, j_16) > _idx(arr_14, (j_16 + 1)))) {
                    long tmp_17 = _idx(arr_14, j_16);
                    arr_14[(int)(j_16)] = _idx(arr_14, (j_16 + 1));
                    arr_14[(int)((j_16 + 1))] = tmp_17;
                }
                j_16 = (j_16 + 1);
            }
            i_15 = (i_15 + 1);
        };
        return arr_14;
    }

    public static void dijkstra(Dictionary<long, long[][]> g_18, long s_19) {
        Dictionary<long, long> dist_20 = new Dictionary<long, long>{};
        dist_20[s_19] = 0;
        Dictionary<long, long> path_21 = new Dictionary<long, long>{};
        path_21[s_19] = 0;
        long[] known_22 = new long[]{};
        long[] keys_23 = new long[]{s_19};
        while ((known_22.Length < keys_23.Length)) {
            long mini_24 = 100000;
            long u_25 = -1;
            long i_26 = 0;
            while ((i_26 < keys_23.Length)) {
                long k_27 = _idx(keys_23, i_26);
                long d_28 = (dist_20.ContainsKey(k_27) ? dist_20[k_27] : 0);
                if (((!(Array.IndexOf(known_22, k_27) >= 0)) && (d_28 < mini_24))) {
                    mini_24 = d_28;
                    u_25 = k_27;
                }
                i_26 = (i_26 + 1);
            }
            known_22 = ((Func<long[]>)(() => { var _tmp = known_22.ToList(); _tmp.Add(u_25); return _tmp.ToArray(); }))();
            foreach (long[] e_29 in (g_18.ContainsKey(u_25) ? g_18[u_25] : null)) {
                long v_30 = _idx(e_29, 0);
                long w_31 = _idx(e_29, 1);
                if ((!(Array.IndexOf(keys_23, v_30) >= 0))) {
                    keys_23 = ((Func<long[]>)(() => { var _tmp = keys_23.ToList(); _tmp.Add(v_30); return _tmp.ToArray(); }))();
                }
                long alt_32 = ((dist_20.ContainsKey(u_25) ? dist_20[u_25] : 0) + w_31);
                long cur_33 = ((dist_20.ContainsKey(v_30)) ? (dist_20.ContainsKey(v_30) ? dist_20[v_30] : 0) : 100000);
                if (((!(Array.IndexOf(known_22, v_30) >= 0)) && (alt_32 < cur_33))) {
                    dist_20[v_30] = alt_32;
                    path_21[v_30] = u_25;
                }
            }
        };
        long[] ordered_34 = Program.sort_ints(keys_23);
        long idx_35 = 0;
        while ((idx_35 < ordered_34.Length)) {
            long k_36 = _idx(ordered_34, idx_35);
            if ((k_36 != s_19)) {
                Console.WriteLine(Program._fmtTop((dist_20.ContainsKey(k_36) ? dist_20[k_36] : 0)));
            }
            idx_35 = (idx_35 + 1);
        };
    }

    public static void topo(Dictionary<long, long[]> g_37, long n_38) {
        long[] ind_39 = new long[]{};
        long i_40 = 0;
        while ((i_40 <= n_38)) {
            ind_39 = ((Func<long[]>)(() => { var _tmp = ind_39.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_40 = (i_40 + 1);
        };
        long node_41 = 1;
        while ((node_41 <= n_38)) {
            foreach (long v_42 in (g_37.ContainsKey(node_41) ? g_37[node_41] : null)) {
                ind_39[(int)(v_42)] = (_idx(ind_39, v_42) + 1);
            }
            node_41 = (node_41 + 1);
        };
        long[] q_43 = new long[]{};
        long j_44 = 1;
        while ((j_44 <= n_38)) {
            if ((_idx(ind_39, j_44) == 0)) {
                q_43 = ((Func<long[]>)(() => { var _tmp = q_43.ToList(); _tmp.Add(j_44); return _tmp.ToArray(); }))();
            }
            j_44 = (j_44 + 1);
        };
        while ((q_43.Length > 0)) {
            long v_45 = _idx(q_43, 0);
            q_43 = _slice<long>(q_43, 1, q_43.Length);
            Console.WriteLine(Program._fmtTop(v_45));
            foreach (long w_46 in (g_37.ContainsKey(v_45) ? g_37[v_45] : null)) {
                ind_39[(int)(w_46)] = (_idx(ind_39, w_46) - 1);
                if ((_idx(ind_39, w_46) == 0)) {
                    q_43 = ((Func<long[]>)(() => { var _tmp = q_43.ToList(); _tmp.Add(w_46); return _tmp.ToArray(); }))();
                }
            }
        };
    }

    public static void floyd(long[][] a_47) {
        long n_48 = a_47.Length;
        long[][] dist_49 = new long[][]{};
        long i_50 = 0;
        while ((i_50 < n_48)) {
            long[] row_51 = new long[]{};
            long j_52 = 0;
            while ((j_52 < n_48)) {
                row_51 = ((Func<long[]>)(() => { var _tmp = row_51.ToList(); _tmp.Add(_idx(_idx(a_47, i_50), j_52)); return _tmp.ToArray(); }))();
                j_52 = (j_52 + 1);
            }
            dist_49 = ((Func<long[][]>)(() => { var _tmp = dist_49.ToList(); _tmp.Add(row_51); return _tmp.ToArray(); }))();
            i_50 = (i_50 + 1);
        };
        long k_53 = 0;
        while ((k_53 < n_48)) {
            long ii_54 = 0;
            while ((ii_54 < n_48)) {
                long jj_55 = 0;
                while ((jj_55 < n_48)) {
                    if ((_idx(_idx(dist_49, ii_54), jj_55) > (_idx(_idx(dist_49, ii_54), k_53) + _idx(_idx(dist_49, k_53), jj_55)))) {
                        _idx(dist_49, ii_54)[(int)(jj_55)] = (_idx(_idx(dist_49, ii_54), k_53) + _idx(_idx(dist_49, k_53), jj_55));
                    }
                    jj_55 = (jj_55 + 1);
                }
                ii_54 = (ii_54 + 1);
            }
            k_53 = (k_53 + 1);
        };
        Console.WriteLine(Program._fmtTop(dist_49));
    }

    public static long prim(Dictionary<long, long[][]> g_56, long s_57, long n_58) {
        Dictionary<long, long> dist_59 = new Dictionary<long, long>{};
        dist_59[s_57] = 0;
        long[] known_60 = new long[]{};
        long[] keys_61 = new long[]{s_57};
        long total_62 = 0;
        while ((known_60.Length < n_58)) {
            long mini_63 = 100000;
            long u_64 = -1;
            long i_65 = 0;
            while ((i_65 < keys_61.Length)) {
                long k_66 = _idx(keys_61, i_65);
                long d_67 = (dist_59.ContainsKey(k_66) ? dist_59[k_66] : 0);
                if (((!(Array.IndexOf(known_60, k_66) >= 0)) && (d_67 < mini_63))) {
                    mini_63 = d_67;
                    u_64 = k_66;
                }
                i_65 = (i_65 + 1);
            }
            known_60 = ((Func<long[]>)(() => { var _tmp = known_60.ToList(); _tmp.Add(u_64); return _tmp.ToArray(); }))();
            total_62 = (total_62 + mini_63);
            foreach (long[] e_68 in (g_56.ContainsKey(u_64) ? g_56[u_64] : null)) {
                long v_69 = _idx(e_68, 0);
                long w_70 = _idx(e_68, 1);
                if ((!(Array.IndexOf(keys_61, v_69) >= 0))) {
                    keys_61 = ((Func<long[]>)(() => { var _tmp = keys_61.ToList(); _tmp.Add(v_69); return _tmp.ToArray(); }))();
                }
                long cur_71 = ((dist_59.ContainsKey(v_69)) ? (dist_59.ContainsKey(v_69) ? dist_59[v_69] : 0) : 100000);
                if (((!(Array.IndexOf(known_60, v_69) >= 0)) && (w_70 < cur_71))) {
                    dist_59[v_69] = w_70;
                }
            }
        };
        return total_62;
    }

    public static long[][] sort_edges(long[][] edges_72) {
        long[][] es_73 = edges_72;
        long i_74 = 0;
        while ((i_74 < es_73.Length)) {
            long j_75 = 0;
            while ((j_75 < ((es_73.Length - i_74) - 1))) {
                if ((_idx(_idx(es_73, j_75), 2) > _idx(_idx(es_73, (j_75 + 1)), 2))) {
                    long[] tmp_76 = _idx(es_73, j_75);
                    es_73[(int)(j_75)] = _idx(es_73, (j_75 + 1));
                    es_73[(int)((j_75 + 1))] = tmp_76;
                }
                j_75 = (j_75 + 1);
            }
            i_74 = (i_74 + 1);
        };
        return es_73;
    }

    public static long find_parent(long[] parent_77, long x_78) {
        long r_79 = x_78;
        while ((_idx(parent_77, r_79) != r_79)) {
            r_79 = _idx(parent_77, r_79);
        };
        return r_79;
    }

    public static void union_parent(long[] parent_80, long a_81, long b_82) {
        parent_80[(int)(a_81)] = b_82;
    }

    public static long kruskal(long[][] edges_83, long n_84) {
        long[][] es_85 = Program.sort_edges(edges_83);
        long[] parent_86 = new long[]{};
        long i_87 = 0;
        while ((i_87 <= n_84)) {
            parent_86 = ((Func<long[]>)(() => { var _tmp = parent_86.ToList(); _tmp.Add(i_87); return _tmp.ToArray(); }))();
            i_87 = (i_87 + 1);
        };
        long total_88 = 0;
        long count_89 = 0;
        long idx_90 = 0;
        while (((count_89 < (n_84 - 1)) && (idx_90 < es_85.Length))) {
            long[] e_91 = _idx(es_85, idx_90);
            idx_90 = (idx_90 + 1);
            long u_92 = _idx(e_91, 0);
            long v_93 = _idx(e_91, 1);
            long w_94 = _idx(e_91, 2);
            long ru_95 = Program.find_parent(parent_86, u_92);
            long rv_96 = Program.find_parent(parent_86, v_93);
            if ((ru_95 != rv_96)) {
                Program.union_parent(parent_86, ru_95, rv_96);
                total_88 = (total_88 + w_94);
                count_89 = (count_89 + 1);
            }
        };
        return total_88;
    }

    public static long[] find_isolated_nodes(Dictionary<long, long[]> g_97, long[] nodes_98) {
        long[] isolated_99 = new long[]{};
        foreach (long node_100 in nodes_98) {
            if (((g_97.ContainsKey(node_100) ? g_97[node_100] : null).Length == 0)) {
                isolated_99 = ((Func<long[]>)(() => { var _tmp = isolated_99.ToList(); _tmp.Add(node_100); return _tmp.ToArray(); }))();
            }
        };
        return isolated_99;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.dfs(g_dfs_101, 1);
            Program.bfs(g_bfs_102, 1);
            Program.dijkstra(g_weighted_103, 1);
            Program.topo(g_topo_104, 4);
            Program.floyd(matrix_105);
            Console.WriteLine(Program._fmtTop(Program.prim(g_prim_106, 1, 4)));
            Console.WriteLine(Program._fmtTop(Program.kruskal(edges_kruskal_107, 4)));
            long[] iso_109 = Program.find_isolated_nodes(g_iso_108, new long[]{1, 2, 3, 4});
            Console.WriteLine(Program._fmtTop(iso_109));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
