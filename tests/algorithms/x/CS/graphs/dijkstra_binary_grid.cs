// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Point {
    public long x;
    public long y;
    public override string ToString() => $"Point {{x = {x}, y = {y}}}";
}
class Result {
    public double distance;
    public Point[] path;
    public override string ToString() => $"Result {{distance = {distance.ToString("0.0")}, path = {path}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] grid1_31 = new long[][]{new long[]{1, 1, 1}, new long[]{0, 1, 0}, new long[]{0, 1, 1}};
    public static string key(Point p_0) {
        return ((_fmtStr(p_0.x) + ",") + _fmtStr(p_0.y));
    }

    public static string path_to_string(Point[] path_1) {
        string s_2 = "[";
        long i_3 = 0;
        while ((i_3 < path_1.Length)) {
            Point pt_4 = _idx(path_1, i_3);
            s_2 = (((((s_2 + "(") + _fmtStr(pt_4.x)) + ", ") + _fmtStr(pt_4.y)) + ")");
            if ((i_3 < (path_1.Length - 1))) {
                s_2 = (s_2 + ", ");
            }
            i_3 = (i_3 + 1);
        };
        s_2 = (s_2 + "]");
        return s_2;
    }

    public static Result dijkstra(long[][] grid_5, Point source_6, Point destination_7, bool allow_diagonal_8) {
        long rows_9 = grid_5.Length;
        long cols_10 = _idx(grid_5, 0).Length;
        long[] dx_11 = new long[]{-1, 1, 0, 0};
        long[] dy_12 = new long[]{0, 0, -1, 1};
        if (allow_diagonal_8) {
            dx_11 = (Enumerable.ToArray(Enumerable.Concat(dx_11, new long[]{-1, -1, 1, 1})));
            dy_12 = (Enumerable.ToArray(Enumerable.Concat(dy_12, new long[]{-1, 1, -1, 1})));
        };
        double INF_13 = 1000000000000.0;
        Point[] queue_14 = new Point[]{source_6};
        long front_15 = 0;
        Dictionary<string, double> dist_map_16 = new Dictionary<string, double>{{Program.key(source_6), 0.0}};
        Dictionary<string, Point> prev_17 = new Dictionary<string, Point>{};
        while ((front_15 < queue_14.Length)) {
            Point current_18 = _idx(queue_14, front_15);
            front_15 = (front_15 + 1);
            string cur_key_19 = Program.key(current_18);
            if (((current_18.x == destination_7.x) && (current_18.y == destination_7.y))) {
                break;
            }
            long i_20 = 0;
            while ((i_20 < dx_11.Length)) {
                long nx_21 = (current_18.x + _idx(dx_11, i_20));
                long ny_22 = (current_18.y + _idx(dy_12, i_20));
                if (((((nx_21 >= 0) && (nx_21 < rows_9)) && (ny_22 >= 0)) && (ny_22 < cols_10))) {
                    if ((_idx(_idx(grid_5, nx_21), ny_22) == 1)) {
                        string n_key_23 = ((_fmtStr(nx_21) + ",") + _fmtStr(ny_22));
                        if ((!(dist_map_16.ContainsKey(n_key_23)))) {
                            dist_map_16[n_key_23] = ((dist_map_16.ContainsKey(cur_key_19) ? dist_map_16[cur_key_19] : 0.0) + 1.0);
                            prev_17[n_key_23] = current_18;
                            queue_14 = ((Func<Point[]>)(() => { var _tmp = queue_14.ToList(); _tmp.Add(new Point{x = nx_21, y = ny_22}); return _tmp.ToArray(); }))();
                        }
                    }
                }
                i_20 = (i_20 + 1);
            }
        };
        string dest_key_24 = Program.key(destination_7);
        if ((dist_map_16.ContainsKey(dest_key_24))) {
            Point[] path_rev_25 = new Point[]{destination_7};
            string step_key_26 = dest_key_24;
            Point step_pt_27 = destination_7;
            while ((step_key_26 != Program.key(source_6))) {
                step_pt_27 = (prev_17.ContainsKey(step_key_26) ? prev_17[step_key_26] : null);
                step_key_26 = Program.key(step_pt_27);
                path_rev_25 = ((Func<Point[]>)(() => { var _tmp = path_rev_25.ToList(); _tmp.Add(step_pt_27); return _tmp.ToArray(); }))();
            }
            Point[] path_28 = new Point[]{};
            long k_29 = (path_rev_25.Length - 1);
            while ((k_29 >= 0)) {
                path_28 = ((Func<Point[]>)(() => { var _tmp = path_28.ToList(); _tmp.Add(_idx(path_rev_25, k_29)); return _tmp.ToArray(); }))();
                k_29 = (k_29 - 1);
            }
            return new Result{distance = (dist_map_16.ContainsKey(dest_key_24) ? dist_map_16[dest_key_24] : 0.0), path = path_28};
        };
        return new Result{distance = INF_13, path = new Point[]{}};
    }

    public static void print_result(Result res_30) {
        Console.WriteLine(Program._fmtTop(((_fmtStr(res_30.distance) + ", ") + Program.path_to_string(res_30.path))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_result(Program.dijkstra(grid1_31, new Point{x = 0, y = 0}, new Point{x = 2, y = 2}, false));
            Program.print_result(Program.dijkstra(grid1_31, new Point{x = 0, y = 0}, new Point{x = 2, y = 2}, true));
            long[][] grid2_32 = new long[][]{new long[]{1, 1, 1}, new long[]{0, 0, 1}, new long[]{0, 1, 1}};
            Program.print_result(Program.dijkstra(grid2_32, new Point{x = 0, y = 0}, new Point{x = 2, y = 2}, false));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
