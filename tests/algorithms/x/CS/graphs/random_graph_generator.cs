// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 1;
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return seed_0;
    }

    public static double random() {
        return ((1.0 * Program.rand()) / 2.147483648e+09);
    }

    public static Dictionary<long, long[]> complete_graph(long vertices_number_1) {
        Dictionary<long, long[]> graph_2 = new Dictionary<long, long[]>{};
        long i_3 = 0;
        while ((i_3 < vertices_number_1)) {
            long[] neighbors_4 = new long[]{};
            long j_5 = 0;
            while ((j_5 < vertices_number_1)) {
                if ((j_5 != i_3)) {
                    neighbors_4 = (Enumerable.ToArray(Enumerable.Append<long>(neighbors_4, j_5)));
                }
                j_5 = (j_5 + 1);
            }
            graph_2[i_3] = neighbors_4;
            i_3 = (i_3 + 1);
        };
        return graph_2;
    }

    public static Dictionary<long, long[]> random_graph(long vertices_number_6, double probability_7, bool directed_8) {
        Dictionary<long, long[]> graph_9 = new Dictionary<long, long[]>{};
        long i_10 = 0;
        while ((i_10 < vertices_number_6)) {
            graph_9[i_10] = new long[]{};
            i_10 = (i_10 + 1);
        };
        if ((probability_7 >= 1.0)) {
            return Program.complete_graph(vertices_number_6);
        };
        if ((probability_7 <= 0.0)) {
            return graph_9;
        };
        i_10 = 0;
        while ((i_10 < vertices_number_6)) {
            long j_11 = (i_10 + 1);
            while ((j_11 < vertices_number_6)) {
                if ((Program.random() < probability_7)) {
                    graph_9[i_10] = (Enumerable.ToArray(Enumerable.Append<long>((graph_9.ContainsKey(i_10) ? graph_9[i_10] : null), j_11)));
                    if ((!directed_8)) {
                        graph_9[j_11] = (Enumerable.ToArray(Enumerable.Append<long>((graph_9.ContainsKey(j_11) ? graph_9[j_11] : null), i_10)));
                    }
                }
                j_11 = (j_11 + 1);
            }
            i_10 = (i_10 + 1);
        };
        return graph_9;
    }

    public static void main() {
        seed_0 = 1;
        Dictionary<long, long[]> g1_12 = Program.random_graph(4, 0.5, false);
        Console.WriteLine(Program._fmtTop(g1_12));
        seed_0 = 1;
        Dictionary<long, long[]> g2_13 = Program.random_graph(4, 0.5, true);
        Console.WriteLine(Program._fmtTop(g2_13));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
