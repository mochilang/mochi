// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long INF_0 = 1000000000;
    public static Dictionary<long, long[][]> connect(Dictionary<long, long[][]> graph_1, long a_2, long b_3, long w_4) {
        long u_5 = (a_2 - 1);
        long v_6 = (b_3 - 1);
        Dictionary<long, long[][]> g_7 = graph_1;
        g_7[u_5] = (Enumerable.ToArray(Enumerable.Append<long[]>((g_7.ContainsKey(u_5) ? g_7[u_5] : null), new long[]{v_6, w_4})));
        g_7[v_6] = (Enumerable.ToArray(Enumerable.Append<long[]>((g_7.ContainsKey(v_6) ? g_7[v_6] : null), new long[]{u_5, w_4})));
        return g_7;
    }

    public static bool in_list(long[] arr_8, long x_9) {
        long i_10 = 0;
        while ((i_10 < arr_8.Length)) {
            if ((arr_8[(int)(i_10)] == x_9)) {
                return true;
            }
            i_10 = (i_10 + 1);
        };
        return false;
    }

    public static long[][] prim(Dictionary<long, long[][]> graph_11, long s_12, long n_13) {
        Dictionary<long, long> dist_14 = new Dictionary<long, long>{};
        Dictionary<long, long> parent_15 = new Dictionary<long, long>{};
        dist_14[s_12] = 0;
        parent_15[s_12] = -1;
        long[] known_16 = new long[]{};
        long[] keys_17 = new long[]{s_12};
        while ((known_16.Length < n_13)) {
            long mini_18 = INF_0;
            long u_19 = -1;
            long i_20 = 0;
            while ((i_20 < keys_17.Length)) {
                long k_21 = keys_17[(int)(i_20)];
                long d_22 = (dist_14.ContainsKey(k_21) ? dist_14[k_21] : 0);
                if (((!Program.in_list(known_16, k_21)) && (d_22 < mini_18))) {
                    mini_18 = d_22;
                    u_19 = k_21;
                }
                i_20 = (i_20 + 1);
            }
            known_16 = (Enumerable.ToArray(Enumerable.Append<long>(known_16, u_19)));
            foreach (long[] e_23 in (graph_11.ContainsKey(u_19) ? graph_11[u_19] : null)) {
                long v_24 = e_23[(int)(0)];
                long w_25 = e_23[(int)(1)];
                if ((!Program.in_list(keys_17, v_24))) {
                    keys_17 = (Enumerable.ToArray(Enumerable.Append<long>(keys_17, v_24)));
                }
                long cur_26 = ((dist_14.ContainsKey(v_24)) ? (dist_14.ContainsKey(v_24) ? dist_14[v_24] : 0) : INF_0);
                if (((!Program.in_list(known_16, v_24)) && (w_25 < cur_26))) {
                    dist_14[v_24] = w_25;
                    parent_15[v_24] = u_19;
                }
            }
        };
        long[][] edges_27 = new long[][]{};
        long j_28 = 0;
        while ((j_28 < keys_17.Length)) {
            long v_29 = keys_17[(int)(j_28)];
            if ((v_29 != s_12)) {
                edges_27 = (Enumerable.ToArray(Enumerable.Append<long[]>(edges_27, new long[]{(v_29 + 1), ((parent_15.ContainsKey(v_29) ? parent_15[v_29] : 0) + 1)})));
            }
            j_28 = (j_28 + 1);
        };
        return edges_27;
    }

    public static long[] sort_heap(long[] h_30, Dictionary<long, long> dist_31) {
        long[] a_32 = h_30;
        long i_33 = 0;
        while ((i_33 < a_32.Length)) {
            long j_34 = 0;
            while ((j_34 < ((a_32.Length - i_33) - 1))) {
                long dj_35 = ((dist_31.ContainsKey(a_32[(int)(j_34)])) ? (dist_31.ContainsKey(a_32[(int)(j_34)]) ? dist_31[a_32[(int)(j_34)]] : 0) : INF_0);
                long dj1_36 = ((dist_31.ContainsKey(a_32[(int)((j_34 + 1))])) ? (dist_31.ContainsKey(a_32[(int)((j_34 + 1))]) ? dist_31[a_32[(int)((j_34 + 1))]] : 0) : INF_0);
                if ((dj_35 > dj1_36)) {
                    long t_37 = a_32[(int)(j_34)];
                    a_32[j_34] = a_32[(int)((j_34 + 1))];
                    a_32[(j_34 + 1)] = t_37;
                }
                j_34 = (j_34 + 1);
            }
            i_33 = (i_33 + 1);
        };
        return a_32;
    }

    public static long[][] prim_heap(Dictionary<long, long[][]> graph_38, long s_39, long n_40) {
        Dictionary<long, long> dist_41 = new Dictionary<long, long>{};
        Dictionary<long, long> parent_42 = new Dictionary<long, long>{};
        dist_41[s_39] = 0;
        parent_42[s_39] = -1;
        long[] h_43 = new long[]{};
        long i_44 = 0;
        while ((i_44 < n_40)) {
            h_43 = (Enumerable.ToArray(Enumerable.Append<long>(h_43, i_44)));
            i_44 = (i_44 + 1);
        };
        h_43 = Program.sort_heap(h_43, dist_41);
        long[] known_45 = new long[]{};
        while ((h_43.Length > 0)) {
            long u_46 = h_43[(int)(0)];
            h_43 = h_43.Skip((int)(1)).Take((int)((h_43.Length - 1))).ToArray();
            known_45 = (Enumerable.ToArray(Enumerable.Append<long>(known_45, u_46)));
            foreach (long[] e_47 in (graph_38.ContainsKey(u_46) ? graph_38[u_46] : null)) {
                long v_48 = e_47[(int)(0)];
                long w_49 = e_47[(int)(1)];
                long cur_50 = ((dist_41.ContainsKey(v_48)) ? (dist_41.ContainsKey(v_48) ? dist_41[v_48] : 0) : INF_0);
                if (((!Program.in_list(known_45, v_48)) && (w_49 < cur_50))) {
                    dist_41[v_48] = w_49;
                    parent_42[v_48] = u_46;
                }
            }
            h_43 = Program.sort_heap(h_43, dist_41);
        };
        long[][] edges_51 = new long[][]{};
        long j_52 = 0;
        while ((j_52 < n_40)) {
            if ((j_52 != s_39)) {
                edges_51 = (Enumerable.ToArray(Enumerable.Append<long[]>(edges_51, new long[]{(j_52 + 1), ((parent_42.ContainsKey(j_52) ? parent_42[j_52] : 0) + 1)})));
            }
            j_52 = (j_52 + 1);
        };
        return edges_51;
    }

    public static void print_edges(long[][] edges_53) {
        long i_54 = 0;
        while ((i_54 < edges_53.Length)) {
            long[] e_55 = edges_53[(int)(i_54)];
            Console.WriteLine(Program._fmtTop((((("(" + _fmtStr(e_55[(int)(0)])) + ", ") + _fmtStr(e_55[(int)(1)])) + ")")));
            i_54 = (i_54 + 1);
        };
    }

    public static void test_vector() {
        long x_56 = 5;
        Dictionary<long, long[][]> G_57 = new Dictionary<long, long[][]>{};
        long i_58 = 0;
        while ((i_58 < x_56)) {
            G_57[i_58] = new long[][]{};
            i_58 = (i_58 + 1);
        };
        G_57 = Program.connect(G_57, 1, 2, 15);
        G_57 = Program.connect(G_57, 1, 3, 12);
        G_57 = Program.connect(G_57, 2, 4, 13);
        G_57 = Program.connect(G_57, 2, 5, 5);
        G_57 = Program.connect(G_57, 3, 2, 6);
        G_57 = Program.connect(G_57, 3, 4, 6);
        long[][] mst_59 = Program.prim(G_57, 0, x_56);
        Program.print_edges(mst_59);
        long[][] mst_heap_60 = Program.prim_heap(G_57, 0, x_56);
        Program.print_edges(mst_heap_60);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.test_vector();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
