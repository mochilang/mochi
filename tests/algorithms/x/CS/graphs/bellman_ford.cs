// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Edge {
    public long src;
    public long dst;
    public long weight;
    public override string ToString() => $"Edge {{src = {src}, dst = {dst}, weight = {weight}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double INF_0 = 1000000000.0;
    static Edge[] edges_24 = new Edge[]{new Edge{src = 2, dst = 1, weight = -10}, new Edge{src = 3, dst = 2, weight = 3}, new Edge{src = 0, dst = 3, weight = 5}, new Edge{src = 0, dst = 1, weight = 4}};
    static double[] distances_25 = Program.bellman_ford(edges_24, 4, edges_24.Length, 0);
    public static string list_to_string(double[] arr_1) {
        string s_2 = "[";
        long i_3 = 0;
        while ((i_3 < arr_1.Length)) {
            s_2 = (s_2 + _fmtStr(_idx(arr_1, i_3)));
            if ((i_3 < (arr_1.Length - 1))) {
                s_2 = (s_2 + ", ");
            }
            i_3 = (i_3 + 1);
        };
        return (s_2 + "]");
    }

    public static bool check_negative_cycle(Edge[] graph_4, double[] distance_5, long edge_count_6) {
        long j_7 = 0;
        while ((j_7 < edge_count_6)) {
            Edge e_8 = _idx(graph_4, j_7);
            long u_9 = e_8.src;
            long v_10 = e_8.dst;
            double w_11 = Convert.ToDouble(e_8.weight);
            if (((_idx(distance_5, u_9) < INF_0) && ((_idx(distance_5, u_9) + w_11) < _idx(distance_5, v_10)))) {
                return true;
            }
            j_7 = (j_7 + 1);
        };
        return false;
    }

    public static double[] bellman_ford(Edge[] graph_12, long vertex_count_13, long edge_count_14, long src_15) {
        double[] distance_16 = new double[]{};
        long i_17 = 0;
        while ((i_17 < vertex_count_13)) {
            distance_16 = ((Func<double[]>)(() => { var _tmp = distance_16.ToList(); _tmp.Add(INF_0); return _tmp.ToArray(); }))();
            i_17 = (i_17 + 1);
        };
        distance_16[(int)(src_15)] = 0.0;
        long k_18 = 0;
        while ((k_18 < (vertex_count_13 - 1))) {
            long j_19 = 0;
            while ((j_19 < edge_count_14)) {
                Edge e_20 = _idx(graph_12, j_19);
                long u_21 = e_20.src;
                long v_22 = e_20.dst;
                double w_23 = Convert.ToDouble(e_20.weight);
                if (((_idx(distance_16, u_21) < INF_0) && ((_idx(distance_16, u_21) + w_23) < _idx(distance_16, v_22)))) {
                    distance_16[(int)(v_22)] = (_idx(distance_16, u_21) + w_23);
                }
                j_19 = (j_19 + 1);
            }
            k_18 = (k_18 + 1);
        };
        if (Program.check_negative_cycle(graph_12, distance_16, edge_count_14)) {
            throw new Exception("Negative cycle found");
        };
        return distance_16;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(distances_25)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
