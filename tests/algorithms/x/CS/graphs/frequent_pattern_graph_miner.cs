// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class NodesData {
    public Dictionary<string, string[]> map;
    public string[] keys;
    public override string ToString() => $"NodesData {{map = {map}, keys = {keys}}}";
}
class ClusterData {
    public Dictionary<long, string[]> clusters;
    public long[] weights;
    public override string ToString() => $"ClusterData {{clusters = {clusters}, weights = {weights}}}";
}
class GraphData {
    public Dictionary<string, string[]> edges;
    public string[] keys;
    public override string ToString() => $"GraphData {{edges = {edges}, keys = {keys}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string[][][] EDGE_ARRAY_0 = new string[][][]{new string[][]{new string[]{"ab", "e1"}, new string[]{"ac", "e3"}, new string[]{"ad", "e5"}, new string[]{"bc", "e4"}, new string[]{"bd", "e2"}, new string[]{"be", "e6"}, new string[]{"bh", "e12"}, new string[]{"cd", "e2"}, new string[]{"ce", "e4"}, new string[]{"de", "e1"}, new string[]{"df", "e8"}, new string[]{"dg", "e5"}, new string[]{"dh", "e10"}, new string[]{"ef", "e3"}, new string[]{"eg", "e2"}, new string[]{"fg", "e6"}, new string[]{"gh", "e6"}, new string[]{"hi", "e3"}}, new string[][]{new string[]{"ab", "e1"}, new string[]{"ac", "e3"}, new string[]{"ad", "e5"}, new string[]{"bc", "e4"}, new string[]{"bd", "e2"}, new string[]{"be", "e6"}, new string[]{"cd", "e2"}, new string[]{"de", "e1"}, new string[]{"df", "e8"}, new string[]{"ef", "e3"}, new string[]{"eg", "e2"}, new string[]{"fg", "e6"}}, new string[][]{new string[]{"ab", "e1"}, new string[]{"ac", "e3"}, new string[]{"bc", "e4"}, new string[]{"bd", "e2"}, new string[]{"de", "e1"}, new string[]{"df", "e8"}, new string[]{"dg", "e5"}, new string[]{"ef", "e3"}, new string[]{"eg", "e2"}, new string[]{"eh", "e12"}, new string[]{"fg", "e6"}, new string[]{"fh", "e10"}, new string[]{"gh", "e6"}}, new string[][]{new string[]{"ab", "e1"}, new string[]{"ac", "e3"}, new string[]{"bc", "e4"}, new string[]{"bd", "e2"}, new string[]{"bh", "e12"}, new string[]{"cd", "e2"}, new string[]{"df", "e8"}, new string[]{"dh", "e10"}}, new string[][]{new string[]{"ab", "e1"}, new string[]{"ac", "e3"}, new string[]{"ad", "e5"}, new string[]{"bc", "e4"}, new string[]{"bd", "e2"}, new string[]{"cd", "e2"}, new string[]{"ce", "e4"}, new string[]{"de", "e1"}, new string[]{"df", "e8"}, new string[]{"dg", "e5"}, new string[]{"ef", "e3"}, new string[]{"eg", "e2"}, new string[]{"fg", "e6"}}};
    static string[][] paths_80 = new string[][]{};
    public static bool contains(string[] lst_1, string item_2) {
        foreach (string v_3 in lst_1) {
            if ((v_3 == item_2)) {
                return true;
            }
        };
        return false;
    }

    public static string[] get_distinct_edge(string[][][] edge_array_4) {
        string[] distinct_5 = new string[]{};
        foreach (string[][] row_6 in edge_array_4) {
            foreach (string[] item_7 in row_6) {
                string e_8 = _idx(item_7, 0);
                if ((!Program.contains(distinct_5, e_8))) {
                    distinct_5 = ((Func<string[]>)(() => { var _tmp = distinct_5.ToList(); _tmp.Add(e_8); return _tmp.ToArray(); }))();
                }
            }
        };
        return distinct_5;
    }

    public static string get_bitcode(string[][][] edge_array_9, string de_10) {
        string bitcode_11 = "";
        long i_12 = 0;
        while ((i_12 < edge_array_9.Length)) {
            bool found_13 = false;
            foreach (string[] item_14 in _idx(edge_array_9, i_12)) {
                if ((_idx(item_14, 0) == de_10)) {
                    found_13 = true;
                    break;
                }
            }
            if (found_13) {
                bitcode_11 = (bitcode_11 + "1");
            } else {
                bitcode_11 = (bitcode_11 + "0");
            }
            i_12 = (i_12 + 1);
        };
        return bitcode_11;
    }

    public static long count_ones(string s_15) {
        long c_16 = 0;
        long i_17 = 0;
        while ((i_17 < s_15.Length)) {
            if ((_substr(s_15, i_17, (i_17 + 1)) == "1")) {
                c_16 = (c_16 + 1);
            }
            i_17 = (i_17 + 1);
        };
        return c_16;
    }

    public static Dictionary<string, string>[] get_frequency_table(string[][][] edge_array_18) {
        string[] distinct_19 = Program.get_distinct_edge(edge_array_18);
        Dictionary<string, string>[] table_20 = new Dictionary<string, string>[]{};
        foreach (string e_21 in distinct_19) {
            string bit_22 = Program.get_bitcode(edge_array_18, e_21);
            long cnt_23 = Program.count_ones(bit_22);
            Dictionary<string, string> entry_24 = new Dictionary<string, string>{{"edge", e_21}, {"count", _fmtStr(cnt_23)}, {"bit", bit_22}};
            table_20 = ((Func<Dictionary<string, string>[]>)(() => { var _tmp = table_20.ToList(); _tmp.Add(entry_24); return _tmp.ToArray(); }))();
        };
        long i_25 = 0;
        while ((i_25 < table_20.Length)) {
            long max_i_26 = i_25;
            long j_27 = (i_25 + 1);
            while ((j_27 < table_20.Length)) {
                if ((Convert.ToInt64((_idx(table_20, j_27).ContainsKey("count") ? _idx(table_20, j_27)["count"] : "")) > Convert.ToInt64((_idx(table_20, max_i_26).ContainsKey("count") ? _idx(table_20, max_i_26)["count"] : "")))) {
                    max_i_26 = j_27;
                }
                j_27 = (j_27 + 1);
            }
            Dictionary<string, string> tmp_28 = _idx(table_20, i_25);
            table_20[(int)(i_25)] = _idx(table_20, max_i_26);
            table_20[(int)(max_i_26)] = tmp_28;
            i_25 = (i_25 + 1);
        };
        return table_20;
    }

    public static NodesData get_nodes(Dictionary<string, string>[] freq_table_29) {
        Dictionary<string, string[]> nodes_30 = new Dictionary<string, string[]>{};
        string[] keys_31 = new string[]{};
        foreach (Dictionary<string, string> f_32 in freq_table_29) {
            string code_33 = (f_32.ContainsKey("bit") ? f_32["bit"] : "");
            string edge_34 = (f_32.ContainsKey("edge") ? f_32["edge"] : "");
            if ((nodes_30.ContainsKey(code_33))) {
                nodes_30[code_33] = ((Func<string[]>)(() => { var _tmp = (nodes_30.ContainsKey(code_33) ? nodes_30[code_33] : null).ToList(); _tmp.Add(edge_34); return _tmp.ToArray(); }))();
            } else {
                nodes_30[code_33] = new string[]{edge_34};
                keys_31 = ((Func<string[]>)(() => { var _tmp = keys_31.ToList(); _tmp.Add(code_33); return _tmp.ToArray(); }))();
            }
        };
        return new NodesData{map = nodes_30, keys = keys_31};
    }

    public static ClusterData get_cluster(NodesData nodes_35) {
        Dictionary<long, string[]> clusters_36 = new Dictionary<long, string[]>{};
        long[] weights_37 = new long[]{};
        long i_38 = 0;
        while ((i_38 < nodes_35.keys.Length)) {
            string code_39 = _idx(nodes_35.keys, i_38);
            long wt_40 = Program.count_ones(code_39);
            if ((clusters_36.ContainsKey(wt_40))) {
                clusters_36[wt_40] = ((Func<string[]>)(() => { var _tmp = (clusters_36.ContainsKey(wt_40) ? clusters_36[wt_40] : null).ToList(); _tmp.Add(code_39); return _tmp.ToArray(); }))();
            } else {
                clusters_36[wt_40] = new string[]{code_39};
                weights_37 = ((Func<long[]>)(() => { var _tmp = weights_37.ToList(); _tmp.Add(wt_40); return _tmp.ToArray(); }))();
            }
            i_38 = (i_38 + 1);
        };
        return new ClusterData{clusters = clusters_36, weights = weights_37};
    }

    public static long[] get_support(ClusterData clusters_41) {
        long[] sup_42 = new long[]{};
        long i_43 = 0;
        while ((i_43 < clusters_41.weights.Length)) {
            long w_44 = _idx(clusters_41.weights, i_43);
            sup_42 = ((Func<long[]>)(() => { var _tmp = sup_42.ToList(); _tmp.Add(_floordiv((w_44 * 100), clusters_41.weights.Length)); return _tmp.ToArray(); }))();
            i_43 = (i_43 + 1);
        };
        return sup_42;
    }

    public static bool contains_bits(string a_45, string b_46) {
        long i_47 = 0;
        while ((i_47 < a_45.Length)) {
            string c1_48 = _substr(a_45, i_47, (i_47 + 1));
            string c2_49 = _substr(b_46, i_47, (i_47 + 1));
            if (((c1_48 == "1") && (c2_49 != "1"))) {
                return false;
            }
            i_47 = (i_47 + 1);
        };
        return true;
    }

    public static long max_cluster_key(ClusterData clusters_50) {
        long m_51 = 0;
        long i_52 = 0;
        while ((i_52 < clusters_50.weights.Length)) {
            long w_53 = _idx(clusters_50.weights, i_52);
            if ((w_53 > m_51)) {
                m_51 = w_53;
            }
            i_52 = (i_52 + 1);
        };
        return m_51;
    }

    public static string[] get_cluster_codes(ClusterData clusters_54, long wt_55) {
        if ((clusters_54.clusters.ContainsKey(wt_55))) {
            return (clusters_54.clusters.ContainsKey(wt_55) ? clusters_54.clusters[wt_55] : null);
        };
        return new string[]{};
    }

    public static string[] create_edge(NodesData nodes_56, Dictionary<string, string[]> graph_57, string[] gkeys_58, ClusterData clusters_59, long c1_60, long maxk_61) {
        string[] keys_62 = gkeys_58;
        string[] codes1_63 = Program.get_cluster_codes(clusters_59, c1_60);
        long idx1_64 = 0;
        while ((idx1_64 < codes1_63.Length)) {
            string i_code_65 = _idx(codes1_63, idx1_64);
            long count_66 = 0;
            long c2_67 = (c1_60 + 1);
            while ((c2_67 <= maxk_61)) {
                string[] codes2_68 = Program.get_cluster_codes(clusters_59, c2_67);
                long j_69 = 0;
                while ((j_69 < codes2_68.Length)) {
                    string j_code_70 = _idx(codes2_68, j_69);
                    if (Program.contains_bits(i_code_65, j_code_70)) {
                        if ((graph_57.ContainsKey(i_code_65))) {
                            graph_57[i_code_65] = ((Func<string[]>)(() => { var _tmp = (graph_57.ContainsKey(i_code_65) ? graph_57[i_code_65] : null).ToList(); _tmp.Add(j_code_70); return _tmp.ToArray(); }))();
                        } else {
                            graph_57[i_code_65] = new string[]{j_code_70};
                            if ((!Program.contains(keys_62, i_code_65))) {
                                keys_62 = ((Func<string[]>)(() => { var _tmp = keys_62.ToList(); _tmp.Add(i_code_65); return _tmp.ToArray(); }))();
                            }
                        }
                        if ((!Program.contains(keys_62, j_code_70))) {
                            keys_62 = ((Func<string[]>)(() => { var _tmp = keys_62.ToList(); _tmp.Add(j_code_70); return _tmp.ToArray(); }))();
                        }
                        count_66 = (count_66 + 1);
                    }
                    j_69 = (j_69 + 1);
                }
                if ((count_66 == 0)) {
                    c2_67 = (c2_67 + 1);
                } else {
                    break;
                }
            }
            idx1_64 = (idx1_64 + 1);
        };
        return keys_62;
    }

    public static GraphData construct_graph(ClusterData clusters_71, NodesData nodes_72) {
        long maxk_73 = Program.max_cluster_key(clusters_71);
        string[] top_codes_74 = Program.get_cluster_codes(clusters_71, maxk_73);
        Dictionary<string, string[]> graph_75 = new Dictionary<string, string[]>{};
        string[] keys_76 = new string[]{"Header"};
        graph_75["Header"] = new string[]{};
        long i_77 = 0;
        while ((i_77 < top_codes_74.Length)) {
            string code_78 = _idx(top_codes_74, i_77);
            graph_75["Header"] = ((Func<string[]>)(() => { var _tmp = (graph_75.ContainsKey("Header") ? graph_75["Header"] : null).ToList(); _tmp.Add(code_78); return _tmp.ToArray(); }))();
            graph_75[code_78] = new string[]{"Header"};
            keys_76 = ((Func<string[]>)(() => { var _tmp = keys_76.ToList(); _tmp.Add(code_78); return _tmp.ToArray(); }))();
            i_77 = (i_77 + 1);
        };
        long c_79 = 1;
        while ((c_79 < maxk_73)) {
            keys_76 = Program.create_edge(nodes_72, graph_75, keys_76, clusters_71, c_79, maxk_73);
            c_79 = (c_79 + 1);
        };
        return new GraphData{edges = graph_75, keys = keys_76};
    }

    public static string[] copy_list(string[] lst_81) {
        string[] n_82 = new string[]{};
        foreach (string v_83 in lst_81) {
            n_82 = ((Func<string[]>)(() => { var _tmp = n_82.ToList(); _tmp.Add(v_83); return _tmp.ToArray(); }))();
        };
        return n_82;
    }

    public static void my_dfs(Dictionary<string, string[]> graph_84, string start_85, string end_86, string[] path_87) {
        string[] new_path_88 = Program.copy_list(path_87);
        new_path_88 = ((Func<string[]>)(() => { var _tmp = new_path_88.ToList(); _tmp.Add(start_85); return _tmp.ToArray(); }))();
        if ((start_85 == end_86)) {
            paths_80 = ((Func<string[][]>)(() => { var _tmp = paths_80.ToList(); _tmp.Add(new_path_88); return _tmp.ToArray(); }))();
            return;
        };
        foreach (string node_89 in (graph_84.ContainsKey(start_85) ? graph_84[start_85] : null)) {
            bool seen_90 = false;
            foreach (string p_91 in new_path_88) {
                if ((p_91 == node_89)) {
                    seen_90 = true;
                }
            }
            if ((!seen_90)) {
                Program.my_dfs(graph_84, node_89, end_86, new_path_88);
            }
        };
    }

    public static void find_freq_subgraph_given_support(long s_92, ClusterData clusters_93, GraphData graph_94) {
        long k_95 = _floordiv((s_92 * clusters_93.weights.Length), 100);
        string[] codes_96 = Program.get_cluster_codes(clusters_93, k_95);
        long i_97 = 0;
        while ((i_97 < codes_96.Length)) {
            Program.my_dfs(graph_94.edges, _idx(codes_96, i_97), "Header", new string[]{});
            i_97 = (i_97 + 1);
        };
    }

    public static string[] node_edges(NodesData nodes_98, string code_99) {
        return (nodes_98.map.ContainsKey(code_99) ? nodes_98.map[code_99] : null);
    }

    public static string[][][] freq_subgraphs_edge_list(string[][] paths_100, NodesData nodes_101) {
        string[][][] freq_sub_el_102 = new string[][][]{};
        foreach (string[] path_103 in paths_100) {
            string[][] el_104 = new string[][]{};
            long j_105 = 0;
            while ((j_105 < (path_103.Length - 1))) {
                string code_106 = _idx(path_103, j_105);
                string[] edge_list_107 = Program.node_edges(nodes_101, code_106);
                long e_108 = 0;
                while ((e_108 < edge_list_107.Length)) {
                    string edge_109 = _idx(edge_list_107, e_108);
                    string a_110 = _substr(edge_109, 0, 1);
                    string b_111 = _substr(edge_109, 1, 2);
                    el_104 = ((Func<string[][]>)(() => { var _tmp = el_104.ToList(); _tmp.Add(new string[]{a_110, b_111}); return _tmp.ToArray(); }))();
                    e_108 = (e_108 + 1);
                }
                j_105 = (j_105 + 1);
            }
            freq_sub_el_102 = ((Func<string[][][]>)(() => { var _tmp = freq_sub_el_102.ToList(); _tmp.Add(el_104); return _tmp.ToArray(); }))();
        };
        return freq_sub_el_102;
    }

    public static void print_all(NodesData nodes_112, long[] support_113, ClusterData clusters_114, GraphData graph_115, string[][][] freq_subgraph_edge_list_116) {
        Console.WriteLine(Program._fmtTop("\nNodes\n"));
        long i_117 = 0;
        while ((i_117 < nodes_112.keys.Length)) {
            string code_118 = _idx(nodes_112.keys, i_117);
            Console.WriteLine(Program._fmtTop(code_118));
            Console.WriteLine(Program._fmtTop((nodes_112.map.ContainsKey(code_118) ? nodes_112.map[code_118] : null)));
            i_117 = (i_117 + 1);
        };
        Console.WriteLine(Program._fmtTop("\nSupport\n"));
        Console.WriteLine(Program._fmtTop(support_113));
        Console.WriteLine(Program._fmtTop("\nCluster\n"));
        long j_119 = 0;
        while ((j_119 < clusters_114.weights.Length)) {
            long w_120 = _idx(clusters_114.weights, j_119);
            Console.WriteLine(Program._fmtTop(((_fmtStr(w_120) + ":") + _fmtStr((clusters_114.clusters.ContainsKey(w_120) ? clusters_114.clusters[w_120] : null)))));
            j_119 = (j_119 + 1);
        };
        Console.WriteLine(Program._fmtTop("\nGraph\n"));
        long k_121 = 0;
        while ((k_121 < graph_115.keys.Length)) {
            string key_122 = _idx(graph_115.keys, k_121);
            Console.WriteLine(Program._fmtTop(key_122));
            Console.WriteLine(Program._fmtTop((graph_115.edges.ContainsKey(key_122) ? graph_115.edges[key_122] : null)));
            k_121 = (k_121 + 1);
        };
        Console.WriteLine(Program._fmtTop("\nEdge List of Frequent subgraphs\n"));
        foreach (string[][] el_123 in freq_subgraph_edge_list_116) {
            Console.WriteLine(Program._fmtTop(el_123));
        };
    }

    public static void main() {
        Dictionary<string, string>[] frequency_table_124 = Program.get_frequency_table(EDGE_ARRAY_0);
        NodesData nodes_125 = Program.get_nodes(frequency_table_124);
        ClusterData clusters_126 = Program.get_cluster(nodes_125);
        long[] support_127 = Program.get_support(clusters_126);
        GraphData graph_128 = Program.construct_graph(clusters_126, nodes_125);
        Program.find_freq_subgraph_given_support(60, clusters_126, graph_128);
        string[][][] freq_subgraph_edge_list_129 = Program.freq_subgraphs_edge_list(paths_80, nodes_125);
        Program.print_all(nodes_125, support_127, clusters_126, graph_128, freq_subgraph_edge_list_129);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
