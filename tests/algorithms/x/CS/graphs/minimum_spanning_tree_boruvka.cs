// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Edge {
    public long u;
    public long v;
    public long w;
    public override string ToString() => $"Edge {{u = {u}, v = {v}, w = {w}}}";
}
class UF {
    public long[] parent;
    public long[] rank;
    public override string ToString() => $"UF {{parent = {parent}, rank = {rank}}}";
}
class FindRes {
    public long root;
    public UF uf;
    public override string ToString() => $"FindRes {{root = {root}, uf = {uf}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static UF uf_make(long n_0) {
        long[] p_1 = new long[]{};
        long[] r_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < n_0)) {
            p_1 = ((Func<long[]>)(() => { var _tmp = p_1.ToList(); _tmp.Add(i_3); return _tmp.ToArray(); }))();
            r_2 = ((Func<long[]>)(() => { var _tmp = r_2.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return new UF{parent = p_1, rank = r_2};
    }

    public static FindRes uf_find(UF uf_4, long x_5) {
        long[] p_6 = uf_4.parent;
        if ((_idx(p_6, x_5) != x_5)) {
            FindRes res_7 = Program.uf_find(new UF{parent = p_6, rank = uf_4.rank}, _idx(p_6, x_5));
            p_6 = res_7.uf.parent;
            p_6[(int)(x_5)] = res_7.root;
            return new FindRes{root = res_7.root, uf = new UF{parent = p_6, rank = res_7.uf.rank}};
        };
        return new FindRes{root = x_5, uf = uf_4};
    }

    public static UF uf_union(UF uf_8, long x_9, long y_10) {
        FindRes fr1_11 = Program.uf_find(uf_8, x_9);
        UF uf1_12 = fr1_11.uf;
        long root1_13 = fr1_11.root;
        FindRes fr2_14 = Program.uf_find(uf1_12, y_10);
        uf1_12 = fr2_14.uf;
        long root2_15 = fr2_14.root;
        if ((root1_13 == root2_15)) {
            return uf1_12;
        };
        long[] p_16 = uf1_12.parent;
        long[] r_17 = uf1_12.rank;
        if ((_idx(r_17, root1_13) > _idx(r_17, root2_15))) {
            p_16[(int)(root2_15)] = root1_13;
        } else if ((_idx(r_17, root1_13) < _idx(r_17, root2_15))) {
            p_16[(int)(root1_13)] = root2_15;
        } else {
            p_16[(int)(root2_15)] = root1_13;
            r_17[(int)(root1_13)] = (_idx(r_17, root1_13) + 1);
        };
        return new UF{parent = p_16, rank = r_17};
    }

    public static Edge[] boruvka(long n_18, Edge[] edges_19) {
        UF uf_20 = Program.uf_make(n_18);
        long num_components_21 = n_18;
        Edge[] mst_22 = new Edge[]{};
        while ((num_components_21 > 1)) {
            long[] cheap_23 = new long[]{};
            long i_24 = 0;
            while ((i_24 < n_18)) {
                cheap_23 = ((Func<long[]>)(() => { var _tmp = cheap_23.ToList(); _tmp.Add((0 - 1)); return _tmp.ToArray(); }))();
                i_24 = (i_24 + 1);
            }
            long idx_25 = 0;
            while ((idx_25 < edges_19.Length)) {
                Edge e_26 = _idx(edges_19, idx_25);
                FindRes fr1_27 = Program.uf_find(uf_20, e_26.u);
                uf_20 = fr1_27.uf;
                long set1_28 = fr1_27.root;
                FindRes fr2_29 = Program.uf_find(uf_20, e_26.v);
                uf_20 = fr2_29.uf;
                long set2_30 = fr2_29.root;
                if ((set1_28 != set2_30)) {
                    if (((_idx(cheap_23, set1_28) == (0 - 1)) || (_idx(edges_19, _idx(cheap_23, set1_28)).w > e_26.w))) {
                        cheap_23[(int)(set1_28)] = idx_25;
                    }
                    if (((_idx(cheap_23, set2_30) == (0 - 1)) || (_idx(edges_19, _idx(cheap_23, set2_30)).w > e_26.w))) {
                        cheap_23[(int)(set2_30)] = idx_25;
                    }
                }
                idx_25 = (idx_25 + 1);
            }
            long v_31 = 0;
            while ((v_31 < n_18)) {
                long idxe_32 = _idx(cheap_23, v_31);
                if ((idxe_32 != (0 - 1))) {
                    Edge e_33 = _idx(edges_19, idxe_32);
                    FindRes fr1_34 = Program.uf_find(uf_20, e_33.u);
                    uf_20 = fr1_34.uf;
                    long set1_35 = fr1_34.root;
                    FindRes fr2_36 = Program.uf_find(uf_20, e_33.v);
                    uf_20 = fr2_36.uf;
                    long set2_37 = fr2_36.root;
                    if ((set1_35 != set2_37)) {
                        mst_22 = ((Func<Edge[]>)(() => { var _tmp = mst_22.ToList(); _tmp.Add(e_33); return _tmp.ToArray(); }))();
                        uf_20 = Program.uf_union(uf_20, set1_35, set2_37);
                        num_components_21 = (num_components_21 - 1);
                    }
                }
                v_31 = (v_31 + 1);
            }
        };
        return mst_22;
    }

    public static void main() {
        Edge[] edges_38 = new Edge[]{new Edge{u = 0, v = 1, w = 1}, new Edge{u = 0, v = 2, w = 2}, new Edge{u = 2, v = 3, w = 3}};
        Edge[] mst_39 = Program.boruvka(4, edges_38);
        foreach (Edge e_40 in mst_39) {
            Console.WriteLine(Program._fmtTop(((((_fmtStr(e_40.u) + " - ") + _fmtStr(e_40.v)) + " : ") + _fmtStr(e_40.w))));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
