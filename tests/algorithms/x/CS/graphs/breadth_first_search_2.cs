// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, string[]> G_22 = new Dictionary<string, string[]>{{"A", new string[]{"B", "C"}}, {"B", new string[]{"A", "D", "E"}}, {"C", new string[]{"A", "F"}}, {"D", new string[]{"B"}}, {"E", new string[]{"B", "F"}}, {"F", new string[]{"C", "E"}}};
    public static string join(string[] xs_0) {
        string s_1 = "";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + _idx(xs_0, i_2));
            i_2 = (i_2 + 1);
        };
        return s_1;
    }

    public static string[] breadth_first_search(Dictionary<string, string[]> graph_3, string start_4) {
        Dictionary<string, bool> explored_5 = new Dictionary<string, bool>{};
        explored_5[start_4] = true;
        string[] result_6 = new string[]{start_4};
        string[] queue_7 = new string[]{start_4};
        while ((queue_7.Length > 0)) {
            string v_8 = _idx(queue_7, 0);
            queue_7 = _slice<string>(queue_7, 1, queue_7.Length);
            string[] children_9 = (graph_3.ContainsKey(v_8) ? graph_3[v_8] : null);
            long i_10 = 0;
            while ((i_10 < children_9.Length)) {
                string w_11 = _idx(children_9, i_10);
                if ((!(explored_5.ContainsKey(w_11)))) {
                    explored_5[w_11] = true;
                    result_6 = ((Func<string[]>)(() => { var _tmp = result_6.ToList(); _tmp.Add(w_11); return _tmp.ToArray(); }))();
                    queue_7 = ((Func<string[]>)(() => { var _tmp = queue_7.ToList(); _tmp.Add(w_11); return _tmp.ToArray(); }))();
                }
                i_10 = (i_10 + 1);
            }
        };
        return result_6;
    }

    public static string[] breadth_first_search_with_deque(Dictionary<string, string[]> graph_12, string start_13) {
        Dictionary<string, bool> visited_14 = new Dictionary<string, bool>{};
        visited_14[start_13] = true;
        string[] result_15 = new string[]{start_13};
        string[] queue_16 = new string[]{start_13};
        long head_17 = 0;
        while ((head_17 < queue_16.Length)) {
            string v_18 = _idx(queue_16, head_17);
            head_17 = (head_17 + 1);
            string[] children_19 = (graph_12.ContainsKey(v_18) ? graph_12[v_18] : null);
            long i_20 = 0;
            while ((i_20 < children_19.Length)) {
                string child_21 = _idx(children_19, i_20);
                if ((!(visited_14.ContainsKey(child_21)))) {
                    visited_14[child_21] = true;
                    result_15 = ((Func<string[]>)(() => { var _tmp = result_15.ToList(); _tmp.Add(child_21); return _tmp.ToArray(); }))();
                    queue_16 = ((Func<string[]>)(() => { var _tmp = queue_16.ToList(); _tmp.Add(child_21); return _tmp.ToArray(); }))();
                }
                i_20 = (i_20 + 1);
            }
        };
        return result_15;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.join(Program.breadth_first_search(G_22, "A"))));
            Console.WriteLine(Program._fmtTop(Program.join(Program.breadth_first_search_with_deque(G_22, "A"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
