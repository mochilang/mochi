// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Pos {
    public long y;
    public long x;
    public override string ToString() => $"Pos {{y = {y}, x = {x}}}";
}
class Node {
    public Pos pos;
    public long g_cost;
    public double h_cost;
    public double f_cost;
    public Pos[] path;
    public override string ToString() => $"Node {{pos = {pos}, g_cost = {g_cost}, h_cost = {h_cost.ToString("0.0")}, f_cost = {f_cost.ToString("0.0")}, path = {path}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long HEURISTIC_0 = 0;
    static long[][] grid_1 = new long[][]{new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 0, 1, 0, 0, 0, 0}, new long[]{1, 0, 1, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 1, 0, 0}};
    static long[][] delta_2 = new long[][]{new long[]{-1, 0}, new long[]{0, -1}, new long[]{1, 0}, new long[]{0, 1}};
    static Pos start_94 = new Pos{y = 0, x = 0};
    static Pos goal_95 = new Pos{y = (grid_1.Length - 1), x = (grid_1[(int)(0)].Length - 1)};
    static Pos[] path1_96 = Program.astar(start_94, goal_95);
    public static long abs(long x_3) {
        if ((x_3 < 0)) {
            return -x_3;
        };
        return x_3;
    }

    public static double sqrtApprox(double x_4) {
        if ((x_4 <= 0.0)) {
            return 0.0;
        };
        double guess_5 = x_4;
        long i_6 = 0;
        while ((i_6 < 10)) {
            guess_5 = ((guess_5 + (x_4 / guess_5)) / 2.0);
            i_6 = (i_6 + 1);
        };
        return guess_5;
    }

    public static double heuristic(Pos a_7, Pos b_8) {
        long dy_9 = (a_7.y - b_8.y);
        long dx_10 = (a_7.x - b_8.x);
        if ((HEURISTIC_0 == 1)) {
            return Convert.ToDouble((Program.abs(dy_9) + Program.abs(dx_10)));
        };
        double dyf_11 = Convert.ToDouble(dy_9);
        double dxf_12 = Convert.ToDouble(dx_10);
        return Program.sqrtApprox(((dyf_11 * dyf_11) + (dxf_12 * dxf_12)));
    }

    public static bool pos_equal(Pos a_13, Pos b_14) {
        return ((a_13.y == b_14.y) && (a_13.x == b_14.x));
    }

    public static bool contains_pos(Pos[] lst_15, Pos p_16) {
        long i_17 = 0;
        while ((i_17 < lst_15.Length)) {
            if (Program.pos_equal(lst_15[(int)(i_17)], p_16)) {
                return true;
            }
            i_17 = (i_17 + 1);
        };
        return false;
    }

    public static long open_index_of_pos(Node[] open_18, Pos p_19) {
        long i_20 = 0;
        while ((i_20 < open_18.Length)) {
            if (Program.pos_equal(open_18[(int)(i_20)].pos, p_19)) {
                return i_20;
            }
            i_20 = (i_20 + 1);
        };
        return (0 - 1);
    }

    public static Node[] remove_node_at(Node[] nodes_21, long idx_22) {
        Node[] res_23 = new Node[]{};
        long i_24 = 0;
        while ((i_24 < nodes_21.Length)) {
            if ((i_24 != idx_22)) {
                res_23 = (Enumerable.ToArray(Enumerable.Append<Node>(res_23, nodes_21[(int)(i_24)])));
            }
            i_24 = (i_24 + 1);
        };
        return res_23;
    }

    public static Pos[] append_pos_list(Pos[] path_25, Pos p_26) {
        Pos[] res_27 = new Pos[]{};
        long i_28 = 0;
        while ((i_28 < path_25.Length)) {
            res_27 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_27, path_25[(int)(i_28)])));
            i_28 = (i_28 + 1);
        };
        res_27 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_27, p_26)));
        return res_27;
    }

    public static Pos[] reverse_pos_list(Pos[] lst_29) {
        Pos[] res_30 = new Pos[]{};
        long i_31 = (lst_29.Length - 1);
        while ((i_31 >= 0)) {
            res_30 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_30, lst_29[(int)(i_31)])));
            i_31 = (i_31 - 1);
        };
        return res_30;
    }

    public static Pos[] concat_pos_lists(Pos[] a_32, Pos[] b_33) {
        Pos[] res_34 = new Pos[]{};
        long i_35 = 0;
        while ((i_35 < a_32.Length)) {
            res_34 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_34, a_32[(int)(i_35)])));
            i_35 = (i_35 + 1);
        };
        long j_36 = 0;
        while ((j_36 < b_33.Length)) {
            res_34 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_34, b_33[(int)(j_36)])));
            j_36 = (j_36 + 1);
        };
        return res_34;
    }

    public static Pos[] get_successors(Pos p_37) {
        Pos[] res_38 = new Pos[]{};
        long i_39 = 0;
        while ((i_39 < delta_2.Length)) {
            long nx_40 = (p_37.x + delta_2[(int)(i_39)][(int)(1)]);
            long ny_41 = (p_37.y + delta_2[(int)(i_39)][(int)(0)]);
            if (((((nx_40 >= 0) && (ny_41 >= 0)) && (nx_40 < grid_1[(int)(0)].Length)) && (ny_41 < grid_1.Length))) {
                if ((grid_1[(int)(ny_41)][(int)(nx_40)] == 0)) {
                    res_38 = (Enumerable.ToArray(Enumerable.Append<Pos>(res_38, new Pos{y = ny_41, x = nx_40})));
                }
            }
            i_39 = (i_39 + 1);
        };
        return res_38;
    }

    public static long find_lowest_f(Node[] open_42) {
        long best_43 = 0;
        long i_44 = 1;
        while ((i_44 < open_42.Length)) {
            if ((open_42[(int)(i_44)].f_cost < open_42[(int)(best_43)].f_cost)) {
                best_43 = i_44;
            }
            i_44 = (i_44 + 1);
        };
        return best_43;
    }

    public static Pos[] astar(Pos start_45, Pos goal_46) {
        double h0_47 = Program.heuristic(start_45, goal_46);
        Node[] open_48 = new Node[]{new Node{pos = start_45, g_cost = 0, h_cost = h0_47, f_cost = h0_47, path = new Pos[]{start_45}}};
        Pos[] closed_49 = new Pos[]{};
        while ((open_48.Length > 0)) {
            long idx_50 = Program.find_lowest_f(open_48);
            Node current_51 = open_48[(int)(idx_50)];
            open_48 = Program.remove_node_at(open_48, idx_50);
            if (Program.pos_equal(current_51.pos, goal_46)) {
                return current_51.path;
            }
            closed_49 = (Enumerable.ToArray(Enumerable.Append<Pos>(closed_49, current_51.pos)));
            Pos[] succ_52 = Program.get_successors(current_51.pos);
            long i_53 = 0;
            while ((i_53 < succ_52.Length)) {
                Pos pos_54 = succ_52[(int)(i_53)];
                if (Program.contains_pos(closed_49, pos_54)) {
                    i_53 = (i_53 + 1);
                    continue;
                }
                long tentative_g_55 = (current_51.g_cost + 1);
                long idx_open_56 = Program.open_index_of_pos(open_48, pos_54);
                if (((idx_open_56 == (0 - 1)) || (tentative_g_55 < open_48[(int)(idx_open_56)].g_cost))) {
                    Pos[] new_path_57 = Program.append_pos_list(current_51.path, pos_54);
                    double h_58 = Program.heuristic(pos_54, goal_46);
                    double f_59 = (Convert.ToDouble(tentative_g_55) + h_58);
                    if ((idx_open_56 != (0 - 1))) {
                        open_48 = Program.remove_node_at(open_48, idx_open_56);
                    }
                    open_48 = (Enumerable.ToArray(Enumerable.Append<Node>(open_48, new Node{pos = pos_54, g_cost = tentative_g_55, h_cost = h_58, f_cost = f_59, path = new_path_57})));
                }
                i_53 = (i_53 + 1);
            }
        };
        return new Pos[]{start_45};
    }

    public static Pos[] combine_paths(Node fwd_60, Node bwd_61) {
        Pos[] bwd_copy_62 = new Pos[]{};
        long i_63 = 0;
        while ((i_63 < (bwd_61.path.Length - 1))) {
            bwd_copy_62 = (Enumerable.ToArray(Enumerable.Append<Pos>(bwd_copy_62, bwd_61.path[(int)(i_63)])));
            i_63 = (i_63 + 1);
        };
        bwd_copy_62 = Program.reverse_pos_list(bwd_copy_62);
        return Program.concat_pos_lists(fwd_60.path, bwd_copy_62);
    }

    public static Pos[] bidirectional_astar(Pos start_64, Pos goal_65) {
        double hf_66 = Program.heuristic(start_64, goal_65);
        double hb_67 = Program.heuristic(goal_65, start_64);
        Node[] open_f_68 = new Node[]{new Node{pos = start_64, g_cost = 0, h_cost = hf_66, f_cost = hf_66, path = new Pos[]{start_64}}};
        Node[] open_b_69 = new Node[]{new Node{pos = goal_65, g_cost = 0, h_cost = hb_67, f_cost = hb_67, path = new Pos[]{goal_65}}};
        Pos[] closed_f_70 = new Pos[]{};
        Pos[] closed_b_71 = new Pos[]{};
        while (((open_f_68.Length > 0) && (open_b_69.Length > 0))) {
            long idx_f_72 = Program.find_lowest_f(open_f_68);
            Node current_f_73 = open_f_68[(int)(idx_f_72)];
            open_f_68 = Program.remove_node_at(open_f_68, idx_f_72);
            long idx_b_74 = Program.find_lowest_f(open_b_69);
            Node current_b_75 = open_b_69[(int)(idx_b_74)];
            open_b_69 = Program.remove_node_at(open_b_69, idx_b_74);
            if (Program.pos_equal(current_f_73.pos, current_b_75.pos)) {
                return Program.combine_paths(current_f_73, current_b_75);
            }
            closed_f_70 = (Enumerable.ToArray(Enumerable.Append<Pos>(closed_f_70, current_f_73.pos)));
            closed_b_71 = (Enumerable.ToArray(Enumerable.Append<Pos>(closed_b_71, current_b_75.pos)));
            Pos[] succ_f_76 = Program.get_successors(current_f_73.pos);
            long i_77 = 0;
            while ((i_77 < succ_f_76.Length)) {
                Pos pos_78 = succ_f_76[(int)(i_77)];
                if (Program.contains_pos(closed_f_70, pos_78)) {
                    i_77 = (i_77 + 1);
                    continue;
                }
                long tentative_g_79 = (current_f_73.g_cost + 1);
                double h_80 = Program.heuristic(pos_78, current_b_75.pos);
                double f_81 = (Convert.ToDouble(tentative_g_79) + h_80);
                long idx_open_82 = Program.open_index_of_pos(open_f_68, pos_78);
                if (((idx_open_82 == (0 - 1)) || (tentative_g_79 < open_f_68[(int)(idx_open_82)].g_cost))) {
                    Pos[] new_path_83 = Program.append_pos_list(current_f_73.path, pos_78);
                    if ((idx_open_82 != (0 - 1))) {
                        open_f_68 = Program.remove_node_at(open_f_68, idx_open_82);
                    }
                    open_f_68 = (Enumerable.ToArray(Enumerable.Append<Node>(open_f_68, new Node{pos = pos_78, g_cost = tentative_g_79, h_cost = h_80, f_cost = f_81, path = new_path_83})));
                }
                i_77 = (i_77 + 1);
            }
            Pos[] succ_b_84 = Program.get_successors(current_b_75.pos);
            i_77 = 0;
            while ((i_77 < succ_b_84.Length)) {
                Pos pos_85 = succ_b_84[(int)(i_77)];
                if (Program.contains_pos(closed_b_71, pos_85)) {
                    i_77 = (i_77 + 1);
                    continue;
                }
                long tentative_g_86 = (current_b_75.g_cost + 1);
                double h_87 = Program.heuristic(pos_85, current_f_73.pos);
                double f_88 = (Convert.ToDouble(tentative_g_86) + h_87);
                long idx_open_89 = Program.open_index_of_pos(open_b_69, pos_85);
                if (((idx_open_89 == (0 - 1)) || (tentative_g_86 < open_b_69[(int)(idx_open_89)].g_cost))) {
                    Pos[] new_path_90 = Program.append_pos_list(current_b_75.path, pos_85);
                    if ((idx_open_89 != (0 - 1))) {
                        open_b_69 = Program.remove_node_at(open_b_69, idx_open_89);
                    }
                    open_b_69 = (Enumerable.ToArray(Enumerable.Append<Node>(open_b_69, new Node{pos = pos_85, g_cost = tentative_g_86, h_cost = h_87, f_cost = f_88, path = new_path_90})));
                }
                i_77 = (i_77 + 1);
            }
        };
        return new Pos[]{start_64};
    }

    public static string path_to_string(Pos[] path_91) {
        if ((path_91.Length == 0)) {
            return "[]";
        };
        string s_92 = (((("[(" + _fmtStr(path_91[(int)(0)].y)) + ", ") + _fmtStr(path_91[(int)(0)].x)) + ")");
        long i_93 = 1;
        while ((i_93 < path_91.Length)) {
            s_92 = (((((s_92 + ", (") + _fmtStr(path_91[(int)(i_93)].y)) + ", ") + _fmtStr(path_91[(int)(i_93)].x)) + ")");
            i_93 = (i_93 + 1);
        };
        s_92 = (s_92 + "]");
        return s_92;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.path_to_string(path1_96)));
            Pos[] path2_97 = Program.bidirectional_astar(start_94, goal_95);
            Console.WriteLine(Program._fmtTop(Program.path_to_string(path2_97)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
