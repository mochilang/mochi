// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class NodeCost {
    public string node;
    public long cost;
    public override string ToString() => $"NodeCost {{node = \"{node}\", cost = {cost}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, Dictionary<string, long>> G_0 = new Dictionary<string, Dictionary<string, long>>{{"A", new Dictionary<string, long>{{"B", 2}, {"C", 5}}}, {"B", new Dictionary<string, long>{{"A", 2}, {"D", 3}, {"E", 1}, {"F", 1}}}, {"C", new Dictionary<string, long>{{"A", 5}, {"F", 3}}}, {"D", new Dictionary<string, long>{{"B", 3}}}, {"E", new Dictionary<string, long>{{"B", 4}, {"F", 3}}}, {"F", new Dictionary<string, long>{{"C", 3}, {"E", 3}}}};
    static NodeCost[] heap_1 = new NodeCost[]{new NodeCost{node = "E", cost = 0}};
    static Dictionary<string, bool> visited_2 = new Dictionary<string, bool>{};
    static long result_3 = -1;
    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((heap_1.Length > 0)) {
                long best_idx_4 = 0;
                long i_5 = 1;
                while ((i_5 < heap_1.Length)) {
                    if ((_idx(heap_1, i_5).cost < _idx(heap_1, best_idx_4).cost)) {
                        best_idx_4 = i_5;
                    }
                    i_5 = (i_5 + 1);
                }
                NodeCost best_6 = _idx(heap_1, best_idx_4);
                NodeCost[] new_heap_7 = new NodeCost[]{};
                long j_8 = 0;
                while ((j_8 < heap_1.Length)) {
                    if ((j_8 != best_idx_4)) {
                        new_heap_7 = ((Func<NodeCost[]>)(() => { var _tmp = new_heap_7.ToList(); _tmp.Add(_idx(heap_1, j_8)); return _tmp.ToArray(); }))();
                    }
                    j_8 = (j_8 + 1);
                }
                heap_1 = new_heap_7;
                string u_9 = best_6.node;
                long cost_10 = best_6.cost;
                if ((visited_2.ContainsKey(u_9))) {
                    continue;
                }
                visited_2[u_9] = true;
                if ((u_9 == "C")) {
                    result_3 = cost_10;
                    break;
                }
                foreach (string v_11 in (G_0.ContainsKey(u_9) ? G_0[u_9] : null).Keys) {
                    if ((visited_2.ContainsKey(v_11))) {
                        continue;
                    }
                    long next_cost_12 = (cost_10 + ((G_0.ContainsKey(u_9) ? G_0[u_9] : null).ContainsKey(v_11) ? (G_0.ContainsKey(u_9) ? G_0[u_9] : null)[v_11] : 0));
                    heap_1 = ((Func<NodeCost[]>)(() => { var _tmp = heap_1.ToList(); _tmp.Add(new NodeCost{node = v_11, cost = next_cost_12}); return _tmp.ToArray(); }))();
                }
            }
            Console.WriteLine(Program._fmtTop(result_3));
            Dictionary<string, Dictionary<string, long>> G2_13 = new Dictionary<string, Dictionary<string, long>>{{"B", new Dictionary<string, long>{{"C", 1}}}, {"C", new Dictionary<string, long>{{"D", 1}}}, {"D", new Dictionary<string, long>{{"F", 1}}}, {"E", new Dictionary<string, long>{{"B", 1}, {"F", 3}}}, {"F", new Dictionary<string, long>{}}};
            NodeCost[] heap2_14 = new NodeCost[]{new NodeCost{node = "E", cost = 0}};
            Dictionary<string, bool> visited2_15 = new Dictionary<string, bool>{};
            long result2_16 = -1;
            while ((heap2_14.Length > 0)) {
                long best2_idx_17 = 0;
                long i2_18 = 1;
                while ((i2_18 < heap2_14.Length)) {
                    if ((_idx(heap2_14, i2_18).cost < _idx(heap2_14, best2_idx_17).cost)) {
                        best2_idx_17 = i2_18;
                    }
                    i2_18 = (i2_18 + 1);
                }
                NodeCost best2_19 = _idx(heap2_14, best2_idx_17);
                NodeCost[] new_heap2_20 = new NodeCost[]{};
                long j2_21 = 0;
                while ((j2_21 < heap2_14.Length)) {
                    if ((j2_21 != best2_idx_17)) {
                        new_heap2_20 = ((Func<NodeCost[]>)(() => { var _tmp = new_heap2_20.ToList(); _tmp.Add(_idx(heap2_14, j2_21)); return _tmp.ToArray(); }))();
                    }
                    j2_21 = (j2_21 + 1);
                }
                heap2_14 = new_heap2_20;
                string u2_22 = best2_19.node;
                long cost2_23 = best2_19.cost;
                if ((visited2_15.ContainsKey(u2_22))) {
                    continue;
                }
                visited2_15[u2_22] = true;
                if ((u2_22 == "F")) {
                    result2_16 = cost2_23;
                    break;
                }
                foreach (string v2_24 in (G2_13.ContainsKey(u2_22) ? G2_13[u2_22] : null).Keys) {
                    if ((visited2_15.ContainsKey(v2_24))) {
                        continue;
                    }
                    long next_cost2_25 = (cost2_23 + ((G2_13.ContainsKey(u2_22) ? G2_13[u2_22] : null).ContainsKey(v2_24) ? (G2_13.ContainsKey(u2_22) ? G2_13[u2_22] : null)[v2_24] : 0));
                    heap2_14 = ((Func<NodeCost[]>)(() => { var _tmp = heap2_14.ToList(); _tmp.Add(new NodeCost{node = v2_24, cost = next_cost2_25}); return _tmp.ToArray(); }))();
                }
            }
            Console.WriteLine(Program._fmtTop(result2_16));
            Dictionary<string, Dictionary<string, long>> G3_26 = new Dictionary<string, Dictionary<string, long>>{{"B", new Dictionary<string, long>{{"C", 1}}}, {"C", new Dictionary<string, long>{{"D", 1}}}, {"D", new Dictionary<string, long>{{"F", 1}}}, {"E", new Dictionary<string, long>{{"B", 1}, {"G", 2}}}, {"F", new Dictionary<string, long>{}}, {"G", new Dictionary<string, long>{{"F", 1}}}};
            NodeCost[] heap3_27 = new NodeCost[]{new NodeCost{node = "E", cost = 0}};
            Dictionary<string, bool> visited3_28 = new Dictionary<string, bool>{};
            long result3_29 = -1;
            while ((heap3_27.Length > 0)) {
                long best3_idx_30 = 0;
                long i3_31 = 1;
                while ((i3_31 < heap3_27.Length)) {
                    if ((_idx(heap3_27, i3_31).cost < _idx(heap3_27, best3_idx_30).cost)) {
                        best3_idx_30 = i3_31;
                    }
                    i3_31 = (i3_31 + 1);
                }
                NodeCost best3_32 = _idx(heap3_27, best3_idx_30);
                NodeCost[] new_heap3_33 = new NodeCost[]{};
                long j3_34 = 0;
                while ((j3_34 < heap3_27.Length)) {
                    if ((j3_34 != best3_idx_30)) {
                        new_heap3_33 = ((Func<NodeCost[]>)(() => { var _tmp = new_heap3_33.ToList(); _tmp.Add(_idx(heap3_27, j3_34)); return _tmp.ToArray(); }))();
                    }
                    j3_34 = (j3_34 + 1);
                }
                heap3_27 = new_heap3_33;
                string u3_35 = best3_32.node;
                long cost3_36 = best3_32.cost;
                if ((visited3_28.ContainsKey(u3_35))) {
                    continue;
                }
                visited3_28[u3_35] = true;
                if ((u3_35 == "F")) {
                    result3_29 = cost3_36;
                    break;
                }
                foreach (string v3_37 in (G3_26.ContainsKey(u3_35) ? G3_26[u3_35] : null).Keys) {
                    if ((visited3_28.ContainsKey(v3_37))) {
                        continue;
                    }
                    long next_cost3_38 = (cost3_36 + ((G3_26.ContainsKey(u3_35) ? G3_26[u3_35] : null).ContainsKey(v3_37) ? (G3_26.ContainsKey(u3_35) ? G3_26[u3_35] : null)[v3_37] : 0));
                    heap3_27 = ((Func<NodeCost[]>)(() => { var _tmp = heap3_27.ToList(); _tmp.Add(new NodeCost{node = v3_37, cost = next_cost3_38}); return _tmp.ToArray(); }))();
                }
            }
            Console.WriteLine(Program._fmtTop(result3_29));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
