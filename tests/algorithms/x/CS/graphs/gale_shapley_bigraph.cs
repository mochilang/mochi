// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] donor_pref_23 = new long[][]{new long[]{0, 1, 3, 2}, new long[]{0, 2, 3, 1}, new long[]{1, 0, 2, 3}, new long[]{0, 3, 1, 2}};
    static long[][] recipient_pref_24 = new long[][]{new long[]{3, 1, 2, 0}, new long[]{3, 1, 0, 2}, new long[]{0, 3, 1, 2}, new long[]{1, 0, 3, 2}};
    public static long index_of(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static long[] remove_item(long[] xs_3, long x_4) {
        long[] res_5 = new long[]{};
        bool removed_6 = false;
        long i_7 = 0;
        while ((i_7 < xs_3.Length)) {
            if (((!removed_6) && (xs_3[(int)(i_7)] == x_4))) {
                removed_6 = true;
            } else {
                res_5 = (Enumerable.ToArray(Enumerable.Append<long>(res_5, xs_3[(int)(i_7)])));
            }
            i_7 = (i_7 + 1);
        };
        return res_5;
    }

    public static long[] stable_matching(long[][] donor_pref_8, long[][] recipient_pref_9) {
        if ((donor_pref_8.Length != recipient_pref_9.Length)) {
            throw new Exception("unequal groups");
        };
        long n_10 = donor_pref_8.Length;
        long[] unmatched_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < n_10)) {
            unmatched_11 = (Enumerable.ToArray(Enumerable.Append<long>(unmatched_11, i_12)));
            i_12 = (i_12 + 1);
        };
        long[] donor_record_13 = new long[]{};
        i_12 = 0;
        while ((i_12 < n_10)) {
            donor_record_13 = (Enumerable.ToArray(Enumerable.Append<long>(donor_record_13, -1)));
            i_12 = (i_12 + 1);
        };
        long[] rec_record_14 = new long[]{};
        i_12 = 0;
        while ((i_12 < n_10)) {
            rec_record_14 = (Enumerable.ToArray(Enumerable.Append<long>(rec_record_14, -1)));
            i_12 = (i_12 + 1);
        };
        long[] num_donations_15 = new long[]{};
        i_12 = 0;
        while ((i_12 < n_10)) {
            num_donations_15 = (Enumerable.ToArray(Enumerable.Append<long>(num_donations_15, 0)));
            i_12 = (i_12 + 1);
        };
        while ((unmatched_11.Length > 0)) {
            long donor_16 = unmatched_11[(int)(0)];
            long[] donor_preference_17 = donor_pref_8[(int)(donor_16)];
            long recipient_18 = donor_preference_17[(int)(num_donations_15[(int)(donor_16)])];
            num_donations_15[donor_16] = (num_donations_15[(int)(donor_16)] + 1);
            long[] rec_preference_19 = recipient_pref_9[(int)(recipient_18)];
            long prev_donor_20 = rec_record_14[(int)(recipient_18)];
            if ((prev_donor_20 != (0 - 1))) {
                long prev_index_21 = Program.index_of(rec_preference_19, prev_donor_20);
                long new_index_22 = Program.index_of(rec_preference_19, donor_16);
                if ((prev_index_21 > new_index_22)) {
                    rec_record_14[recipient_18] = donor_16;
                    donor_record_13[donor_16] = recipient_18;
                    unmatched_11 = (Enumerable.ToArray(Enumerable.Append<long>(unmatched_11, prev_donor_20)));
                    unmatched_11 = Program.remove_item(unmatched_11, donor_16);
                }
            } else {
                rec_record_14[recipient_18] = donor_16;
                donor_record_13[donor_16] = recipient_18;
                unmatched_11 = Program.remove_item(unmatched_11, donor_16);
            }
        };
        return donor_record_13;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.stable_matching(donor_pref_23, recipient_pref_24))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
