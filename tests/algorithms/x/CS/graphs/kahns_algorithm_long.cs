// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] graph_16 = new long[][]{new long[]{2, 3, 4}, new long[]{2, 7}, new long[]{5}, new long[]{5, 7}, new long[]{7}, new long[]{6}, new long[]{7}, new long[]{}};
    public static long longest_distance(long[][] graph_0) {
        long n_1 = graph_0.Length;
        long[] indegree_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < n_1)) {
            indegree_2 = (Enumerable.ToArray(Enumerable.Append<long>(indegree_2, 0)));
            i_3 = (i_3 + 1);
        };
        long[] long_dist_4 = new long[]{};
        long j_5 = 0;
        while ((j_5 < n_1)) {
            long_dist_4 = (Enumerable.ToArray(Enumerable.Append<long>(long_dist_4, 1)));
            j_5 = (j_5 + 1);
        };
        long u_6 = 0;
        while ((u_6 < n_1)) {
            foreach (long v_7 in graph_0[(int)(u_6)]) {
                indegree_2[v_7] = (indegree_2[(int)(v_7)] + 1);
            }
            u_6 = (u_6 + 1);
        };
        long[] queue_8 = new long[]{};
        long head_9 = 0;
        long k_10 = 0;
        while ((k_10 < n_1)) {
            if ((indegree_2[(int)(k_10)] == 0)) {
                queue_8 = (Enumerable.ToArray(Enumerable.Append<long>(queue_8, k_10)));
            }
            k_10 = (k_10 + 1);
        };
        while ((head_9 < queue_8.Length)) {
            long vertex_11 = queue_8[(int)(head_9)];
            head_9 = (head_9 + 1);
            foreach (long x_12 in graph_0[(int)(vertex_11)]) {
                indegree_2[x_12] = (indegree_2[(int)(x_12)] - 1);
                long new_dist_13 = (long_dist_4[(int)(vertex_11)] + 1);
                if ((new_dist_13 > long_dist_4[(int)(x_12)])) {
                    long_dist_4[x_12] = new_dist_13;
                }
                if ((indegree_2[(int)(x_12)] == 0)) {
                    queue_8 = (Enumerable.ToArray(Enumerable.Append<long>(queue_8, x_12)));
                }
            }
        };
        long max_len_14 = long_dist_4[(int)(0)];
        long m_15 = 1;
        while ((m_15 < n_1)) {
            if ((long_dist_4[(int)(m_15)] > max_len_14)) {
                max_len_14 = long_dist_4[(int)(m_15)];
            }
            m_15 = (m_15 + 1);
        };
        return max_len_14;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.longest_distance(graph_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
