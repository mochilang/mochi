// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] graph_16 = new long[][]{new long[]{0, 4, 0, 0, 0, 0, 0, 8, 0}, new long[]{4, 0, 8, 0, 0, 0, 0, 11, 0}, new long[]{0, 8, 0, 7, 0, 4, 0, 0, 2}, new long[]{0, 0, 7, 0, 9, 14, 0, 0, 0}, new long[]{0, 0, 0, 9, 0, 10, 0, 0, 0}, new long[]{0, 0, 4, 14, 10, 0, 2, 0, 0}, new long[]{0, 0, 0, 0, 0, 2, 0, 1, 6}, new long[]{8, 11, 0, 0, 0, 0, 1, 0, 7}, new long[]{0, 0, 2, 0, 0, 0, 6, 7, 0}};
    static long[] distances_17 = Program.dijkstra(graph_16, 0);
    public static long minimum_distance(long[] distances_0, bool[] visited_1) {
        long minimum_2 = 10000000;
        long min_index_3 = 0;
        long vertex_4 = 0;
        while ((vertex_4 < distances_0.Length)) {
            if (((distances_0[(int)(vertex_4)] < minimum_2) && (visited_1[(int)(vertex_4)] == false))) {
                minimum_2 = distances_0[(int)(vertex_4)];
                min_index_3 = vertex_4;
            }
            vertex_4 = (vertex_4 + 1);
        };
        return min_index_3;
    }

    public static long[] dijkstra(long[][] graph_5, long source_6) {
        long vertices_7 = graph_5.Length;
        long[] distances_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < vertices_7)) {
            distances_8 = (Enumerable.ToArray(Enumerable.Append<long>(distances_8, 10000000)));
            i_9 = (i_9 + 1);
        };
        distances_8[source_6] = 0;
        bool[] visited_10 = new bool[]{};
        i_9 = 0;
        while ((i_9 < vertices_7)) {
            visited_10 = (Enumerable.ToArray(Enumerable.Append<bool>(visited_10, false)));
            i_9 = (i_9 + 1);
        };
        long count_11 = 0;
        while ((count_11 < vertices_7)) {
            long u_12 = Program.minimum_distance(distances_8, visited_10);
            visited_10[u_12] = true;
            long v_13 = 0;
            while ((v_13 < vertices_7)) {
                if ((((graph_5[(int)(u_12)][(int)(v_13)] > 0) && (visited_10[(int)(v_13)] == false)) && (distances_8[(int)(v_13)] > (distances_8[(int)(u_12)] + graph_5[(int)(u_12)][(int)(v_13)])))) {
                    distances_8[v_13] = (distances_8[(int)(u_12)] + graph_5[(int)(u_12)][(int)(v_13)]);
                }
                v_13 = (v_13 + 1);
            }
            count_11 = (count_11 + 1);
        };
        return distances_8;
    }

    public static void print_solution(long[] distances_14) {
        Console.WriteLine(Program._fmtTop("Vertex \t Distance from Source"));
        long v_15 = 0;
        while ((v_15 < distances_14.Length)) {
            Console.WriteLine(Program._fmtTop(((_fmtStr(v_15) + "\t\t") + _fmtStr(distances_14[(int)(v_15)]))));
            v_15 = (v_15 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_solution(distances_17);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
