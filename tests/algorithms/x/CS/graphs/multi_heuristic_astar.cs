// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Pos {
    public long x;
    public long y;
    public override string ToString() => $"Pos {{x = {x}, y = {y}}}";
}
class PQNode {
    public Pos pos;
    public double pri;
    public override string ToString() => $"PQNode {{pos = {pos}, pri = {pri.ToString("0.0")}}}";
}
class PQPopResult {
    public PQNode[] pq;
    public PQNode node;
    public override string ToString() => $"PQPopResult {{pq = {pq}, node = {node}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double W1_0 = 1.0;
    static double W2_1 = 1.0;
    static long n_2 = 20;
    static long n_heuristic_3 = 3;
    static double INF_4 = 1000000000.0;
    static long t_5 = 1;
    static Pos[] blocks_31 = new Pos[]{new Pos{x = 0, y = 1}, new Pos{x = 1, y = 1}, new Pos{x = 2, y = 1}, new Pos{x = 3, y = 1}, new Pos{x = 4, y = 1}, new Pos{x = 5, y = 1}, new Pos{x = 6, y = 1}, new Pos{x = 7, y = 1}, new Pos{x = 8, y = 1}, new Pos{x = 9, y = 1}, new Pos{x = 10, y = 1}, new Pos{x = 11, y = 1}, new Pos{x = 12, y = 1}, new Pos{x = 13, y = 1}, new Pos{x = 14, y = 1}, new Pos{x = 15, y = 1}, new Pos{x = 16, y = 1}, new Pos{x = 17, y = 1}, new Pos{x = 18, y = 1}, new Pos{x = 19, y = 1}};
    static Pos start_88 = new Pos{x = 0, y = 0};
    static Pos goal_89 = new Pos{x = (n_2 - 1), y = (n_2 - 1)};
    public static bool pos_equal(Pos a_6, Pos b_7) {
        return ((a_6.x == b_7.x) && (a_6.y == b_7.y));
    }

    public static string pos_key(Pos p_8) {
        return ((_fmtStr(p_8.x) + ",") + _fmtStr(p_8.y));
    }

    public static double sqrtApprox(double x_9) {
        if ((x_9 <= 0.0)) {
            return 0.0;
        };
        double guess_10 = x_9;
        long i_11 = 0;
        while ((i_11 < 10)) {
            guess_10 = ((guess_10 + (x_9 / guess_10)) / 2.0);
            i_11 = (i_11 + 1);
        };
        return guess_10;
    }

    public static double consistent_heuristic(Pos p_12, Pos goal_13) {
        double dx_14 = Convert.ToDouble((p_12.x - goal_13.x));
        double dy_15 = Convert.ToDouble((p_12.y - goal_13.y));
        return Program.sqrtApprox(((dx_14 * dx_14) + (dy_15 * dy_15)));
    }

    public static long iabs(long x_16) {
        if ((x_16 < 0)) {
            return -x_16;
        };
        return x_16;
    }

    public static double heuristic_1(Pos p_17, Pos goal_18) {
        return Convert.ToDouble((Program.iabs((p_17.x - goal_18.x)) + Program.iabs((p_17.y - goal_18.y))));
    }

    public static double heuristic_2(Pos p_19, Pos goal_20) {
        double h_21 = Program.consistent_heuristic(p_19, goal_20);
        return (h_21 / Convert.ToDouble(t_5));
    }

    public static double heuristic(long i_22, Pos p_23, Pos goal_24) {
        if ((i_22 == 0)) {
            return Program.consistent_heuristic(p_23, goal_24);
        };
        if ((i_22 == 1)) {
            return Program.heuristic_1(p_23, goal_24);
        };
        return Program.heuristic_2(p_23, goal_24);
    }

    public static double key_fn(Pos start_25, long i_26, Pos goal_27, Dictionary<string, double> g_func_28) {
        double g_29 = (g_func_28.ContainsKey(Program.pos_key(start_25)) ? g_func_28[Program.pos_key(start_25)] : 0.0);
        return (g_29 + (W1_0 * Program.heuristic(i_26, start_25, goal_27)));
    }

    public static bool valid(Pos p_30) {
        if (((p_30.x < 0) || (p_30.x > (n_2 - 1)))) {
            return false;
        };
        if (((p_30.y < 0) || (p_30.y > (n_2 - 1)))) {
            return false;
        };
        return true;
    }

    public static bool in_blocks(Pos p_32) {
        long i_33 = 0;
        while ((i_33 < blocks_31.Length)) {
            if (Program.pos_equal(_idx(blocks_31, i_33), p_32)) {
                return true;
            }
            i_33 = (i_33 + 1);
        };
        return false;
    }

    public static PQNode[] pq_put(PQNode[] pq_34, Pos node_35, double pri_36) {
        bool updated_37 = false;
        long i_38 = 0;
        while ((i_38 < pq_34.Length)) {
            if (Program.pos_equal(_idx(pq_34, i_38).pos, node_35)) {
                if ((pri_36 < _idx(pq_34, i_38).pri)) {
                    pq_34[(int)(i_38)] = new PQNode{pos = node_35, pri = pri_36};
                }
                updated_37 = true;
            }
            i_38 = (i_38 + 1);
        };
        if ((!updated_37)) {
            pq_34 = ((Func<PQNode[]>)(() => { var _tmp = pq_34.ToList(); _tmp.Add(new PQNode{pos = node_35, pri = pri_36}); return _tmp.ToArray(); }))();
        };
        return pq_34;
    }

    public static double pq_minkey(PQNode[] pq_39) {
        if ((pq_39.Length == 0)) {
            return INF_4;
        };
        PQNode first_40 = _idx(pq_39, 0);
        double m_41 = first_40.pri;
        long i_42 = 1;
        while ((i_42 < pq_39.Length)) {
            PQNode item_43 = _idx(pq_39, i_42);
            if ((item_43.pri < m_41)) {
                m_41 = item_43.pri;
            }
            i_42 = (i_42 + 1);
        };
        return m_41;
    }

    public static PQPopResult pq_pop_min(PQNode[] pq_44) {
        PQNode best_45 = _idx(pq_44, 0);
        long idx_46 = 0;
        long i_47 = 1;
        while ((i_47 < pq_44.Length)) {
            if ((_idx(pq_44, i_47).pri < best_45.pri)) {
                best_45 = _idx(pq_44, i_47);
                idx_46 = i_47;
            }
            i_47 = (i_47 + 1);
        };
        PQNode[] new_pq_48 = new PQNode[]{};
        i_47 = 0;
        while ((i_47 < pq_44.Length)) {
            if ((i_47 != idx_46)) {
                new_pq_48 = ((Func<PQNode[]>)(() => { var _tmp = new_pq_48.ToList(); _tmp.Add(_idx(pq_44, i_47)); return _tmp.ToArray(); }))();
            }
            i_47 = (i_47 + 1);
        };
        return new PQPopResult{pq = new_pq_48, node = best_45};
    }

    public static PQNode[] pq_remove(PQNode[] pq_49, Pos node_50) {
        PQNode[] new_pq_51 = new PQNode[]{};
        long i_52 = 0;
        while ((i_52 < pq_49.Length)) {
            if ((!Program.pos_equal(_idx(pq_49, i_52).pos, node_50))) {
                new_pq_51 = ((Func<PQNode[]>)(() => { var _tmp = new_pq_51.ToList(); _tmp.Add(_idx(pq_49, i_52)); return _tmp.ToArray(); }))();
            }
            i_52 = (i_52 + 1);
        };
        return new_pq_51;
    }

    public static Pos[] reconstruct(Dictionary<string, Pos> back_pointer_53, Pos goal_54, Pos start_55) {
        Pos[] path_56 = new Pos[]{};
        Pos current_57 = goal_54;
        string key_58 = Program.pos_key(current_57);
        path_56 = ((Func<Pos[]>)(() => { var _tmp = path_56.ToList(); _tmp.Add(current_57); return _tmp.ToArray(); }))();
        while ((!Program.pos_equal(current_57, start_55))) {
            current_57 = (back_pointer_53.ContainsKey(key_58) ? back_pointer_53[key_58] : null);
            key_58 = Program.pos_key(current_57);
            path_56 = ((Func<Pos[]>)(() => { var _tmp = path_56.ToList(); _tmp.Add(current_57); return _tmp.ToArray(); }))();
        };
        Pos[] rev_59 = new Pos[]{};
        long i_60 = (path_56.Length - 1);
        while ((i_60 >= 0)) {
            rev_59 = ((Func<Pos[]>)(() => { var _tmp = rev_59.ToList(); _tmp.Add(_idx(path_56, i_60)); return _tmp.ToArray(); }))();
            i_60 = (i_60 - 1);
        };
        return rev_59;
    }

    public static Pos[] neighbours(Pos p_61) {
        Pos left_62 = new Pos{x = (p_61.x - 1), y = p_61.y};
        Pos right_63 = new Pos{x = (p_61.x + 1), y = p_61.y};
        Pos up_64 = new Pos{x = p_61.x, y = (p_61.y + 1)};
        Pos down_65 = new Pos{x = p_61.x, y = (p_61.y - 1)};
        return new Pos[]{left_62, right_63, up_64, down_65};
    }

    public static void multi_a_star(Pos start_66, Pos goal_67, long n_heuristic_68) {
        Dictionary<string, double> g_function_69 = new Dictionary<string, double>{};
        Dictionary<string, Pos> back_pointer_70 = new Dictionary<string, Pos>{};
        Dictionary<string, bool> visited_71 = new Dictionary<string, bool>{};
        PQNode[][] open_list_72 = new PQNode[][]{};
        g_function_69[Program.pos_key(start_66)] = 0.0;
        g_function_69[Program.pos_key(goal_67)] = INF_4;
        back_pointer_70[Program.pos_key(start_66)] = new Pos{x = -1, y = -1};
        back_pointer_70[Program.pos_key(goal_67)] = new Pos{x = -1, y = -1};
        visited_71[Program.pos_key(start_66)] = true;
        long i_73 = 0;
        while ((i_73 < n_heuristic_68)) {
            open_list_72 = ((Func<PQNode[][]>)(() => { var _tmp = open_list_72.ToList(); _tmp.Add(new PQNode[]{}); return _tmp.ToArray(); }))();
            double pri_74 = Program.key_fn(start_66, i_73, goal_67, g_function_69);
            open_list_72[(int)(i_73)] = Program.pq_put(_idx(open_list_72, i_73), start_66, pri_74);
            i_73 = (i_73 + 1);
        };
        while ((Program.pq_minkey(_idx(open_list_72, 0)) < INF_4)) {
            long chosen_75 = 0;
            i_73 = 1;
            while ((i_73 < n_heuristic_68)) {
                if ((Program.pq_minkey(_idx(open_list_72, i_73)) <= (W2_1 * Program.pq_minkey(_idx(open_list_72, 0))))) {
                    chosen_75 = i_73;
                    break;
                }
                i_73 = (i_73 + 1);
            }
            if ((chosen_75 != 0)) {
                t_5 = (t_5 + 1);
            }
            PQPopResult pair_76 = Program.pq_pop_min(_idx(open_list_72, chosen_75));
            open_list_72[(int)(chosen_75)] = pair_76.pq;
            PQNode current_77 = pair_76.node;
            i_73 = 0;
            while ((i_73 < n_heuristic_68)) {
                if ((i_73 != chosen_75)) {
                    open_list_72[(int)(i_73)] = Program.pq_remove(_idx(open_list_72, i_73), current_77.pos);
                }
                i_73 = (i_73 + 1);
            }
            string ckey_78 = Program.pos_key(current_77.pos);
            if ((visited_71.ContainsKey(ckey_78))) {
                continue;
            }
            visited_71[ckey_78] = true;
            if (Program.pos_equal(current_77.pos, goal_67)) {
                Pos[] path_79 = Program.reconstruct(back_pointer_70, goal_67, start_66);
                long j_80 = 0;
                while ((j_80 < path_79.Length)) {
                    Pos p_81 = _idx(path_79, j_80);
                    Console.WriteLine(Program._fmtTop((((("(" + _fmtStr(p_81.x)) + ",") + _fmtStr(p_81.y)) + ")")));
                    j_80 = (j_80 + 1);
                }
                return;
            }
            Pos[] neighs_82 = Program.neighbours(current_77.pos);
            long k_83 = 0;
            while ((k_83 < neighs_82.Length)) {
                Pos nb_84 = _idx(neighs_82, k_83);
                if ((Program.valid(nb_84) && (Program.in_blocks(nb_84) == false))) {
                    string nkey_85 = Program.pos_key(nb_84);
                    double tentative_86 = ((g_function_69.ContainsKey(ckey_78) ? g_function_69[ckey_78] : 0.0) + 1.0);
                    if (((!(g_function_69.ContainsKey(nkey_85))) || (tentative_86 < (g_function_69.ContainsKey(nkey_85) ? g_function_69[nkey_85] : 0.0)))) {
                        g_function_69[nkey_85] = tentative_86;
                        back_pointer_70[nkey_85] = current_77.pos;
                        i_73 = 0;
                        while ((i_73 < n_heuristic_68)) {
                            double pri2_87 = (tentative_86 + (W1_0 * Program.heuristic(i_73, nb_84, goal_67)));
                            open_list_72[(int)(i_73)] = Program.pq_put(_idx(open_list_72, i_73), nb_84, pri2_87);
                            i_73 = (i_73 + 1);
                        }
                    }
                }
                k_83 = (k_83 + 1);
            }
        };
        Console.WriteLine(Program._fmtTop("No path found to goal"));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.multi_a_star(start_88, goal_89, n_heuristic_3);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
