// Generated by Mochi 0.10.65 (commit 0d2a833829) on 2025-08-14 15:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class DfsResult {
    public long id;
    public long[][] bridges;
    public override string ToString() => $"DfsResult {{id = {id}, bridges = {bridges}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static DfsResult dfs(Dictionary<long, long[]> graph_0, long at_1, long parent_2, bool[] visited_3, long[] ids_4, long[] low_5, long id_6, long[][] bridges_7) {
        visited_3[(int)(at_1)] = true;
        ids_4[(int)(at_1)] = id_6;
        low_5[(int)(at_1)] = id_6;
        long current_id_8 = (id_6 + 1);
        long[][] res_bridges_9 = bridges_7;
        foreach (long to_10 in (graph_0.ContainsKey(at_1) ? graph_0[at_1] : null)) {
            if ((to_10 == parent_2)) {
                continue;
            } else if ((!_idx(visited_3, to_10))) {
                DfsResult result_11 = Program.dfs(graph_0, to_10, at_1, visited_3, ids_4, low_5, current_id_8, res_bridges_9);
                current_id_8 = result_11.id;
                res_bridges_9 = result_11.bridges;
                if ((_idx(low_5, at_1) > _idx(low_5, to_10))) {
                    low_5[(int)(at_1)] = _idx(low_5, to_10);
                }
                if ((_idx(ids_4, at_1) < _idx(low_5, to_10))) {
                    long[] edge_12 = ((at_1 < to_10) ? new long[]{at_1, to_10} : new long[]{to_10, at_1});
                    res_bridges_9 = ((Func<long[][]>)(() => { var _tmp = res_bridges_9.ToList(); _tmp.Add(edge_12); return _tmp.ToArray(); }))();
                }
            } else if ((_idx(low_5, at_1) > _idx(ids_4, to_10))) {
                low_5[(int)(at_1)] = _idx(ids_4, to_10);
            }
        };
        return new DfsResult{id = current_id_8, bridges = res_bridges_9};
    }

    public static long[][] compute_bridges(Dictionary<long, long[]> graph_13) {
        long n_14 = graph_13.Count;
        bool[] visited_15 = new bool[]{};
        long[] ids_16 = new long[]{};
        long[] low_17 = new long[]{};
        long i_18 = 0;
        while ((i_18 < n_14)) {
            visited_15 = ((Func<bool[]>)(() => { var _tmp = visited_15.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            ids_16 = ((Func<long[]>)(() => { var _tmp = ids_16.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            low_17 = ((Func<long[]>)(() => { var _tmp = low_17.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_18 = (i_18 + 1);
        };
        long[][] bridges_19 = new long[][]{};
        long id_20 = 0;
        i_18 = 0;
        while ((i_18 < n_14)) {
            if ((!_idx(visited_15, i_18))) {
                DfsResult result_21 = Program.dfs(graph_13, i_18, -1, visited_15, ids_16, low_17, id_20, bridges_19);
                id_20 = result_21.id;
                bridges_19 = result_21.bridges;
            }
            i_18 = (i_18 + 1);
        };
        return bridges_19;
    }

    public static Dictionary<long, long[]> get_demo_graph(long index_22) {
        if ((index_22 == 0)) {
            return new Dictionary<long, long[]>{{0, new long[]{1, 2}}, {1, new long[]{0, 2}}, {2, new long[]{0, 1, 3, 5}}, {3, new long[]{2, 4}}, {4, new long[]{3}}, {5, new long[]{2, 6, 8}}, {6, new long[]{5, 7}}, {7, new long[]{6, 8}}, {8, new long[]{5, 7}}};
        };
        if ((index_22 == 1)) {
            return new Dictionary<long, long[]>{{0, new long[]{6}}, {1, new long[]{9}}, {2, new long[]{4, 5}}, {3, new long[]{4}}, {4, new long[]{2, 3}}, {5, new long[]{2}}, {6, new long[]{0, 7}}, {7, new long[]{6}}, {8, new long[]{}}, {9, new long[]{1}}};
        };
        if ((index_22 == 2)) {
            return new Dictionary<long, long[]>{{0, new long[]{4}}, {1, new long[]{6}}, {2, new long[]{}}, {3, new long[]{5, 6, 7}}, {4, new long[]{0, 6}}, {5, new long[]{3, 8, 9}}, {6, new long[]{1, 3, 4, 7}}, {7, new long[]{3, 6, 8, 9}}, {8, new long[]{5, 7}}, {9, new long[]{5, 7}}};
        };
        return new Dictionary<long, long[]>{{0, new long[]{1, 3}}, {1, new long[]{0, 2, 4}}, {2, new long[]{1, 3, 4}}, {3, new long[]{0, 2, 4}}, {4, new long[]{1, 2, 3}}};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.compute_bridges(Program.get_demo_graph(0))));
            Console.WriteLine(Program._fmtTop(Program.compute_bridges(Program.get_demo_graph(1))));
            Console.WriteLine(Program._fmtTop(Program.compute_bridges(Program.get_demo_graph(2))));
            Console.WriteLine(Program._fmtTop(Program.compute_bridges(Program.get_demo_graph(3))));
            Console.WriteLine(Program._fmtTop(Program.compute_bridges(new Dictionary<long, long[]>{})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
