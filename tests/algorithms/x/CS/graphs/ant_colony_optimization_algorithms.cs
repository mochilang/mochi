// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<long, long[]> cities_75 = new Dictionary<long, long[]>{{0, new long[]{0, 0}}, {1, new long[]{0, 5}}, {2, new long[]{3, 8}}, {3, new long[]{8, 10}}, {4, new long[]{12, 8}}, {5, new long[]{12, 4}}, {6, new long[]{8, 0}}, {7, new long[]{6, 2}}};
    public static double sqrtApprox(double x_0) {
        double guess_1 = (x_0 / 2.0);
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double rand_float() {
        return (Convert.ToDouble(_mod(_now(), 1000000)) / 1000000.0);
    }

    public static double pow_float(double base_3, double exp_4) {
        double result_5 = 1.0;
        long i_6 = 0;
        long e_7 = (long)(exp_4);
        while ((i_6 < e_7)) {
            result_5 = (result_5 * base_3);
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static double distance(long[] city1_8, long[] city2_9) {
        double dx_10 = Convert.ToDouble((_idx(city1_8, 0) - _idx(city2_9, 0)));
        double dy_11 = Convert.ToDouble((_idx(city1_8, 1) - _idx(city2_9, 1)));
        return Program.sqrtApprox(((dx_10 * dx_10) + (dy_11 * dy_11)));
    }

    public static long choose_weighted(long[] options_12, double[] weights_13) {
        double total_14 = 0.0;
        long i_15 = 0;
        while ((i_15 < weights_13.Length)) {
            total_14 = (total_14 + _idx(weights_13, i_15));
            i_15 = (i_15 + 1);
        };
        double r_16 = (Program.rand_float() * total_14);
        double accum_17 = 0.0;
        i_15 = 0;
        while ((i_15 < weights_13.Length)) {
            accum_17 = (accum_17 + _idx(weights_13, i_15));
            if ((r_16 <= accum_17)) {
                return _idx(options_12, i_15);
            }
            i_15 = (i_15 + 1);
        };
        return _idx(options_12, (options_12.Length - 1));
    }

    public static long city_select(double[][] pheromone_18, long current_19, long[] unvisited_20, double alpha_21, double beta_22, Dictionary<long, long[]> cities_23) {
        double[] probs_24 = new double[]{};
        long i_25 = 0;
        while ((i_25 < unvisited_20.Length)) {
            long city_26 = _idx(unvisited_20, i_25);
            double dist_27 = Program.distance((cities_23.ContainsKey(city_26) ? cities_23[city_26] : null), (cities_23.ContainsKey(current_19) ? cities_23[current_19] : null));
            double trail_28 = _idx(_idx(pheromone_18, city_26), current_19);
            double prob_29 = (Program.pow_float(trail_28, alpha_21) * Program.pow_float((1.0 / dist_27), beta_22));
            probs_24 = ((Func<double[]>)(() => { var _tmp = probs_24.ToList(); _tmp.Add(prob_29); return _tmp.ToArray(); }))();
            i_25 = (i_25 + 1);
        };
        return Program.choose_weighted(unvisited_20, probs_24);
    }

    public static double[][] pheromone_update(double[][] pheromone_30, Dictionary<long, long[]> cities_31, double evaporation_32, long[][] ants_route_33, double q_34) {
        long n_35 = pheromone_30.Length;
        long i_36 = 0;
        while ((i_36 < n_35)) {
            long j_37 = 0;
            while ((j_37 < n_35)) {
                _idx(pheromone_30, i_36)[(int)(j_37)] = (_idx(_idx(pheromone_30, i_36), j_37) * evaporation_32);
                j_37 = (j_37 + 1);
            }
            i_36 = (i_36 + 1);
        };
        long a_38 = 0;
        while ((a_38 < ants_route_33.Length)) {
            long[] route_39 = _idx(ants_route_33, a_38);
            double total_40 = 0.0;
            long r_41 = 0;
            while ((r_41 < (route_39.Length - 1))) {
                total_40 = (total_40 + Program.distance((cities_31.ContainsKey(_idx(route_39, r_41)) ? cities_31[_idx(route_39, r_41)] : null), (cities_31.ContainsKey(_idx(route_39, (r_41 + 1))) ? cities_31[_idx(route_39, (r_41 + 1))] : null)));
                r_41 = (r_41 + 1);
            }
            double delta_42 = (q_34 / total_40);
            r_41 = 0;
            while ((r_41 < (route_39.Length - 1))) {
                long u_43 = _idx(route_39, r_41);
                long v_44 = _idx(route_39, (r_41 + 1));
                _idx(pheromone_30, u_43)[(int)(v_44)] = (_idx(_idx(pheromone_30, u_43), v_44) + delta_42);
                _idx(pheromone_30, v_44)[(int)(u_43)] = _idx(_idx(pheromone_30, u_43), v_44);
                r_41 = (r_41 + 1);
            }
            a_38 = (a_38 + 1);
        };
        return pheromone_30;
    }

    public static long[] remove_value(long[] lst_45, long val_46) {
        long[] res_47 = new long[]{};
        long i_48 = 0;
        while ((i_48 < lst_45.Length)) {
            if ((_idx(lst_45, i_48) != val_46)) {
                res_47 = ((Func<long[]>)(() => { var _tmp = res_47.ToList(); _tmp.Add(_idx(lst_45, i_48)); return _tmp.ToArray(); }))();
            }
            i_48 = (i_48 + 1);
        };
        return res_47;
    }

    public static void ant_colony(Dictionary<long, long[]> cities_49, long ants_num_50, long iterations_51, double evaporation_52, double alpha_53, double beta_54, double q_55) {
        long n_56 = cities_49.Count;
        double[][] pheromone_57 = new double[][]{};
        long i_58 = 0;
        while ((i_58 < n_56)) {
            double[] row_59 = new double[]{};
            long j_60 = 0;
            while ((j_60 < n_56)) {
                row_59 = ((Func<double[]>)(() => { var _tmp = row_59.ToList(); _tmp.Add(1.0); return _tmp.ToArray(); }))();
                j_60 = (j_60 + 1);
            }
            pheromone_57 = ((Func<double[][]>)(() => { var _tmp = pheromone_57.ToList(); _tmp.Add(row_59); return _tmp.ToArray(); }))();
            i_58 = (i_58 + 1);
        };
        long[] best_path_61 = new long[]{};
        double best_distance_62 = 1000000000.0;
        long iter_63 = 0;
        while ((iter_63 < iterations_51)) {
            long[][] ants_route_64 = new long[][]{};
            long k_65 = 0;
            while ((k_65 < ants_num_50)) {
                long[] route_66 = new long[]{0};
                long[] unvisited_67 = new long[]{};
                foreach (long key_68 in cities_49.Keys) {
                    if ((key_68 != 0)) {
                        unvisited_67 = ((Func<long[]>)(() => { var _tmp = unvisited_67.ToList(); _tmp.Add(key_68); return _tmp.ToArray(); }))();
                    }
                }
                long current_69 = 0;
                while ((unvisited_67.Length > 0)) {
                    long next_city_70 = Program.city_select(pheromone_57, current_69, unvisited_67, alpha_53, beta_54, cities_49);
                    route_66 = ((Func<long[]>)(() => { var _tmp = route_66.ToList(); _tmp.Add(next_city_70); return _tmp.ToArray(); }))();
                    unvisited_67 = Program.remove_value(unvisited_67, next_city_70);
                    current_69 = next_city_70;
                }
                route_66 = ((Func<long[]>)(() => { var _tmp = route_66.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                ants_route_64 = ((Func<long[][]>)(() => { var _tmp = ants_route_64.ToList(); _tmp.Add(route_66); return _tmp.ToArray(); }))();
                k_65 = (k_65 + 1);
            }
            pheromone_57 = Program.pheromone_update(pheromone_57, cities_49, evaporation_52, ants_route_64, q_55);
            long a_71 = 0;
            while ((a_71 < ants_route_64.Length)) {
                long[] route_72 = _idx(ants_route_64, a_71);
                double dist_73 = 0.0;
                long r_74 = 0;
                while ((r_74 < (route_72.Length - 1))) {
                    dist_73 = (dist_73 + Program.distance((cities_49.ContainsKey(_idx(route_72, r_74)) ? cities_49[_idx(route_72, r_74)] : null), (cities_49.ContainsKey(_idx(route_72, (r_74 + 1))) ? cities_49[_idx(route_72, (r_74 + 1))] : null)));
                    r_74 = (r_74 + 1);
                }
                if ((dist_73 < best_distance_62)) {
                    best_distance_62 = dist_73;
                    best_path_61 = route_72;
                }
                a_71 = (a_71 + 1);
            }
            iter_63 = (iter_63 + 1);
        };
        Console.WriteLine(Program._fmtTop(("best_path = " + _fmtStr(best_path_61))));
        Console.WriteLine(Program._fmtTop(("best_distance = " + _fmtStr(best_distance_62))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.ant_colony(cities_75, 10, 20, 0.69999999999999996, 1.0, 5.0, 10.0);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
