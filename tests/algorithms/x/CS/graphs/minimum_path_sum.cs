// Generated by Mochi 0.10.59 on 2025-08-07 08:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] grid1_10 = new long[][]{new long[]{1, 3, 1}, new long[]{1, 5, 1}, new long[]{4, 2, 1}};
    public static long[] fill_row(long[] current_row_0, long[] row_above_1) {
        current_row_0[0] = (current_row_0[(int)(0)] + row_above_1[(int)(0)]);
        long cell_n_2 = 1;
        while ((cell_n_2 < current_row_0.Length)) {
            long left_3 = current_row_0[(int)((cell_n_2 - 1))];
            long up_4 = row_above_1[(int)(cell_n_2)];
            if ((left_3 < up_4)) {
                current_row_0[cell_n_2] = (current_row_0[(int)(cell_n_2)] + left_3);
            } else {
                current_row_0[cell_n_2] = (current_row_0[(int)(cell_n_2)] + up_4);
            }
            cell_n_2 = (cell_n_2 + 1);
        };
        return current_row_0;
    }

    public static long min_path_sum(long[][] grid_5) {
        if (((grid_5.Length == 0) || (grid_5[(int)(0)].Length == 0))) {
            throw new Exception("The grid does not contain the appropriate information");
        };
        long cell_n_6 = 1;
        while ((cell_n_6 < grid_5[(int)(0)].Length)) {
            grid_5[(int)(0)][cell_n_6] = (grid_5[(int)(0)][(int)(cell_n_6)] + grid_5[(int)(0)][(int)((cell_n_6 - 1))]);
            cell_n_6 = (cell_n_6 + 1);
        };
        long[] row_above_7 = grid_5[(int)(0)];
        long row_n_8 = 1;
        while ((row_n_8 < grid_5.Length)) {
            long[] current_row_9 = grid_5[(int)(row_n_8)];
            grid_5[row_n_8] = Program.fill_row(current_row_9, row_above_7);
            row_above_7 = grid_5[(int)(row_n_8)];
            row_n_8 = (row_n_8 + 1);
        };
        return grid_5[(int)((grid_5.Length - 1))][(int)((grid_5[(int)(0)].Length - 1))];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_path_sum(grid1_10))));
            long[][] grid2_11 = new long[][]{new long[]{1, 0, 5, 6, 7}, new long[]{8, 9, 0, 4, 2}, new long[]{4, 4, 4, 5, 1}, new long[]{9, 6, 3, 1, 0}, new long[]{8, 4, 3, 2, 7}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_path_sum(grid2_11))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
