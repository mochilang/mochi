// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Result {
    public string name;
    public double value;
    public override string ToString() => $"Result {{name = \"{name}\", value = {value.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Result r1_5 = Program.shear_stress(25.0, 100.0, 0.0);
    public static Result shear_stress(double stress_0, double tangential_force_1, double area_2) {
        long zeros_3 = 0;
        if ((stress_0 == 0.0)) {
            zeros_3 = (zeros_3 + 1);
        };
        if ((tangential_force_1 == 0.0)) {
            zeros_3 = (zeros_3 + 1);
        };
        if ((area_2 == 0.0)) {
            zeros_3 = (zeros_3 + 1);
        };
        if ((zeros_3 != 1)) {
            throw new Exception("You cannot supply more or less than 2 values");
        } else if ((stress_0 < 0.0)) {
            throw new Exception("Stress cannot be negative");
        } else if ((tangential_force_1 < 0.0)) {
            throw new Exception("Tangential Force cannot be negative");
        } else if ((area_2 < 0.0)) {
            throw new Exception("Area cannot be negative");
        } else if ((stress_0 == 0.0)) {
            return new Result{name = "stress", value = (tangential_force_1 / area_2)};
        } else if ((tangential_force_1 == 0.0)) {
            return new Result{name = "tangential_force", value = (stress_0 * area_2)};
        } else {
            return new Result{name = "area", value = (tangential_force_1 / stress_0)};
        };
        return default(Result);
    }

    public static string str_result(Result r_4) {
        return (((("Result(name='" + r_4.name) + "', value=") + _fmtStr(r_4.value)) + ")");
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.str_result(r1_5)));
            Result r2_6 = Program.shear_stress(0.0, 1600.0, 200.0);
            Console.WriteLine(Program._fmtTop(Program.str_result(r2_6)));
            Result r3_7 = Program.shear_stress(1000.0, 0.0, 1200.0);
            Console.WriteLine(Program._fmtTop(Program.str_result(r3_7)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
