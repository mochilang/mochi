// Generated by Mochi 0.10.64 (commit 0529231fcf) on 2025-08-12 11:18 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.141592653589793;
    static double REDUCED_PLANCK_CONSTANT_1 = 1.054571817e-34;
    static double SPEED_OF_LIGHT_2 = 3e08;
    public static double sqrtApprox(double x_3) {
        if ((x_3 <= 0.0)) {
            return 0.0;
        };
        double guess_4 = x_3;
        long i_5 = 0;
        while ((i_5 < 100)) {
            guess_4 = ((guess_4 + (x_3 / guess_4)) / 2.0);
            i_5 = (i_5 + 1);
        };
        return guess_4;
    }

    public static Dictionary<string, double> casimir_force(double force_6, double area_7, double distance_8) {
        long zero_count_9 = 0;
        if ((force_6 == 0.0)) {
            zero_count_9 = (zero_count_9 + 1);
        };
        if ((area_7 == 0.0)) {
            zero_count_9 = (zero_count_9 + 1);
        };
        if ((distance_8 == 0.0)) {
            zero_count_9 = (zero_count_9 + 1);
        };
        if ((zero_count_9 != 1)) {
            throw new Exception("One and only one argument must be 0");
        };
        if ((force_6 < 0.0)) {
            throw new Exception("Magnitude of force can not be negative");
        };
        if ((distance_8 < 0.0)) {
            throw new Exception("Distance can not be negative");
        };
        if ((area_7 < 0.0)) {
            throw new Exception("Area can not be negative");
        };
        if ((force_6 == 0.0)) {
            double num_10 = ((((REDUCED_PLANCK_CONSTANT_1 * SPEED_OF_LIGHT_2) * PI_0) * PI_0) * area_7);
            double den_11 = ((((240.0 * distance_8) * distance_8) * distance_8) * distance_8);
            double f_12 = (num_10 / den_11);
            return new Dictionary<string, double>{{"force", f_12}};
        };
        if ((area_7 == 0.0)) {
            double num_13 = (((((240.0 * force_6) * distance_8) * distance_8) * distance_8) * distance_8);
            double den_14 = (((REDUCED_PLANCK_CONSTANT_1 * SPEED_OF_LIGHT_2) * PI_0) * PI_0);
            double a_15 = (num_13 / den_14);
            return new Dictionary<string, double>{{"area", a_15}};
        };
        double num_16 = ((((REDUCED_PLANCK_CONSTANT_1 * SPEED_OF_LIGHT_2) * PI_0) * PI_0) * area_7);
        double den_17 = (240.0 * force_6);
        double inner_18 = (num_16 / den_17);
        double d_19 = Program.sqrtApprox(Program.sqrtApprox(inner_18));
        return new Dictionary<string, double>{{"distance", d_19}};
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.casimir_force(0.0, 4.0, 0.03))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.casimir_force(2.635e-10, 0.0023, 0.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.casimir_force(2.737e-18, 0.0, 0.0023746))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
