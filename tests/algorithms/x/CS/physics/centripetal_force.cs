// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double centripetal(double mass_0, double velocity_1, double radius_2) {
        if ((mass_0 < 0.0)) {
            throw new Exception("The mass of the body cannot be negative");
        };
        if ((radius_2 <= 0.0)) {
            throw new Exception("The radius is always a positive non zero integer");
        };
        return (((mass_0 * velocity_1) * velocity_1) / radius_2);
    }

    public static double floor(double x_3) {
        long i_4 = (long)(x_3);
        if ((Convert.ToDouble(i_4) > x_3)) {
            i_4 = (i_4 - 1);
        };
        return Convert.ToDouble(i_4);
    }

    public static double pow10(long n_5) {
        double p_6 = 1.0;
        long i_7 = 0;
        while ((i_7 < n_5)) {
            p_6 = (p_6 * 10.0);
            i_7 = (i_7 + 1);
        };
        return p_6;
    }

    public static double round(double x_8, long n_9) {
        double m_10 = Program.pow10(n_9);
        return (Program.floor(((x_8 * m_10) + 0.5)) / m_10);
    }

    public static void show(double mass_11, double velocity_12, double radius_13) {
        double f_14 = Program.centripetal(mass_11, velocity_12, radius_13);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.round(f_14, 2))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.show(15.5, -30.0, 10.0);
            Program.show(10.0, 15.0, 5.0);
            Program.show(20.0, -50.0, 15.0);
            Program.show(12.25, 40.0, 25.0);
            Program.show(50.0, 100.0, 50.0);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
