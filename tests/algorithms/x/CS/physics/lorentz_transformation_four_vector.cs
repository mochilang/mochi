// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double c_0 = 2.99792458e08;
    public static double sqrtApprox(double x_1) {
        if ((x_1 <= 0.0)) {
            return 0.0;
        };
        double guess_2 = (x_1 / 2.0);
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double beta(double velocity_4) {
        if ((velocity_4 > c_0)) {
            throw new Exception("Speed must not exceed light speed 299,792,458 [m/s]!");
        };
        if ((velocity_4 < 1.0)) {
            throw new Exception("Speed must be greater than or equal to 1!");
        };
        return (velocity_4 / c_0);
    }

    public static double gamma(double velocity_5) {
        double b_6 = Program.beta(velocity_5);
        return (1.0 / Program.sqrtApprox((1.0 - (b_6 * b_6))));
    }

    public static double[][] transformation_matrix(double velocity_7) {
        double g_8 = Program.gamma(velocity_7);
        double b_9 = Program.beta(velocity_7);
        return new double[][]{new double[]{g_8, (-g_8 * b_9), 0.0, 0.0}, new double[]{(-g_8 * b_9), g_8, 0.0, 0.0}, new double[]{0.0, 0.0, 1.0, 0.0}, new double[]{0.0, 0.0, 0.0, 1.0}};
    }

    public static double[] mat_vec_mul(double[][] mat_10, double[] vec_11) {
        double[] res_12 = new double[]{};
        long i_13 = 0;
        while ((i_13 < 4)) {
            double[] row_14 = _idx(mat_10, i_13);
            double value_15 = ((((_idx(row_14, 0) * _idx(vec_11, 0)) + (_idx(row_14, 1) * _idx(vec_11, 1))) + (_idx(row_14, 2) * _idx(vec_11, 2))) + (_idx(row_14, 3) * _idx(vec_11, 3)));
            res_12 = (res_12.Concat(new double[]{value_15}).ToArray());
            i_13 = (i_13 + 1);
        };
        return res_12;
    }

    public static double[] transform(double velocity_16, double[] event_17) {
        double g_18 = Program.gamma(velocity_16);
        double b_19 = Program.beta(velocity_16);
        double ct_20 = (_idx(event_17, 0) * c_0);
        double x_21 = _idx(event_17, 1);
        return new double[]{((g_18 * ct_20) - ((g_18 * b_19) * x_21)), (((-g_18 * b_19) * ct_20) + (g_18 * x_21)), _idx(event_17, 2), _idx(event_17, 3)};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.beta(c_0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.beta(1.99792458e08))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.beta(100000.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.gamma(4.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.gamma(100000.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.gamma(3e07))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.transformation_matrix(2.9979245e07))));
            double[] v_22 = Program.transform(2.9979245e07, new double[]{1.0, 2.0, 3.0, 4.0});
            Console.WriteLine(Program._fmtTop(_fmtStr(v_22)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
