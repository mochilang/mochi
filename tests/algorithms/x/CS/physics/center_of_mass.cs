// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Particle {
    public double x;
    public double y;
    public double z;
    public double mass;
    public override string ToString() => $"Particle {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}, mass = {mass.ToString("0.0")}}}";
}
class Coord3D {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"Coord3D {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Coord3D r1_15 = Program.center_of_mass(new Particle[]{new Particle{x = 1.5, y = 4.0, z = 3.4, mass = 4.0}, new Particle{x = 5.0, y = 6.8, z = 7.0, mass = 8.1}, new Particle{x = 9.4, y = 10.1, z = 11.6, mass = 12.0}});
    public static double round2(double x_0) {
        double scaled_1 = (x_0 * 100.0);
        double rounded_2 = Convert.ToDouble((long)((scaled_1 + 0.5)));
        return (rounded_2 / 100.0);
    }

    public static Coord3D center_of_mass(Particle[] ps_3) {
        if ((ps_3.Length == 0)) {
            throw new Exception("No particles provided");
        };
        long i_4 = 0;
        double total_mass_5 = 0.0;
        while ((i_4 < ps_3.Length)) {
            Particle p_6 = ps_3[(int)(i_4)];
            if ((p_6.mass <= 0.0)) {
                throw new Exception("Mass of all particles must be greater than 0");
            }
            total_mass_5 = (total_mass_5 + p_6.mass);
            i_4 = (i_4 + 1);
        };
        double sum_x_7 = 0.0;
        double sum_y_8 = 0.0;
        double sum_z_9 = 0.0;
        i_4 = 0;
        while ((i_4 < ps_3.Length)) {
            Particle p_10 = ps_3[(int)(i_4)];
            sum_x_7 = (sum_x_7 + (p_10.x * p_10.mass));
            sum_y_8 = (sum_y_8 + (p_10.y * p_10.mass));
            sum_z_9 = (sum_z_9 + (p_10.z * p_10.mass));
            i_4 = (i_4 + 1);
        };
        double cm_x_11 = Program.round2((sum_x_7 / total_mass_5));
        double cm_y_12 = Program.round2((sum_y_8 / total_mass_5));
        double cm_z_13 = Program.round2((sum_z_9 / total_mass_5));
        return new Coord3D{x = cm_x_11, y = cm_y_12, z = cm_z_13};
    }

    public static string coord_to_string(Coord3D c_14) {
        return (((((("Coord3D(x=" + _fmtStr(c_14.x)) + ", y=") + _fmtStr(c_14.y)) + ", z=") + _fmtStr(c_14.z)) + ")");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.coord_to_string(r1_15)));
            Coord3D r2_16 = Program.center_of_mass(new Particle[]{new Particle{x = 1.0, y = 2.0, z = 3.0, mass = 4.0}, new Particle{x = 5.0, y = 6.0, z = 7.0, mass = 8.0}, new Particle{x = 9.0, y = 10.0, z = 11.0, mass = 12.0}});
            Console.WriteLine(Program._fmtTop(Program.coord_to_string(r2_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
