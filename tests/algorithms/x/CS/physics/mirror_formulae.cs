// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double abs_float(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static bool isclose(double a_1, double b_2, double tolerance_3) {
        return (Program.abs_float((a_1 - b_2)) < tolerance_3);
    }

    public static double focal_length(double distance_of_object_4, double distance_of_image_5) {
        if (((distance_of_object_4 == 0.0) || (distance_of_image_5 == 0.0))) {
            throw new Exception("Invalid inputs. Enter non zero values with respect to the sign convention.");
        };
        return (1.0 / ((1.0 / distance_of_object_4) + (1.0 / distance_of_image_5)));
    }

    public static double object_distance(double focal_length_6, double distance_of_image_7) {
        if (((distance_of_image_7 == 0.0) || (focal_length_6 == 0.0))) {
            throw new Exception("Invalid inputs. Enter non zero values with respect to the sign convention.");
        };
        return (1.0 / ((1.0 / focal_length_6) - (1.0 / distance_of_image_7)));
    }

    public static double image_distance(double focal_length_8, double distance_of_object_9) {
        if (((distance_of_object_9 == 0.0) || (focal_length_8 == 0.0))) {
            throw new Exception("Invalid inputs. Enter non zero values with respect to the sign convention.");
        };
        return (1.0 / ((1.0 / focal_length_8) - (1.0 / distance_of_object_9)));
    }

    public static void test_focal_length() {
        double f1_10 = Program.focal_length(10.0, 20.0);
        if ((!Program.isclose(f1_10, 6.66666666666666, 1e-08))) {
            throw new Exception("focal_length test1 failed");
        };
        double f2_11 = Program.focal_length(9.5, 6.7);
        if ((!Program.isclose(f2_11, 3.929012346, 1e-08))) {
            throw new Exception("focal_length test2 failed");
        };
    }

    public static void test_object_distance() {
        double u1_12 = Program.object_distance(30.0, 20.0);
        if ((!Program.isclose(u1_12, -60.0, 1e-08))) {
            throw new Exception("object_distance test1 failed");
        };
        double u2_13 = Program.object_distance(10.5, 11.7);
        if ((!Program.isclose(u2_13, 102.375, 1e-08))) {
            throw new Exception("object_distance test2 failed");
        };
    }

    public static void test_image_distance() {
        double v1_14 = Program.image_distance(10.0, 40.0);
        if ((!Program.isclose(v1_14, 13.33333333, 1e-08))) {
            throw new Exception("image_distance test1 failed");
        };
        double v2_15 = Program.image_distance(1.5, 6.7);
        if ((!Program.isclose(v2_15, 1.932692308, 1e-08))) {
            throw new Exception("image_distance test2 failed");
        };
    }

    public static void main() {
        Program.test_focal_length();
        Program.test_object_distance();
        Program.test_image_distance();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.focal_length(10.0, 20.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.object_distance(30.0, 20.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.image_distance(10.0, 40.0))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
