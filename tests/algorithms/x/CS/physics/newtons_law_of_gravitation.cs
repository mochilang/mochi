// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Result {
    public string kind;
    public double value;
    public override string ToString() => $"Result {{kind = \"{kind}\", value = {value.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double GRAVITATIONAL_CONSTANT_0 = 6.6743e-11;
    static Result r1_14 = Program.gravitational_law(0.0, 5.0, 10.0, 20.0);
    static Result r2_15 = Program.gravitational_law(7367.382, 0.0, 74.0, 3048.0);
    static Result r3_16 = Program.gravitational_law(100.0, 5.0, 0.0, 3.0);
    static Result r4_17 = Program.gravitational_law(100.0, 5.0, 10.0, 0.0);
    public static double sqrtApprox(double x_1) {
        double guess_2 = (x_1 / 2.0);
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static Result gravitational_law(double force_4, double mass_1_5, double mass_2_6, double distance_7) {
        long zero_count_8 = 0;
        if ((force_4 == 0.0)) {
            zero_count_8 = (zero_count_8 + 1);
        };
        if ((mass_1_5 == 0.0)) {
            zero_count_8 = (zero_count_8 + 1);
        };
        if ((mass_2_6 == 0.0)) {
            zero_count_8 = (zero_count_8 + 1);
        };
        if ((distance_7 == 0.0)) {
            zero_count_8 = (zero_count_8 + 1);
        };
        if ((zero_count_8 != 1)) {
            throw new Exception("One and only one argument must be 0");
        };
        if ((force_4 < 0.0)) {
            throw new Exception("Gravitational force can not be negative");
        };
        if ((distance_7 < 0.0)) {
            throw new Exception("Distance can not be negative");
        };
        if ((mass_1_5 < 0.0)) {
            throw new Exception("Mass can not be negative");
        };
        if ((mass_2_6 < 0.0)) {
            throw new Exception("Mass can not be negative");
        };
        double product_of_mass_9 = (mass_1_5 * mass_2_6);
        if ((force_4 == 0.0)) {
            double f_10 = ((GRAVITATIONAL_CONSTANT_0 * product_of_mass_9) / (distance_7 * distance_7));
            return new Result{kind = "force", value = f_10};
        };
        if ((mass_1_5 == 0.0)) {
            double m1_11 = ((force_4 * (distance_7 * distance_7)) / (GRAVITATIONAL_CONSTANT_0 * mass_2_6));
            return new Result{kind = "mass_1", value = m1_11};
        };
        if ((mass_2_6 == 0.0)) {
            double m2_12 = ((force_4 * (distance_7 * distance_7)) / (GRAVITATIONAL_CONSTANT_0 * mass_1_5));
            return new Result{kind = "mass_2", value = m2_12};
        };
        double d_13 = Program.sqrtApprox(((GRAVITATIONAL_CONSTANT_0 * product_of_mass_9) / force_4));
        return new Result{kind = "distance", value = d_13};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((r1_14.kind + " ") + _fmtStr(r1_14.value))));
            Console.WriteLine(Program._fmtTop(((r2_15.kind + " ") + _fmtStr(r2_15.value))));
            Console.WriteLine(Program._fmtTop(((r3_16.kind + " ") + _fmtStr(r3_16.value))));
            Console.WriteLine(Program._fmtTop(((r4_17.kind + " ") + _fmtStr(r4_17.value))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
