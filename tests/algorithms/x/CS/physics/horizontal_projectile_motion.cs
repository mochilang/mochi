// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.1415926535897931;
    static double TWO_PI_1 = 6.2831853071795862;
    static double g_2 = 9.8066499999999994;
    static double v0_33 = 25.0;
    static double angle_34 = 20.0;
    public static double _mod(double x_3, double m_4) {
        return (x_3 - (Convert.ToDouble(_atoi((x_3 / m_4))) * m_4));
    }

    public static double sin(double x_5) {
        double y_6 = (Program._mod((x_5 + PI_0), TWO_PI_1) - PI_0);
        double y2_7 = (y_6 * y_6);
        double y3_8 = (y2_7 * y_6);
        double y5_9 = (y3_8 * y2_7);
        double y7_10 = (y5_9 * y2_7);
        return (((y_6 - (y3_8 / 6.0)) + (y5_9 / 120.0)) - (y7_10 / 5040.0));
    }

    public static double deg_to_rad(double deg_11) {
        return ((deg_11 * PI_0) / 180.0);
    }

    public static double floor(double x_12) {
        long i_13 = (long)(x_12);
        if ((Convert.ToDouble(i_13) > x_12)) {
            i_13 = (i_13 - 1);
        };
        return Convert.ToDouble(i_13);
    }

    public static double pow10(long n_14) {
        double result_15 = 1.0;
        long i_16 = 0;
        while ((i_16 < n_14)) {
            result_15 = (result_15 * 10.0);
            i_16 = (i_16 + 1);
        };
        return result_15;
    }

    public static double round(double x_17, long n_18) {
        double m_19 = Math.Pow(10.0, n_18);
        double y_20 = Program.floor(((x_17 * m_19) + 0.5));
        return (y_20 / m_19);
    }

    public static void check_args(double init_velocity_21, double angle_22) {
        if (((angle_22 > 90.0) || (angle_22 < 1.0))) {
            throw new Exception("Invalid angle. Range is 1-90 degrees.");
        };
        if ((init_velocity_21 < 0.0)) {
            throw new Exception("Invalid velocity. Should be a positive number.");
        };
    }

    public static double horizontal_distance(double init_velocity_23, double angle_24) {
        Program.check_args(init_velocity_23, angle_24);
        double radians_25 = Program.deg_to_rad((2.0 * angle_24));
        return Program.round((((init_velocity_23 * init_velocity_23) * Program.sin(radians_25)) / g_2), 2);
    }

    public static double max_height(double init_velocity_26, double angle_27) {
        Program.check_args(init_velocity_26, angle_27);
        double radians_28 = Program.deg_to_rad(angle_27);
        double s_29 = Program.sin(radians_28);
        return Program.round(((((init_velocity_26 * init_velocity_26) * s_29) * s_29) / (2.0 * g_2)), 2);
    }

    public static double total_time(double init_velocity_30, double angle_31) {
        Program.check_args(init_velocity_30, angle_31);
        double radians_32 = Program.deg_to_rad(angle_31);
        return Program.round((((2.0 * init_velocity_30) * Program.sin(radians_32)) / g_2), 2);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.horizontal_distance(v0_33, angle_34)));
            Console.WriteLine(Program._fmtTop(Program.max_height(v0_33, angle_34)));
            Console.WriteLine(Program._fmtTop(Program.total_time(v0_33, angle_34)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
