// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.141592653589793;
    static double R_1 = 8.31446261815324;
    public static double sqrt(double x_2) {
        if ((x_2 <= 0.0)) {
            return 0.0;
        };
        double guess_3 = x_2;
        long i_4 = 0;
        while ((i_4 < 20)) {
            guess_3 = ((guess_3 + (x_2 / guess_3)) / 2.0);
            i_4 = (i_4 + 1);
        };
        return guess_3;
    }

    public static double avg_speed_of_molecule(double temperature_5, double molar_mass_6) {
        if ((temperature_5 < 0.0)) {
            throw new Exception("Absolute temperature cannot be less than 0 K");
        };
        if ((molar_mass_6 <= 0.0)) {
            throw new Exception("Molar mass should be greater than 0 kg/mol");
        };
        double expr_7 = (((8.0 * R_1) * temperature_5) / (PI_0 * molar_mass_6));
        double s_8 = Program.sqrt(expr_7);
        return s_8;
    }

    public static double mps_speed_of_molecule(double temperature_9, double molar_mass_10) {
        if ((temperature_9 < 0.0)) {
            throw new Exception("Absolute temperature cannot be less than 0 K");
        };
        if ((molar_mass_10 <= 0.0)) {
            throw new Exception("Molar mass should be greater than 0 kg/mol");
        };
        double expr_11 = (((2.0 * R_1) * temperature_9) / molar_mass_10);
        double s_12 = Program.sqrt(expr_11);
        return s_12;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.avg_speed_of_molecule(273.0, 0.028))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.avg_speed_of_molecule(300.0, 0.032))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.mps_speed_of_molecule(273.0, 0.028))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.mps_speed_of_molecule(300.0, 0.032))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
