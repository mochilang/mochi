// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double pow10(long n_0) {
        double p_1 = 1.0;
        long k_2 = 0;
        if ((n_0 >= 0)) {
            while ((k_2 < n_0)) {
                p_1 = (p_1 * 10.0);
                k_2 = (k_2 + 1);
            }
        } else {
            long m_3 = -n_0;
            while ((k_2 < m_3)) {
                p_1 = (p_1 / 10.0);
                k_2 = (k_2 + 1);
            }
        };
        return p_1;
    }

    public static double sqrt_newton(double n_4) {
        if ((n_4 == 0.0)) {
            return 0.0;
        };
        double x_5 = n_4;
        long j_6 = 0;
        while ((j_6 < 20)) {
            x_5 = ((x_5 + (n_4 / x_5)) / 2.0);
            j_6 = (j_6 + 1);
        };
        return x_5;
    }

    public static double round3(double x_7) {
        double y_8 = ((x_7 * 1000.0) + 0.5);
        long yi_9 = (long)(y_8);
        if ((Convert.ToDouble(yi_9) > y_8)) {
            yi_9 = (yi_9 - 1);
        };
        return (Convert.ToDouble(yi_9) / 1000.0);
    }

    public static double escape_velocity(double mass_10, double radius_11) {
        if ((radius_11 == 0.0)) {
            throw new Exception("Radius cannot be zero.");
        };
        double G_12 = (6.6742999999999997 * Math.Pow(10.0, -11));
        double velocity_13 = Program.sqrt_newton((((2.0 * G_12) * mass_10) / radius_11));
        return Program.round3(velocity_13);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.escape_velocity((5.9720000000000004 * Math.Pow(10.0, 24)), (6.3710000000000004 * Math.Pow(10.0, 6)))));
            Console.WriteLine(Program._fmtTop(Program.escape_velocity((7.3479999999999999 * Math.Pow(10.0, 22)), (1.7370000000000001 * Math.Pow(10.0, 6)))));
            Console.WriteLine(Program._fmtTop(Program.escape_velocity((1.8979999999999999 * Math.Pow(10.0, 27)), (6.9911000000000003 * Math.Pow(10.0, 7)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
