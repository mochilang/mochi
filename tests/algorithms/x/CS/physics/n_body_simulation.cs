// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Body {
    public double position_x;
    public double position_y;
    public double velocity_x;
    public double velocity_y;
    public double mass;
    public override string ToString() => $"Body {{position_x = {position_x.ToString("0.0")}, position_y = {position_y.ToString("0.0")}, velocity_x = {velocity_x.ToString("0.0")}, velocity_y = {velocity_y.ToString("0.0")}, mass = {mass.ToString("0.0")}}}";
}
class BodySystem {
    public Body[] bodies;
    public double gravitation_constant;
    public double time_factor;
    public double softening_factor;
    public override string ToString() => $"BodySystem {{bodies = {bodies}, gravitation_constant = {gravitation_constant.ToString("0.0")}, time_factor = {time_factor.ToString("0.0")}, softening_factor = {softening_factor.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static Body make_body(double px_0, double py_1, double vx_2, double vy_3, double mass_4) {
        return new Body{position_x = px_0, position_y = py_1, velocity_x = vx_2, velocity_y = vy_3, mass = mass_4};
    }

    public static Body update_velocity(Body body_5, double force_x_6, double force_y_7, double delta_time_8) {
        body_5.velocity_x = (body_5.velocity_x + (force_x_6 * delta_time_8));
        body_5.velocity_y = (body_5.velocity_y + (force_y_7 * delta_time_8));
        return body_5;
    }

    public static Body update_position(Body body_9, double delta_time_10) {
        body_9.position_x = (body_9.position_x + (body_9.velocity_x * delta_time_10));
        body_9.position_y = (body_9.position_y + (body_9.velocity_y * delta_time_10));
        return body_9;
    }

    public static BodySystem make_body_system(Body[] bodies_11, double g_12, double tf_13, double sf_14) {
        return new BodySystem{bodies = bodies_11, gravitation_constant = g_12, time_factor = tf_13, softening_factor = sf_14};
    }

    public static double sqrtApprox(double x_15) {
        double guess_16 = (x_15 / 2.0);
        long i_17 = 0;
        while ((i_17 < 20)) {
            guess_16 = ((guess_16 + (x_15 / guess_16)) / 2.0);
            i_17 = (i_17 + 1);
        };
        return guess_16;
    }

    public static BodySystem update_system(BodySystem system_18, double delta_time_19) {
        Body[] bodies_20 = system_18.bodies;
        long i_21 = 0;
        while ((i_21 < bodies_20.Length)) {
            Body body1_22 = bodies_20[(int)(i_21)];
            double force_x_23 = 0.0;
            double force_y_24 = 0.0;
            long j_25 = 0;
            while ((j_25 < bodies_20.Length)) {
                if ((i_21 != j_25)) {
                    Body body2_26 = bodies_20[(int)(j_25)];
                    double dif_x_27 = (body2_26.position_x - body1_22.position_x);
                    double dif_y_28 = (body2_26.position_y - body1_22.position_y);
                    double distance_sq_29 = (((dif_x_27 * dif_x_27) + (dif_y_28 * dif_y_28)) + system_18.softening_factor);
                    double distance_30 = Program.sqrtApprox(distance_sq_29);
                    double denom_31 = ((distance_30 * distance_30) * distance_30);
                    force_x_23 = (force_x_23 + (((system_18.gravitation_constant * body2_26.mass) * dif_x_27) / denom_31));
                    force_y_24 = (force_y_24 + (((system_18.gravitation_constant * body2_26.mass) * dif_y_28) / denom_31));
                }
                j_25 = (j_25 + 1);
            }
            body1_22 = Program.update_velocity(body1_22, force_x_23, force_y_24, (delta_time_19 * system_18.time_factor));
            bodies_20[i_21] = body1_22;
            i_21 = (i_21 + 1);
        };
        i_21 = 0;
        while ((i_21 < bodies_20.Length)) {
            Body body_32 = bodies_20[(int)(i_21)];
            body_32 = Program.update_position(body_32, (delta_time_19 * system_18.time_factor));
            bodies_20[i_21] = body_32;
            i_21 = (i_21 + 1);
        };
        system_18.bodies = bodies_20;
        return system_18;
    }

    public static void main() {
        Body b1_33 = Program.make_body(0.0, 0.0, 0.0, 0.0, 1.0);
        Body b2_34 = Program.make_body(10.0, 0.0, 0.0, 0.0, 1.0);
        BodySystem sys1_35 = Program.make_body_system(new Body[]{b1_33, b2_34}, 1.0, 1.0, 0.0);
        sys1_35 = Program.update_system(sys1_35, 1.0);
        Body b1_after_36 = sys1_35.bodies[(int)(0)];
        double pos1x_37 = b1_after_36.position_x;
        double pos1y_38 = b1_after_36.position_y;
        Console.WriteLine(JsonSerializer.Serialize(new Dictionary<string, double>{{"x", pos1x_37}, {"y", pos1y_38}}));
        double vel1x_39 = b1_after_36.velocity_x;
        double vel1y_40 = b1_after_36.velocity_y;
        Console.WriteLine(JsonSerializer.Serialize(new Dictionary<string, double>{{"vx", vel1x_39}, {"vy", vel1y_40}}));
        Body b3_41 = Program.make_body(-10.0, 0.0, 0.0, 0.0, 1.0);
        Body b4_42 = Program.make_body(10.0, 0.0, 0.0, 0.0, 4.0);
        BodySystem sys2_43 = Program.make_body_system(new Body[]{b3_41, b4_42}, 1.0, 10.0, 0.0);
        sys2_43 = Program.update_system(sys2_43, 1.0);
        Body b2_after_44 = sys2_43.bodies[(int)(0)];
        double pos2x_45 = b2_after_44.position_x;
        double pos2y_46 = b2_after_44.position_y;
        Console.WriteLine(JsonSerializer.Serialize(new Dictionary<string, double>{{"x", pos2x_45}, {"y", pos2y_46}}));
        double vel2x_47 = b2_after_44.velocity_x;
        double vel2y_48 = b2_after_44.velocity_y;
        Console.WriteLine(JsonSerializer.Serialize(new Dictionary<string, double>{{"vx", vel2x_47}, {"vy", vel2y_48}}));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
