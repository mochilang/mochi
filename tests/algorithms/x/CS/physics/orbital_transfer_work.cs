// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double pow10(long n_0) {
        double p_1 = 1.0;
        if ((n_0 >= 0)) {
            long i_2 = 0;
            while ((i_2 < n_0)) {
                p_1 = (p_1 * 10.0);
                i_2 = (i_2 + 1);
            }
        } else {
            long i_3 = 0;
            while ((i_3 > n_0)) {
                p_1 = (p_1 / 10.0);
                i_3 = (i_3 - 1);
            }
        };
        return p_1;
    }

    public static double floor(double x_4) {
        long i_5 = (long)(x_4);
        double f_6 = Convert.ToDouble(i_5);
        if ((f_6 > x_4)) {
            return Convert.ToDouble((i_5 - 1));
        };
        return f_6;
    }

    public static string format_scientific_3(double x_7) {
        if ((x_7 == 0.0)) {
            return "0.000e+00";
        };
        string sign_8 = "";
        double num_9 = x_7;
        if ((num_9 < 0.0)) {
            sign_8 = "-";
            num_9 = -num_9;
        };
        long exp_10 = 0;
        while ((num_9 >= 10.0)) {
            num_9 = (num_9 / 10.0);
            exp_10 = (exp_10 + 1);
        };
        while ((num_9 < 1.0)) {
            num_9 = (num_9 * 10.0);
            exp_10 = (exp_10 - 1);
        };
        double temp_11 = Program.floor(((num_9 * 1000.0) + 0.5));
        long scaled_12 = (long)(temp_11);
        if ((scaled_12 == 10000)) {
            scaled_12 = 1000;
            exp_10 = (exp_10 + 1);
        };
        long int_part_13 = (scaled_12 / 1000);
        long frac_part_14 = _mod(scaled_12, 1000);
        string frac_str_15 = _fmtStr(frac_part_14);
        while ((frac_str_15.Length < 3)) {
            frac_str_15 = ("0" + frac_str_15);
        };
        string mantissa_16 = ((_fmtStr(int_part_13) + ".") + frac_str_15);
        string exp_sign_17 = "+";
        long exp_abs_18 = exp_10;
        if ((exp_10 < 0)) {
            exp_sign_17 = "-";
            exp_abs_18 = -exp_10;
        };
        string exp_str_19 = _fmtStr(exp_abs_18);
        if ((exp_abs_18 < 10)) {
            exp_str_19 = ("0" + exp_str_19);
        };
        return ((((sign_8 + mantissa_16) + "e") + exp_sign_17) + exp_str_19);
    }

    public static string orbital_transfer_work(double mass_central_20, double mass_object_21, double r_initial_22, double r_final_23) {
        double G_24 = (6.6743 * Program.pow10(-11));
        if (((r_initial_22 <= 0.0) || (r_final_23 <= 0.0))) {
            throw new Exception("Orbital radii must be greater than zero.");
        };
        double work_25 = ((((G_24 * mass_central_20) * mass_object_21) / 2.0) * ((1.0 / r_initial_22) - (1.0 / r_final_23)));
        return Program.format_scientific_3(work_25);
    }

    public static void test_orbital_transfer_work() {
        if ((Program.orbital_transfer_work((5.972 * Program.pow10(24)), 1000.0, (6.371 * Program.pow10(6)), (7.0 * Program.pow10(6))) != "2.811e+09")) {
            throw new Exception("case1 failed");
        };
        if ((Program.orbital_transfer_work((5.972 * Program.pow10(24)), 500.0, (7.0 * Program.pow10(6)), (6.371 * Program.pow10(6))) != "-1.405e+09")) {
            throw new Exception("case2 failed");
        };
        if ((Program.orbital_transfer_work((1.989 * Program.pow10(30)), 1000.0, (1.5 * Program.pow10(11)), (2.28 * Program.pow10(11))) != "1.514e+11")) {
            throw new Exception("case3 failed");
        };
    }

    public static void main() {
        Program.test_orbital_transfer_work();
        Console.WriteLine(Program._fmtTop(Program.orbital_transfer_work((5.972 * Program.pow10(24)), 1000.0, (6.371 * Program.pow10(6)), (7.0 * Program.pow10(6)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
