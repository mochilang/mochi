// Generated by Mochi 0.10.59 on 2025-08-07 10:34 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double UNIVERSAL_GAS_CONSTANT_0 = 8.314462;
    public static double pressure_of_gas_system(double moles_1, double kelvin_2, double volume_3) {
        if ((((moles_1 < 0) || (kelvin_2 < 0)) || (volume_3 < 0))) {
            _throw;
            "Invalid inputs. Enter positive value.";
        };
        return (((moles_1 * kelvin_2) * UNIVERSAL_GAS_CONSTANT_0) / volume_3);
    }

    public static double volume_of_gas_system(double moles_4, double kelvin_5, double pressure_6) {
        if ((((moles_4 < 0) || (kelvin_5 < 0)) || (pressure_6 < 0))) {
            _throw;
            "Invalid inputs. Enter positive value.";
        };
        return (((moles_4 * kelvin_5) * UNIVERSAL_GAS_CONSTANT_0) / pressure_6);
    }

    public static double temperature_of_gas_system(double moles_7, double volume_8, double pressure_9) {
        if ((((moles_7 < 0) || (volume_8 < 0)) || (pressure_9 < 0))) {
            _throw;
            "Invalid inputs. Enter positive value.";
        };
        return ((pressure_9 * volume_8) / (moles_7 * UNIVERSAL_GAS_CONSTANT_0));
    }

    public static double moles_of_gas_system(double kelvin_10, double volume_11, double pressure_12) {
        if ((((kelvin_10 < 0) || (volume_11 < 0)) || (pressure_12 < 0))) {
            _throw;
            "Invalid inputs. Enter positive value.";
        };
        return ((pressure_12 * volume_11) / (kelvin_10 * UNIVERSAL_GAS_CONSTANT_0));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.pressure_of_gas_system(2.0, 100.0, 5.0)));
            Console.WriteLine(Program._fmtTop(Program.volume_of_gas_system(0.5, 273.0, 0.004)));
            Console.WriteLine(Program._fmtTop(Program.temperature_of_gas_system(2.0, 100.0, 5.0)));
            Console.WriteLine(Program._fmtTop(Program.moles_of_gas_system(100.0, 5.0, 10.0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
