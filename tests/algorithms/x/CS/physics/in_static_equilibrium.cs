// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static double[][] forces1_29 = new double[][]{new double[]{1.0, 1.0}, new double[]{-1.0, 2.0}};
    static double[][] location1_30 = new double[][]{new double[]{1.0, 0.0}, new double[]{10.0, 0.0}};
    public static double _mod(double x_2, double m_3) {
        return (x_2 - (Convert.ToDouble(_atoi((x_2 / m_3))) * m_3));
    }

    public static double sin_approx(double x_4) {
        double y_5 = (Program._mod((x_4 + PI_0), TWO_PI_1) - PI_0);
        double y2_6 = (y_5 * y_5);
        double y3_7 = (y2_6 * y_5);
        double y5_8 = (y3_7 * y2_6);
        double y7_9 = (y5_8 * y2_6);
        return (((y_5 - (y3_7 / 6.0)) + (y5_8 / 120.0)) - (y7_9 / 5040.0));
    }

    public static double cos_approx(double x_10) {
        double y_11 = (Program._mod((x_10 + PI_0), TWO_PI_1) - PI_0);
        double y2_12 = (y_11 * y_11);
        double y4_13 = (y2_12 * y2_12);
        double y6_14 = (y4_13 * y2_12);
        return (((1.0 - (y2_12 / 2.0)) + (y4_13 / 24.0)) - (y6_14 / 720.0));
    }

    public static double[] polar_force(double magnitude_15, double angle_16, bool radian_mode_17) {
        double theta_18 = (radian_mode_17 ? angle_16 : ((angle_16 * PI_0) / 180.0));
        return new double[]{(magnitude_15 * Program.cos_approx(theta_18)), (magnitude_15 * Program.sin_approx(theta_18))};
    }

    public static double abs_float(double x_19) {
        if ((x_19 < 0.0)) {
            return -x_19;
        } else {
            return x_19;
        };
        return default(double);
    }

    public static bool in_static_equilibrium(double[][] forces_20, double[][] location_21, double eps_22) {
        double sum_moments_23 = 0.0;
        long i_24 = 0;
        long n_25 = forces_20.Length;
        while ((i_24 < n_25)) {
            double[] r_26 = _idx(location_21, i_24);
            double[] f_27 = _idx(forces_20, i_24);
            double moment_28 = ((_idx(r_26, 0) * _idx(f_27, 1)) - (_idx(r_26, 1) * _idx(f_27, 0)));
            sum_moments_23 = (sum_moments_23 + moment_28);
            i_24 = (i_24 + 1);
        };
        return (Program.abs_float(sum_moments_23) < eps_22);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.in_static_equilibrium(forces1_29, location1_30, 0.1))));
            double[][] forces2_31 = new double[][]{Program.polar_force(718.4, 150.0, false), Program.polar_force(879.54, 45.0, false), Program.polar_force(100.0, -90.0, false)};
            double[][] location2_32 = new double[][]{new double[]{0.0, 0.0}, new double[]{0.0, 0.0}, new double[]{0.0, 0.0}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.in_static_equilibrium(forces2_31, location2_32, 0.1))));
            double[][] forces3_33 = new double[][]{Program.polar_force((30.0 * 9.81), 15.0, false), Program.polar_force(215.0, 135.0, false), Program.polar_force(264.0, 60.0, false)};
            double[][] location3_34 = new double[][]{new double[]{0.0, 0.0}, new double[]{0.0, 0.0}, new double[]{0.0, 0.0}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.in_static_equilibrium(forces3_33, location3_34, 0.1))));
            double[][] forces4_35 = new double[][]{new double[]{0.0, -2000.0}, new double[]{0.0, -1200.0}, new double[]{0.0, 15600.0}, new double[]{0.0, -12400.0}};
            double[][] location4_36 = new double[][]{new double[]{0.0, 0.0}, new double[]{6.0, 0.0}, new double[]{10.0, 0.0}, new double[]{12.0, 0.0}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.in_static_equilibrium(forces4_35, location4_36, 0.1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
