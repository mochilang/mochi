// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double G_0 = 6.6743e-11;
    static double C_1 = 2.99792458e08;
    static double PI_2 = 3.141592653589793;
    public static double pow10(long n_3) {
        double result_4 = 1.0;
        long i_5 = 0;
        while ((i_5 < n_3)) {
            result_4 = (result_4 * 10.0);
            i_5 = (i_5 + 1);
        };
        return result_4;
    }

    public static double sqrt(double x_6) {
        if ((x_6 <= 0.0)) {
            return 0.0;
        };
        double guess_7 = x_6;
        long i_8 = 0;
        while ((i_8 < 20)) {
            guess_7 = ((guess_7 + (x_6 / guess_7)) / 2.0);
            i_8 = (i_8 + 1);
        };
        return guess_7;
    }

    public static double abs(double x_9) {
        if ((x_9 < 0.0)) {
            return -x_9;
        };
        return x_9;
    }

    public static double capture_radii(double target_body_radius_10, double target_body_mass_11, double projectile_velocity_12) {
        if ((target_body_mass_11 < 0.0)) {
            throw new Exception("Mass cannot be less than 0");
        };
        if ((target_body_radius_10 < 0.0)) {
            throw new Exception("Radius cannot be less than 0");
        };
        if ((projectile_velocity_12 > C_1)) {
            throw new Exception("Cannot go beyond speed of light");
        };
        double escape_velocity_squared_13 = (((2.0 * G_0) * target_body_mass_11) / target_body_radius_10);
        double denom_14 = (projectile_velocity_12 * projectile_velocity_12);
        double capture_radius_15 = (target_body_radius_10 * Program.sqrt((1.0 + (escape_velocity_squared_13 / denom_14))));
        return capture_radius_15;
    }

    public static double capture_area(double capture_radius_16) {
        if ((capture_radius_16 < 0.0)) {
            throw new Exception("Cannot have a capture radius less than 0");
        };
        double sigma_17 = ((PI_2 * capture_radius_16) * capture_radius_16);
        return sigma_17;
    }

    public static void run_tests() {
        double r_18 = Program.capture_radii((6.957 * Program.pow10(8)), (1.99 * Program.pow10(30)), 25000.0);
        if ((Program.abs((r_18 - (1.720959069143714 * Program.pow10(10)))) > 1.0)) {
            throw new Exception("capture_radii failed");
        };
        double a_19 = Program.capture_area(r_18);
        if ((Program.abs((a_19 - (9.304455331801812 * Program.pow10(20)))) > 1.0)) {
            throw new Exception("capture_area failed");
        };
    }

    public static void main() {
        Program.run_tests();
        double r_20 = Program.capture_radii((6.957 * Program.pow10(8)), (1.99 * Program.pow10(30)), 25000.0);
        Console.WriteLine(Program._fmtTop(_fmtStr(r_20)));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.capture_area(r_20))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
