// Generated by Mochi 0.10.64 (commit c2eb3618f3) on 2025-08-12 10:04 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double pow(double base_0, long exp_1) {
        double result_2 = 1.0;
        long i_3 = 0;
        while ((i_3 < exp_1)) {
            result_2 = (result_2 * base_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static double sqrt_approx(double x_4) {
        if ((x_4 == 0.0)) {
            return 0.0;
        };
        double guess_5 = (x_4 / 2.0);
        long i_6 = 0;
        while ((i_6 < 20)) {
            guess_5 = ((guess_5 + (x_4 / guess_5)) / 2.0);
            i_6 = (i_6 + 1);
        };
        return guess_5;
    }

    public static double hubble_parameter(double hubble_constant_7, double radiation_density_8, double matter_density_9, double dark_energy_10, double redshift_11) {
        double[] parameters_12 = new double[]{redshift_11, radiation_density_8, matter_density_9, dark_energy_10};
        long i_13 = 0;
        while ((i_13 < parameters_12.Length)) {
            if ((_idx(parameters_12, i_13) < 0.0)) {
                throw new Exception("All input parameters must be positive");
            }
            i_13 = (i_13 + 1);
        };
        i_13 = 1;
        while ((i_13 < 4)) {
            if ((_idx(parameters_12, i_13) > 1.0)) {
                throw new Exception("Relative densities cannot be greater than one");
            }
            i_13 = (i_13 + 1);
        };
        double curvature_14 = (1.0 - ((matter_density_9 + radiation_density_8) + dark_energy_10));
        double zp1_15 = (redshift_11 + 1.0);
        double e2_16 = ((((radiation_density_8 * Program.pow(zp1_15, 4)) + (matter_density_9 * Program.pow(zp1_15, 3))) + (curvature_14 * Program.pow(zp1_15, 2))) + dark_energy_10);
        return (hubble_constant_7 * Program.sqrt_approx(e2_16));
    }

    public static void test_hubble_parameter() {
        double h_17 = Program.hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0);
        if (((h_17 < 68.2999) || (h_17 > 68.3001))) {
            throw new Exception("hubble_parameter test failed");
        };
    }

    public static void main() {
        Program.test_hubble_parameter();
        Console.WriteLine(Program._fmtTop(Program.hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
