// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double to_float(long x_0) {
        return (x_0 * 1.0);
    }

    public static double round6(double x_1) {
        double factor_2 = 1e06;
        return (Program.to_float(Convert.ToInt64(((x_1 * factor_2) + 0.5))) / factor_2);
    }

    public static double sqrtApprox(double x_3) {
        double guess_4 = (x_3 / 2.0);
        long i_5 = 0;
        while ((i_5 < 20)) {
            guess_4 = ((guess_4 + (x_3 / guess_4)) / 2.0);
            i_5 = (i_5 + 1);
        };
        return guess_4;
    }

    public static bool validate(double[] values_6) {
        if ((values_6.Length == 0)) {
            return false;
        };
        long i_7 = 0;
        while ((i_7 < values_6.Length)) {
            if ((values_6[(int)(i_7)] <= 0.0)) {
                return false;
            }
            i_7 = (i_7 + 1);
        };
        return true;
    }

    public static double effusion_ratio(double m1_8, double m2_9) {
        if ((!Program.validate(new double[]{m1_8, m2_9}))) {
            Console.WriteLine(Program._fmtTop("ValueError: Molar mass values must greater than 0."));
            return 0.0;
        };
        return Program.round6(Program.sqrtApprox((m2_9 / m1_8)));
    }

    public static double first_effusion_rate(double rate_10, double m1_11, double m2_12) {
        if ((!Program.validate(new double[]{rate_10, m1_11, m2_12}))) {
            Console.WriteLine(Program._fmtTop("ValueError: Molar mass and effusion rate values must greater than 0."));
            return 0.0;
        };
        return Program.round6((rate_10 * Program.sqrtApprox((m2_12 / m1_11))));
    }

    public static double second_effusion_rate(double rate_13, double m1_14, double m2_15) {
        if ((!Program.validate(new double[]{rate_13, m1_14, m2_15}))) {
            Console.WriteLine(Program._fmtTop("ValueError: Molar mass and effusion rate values must greater than 0."));
            return 0.0;
        };
        return Program.round6((rate_13 / Program.sqrtApprox((m2_15 / m1_14))));
    }

    public static double first_molar_mass(double mass_16, double r1_17, double r2_18) {
        if ((!Program.validate(new double[]{mass_16, r1_17, r2_18}))) {
            Console.WriteLine(Program._fmtTop("ValueError: Molar mass and effusion rate values must greater than 0."));
            return 0.0;
        };
        double ratio_19 = (r1_17 / r2_18);
        return Program.round6((mass_16 / (ratio_19 * ratio_19)));
    }

    public static double second_molar_mass(double mass_20, double r1_21, double r2_22) {
        if ((!Program.validate(new double[]{mass_20, r1_21, r2_22}))) {
            Console.WriteLine(Program._fmtTop("ValueError: Molar mass and effusion rate values must greater than 0."));
            return 0.0;
        };
        double ratio_23 = (r1_21 / r2_22);
        return Program.round6(((ratio_23 * ratio_23) / mass_20));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.effusion_ratio(2.016, 4.002)));
            Console.WriteLine(Program._fmtTop(Program.first_effusion_rate(1.0, 2.016, 4.002)));
            Console.WriteLine(Program._fmtTop(Program.second_effusion_rate(1.0, 2.016, 4.002)));
            Console.WriteLine(Program._fmtTop(Program.first_molar_mass(2.0, 1.408943, 0.709752)));
            Console.WriteLine(Program._fmtTop(Program.second_molar_mass(2.0, 1.408943, 0.709752)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
