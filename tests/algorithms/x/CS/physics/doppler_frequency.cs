// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double doppler_effect(double org_freq_0, double wave_vel_1, double obs_vel_2, double src_vel_3) {
        if ((wave_vel_1 == src_vel_3)) {
            throw new Exception("division by zero implies vs=v and observer in front of the source");
        };
        double doppler_freq_4 = ((org_freq_0 * (wave_vel_1 + obs_vel_2)) / (wave_vel_1 - src_vel_3));
        if ((doppler_freq_4 <= 0.0)) {
            throw new Exception("non-positive frequency implies vs>v or v0>v (in the opposite direction)");
        };
        return doppler_freq_4;
    }

    public static double absf(double x_5) {
        if ((x_5 < 0.0)) {
            return -x_5;
        };
        return x_5;
    }

    public static bool almost_equal(double a_6, double b_7, double tol_8) {
        return (Program.absf((a_6 - b_7)) <= tol_8);
    }

    public static void test_doppler_effect() {
        if ((!Program.almost_equal(Program.doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 9.9999999999999995e-08))) {
            throw new Exception("test 1 failed");
        };
        if ((!Program.almost_equal(Program.doppler_effect(100.0, 330.0, -10.0, 0.0), 96.969696969696969, 9.9999999999999995e-08))) {
            throw new Exception("test 2 failed");
        };
        if ((!Program.almost_equal(Program.doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 9.9999999999999995e-08))) {
            throw new Exception("test 3 failed");
        };
        if ((!Program.almost_equal(Program.doppler_effect(100.0, 330.0, 0.0, -10.0), 97.058823529411768, 9.9999999999999995e-08))) {
            throw new Exception("test 4 failed");
        };
        if ((!Program.almost_equal(Program.doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 9.9999999999999995e-08))) {
            throw new Exception("test 5 failed");
        };
        if ((!Program.almost_equal(Program.doppler_effect(100.0, 330.0, -10.0, -10.0), 94.117647058823536, 9.9999999999999995e-08))) {
            throw new Exception("test 6 failed");
        };
    }

    public static void main() {
        Program.test_doppler_effect();
        Console.WriteLine(Program._fmtTop(Program.doppler_effect(100.0, 330.0, 10.0, 0.0)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
