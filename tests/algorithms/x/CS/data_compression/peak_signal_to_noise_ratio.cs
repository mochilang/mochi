// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static double abs(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double sqrtApprox(double x_1) {
        if ((x_1 <= 0.0)) {
            return 0.0;
        };
        double guess_2 = x_1;
        long i_3 = 0;
        while ((i_3 < 10)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double ln(double x_4) {
        double t_5 = ((x_4 - 1.0) / (x_4 + 1.0));
        double term_6 = t_5;
        double sum_7 = 0.0;
        long n_8 = 1;
        while ((n_8 <= 19)) {
            sum_7 = (sum_7 + (term_6 / Convert.ToDouble(n_8)));
            term_6 = ((term_6 * t_5) * t_5);
            n_8 = (n_8 + 2);
        };
        return (2.0 * sum_7);
    }

    public static double log10(double x_9) {
        return (Program.ln(x_9) / Program.ln(10.0));
    }

    public static double peak_signal_to_noise_ratio(long[][] original_10, long[][] contrast_11) {
        double mse_12 = 0.0;
        long i_13 = 0;
        while ((i_13 < original_10.Length)) {
            long j_14 = 0;
            while ((j_14 < original_10[(int)(i_13)].Length)) {
                double diff_15 = Convert.ToDouble((original_10[(int)(i_13)][(int)(j_14)] - contrast_11[(int)(i_13)][(int)(j_14)]));
                mse_12 = (mse_12 + (diff_15 * diff_15));
                j_14 = (j_14 + 1);
            }
            i_13 = (i_13 + 1);
        };
        double size_16 = Convert.ToDouble((original_10.Length * original_10[(int)(0)].Length));
        mse_12 = (mse_12 / size_16);
        if ((mse_12 == 0.0)) {
            return 100.0;
        };
        double PIXEL_MAX_17 = 255.0;
        return (20.0 * Program.log10((PIXEL_MAX_17 / Program.sqrtApprox(mse_12))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
