// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Leaf {
    public string symbol;
    public long freq;
    public override string ToString() => $"Leaf {{symbol = \"{symbol}\", freq = {freq}}}";
}
class Node {
    public long freq;
    public object left;
    public object right;
    public override string ToString() => $"Node {{freq = {freq}, left = {left}, right = {right}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long get_freq(object n_0) {
        return ((Func<long>)(() => { var __t = n_0; if (__t is Leaf _p0) { var _unused_0_0 = _p0.symbol; var f = _p0.freq; return f; } else if (__t is Node _p1) { var f = _p1.freq; var _unused_1_1 = _p1.left; var _unused_1_2 = _p1.right; return f; } return default(long); }))();
    }

    public static object[] sort_nodes(object[] nodes_1) {
        object[] arr_2 = nodes_1;
        long i_3 = 1;
        while ((i_3 < arr_2.Length)) {
            object key_4 = ((dynamic)arr_2)[i_3];
            long j_5 = (i_3 - 1);
            while (((j_5 >= 0) && (Program.get_freq((object)((dynamic)arr_2)[j_5]) > Program.get_freq((object)key_4)))) {
                arr_2[(j_5 + 1)] = ((dynamic)arr_2)[j_5];
                j_5 = (j_5 - 1);
            }
            arr_2[(j_5 + 1)] = key_4;
            i_3 = (i_3 + 1);
        };
        return arr_2;
    }

    public static object[] rest(object[] nodes_6) {
        object[] res_7 = new object[]{};
        long i_8 = 1;
        while ((i_8 < nodes_6.Length)) {
            res_7 = (Enumerable.ToArray(Enumerable.Append<object>(Enumerable.ToArray(res_7.Cast<object>()), (object)((dynamic)nodes_6)[i_8])));
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static object[] count_freq(string text_9) {
        string[] chars_10 = new string[]{};
        long[] freqs_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < text_9.Length)) {
            string c_13 = _substr(text_9, i_12, (i_12 + 1));
            long j_14 = 0;
            bool found_15 = false;
            while ((j_14 < chars_10.Length)) {
                if ((chars_10[(int)(j_14)] == c_13)) {
                    freqs_11[j_14] = (freqs_11[(int)(j_14)] + 1);
                    found_15 = true;
                    break;
                }
                j_14 = (j_14 + 1);
            }
            if ((!found_15)) {
                chars_10 = (Enumerable.ToArray(Enumerable.Append<string>(chars_10, c_13)));
                freqs_11 = (Enumerable.ToArray(Enumerable.Append<long>(freqs_11, 1)));
            }
            i_12 = (i_12 + 1);
        };
        object[] leaves_16 = new object[]{};
        long k_17 = 0;
        while ((k_17 < chars_10.Length)) {
            leaves_16 = (Enumerable.ToArray(Enumerable.Append<object>(Enumerable.ToArray(leaves_16.Cast<object>()), new Leaf{symbol = chars_10[(int)(k_17)], freq = freqs_11[(int)(k_17)]})));
            k_17 = (k_17 + 1);
        };
        return Program.sort_nodes(Enumerable.ToArray(leaves_16.Cast<object>()));
    }

    public static object build_tree(object[] nodes_18) {
        object[] arr_19 = nodes_18;
        while ((arr_19.Length > 1)) {
            object left_20 = ((dynamic)arr_19)[0];
            arr_19 = Program.rest(Enumerable.ToArray(arr_19.Cast<object>()));
            object right_21 = ((dynamic)arr_19)[0];
            arr_19 = Program.rest(Enumerable.ToArray(arr_19.Cast<object>()));
            Node node_22 = new Node{freq = (Program.get_freq((object)left_20) + Program.get_freq((object)right_21)), left = left_20, right = right_21};
            arr_19 = (Enumerable.ToArray(Enumerable.Append<object>(Enumerable.ToArray(arr_19.Cast<object>()), node_22)));
            arr_19 = Program.sort_nodes(Enumerable.ToArray(arr_19.Cast<object>()));
        };
        return ((dynamic)arr_19)[0];
    }

    public static string[][] concat_pairs(string[][] a_23, string[][] b_24) {
        string[][] res_25 = a_23;
        long i_26 = 0;
        while ((i_26 < b_24.Length)) {
            res_25 = (Enumerable.ToArray(Enumerable.Append<string[]>(res_25, b_24[(int)(i_26)])));
            i_26 = (i_26 + 1);
        };
        return res_25;
    }

    public static string[][] collect_codes(object tree_27, string prefix_28) {
        return ((Func<string[][]>)(() => { var __t = tree_27; if (__t is Leaf _p0) { var s = _p0.symbol; var _unused_0_1 = _p0.freq; return new string[][]{new string[]{s, prefix_28}}; } else if (__t is Node _p1) { var _unused_1_0 = _p1.freq; var l = _p1.left; var r = _p1.right; return Program.concat_pairs(collect_codes((object)l, (prefix_28 + "0")), collect_codes((object)r, (prefix_28 + "1"))); } return default(string[][]); }))();
    }

    public static string find_code(string[][] pairs_29, string ch_30) {
        long i_31 = 0;
        while ((i_31 < pairs_29.Length)) {
            if ((pairs_29[(int)(i_31)][(int)(0)] == ch_30)) {
                return pairs_29[(int)(i_31)][(int)(1)];
            }
            i_31 = (i_31 + 1);
        };
        return "";
    }

    public static string huffman_encode(string text_32) {
        if ((text_32 == "")) {
            return "";
        };
        object[] leaves_33 = Program.count_freq(text_32);
        object tree_34 = Program.build_tree(Enumerable.ToArray(leaves_33.Cast<object>()));
        string[][] codes_35 = Program.collect_codes((object)tree_34, "");
        string encoded_36 = "";
        long i_37 = 0;
        while ((i_37 < text_32.Length)) {
            string c_38 = _substr(text_32, i_37, (i_37 + 1));
            encoded_36 = ((encoded_36 + Program.find_code(codes_35, c_38)) + " ");
            i_37 = (i_37 + 1);
        };
        return encoded_36;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.huffman_encode("beep boop beer!")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
