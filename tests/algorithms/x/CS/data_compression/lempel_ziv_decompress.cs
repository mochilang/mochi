// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string sample_22 = "1011001";
    static string decompressed_23 = Program.decompress_data(sample_22);
    public static bool list_contains(string[] xs_0, string v_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == v_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static bool is_power_of_two(long n_3) {
        if ((n_3 < 1)) {
            return false;
        };
        long x_4 = n_3;
        while ((x_4 > 1)) {
            if ((_mod(x_4, 2) != 0)) {
                return false;
            }
            x_4 = (x_4 / 2);
        };
        return true;
    }

    public static string bin_string(long n_5) {
        if ((n_5 == 0)) {
            return "0";
        };
        string res_6 = "";
        long x_7 = n_5;
        while ((x_7 > 0)) {
            long bit_8 = _mod(x_7, 2);
            res_6 = (_fmtStr(bit_8) + res_6);
            x_7 = (x_7 / 2);
        };
        return res_6;
    }

    public static string decompress_data(string data_bits_9) {
        Dictionary<string, string> lexicon_10 = new Dictionary<string, string>{{"0", "0"}, {"1", "1"}};
        string[] keys_11 = new string[]{"0", "1"};
        string result_12 = "";
        string curr_string_13 = "";
        long index_14 = 2;
        long i_15 = 0;
        while ((i_15 < data_bits_9.Length)) {
            curr_string_13 = (curr_string_13 + _substr(data_bits_9, i_15, (i_15 + 1)));
            if ((!Program.list_contains(keys_11, curr_string_13))) {
                i_15 = (i_15 + 1);
                continue;
            }
            string last_match_id_16 = (lexicon_10.ContainsKey(curr_string_13) ? lexicon_10[curr_string_13] : "");
            result_12 = (result_12 + last_match_id_16);
            lexicon_10[curr_string_13] = (last_match_id_16 + "0");
            if (Program.is_power_of_two(index_14)) {
                Dictionary<string, string> new_lex_17 = new Dictionary<string, string>{};
                string[] new_keys_18 = new string[]{};
                long j_19 = 0;
                while ((j_19 < keys_11.Length)) {
                    string curr_key_20 = keys_11[(int)(j_19)];
                    new_lex_17[("0" + curr_key_20)] = (lexicon_10.ContainsKey(curr_key_20) ? lexicon_10[curr_key_20] : "");
                    new_keys_18 = (Enumerable.ToArray(Enumerable.Append<string>(new_keys_18, ("0" + curr_key_20))));
                    j_19 = (j_19 + 1);
                }
                lexicon_10 = new_lex_17;
                keys_11 = new_keys_18;
            }
            string new_key_21 = Program.bin_string(index_14);
            lexicon_10[new_key_21] = (last_match_id_16 + "1");
            keys_11 = (Enumerable.ToArray(Enumerable.Append<string>(keys_11, new_key_21)));
            index_14 = (index_14 + 1);
            curr_string_13 = "";
            i_15 = (i_15 + 1);
        };
        return result_12;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(decompressed_23));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
