// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class BWTResult {
    public string bwt_string;
    public long idx_original_string;
    public override string ToString() => $"BWTResult {{bwt_string = \"{bwt_string}\", idx_original_string = {idx_original_string}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string s_31 = "^BANANA";
    static BWTResult result_32 = Program.bwt_transform(s_31);
    public static string[] all_rotations(string s_0) {
        long n_1 = s_0.Length;
        string[] rotations_2 = new string[]{};
        long i_3 = 0;
        while ((i_3 < n_1)) {
            string rotation_4 = (_substr(s_0, i_3, n_1) + _substr(s_0, 0, i_3));
            rotations_2 = (Enumerable.ToArray(Enumerable.Append<string>(rotations_2, rotation_4)));
            i_3 = (i_3 + 1);
        };
        return rotations_2;
    }

    public static string[] sort_strings(string[] arr_5) {
        long n_6 = arr_5.Length;
        long i_7 = 1;
        while ((i_7 < n_6)) {
            string key_8 = arr_5[(int)(i_7)];
            long j_9 = (i_7 - 1);
            while (((j_9 >= 0) && (string.Compare(arr_5[(int)(j_9)], key_8) > 0))) {
                arr_5[(j_9 + 1)] = arr_5[(int)(j_9)];
                j_9 = (j_9 - 1);
            }
            arr_5[(j_9 + 1)] = key_8;
            i_7 = (i_7 + 1);
        };
        return arr_5;
    }

    public static string join_strings(string[] arr_10) {
        string res_11 = "";
        long i_12 = 0;
        while ((i_12 < arr_10.Length)) {
            res_11 = (res_11 + arr_10[(int)(i_12)]);
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static BWTResult bwt_transform(string s_13) {
        if ((s_13 == "")) {
            throw new Exception("input string must not be empty");
        };
        string[] rotations_14 = Program.all_rotations(s_13);
        rotations_14 = Program.sort_strings(rotations_14);
        string[] last_col_15 = new string[]{};
        long i_16 = 0;
        while ((i_16 < rotations_14.Length)) {
            string word_17 = rotations_14[(int)(i_16)];
            last_col_15 = (Enumerable.ToArray(Enumerable.Append<string>(last_col_15, _substr(word_17, (word_17.Length - 1), word_17.Length))));
            i_16 = (i_16 + 1);
        };
        string bwt_string_18 = Program.join_strings(last_col_15);
        long idx_19 = Program.index_of(rotations_14, s_13);
        return new BWTResult{bwt_string = bwt_string_18, idx_original_string = idx_19};
    }

    public static long index_of(string[] arr_20, string target_21) {
        long i_22 = 0;
        while ((i_22 < arr_20.Length)) {
            if ((arr_20[(int)(i_22)] == target_21)) {
                return i_22;
            }
            i_22 = (i_22 + 1);
        };
        return -1;
    }

    public static string reverse_bwt(string bwt_string_23, long idx_original_string_24) {
        if ((bwt_string_23 == "")) {
            throw new Exception("bwt string must not be empty");
        };
        long n_25 = bwt_string_23.Length;
        if (((idx_original_string_24 < 0) || (idx_original_string_24 >= n_25))) {
            throw new Exception("index out of range");
        };
        string[] ordered_rotations_26 = new string[]{};
        long i_27 = 0;
        while ((i_27 < n_25)) {
            ordered_rotations_26 = (Enumerable.ToArray(Enumerable.Append<string>(ordered_rotations_26, "")));
            i_27 = (i_27 + 1);
        };
        long iter_28 = 0;
        while ((iter_28 < n_25)) {
            long j_29 = 0;
            while ((j_29 < n_25)) {
                string ch_30 = _substr(bwt_string_23, j_29, (j_29 + 1));
                ordered_rotations_26[j_29] = (ch_30 + ordered_rotations_26[(int)(j_29)]);
                j_29 = (j_29 + 1);
            }
            ordered_rotations_26 = Program.sort_strings(ordered_rotations_26);
            iter_28 = (iter_28 + 1);
        };
        return ordered_rotations_26[(int)(idx_original_string_24)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(result_32.bwt_string));
            Console.WriteLine(Program._fmtTop(result_32.idx_original_string));
            Console.WriteLine(Program._fmtTop(Program.reverse_bwt(result_32.bwt_string, result_32.idx_original_string)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
