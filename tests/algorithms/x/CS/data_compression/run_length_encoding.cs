// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string example1_11 = "AAAABBBCCDAA";
    static string encoded1_12 = Program.run_length_encode(example1_11);
    public static string run_length_encode(string text_0) {
        if ((text_0.Length == 0)) {
            return "";
        };
        string encoded_1 = "";
        long count_2 = 1;
        long i_3 = 0;
        while ((i_3 < text_0.Length)) {
            if ((((i_3 + 1) < text_0.Length) && (text_0.Substring((int)(i_3), 1) == text_0.Substring((int)((i_3 + 1)), 1)))) {
                count_2 = (count_2 + 1);
            } else {
                encoded_1 = ((encoded_1 + text_0.Substring((int)(i_3), 1)) + _fmtStr(count_2));
                count_2 = 1;
            }
            i_3 = (i_3 + 1);
        };
        return encoded_1;
    }

    public static string run_length_decode(string encoded_4) {
        string res_5 = "";
        long i_6 = 0;
        while ((i_6 < encoded_4.Length)) {
            string ch_7 = encoded_4.Substring((int)(i_6), 1);
            i_6 = (i_6 + 1);
            string num_str_8 = "";
            while ((((i_6 < encoded_4.Length) && (string.Compare(encoded_4.Substring((int)(i_6), 1), "0") >= 0)) && (string.Compare(encoded_4.Substring((int)(i_6), 1), "9") <= 0))) {
                num_str_8 = (num_str_8 + encoded_4.Substring((int)(i_6), 1));
                i_6 = (i_6 + 1);
            }
            long count_9 = Convert.ToInt64(num_str_8);
            long j_10 = 0;
            while ((j_10 < count_9)) {
                res_5 = (res_5 + ch_7);
                j_10 = (j_10 + 1);
            }
        };
        return res_5;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(encoded1_12));
            Console.WriteLine(Program._fmtTop(Program.run_length_decode(encoded1_12)));
            string example2_13 = "A";
            string encoded2_14 = Program.run_length_encode(example2_13);
            Console.WriteLine(Program._fmtTop(encoded2_14));
            Console.WriteLine(Program._fmtTop(Program.run_length_decode(encoded2_14)));
            string example3_15 = "AAADDDDDDFFFCCCAAVVVV";
            string encoded3_16 = Program.run_length_encode(example3_15);
            Console.WriteLine(Program._fmtTop(encoded3_16));
            Console.WriteLine(Program._fmtTop(Program.run_length_decode(encoded3_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
