// Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Machine {
    public double[] buffer;
    public double[] _params;
    public long time;
    public override string ToString() => $"Machine {{buffer = {buffer}, _params = {_params}, time = {time}}}";
}
class PullResult {
    public long value;
    public Machine machine;
    public override string ToString() => $"PullResult {{value = {value}, machine = {machine}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[] K_0 = new double[]{0.33, 0.44, 0.55, 0.44, 0.33};
    static long t_1 = 3;
    static long size_2 = 5;
    static Machine machine_41 = Program.reset();
    static long i_42 = 0;
    public static double round_dec(double x_3, long n_4) {
        double m10_5 = 1.0;
        long i_6 = 0;
        while ((i_6 < n_4)) {
            m10_5 = (m10_5 * 10.0);
            i_6 = (i_6 + 1);
        };
        double y_7 = ((x_3 * m10_5) + 0.5);
        return ((1.0 * _atoi(y_7)) / m10_5);
    }

    public static Machine reset() {
        return new Machine{buffer = K_0, _params = new double[]{0.0, 0.0, 0.0, 0.0, 0.0}, time = 0};
    }

    public static Machine push(Machine m_8, long seed_9) {
        double[] buf_10 = m_8.buffer;
        double[] par_11 = m_8._params;
        long i_12 = 0;
        while ((i_12 < buf_10.Length)) {
            double value_13 = buf_10[(int)(i_12)];
            double e_14 = ((1.0 * seed_9) / value_13);
            double next_value_15 = (buf_10[(int)(_mod((i_12 + 1), size_2))] + e_14);
            next_value_15 = (next_value_15 - (1.0 * _atoi(next_value_15)));
            double r_16 = (par_11[(int)(i_12)] + e_14);
            r_16 = (r_16 - (1.0 * _atoi(r_16)));
            r_16 = (r_16 + 3.0);
            buf_10[i_12] = Program.round_dec(((r_16 * next_value_15) * (1.0 - next_value_15)), 10);
            par_11[i_12] = r_16;
            i_12 = (i_12 + 1);
        };
        return new Machine{buffer = buf_10, _params = par_11, time = (m_8.time + 1)};
    }

    public static long xor(long a_17, long b_18) {
        long aa_19 = a_17;
        long bb_20 = b_18;
        long res_21 = 0;
        long bit_22 = 1;
        while (((aa_19 > 0) || (bb_20 > 0))) {
            long abit_23 = _mod(aa_19, 2);
            long bbit_24 = _mod(bb_20, 2);
            if ((abit_23 != bbit_24)) {
                res_21 = (res_21 + bit_22);
            }
            aa_19 = (aa_19 / 2);
            bb_20 = (bb_20 / 2);
            bit_22 = (bit_22 * 2);
        };
        return res_21;
    }

    public static long xorshift(long x_25, long y_26) {
        long xv_27 = x_25;
        long yv_28 = y_26;
        xv_27 = Program.xor(xv_27, (yv_28 / 8192));
        yv_28 = Program.xor(yv_28, (xv_27 * 131072));
        xv_27 = Program.xor(xv_27, (yv_28 / 32));
        return xv_27;
    }

    public static PullResult pull(Machine m_29) {
        double[] buf_30 = m_29.buffer;
        double[] par_31 = m_29._params;
        long key_32 = _mod(m_29.time, size_2);
        long i_33 = 0;
        while ((i_33 < t_1)) {
            double r_34 = par_31[(int)(key_32)];
            double value_35 = buf_30[(int)(key_32)];
            buf_30[key_32] = Program.round_dec(((r_34 * value_35) * (1.0 - value_35)), 10);
            double new_r_36 = (((1.0 * m_29.time) * 0.01) + (r_34 * 1.01));
            new_r_36 = (new_r_36 - (1.0 * _atoi(new_r_36)));
            par_31[key_32] = (new_r_36 + 3.0);
            i_33 = (i_33 + 1);
        };
        long x_37 = _atoi((buf_30[(int)(_mod((key_32 + 2), size_2))] * 1e10));
        long y_38 = _atoi((buf_30[(int)(_mod(((key_32 + size_2) - 2), size_2))] * 1e10));
        Machine new_machine_39 = new Machine{buffer = buf_30, _params = par_31, time = (m_29.time + 1)};
        long value_40 = _mod(Program.xorshift(x_37, y_38), 4294967295L);
        return new PullResult{value = value_40, machine = new_machine_39};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_42 < 100)) {
                machine_41 = Program.push(machine_41, i_42);
                i_42 = (i_42 + 1);
            }
            PullResult res_43 = Program.pull(machine_41);
            Console.WriteLine(Program._fmtTop(res_43.value));
            Console.WriteLine(Program._fmtTop(res_43.machine.buffer));
            Console.WriteLine(Program._fmtTop(res_43.machine._params));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
