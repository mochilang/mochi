// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long MOD_0 = 4294967296L;
    static string ASCII_1 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    public static long ord(string ch_2) {
        long i_3 = 0;
        while ((i_3 < ASCII_1.Length)) {
            if ((_substr(ASCII_1, i_3, (i_3 + 1)) == ch_2)) {
                return (32 + i_3);
            }
            i_3 = (i_3 + 1);
        };
        return 0;
    }

    public static string to_little_endian(string s_4) {
        if ((s_4.Length != 32)) {
            throw new Exception("Input must be of length 32");
        };
        return (((_substr(s_4, 24, 32) + _substr(s_4, 16, 24)) + _substr(s_4, 8, 16)) + _substr(s_4, 0, 8));
    }

    public static string int_to_bits(long n_5, long width_6) {
        string bits_7 = "";
        long num_8 = n_5;
        while ((num_8 > 0)) {
            bits_7 = (_fmtStr(_mod(num_8, 2)) + bits_7);
            num_8 = (num_8 / 2);
        };
        while ((bits_7.Length < width_6)) {
            bits_7 = ("0" + bits_7);
        };
        if ((bits_7.Length > width_6)) {
            bits_7 = _substr(bits_7, (bits_7.Length - width_6), bits_7.Length);
        };
        return bits_7;
    }

    public static long bits_to_int(string bits_9) {
        long num_10 = 0;
        long i_11 = 0;
        while ((i_11 < bits_9.Length)) {
            if ((_substr(bits_9, i_11, (i_11 + 1)) == "1")) {
                num_10 = ((num_10 * 2) + 1);
            } else {
                num_10 = (num_10 * 2);
            }
            i_11 = (i_11 + 1);
        };
        return num_10;
    }

    public static string to_hex(long n_12) {
        string digits_13 = "0123456789abcdef";
        if ((n_12 == 0)) {
            return "0";
        };
        long num_14 = n_12;
        string s_15 = "";
        while ((num_14 > 0)) {
            long d_16 = _mod(num_14, 16);
            s_15 = (_substr(digits_13, d_16, (d_16 + 1)) + s_15);
            num_14 = (num_14 / 16);
        };
        return s_15;
    }

    public static string reformat_hex(long i_17) {
        if ((i_17 < 0)) {
            throw new Exception("Input must be non-negative");
        };
        string hex_18 = Program.to_hex(i_17);
        while ((hex_18.Length < 8)) {
            hex_18 = ("0" + hex_18);
        };
        if ((hex_18.Length > 8)) {
            hex_18 = _substr(hex_18, (hex_18.Length - 8), hex_18.Length);
        };
        string le_19 = "";
        long j_20 = (hex_18.Length - 2);
        while ((j_20 >= 0)) {
            le_19 = (le_19 + _substr(hex_18, j_20, (j_20 + 2)));
            j_20 = (j_20 - 2);
        };
        return le_19;
    }

    public static string preprocess(string message_21) {
        string bit_string_22 = "";
        long i_23 = 0;
        while ((i_23 < message_21.Length)) {
            string ch_24 = _substr(message_21, i_23, (i_23 + 1));
            bit_string_22 = (bit_string_22 + Program.int_to_bits(Program.ord(ch_24), 8));
            i_23 = (i_23 + 1);
        };
        string start_len_25 = Program.int_to_bits(bit_string_22.Length, 64);
        bit_string_22 = (bit_string_22 + "1");
        while ((_mod(bit_string_22.Length, 512) != 448)) {
            bit_string_22 = (bit_string_22 + "0");
        };
        bit_string_22 = ((bit_string_22 + Program.to_little_endian(_substr(start_len_25, 32, 64))) + Program.to_little_endian(_substr(start_len_25, 0, 32)));
        return bit_string_22;
    }

    public static long[][] get_block_words(string bit_string_26) {
        if ((_mod(bit_string_26.Length, 512) != 0)) {
            throw new Exception("Input must have length that's a multiple of 512");
        };
        long[][] blocks_27 = new long[][]{};
        long pos_28 = 0;
        while ((pos_28 < bit_string_26.Length)) {
            long[] block_29 = new long[]{};
            long i_30 = 0;
            while ((i_30 < 512)) {
                string part_31 = _substr(bit_string_26, (pos_28 + i_30), ((pos_28 + i_30) + 32));
                long word_32 = Program.bits_to_int(Program.to_little_endian(part_31));
                block_29 = (Enumerable.ToArray(Enumerable.Append<long>(block_29, word_32)));
                i_30 = (i_30 + 32);
            }
            blocks_27 = (Enumerable.ToArray(Enumerable.Append<long[]>(blocks_27, block_29)));
            pos_28 = (pos_28 + 512);
        };
        return blocks_27;
    }

    public static long bit_and(long a_33, long b_34) {
        long x_35 = a_33;
        long y_36 = b_34;
        long res_37 = 0;
        long bit_38 = 1;
        long i_39 = 0;
        while ((i_39 < 32)) {
            if (((_mod(x_35, 2) == 1) && (_mod(y_36, 2) == 1))) {
                res_37 = (res_37 + bit_38);
            }
            x_35 = (x_35 / 2);
            y_36 = (y_36 / 2);
            bit_38 = (bit_38 * 2);
            i_39 = (i_39 + 1);
        };
        return res_37;
    }

    public static long bit_or(long a_40, long b_41) {
        long x_42 = a_40;
        long y_43 = b_41;
        long res_44 = 0;
        long bit_45 = 1;
        long i_46 = 0;
        while ((i_46 < 32)) {
            long abit_47 = _mod(x_42, 2);
            long bbit_48 = _mod(y_43, 2);
            if (((abit_47 == 1) || (bbit_48 == 1))) {
                res_44 = (res_44 + bit_45);
            }
            x_42 = (x_42 / 2);
            y_43 = (y_43 / 2);
            bit_45 = (bit_45 * 2);
            i_46 = (i_46 + 1);
        };
        return res_44;
    }

    public static long bit_xor(long a_49, long b_50) {
        long x_51 = a_49;
        long y_52 = b_50;
        long res_53 = 0;
        long bit_54 = 1;
        long i_55 = 0;
        while ((i_55 < 32)) {
            long abit_56 = _mod(x_51, 2);
            long bbit_57 = _mod(y_52, 2);
            if ((_mod((abit_56 + bbit_57), 2) == 1)) {
                res_53 = (res_53 + bit_54);
            }
            x_51 = (x_51 / 2);
            y_52 = (y_52 / 2);
            bit_54 = (bit_54 * 2);
            i_55 = (i_55 + 1);
        };
        return res_53;
    }

    public static long not_32(long i_58) {
        if ((i_58 < 0)) {
            throw new Exception("Input must be non-negative");
        };
        return (4294967295L - i_58);
    }

    public static long sum_32(long a_59, long b_60) {
        return _mod((a_59 + b_60), MOD_0);
    }

    public static long lshift(long num_61, long k_62) {
        long result_63 = _mod(num_61, MOD_0);
        long i_64 = 0;
        while ((i_64 < k_62)) {
            result_63 = _mod((result_63 * 2), MOD_0);
            i_64 = (i_64 + 1);
        };
        return result_63;
    }

    public static long rshift(long num_65, long k_66) {
        long result_67 = num_65;
        long i_68 = 0;
        while ((i_68 < k_66)) {
            result_67 = (result_67 / 2);
            i_68 = (i_68 + 1);
        };
        return result_67;
    }

    public static long left_rotate_32(long i_69, long shift_70) {
        if ((i_69 < 0)) {
            throw new Exception("Input must be non-negative");
        };
        if ((shift_70 < 0)) {
            throw new Exception("Shift must be non-negative");
        };
        long left_71 = Program.lshift(i_69, shift_70);
        long right_72 = Program.rshift(i_69, (32 - shift_70));
        return _mod((left_71 + right_72), MOD_0);
    }

    public static string md5_me(string message_73) {
        string bit_string_74 = Program.preprocess(message_73);
        long[] added_consts_75 = new long[]{3614090360L, 3905402710L, 606105819, 3250441966L, 4118548399L, 1200080426, 2821735955L, 4249261313L, 1770035416, 2336552879L, 4294925233L, 2304563134L, 1804603682, 4254626195L, 2792965006L, 1236535329, 4129170786L, 3225465664L, 643717713, 3921069994L, 3593408605L, 38016083, 3634488961L, 3889429448L, 568446438, 3275163606L, 4107603335L, 1163531501, 2850285829L, 4243563512L, 1735328473, 2368359562L, 4294588738L, 2272392833L, 1839030562, 4259657740L, 2763975236L, 1272893353, 4139469664L, 3200236656L, 681279174, 3936430074L, 3572445317L, 76029189, 3654602809L, 3873151461L, 530742520, 3299628645L, 4096336452L, 1126891415, 2878612391L, 4237533241L, 1700485571, 2399980690L, 4293915773L, 2240044497L, 1873313359, 4264355552L, 2734768916L, 1309151649, 4149444226L, 3174756917L, 718787259, 3951481745L};
        long[] shift_amounts_76 = new long[]{7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};
        long a0_77 = 1732584193;
        long b0_78 = 4023233417L;
        long c0_79 = 2562383102L;
        long d0_80 = 271733878;
        long[][] blocks_81 = Program.get_block_words(bit_string_74);
        long bi_82 = 0;
        while ((bi_82 < blocks_81.Length)) {
            long[] block_83 = blocks_81[(int)(bi_82)];
            long a_84 = a0_77;
            long b_85 = b0_78;
            long c_86 = c0_79;
            long d_87 = d0_80;
            long i_88 = 0;
            while ((i_88 < 64)) {
                long f_89 = 0;
                long g_90 = 0;
                if ((i_88 <= 15)) {
                    f_89 = Program.bit_xor(d_87, Program.bit_and(b_85, Program.bit_xor(c_86, d_87)));
                    g_90 = i_88;
                } else if ((i_88 <= 31)) {
                    f_89 = Program.bit_xor(c_86, Program.bit_and(d_87, Program.bit_xor(b_85, c_86)));
                    g_90 = _mod(((5 * i_88) + 1), 16);
                } else if ((i_88 <= 47)) {
                    f_89 = Program.bit_xor(Program.bit_xor(b_85, c_86), d_87);
                    g_90 = _mod(((3 * i_88) + 5), 16);
                } else {
                    f_89 = Program.bit_xor(c_86, Program.bit_or(b_85, Program.not_32(d_87)));
                    g_90 = _mod((7 * i_88), 16);
                }
                f_89 = Program.sum_32(f_89, a_84);
                f_89 = Program.sum_32(f_89, added_consts_75[(int)(i_88)]);
                f_89 = Program.sum_32(f_89, block_83[(int)(g_90)]);
                long rotated_91 = Program.left_rotate_32(f_89, shift_amounts_76[(int)(i_88)]);
                long new_b_92 = Program.sum_32(b_85, rotated_91);
                a_84 = d_87;
                d_87 = c_86;
                c_86 = b_85;
                b_85 = new_b_92;
                i_88 = (i_88 + 1);
            }
            a0_77 = Program.sum_32(a0_77, a_84);
            b0_78 = Program.sum_32(b0_78, b_85);
            c0_79 = Program.sum_32(c0_79, c_86);
            d0_80 = Program.sum_32(d0_80, d_87);
            bi_82 = (bi_82 + 1);
        };
        string digest_93 = (((Program.reformat_hex(a0_77) + Program.reformat_hex(b0_78)) + Program.reformat_hex(c0_79)) + Program.reformat_hex(d0_80));
        return digest_93;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
