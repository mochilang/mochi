// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string ascii_0 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    public static long ord(string ch_1) {
        long i_2 = 0;
        while ((i_2 < ascii_0.Length)) {
            if ((_substr(ascii_0, i_2, (i_2 + 1)) == ch_1)) {
                return (32 + i_2);
            }
            i_2 = (i_2 + 1);
        };
        return 0;
    }

    public static long bit_and(long a_3, long b_4) {
        long ua_5 = a_3;
        long ub_6 = b_4;
        long res_7 = 0;
        long bit_8 = 1;
        while (((ua_5 > 0) || (ub_6 > 0))) {
            if (((_mod(ua_5, 2) == 1) && (_mod(ub_6, 2) == 1))) {
                res_7 = (res_7 + bit_8);
            }
            ua_5 = (long)(_floordiv(ua_5, 2));
            ub_6 = (long)(_floordiv(ub_6, 2));
            bit_8 = (bit_8 * 2);
        };
        return res_7;
    }

    public static long bit_xor(long a_9, long b_10) {
        long ua_11 = a_9;
        long ub_12 = b_10;
        long res_13 = 0;
        long bit_14 = 1;
        while (((ua_11 > 0) || (ub_12 > 0))) {
            long abit_15 = _mod(ua_11, 2);
            long bbit_16 = _mod(ub_12, 2);
            if ((abit_15 != bbit_16)) {
                res_13 = (res_13 + bit_14);
            }
            ua_11 = (long)(_floordiv(ua_11, 2));
            ub_12 = (long)(_floordiv(ub_12, 2));
            bit_14 = (bit_14 * 2);
        };
        return res_13;
    }

    public static long bit_not32(long x_17) {
        long ux_18 = x_17;
        long res_19 = 0;
        long bit_20 = 1;
        long count_21 = 0;
        while ((count_21 < 32)) {
            if ((_mod(ux_18, 2) == 0)) {
                res_19 = (res_19 + bit_20);
            }
            ux_18 = (long)(_floordiv(ux_18, 2));
            bit_20 = (bit_20 * 2);
            count_21 = (count_21 + 1);
        };
        return res_19;
    }

    public static long elf_hash(string data_22) {
        long hash__23 = 0;
        long i_24 = 0;
        while ((i_24 < data_22.Length)) {
            long c_25 = Program.ord(_substr(data_22, i_24, (i_24 + 1)));
            hash__23 = ((hash__23 * 16) + c_25);
            long x_26 = Program.bit_and(hash__23, 4026531840L);
            if ((x_26 != 0)) {
                hash__23 = Program.bit_xor(hash__23, (long)(_floordiv(x_26, 16777216)));
            }
            hash__23 = Program.bit_and(hash__23, Program.bit_not32(x_26));
            i_24 = (i_24 + 1);
        };
        return hash__23;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.elf_hash("lorem ipsum"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
