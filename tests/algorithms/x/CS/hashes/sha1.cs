// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long MOD_0 = 4294967296L;
    static string ASCII_1 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    public static long ord(string ch_2) {
        long i_3 = 0;
        while ((i_3 < ASCII_1.Length)) {
            if ((_substr(ASCII_1, i_3, (i_3 + 1)) == ch_2)) {
                return (32 + i_3);
            }
            i_3 = (i_3 + 1);
        };
        return 0;
    }

    public static long pow2(long n_4) {
        long res_5 = 1;
        long i_6 = 0;
        while ((i_6 < n_4)) {
            res_5 = (res_5 * 2);
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static long bit_and(long a_7, long b_8) {
        long x_9 = a_7;
        long y_10 = b_8;
        long res_11 = 0;
        long bit_12 = 1;
        long i_13 = 0;
        while ((i_13 < 32)) {
            if (((_mod(x_9, 2) == 1) && (_mod(y_10, 2) == 1))) {
                res_11 = (res_11 + bit_12);
            }
            x_9 = _floordiv(x_9, 2);
            y_10 = _floordiv(y_10, 2);
            bit_12 = (bit_12 * 2);
            i_13 = (i_13 + 1);
        };
        return res_11;
    }

    public static long bit_or(long a_14, long b_15) {
        long x_16 = a_14;
        long y_17 = b_15;
        long res_18 = 0;
        long bit_19 = 1;
        long i_20 = 0;
        while ((i_20 < 32)) {
            long abit_21 = _mod(x_16, 2);
            long bbit_22 = _mod(y_17, 2);
            if (((abit_21 == 1) || (bbit_22 == 1))) {
                res_18 = (res_18 + bit_19);
            }
            x_16 = _floordiv(x_16, 2);
            y_17 = _floordiv(y_17, 2);
            bit_19 = (bit_19 * 2);
            i_20 = (i_20 + 1);
        };
        return res_18;
    }

    public static long bit_xor(long a_23, long b_24) {
        long x_25 = a_23;
        long y_26 = b_24;
        long res_27 = 0;
        long bit_28 = 1;
        long i_29 = 0;
        while ((i_29 < 32)) {
            long abit_30 = _mod(x_25, 2);
            long bbit_31 = _mod(y_26, 2);
            if ((((abit_30 == 1) && (bbit_31 == 0)) || ((abit_30 == 0) && (bbit_31 == 1)))) {
                res_27 = (res_27 + bit_28);
            }
            x_25 = _floordiv(x_25, 2);
            y_26 = _floordiv(y_26, 2);
            bit_28 = (bit_28 * 2);
            i_29 = (i_29 + 1);
        };
        return res_27;
    }

    public static long bit_not(long a_32) {
        return ((MOD_0 - 1) - a_32);
    }

    public static long rotate_left(long n_33, long b_34) {
        long left_35 = _mod((n_33 * Program.pow2(b_34)), MOD_0);
        long right_36 = _floordiv(n_33, Program.pow2((32 - b_34)));
        return _mod((left_35 + right_36), MOD_0);
    }

    public static string to_hex32(long n_37) {
        string digits_38 = "0123456789abcdef";
        long num_39 = n_37;
        string s_40 = "";
        if ((num_39 == 0)) {
            s_40 = "0";
        };
        while ((num_39 > 0)) {
            long d_41 = _mod(num_39, 16);
            s_40 = (_substr(digits_38, d_41, (d_41 + 1)) + s_40);
            num_39 = _floordiv(num_39, 16);
        };
        while ((s_40.Length < 8)) {
            s_40 = ("0" + s_40);
        };
        if ((s_40.Length > 8)) {
            s_40 = _substr(s_40, (s_40.Length - 8), s_40.Length);
        };
        return s_40;
    }

    public static string sha1(string message_42) {
        long[] bytes_43 = new long[]{};
        long i_44 = 0;
        while ((i_44 < message_42.Length)) {
            bytes_43 = ((Func<long[]>)(() => { var _tmp = bytes_43.ToList(); _tmp.Add(Program.ord(_substr(message_42, i_44, (i_44 + 1)))); return _tmp.ToArray(); }))();
            i_44 = (i_44 + 1);
        };
        bytes_43 = ((Func<long[]>)(() => { var _tmp = bytes_43.ToList(); _tmp.Add(128); return _tmp.ToArray(); }))();
        while ((_mod((bytes_43.Length + 8), 64) != 0)) {
            bytes_43 = ((Func<long[]>)(() => { var _tmp = bytes_43.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
        };
        long bit_len_45 = (message_42.Length * 8);
        long[] len_bytes_46 = new long[]{0, 0, 0, 0, 0, 0, 0, 0};
        long bl_47 = bit_len_45;
        long k_48 = 7;
        while ((k_48 >= 0)) {
            len_bytes_46[(int)(k_48)] = _mod(bl_47, 256);
            bl_47 = _floordiv(bl_47, 256);
            k_48 = (k_48 - 1);
        };
        long j_49 = 0;
        while ((j_49 < 8)) {
            bytes_43 = ((Func<long[]>)(() => { var _tmp = bytes_43.ToList(); _tmp.Add(_idx(len_bytes_46, j_49)); return _tmp.ToArray(); }))();
            j_49 = (j_49 + 1);
        };
        long[][] blocks_50 = new long[][]{};
        long pos_51 = 0;
        while ((pos_51 < bytes_43.Length)) {
            long[] block_52 = new long[]{};
            long j2_53 = 0;
            while ((j2_53 < 64)) {
                block_52 = ((Func<long[]>)(() => { var _tmp = block_52.ToList(); _tmp.Add(_idx(bytes_43, (pos_51 + j2_53))); return _tmp.ToArray(); }))();
                j2_53 = (j2_53 + 1);
            }
            blocks_50 = ((Func<long[][]>)(() => { var _tmp = blocks_50.ToList(); _tmp.Add(block_52); return _tmp.ToArray(); }))();
            pos_51 = (pos_51 + 64);
        };
        long h0_54 = 1732584193;
        long h1_55 = 4023233417L;
        long h2_56 = 2562383102L;
        long h3_57 = 271733878;
        long h4_58 = 3285377520L;
        long bindex_59 = 0;
        while ((bindex_59 < blocks_50.Length)) {
            long[] block_60 = _idx(blocks_50, bindex_59);
            long[] w_61 = new long[]{};
            long t_62 = 0;
            while ((t_62 < 16)) {
                long j3_63 = (t_62 * 4);
                long word_64 = ((((((_idx(block_60, j3_63) * 256) + _idx(block_60, (j3_63 + 1))) * 256) + _idx(block_60, (j3_63 + 2))) * 256) + _idx(block_60, (j3_63 + 3)));
                w_61 = ((Func<long[]>)(() => { var _tmp = w_61.ToList(); _tmp.Add(word_64); return _tmp.ToArray(); }))();
                t_62 = (t_62 + 1);
            }
            while ((t_62 < 80)) {
                long tmp_65 = Program.bit_xor(Program.bit_xor(Program.bit_xor(_idx(w_61, (t_62 - 3)), _idx(w_61, (t_62 - 8))), _idx(w_61, (t_62 - 14))), _idx(w_61, (t_62 - 16)));
                w_61 = ((Func<long[]>)(() => { var _tmp = w_61.ToList(); _tmp.Add(Program.rotate_left(tmp_65, 1)); return _tmp.ToArray(); }))();
                t_62 = (t_62 + 1);
            }
            long a_66 = h0_54;
            long b_67 = h1_55;
            long c_68 = h2_56;
            long d_69 = h3_57;
            long e_70 = h4_58;
            long i2_71 = 0;
            while ((i2_71 < 80)) {
                long f_72 = 0;
                long kconst_73 = 0;
                if ((i2_71 < 20)) {
                    f_72 = Program.bit_or(Program.bit_and(b_67, c_68), Program.bit_and(Program.bit_not(b_67), d_69));
                    kconst_73 = 1518500249;
                } else if ((i2_71 < 40)) {
                    f_72 = Program.bit_xor(Program.bit_xor(b_67, c_68), d_69);
                    kconst_73 = 1859775393;
                } else if ((i2_71 < 60)) {
                    f_72 = Program.bit_or(Program.bit_or(Program.bit_and(b_67, c_68), Program.bit_and(b_67, d_69)), Program.bit_and(c_68, d_69));
                    kconst_73 = 2400959708L;
                } else {
                    f_72 = Program.bit_xor(Program.bit_xor(b_67, c_68), d_69);
                    kconst_73 = 3395469782L;
                }
                long temp_74 = _mod(((((Program.rotate_left(a_66, 5) + f_72) + e_70) + kconst_73) + _idx(w_61, i2_71)), MOD_0);
                e_70 = d_69;
                d_69 = c_68;
                c_68 = Program.rotate_left(b_67, 30);
                b_67 = a_66;
                a_66 = temp_74;
                i2_71 = (i2_71 + 1);
            }
            h0_54 = _mod((h0_54 + a_66), MOD_0);
            h1_55 = _mod((h1_55 + b_67), MOD_0);
            h2_56 = _mod((h2_56 + c_68), MOD_0);
            h3_57 = _mod((h3_57 + d_69), MOD_0);
            h4_58 = _mod((h4_58 + e_70), MOD_0);
            bindex_59 = (bindex_59 + 1);
        };
        return ((((Program.to_hex32(h0_54) + Program.to_hex32(h1_55)) + Program.to_hex32(h2_56)) + Program.to_hex32(h3_57)) + Program.to_hex32(h4_58));
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.sha1("Test String")));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
