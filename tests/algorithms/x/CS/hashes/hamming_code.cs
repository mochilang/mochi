// Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class DecodeResult {
    public long[] data;
    public bool ack;
    public override string ToString() => $"DecodeResult {{data = {data}, ack = {ack}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long index_of(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), 1) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static long ord(string ch_3) {
        string upper_4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_5 = "abcdefghijklmnopqrstuvwxyz";
        long idx_6 = Program.index_of(upper_4, ch_3);
        if ((idx_6 >= 0)) {
            return (65 + idx_6);
        };
        idx_6 = Program.index_of(lower_5, ch_3);
        if ((idx_6 >= 0)) {
            return (97 + idx_6);
        };
        return 0;
    }

    public static string chr(long n_7) {
        string upper_8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_9 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_7 >= 65) && (n_7 < 91))) {
            return _substr(upper_8, (n_7 - 65), (n_7 - 64));
        };
        if (((n_7 >= 97) && (n_7 < 123))) {
            return _substr(lower_9, (n_7 - 97), (n_7 - 96));
        };
        return "?";
    }

    public static string text_to_bits(string text_10) {
        string bits_11 = "";
        long i_12 = 0;
        while ((i_12 < text_10.Length)) {
            long code_13 = Program.ord(text_10.Substring((int)(i_12), 1));
            long j_14 = 7;
            while ((j_14 >= 0)) {
                long p_15 = Program.pow2(j_14);
                if ((_mod((code_13 / p_15), 2) == 1)) {
                    bits_11 = (bits_11 + "1");
                } else {
                    bits_11 = (bits_11 + "0");
                }
                j_14 = (j_14 - 1);
            }
            i_12 = (i_12 + 1);
        };
        return bits_11;
    }

    public static string text_from_bits(string bits_16) {
        string text_17 = "";
        long i_18 = 0;
        while ((i_18 < bits_16.Length)) {
            long code_19 = 0;
            long j_20 = 0;
            while (((j_20 < 8) && ((i_18 + j_20) < bits_16.Length))) {
                code_19 = (code_19 * 2);
                if ((bits_16.Substring((int)((i_18 + j_20)), 1) == "1")) {
                    code_19 = (code_19 + 1);
                }
                j_20 = (j_20 + 1);
            }
            text_17 = (text_17 + Program.chr(code_19));
            i_18 = (i_18 + 8);
        };
        return text_17;
    }

    public static string bool_to_string(bool b_21) {
        if (b_21) {
            return "True";
        };
        return "False";
    }

    public static long[] string_to_bitlist(string s_22) {
        long[] res_23 = new long[]{};
        long i_24 = 0;
        while ((i_24 < s_22.Length)) {
            if ((s_22.Substring((int)(i_24), 1) == "1")) {
                res_23 = (Enumerable.ToArray(Enumerable.Append<long>(res_23, 1)));
            } else {
                res_23 = (Enumerable.ToArray(Enumerable.Append<long>(res_23, 0)));
            }
            i_24 = (i_24 + 1);
        };
        return res_23;
    }

    public static string bitlist_to_string(long[] bits_25) {
        string s_26 = "";
        long i_27 = 0;
        while ((i_27 < bits_25.Length)) {
            if ((bits_25[(int)(i_27)] == 1)) {
                s_26 = (s_26 + "1");
            } else {
                s_26 = (s_26 + "0");
            }
            i_27 = (i_27 + 1);
        };
        return s_26;
    }

    public static bool is_power_of_two(long x_28) {
        if ((x_28 < 1)) {
            return false;
        };
        long p_29 = 1;
        while ((p_29 < x_28)) {
            p_29 = (p_29 * 2);
        };
        return (p_29 == x_28);
    }

    public static bool list_eq(long[] a_30, long[] b_31) {
        if ((a_30.Length != b_31.Length)) {
            return false;
        };
        long i_32 = 0;
        while ((i_32 < a_30.Length)) {
            if ((a_30[(int)(i_32)] != b_31[(int)(i_32)])) {
                return false;
            }
            i_32 = (i_32 + 1);
        };
        return true;
    }

    public static long pow2(long e_33) {
        long res_34 = 1;
        long i_35 = 0;
        while ((i_35 < e_33)) {
            res_34 = (res_34 * 2);
            i_35 = (i_35 + 1);
        };
        return res_34;
    }

    public static bool has_bit(long n_36, long b_37) {
        long p_38 = Program.pow2(b_37);
        if ((_mod((n_36 / p_38), 2) == 1)) {
            return true;
        };
        return false;
    }

    public static long[] hamming_encode(long r_39, long[] data_bits_40) {
        long total_41 = (r_39 + data_bits_40.Length);
        long[] data_ord_42 = new long[]{};
        long cont_data_43 = 0;
        long x_44 = 1;
        while ((x_44 <= total_41)) {
            if (Program.is_power_of_two(x_44)) {
                data_ord_42 = (Enumerable.ToArray(Enumerable.Append<long>(data_ord_42, -1)));
            } else {
                data_ord_42 = (Enumerable.ToArray(Enumerable.Append<long>(data_ord_42, data_bits_40[(int)(cont_data_43)])));
                cont_data_43 = (cont_data_43 + 1);
            }
            x_44 = (x_44 + 1);
        };
        long[] parity_45 = new long[]{};
        long bp_46 = 0;
        while ((bp_46 < r_39)) {
            long cont_bo_47 = 0;
            long j_48 = 0;
            while ((j_48 < data_ord_42.Length)) {
                long bit_49 = data_ord_42[(int)(j_48)];
                if ((bit_49 >= 0)) {
                    long pos_50 = (j_48 + 1);
                    if ((Program.has_bit(pos_50, bp_46) && (bit_49 == 1))) {
                        cont_bo_47 = (cont_bo_47 + 1);
                    }
                }
                j_48 = (j_48 + 1);
            }
            parity_45 = (Enumerable.ToArray(Enumerable.Append<long>(parity_45, _mod(cont_bo_47, 2))));
            bp_46 = (bp_46 + 1);
        };
        long[] result_51 = new long[]{};
        long cont_bp_52 = 0;
        long i_53 = 0;
        while ((i_53 < data_ord_42.Length)) {
            if ((data_ord_42[(int)(i_53)] < 0)) {
                result_51 = (Enumerable.ToArray(Enumerable.Append<long>(result_51, parity_45[(int)(cont_bp_52)])));
                cont_bp_52 = (cont_bp_52 + 1);
            } else {
                result_51 = (Enumerable.ToArray(Enumerable.Append<long>(result_51, data_ord_42[(int)(i_53)])));
            }
            i_53 = (i_53 + 1);
        };
        return result_51;
    }

    public static DecodeResult hamming_decode(long r_54, long[] code_55) {
        long[] data_output_56 = new long[]{};
        long[] parity_received_57 = new long[]{};
        long i_58 = 1;
        long idx_59 = 0;
        while ((i_58 <= code_55.Length)) {
            if (Program.is_power_of_two(i_58)) {
                parity_received_57 = (Enumerable.ToArray(Enumerable.Append<long>(parity_received_57, code_55[(int)(idx_59)])));
            } else {
                data_output_56 = (Enumerable.ToArray(Enumerable.Append<long>(data_output_56, code_55[(int)(idx_59)])));
            }
            idx_59 = (idx_59 + 1);
            i_58 = (i_58 + 1);
        };
        long[] recomputed_60 = Program.hamming_encode(r_54, data_output_56);
        long[] parity_calc_61 = new long[]{};
        long j_62 = 0;
        while ((j_62 < recomputed_60.Length)) {
            if (Program.is_power_of_two((j_62 + 1))) {
                parity_calc_61 = (Enumerable.ToArray(Enumerable.Append<long>(parity_calc_61, recomputed_60[(int)(j_62)])));
            }
            j_62 = (j_62 + 1);
        };
        bool ack_63 = Program.list_eq(parity_received_57, parity_calc_61);
        return new DecodeResult{data = data_output_56, ack = ack_63};
    }

    public static void main() {
        long sizePari_64 = 4;
        long be_65 = 2;
        string text_66 = "Message01";
        string binary_67 = Program.text_to_bits(text_66);
        Console.WriteLine(Program._fmtTop((("Text input in binary is '" + binary_67) + "'")));
        long[] data_bits_68 = Program.string_to_bitlist(binary_67);
        long[] encoded_69 = Program.hamming_encode(sizePari_64, data_bits_68);
        Console.WriteLine(Program._fmtTop(("Data converted ----------> " + Program.bitlist_to_string(encoded_69))));
        DecodeResult decoded_70 = Program.hamming_decode(sizePari_64, encoded_69);
        Console.WriteLine(Program._fmtTop(((("Data receive ------------> " + Program.bitlist_to_string(decoded_70.data)) + " -- Data integrity: ") + Program.bool_to_string(decoded_70.ack))));
        long[] corrupted_71 = new long[]{};
        long i_72 = 0;
        while ((i_72 < encoded_69.Length)) {
            corrupted_71 = (Enumerable.ToArray(Enumerable.Append<long>(corrupted_71, encoded_69[(int)(i_72)])));
            i_72 = (i_72 + 1);
        };
        long pos_73 = (be_65 - 1);
        if ((corrupted_71[(int)(pos_73)] == 0)) {
            corrupted_71[pos_73] = 1;
        } else {
            corrupted_71[pos_73] = 0;
        };
        DecodeResult decoded_err_74 = Program.hamming_decode(sizePari_64, corrupted_71);
        Console.WriteLine(Program._fmtTop(((("Data receive (error) ----> " + Program.bitlist_to_string(decoded_err_74.data)) + " -- Data integrity: ") + Program.bool_to_string(decoded_err_74.ack))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
