// Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ASCII_0 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
    static string message_32 = "HELLO WORLD";
    static long token_33 = 123;
    static string encoded_34 = Program.enigma_encrypt(message_32, token_33);
    public static string[] build_alphabet() {
        string[] result_1 = new string[]{};
        long i_2 = 0;
        while ((i_2 < ASCII_0.Length)) {
            result_1 = (Enumerable.ToArray(Enumerable.Append<string>(result_1, ASCII_0.Substring((int)(i_2), 1))));
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long[] range_list(long n_3) {
        long[] lst_4 = new long[]{};
        long i_5 = 0;
        while ((i_5 < n_3)) {
            lst_4 = (Enumerable.ToArray(Enumerable.Append<long>(lst_4, i_5)));
            i_5 = (i_5 + 1);
        };
        return lst_4;
    }

    public static long[] reversed_range_list(long n_6) {
        long[] lst_7 = new long[]{};
        long i_8 = (n_6 - 1);
        while ((i_8 >= 0)) {
            lst_7 = (Enumerable.ToArray(Enumerable.Append<long>(lst_7, i_8)));
            i_8 = (i_8 - 1);
        };
        return lst_7;
    }

    public static long index_of_char(string[] lst_9, string ch_10) {
        long i_11 = 0;
        while ((i_11 < lst_9.Length)) {
            if ((lst_9[(int)(i_11)] == ch_10)) {
                return i_11;
            }
            i_11 = (i_11 + 1);
        };
        return -1;
    }

    public static long index_of_int(long[] lst_12, long value_13) {
        long i_14 = 0;
        while ((i_14 < lst_12.Length)) {
            if ((lst_12[(int)(i_14)] == value_13)) {
                return i_14;
            }
            i_14 = (i_14 + 1);
        };
        return -1;
    }

    public static string enigma_encrypt(string message_15, long token_16) {
        string[] alphabets_17 = Program.build_alphabet();
        long n_18 = alphabets_17.Length;
        long[] gear_one_19 = Program.range_list(n_18);
        long[] gear_two_20 = Program.range_list(n_18);
        long[] gear_three_21 = Program.range_list(n_18);
        long[] reflector_22 = Program.reversed_range_list(n_18);
        long gear_one_pos_23 = 0;
        long gear_two_pos_24 = 0;
        long gear_three_pos_25 = 0;
        Action rotator = null;
        rotator = () => {long i_26 = gear_one_19[(int)(0)]; gear_one_19 = gear_one_19.Skip((int)(1)).Take((int)((gear_one_19.Length - 1))).ToArray(); gear_one_19 = (Enumerable.ToArray(Enumerable.Append<long>(gear_one_19, i_26))); gear_one_pos_23 = (gear_one_pos_23 + 1); if ((_mod(gear_one_pos_23, n_18) == 0)) {
            i_26 = gear_two_20[(int)(0)];
            gear_two_20 = gear_two_20.Skip((int)(1)).Take((int)((gear_two_20.Length - 1))).ToArray();
            gear_two_20 = (Enumerable.ToArray(Enumerable.Append<long>(gear_two_20, i_26)));
            gear_two_pos_24 = (gear_two_pos_24 + 1);
            if ((_mod(gear_two_pos_24, n_18) == 0)) {
                i_26 = gear_three_21[(int)(0)];
                gear_three_21 = gear_three_21.Skip((int)(1)).Take((int)((gear_three_21.Length - 1))).ToArray();
                gear_three_21 = (Enumerable.ToArray(Enumerable.Append<long>(gear_three_21, i_26)));
                gear_three_pos_25 = (gear_three_pos_25 + 1);
            }
        };};
        Func<string, string> engine = null;
        engine = (string ch_27) => {long target_28 = Program.index_of_char(alphabets_17, ch_27); target_28 = gear_one_19[(int)(target_28)]; target_28 = gear_two_20[(int)(target_28)]; target_28 = gear_three_21[(int)(target_28)]; target_28 = reflector_22[(int)(target_28)]; target_28 = Program.index_of_int(gear_three_21, target_28); target_28 = Program.index_of_int(gear_two_20, target_28); target_28 = Program.index_of_int(gear_one_19, target_28); rotator(); return alphabets_17[(int)(target_28)];};
        long t_29 = 0;
        while ((t_29 < token_16)) {
            rotator();
            t_29 = (t_29 + 1);
        };
        string result_30 = "";
        long idx_31 = 0;
        while ((idx_31 < message_15.Length)) {
            result_30 = (result_30 + engine(message_15.Substring((int)(idx_31), 1)));
            idx_31 = (idx_31 + 1);
        };
        return result_30;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(encoded_34));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
