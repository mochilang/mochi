// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Matrix {
    public double[][] data;
    public long rows;
    public long cols;
    public override string ToString() => $"Matrix {{data = {data}, rows = {rows}, cols = {cols}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Matrix make_matrix(double[][] values_0) {
        long r_1 = values_0.Length;
        if ((r_1 == 0)) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        long c_2 = _idx(values_0, 0).Length;
        long i_3 = 0;
        while ((i_3 < r_1)) {
            if ((_idx(values_0, i_3).Length != c_2)) {
                return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
            }
            i_3 = (i_3 + 1);
        };
        return new Matrix{data = values_0, rows = r_1, cols = c_2};
    }

    public static double[][] matrix_columns(Matrix m_4) {
        double[][] cols_5 = new double[][]{};
        long j_6 = 0;
        while ((j_6 < m_4.cols)) {
            double[] col_7 = new double[]{};
            long i_8 = 0;
            while ((i_8 < m_4.rows)) {
                col_7 = ((Func<double[]>)(() => { var _tmp = col_7.ToList(); _tmp.Add(_idx(_idx(m_4.data, i_8), j_6)); return _tmp.ToArray(); }))();
                i_8 = (i_8 + 1);
            }
            cols_5 = ((Func<double[][]>)(() => { var _tmp = cols_5.ToList(); _tmp.Add(col_7); return _tmp.ToArray(); }))();
            j_6 = (j_6 + 1);
        };
        return cols_5;
    }

    public static Matrix matrix_identity(Matrix m_9) {
        double[][] vals_10 = new double[][]{};
        long i_11 = 0;
        while ((i_11 < m_9.rows)) {
            double[] row_12 = new double[]{};
            long j_13 = 0;
            while ((j_13 < m_9.cols)) {
                double v_14 = ((i_11 == j_13) ? 1.0 : 0.0);
                row_12 = ((Func<double[]>)(() => { var _tmp = row_12.ToList(); _tmp.Add(v_14); return _tmp.ToArray(); }))();
                j_13 = (j_13 + 1);
            }
            vals_10 = ((Func<double[][]>)(() => { var _tmp = vals_10.ToList(); _tmp.Add(row_12); return _tmp.ToArray(); }))();
            i_11 = (i_11 + 1);
        };
        return new Matrix{data = vals_10, rows = m_9.rows, cols = m_9.cols};
    }

    public static double matrix_minor(Matrix m_15, long r_16, long c_17) {
        double[][] vals_18 = new double[][]{};
        long i_19 = 0;
        while ((i_19 < m_15.rows)) {
            if ((i_19 != r_16)) {
                double[] row_20 = new double[]{};
                long j_21 = 0;
                while ((j_21 < m_15.cols)) {
                    if ((j_21 != c_17)) {
                        row_20 = ((Func<double[]>)(() => { var _tmp = row_20.ToList(); _tmp.Add(_idx(_idx(m_15.data, i_19), j_21)); return _tmp.ToArray(); }))();
                    }
                    j_21 = (j_21 + 1);
                }
                vals_18 = ((Func<double[][]>)(() => { var _tmp = vals_18.ToList(); _tmp.Add(row_20); return _tmp.ToArray(); }))();
            }
            i_19 = (i_19 + 1);
        };
        Matrix sub_22 = new Matrix{data = vals_18, rows = (m_15.rows - 1), cols = (m_15.cols - 1)};
        return Program.matrix_determinant(sub_22);
    }

    public static double matrix_cofactor(Matrix m_23, long r_24, long c_25) {
        double minor_26 = Program.matrix_minor(m_23, r_24, c_25);
        if ((_mod((r_24 + c_25), 2) == 0)) {
            return minor_26;
        };
        return (-1.0 * minor_26);
    }

    public static Matrix matrix_minors(Matrix m_27) {
        double[][] vals_28 = new double[][]{};
        long i_29 = 0;
        while ((i_29 < m_27.rows)) {
            double[] row_30 = new double[]{};
            long j_31 = 0;
            while ((j_31 < m_27.cols)) {
                row_30 = ((Func<double[]>)(() => { var _tmp = row_30.ToList(); _tmp.Add(Program.matrix_minor(m_27, i_29, j_31)); return _tmp.ToArray(); }))();
                j_31 = (j_31 + 1);
            }
            vals_28 = ((Func<double[][]>)(() => { var _tmp = vals_28.ToList(); _tmp.Add(row_30); return _tmp.ToArray(); }))();
            i_29 = (i_29 + 1);
        };
        return new Matrix{data = vals_28, rows = m_27.rows, cols = m_27.cols};
    }

    public static Matrix matrix_cofactors(Matrix m_32) {
        double[][] vals_33 = new double[][]{};
        long i_34 = 0;
        while ((i_34 < m_32.rows)) {
            double[] row_35 = new double[]{};
            long j_36 = 0;
            while ((j_36 < m_32.cols)) {
                row_35 = ((Func<double[]>)(() => { var _tmp = row_35.ToList(); _tmp.Add(Program.matrix_cofactor(m_32, i_34, j_36)); return _tmp.ToArray(); }))();
                j_36 = (j_36 + 1);
            }
            vals_33 = ((Func<double[][]>)(() => { var _tmp = vals_33.ToList(); _tmp.Add(row_35); return _tmp.ToArray(); }))();
            i_34 = (i_34 + 1);
        };
        return new Matrix{data = vals_33, rows = m_32.rows, cols = m_32.cols};
    }

    public static double matrix_determinant(Matrix m_37) {
        if ((m_37.rows != m_37.cols)) {
            return 0.0;
        };
        if ((m_37.rows == 0)) {
            return 0.0;
        };
        if ((m_37.rows == 1)) {
            return _idx(_idx(m_37.data, 0), 0);
        };
        if ((m_37.rows == 2)) {
            return ((_idx(_idx(m_37.data, 0), 0) * _idx(_idx(m_37.data, 1), 1)) - (_idx(_idx(m_37.data, 0), 1) * _idx(_idx(m_37.data, 1), 0)));
        };
        double sum_38 = 0.0;
        long j_39 = 0;
        while ((j_39 < m_37.cols)) {
            sum_38 = (sum_38 + (_idx(_idx(m_37.data, 0), j_39) * Program.matrix_cofactor(m_37, 0, j_39)));
            j_39 = (j_39 + 1);
        };
        return sum_38;
    }

    public static bool matrix_is_invertible(Matrix m_40) {
        return (Program.matrix_determinant(m_40) != 0.0);
    }

    public static Matrix matrix_adjugate(Matrix m_41) {
        Matrix cof_42 = Program.matrix_cofactors(m_41);
        double[][] vals_43 = new double[][]{};
        long i_44 = 0;
        while ((i_44 < m_41.rows)) {
            double[] row_45 = new double[]{};
            long j_46 = 0;
            while ((j_46 < m_41.cols)) {
                row_45 = ((Func<double[]>)(() => { var _tmp = row_45.ToList(); _tmp.Add(_idx(_idx(cof_42.data, j_46), i_44)); return _tmp.ToArray(); }))();
                j_46 = (j_46 + 1);
            }
            vals_43 = ((Func<double[][]>)(() => { var _tmp = vals_43.ToList(); _tmp.Add(row_45); return _tmp.ToArray(); }))();
            i_44 = (i_44 + 1);
        };
        return new Matrix{data = vals_43, rows = m_41.rows, cols = m_41.cols};
    }

    public static Matrix matrix_inverse(Matrix m_47) {
        double det_48 = Program.matrix_determinant(m_47);
        if ((det_48 == 0.0)) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        Matrix adj_49 = Program.matrix_adjugate(m_47);
        return Program.matrix_mul_scalar(adj_49, (1.0 / det_48));
    }

    public static Matrix matrix_add_row(Matrix m_50, double[] row_51) {
        double[][] newData_52 = m_50.data;
        newData_52 = ((Func<double[][]>)(() => { var _tmp = newData_52.ToList(); _tmp.Add(row_51); return _tmp.ToArray(); }))();
        return new Matrix{data = newData_52, rows = (m_50.rows + 1), cols = m_50.cols};
    }

    public static Matrix matrix_add_column(Matrix m_53, double[] col_54) {
        double[][] newData_55 = new double[][]{};
        long i_56 = 0;
        while ((i_56 < m_53.rows)) {
            newData_55 = ((Func<double[][]>)(() => { var _tmp = newData_55.ToList(); _tmp.Add(((Func<double[]>)(() => { var _tmp = _idx(m_53.data, i_56).ToList(); _tmp.Add(_idx(col_54, i_56)); return _tmp.ToArray(); }))()); return _tmp.ToArray(); }))();
            i_56 = (i_56 + 1);
        };
        return new Matrix{data = newData_55, rows = m_53.rows, cols = (m_53.cols + 1)};
    }

    public static Matrix matrix_mul_scalar(Matrix m_57, double s_58) {
        double[][] vals_59 = new double[][]{};
        long i_60 = 0;
        while ((i_60 < m_57.rows)) {
            double[] row_61 = new double[]{};
            long j_62 = 0;
            while ((j_62 < m_57.cols)) {
                row_61 = ((Func<double[]>)(() => { var _tmp = row_61.ToList(); _tmp.Add((_idx(_idx(m_57.data, i_60), j_62) * s_58)); return _tmp.ToArray(); }))();
                j_62 = (j_62 + 1);
            }
            vals_59 = ((Func<double[][]>)(() => { var _tmp = vals_59.ToList(); _tmp.Add(row_61); return _tmp.ToArray(); }))();
            i_60 = (i_60 + 1);
        };
        return new Matrix{data = vals_59, rows = m_57.rows, cols = m_57.cols};
    }

    public static Matrix matrix_neg(Matrix m_63) {
        return Program.matrix_mul_scalar(m_63, -1.0);
    }

    public static Matrix matrix_add(Matrix a_64, Matrix b_65) {
        if (((a_64.rows != b_65.rows) || (a_64.cols != b_65.cols))) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        double[][] vals_66 = new double[][]{};
        long i_67 = 0;
        while ((i_67 < a_64.rows)) {
            double[] row_68 = new double[]{};
            long j_69 = 0;
            while ((j_69 < a_64.cols)) {
                row_68 = ((Func<double[]>)(() => { var _tmp = row_68.ToList(); _tmp.Add((_idx(_idx(a_64.data, i_67), j_69) + _idx(_idx(b_65.data, i_67), j_69))); return _tmp.ToArray(); }))();
                j_69 = (j_69 + 1);
            }
            vals_66 = ((Func<double[][]>)(() => { var _tmp = vals_66.ToList(); _tmp.Add(row_68); return _tmp.ToArray(); }))();
            i_67 = (i_67 + 1);
        };
        return new Matrix{data = vals_66, rows = a_64.rows, cols = a_64.cols};
    }

    public static Matrix matrix_sub(Matrix a_70, Matrix b_71) {
        if (((a_70.rows != b_71.rows) || (a_70.cols != b_71.cols))) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        double[][] vals_72 = new double[][]{};
        long i_73 = 0;
        while ((i_73 < a_70.rows)) {
            double[] row_74 = new double[]{};
            long j_75 = 0;
            while ((j_75 < a_70.cols)) {
                row_74 = ((Func<double[]>)(() => { var _tmp = row_74.ToList(); _tmp.Add((_idx(_idx(a_70.data, i_73), j_75) - _idx(_idx(b_71.data, i_73), j_75))); return _tmp.ToArray(); }))();
                j_75 = (j_75 + 1);
            }
            vals_72 = ((Func<double[][]>)(() => { var _tmp = vals_72.ToList(); _tmp.Add(row_74); return _tmp.ToArray(); }))();
            i_73 = (i_73 + 1);
        };
        return new Matrix{data = vals_72, rows = a_70.rows, cols = a_70.cols};
    }

    public static double matrix_dot(double[] row_76, double[] col_77) {
        double sum_78 = 0.0;
        long i_79 = 0;
        while ((i_79 < row_76.Length)) {
            sum_78 = (sum_78 + (_idx(row_76, i_79) * _idx(col_77, i_79)));
            i_79 = (i_79 + 1);
        };
        return sum_78;
    }

    public static Matrix matrix_mul(Matrix a_80, Matrix b_81) {
        if ((a_80.cols != b_81.rows)) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        double[][] bcols_82 = Program.matrix_columns(b_81);
        double[][] vals_83 = new double[][]{};
        long i_84 = 0;
        while ((i_84 < a_80.rows)) {
            double[] row_85 = new double[]{};
            long j_86 = 0;
            while ((j_86 < b_81.cols)) {
                row_85 = ((Func<double[]>)(() => { var _tmp = row_85.ToList(); _tmp.Add(Program.matrix_dot(_idx(a_80.data, i_84), _idx(bcols_82, j_86))); return _tmp.ToArray(); }))();
                j_86 = (j_86 + 1);
            }
            vals_83 = ((Func<double[][]>)(() => { var _tmp = vals_83.ToList(); _tmp.Add(row_85); return _tmp.ToArray(); }))();
            i_84 = (i_84 + 1);
        };
        return new Matrix{data = vals_83, rows = a_80.rows, cols = b_81.cols};
    }

    public static Matrix matrix_pow(Matrix m_87, long p_88) {
        if ((p_88 == 0)) {
            return Program.matrix_identity(m_87);
        };
        if ((p_88 < 0)) {
            if (Program.matrix_is_invertible(m_87)) {
                return Program.matrix_pow(Program.matrix_inverse(m_87), -p_88);
            }
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        Matrix result_89 = m_87;
        long i_90 = 1;
        while ((i_90 < p_88)) {
            result_89 = Program.matrix_mul(result_89, m_87);
            i_90 = (i_90 + 1);
        };
        return result_89;
    }

    public static string matrix_to_string(Matrix m_91) {
        if ((m_91.rows == 0)) {
            return "[]";
        };
        string s_92 = "[";
        long i_93 = 0;
        while ((i_93 < m_91.rows)) {
            s_92 = (s_92 + "[");
            long j_94 = 0;
            while ((j_94 < m_91.cols)) {
                s_92 = (s_92 + _fmtStr(_idx(_idx(m_91.data, i_93), j_94)));
                if ((j_94 < (m_91.cols - 1))) {
                    s_92 = (s_92 + " ");
                }
                j_94 = (j_94 + 1);
            }
            s_92 = (s_92 + "]");
            if ((i_93 < (m_91.rows - 1))) {
                s_92 = (s_92 + "\n ");
            }
            i_93 = (i_93 + 1);
        };
        s_92 = (s_92 + "]");
        return s_92;
    }

    public static void main() {
        Matrix m_95 = Program.make_matrix(new double[][]{new double[]{1.0, 2.0, 3.0}, new double[]{4.0, 5.0, 6.0}, new double[]{7.0, 8.0, 9.0}});
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(m_95)));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.matrix_columns(m_95))));
        Console.WriteLine(Program._fmtTop(((_fmtStr(m_95.rows) + ",") + _fmtStr(m_95.cols))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.matrix_is_invertible(m_95))));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_identity(m_95))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.matrix_determinant(m_95))));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_minors(m_95))));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_cofactors(m_95))));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_adjugate(m_95))));
        Matrix m2_96 = Program.matrix_mul_scalar(m_95, 3.0);
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(m2_96)));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_add(m_95, m2_96))));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_sub(m_95, m2_96))));
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_pow(m_95, 3))));
        Matrix m3_97 = Program.matrix_add_row(m_95, new double[]{10.0, 11.0, 12.0});
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(m3_97)));
        Matrix m4_98 = Program.matrix_add_column(m2_96, new double[]{8.0, 16.0, 32.0});
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(Program.matrix_mul(m3_97, m4_98))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
