// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double[] cramers_rule_2x2(double[] eq1_0, double[] eq2_1) {
        if (((eq1_0.Length != 3) || (eq2_1.Length != 3))) {
            throw new Exception("Please enter a valid equation.");
        };
        if (((((_idx(eq1_0, 0) == 0.0) && (_idx(eq1_0, 1) == 0.0)) && (_idx(eq2_1, 0) == 0.0)) && (_idx(eq2_1, 1) == 0.0))) {
            throw new Exception("Both a & b of two equations can't be zero.");
        };
        double a1_2 = _idx(eq1_0, 0);
        double b1_3 = _idx(eq1_0, 1);
        double c1_4 = _idx(eq1_0, 2);
        double a2_5 = _idx(eq2_1, 0);
        double b2_6 = _idx(eq2_1, 1);
        double c2_7 = _idx(eq2_1, 2);
        double determinant_8 = ((a1_2 * b2_6) - (a2_5 * b1_3));
        double determinant_x_9 = ((c1_4 * b2_6) - (c2_7 * b1_3));
        double determinant_y_10 = ((a1_2 * c2_7) - (a2_5 * c1_4));
        if ((determinant_8 == 0.0)) {
            if (((determinant_x_9 == 0.0) && (determinant_y_10 == 0.0))) {
                throw new Exception("Infinite solutions. (Consistent system)");
            }
            throw new Exception("No solution. (Inconsistent system)");
        };
        if (((determinant_x_9 == 0.0) && (determinant_y_10 == 0.0))) {
            return new double[]{0.0, 0.0};
        };
        double x_11 = (determinant_x_9 / determinant_8);
        double y_12 = (determinant_y_10 / determinant_8);
        return new double[]{x_11, y_12};
    }

    public static void test_cramers_rule_2x2() {
        double[] r1_13 = Program.cramers_rule_2x2(new double[]{2.0, 3.0, 0.0}, new double[]{5.0, 1.0, 0.0});
        if (((_idx(r1_13, 0) != 0.0) || (_idx(r1_13, 1) != 0.0))) {
            throw new Exception("Test1 failed");
        };
        double[] r2_14 = Program.cramers_rule_2x2(new double[]{0.0, 4.0, 50.0}, new double[]{2.0, 0.0, 26.0});
        if (((_idx(r2_14, 0) != 13.0) || (_idx(r2_14, 1) != 12.5))) {
            throw new Exception("Test2 failed");
        };
    }

    public static void main() {
        Program.test_cramers_rule_2x2();
        Console.WriteLine(Program._fmtTop(Program.cramers_rule_2x2(new double[]{11.0, 2.0, 30.0}, new double[]{1.0, 0.0, 4.0})));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
