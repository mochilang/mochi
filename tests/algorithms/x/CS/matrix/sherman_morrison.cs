// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Matrix {
    public double[][] data;
    public long rows;
    public long cols;
    public override string ToString() => $"Matrix {{data = {data}, rows = {rows}, cols = {cols}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Matrix make_matrix(long rows_0, long cols_1, double value_2) {
        double[][] arr_3 = new double[][]{};
        long r_4 = 0;
        while ((r_4 < rows_0)) {
            double[] row_5 = new double[]{};
            long c_6 = 0;
            while ((c_6 < cols_1)) {
                row_5 = ((Func<double[]>)(() => { var _tmp = row_5.Cast<double>().ToList(); _tmp.Add(value_2); return _tmp.ToArray(); }))();
                c_6 = (c_6 + 1);
            }
            arr_3 = ((Func<double[][]>)(() => { var _tmp = arr_3.Cast<double[]>().ToList(); _tmp.Add(row_5); return _tmp.ToArray(); }))();
            r_4 = (r_4 + 1);
        };
        return new Matrix{data = arr_3, rows = rows_0, cols = cols_1};
    }

    public static Matrix matrix_from_lists(double[][] vals_7) {
        long r_8 = vals_7.Length;
        long c_9 = ((r_8 == 0) ? 0 : _idx(vals_7, 0).Length);
        return new Matrix{data = vals_7, rows = r_8, cols = c_9};
    }

    public static string matrix_to_string(Matrix m_10) {
        string s_11 = "";
        long i_12 = 0;
        while ((i_12 < m_10.rows)) {
            s_11 = (s_11 + "[");
            long j_13 = 0;
            while ((j_13 < m_10.cols)) {
                s_11 = (s_11 + _fmtStr(_idx(_idx(m_10.data, i_12), j_13)));
                if ((j_13 < (m_10.cols - 1))) {
                    s_11 = (s_11 + ", ");
                }
                j_13 = (j_13 + 1);
            }
            s_11 = (s_11 + "]");
            if ((i_12 < (m_10.rows - 1))) {
                s_11 = (s_11 + "\n");
            }
            i_12 = (i_12 + 1);
        };
        return s_11;
    }

    public static Matrix matrix_add(Matrix a_14, Matrix b_15) {
        if (((a_14.rows != b_15.rows) || (a_14.cols != b_15.cols))) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        double[][] res_16 = new double[][]{};
        long i_17 = 0;
        while ((i_17 < a_14.rows)) {
            double[] row_18 = new double[]{};
            long j_19 = 0;
            while ((j_19 < a_14.cols)) {
                row_18 = ((Func<double[]>)(() => { var _tmp = row_18.Cast<double>().ToList(); _tmp.Add((_idx(_idx(a_14.data, i_17), j_19) + _idx(_idx(b_15.data, i_17), j_19))); return _tmp.ToArray(); }))();
                j_19 = (j_19 + 1);
            }
            res_16 = ((Func<double[][]>)(() => { var _tmp = res_16.Cast<double[]>().ToList(); _tmp.Add(row_18); return _tmp.ToArray(); }))();
            i_17 = (i_17 + 1);
        };
        return new Matrix{data = res_16, rows = a_14.rows, cols = a_14.cols};
    }

    public static Matrix matrix_sub(Matrix a_20, Matrix b_21) {
        if (((a_20.rows != b_21.rows) || (a_20.cols != b_21.cols))) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        double[][] res_22 = new double[][]{};
        long i_23 = 0;
        while ((i_23 < a_20.rows)) {
            double[] row_24 = new double[]{};
            long j_25 = 0;
            while ((j_25 < a_20.cols)) {
                row_24 = ((Func<double[]>)(() => { var _tmp = row_24.Cast<double>().ToList(); _tmp.Add((_idx(_idx(a_20.data, i_23), j_25) - _idx(_idx(b_21.data, i_23), j_25))); return _tmp.ToArray(); }))();
                j_25 = (j_25 + 1);
            }
            res_22 = ((Func<double[][]>)(() => { var _tmp = res_22.Cast<double[]>().ToList(); _tmp.Add(row_24); return _tmp.ToArray(); }))();
            i_23 = (i_23 + 1);
        };
        return new Matrix{data = res_22, rows = a_20.rows, cols = a_20.cols};
    }

    public static Matrix matrix_mul_scalar(Matrix m_26, double k_27) {
        double[][] res_28 = new double[][]{};
        long i_29 = 0;
        while ((i_29 < m_26.rows)) {
            double[] row_30 = new double[]{};
            long j_31 = 0;
            while ((j_31 < m_26.cols)) {
                row_30 = ((Func<double[]>)(() => { var _tmp = row_30.Cast<double>().ToList(); _tmp.Add((_idx(_idx(m_26.data, i_29), j_31) * k_27)); return _tmp.ToArray(); }))();
                j_31 = (j_31 + 1);
            }
            res_28 = ((Func<double[][]>)(() => { var _tmp = res_28.Cast<double[]>().ToList(); _tmp.Add(row_30); return _tmp.ToArray(); }))();
            i_29 = (i_29 + 1);
        };
        return new Matrix{data = res_28, rows = m_26.rows, cols = m_26.cols};
    }

    public static Matrix matrix_mul(Matrix a_32, Matrix b_33) {
        if ((a_32.cols != b_33.rows)) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        double[][] res_34 = new double[][]{};
        long i_35 = 0;
        while ((i_35 < a_32.rows)) {
            double[] row_36 = new double[]{};
            long j_37 = 0;
            while ((j_37 < b_33.cols)) {
                double sum_38 = 0.0;
                long k_39 = 0;
                while ((k_39 < a_32.cols)) {
                    sum_38 = (sum_38 + (_idx(_idx(a_32.data, i_35), k_39) * _idx(_idx(b_33.data, k_39), j_37)));
                    k_39 = (k_39 + 1);
                }
                row_36 = ((Func<double[]>)(() => { var _tmp = row_36.Cast<double>().ToList(); _tmp.Add(sum_38); return _tmp.ToArray(); }))();
                j_37 = (j_37 + 1);
            }
            res_34 = ((Func<double[][]>)(() => { var _tmp = res_34.Cast<double[]>().ToList(); _tmp.Add(row_36); return _tmp.ToArray(); }))();
            i_35 = (i_35 + 1);
        };
        return new Matrix{data = res_34, rows = a_32.rows, cols = b_33.cols};
    }

    public static Matrix matrix_transpose(Matrix m_40) {
        double[][] res_41 = new double[][]{};
        long c_42 = 0;
        while ((c_42 < m_40.cols)) {
            double[] row_43 = new double[]{};
            long r_44 = 0;
            while ((r_44 < m_40.rows)) {
                row_43 = ((Func<double[]>)(() => { var _tmp = row_43.Cast<double>().ToList(); _tmp.Add(_idx(_idx(m_40.data, r_44), c_42)); return _tmp.ToArray(); }))();
                r_44 = (r_44 + 1);
            }
            res_41 = ((Func<double[][]>)(() => { var _tmp = res_41.Cast<double[]>().ToList(); _tmp.Add(row_43); return _tmp.ToArray(); }))();
            c_42 = (c_42 + 1);
        };
        return new Matrix{data = res_41, rows = m_40.cols, cols = m_40.rows};
    }

    public static Matrix sherman_morrison(Matrix ainv_45, Matrix u_46, Matrix v_47) {
        Matrix vt_48 = Program.matrix_transpose(v_47);
        Matrix vu_49 = Program.matrix_mul(Program.matrix_mul(vt_48, ainv_45), u_46);
        double factor_50 = (_idx(_idx(vu_49.data, 0), 0) + 1.0);
        if ((factor_50 == 0.0)) {
            return new Matrix{data = new double[][]{}, rows = 0, cols = 0};
        };
        Matrix term1_51 = Program.matrix_mul(ainv_45, u_46);
        Matrix term2_52 = Program.matrix_mul(vt_48, ainv_45);
        Matrix numerator_53 = Program.matrix_mul(term1_51, term2_52);
        Matrix scaled_54 = Program.matrix_mul_scalar(numerator_53, (1.0 / factor_50));
        return Program.matrix_sub(ainv_45, scaled_54);
    }

    public static void main() {
        Matrix ainv_55 = Program.matrix_from_lists(new double[][]{new double[]{1.0, 0.0, 0.0}, new double[]{0.0, 1.0, 0.0}, new double[]{0.0, 0.0, 1.0}});
        Matrix u_56 = Program.matrix_from_lists(new double[][]{new double[]{1.0}, new double[]{2.0}, new double[]{-3.0}});
        Matrix v_57 = Program.matrix_from_lists(new double[][]{new double[]{4.0}, new double[]{-2.0}, new double[]{5.0}});
        Matrix result_58 = Program.sherman_morrison(ainv_55, u_56, v_57);
        Console.WriteLine(Program._fmtTop(Program.matrix_to_string(result_58)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
