// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] matrix_1_to_4_30 = new long[][]{new long[]{1, 2}, new long[]{3, 4}};
    static long[][] matrix_5_to_8_31 = new long[][]{new long[]{5, 6}, new long[]{7, 8}};
    static long[][] matrix_count_up_32 = new long[][]{new long[]{1, 2, 3, 4}, new long[]{5, 6, 7, 8}, new long[]{9, 10, 11, 12}, new long[]{13, 14, 15, 16}};
    static long[][] matrix_unordered_33 = new long[][]{new long[]{5, 8, 1, 2}, new long[]{6, 7, 3, 0}, new long[]{4, 5, 9, 1}, new long[]{2, 6, 10, 14}};
    public static bool is_square(long[][] matrix_0) {
        long n_1 = matrix_0.Length;
        long i_2 = 0;
        while ((i_2 < n_1)) {
            if ((_idx(matrix_0, i_2).Length != n_1)) {
                return false;
            }
            i_2 = (i_2 + 1);
        };
        return true;
    }

    public static long[][] matrix_multiply(long[][] a_3, long[][] b_4) {
        long rows_5 = a_3.Length;
        long cols_6 = _idx(b_4, 0).Length;
        long inner_7 = b_4.Length;
        long[][] result_8 = new long[][]{};
        long i_9 = 0;
        while ((i_9 < rows_5)) {
            long[] row_10 = new long[]{};
            long j_11 = 0;
            while ((j_11 < cols_6)) {
                long sum_12 = 0;
                long k_13 = 0;
                while ((k_13 < inner_7)) {
                    sum_12 = (sum_12 + (_idx(_idx(a_3, i_9), k_13) * _idx(_idx(b_4, k_13), j_11)));
                    k_13 = (k_13 + 1);
                }
                row_10 = ((Func<long[]>)(() => { var _tmp = row_10.ToList(); _tmp.Add(sum_12); return _tmp.ToArray(); }))();
                j_11 = (j_11 + 1);
            }
            result_8 = ((Func<long[][]>)(() => { var _tmp = result_8.ToList(); _tmp.Add(row_10); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static void multiply(long i_14, long j_15, long k_16, long[][] a_17, long[][] b_18, long[][] result_19, long n_20, long m_21) {
        if ((i_14 >= n_20)) {
            return;
        };
        if ((j_15 >= m_21)) {
            Program.multiply((i_14 + 1), 0, 0, a_17, b_18, result_19, n_20, m_21);
            return;
        };
        if ((k_16 >= b_18.Length)) {
            Program.multiply(i_14, (j_15 + 1), 0, a_17, b_18, result_19, n_20, m_21);
            return;
        };
        _idx(result_19, i_14)[(int)(j_15)] = (_idx(_idx(result_19, i_14), j_15) + (_idx(_idx(a_17, i_14), k_16) * _idx(_idx(b_18, k_16), j_15)));
        Program.multiply(i_14, j_15, (k_16 + 1), a_17, b_18, result_19, n_20, m_21);
    }

    public static long[][] matrix_multiply_recursive(long[][] a_22, long[][] b_23) {
        if (((a_22.Length == 0) || (b_23.Length == 0))) {
            return new long[][]{};
        };
        if ((((a_22.Length != b_23.Length) || (!Program.is_square(a_22))) || (!Program.is_square(b_23)))) {
            throw new Exception("Invalid matrix dimensions");
        };
        long n_24 = a_22.Length;
        long m_25 = _idx(b_23, 0).Length;
        long[][] result_26 = new long[][]{};
        long i_27 = 0;
        while ((i_27 < n_24)) {
            long[] row_28 = new long[]{};
            long j_29 = 0;
            while ((j_29 < m_25)) {
                row_28 = ((Func<long[]>)(() => { var _tmp = row_28.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_29 = (j_29 + 1);
            }
            result_26 = ((Func<long[][]>)(() => { var _tmp = result_26.ToList(); _tmp.Add(row_28); return _tmp.ToArray(); }))();
            i_27 = (i_27 + 1);
        };
        Program.multiply(0, 0, 0, a_22, b_23, result_26, n_24, m_25);
        return result_26;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.matrix_multiply_recursive(matrix_1_to_4_30, matrix_5_to_8_31)));
            Console.WriteLine(Program._fmtTop(Program.matrix_multiply_recursive(matrix_count_up_32, matrix_unordered_33)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
