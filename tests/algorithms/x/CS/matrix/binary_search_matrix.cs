// Generated by Mochi 0.10.63 on 2025-08-09 23:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long binary_search(long[] arr_0, long lower_bound_1, long upper_bound_2, long value_3) {
        long r_4 = ((lower_bound_1 + upper_bound_2) / 2);
        if ((arr_0[(int)(r_4 < 0 ? arr_0.Length + (r_4) : r_4)] == value_3)) {
            return r_4;
        };
        if ((lower_bound_1 >= upper_bound_2)) {
            return -1;
        };
        if ((arr_0[(int)(r_4 < 0 ? arr_0.Length + (r_4) : r_4)] < value_3)) {
            return Program.binary_search(arr_0, (r_4 + 1), upper_bound_2, value_3);
        };
        return Program.binary_search(arr_0, lower_bound_1, (r_4 - 1), value_3);
    }

    public static long[] mat_bin_search(long value_5, long[][] matrix_6) {
        long index_7 = 0;
        if ((matrix_6[(int)(index_7 < 0 ? matrix_6.Length + (index_7) : index_7)][(int)(0 < 0 ? matrix_6[(int)(index_7 < 0 ? matrix_6.Length + (index_7) : index_7)].Length + (0) : 0)] == value_5)) {
            return new long[]{index_7, 0};
        };
        while (((index_7 < matrix_6.Length) && (matrix_6[(int)(index_7 < 0 ? matrix_6.Length + (index_7) : index_7)][(int)(0 < 0 ? matrix_6[(int)(index_7 < 0 ? matrix_6.Length + (index_7) : index_7)].Length + (0) : 0)] < value_5))) {
            long r_8 = Program.binary_search(matrix_6[(int)(index_7 < 0 ? matrix_6.Length + (index_7) : index_7)], 0, (matrix_6[(int)(index_7 < 0 ? matrix_6.Length + (index_7) : index_7)].Length - 1), value_5);
            if ((r_8 != -1)) {
                return new long[]{index_7, r_8};
            }
            index_7 = (index_7 + 1);
        };
        return new long[]{-1, -1};
    }

    public static void main() {
        long[] row_9 = new long[]{1, 4, 7, 11, 15};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search(row_9, 0, (row_9.Length - 1), 1))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search(row_9, 0, (row_9.Length - 1), 23))));
        long[][] matrix_10 = new long[][]{new long[]{1, 4, 7, 11, 15}, new long[]{2, 5, 8, 12, 19}, new long[]{3, 6, 9, 16, 22}, new long[]{10, 13, 14, 17, 24}, new long[]{18, 21, 23, 26, 30}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mat_bin_search(1, matrix_10))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mat_bin_search(34, matrix_10))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
