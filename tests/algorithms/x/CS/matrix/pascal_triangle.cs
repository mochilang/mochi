// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] populate_current_row(long[][] triangle_0, long current_row_idx_1) {
        long[] row_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 <= current_row_idx_1)) {
            if (((i_3 == 0) || (i_3 == current_row_idx_1))) {
                row_2 = ((Func<long[]>)(() => { var _tmp = row_2.ToList(); _tmp.Add(1); return _tmp.ToArray(); }))();
            } else {
                long left_4 = _idx(_idx(triangle_0, (current_row_idx_1 - 1)), (i_3 - 1));
                long right_5 = _idx(_idx(triangle_0, (current_row_idx_1 - 1)), i_3);
                row_2 = ((Func<long[]>)(() => { var _tmp = row_2.ToList(); _tmp.Add((left_4 + right_5)); return _tmp.ToArray(); }))();
            }
            i_3 = (i_3 + 1);
        };
        return row_2;
    }

    public static long[][] generate_pascal_triangle(long num_rows_6) {
        if ((num_rows_6 <= 0)) {
            return new long[][]{};
        };
        long[][] triangle_7 = new long[][]{};
        long row_idx_8 = 0;
        while ((row_idx_8 < num_rows_6)) {
            long[] row_9 = Program.populate_current_row(triangle_7, row_idx_8);
            triangle_7 = ((Func<long[][]>)(() => { var _tmp = triangle_7.ToList(); _tmp.Add(row_9); return _tmp.ToArray(); }))();
            row_idx_8 = (row_idx_8 + 1);
        };
        return triangle_7;
    }

    public static string row_to_string(long[] row_10, long total_rows_11, long row_idx_12) {
        string line_13 = "";
        long spaces_14 = ((total_rows_11 - row_idx_12) - 1);
        long s_15 = 0;
        while ((s_15 < spaces_14)) {
            line_13 = (line_13 + " ");
            s_15 = (s_15 + 1);
        };
        long c_16 = 0;
        while ((c_16 <= row_idx_12)) {
            line_13 = (line_13 + _fmtStr(_idx(row_10, c_16)));
            if ((c_16 != row_idx_12)) {
                line_13 = (line_13 + " ");
            }
            c_16 = (c_16 + 1);
        };
        return line_13;
    }

    public static void print_pascal_triangle(long num_rows_17) {
        long[][] triangle_18 = Program.generate_pascal_triangle(num_rows_17);
        long r_19 = 0;
        while ((r_19 < num_rows_17)) {
            string line_20 = Program.row_to_string(_idx(triangle_18, r_19), num_rows_17, r_19);
            Console.WriteLine(Program._fmtTop(line_20));
            r_19 = (r_19 + 1);
        };
    }

    public static void main() {
        Program.print_pascal_triangle(5);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.generate_pascal_triangle(5))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
