// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Coord {
    public long x;
    public long y;
    public override string ToString() => $"Coord {{x = {x}, y = {y}}}";
}
class PlayResult {
    public string[][] matrix;
    public long score;
    public override string ToString() => $"PlayResult {{matrix = {matrix}, score = {score}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool is_alnum(string ch_0) {
        return ((((string.Compare(ch_0, "0") >= 0) && (string.Compare(ch_0, "9") <= 0)) || ((string.Compare(ch_0, "A") >= 0) && (string.Compare(ch_0, "Z") <= 0))) || ((string.Compare(ch_0, "a") >= 0) && (string.Compare(ch_0, "z") <= 0)));
    }

    public static long to_int(string token_1) {
        long res_2 = 0;
        long i_3 = 0;
        while ((i_3 < token_1.Length)) {
            res_2 = ((res_2 * 10) + long.Parse(_substr(token_1, i_3, (i_3 + 1))));
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string[] split(string s_4, string sep_5) {
        string[] res_6 = new string[]{};
        string current_7 = "";
        long i_8 = 0;
        while ((i_8 < s_4.Length)) {
            string ch_9 = _substr(s_4, i_8, (i_8 + 1));
            if ((ch_9 == sep_5)) {
                res_6 = ((Func<string[]>)(() => { var _tmp = res_6.ToList(); _tmp.Add(current_7); return _tmp.ToArray(); }))();
                current_7 = "";
            } else {
                current_7 = (current_7 + ch_9);
            }
            i_8 = (i_8 + 1);
        };
        res_6 = ((Func<string[]>)(() => { var _tmp = res_6.ToList(); _tmp.Add(current_7); return _tmp.ToArray(); }))();
        return res_6;
    }

    public static Coord[] parse_moves(string input_str_10) {
        string[] pairs_11 = Program.split(input_str_10, ",");
        Coord[] moves_12 = new Coord[]{};
        long i_13 = 0;
        while ((i_13 < pairs_11.Length)) {
            string pair_14 = _idx(pairs_11, i_13);
            string[] numbers_15 = new string[]{};
            string num_16 = "";
            long j_17 = 0;
            while ((j_17 < pair_14.Length)) {
                string ch_18 = _substr(pair_14, j_17, (j_17 + 1));
                if ((ch_18 == " ")) {
                    if ((num_16 != "")) {
                        numbers_15 = ((Func<string[]>)(() => { var _tmp = numbers_15.ToList(); _tmp.Add(num_16); return _tmp.ToArray(); }))();
                        num_16 = "";
                    }
                } else {
                    num_16 = (num_16 + ch_18);
                }
                j_17 = (j_17 + 1);
            }
            if ((num_16 != "")) {
                numbers_15 = ((Func<string[]>)(() => { var _tmp = numbers_15.ToList(); _tmp.Add(num_16); return _tmp.ToArray(); }))();
            }
            if ((numbers_15.Length != 2)) {
                throw new Exception("Each move must have exactly two numbers.");
            }
            long x_19 = Program.to_int(_idx(numbers_15, 0));
            long y_20 = Program.to_int(_idx(numbers_15, 1));
            moves_12 = ((Func<Coord[]>)(() => { var _tmp = moves_12.ToList(); _tmp.Add(new Coord{x = x_19, y = y_20}); return _tmp.ToArray(); }))();
            i_13 = (i_13 + 1);
        };
        return moves_12;
    }

    public static void validate_matrix_size(long size_21) {
        if ((size_21 <= 0)) {
            throw new Exception("Matrix size must be a positive integer.");
        };
    }

    public static void validate_matrix_content(string[] matrix_22, long size_23) {
        if ((matrix_22.Length != size_23)) {
            throw new Exception("The matrix dont match with size.");
        };
        long i_24 = 0;
        while ((i_24 < size_23)) {
            string row_25 = _idx(matrix_22, i_24);
            if ((row_25.Length != size_23)) {
                throw new Exception((("Each row in the matrix must have exactly " + _fmtStr(size_23)) + " characters."));
            }
            long j_26 = 0;
            while ((j_26 < size_23)) {
                string ch_27 = _substr(row_25, j_26, (j_26 + 1));
                if ((!Program.is_alnum(ch_27))) {
                    throw new Exception("Matrix rows can only contain letters and numbers.");
                }
                j_26 = (j_26 + 1);
            }
            i_24 = (i_24 + 1);
        };
    }

    public static void validate_moves(Coord[] moves_28, long size_29) {
        long i_30 = 0;
        while ((i_30 < moves_28.Length)) {
            Coord mv_31 = _idx(moves_28, i_30);
            if (((((mv_31.x < 0) || (mv_31.x >= size_29)) || (mv_31.y < 0)) || (mv_31.y >= size_29))) {
                throw new Exception("Move is out of bounds for a matrix.");
            }
            i_30 = (i_30 + 1);
        };
    }

    public static bool contains(Coord[] pos_32, long r_33, long c_34) {
        long i_35 = 0;
        while ((i_35 < pos_32.Length)) {
            Coord p_36 = _idx(pos_32, i_35);
            if (((p_36.x == r_33) && (p_36.y == c_34))) {
                return true;
            }
            i_35 = (i_35 + 1);
        };
        return false;
    }

    public static Coord[] find_repeat(string[][] matrix_g_37, long row_38, long column_39, long size_40) {
        column_39 = ((size_40 - 1) - column_39);
        Coord[] visited_41 = new Coord[]{};
        Coord[] repeated_42 = new Coord[]{};
        string color_43 = _idx(_idx(matrix_g_37, column_39), row_38);
        if ((color_43 == "-")) {
            return repeated_42;
        };
        Coord[] stack_44 = new Coord[]{new Coord{x = column_39, y = row_38}};
        while ((stack_44.Length > 0)) {
            long idx_45 = (stack_44.Length - 1);
            Coord pos_46 = _idx(stack_44, idx_45);
            stack_44 = _slice<Coord>(stack_44, 0, idx_45);
            if (((((pos_46.x < 0) || (pos_46.x >= size_40)) || (pos_46.y < 0)) || (pos_46.y >= size_40))) {
                continue;
            }
            if (Program.contains(visited_41, pos_46.x, pos_46.y)) {
                continue;
            }
            visited_41 = ((Func<Coord[]>)(() => { var _tmp = visited_41.ToList(); _tmp.Add(pos_46); return _tmp.ToArray(); }))();
            if ((_idx(_idx(matrix_g_37, pos_46.x), pos_46.y) == color_43)) {
                repeated_42 = ((Func<Coord[]>)(() => { var _tmp = repeated_42.ToList(); _tmp.Add(pos_46); return _tmp.ToArray(); }))();
                stack_44 = ((Func<Coord[]>)(() => { var _tmp = stack_44.ToList(); _tmp.Add(new Coord{x = (pos_46.x - 1), y = pos_46.y}); return _tmp.ToArray(); }))();
                stack_44 = ((Func<Coord[]>)(() => { var _tmp = stack_44.ToList(); _tmp.Add(new Coord{x = (pos_46.x + 1), y = pos_46.y}); return _tmp.ToArray(); }))();
                stack_44 = ((Func<Coord[]>)(() => { var _tmp = stack_44.ToList(); _tmp.Add(new Coord{x = pos_46.x, y = (pos_46.y - 1)}); return _tmp.ToArray(); }))();
                stack_44 = ((Func<Coord[]>)(() => { var _tmp = stack_44.ToList(); _tmp.Add(new Coord{x = pos_46.x, y = (pos_46.y + 1)}); return _tmp.ToArray(); }))();
            }
        };
        return repeated_42;
    }

    public static long increment_score(long count_47) {
        return ((count_47 * (count_47 + 1)) / 2);
    }

    public static string[][] move_x(string[][] matrix_g_48, long column_49, long size_50) {
        string[] new_list_51 = new string[]{};
        long row_52 = 0;
        while ((row_52 < size_50)) {
            string val_53 = _idx(_idx(matrix_g_48, row_52), column_49);
            if ((val_53 != "-")) {
                new_list_51 = ((Func<string[]>)(() => { var _tmp = new_list_51.ToList(); _tmp.Add(val_53); return _tmp.ToArray(); }))();
            } else {
                new_list_51 = (Enumerable.ToArray(Enumerable.Concat(new string[]{val_53}, new_list_51)));
            }
            row_52 = (row_52 + 1);
        };
        row_52 = 0;
        while ((row_52 < size_50)) {
            _idx(matrix_g_48, row_52)[(int)(column_49)] = _idx(new_list_51, row_52);
            row_52 = (row_52 + 1);
        };
        return matrix_g_48;
    }

    public static string[][] move_y(string[][] matrix_g_54, long size_55) {
        long[] empty_cols_56 = new long[]{};
        long column_57 = (size_55 - 1);
        while ((column_57 >= 0)) {
            long row_58 = 0;
            bool all_empty_59 = true;
            while ((row_58 < size_55)) {
                if ((_idx(_idx(matrix_g_54, row_58), column_57) != "-")) {
                    all_empty_59 = false;
                    break;
                }
                row_58 = (row_58 + 1);
            }
            if (all_empty_59) {
                empty_cols_56 = ((Func<long[]>)(() => { var _tmp = empty_cols_56.ToList(); _tmp.Add(column_57); return _tmp.ToArray(); }))();
            }
            column_57 = (column_57 - 1);
        };
        long i_60 = 0;
        while ((i_60 < empty_cols_56.Length)) {
            long col_61 = _idx(empty_cols_56, i_60);
            long c_62 = (col_61 + 1);
            while ((c_62 < size_55)) {
                long r_63 = 0;
                while ((r_63 < size_55)) {
                    _idx(matrix_g_54, r_63)[(int)((c_62 - 1))] = _idx(_idx(matrix_g_54, r_63), c_62);
                    r_63 = (r_63 + 1);
                }
                c_62 = (c_62 + 1);
            }
            long r_64 = 0;
            while ((r_64 < size_55)) {
                _idx(matrix_g_54, r_64)[(int)((size_55 - 1))] = "-";
                r_64 = (r_64 + 1);
            }
            i_60 = (i_60 + 1);
        };
        return matrix_g_54;
    }

    public static PlayResult play(string[][] matrix_g_65, long pos_x_66, long pos_y_67, long size_68) {
        Coord[] same_colors_69 = Program.find_repeat(matrix_g_65, pos_x_66, pos_y_67, size_68);
        if ((same_colors_69.Length != 0)) {
            long i_70 = 0;
            while ((i_70 < same_colors_69.Length)) {
                Coord p_71 = _idx(same_colors_69, i_70);
                _idx(matrix_g_65, p_71.x)[(int)(p_71.y)] = "-";
                i_70 = (i_70 + 1);
            }
            long column_72 = 0;
            while ((column_72 < size_68)) {
                matrix_g_65 = Program.move_x(matrix_g_65, column_72, size_68);
                column_72 = (column_72 + 1);
            }
            matrix_g_65 = Program.move_y(matrix_g_65, size_68);
        };
        long sc_73 = Program.increment_score(same_colors_69.Length);
        return new PlayResult{matrix = matrix_g_65, score = sc_73};
    }

    public static string[][] build_matrix(string[] matrix_74) {
        string[][] res_75 = new string[][]{};
        long i_76 = 0;
        while ((i_76 < matrix_74.Length)) {
            string row_77 = _idx(matrix_74, i_76);
            string[] row_list_78 = new string[]{};
            long j_79 = 0;
            while ((j_79 < row_77.Length)) {
                row_list_78 = ((Func<string[]>)(() => { var _tmp = row_list_78.ToList(); _tmp.Add(_substr(row_77, j_79, (j_79 + 1))); return _tmp.ToArray(); }))();
                j_79 = (j_79 + 1);
            }
            res_75 = ((Func<string[][]>)(() => { var _tmp = res_75.ToList(); _tmp.Add(row_list_78); return _tmp.ToArray(); }))();
            i_76 = (i_76 + 1);
        };
        return res_75;
    }

    public static long process_game(long size_80, string[] matrix_81, Coord[] moves_82) {
        string[][] game_matrix_83 = Program.build_matrix(matrix_81);
        long total_84 = 0;
        long i_85 = 0;
        while ((i_85 < moves_82.Length)) {
            Coord mv_86 = _idx(moves_82, i_85);
            PlayResult res_87 = Program.play(game_matrix_83, mv_86.x, mv_86.y, size_80);
            game_matrix_83 = res_87.matrix;
            total_84 = (total_84 + res_87.score);
            i_85 = (i_85 + 1);
        };
        return total_84;
    }

    public static void main() {
        long size_88 = 4;
        string[] matrix_89 = new string[]{"RRBG", "RBBG", "YYGG", "XYGG"};
        Coord[] moves_90 = Program.parse_moves("0 1,1 1");
        Program.validate_matrix_size(size_88);
        Program.validate_matrix_content(matrix_89, size_88);
        Program.validate_moves(moves_90, size_88);
        long score_91 = Program.process_game(size_88, matrix_89, moves_90);
        Console.WriteLine(Program._fmtTop(_fmtStr(score_91)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
