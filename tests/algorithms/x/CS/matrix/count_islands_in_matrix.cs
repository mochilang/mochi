// Generated by Mochi 0.10.63 on 2025-08-09 23:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] grid_27 = new long[][]{new long[]{1, 1, 0, 0, 0}, new long[]{0, 1, 0, 0, 1}, new long[]{1, 0, 0, 1, 1}, new long[]{0, 0, 0, 0, 0}, new long[]{1, 0, 1, 0, 1}};
    public static bool is_safe(long[][] grid_0, bool[][] visited_1, long row_2, long col_3) {
        long rows_4 = grid_0.Length;
        long cols_5 = _idx(grid_0, 0).Length;
        bool visited_cell_6 = _idx(_idx(visited_1, row_2), col_3);
        bool within_bounds_7 = ((((row_2 >= 0) && (row_2 < rows_4)) && (col_3 >= 0)) && (col_3 < cols_5));
        bool not_visited_8 = (visited_cell_6 == false);
        return ((within_bounds_7 && not_visited_8) && (_idx(_idx(grid_0, row_2), col_3) == 1));
    }

    public static void dfs(long[][] grid_9, bool[][] visited_10, long row_11, long col_12) {
        long[] row_nbr_13 = new long[]{-1, -1, -1, 0, 0, 1, 1, 1};
        long[] col_nbr_14 = new long[]{-1, 0, 1, -1, 1, -1, 0, 1};
        _idx(visited_10, row_11)[(int)(col_12)] = true;
        long k_15 = 0;
        while ((k_15 < 8)) {
            long new_row_16 = (row_11 + _idx(row_nbr_13, k_15));
            long new_col_17 = (col_12 + _idx(col_nbr_14, k_15));
            if (Program.is_safe(grid_9, visited_10, new_row_16, new_col_17)) {
                Program.dfs(grid_9, visited_10, new_row_16, new_col_17);
            }
            k_15 = (k_15 + 1);
        };
    }

    public static long count_islands(long[][] grid_18) {
        long rows_19 = grid_18.Length;
        long cols_20 = _idx(grid_18, 0).Length;
        bool[][] visited_21 = new bool[][]{};
        long i_22 = 0;
        while ((i_22 < rows_19)) {
            bool[] row_list_23 = new bool[]{};
            long j_24 = 0;
            while ((j_24 < cols_20)) {
                row_list_23 = (Enumerable.ToArray(Enumerable.Append<bool>(row_list_23, false)));
                j_24 = (j_24 + 1);
            }
            visited_21 = (Enumerable.ToArray(Enumerable.Append<bool[]>(visited_21, row_list_23)));
            i_22 = (i_22 + 1);
        };
        long count_25 = 0;
        i_22 = 0;
        while ((i_22 < rows_19)) {
            long j_26 = 0;
            while ((j_26 < cols_20)) {
                if (((!_idx(_idx(visited_21, i_22), j_26)) && (_idx(_idx(grid_18, i_22), j_26) == 1))) {
                    Program.dfs(grid_18, visited_21, i_22, j_26);
                    count_25 = (count_25 + 1);
                }
                j_26 = (j_26 + 1);
            }
            i_22 = (i_22 + 1);
        };
        return count_25;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.count_islands(grid_27)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
