// Generated by Mochi 0.10.73 (commit 698bf55243) on 2025-08-25 22:27 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[][] grid_27 = new BigInteger[][]{new BigInteger[]{1, 1, 0, 0, 0}, new BigInteger[]{0, 1, 0, 0, 1}, new BigInteger[]{1, 0, 0, 1, 1}, new BigInteger[]{0, 0, 0, 0, 0}, new BigInteger[]{1, 0, 1, 0, 1}};
    public static bool is_safe(BigInteger[][] grid_0, bool[][] visited_1, BigInteger row_2, BigInteger col_3) {
        long rows_4 = grid_0.Length;
        long cols_5 = _idx(grid_0, (long)(0)).Length;
        bool within_bounds_6 = ((((row_2 >= 0) && (row_2 < rows_4)) && (col_3 >= 0)) && (col_3 < cols_5));
        if ((!within_bounds_6)) {
            return false;
        };
        bool visited_cell_7 = _idx(_idx(visited_1, (long)(row_2)), (long)(col_3));
        bool not_visited_8 = (visited_cell_7 == false);
        return (not_visited_8 && (_idx(_idx(grid_0, (long)(row_2)), (long)(col_3)) == 1));
    }

    public static void dfs(BigInteger[][] grid_9, bool[][] visited_10, BigInteger row_11, BigInteger col_12) {
        BigInteger[] row_nbr_13 = new BigInteger[]{-1, -1, -1, 0, 0, 1, 1, 1};
        BigInteger[] col_nbr_14 = new BigInteger[]{-1, 0, 1, -1, 1, -1, 0, 1};
        _idx(visited_10, (long)(row_11))[(int)(col_12)] = true;
        BigInteger k_15 = 0;
        while ((k_15 < 8)) {
            BigInteger new_row_16 = (row_11 + _idx(row_nbr_13, (long)(k_15)));
            BigInteger new_col_17 = (col_12 + _idx(col_nbr_14, (long)(k_15)));
            if (Program.is_safe(grid_9, visited_10, new_row_16, new_col_17)) {
                Program.dfs(grid_9, visited_10, new_row_16, new_col_17);
            }
            k_15 = (k_15 + 1);
        };
    }

    public static BigInteger count_islands(BigInteger[][] grid_18) {
        long rows_19 = grid_18.Length;
        long cols_20 = _idx(grid_18, (long)(0)).Length;
        bool[][] visited_21 = new bool[][]{};
        BigInteger i_22 = 0;
        while ((i_22 < rows_19)) {
            bool[] row_list_23 = new bool[]{};
            BigInteger j_24 = 0;
            while ((j_24 < cols_20)) {
                row_list_23 = ((Func<bool[]>)(() => { var _tmp = row_list_23.Cast<bool>().ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
                j_24 = (j_24 + 1);
            }
            visited_21 = ((Func<bool[][]>)(() => { var _tmp = visited_21.Cast<bool[]>().ToList(); _tmp.Add(row_list_23); return _tmp.ToArray(); }))();
            i_22 = (i_22 + 1);
        };
        BigInteger count_25 = 0;
        i_22 = 0;
        while ((i_22 < rows_19)) {
            BigInteger j_26 = 0;
            while ((j_26 < cols_20)) {
                if (((!_idx(_idx(visited_21, (long)(i_22)), (long)(j_26))) && (_idx(_idx(grid_18, (long)(i_22)), (long)(j_26)) == 1))) {
                    Program.dfs(grid_18, visited_21, i_22, j_26);
                    count_25 = (count_25 + 1);
                }
                j_26 = (j_26 + 1);
            }
            i_22 = (i_22 + 1);
        };
        return count_25;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.count_islands(grid_27)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
