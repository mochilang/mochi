// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long depth_first_search(long[][] grid_0, long row_1, long col_2, bool[][] visit_3) {
        long row_length_4 = grid_0.Length;
        long col_length_5 = _idx(grid_0, 0).Length;
        if (((((row_1 < 0) || (col_2 < 0)) || (row_1 == row_length_4)) || (col_2 == col_length_5))) {
            return 0;
        };
        if (_idx(_idx(visit_3, row_1), col_2)) {
            return 0;
        };
        if ((_idx(_idx(grid_0, row_1), col_2) == 1)) {
            return 0;
        };
        if (((row_1 == (row_length_4 - 1)) && (col_2 == (col_length_5 - 1)))) {
            return 1;
        };
        _idx(visit_3, row_1)[(int)(col_2)] = true;
        long count_6 = 0;
        count_6 = (count_6 + Program.depth_first_search(grid_0, (row_1 + 1), col_2, visit_3));
        count_6 = (count_6 + Program.depth_first_search(grid_0, (row_1 - 1), col_2, visit_3));
        count_6 = (count_6 + Program.depth_first_search(grid_0, row_1, (col_2 + 1), visit_3));
        count_6 = (count_6 + Program.depth_first_search(grid_0, row_1, (col_2 - 1), visit_3));
        _idx(visit_3, row_1)[(int)(col_2)] = false;
        return count_6;
    }

    public static long count_paths(long[][] grid_7) {
        long rows_8 = grid_7.Length;
        long cols_9 = _idx(grid_7, 0).Length;
        bool[][] visit_10 = new bool[][]{};
        long i_11 = 0;
        while ((i_11 < rows_8)) {
            bool[] row_visit_12 = new bool[]{};
            long j_13 = 0;
            while ((j_13 < cols_9)) {
                row_visit_12 = ((Func<bool[]>)(() => { var _tmp = row_visit_12.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
                j_13 = (j_13 + 1);
            }
            visit_10 = ((Func<bool[][]>)(() => { var _tmp = visit_10.ToList(); _tmp.Add(row_visit_12); return _tmp.ToArray(); }))();
            i_11 = (i_11 + 1);
        };
        return Program.depth_first_search(grid_7, 0, 0, visit_10);
    }

    public static void main() {
        long[][] grid1_14 = new long[][]{new long[]{0, 0, 0, 0}, new long[]{1, 1, 0, 0}, new long[]{0, 0, 0, 1}, new long[]{0, 1, 0, 0}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.count_paths(grid1_14))));
        long[][] grid2_15 = new long[][]{new long[]{0, 0, 0, 0, 0}, new long[]{0, 1, 1, 1, 0}, new long[]{0, 1, 1, 1, 0}, new long[]{0, 0, 0, 0, 0}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.count_paths(grid2_15))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
