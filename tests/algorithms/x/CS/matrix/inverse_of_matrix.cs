// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] m2_7 = new double[][]{new double[]{2.0, 5.0}, new double[]{2.0, 0.0}};
    public static double[][] inverse_of_matrix(double[][] matrix_0) {
        if ((((matrix_0.Length == 2) && (_idx(matrix_0, 0).Length == 2)) && (_idx(matrix_0, 1).Length == 2))) {
            double det_1 = ((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 1), 1)) - (_idx(_idx(matrix_0, 1), 0) * _idx(_idx(matrix_0, 0), 1)));
            if ((det_1 == 0.0)) {
                Console.WriteLine(Program._fmtTop("This matrix has no inverse."));
                return new double[][]{};
            }
            return new double[][]{new double[]{(_idx(_idx(matrix_0, 1), 1) / det_1), (-_idx(_idx(matrix_0, 0), 1) / det_1)}, new double[]{(-_idx(_idx(matrix_0, 1), 0) / det_1), (_idx(_idx(matrix_0, 0), 0) / det_1)}};
        } else if (((((matrix_0.Length == 3) && (_idx(matrix_0, 0).Length == 3)) && (_idx(matrix_0, 1).Length == 3)) && (_idx(matrix_0, 2).Length == 3))) {
            double det_2 = (((((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 1), 1)) * _idx(_idx(matrix_0, 2), 2)) + ((_idx(_idx(matrix_0, 0), 1) * _idx(_idx(matrix_0, 1), 2)) * _idx(_idx(matrix_0, 2), 0))) + ((_idx(_idx(matrix_0, 0), 2) * _idx(_idx(matrix_0, 1), 0)) * _idx(_idx(matrix_0, 2), 1))) - ((((_idx(_idx(matrix_0, 0), 2) * _idx(_idx(matrix_0, 1), 1)) * _idx(_idx(matrix_0, 2), 0)) + ((_idx(_idx(matrix_0, 0), 1) * _idx(_idx(matrix_0, 1), 0)) * _idx(_idx(matrix_0, 2), 2))) + ((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 1), 2)) * _idx(_idx(matrix_0, 2), 1))));
            if ((det_2 == 0.0)) {
                Console.WriteLine(Program._fmtTop("This matrix has no inverse."));
                return new double[][]{};
            }
            double[][] cof_3 = new double[][]{new double[]{0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 0.0}};
            _idx(cof_3, 0)[(int)(0)] = ((_idx(_idx(matrix_0, 1), 1) * _idx(_idx(matrix_0, 2), 2)) - (_idx(_idx(matrix_0, 1), 2) * _idx(_idx(matrix_0, 2), 1)));
            _idx(cof_3, 0)[(int)(1)] = -((_idx(_idx(matrix_0, 1), 0) * _idx(_idx(matrix_0, 2), 2)) - (_idx(_idx(matrix_0, 1), 2) * _idx(_idx(matrix_0, 2), 0)));
            _idx(cof_3, 0)[(int)(2)] = ((_idx(_idx(matrix_0, 1), 0) * _idx(_idx(matrix_0, 2), 1)) - (_idx(_idx(matrix_0, 1), 1) * _idx(_idx(matrix_0, 2), 0)));
            _idx(cof_3, 1)[(int)(0)] = -((_idx(_idx(matrix_0, 0), 1) * _idx(_idx(matrix_0, 2), 2)) - (_idx(_idx(matrix_0, 0), 2) * _idx(_idx(matrix_0, 2), 1)));
            _idx(cof_3, 1)[(int)(1)] = ((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 2), 2)) - (_idx(_idx(matrix_0, 0), 2) * _idx(_idx(matrix_0, 2), 0)));
            _idx(cof_3, 1)[(int)(2)] = -((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 2), 1)) - (_idx(_idx(matrix_0, 0), 1) * _idx(_idx(matrix_0, 2), 0)));
            _idx(cof_3, 2)[(int)(0)] = ((_idx(_idx(matrix_0, 0), 1) * _idx(_idx(matrix_0, 1), 2)) - (_idx(_idx(matrix_0, 0), 2) * _idx(_idx(matrix_0, 1), 1)));
            _idx(cof_3, 2)[(int)(1)] = -((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 1), 2)) - (_idx(_idx(matrix_0, 0), 2) * _idx(_idx(matrix_0, 1), 0)));
            _idx(cof_3, 2)[(int)(2)] = ((_idx(_idx(matrix_0, 0), 0) * _idx(_idx(matrix_0, 1), 1)) - (_idx(_idx(matrix_0, 0), 1) * _idx(_idx(matrix_0, 1), 0)));
            double[][] inv_4 = new double[][]{new double[]{0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 0.0}};
            long i_5 = 0;
            while ((i_5 < 3)) {
                long j_6 = 0;
                while ((j_6 < 3)) {
                    _idx(inv_4, i_5)[(int)(j_6)] = (_idx(_idx(cof_3, j_6), i_5) / det_2);
                    j_6 = (j_6 + 1);
                }
                i_5 = (i_5 + 1);
            }
            return inv_4;
        };
        Console.WriteLine(Program._fmtTop("Please provide a matrix of size 2x2 or 3x3."));
        return new double[][]{};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.inverse_of_matrix(m2_7)));
            double[][] m3_8 = new double[][]{new double[]{2.0, 5.0, 7.0}, new double[]{2.0, 0.0, 1.0}, new double[]{1.0, 2.0, 3.0}};
            Console.WriteLine(Program._fmtTop(Program.inverse_of_matrix(m3_8)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
