// Generated by Mochi 0.10.64 (commit b11da3e151) on 2025-08-12 09:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[][] multiply(long[][] matrix_a_0, long[][] matrix_b_1) {
        long n_2 = matrix_a_0.Length;
        long[][] matrix_c_3 = new long[][]{};
        long i_4 = 0;
        while ((i_4 < n_2)) {
            long[] row_5 = new long[]{};
            long j_6 = 0;
            while ((j_6 < n_2)) {
                long val_7 = 0;
                long k_8 = 0;
                while ((k_8 < n_2)) {
                    val_7 = (val_7 + (_idx(_idx(matrix_a_0, i_4), k_8) * _idx(_idx(matrix_b_1, k_8), j_6)));
                    k_8 = (k_8 + 1);
                }
                row_5 = (Enumerable.ToArray(Enumerable.Append<long>(row_5, val_7)));
                j_6 = (j_6 + 1);
            }
            matrix_c_3 = (Enumerable.ToArray(Enumerable.Append<long[]>(matrix_c_3, row_5)));
            i_4 = (i_4 + 1);
        };
        return matrix_c_3;
    }

    public static long[][] identity(long n_9) {
        long[][] res_10 = new long[][]{};
        long i_11 = 0;
        while ((i_11 < n_9)) {
            long[] row_12 = new long[]{};
            long j_13 = 0;
            while ((j_13 < n_9)) {
                if ((i_11 == j_13)) {
                    row_12 = (Enumerable.ToArray(Enumerable.Append<long>(row_12, 1)));
                } else {
                    row_12 = (Enumerable.ToArray(Enumerable.Append<long>(row_12, 0)));
                }
                j_13 = (j_13 + 1);
            }
            res_10 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_10, row_12)));
            i_11 = (i_11 + 1);
        };
        return res_10;
    }

    public static long nth_fibonacci_matrix(long n_14) {
        if ((n_14 <= 1)) {
            return n_14;
        };
        long[][] res_matrix_15 = Program.identity(2);
        long[][] fib_matrix_16 = new long[][]{new long[]{1, 1}, new long[]{1, 0}};
        long m_17 = (n_14 - 1);
        while ((m_17 > 0)) {
            if ((_mod(m_17, 2) == 1)) {
                res_matrix_15 = Program.multiply(res_matrix_15, fib_matrix_16);
            }
            fib_matrix_16 = Program.multiply(fib_matrix_16, fib_matrix_16);
            m_17 = (m_17 / 2);
        };
        return _idx(_idx(res_matrix_15, 0), 0);
    }

    public static long nth_fibonacci_bruteforce(long n_18) {
        if ((n_18 <= 1)) {
            return n_18;
        };
        long fib0_19 = 0;
        long fib1_20 = 1;
        long i_21 = 2;
        while ((i_21 <= n_18)) {
            long next_22 = (fib0_19 + fib1_20);
            fib0_19 = fib1_20;
            fib1_20 = next_22;
            i_21 = (i_21 + 1);
        };
        return fib1_20;
    }

    public static long parse_number(string s_23) {
        long result_24 = 0;
        long i_25 = 0;
        while ((i_25 < s_23.Length)) {
            string ch_26 = _substr(s_23, i_25, (i_25 + 1));
            if (((string.Compare(ch_26, "0") >= 0) && (string.Compare(ch_26, "9") <= 0))) {
                result_24 = ((result_24 * 10) + long.Parse(ch_26));
            }
            i_25 = (i_25 + 1);
        };
        return result_24;
    }

    public static void main() {
        string[] ordinals_27 = new string[]{"0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"};
        long i_28 = 0;
        while ((i_28 < ordinals_27.Length)) {
            string ordinal_29 = _idx(ordinals_27, i_28);
            long n_30 = Program.parse_number(ordinal_29);
            string msg_31 = ((((ordinal_29 + " fibonacci number using matrix exponentiation is ") + _fmtStr(Program.nth_fibonacci_matrix(n_30))) + " and using bruteforce is ") + _fmtStr(Program.nth_fibonacci_bruteforce(n_30)));
            Console.WriteLine(Program._fmtTop(msg_31));
            i_28 = (i_28 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
