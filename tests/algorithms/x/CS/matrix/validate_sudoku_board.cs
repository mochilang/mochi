// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long NUM_SQUARES_0 = 9;
    static string EMPTY_CELL_1 = ".";
    static string[][] valid_board_11 = new string[][]{new string[]{"5", "3", ".", ".", "7", ".", ".", ".", "."}, new string[]{"6", ".", ".", "1", "9", "5", ".", ".", "."}, new string[]{".", "9", "8", ".", ".", ".", ".", "6", "."}, new string[]{"8", ".", ".", ".", "6", ".", ".", ".", "3"}, new string[]{"4", ".", ".", "8", ".", "3", ".", ".", "1"}, new string[]{"7", ".", ".", ".", "2", ".", ".", ".", "6"}, new string[]{".", "6", ".", ".", ".", ".", "2", "8", "."}, new string[]{".", ".", ".", "4", "1", "9", ".", ".", "5"}, new string[]{".", ".", ".", ".", "8", ".", ".", "7", "9"}};
    static string[][] invalid_board_12 = new string[][]{new string[]{"8", "3", ".", ".", "7", ".", ".", ".", "."}, new string[]{"6", ".", ".", "1", "9", "5", ".", ".", "."}, new string[]{".", "9", "8", ".", ".", ".", ".", "6", "."}, new string[]{"8", ".", ".", ".", "6", ".", ".", ".", "3"}, new string[]{"4", ".", ".", "8", ".", "3", ".", ".", "1"}, new string[]{"7", ".", ".", ".", "2", ".", ".", ".", "6"}, new string[]{".", "6", ".", ".", ".", ".", "2", "8", "."}, new string[]{".", ".", ".", "4", "1", "9", ".", ".", "5"}, new string[]{".", ".", ".", ".", "8", ".", ".", "7", "9"}};
    public static bool is_valid_sudoku_board(string[][] board_2) {
        if ((board_2.Length != NUM_SQUARES_0)) {
            return false;
        };
        long i_3 = 0;
        while ((i_3 < NUM_SQUARES_0)) {
            if ((_idx(board_2, i_3).Length != NUM_SQUARES_0)) {
                return false;
            }
            i_3 = (i_3 + 1);
        };
        string[][] rows_4 = new string[][]{};
        string[][] cols_5 = new string[][]{};
        string[][] boxes_6 = new string[][]{};
        i_3 = 0;
        while ((i_3 < NUM_SQUARES_0)) {
            rows_4 = ((Func<string[][]>)(() => { var _tmp = rows_4.Cast<string[]>().ToList(); _tmp.Add(new string[]{}); return _tmp.ToArray(); }))();
            cols_5 = ((Func<string[][]>)(() => { var _tmp = cols_5.Cast<string[]>().ToList(); _tmp.Add(new string[]{}); return _tmp.ToArray(); }))();
            boxes_6 = ((Func<string[][]>)(() => { var _tmp = boxes_6.Cast<string[]>().ToList(); _tmp.Add(new string[]{}); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        for (var r_7 = 0; r_7 < NUM_SQUARES_0; r_7++) {
            for (var c_8 = 0; c_8 < NUM_SQUARES_0; c_8++) {
                string value_9 = _idx(_idx(board_2, r_7), c_8);
                if ((value_9 == EMPTY_CELL_1)) {
                    continue;
                }
                long box_10 = ((_atoi(_floordiv(r_7, 3)) * 3) + _atoi(_floordiv(c_8, 3)));
                if ((((Array.IndexOf(_idx(rows_4, r_7), value_9) >= 0) || (Array.IndexOf(_idx(cols_5, c_8), value_9) >= 0)) || (Array.IndexOf(_idx(boxes_6, box_10), value_9) >= 0))) {
                    return false;
                }
                rows_4[(int)(r_7)] = ((Func<string[]>)(() => { var _tmp = _idx(rows_4, r_7).Cast<string>().ToList(); _tmp.Add(value_9); return _tmp.ToArray(); }))();
                cols_5[(int)(c_8)] = ((Func<string[]>)(() => { var _tmp = _idx(cols_5, c_8).Cast<string>().ToList(); _tmp.Add(value_9); return _tmp.ToArray(); }))();
                boxes_6[(int)(box_10)] = ((Func<string[]>)(() => { var _tmp = _idx(boxes_6, box_10).Cast<string>().ToList(); _tmp.Add(value_9); return _tmp.ToArray(); }))();
            }
        };
        return true;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.is_valid_sudoku_board(valid_board_11)));
            Console.WriteLine(Program._fmtTop(Program.is_valid_sudoku_board(invalid_board_12)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
