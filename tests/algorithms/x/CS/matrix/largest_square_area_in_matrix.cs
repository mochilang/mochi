// Generated by Mochi 0.10.64 (commit b11da3e151) on 2025-08-12 09:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] sample_62 = new long[][]{new long[]{1, 1}, new long[]{1, 1}};
    public static long update_area_of_max_square(long row_0, long col_1, long rows_2, long cols_3, long[][] mat_4, long[] largest_square_area_5) {
        if (((row_0 >= rows_2) || (col_1 >= cols_3))) {
            return 0;
        };
        long right_6 = Program.update_area_of_max_square(row_0, (col_1 + 1), rows_2, cols_3, mat_4, largest_square_area_5);
        long diagonal_7 = Program.update_area_of_max_square((row_0 + 1), (col_1 + 1), rows_2, cols_3, mat_4, largest_square_area_5);
        long down_8 = Program.update_area_of_max_square((row_0 + 1), col_1, rows_2, cols_3, mat_4, largest_square_area_5);
        if ((_idx(_idx(mat_4, row_0), col_1) == 1)) {
            long sub_9 = (1 + (new long[]{right_6, diagonal_7, down_8}.Min()));
            if ((sub_9 > _idx(largest_square_area_5, 0))) {
                largest_square_area_5[(int)(0)] = sub_9;
            }
            return sub_9;
        } else {
            return 0;
        };
        return default(long);
    }

    public static long largest_square_area_in_matrix_top_down(long rows_10, long cols_11, long[][] mat_12) {
        long[] largest_13 = new long[]{0};
        Program.update_area_of_max_square(0, 0, rows_10, cols_11, mat_12, largest_13);
        return _idx(largest_13, 0);
    }

    public static long update_area_of_max_square_with_dp(long row_14, long col_15, long rows_16, long cols_17, long[][] mat_18, long[][] dp_array_19, long[] largest_square_area_20) {
        if (((row_14 >= rows_16) || (col_15 >= cols_17))) {
            return 0;
        };
        if ((_idx(_idx(dp_array_19, row_14), col_15) != -1)) {
            return _idx(_idx(dp_array_19, row_14), col_15);
        };
        long right_21 = Program.update_area_of_max_square_with_dp(row_14, (col_15 + 1), rows_16, cols_17, mat_18, dp_array_19, largest_square_area_20);
        long diagonal_22 = Program.update_area_of_max_square_with_dp((row_14 + 1), (col_15 + 1), rows_16, cols_17, mat_18, dp_array_19, largest_square_area_20);
        long down_23 = Program.update_area_of_max_square_with_dp((row_14 + 1), col_15, rows_16, cols_17, mat_18, dp_array_19, largest_square_area_20);
        if ((_idx(_idx(mat_18, row_14), col_15) == 1)) {
            long sub_24 = (1 + (new long[]{right_21, diagonal_22, down_23}.Min()));
            if ((sub_24 > _idx(largest_square_area_20, 0))) {
                largest_square_area_20[(int)(0)] = sub_24;
            }
            _idx(dp_array_19, row_14)[(int)(col_15)] = sub_24;
            return sub_24;
        } else {
            _idx(dp_array_19, row_14)[(int)(col_15)] = 0;
            return 0;
        };
        return default(long);
    }

    public static long largest_square_area_in_matrix_top_down_with_dp(long rows_25, long cols_26, long[][] mat_27) {
        long[] largest_28 = new long[]{0};
        long[][] dp_array_29 = new long[][]{};
        long r_30 = 0;
        while ((r_30 < rows_25)) {
            long[] row_list_31 = new long[]{};
            long c_32 = 0;
            while ((c_32 < cols_26)) {
                row_list_31 = (Enumerable.ToArray(Enumerable.Append<long>(row_list_31, -1)));
                c_32 = (c_32 + 1);
            }
            dp_array_29 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_array_29, row_list_31)));
            r_30 = (r_30 + 1);
        };
        Program.update_area_of_max_square_with_dp(0, 0, rows_25, cols_26, mat_27, dp_array_29, largest_28);
        return _idx(largest_28, 0);
    }

    public static long largest_square_area_in_matrix_bottom_up(long rows_33, long cols_34, long[][] mat_35) {
        long[][] dp_array_36 = new long[][]{};
        long r_37 = 0;
        while ((r_37 <= rows_33)) {
            long[] row_list_38 = new long[]{};
            long c_39 = 0;
            while ((c_39 <= cols_34)) {
                row_list_38 = (Enumerable.ToArray(Enumerable.Append<long>(row_list_38, 0)));
                c_39 = (c_39 + 1);
            }
            dp_array_36 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_array_36, row_list_38)));
            r_37 = (r_37 + 1);
        };
        long largest_40 = 0;
        long row_41 = (rows_33 - 1);
        while ((row_41 >= 0)) {
            long col_42 = (cols_34 - 1);
            while ((col_42 >= 0)) {
                long right_43 = _idx(_idx(dp_array_36, row_41), (col_42 + 1));
                long diagonal_44 = _idx(_idx(dp_array_36, (row_41 + 1)), (col_42 + 1));
                long bottom_45 = _idx(_idx(dp_array_36, (row_41 + 1)), col_42);
                if ((_idx(_idx(mat_35, row_41), col_42) == 1)) {
                    long value_46 = (1 + (new long[]{right_43, diagonal_44, bottom_45}.Min()));
                    _idx(dp_array_36, row_41)[(int)(col_42)] = value_46;
                    if ((value_46 > largest_40)) {
                        largest_40 = value_46;
                    }
                } else {
                    _idx(dp_array_36, row_41)[(int)(col_42)] = 0;
                }
                col_42 = (col_42 - 1);
            }
            row_41 = (row_41 - 1);
        };
        return largest_40;
    }

    public static long largest_square_area_in_matrix_bottom_up_space_optimization(long rows_47, long cols_48, long[][] mat_49) {
        long[] current_row_50 = new long[]{};
        long i_51 = 0;
        while ((i_51 <= cols_48)) {
            current_row_50 = (Enumerable.ToArray(Enumerable.Append<long>(current_row_50, 0)));
            i_51 = (i_51 + 1);
        };
        long[] next_row_52 = new long[]{};
        long j_53 = 0;
        while ((j_53 <= cols_48)) {
            next_row_52 = (Enumerable.ToArray(Enumerable.Append<long>(next_row_52, 0)));
            j_53 = (j_53 + 1);
        };
        long largest_54 = 0;
        long row_55 = (rows_47 - 1);
        while ((row_55 >= 0)) {
            long col_56 = (cols_48 - 1);
            while ((col_56 >= 0)) {
                long right_57 = _idx(current_row_50, (col_56 + 1));
                long diagonal_58 = _idx(next_row_52, (col_56 + 1));
                long bottom_59 = _idx(next_row_52, col_56);
                if ((_idx(_idx(mat_49, row_55), col_56) == 1)) {
                    long value_60 = (1 + (new long[]{right_57, diagonal_58, bottom_59}.Min()));
                    current_row_50[(int)(col_56)] = value_60;
                    if ((value_60 > largest_54)) {
                        largest_54 = value_60;
                    }
                } else {
                    current_row_50[(int)(col_56)] = 0;
                }
                col_56 = (col_56 - 1);
            }
            next_row_52 = current_row_50;
            current_row_50 = new long[]{};
            long t_61 = 0;
            while ((t_61 <= cols_48)) {
                current_row_50 = (Enumerable.ToArray(Enumerable.Append<long>(current_row_50, 0)));
                t_61 = (t_61 + 1);
            }
            row_55 = (row_55 - 1);
        };
        return largest_54;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.largest_square_area_in_matrix_top_down(2, 2, sample_62)));
            Console.WriteLine(Program._fmtTop(Program.largest_square_area_in_matrix_top_down_with_dp(2, 2, sample_62)));
            Console.WriteLine(Program._fmtTop(Program.largest_square_area_in_matrix_bottom_up(2, 2, sample_62)));
            Console.WriteLine(Program._fmtTop(Program.largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, sample_62)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
