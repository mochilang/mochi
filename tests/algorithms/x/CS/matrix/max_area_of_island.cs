// Generated by Mochi 0.10.63 on 2025-08-09 23:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] matrix_25 = new long[][]{new long[]{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0}, new long[]{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, new long[]{0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0}, new long[]{0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0}, new long[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}};
    public static string encode(long row_0, long col_1) {
        return ((_fmtStr(row_0) + ",") + _fmtStr(col_1));
    }

    public static bool is_safe(long row_2, long col_3, long rows_4, long cols_5) {
        return ((((row_2 >= 0) && (row_2 < rows_4)) && (col_3 >= 0)) && (col_3 < cols_5));
    }

    public static bool has(Dictionary<string, bool> seen_6, string key_7) {
        return (seen_6.ContainsKey(key_7));
    }

    public static long depth_first_search(long row_8, long col_9, Dictionary<string, bool> seen_10, long[][] mat_11) {
        long rows_12 = mat_11.Length;
        long cols_13 = _idx(mat_11, 0).Length;
        string key_14 = Program.encode(row_8, col_9);
        if (((Program.is_safe(row_8, col_9, rows_12, cols_13) && (!Program.has(seen_10, key_14))) && (_idx(_idx(mat_11, row_8), col_9) == 1))) {
            seen_10[key_14] = true;
            return ((((1 + Program.depth_first_search((row_8 + 1), col_9, seen_10, mat_11)) + Program.depth_first_search((row_8 - 1), col_9, seen_10, mat_11)) + Program.depth_first_search(row_8, (col_9 + 1), seen_10, mat_11)) + Program.depth_first_search(row_8, (col_9 - 1), seen_10, mat_11));
        } else {
            return 0;
        };
        return default(long);
    }

    public static long find_max_area(long[][] mat_15) {
        Dictionary<string, bool> seen_16 = new Dictionary<string, bool>{};
        long rows_17 = mat_15.Length;
        long max_area_18 = 0;
        long r_19 = 0;
        while ((r_19 < rows_17)) {
            long[] line_20 = _idx(mat_15, r_19);
            long cols_21 = line_20.Length;
            long c_22 = 0;
            while ((c_22 < cols_21)) {
                if ((_idx(line_20, c_22) == 1)) {
                    string key_23 = Program.encode(r_19, c_22);
                    if ((!(seen_16.ContainsKey(key_23)))) {
                        long area_24 = Program.depth_first_search(r_19, c_22, seen_16, mat_15);
                        if ((area_24 > max_area_18)) {
                            max_area_18 = area_24;
                        }
                    }
                }
                c_22 = (c_22 + 1);
            }
            r_19 = (r_19 + 1);
        };
        return max_area_18;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.find_max_area(matrix_25)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
