// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[][] add(double[][][] matrices_0) {
        long rows_1 = matrices_0[(int)(0)].Length;
        long cols_2 = matrices_0[(int)(0)][(int)(0)].Length;
        long r_3 = 0;
        double[][] result_4 = new double[][]{};
        while ((r_3 < rows_1)) {
            double[] row_5 = new double[]{};
            long c_6 = 0;
            while ((c_6 < cols_2)) {
                double sum_7 = 0.0;
                long m_8 = 0;
                while ((m_8 < matrices_0.Length)) {
                    sum_7 = (sum_7 + matrices_0[(int)(m_8)][(int)(r_3)][(int)(c_6)]);
                    m_8 = (m_8 + 1);
                }
                row_5 = (Enumerable.ToArray(Enumerable.Append<double>(row_5, sum_7)));
                c_6 = (c_6 + 1);
            }
            result_4 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_4, row_5)));
            r_3 = (r_3 + 1);
        };
        return result_4;
    }

    public static double[][] subtract(double[][] a_9, double[][] b_10) {
        long rows_11 = a_9.Length;
        long cols_12 = a_9[(int)(0)].Length;
        long r_13 = 0;
        double[][] result_14 = new double[][]{};
        while ((r_13 < rows_11)) {
            double[] row_15 = new double[]{};
            long c_16 = 0;
            while ((c_16 < cols_12)) {
                row_15 = (Enumerable.ToArray(Enumerable.Append<double>(row_15, (a_9[(int)(r_13)][(int)(c_16)] - b_10[(int)(r_13)][(int)(c_16)]))));
                c_16 = (c_16 + 1);
            }
            result_14 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_14, row_15)));
            r_13 = (r_13 + 1);
        };
        return result_14;
    }

    public static double[][] scalar_multiply(double[][] matrix_17, double n_18) {
        double[][] result_19 = new double[][]{};
        long i_20 = 0;
        while ((i_20 < matrix_17.Length)) {
            double[] row_21 = new double[]{};
            long j_22 = 0;
            while ((j_22 < matrix_17[(int)(i_20)].Length)) {
                row_21 = (Enumerable.ToArray(Enumerable.Append<double>(row_21, (matrix_17[(int)(i_20)][(int)(j_22)] * n_18))));
                j_22 = (j_22 + 1);
            }
            result_19 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_19, row_21)));
            i_20 = (i_20 + 1);
        };
        return result_19;
    }

    public static double[][] multiply(double[][] a_23, double[][] b_24) {
        long rowsA_25 = a_23.Length;
        long colsA_26 = a_23[(int)(0)].Length;
        long rowsB_27 = b_24.Length;
        long colsB_28 = b_24[(int)(0)].Length;
        double[][] result_29 = new double[][]{};
        long i_30 = 0;
        while ((i_30 < rowsA_25)) {
            double[] row_31 = new double[]{};
            long j_32 = 0;
            while ((j_32 < colsB_28)) {
                double sum_33 = 0.0;
                long k_34 = 0;
                while ((k_34 < colsA_26)) {
                    sum_33 = (sum_33 + (a_23[(int)(i_30)][(int)(k_34)] * b_24[(int)(k_34)][(int)(j_32)]));
                    k_34 = (k_34 + 1);
                }
                row_31 = (Enumerable.ToArray(Enumerable.Append<double>(row_31, sum_33)));
                j_32 = (j_32 + 1);
            }
            result_29 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_29, row_31)));
            i_30 = (i_30 + 1);
        };
        return result_29;
    }

    public static double[][] identity(long n_35) {
        double[][] result_36 = new double[][]{};
        long i_37 = 0;
        while ((i_37 < n_35)) {
            double[] row_38 = new double[]{};
            long j_39 = 0;
            while ((j_39 < n_35)) {
                if ((i_37 == j_39)) {
                    row_38 = (Enumerable.ToArray(Enumerable.Append<double>(row_38, 1.0)));
                } else {
                    row_38 = (Enumerable.ToArray(Enumerable.Append<double>(row_38, 0.0)));
                }
                j_39 = (j_39 + 1);
            }
            result_36 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_36, row_38)));
            i_37 = (i_37 + 1);
        };
        return result_36;
    }

    public static double[][] transpose(double[][] matrix_40) {
        long rows_41 = matrix_40.Length;
        long cols_42 = matrix_40[(int)(0)].Length;
        double[][] result_43 = new double[][]{};
        long c_44 = 0;
        while ((c_44 < cols_42)) {
            double[] row_45 = new double[]{};
            long r_46 = 0;
            while ((r_46 < rows_41)) {
                row_45 = (Enumerable.ToArray(Enumerable.Append<double>(row_45, matrix_40[(int)(r_46)][(int)(c_44)])));
                r_46 = (r_46 + 1);
            }
            result_43 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_43, row_45)));
            c_44 = (c_44 + 1);
        };
        return result_43;
    }

    public static double[][] minor(double[][] matrix_47, long row_48, long column_49) {
        double[][] result_50 = new double[][]{};
        long i_51 = 0;
        while ((i_51 < matrix_47.Length)) {
            if ((i_51 != row_48)) {
                double[] new_row_52 = new double[]{};
                long j_53 = 0;
                while ((j_53 < matrix_47[(int)(i_51)].Length)) {
                    if ((j_53 != column_49)) {
                        new_row_52 = (Enumerable.ToArray(Enumerable.Append<double>(new_row_52, matrix_47[(int)(i_51)][(int)(j_53)])));
                    }
                    j_53 = (j_53 + 1);
                }
                result_50 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_50, new_row_52)));
            }
            i_51 = (i_51 + 1);
        };
        return result_50;
    }

    public static double determinant(double[][] matrix_54) {
        if ((matrix_54.Length == 1)) {
            return matrix_54[(int)(0)][(int)(0)];
        };
        double det_55 = 0.0;
        long c_56 = 0;
        while ((c_56 < matrix_54[(int)(0)].Length)) {
            double[][] sub_57 = Program.minor(matrix_54, 0, c_56);
            double sign_58 = ((_mod(c_56, 2) == 0) ? 1.0 : -1.0);
            det_55 = (det_55 + ((matrix_54[(int)(0)][(int)(c_56)] * Program.determinant(sub_57)) * sign_58));
            c_56 = (c_56 + 1);
        };
        return det_55;
    }

    public static double[][] inverse(double[][] matrix_59) {
        double det_60 = Program.determinant(matrix_59);
        if ((det_60 == 0.0)) {
            return new double[][]{};
        };
        long size_61 = matrix_59.Length;
        double[][] matrix_minor_62 = new double[][]{};
        long i_63 = 0;
        while ((i_63 < size_61)) {
            double[] row_64 = new double[]{};
            long j_65 = 0;
            while ((j_65 < size_61)) {
                double[][] m_66 = Program.minor(matrix_59, i_63, j_65);
                row_64 = (Enumerable.ToArray(Enumerable.Append<double>(row_64, Program.determinant(m_66))));
                j_65 = (j_65 + 1);
            }
            matrix_minor_62 = (Enumerable.ToArray(Enumerable.Append<double[]>(matrix_minor_62, row_64)));
            i_63 = (i_63 + 1);
        };
        double[][] cofactors_67 = new double[][]{};
        i_63 = 0;
        while ((i_63 < size_61)) {
            double[] row_68 = new double[]{};
            long j_69 = 0;
            while ((j_69 < size_61)) {
                double sign_70 = ((_mod((i_63 + j_69), 2) == 0) ? 1.0 : -1.0);
                row_68 = (Enumerable.ToArray(Enumerable.Append<double>(row_68, (matrix_minor_62[(int)(i_63)][(int)(j_69)] * sign_70))));
                j_69 = (j_69 + 1);
            }
            cofactors_67 = (Enumerable.ToArray(Enumerable.Append<double[]>(cofactors_67, row_68)));
            i_63 = (i_63 + 1);
        };
        double[][] adjugate_71 = Program.transpose(cofactors_67);
        return Program.scalar_multiply(adjugate_71, (1.0 / det_60));
    }

    public static void main() {
        double[][] matrix_a_72 = new double[][]{new double[]{12.0, 10.0}, new double[]{3.0, 9.0}};
        double[][] matrix_b_73 = new double[][]{new double[]{3.0, 4.0}, new double[]{7.0, 4.0}};
        double[][] matrix_c_74 = new double[][]{new double[]{11.0, 12.0, 13.0, 14.0}, new double[]{21.0, 22.0, 23.0, 24.0}, new double[]{31.0, 32.0, 33.0, 34.0}, new double[]{41.0, 42.0, 43.0, 44.0}};
        double[][] matrix_d_75 = new double[][]{new double[]{3.0, 0.0, 2.0}, new double[]{2.0, 0.0, -2.0}, new double[]{0.0, 1.0, 1.0}};
        Console.WriteLine(Program._fmtTop((("Add Operation, add(matrix_a, matrix_b) = " + _fmtStr(Program.add(new double[][][]{matrix_a_72, matrix_b_73}))) + " \n")));
        Console.WriteLine(Program._fmtTop((("Multiply Operation, multiply(matrix_a, matrix_b) = " + _fmtStr(Program.multiply(matrix_a_72, matrix_b_73))) + " \n")));
        Console.WriteLine(Program._fmtTop((("Identity: " + _fmtStr(Program.identity(5))) + "\n")));
        Console.WriteLine(Program._fmtTop((((("Minor of " + _fmtStr(matrix_c_74)) + " = ") + _fmtStr(Program.minor(matrix_c_74, 1, 2))) + " \n")));
        Console.WriteLine(Program._fmtTop((((("Determinant of " + _fmtStr(matrix_b_73)) + " = ") + _fmtStr(Program.determinant(matrix_b_73))) + " \n")));
        Console.WriteLine(Program._fmtTop((((("Inverse of " + _fmtStr(matrix_d_75)) + " = ") + _fmtStr(Program.inverse(matrix_d_75))) + "\n")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
