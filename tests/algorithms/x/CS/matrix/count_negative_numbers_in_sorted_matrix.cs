// Generated by Mochi 0.10.63 on 2025-08-09 23:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] grid_26 = Program.generate_large_matrix();
    static long[][][] test_grids_27 = new long[][][]{new long[][]{new long[]{4, 3, 2, -1}, new long[]{3, 2, 1, -1}, new long[]{1, 1, -1, -2}, new long[]{-1, -1, -2, -3}}, new long[][]{new long[]{3, 2}, new long[]{1, 0}}, new long[][]{new long[]{7, 7, 6}}, new long[][]{new long[]{7, 7, 6}, new long[]{-1, -2, -3}}, grid_26};
    static long[] results_bin_28 = new long[]{};
    static long i_29 = 0;
    public static long[][] generate_large_matrix() {
        long[][] result_0 = new long[][]{};
        long i_1 = 0;
        while ((i_1 < 1000)) {
            long[] row_2 = new long[]{};
            long j_3 = (1000 - i_1);
            while ((j_3 > (-1000 - i_1))) {
                row_2 = (Enumerable.ToArray(Enumerable.Append<long>(row_2, j_3)));
                j_3 = (j_3 - 1);
            }
            result_0 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_0, row_2)));
            i_1 = (i_1 + 1);
        };
        return result_0;
    }

    public static long find_negative_index(long[] arr_4) {
        long left_5 = 0;
        long right_6 = (arr_4.Length - 1);
        if ((arr_4.Length == 0)) {
            return 0;
        };
        if ((_idx(arr_4, 0) < 0)) {
            return 0;
        };
        while ((left_5 <= right_6)) {
            long mid_7 = ((left_5 + right_6) / 2);
            long num_8 = _idx(arr_4, mid_7);
            if ((num_8 < 0)) {
                if ((mid_7 == 0)) {
                    return 0;
                }
                if ((_idx(arr_4, (mid_7 - 1)) >= 0)) {
                    return mid_7;
                }
                right_6 = (mid_7 - 1);
            } else {
                left_5 = (mid_7 + 1);
            }
        };
        return arr_4.Length;
    }

    public static long count_negatives_binary_search(long[][] grid_9) {
        long total_10 = 0;
        long bound_11 = _idx(grid_9, 0).Length;
        long i_12 = 0;
        while ((i_12 < grid_9.Length)) {
            long[] row_13 = _idx(grid_9, i_12);
            long idx_14 = Program.find_negative_index(_slice<long>(row_13, 0, bound_11));
            bound_11 = idx_14;
            total_10 = (total_10 + idx_14);
            i_12 = (i_12 + 1);
        };
        return ((grid_9.Length * _idx(grid_9, 0).Length) - total_10);
    }

    public static long count_negatives_brute_force(long[][] grid_15) {
        long count_16 = 0;
        long i_17 = 0;
        while ((i_17 < grid_15.Length)) {
            long[] row_18 = _idx(grid_15, i_17);
            long j_19 = 0;
            while ((j_19 < row_18.Length)) {
                if ((_idx(row_18, j_19) < 0)) {
                    count_16 = (count_16 + 1);
                }
                j_19 = (j_19 + 1);
            }
            i_17 = (i_17 + 1);
        };
        return count_16;
    }

    public static long count_negatives_brute_force_with_break(long[][] grid_20) {
        long total_21 = 0;
        long i_22 = 0;
        while ((i_22 < grid_20.Length)) {
            long[] row_23 = _idx(grid_20, i_22);
            long j_24 = 0;
            while ((j_24 < row_23.Length)) {
                long number_25 = _idx(row_23, j_24);
                if ((number_25 < 0)) {
                    total_21 = (total_21 + (row_23.Length - j_24));
                    break;
                }
                j_24 = (j_24 + 1);
            }
            i_22 = (i_22 + 1);
        };
        return total_21;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_29 < test_grids_27.Length)) {
                results_bin_28 = (Enumerable.ToArray(Enumerable.Append<long>(results_bin_28, Program.count_negatives_binary_search(_idx(test_grids_27, i_29)))));
                i_29 = (i_29 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(results_bin_28)));
            long[] results_brute_30 = new long[]{};
            i_29 = 0;
            while ((i_29 < test_grids_27.Length)) {
                results_brute_30 = (Enumerable.ToArray(Enumerable.Append<long>(results_brute_30, Program.count_negatives_brute_force(_idx(test_grids_27, i_29)))));
                i_29 = (i_29 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(results_brute_30)));
            long[] results_break_31 = new long[]{};
            i_29 = 0;
            while ((i_29 < test_grids_27.Length)) {
                results_break_31 = (Enumerable.ToArray(Enumerable.Append<long>(results_break_31, Program.count_negatives_brute_force_with_break(_idx(test_grids_27, i_29)))));
                i_29 = (i_29 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(results_break_31)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
