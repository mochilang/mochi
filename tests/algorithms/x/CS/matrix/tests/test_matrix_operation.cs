// Generated by Mochi 0.10.64 (commit b11da3e151) on 2025-08-12 09:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static void check_matrix(double[][] mat_0) {
        if (((mat_0.Length < 2) || (_idx(mat_0, 0).Length < 2))) {
            throw new Exception("Expected a matrix with at least 2x2 dimensions");
        };
    }

    public static double[][] add(double[][] a_1, double[][] b_2) {
        Program.check_matrix(a_1);
        Program.check_matrix(b_2);
        if (((a_1.Length != b_2.Length) || (_idx(a_1, 0).Length != _idx(b_2, 0).Length))) {
            throw new Exception("Matrices must have the same dimensions");
        };
        long rows_3 = a_1.Length;
        long cols_4 = _idx(a_1, 0).Length;
        double[][] result_5 = new double[][]{};
        long i_6 = 0;
        while ((i_6 < rows_3)) {
            double[] row_7 = new double[]{};
            long j_8 = 0;
            while ((j_8 < cols_4)) {
                row_7 = (Enumerable.ToArray(Enumerable.Append<double>(row_7, (_idx(_idx(a_1, i_6), j_8) + _idx(_idx(b_2, i_6), j_8)))));
                j_8 = (j_8 + 1);
            }
            result_5 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_5, row_7)));
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static double[][] subtract(double[][] a_9, double[][] b_10) {
        Program.check_matrix(a_9);
        Program.check_matrix(b_10);
        if (((a_9.Length != b_10.Length) || (_idx(a_9, 0).Length != _idx(b_10, 0).Length))) {
            throw new Exception("Matrices must have the same dimensions");
        };
        long rows_11 = a_9.Length;
        long cols_12 = _idx(a_9, 0).Length;
        double[][] result_13 = new double[][]{};
        long i_14 = 0;
        while ((i_14 < rows_11)) {
            double[] row_15 = new double[]{};
            long j_16 = 0;
            while ((j_16 < cols_12)) {
                row_15 = (Enumerable.ToArray(Enumerable.Append<double>(row_15, (_idx(_idx(a_9, i_14), j_16) - _idx(_idx(b_10, i_14), j_16)))));
                j_16 = (j_16 + 1);
            }
            result_13 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_13, row_15)));
            i_14 = (i_14 + 1);
        };
        return result_13;
    }

    public static double[][] scalar_multiply(double[][] a_17, double s_18) {
        Program.check_matrix(a_17);
        long rows_19 = a_17.Length;
        long cols_20 = _idx(a_17, 0).Length;
        double[][] result_21 = new double[][]{};
        long i_22 = 0;
        while ((i_22 < rows_19)) {
            double[] row_23 = new double[]{};
            long j_24 = 0;
            while ((j_24 < cols_20)) {
                row_23 = (Enumerable.ToArray(Enumerable.Append<double>(row_23, (_idx(_idx(a_17, i_22), j_24) * s_18))));
                j_24 = (j_24 + 1);
            }
            result_21 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_21, row_23)));
            i_22 = (i_22 + 1);
        };
        return result_21;
    }

    public static double[][] multiply(double[][] a_25, double[][] b_26) {
        Program.check_matrix(a_25);
        Program.check_matrix(b_26);
        if ((_idx(a_25, 0).Length != b_26.Length)) {
            throw new Exception("Invalid dimensions for matrix multiplication");
        };
        long rows_27 = a_25.Length;
        long cols_28 = _idx(b_26, 0).Length;
        double[][] result_29 = new double[][]{};
        long i_30 = 0;
        while ((i_30 < rows_27)) {
            double[] row_31 = new double[]{};
            long j_32 = 0;
            while ((j_32 < cols_28)) {
                double sum_33 = 0.0;
                long k_34 = 0;
                while ((k_34 < b_26.Length)) {
                    sum_33 = (sum_33 + (_idx(_idx(a_25, i_30), k_34) * _idx(_idx(b_26, k_34), j_32)));
                    k_34 = (k_34 + 1);
                }
                row_31 = (Enumerable.ToArray(Enumerable.Append<double>(row_31, sum_33)));
                j_32 = (j_32 + 1);
            }
            result_29 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_29, row_31)));
            i_30 = (i_30 + 1);
        };
        return result_29;
    }

    public static double[][] identity(long n_35) {
        double[][] result_36 = new double[][]{};
        long i_37 = 0;
        while ((i_37 < n_35)) {
            double[] row_38 = new double[]{};
            long j_39 = 0;
            while ((j_39 < n_35)) {
                if ((i_37 == j_39)) {
                    row_38 = (Enumerable.ToArray(Enumerable.Append<double>(row_38, 1.0)));
                } else {
                    row_38 = (Enumerable.ToArray(Enumerable.Append<double>(row_38, 0.0)));
                }
                j_39 = (j_39 + 1);
            }
            result_36 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_36, row_38)));
            i_37 = (i_37 + 1);
        };
        return result_36;
    }

    public static double[][] transpose(double[][] a_40) {
        Program.check_matrix(a_40);
        long rows_41 = a_40.Length;
        long cols_42 = _idx(a_40, 0).Length;
        double[][] result_43 = new double[][]{};
        long j_44 = 0;
        while ((j_44 < cols_42)) {
            double[] row_45 = new double[]{};
            long i_46 = 0;
            while ((i_46 < rows_41)) {
                row_45 = (Enumerable.ToArray(Enumerable.Append<double>(row_45, _idx(_idx(a_40, i_46), j_44))));
                i_46 = (i_46 + 1);
            }
            result_43 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_43, row_45)));
            j_44 = (j_44 + 1);
        };
        return result_43;
    }

    public static void main() {
        double[][] mat_a_47 = new double[][]{new double[]{12.0, 10.0}, new double[]{3.0, 9.0}};
        double[][] mat_b_48 = new double[][]{new double[]{3.0, 4.0}, new double[]{7.0, 4.0}};
        double[][] mat_c_49 = new double[][]{new double[]{3.0, 0.0, 2.0}, new double[]{2.0, 0.0, -2.0}, new double[]{0.0, 1.0, 1.0}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.add(mat_a_47, mat_b_48))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.subtract(mat_a_47, mat_b_48))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.multiply(mat_a_47, mat_b_48))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.scalar_multiply(mat_a_47, 3.5))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.identity(5))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.transpose(mat_c_49))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
