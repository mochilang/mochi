// Generated by Mochi 0.10.64 (commit b11da3e151) on 2025-08-12 09:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] unique(long[] nums_0) {
        long[] res_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < nums_0.Length)) {
            long v_3 = _idx(nums_0, i_2);
            bool found_4 = false;
            long j_5 = 0;
            while ((j_5 < res_1.Length)) {
                if ((_idx(res_1, j_5) == v_3)) {
                    found_4 = true;
                    break;
                }
                j_5 = (j_5 + 1);
            }
            if ((!found_4)) {
                res_1 = (Enumerable.ToArray(Enumerable.Append<long>(res_1, v_3)));
            }
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static long array_equalization(long[] vector_6, long step_size_7) {
        if ((step_size_7 <= 0)) {
            throw new Exception("Step size must be positive and non-zero.");
        };
        long[] elems_8 = Program.unique(vector_6);
        long min_updates_9 = vector_6.Length;
        long i_10 = 0;
        while ((i_10 < elems_8.Length)) {
            long target_11 = _idx(elems_8, i_10);
            long idx_12 = 0;
            long updates_13 = 0;
            while ((idx_12 < vector_6.Length)) {
                if ((_idx(vector_6, idx_12) != target_11)) {
                    updates_13 = (updates_13 + 1);
                    idx_12 = (idx_12 + step_size_7);
                } else {
                    idx_12 = (idx_12 + 1);
                }
            }
            if ((updates_13 < min_updates_9)) {
                min_updates_9 = updates_13;
            }
            i_10 = (i_10 + 1);
        };
        return min_updates_9;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.array_equalization(new long[]{1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2}, 4))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.array_equalization(new long[]{22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92}, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.array_equalization(new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.array_equalization(new long[]{22, 22, 22, 33, 33, 33}, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.array_equalization(new long[]{1, 2, 3}, 2147483647))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
