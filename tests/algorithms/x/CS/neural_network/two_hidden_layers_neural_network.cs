// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Network {
    public double[][] w1;
    public double[][] w2;
    public double[][] w3;
    public override string ToString() => $"Network {{w1 = {w1}, w2 = {w2}, w3 = {w3}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double exp_approx(double x_0) {
        double sum_1 = 1.0;
        double term_2 = 1.0;
        long i_3 = 1;
        while ((i_3 < 10)) {
            term_2 = ((term_2 * x_0) / Convert.ToDouble(i_3));
            sum_1 = (sum_1 + term_2);
            i_3 = (i_3 + 1);
        };
        return sum_1;
    }

    public static double sigmoid(double x_4) {
        return (1.0 / (1.0 + Program.exp_approx(-x_4)));
    }

    public static double sigmoid_derivative(double x_5) {
        return (x_5 * (1.0 - x_5));
    }

    public static Network new_network() {
        return new Network{w1 = new double[][]{new double[]{0.1, 0.2, 0.3, 0.4}, new double[]{0.5, 0.6, 0.7, 0.8}, new double[]{0.9, 1.0, 1.1, 1.2}}, w2 = new double[][]{new double[]{0.1, 0.2, 0.3}, new double[]{0.4, 0.5, 0.6}, new double[]{0.7, 0.8, 0.9}, new double[]{1.0, 1.1, 1.2}}, w3 = new double[][]{new double[]{0.1}, new double[]{0.2}, new double[]{0.3}}};
    }

    public static double feedforward(Network net_6, double[] input_7) {
        double[] hidden1_8 = new double[]{};
        long j_9 = 0;
        while ((j_9 < 4)) {
            double sum1_10 = 0.0;
            long i_11 = 0;
            while ((i_11 < 3)) {
                sum1_10 = (sum1_10 + (_idx(input_7, i_11) * _idx(_idx(net_6.w1, i_11), j_9)));
                i_11 = (i_11 + 1);
            }
            hidden1_8 = ((Func<double[]>)(() => { var _tmp = hidden1_8.ToList(); _tmp.Add(Program.sigmoid(sum1_10)); return _tmp.ToArray(); }))();
            j_9 = (j_9 + 1);
        };
        double[] hidden2_12 = new double[]{};
        long k_13 = 0;
        while ((k_13 < 3)) {
            double sum2_14 = 0.0;
            long j2_15 = 0;
            while ((j2_15 < 4)) {
                sum2_14 = (sum2_14 + (_idx(hidden1_8, j2_15) * _idx(_idx(net_6.w2, j2_15), k_13)));
                j2_15 = (j2_15 + 1);
            }
            hidden2_12 = ((Func<double[]>)(() => { var _tmp = hidden2_12.ToList(); _tmp.Add(Program.sigmoid(sum2_14)); return _tmp.ToArray(); }))();
            k_13 = (k_13 + 1);
        };
        double sum3_16 = 0.0;
        long k2_17 = 0;
        while ((k2_17 < 3)) {
            sum3_16 = (sum3_16 + (_idx(hidden2_12, k2_17) * _idx(_idx(net_6.w3, k2_17), 0)));
            k2_17 = (k2_17 + 1);
        };
        double out_18 = Program.sigmoid(sum3_16);
        return out_18;
    }

    public static void train(Network net_19, double[][] inputs_20, double[] outputs_21, long iterations_22) {
        long iter_23 = 0;
        while ((iter_23 < iterations_22)) {
            long s_24 = 0;
            while ((s_24 < inputs_20.Length)) {
                double[] inp_25 = _idx(inputs_20, s_24);
                double target_26 = _idx(outputs_21, s_24);
                double[] hidden1_27 = new double[]{};
                long j_28 = 0;
                while ((j_28 < 4)) {
                    double sum1_29 = 0.0;
                    long i_30 = 0;
                    while ((i_30 < 3)) {
                        sum1_29 = (sum1_29 + (_idx(inp_25, i_30) * _idx(_idx(net_19.w1, i_30), j_28)));
                        i_30 = (i_30 + 1);
                    }
                    hidden1_27 = ((Func<double[]>)(() => { var _tmp = hidden1_27.ToList(); _tmp.Add(Program.sigmoid(sum1_29)); return _tmp.ToArray(); }))();
                    j_28 = (j_28 + 1);
                }
                double[] hidden2_31 = new double[]{};
                long k_32 = 0;
                while ((k_32 < 3)) {
                    double sum2_33 = 0.0;
                    long j2_34 = 0;
                    while ((j2_34 < 4)) {
                        sum2_33 = (sum2_33 + (_idx(hidden1_27, j2_34) * _idx(_idx(net_19.w2, j2_34), k_32)));
                        j2_34 = (j2_34 + 1);
                    }
                    hidden2_31 = ((Func<double[]>)(() => { var _tmp = hidden2_31.ToList(); _tmp.Add(Program.sigmoid(sum2_33)); return _tmp.ToArray(); }))();
                    k_32 = (k_32 + 1);
                }
                double sum3_35 = 0.0;
                long k3_36 = 0;
                while ((k3_36 < 3)) {
                    sum3_35 = (sum3_35 + (_idx(hidden2_31, k3_36) * _idx(_idx(net_19.w3, k3_36), 0)));
                    k3_36 = (k3_36 + 1);
                }
                double output_37 = Program.sigmoid(sum3_35);
                double error_38 = (target_26 - output_37);
                double delta_output_39 = (error_38 * Program.sigmoid_derivative(output_37));
                double[][] new_w3_40 = new double[][]{};
                long k4_41 = 0;
                while ((k4_41 < 3)) {
                    double[] w3row_42 = _idx(net_19.w3, k4_41);
                    w3row_42[(int)(0)] = (_idx(w3row_42, 0) + (_idx(hidden2_31, k4_41) * delta_output_39));
                    new_w3_40 = ((Func<double[][]>)(() => { var _tmp = new_w3_40.ToList(); _tmp.Add(w3row_42); return _tmp.ToArray(); }))();
                    k4_41 = (k4_41 + 1);
                }
                net_19.w3 = new_w3_40;
                double[] delta_hidden2_43 = new double[]{};
                long k5_44 = 0;
                while ((k5_44 < 3)) {
                    double[] row_45 = _idx(net_19.w3, k5_44);
                    double dh2_46 = ((_idx(row_45, 0) * delta_output_39) * Program.sigmoid_derivative(_idx(hidden2_31, k5_44)));
                    delta_hidden2_43 = ((Func<double[]>)(() => { var _tmp = delta_hidden2_43.ToList(); _tmp.Add(dh2_46); return _tmp.ToArray(); }))();
                    k5_44 = (k5_44 + 1);
                }
                double[][] new_w2_47 = new double[][]{};
                j_28 = 0;
                while ((j_28 < 4)) {
                    double[] w2row_48 = _idx(net_19.w2, j_28);
                    long k6_49 = 0;
                    while ((k6_49 < 3)) {
                        w2row_48[(int)(k6_49)] = (_idx(w2row_48, k6_49) + (_idx(hidden1_27, j_28) * _idx(delta_hidden2_43, k6_49)));
                        k6_49 = (k6_49 + 1);
                    }
                    new_w2_47 = ((Func<double[][]>)(() => { var _tmp = new_w2_47.ToList(); _tmp.Add(w2row_48); return _tmp.ToArray(); }))();
                    j_28 = (j_28 + 1);
                }
                net_19.w2 = new_w2_47;
                double[] delta_hidden1_50 = new double[]{};
                j_28 = 0;
                while ((j_28 < 4)) {
                    double sumdh_51 = 0.0;
                    long k7_52 = 0;
                    while ((k7_52 < 3)) {
                        double[] row2_53 = _idx(net_19.w2, j_28);
                        sumdh_51 = (sumdh_51 + (_idx(row2_53, k7_52) * _idx(delta_hidden2_43, k7_52)));
                        k7_52 = (k7_52 + 1);
                    }
                    delta_hidden1_50 = ((Func<double[]>)(() => { var _tmp = delta_hidden1_50.ToList(); _tmp.Add((sumdh_51 * Program.sigmoid_derivative(_idx(hidden1_27, j_28)))); return _tmp.ToArray(); }))();
                    j_28 = (j_28 + 1);
                }
                double[][] new_w1_54 = new double[][]{};
                long i2_55 = 0;
                while ((i2_55 < 3)) {
                    double[] w1row_56 = _idx(net_19.w1, i2_55);
                    j_28 = 0;
                    while ((j_28 < 4)) {
                        w1row_56[(int)(j_28)] = (_idx(w1row_56, j_28) + (_idx(inp_25, i2_55) * _idx(delta_hidden1_50, j_28)));
                        j_28 = (j_28 + 1);
                    }
                    new_w1_54 = ((Func<double[][]>)(() => { var _tmp = new_w1_54.ToList(); _tmp.Add(w1row_56); return _tmp.ToArray(); }))();
                    i2_55 = (i2_55 + 1);
                }
                net_19.w1 = new_w1_54;
                s_24 = (s_24 + 1);
            }
            iter_23 = (iter_23 + 1);
        };
    }

    public static long predict(Network net_57, double[] input_58) {
        double out_59 = Program.feedforward(net_57, input_58);
        if ((out_59 > 0.6)) {
            return 1;
        };
        return 0;
    }

    public static long example() {
        double[][] inputs_60 = new double[][]{new double[]{0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 1.0}, new double[]{0.0, 1.0, 0.0}, new double[]{0.0, 1.0, 1.0}, new double[]{1.0, 0.0, 0.0}, new double[]{1.0, 0.0, 1.0}, new double[]{1.0, 1.0, 0.0}, new double[]{1.0, 1.0, 1.0}};
        double[] outputs_61 = new double[]{0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0};
        Network net_62 = Program.new_network();
        Program.train(net_62, inputs_60, outputs_61, 10);
        long result_63 = Program.predict(net_62, new double[]{1.0, 1.0, 1.0});
        Console.WriteLine(Program._fmtTop(_fmtStr(result_63)));
        return result_63;
    }

    public static void main() {
        Program.example();
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
