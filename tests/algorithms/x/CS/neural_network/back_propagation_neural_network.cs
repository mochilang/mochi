// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Layer {
    public long units;
    public double[][] weight;
    public double[] bias;
    public double[] output;
    public double[] xdata;
    public double learn_rate;
    public override string ToString() => $"Layer {{units = {units}, weight = {weight}, bias = {bias}, output = {output}, xdata = {xdata}, learn_rate = {learn_rate.ToString("0.0")}}}";
}
class Data {
    public double[][] x;
    public double[][] y;
    public override string ToString() => $"Data {{x = {x}, y = {y}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 1;
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return seed_0;
    }

    public static double random() {
        return ((1.0 * Program.rand()) / 2.147483648e09);
    }

    public static double expApprox(double x_1) {
        double y_2 = x_1;
        bool is_neg_3 = false;
        if ((x_1 < 0.0)) {
            is_neg_3 = true;
            y_2 = -x_1;
        };
        double term_4 = 1.0;
        double sum_5 = 1.0;
        long n_6 = 1;
        while ((n_6 < 30)) {
            term_4 = ((term_4 * y_2) / Convert.ToDouble(n_6));
            sum_5 = (sum_5 + term_4);
            n_6 = (n_6 + 1);
        };
        if (is_neg_3) {
            return (1.0 / sum_5);
        };
        return sum_5;
    }

    public static double sigmoid(double z_7) {
        return (1.0 / (1.0 + Program.expApprox(-z_7)));
    }

    public static double[] sigmoid_vec(double[] v_8) {
        double[] res_9 = new double[]{};
        long i_10 = 0;
        while ((i_10 < v_8.Length)) {
            res_9 = (Enumerable.ToArray(Enumerable.Append<double>(res_9, Program.sigmoid(v_8[(int)(i_10)]))));
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static double[] sigmoid_derivative(double[] out_11) {
        double[] res_12 = new double[]{};
        long i_13 = 0;
        while ((i_13 < out_11.Length)) {
            double val_14 = out_11[(int)(i_13)];
            res_12 = (Enumerable.ToArray(Enumerable.Append<double>(res_12, (val_14 * (1.0 - val_14)))));
            i_13 = (i_13 + 1);
        };
        return res_12;
    }

    public static double[] random_vector(long n_15) {
        double[] v_16 = new double[]{};
        long i_17 = 0;
        while ((i_17 < n_15)) {
            v_16 = (Enumerable.ToArray(Enumerable.Append<double>(v_16, (Program.random() - 0.5))));
            i_17 = (i_17 + 1);
        };
        return v_16;
    }

    public static double[][] random_matrix(long r_18, long c_19) {
        double[][] m_20 = new double[][]{};
        long i_21 = 0;
        while ((i_21 < r_18)) {
            m_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(m_20, Program.random_vector(c_19))));
            i_21 = (i_21 + 1);
        };
        return m_20;
    }

    public static double[] matvec(double[][] mat_22, double[] vec_23) {
        double[] res_24 = new double[]{};
        long i_25 = 0;
        while ((i_25 < mat_22.Length)) {
            double s_26 = 0.0;
            long j_27 = 0;
            while ((j_27 < vec_23.Length)) {
                s_26 = (s_26 + (mat_22[(int)(i_25)][(int)(j_27)] * vec_23[(int)(j_27)]));
                j_27 = (j_27 + 1);
            }
            res_24 = (Enumerable.ToArray(Enumerable.Append<double>(res_24, s_26)));
            i_25 = (i_25 + 1);
        };
        return res_24;
    }

    public static double[] matTvec(double[][] mat_28, double[] vec_29) {
        long cols_30 = mat_28[(int)(0)].Length;
        double[] res_31 = new double[]{};
        long j_32 = 0;
        while ((j_32 < cols_30)) {
            double s_33 = 0.0;
            long i_34 = 0;
            while ((i_34 < mat_28.Length)) {
                s_33 = (s_33 + (mat_28[(int)(i_34)][(int)(j_32)] * vec_29[(int)(i_34)]));
                i_34 = (i_34 + 1);
            }
            res_31 = (Enumerable.ToArray(Enumerable.Append<double>(res_31, s_33)));
            j_32 = (j_32 + 1);
        };
        return res_31;
    }

    public static double[] vec_sub(double[] a_35, double[] b_36) {
        double[] res_37 = new double[]{};
        long i_38 = 0;
        while ((i_38 < a_35.Length)) {
            res_37 = (Enumerable.ToArray(Enumerable.Append<double>(res_37, (a_35[(int)(i_38)] - b_36[(int)(i_38)]))));
            i_38 = (i_38 + 1);
        };
        return res_37;
    }

    public static double[] vec_mul(double[] a_39, double[] b_40) {
        double[] res_41 = new double[]{};
        long i_42 = 0;
        while ((i_42 < a_39.Length)) {
            res_41 = (Enumerable.ToArray(Enumerable.Append<double>(res_41, (a_39[(int)(i_42)] * b_40[(int)(i_42)]))));
            i_42 = (i_42 + 1);
        };
        return res_41;
    }

    public static double[] vec_scalar_mul(double[] v_43, double s_44) {
        double[] res_45 = new double[]{};
        long i_46 = 0;
        while ((i_46 < v_43.Length)) {
            res_45 = (Enumerable.ToArray(Enumerable.Append<double>(res_45, (v_43[(int)(i_46)] * s_44))));
            i_46 = (i_46 + 1);
        };
        return res_45;
    }

    public static double[][] outer(double[] a_47, double[] b_48) {
        double[][] res_49 = new double[][]{};
        long i_50 = 0;
        while ((i_50 < a_47.Length)) {
            double[] row_51 = new double[]{};
            long j_52 = 0;
            while ((j_52 < b_48.Length)) {
                row_51 = (Enumerable.ToArray(Enumerable.Append<double>(row_51, (a_47[(int)(i_50)] * b_48[(int)(j_52)]))));
                j_52 = (j_52 + 1);
            }
            res_49 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_49, row_51)));
            i_50 = (i_50 + 1);
        };
        return res_49;
    }

    public static double[][] mat_scalar_mul(double[][] mat_53, double s_54) {
        double[][] res_55 = new double[][]{};
        long i_56 = 0;
        while ((i_56 < mat_53.Length)) {
            double[] row_57 = new double[]{};
            long j_58 = 0;
            while ((j_58 < mat_53[(int)(i_56)].Length)) {
                row_57 = (Enumerable.ToArray(Enumerable.Append<double>(row_57, (mat_53[(int)(i_56)][(int)(j_58)] * s_54))));
                j_58 = (j_58 + 1);
            }
            res_55 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_55, row_57)));
            i_56 = (i_56 + 1);
        };
        return res_55;
    }

    public static double[][] mat_sub(double[][] a_59, double[][] b_60) {
        double[][] res_61 = new double[][]{};
        long i_62 = 0;
        while ((i_62 < a_59.Length)) {
            double[] row_63 = new double[]{};
            long j_64 = 0;
            while ((j_64 < a_59[(int)(i_62)].Length)) {
                row_63 = (Enumerable.ToArray(Enumerable.Append<double>(row_63, (a_59[(int)(i_62)][(int)(j_64)] - b_60[(int)(i_62)][(int)(j_64)]))));
                j_64 = (j_64 + 1);
            }
            res_61 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_61, row_63)));
            i_62 = (i_62 + 1);
        };
        return res_61;
    }

    public static Layer init_layer(long units_65, long back_units_66, double lr_67) {
        return new Layer{units = units_65, weight = Program.random_matrix(units_65, back_units_66), bias = Program.random_vector(units_65), output = new double[]{}, xdata = new double[]{}, learn_rate = lr_67};
    }

    public static Layer[] forward(Layer[] layers_68, double[] x_69) {
        double[] data_70 = x_69;
        long i_71 = 0;
        while ((i_71 < layers_68.Length)) {
            Layer layer_72 = layers_68[(int)(i_71)];
            layer_72.xdata = data_70;
            if ((i_71 == 0)) {
                layer_72.output = data_70;
            } else {
                double[] z_73 = Program.vec_sub(Program.matvec(layer_72.weight, data_70), layer_72.bias);
                layer_72.output = Program.sigmoid_vec(z_73);
                data_70 = layer_72.output;
            }
            layers_68[i_71] = layer_72;
            i_71 = (i_71 + 1);
        };
        return layers_68;
    }

    public static Layer[] backward(Layer[] layers_74, double[] grad_75) {
        double[] g_76 = grad_75;
        long i_77 = (layers_74.Length - 1);
        while ((i_77 > 0)) {
            Layer layer_78 = layers_74[(int)(i_77)];
            double[] deriv_79 = Program.sigmoid_derivative(layer_78.output);
            double[] delta_80 = Program.vec_mul(g_76, deriv_79);
            double[][] grad_w_81 = Program.outer(delta_80, layer_78.xdata);
            layer_78.weight = Program.mat_sub(layer_78.weight, Program.mat_scalar_mul(grad_w_81, layer_78.learn_rate));
            layer_78.bias = Program.vec_sub(layer_78.bias, Program.vec_scalar_mul(delta_80, layer_78.learn_rate));
            g_76 = Program.matTvec(layer_78.weight, delta_80);
            layers_74[i_77] = layer_78;
            i_77 = (i_77 - 1);
        };
        return layers_74;
    }

    public static double calc_loss(double[] y_82, double[] yhat_83) {
        double s_84 = 0.0;
        long i_85 = 0;
        while ((i_85 < y_82.Length)) {
            double d_86 = (y_82[(int)(i_85)] - yhat_83[(int)(i_85)]);
            s_84 = (s_84 + (d_86 * d_86));
            i_85 = (i_85 + 1);
        };
        return s_84;
    }

    public static double[] calc_gradient(double[] y_87, double[] yhat_88) {
        double[] g_89 = new double[]{};
        long i_90 = 0;
        while ((i_90 < y_87.Length)) {
            g_89 = (Enumerable.ToArray(Enumerable.Append<double>(g_89, (2.0 * (yhat_88[(int)(i_90)] - y_87[(int)(i_90)])))));
            i_90 = (i_90 + 1);
        };
        return g_89;
    }

    public static double train(Layer[] layers_91, double[][] xdata_92, double[][] ydata_93, long rounds_94, double acc_95) {
        long r_96 = 0;
        while ((r_96 < rounds_94)) {
            long i_97 = 0;
            while ((i_97 < xdata_92.Length)) {
                layers_91 = Program.forward(layers_91, xdata_92[(int)(i_97)]);
                double[] out_98 = layers_91[(int)((layers_91.Length - 1))].output;
                double[] grad_99 = Program.calc_gradient(ydata_93[(int)(i_97)], out_98);
                layers_91 = Program.backward(layers_91, grad_99);
                i_97 = (i_97 + 1);
            }
            r_96 = (r_96 + 1);
        };
        return 0.0;
    }

    public static Data create_data() {
        double[][] x_100 = new double[][]{};
        long i_101 = 0;
        while ((i_101 < 10)) {
            x_100 = (Enumerable.ToArray(Enumerable.Append<double[]>(x_100, Program.random_vector(10))));
            i_101 = (i_101 + 1);
        };
        double[][] y_102 = new double[][]{new double[]{0.8, 0.4}, new double[]{0.4, 0.3}, new double[]{0.34, 0.45}, new double[]{0.67, 0.32}, new double[]{0.88, 0.67}, new double[]{0.78, 0.77}, new double[]{0.55, 0.66}, new double[]{0.55, 0.43}, new double[]{0.54, 0.1}, new double[]{0.1, 0.5}};
        return new Data{x = x_100, y = y_102};
    }

    public static void main() {
        Data data_103 = Program.create_data();
        double[][] x_104 = data_103.x;
        double[][] y_105 = data_103.y;
        Layer[] layers_106 = new Layer[]{};
        layers_106 = (Enumerable.ToArray(Enumerable.Append<Layer>(layers_106, Program.init_layer(10, 0, 0.3))));
        layers_106 = (Enumerable.ToArray(Enumerable.Append<Layer>(layers_106, Program.init_layer(20, 10, 0.3))));
        layers_106 = (Enumerable.ToArray(Enumerable.Append<Layer>(layers_106, Program.init_layer(30, 20, 0.3))));
        layers_106 = (Enumerable.ToArray(Enumerable.Append<Layer>(layers_106, Program.init_layer(2, 30, 0.3))));
        double final_mse_107 = Program.train(layers_106, x_104, y_105, 100, 0.01);
        Console.WriteLine(Program._fmtTop(final_mse_107));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
