// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class DataSet {
    public long[][] images;
    public long[][] labels;
    public long num_examples;
    public long index_in_epoch;
    public long epochs_completed;
    public override string ToString() => $"DataSet {{images = {images}, labels = {labels}, num_examples = {num_examples}, index_in_epoch = {index_in_epoch}, epochs_completed = {epochs_completed}}}";
}
class Datasets {
    public DataSet train;
    public DataSet validation;
    public DataSet test_ds;
    public override string ToString() => $"Datasets {{train = {train}, validation = {validation}, test_ds = {test_ds}}}";
}
class BatchResult {
    public DataSet dataset;
    public long[][] images;
    public long[][] labels;
    public override string ToString() => $"BatchResult {{dataset = {dataset}, images = {images}, labels = {labels}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[][] dense_to_one_hot(long[] labels_0, long num_classes_1) {
        long[][] result_2 = new long[][]{};
        long i_3 = 0;
        while ((i_3 < labels_0.Length)) {
            long[] row_4 = new long[]{};
            long j_5 = 0;
            while ((j_5 < num_classes_1)) {
                if ((j_5 == _idx(labels_0, i_3))) {
                    row_4 = ((Func<long[]>)(() => { var _tmp = row_4.Cast<long>().ToList(); _tmp.Add(1); return _tmp.ToArray(); }))();
                } else {
                    row_4 = ((Func<long[]>)(() => { var _tmp = row_4.Cast<long>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                }
                j_5 = (j_5 + 1);
            }
            result_2 = ((Func<long[][]>)(() => { var _tmp = result_2.Cast<long[]>().ToList(); _tmp.Add(row_4); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static DataSet new_dataset(long[][] images_6, long[][] labels_7) {
        return new DataSet{images = images_6, labels = labels_7, num_examples = images_6.Length, index_in_epoch = 0, epochs_completed = 0};
    }

    public static BatchResult next_batch(DataSet ds_8, long batch_size_9) {
        long start_10 = ds_8.index_in_epoch;
        if (((start_10 + batch_size_9) > ds_8.num_examples)) {
            long rest_11 = (ds_8.num_examples - start_10);
            long[][] images_rest_12 = _slice<long[]>(ds_8.images, start_10, ds_8.num_examples);
            long[][] labels_rest_13 = _slice<long[]>(ds_8.labels, start_10, ds_8.num_examples);
            long new_index_14 = (batch_size_9 - rest_11);
            long[][] images_new_15 = _slice<long[]>(ds_8.images, 0, new_index_14);
            long[][] labels_new_16 = _slice<long[]>(ds_8.labels, 0, new_index_14);
            var batch_images_17 = (Enumerable.ToArray(Enumerable.Concat(images_rest_12, images_new_15)));
            var batch_labels_18 = (Enumerable.ToArray(Enumerable.Concat(labels_rest_13, labels_new_16)));
            DataSet new_ds_19 = new DataSet{images = ds_8.images, labels = ds_8.labels, num_examples = ds_8.num_examples, index_in_epoch = new_index_14, epochs_completed = (ds_8.epochs_completed + 1)};
            return new BatchResult{dataset = new_ds_19, images = batch_images_17, labels = batch_labels_18};
        } else {
            long end_20 = (start_10 + batch_size_9);
            long[][] batch_images_21 = _slice<long[]>(ds_8.images, start_10, end_20);
            long[][] batch_labels_22 = _slice<long[]>(ds_8.labels, start_10, end_20);
            DataSet new_ds_23 = new DataSet{images = ds_8.images, labels = ds_8.labels, num_examples = ds_8.num_examples, index_in_epoch = end_20, epochs_completed = ds_8.epochs_completed};
            return new BatchResult{dataset = new_ds_23, images = batch_images_21, labels = batch_labels_22};
        };
        return default(BatchResult);
    }

    public static Datasets read_data_sets(long[][] train_images_24, long[] train_labels_raw_25, long[][] test_images_26, long[] test_labels_raw_27, long validation_size_28, long num_classes_29) {
        long[][] train_labels_30 = Program.dense_to_one_hot(train_labels_raw_25, num_classes_29);
        long[][] test_labels_31 = Program.dense_to_one_hot(test_labels_raw_27, num_classes_29);
        long[][] validation_images_32 = _slice<long[]>(train_images_24, 0, validation_size_28);
        long[][] validation_labels_33 = _slice<long[]>(train_labels_30, 0, validation_size_28);
        long[][] train_images_rest_34 = _slice<long[]>(train_images_24, validation_size_28, train_images_24.Length);
        long[][] train_labels_rest_35 = _slice<long[]>(train_labels_30, validation_size_28, train_labels_30.Length);
        DataSet train_36 = Program.new_dataset(train_images_rest_34, train_labels_rest_35);
        DataSet validation_37 = Program.new_dataset(validation_images_32, validation_labels_33);
        DataSet testset_38 = Program.new_dataset(test_images_26, test_labels_31);
        return new Datasets{train = train_36, validation = validation_37, test_ds = testset_38};
    }

    public static void main() {
        long[][] train_images_39 = new long[][]{new long[]{0, 1}, new long[]{1, 2}, new long[]{2, 3}, new long[]{3, 4}, new long[]{4, 5}};
        long[] train_labels_raw_40 = new long[]{0, 1, 2, 3, 4};
        long[][] test_images_41 = new long[][]{new long[]{5, 6}, new long[]{6, 7}};
        long[] test_labels_raw_42 = new long[]{5, 6};
        Datasets data_43 = Program.read_data_sets(train_images_39, train_labels_raw_40, test_images_41, test_labels_raw_42, 2, 10);
        DataSet ds_44 = data_43.train;
        BatchResult res_45 = Program.next_batch(ds_44, 2);
        ds_44 = res_45.dataset;
        Console.WriteLine(Program._fmtTop(_fmtStr(res_45.images)));
        Console.WriteLine(Program._fmtTop(_fmtStr(res_45.labels)));
        res_45 = Program.next_batch(ds_44, 2);
        ds_44 = res_45.dataset;
        Console.WriteLine(Program._fmtTop(_fmtStr(res_45.images)));
        Console.WriteLine(Program._fmtTop(_fmtStr(res_45.labels)));
        res_45 = Program.next_batch(ds_44, 2);
        ds_44 = res_45.dataset;
        Console.WriteLine(Program._fmtTop(_fmtStr(res_45.images)));
        Console.WriteLine(Program._fmtTop(_fmtStr(res_45.labels)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
