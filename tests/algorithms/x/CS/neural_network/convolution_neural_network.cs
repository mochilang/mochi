// Generated by Mochi 0.10.73 (commit 9a917aab9f) on 2025-08-25 23:45 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class CNN {
    public double[][][] conv_kernels;
    public double[] conv_bias;
    public BigInteger conv_step;
    public BigInteger pool_size;
    public double[][] w_hidden;
    public double[][] w_out;
    public double[] b_hidden;
    public double[] b_out;
    public double rate_weight;
    public double rate_bias;
    public override string ToString() => $"CNN {{conv_kernels = {conv_kernels}, conv_bias = {conv_bias}, conv_step = {conv_step}, pool_size = {pool_size}, w_hidden = {w_hidden}, w_out = {w_out}, b_hidden = {b_hidden}, b_out = {b_out}, rate_weight = {rate_weight.ToString("0.0")}, rate_bias = {rate_bias.ToString("0.0")}}}";
}
class TrainSample {
    public double[][] image;
    public double[] target;
    public override string ToString() => $"TrainSample {{image = {image}, target = {target}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger seed_0 = 1;
    public static double random() {
        seed_0 = _mod(((seed_0 * 13) + 7), 100);
        return ((double)(seed_0) / 100.0);
    }

    public static double sigmoid(double x_1) {
        return (1.0 / (1.0 + Program.exp(-x_1)));
    }

    public static double to_float(BigInteger x_2) {
        return ((double)(x_2) * 1.0);
    }

    public static double exp(double x_3) {
        return Math.Exp(x_3);
    }

    public static double[][] convolve(double[][] data_7, double[][] kernel_8, BigInteger step_9, double bias_10) {
        long size_data_11 = data_7.Length;
        long size_kernel_12 = kernel_8.Length;
        double[][] out_13 = new double[][]{};
        BigInteger i_14 = 0;
        while ((i_14 <= (size_data_11 - size_kernel_12))) {
            double[] row_15 = new double[]{};
            BigInteger j_16 = 0;
            while ((j_16 <= (size_data_11 - size_kernel_12))) {
                double sum_17 = 0.0;
                BigInteger a_18 = 0;
                while ((a_18 < size_kernel_12)) {
                    BigInteger b_19 = 0;
                    while ((b_19 < size_kernel_12)) {
                        sum_17 = (sum_17 + (_idx(_idx(data_7, (long)((i_14 + a_18))), (long)((j_16 + b_19))) * _idx(_idx(kernel_8, (long)(a_18)), (long)(b_19))));
                        b_19 = (b_19 + 1);
                    }
                    a_18 = (a_18 + 1);
                }
                row_15 = Enumerable.ToArray(row_15.Append(Program.sigmoid((sum_17 - bias_10))));
                j_16 = (j_16 + step_9);
            }
            out_13 = Enumerable.ToArray(out_13.Append(row_15));
            i_14 = (i_14 + step_9);
        };
        return out_13;
    }

    public static double[][] average_pool(double[][] map_20, BigInteger size_21) {
        double[][] out_22 = new double[][]{};
        BigInteger i_23 = 0;
        while ((i_23 < map_20.Length)) {
            double[] row_24 = new double[]{};
            BigInteger j_25 = 0;
            while ((j_25 < _idx(map_20, (long)(i_23)).Length)) {
                double sum_26 = 0.0;
                BigInteger a_27 = 0;
                while ((a_27 < size_21)) {
                    BigInteger b_28 = 0;
                    while ((b_28 < size_21)) {
                        sum_26 = (sum_26 + _idx(_idx(map_20, (long)((i_23 + a_27))), (long)((j_25 + b_28))));
                        b_28 = (b_28 + 1);
                    }
                    a_27 = (a_27 + 1);
                }
                row_24 = Enumerable.ToArray(row_24.Append((sum_26 / (double)((size_21 * size_21)))));
                j_25 = (j_25 + size_21);
            }
            out_22 = Enumerable.ToArray(out_22.Append(row_24));
            i_23 = (i_23 + size_21);
        };
        return out_22;
    }

    public static double[] flatten(double[][][] maps_29) {
        double[] out_30 = new double[]{};
        BigInteger i_31 = 0;
        while ((i_31 < maps_29.Length)) {
            BigInteger j_32 = 0;
            while ((j_32 < _idx(maps_29, (long)(i_31)).Length)) {
                BigInteger k_33 = 0;
                while ((k_33 < _idx(_idx(maps_29, (long)(i_31)), (long)(j_32)).Length)) {
                    out_30 = Enumerable.ToArray(out_30.Append(_idx(_idx(_idx(maps_29, (long)(i_31)), (long)(j_32)), (long)(k_33))));
                    k_33 = (k_33 + 1);
                }
                j_32 = (j_32 + 1);
            }
            i_31 = (i_31 + 1);
        };
        return out_30;
    }

    public static double[] vec_mul_mat(double[] v_34, double[][] m_35) {
        BigInteger cols_36 = _idx(m_35, (long)(0)).Length;
        double[] res_37 = new double[]{};
        BigInteger j_38 = 0;
        while ((j_38 < cols_36)) {
            double sum_39 = 0.0;
            BigInteger i_40 = 0;
            while ((i_40 < v_34.Length)) {
                sum_39 = (sum_39 + (_idx(v_34, (long)(i_40)) * _idx(_idx(m_35, (long)(i_40)), (long)(j_38))));
                i_40 = (i_40 + 1);
            }
            res_37 = Enumerable.ToArray(res_37.Append(sum_39));
            j_38 = (j_38 + 1);
        };
        return res_37;
    }

    public static double[] matT_vec_mul(double[][] m_41, double[] v_42) {
        double[] res_43 = new double[]{};
        BigInteger i_44 = 0;
        while ((i_44 < m_41.Length)) {
            double sum_45 = 0.0;
            BigInteger j_46 = 0;
            while ((j_46 < _idx(m_41, (long)(i_44)).Length)) {
                sum_45 = (sum_45 + (_idx(_idx(m_41, (long)(i_44)), (long)(j_46)) * _idx(v_42, (long)(j_46))));
                j_46 = (j_46 + 1);
            }
            res_43 = Enumerable.ToArray(res_43.Append(sum_45));
            i_44 = (i_44 + 1);
        };
        return res_43;
    }

    public static double[] vec_add(double[] a_47, double[] b_48) {
        double[] res_49 = new double[]{};
        BigInteger i_50 = 0;
        while ((i_50 < a_47.Length)) {
            res_49 = Enumerable.ToArray(res_49.Append((_idx(a_47, (long)(i_50)) + _idx(b_48, (long)(i_50)))));
            i_50 = (i_50 + 1);
        };
        return res_49;
    }

    public static double[] vec_sub(double[] a_51, double[] b_52) {
        double[] res_53 = new double[]{};
        BigInteger i_54 = 0;
        while ((i_54 < a_51.Length)) {
            res_53 = Enumerable.ToArray(res_53.Append((_idx(a_51, (long)(i_54)) - _idx(b_52, (long)(i_54)))));
            i_54 = (i_54 + 1);
        };
        return res_53;
    }

    public static double[] vec_mul(double[] a_55, double[] b_56) {
        double[] res_57 = new double[]{};
        BigInteger i_58 = 0;
        while ((i_58 < a_55.Length)) {
            res_57 = Enumerable.ToArray(res_57.Append((_idx(a_55, (long)(i_58)) * _idx(b_56, (long)(i_58)))));
            i_58 = (i_58 + 1);
        };
        return res_57;
    }

    public static double[] vec_map_sig(double[] v_59) {
        double[] res_60 = new double[]{};
        BigInteger i_61 = 0;
        while ((i_61 < v_59.Length)) {
            res_60 = Enumerable.ToArray(res_60.Append(Program.sigmoid(_idx(v_59, (long)(i_61)))));
            i_61 = (i_61 + 1);
        };
        return res_60;
    }

    public static CNN new_cnn() {
        double[][] k1_62 = new double[][]{new double[]{1.0, 0.0}, new double[]{0.0, 1.0}};
        double[][] k2_63 = new double[][]{new double[]{0.0, 1.0}, new double[]{1.0, 0.0}};
        double[][][] conv_kernels_64 = new double[][][]{k1_62, k2_63};
        double[] conv_bias_65 = new double[]{0.0, 0.0};
        BigInteger conv_step_66 = 2;
        BigInteger pool_size_67 = 2;
        BigInteger input_size_68 = 2;
        BigInteger hidden_size_69 = 2;
        BigInteger output_size_70 = 2;
        double[][] w_hidden_71 = new double[][]{};
        BigInteger i_72 = 0;
        while ((i_72 < input_size_68)) {
            double[] row_73 = new double[]{};
            BigInteger j_74 = 0;
            while ((j_74 < hidden_size_69)) {
                row_73 = Enumerable.ToArray(row_73.Append((Program.random() - 0.5)));
                j_74 = (j_74 + 1);
            }
            w_hidden_71 = Enumerable.ToArray(w_hidden_71.Append(row_73));
            i_72 = (i_72 + 1);
        };
        double[][] w_out_75 = new double[][]{};
        i_72 = 0;
        while ((i_72 < hidden_size_69)) {
            double[] row_76 = new double[]{};
            BigInteger j_77 = 0;
            while ((j_77 < output_size_70)) {
                row_76 = Enumerable.ToArray(row_76.Append((Program.random() - 0.5)));
                j_77 = (j_77 + 1);
            }
            w_out_75 = Enumerable.ToArray(w_out_75.Append(row_76));
            i_72 = (i_72 + 1);
        };
        double[] b_hidden_78 = new double[]{0.0, 0.0};
        double[] b_out_79 = new double[]{0.0, 0.0};
        return new CNN{conv_kernels = conv_kernels_64, conv_bias = conv_bias_65, conv_step = conv_step_66, pool_size = pool_size_67, w_hidden = w_hidden_71, w_out = w_out_75, b_hidden = b_hidden_78, b_out = b_out_79, rate_weight = 0.2, rate_bias = 0.2};
    }

    public static double[] forward(CNN cnn_80, double[][] data_81) {
        double[][][] maps_82 = new double[][][]{};
        BigInteger i_83 = 0;
        while ((i_83 < cnn_80.conv_kernels.Length)) {
            double[][] conv_map_84 = Program.convolve(data_81, _idx(cnn_80.conv_kernels, (long)(i_83)), cnn_80.conv_step, _idx(cnn_80.conv_bias, (long)(i_83)));
            double[][] pooled_85 = Program.average_pool(conv_map_84, cnn_80.pool_size);
            maps_82 = Enumerable.ToArray(maps_82.Append(pooled_85));
            i_83 = (i_83 + 1);
        };
        double[] flat_86 = Program.flatten(maps_82);
        double[] hidden_net_87 = Program.vec_add(Program.vec_mul_mat(flat_86, cnn_80.w_hidden), cnn_80.b_hidden);
        double[] hidden_out_88 = Program.vec_map_sig(hidden_net_87);
        double[] out_net_89 = Program.vec_add(Program.vec_mul_mat(hidden_out_88, cnn_80.w_out), cnn_80.b_out);
        double[] out_90 = Program.vec_map_sig(out_net_89);
        return out_90;
    }

    public static CNN train(CNN cnn_91, TrainSample[] samples_92, BigInteger epochs_93) {
        double[][] w_out_94 = cnn_91.w_out;
        double[] b_out_95 = cnn_91.b_out;
        double[][] w_hidden_96 = cnn_91.w_hidden;
        double[] b_hidden_97 = cnn_91.b_hidden;
        BigInteger e_98 = 0;
        while ((e_98 < epochs_93)) {
            BigInteger s_99 = 0;
            while ((s_99 < samples_92.Length)) {
                double[][] data_100 = _idx(samples_92, (long)(s_99)).image;
                double[] target_101 = _idx(samples_92, (long)(s_99)).target;
                double[][][] maps_102 = new double[][][]{};
                BigInteger i_103 = 0;
                while ((i_103 < cnn_91.conv_kernels.Length)) {
                    double[][] conv_map_104 = Program.convolve(data_100, _idx(cnn_91.conv_kernels, (long)(i_103)), cnn_91.conv_step, _idx(cnn_91.conv_bias, (long)(i_103)));
                    double[][] pooled_105 = Program.average_pool(conv_map_104, cnn_91.pool_size);
                    maps_102 = Enumerable.ToArray(maps_102.Append(pooled_105));
                    i_103 = (i_103 + 1);
                }
                double[] flat_106 = Program.flatten(maps_102);
                double[] hidden_net_107 = Program.vec_add(Program.vec_mul_mat(flat_106, w_hidden_96), b_hidden_97);
                double[] hidden_out_108 = Program.vec_map_sig(hidden_net_107);
                double[] out_net_109 = Program.vec_add(Program.vec_mul_mat(hidden_out_108, w_out_94), b_out_95);
                double[] out_110 = Program.vec_map_sig(out_net_109);
                double[] error_out_111 = Program.vec_sub(target_101, out_110);
                double[] pd_out_112 = Program.vec_mul(error_out_111, Program.vec_mul(out_110, Program.vec_sub(new double[]{1.0, 1.0}, out_110)));
                double[] error_hidden_113 = Program.matT_vec_mul(w_out_94, pd_out_112);
                double[] pd_hidden_114 = Program.vec_mul(error_hidden_113, Program.vec_mul(hidden_out_108, Program.vec_sub(new double[]{1.0, 1.0}, hidden_out_108)));
                BigInteger j_115 = 0;
                while ((j_115 < w_out_94.Length)) {
                    BigInteger k_116 = 0;
                    while ((k_116 < _idx(w_out_94, (long)(j_115)).Length)) {
                        _idx(w_out_94, (long)(j_115))[(int)(k_116)] = (_idx(_idx(w_out_94, (long)(j_115)), (long)(k_116)) + ((cnn_91.rate_weight * _idx(hidden_out_108, (long)(j_115))) * _idx(pd_out_112, (long)(k_116))));
                        k_116 = (k_116 + 1);
                    }
                    j_115 = (j_115 + 1);
                }
                j_115 = 0;
                while ((j_115 < b_out_95.Length)) {
                    b_out_95[(int)(j_115)] = (_idx(b_out_95, (long)(j_115)) - (cnn_91.rate_bias * _idx(pd_out_112, (long)(j_115))));
                    j_115 = (j_115 + 1);
                }
                BigInteger i_h_117 = 0;
                while ((i_h_117 < w_hidden_96.Length)) {
                    BigInteger j_h_118 = 0;
                    while ((j_h_118 < _idx(w_hidden_96, (long)(i_h_117)).Length)) {
                        _idx(w_hidden_96, (long)(i_h_117))[(int)(j_h_118)] = (_idx(_idx(w_hidden_96, (long)(i_h_117)), (long)(j_h_118)) + ((cnn_91.rate_weight * _idx(flat_106, (long)(i_h_117))) * _idx(pd_hidden_114, (long)(j_h_118))));
                        j_h_118 = (j_h_118 + 1);
                    }
                    i_h_117 = (i_h_117 + 1);
                }
                j_115 = 0;
                while ((j_115 < b_hidden_97.Length)) {
                    b_hidden_97[(int)(j_115)] = (_idx(b_hidden_97, (long)(j_115)) - (cnn_91.rate_bias * _idx(pd_hidden_114, (long)(j_115))));
                    j_115 = (j_115 + 1);
                }
                s_99 = (s_99 + 1);
            }
            e_98 = (e_98 + 1);
        };
        return new CNN{conv_kernels = cnn_91.conv_kernels, conv_bias = cnn_91.conv_bias, conv_step = cnn_91.conv_step, pool_size = cnn_91.pool_size, w_hidden = w_hidden_96, w_out = w_out_94, b_hidden = b_hidden_97, b_out = b_out_95, rate_weight = cnn_91.rate_weight, rate_bias = cnn_91.rate_bias};
    }

    public static void main() {
        CNN cnn_119 = Program.new_cnn();
        double[][] image_120 = new double[][]{new double[]{1.0, 0.0, 1.0, 0.0}, new double[]{0.0, 1.0, 0.0, 1.0}, new double[]{1.0, 0.0, 1.0, 0.0}, new double[]{0.0, 1.0, 0.0, 1.0}};
        TrainSample sample_121 = new TrainSample{image = image_120, target = new double[]{1.0, 0.0}};
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Before training:"), Program._fmtTop(Program.forward(cnn_119, image_120))}));
        CNN trained_122 = Program.train(cnn_119, new TrainSample[]{sample_121}, 50);
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("After training:"), Program._fmtTop(Program.forward(trained_122, image_120))}));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
