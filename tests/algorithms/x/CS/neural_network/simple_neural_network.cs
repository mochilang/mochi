// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_0 = 1;
    static double INITIAL_VALUE_11 = 0.02;
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return seed_0;
    }

    public static long randint(long low_1, long high_2) {
        return (_mod(Program.rand(), ((high_2 - low_1) + 1)) + low_1);
    }

    public static double expApprox(double x_3) {
        double y_4 = x_3;
        bool is_neg_5 = false;
        if ((x_3 < 0.0)) {
            is_neg_5 = true;
            y_4 = -x_3;
        };
        double term_6 = 1.0;
        double sum_7 = 1.0;
        long n_8 = 1;
        while ((n_8 < 30)) {
            term_6 = ((term_6 * y_4) / Convert.ToDouble(n_8));
            sum_7 = (sum_7 + term_6);
            n_8 = (n_8 + 1);
        };
        if (is_neg_5) {
            return (1.0 / sum_7);
        };
        return sum_7;
    }

    public static double sigmoid(double x_9) {
        return (1.0 / (1.0 + Program.expApprox(-x_9)));
    }

    public static double sigmoid_derivative(double sig_val_10) {
        return (sig_val_10 * (1.0 - sig_val_10));
    }

    public static double forward_propagation(long expected_12, long number_propagations_13) {
        double weight_14 = ((2.0 * Convert.ToDouble(Program.randint(1, 100))) - 1.0);
        double layer_1_15 = 0.0;
        long i_16 = 0;
        while ((i_16 < number_propagations_13)) {
            layer_1_15 = Program.sigmoid((INITIAL_VALUE_11 * weight_14));
            double layer_1_error_17 = ((Convert.ToDouble(expected_12) / 100.0) - layer_1_15);
            double layer_1_delta_18 = (layer_1_error_17 * Program.sigmoid_derivative(layer_1_15));
            weight_14 = (weight_14 + (INITIAL_VALUE_11 * layer_1_delta_18));
            i_16 = (i_16 + 1);
        };
        return (layer_1_15 * 100.0);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            seed_0 = 1;
            double result_19 = Program.forward_propagation(32, 450000);
            Console.WriteLine(Program._fmtTop(result_19));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
