// Generated by Mochi 0.10.73 (commit 9a917aab9f) on 2025-08-25 23:45 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    public static double exp(double x_0) {
        return Math.Exp(x_0);
    }

    public static double[] soboleva_modified_hyperbolic_tangent(double[] vector_4, double a_value_5, double b_value_6, double c_value_7, double d_value_8) {
        double[] result_9 = new double[]{};
        BigInteger i_10 = 0;
        while ((i_10 < vector_4.Length)) {
            double x_11 = _idx(vector_4, (long)(i_10));
            double numerator_12 = (Program.exp((a_value_5 * x_11)) - Program.exp((-b_value_6 * x_11)));
            double denominator_13 = (Program.exp((c_value_7 * x_11)) + Program.exp((-d_value_8 * x_11)));
            result_9 = Enumerable.ToArray(result_9.Append((numerator_12 / denominator_13)));
            i_10 = (i_10 + 1);
        };
        return result_9;
    }

    public static void main() {
        double[] vector_14 = new double[]{5.4, -2.4, 6.3, -5.23, 3.27, 0.56};
        double[] res_15 = Program.soboleva_modified_hyperbolic_tangent(vector_14, 0.2, 0.4, 0.6, 0.8);
        Console.WriteLine(JsonSerializer.Serialize(res_15));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
