// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double exp_approx(double x_0) {
        bool neg_1 = false;
        double y_2 = x_0;
        if ((x_0 < 0.0)) {
            neg_1 = true;
            y_2 = -x_0;
        };
        double term_3 = 1.0;
        double sum_4 = 1.0;
        long n_5 = 1;
        while ((n_5 < 30)) {
            term_3 = ((term_3 * y_2) / Convert.ToDouble(n_5));
            sum_4 = (sum_4 + term_3);
            n_5 = (n_5 + 1);
        };
        if (neg_1) {
            return (1.0 / sum_4);
        };
        return sum_4;
    }

    public static double ln_series(double x_6) {
        double t_7 = ((x_6 - 1.0) / (x_6 + 1.0));
        double term_8 = t_7;
        double acc_9 = 0.0;
        long n_10 = 1;
        while ((n_10 <= 19)) {
            acc_9 = (acc_9 + (term_8 / Convert.ToDouble(n_10)));
            term_8 = ((term_8 * t_7) * t_7);
            n_10 = (n_10 + 2);
        };
        return (2.0 * acc_9);
    }

    public static double ln(double x_11) {
        double y_12 = x_11;
        long k_13 = 0;
        while ((y_12 >= 10.0)) {
            y_12 = (y_12 / 10.0);
            k_13 = (k_13 + 1);
        };
        while ((y_12 < 1.0)) {
            y_12 = (y_12 * 10.0);
            k_13 = (k_13 - 1);
        };
        return (Program.ln_series(y_12) + (Convert.ToDouble(k_13) * Program.ln_series(10.0)));
    }

    public static double softplus(double x_14) {
        return Program.ln((1.0 + Program.exp_approx(x_14)));
    }

    public static double tanh_approx(double x_15) {
        return ((2.0 / (1.0 + Program.exp_approx((-2.0 * x_15)))) - 1.0);
    }

    public static double[] mish(double[] vector_16) {
        double[] result_17 = new double[]{};
        long i_18 = 0;
        while ((i_18 < vector_16.Length)) {
            double x_19 = _idx(vector_16, i_18);
            double sp_20 = Program.softplus(x_19);
            double y_21 = (x_19 * Program.tanh_approx(sp_20));
            result_17 = ((Func<double[]>)(() => { var _tmp = result_17.ToList(); _tmp.Add(y_21); return _tmp.ToArray(); }))();
            i_18 = (i_18 + 1);
        };
        return result_17;
    }

    public static void main() {
        double[] v1_22 = new double[]{2.3, 0.6, -2.0, -3.8};
        double[] v2_23 = new double[]{-9.2, -0.3, 0.45, -4.56};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mish(v1_22))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mish(v2_23))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
