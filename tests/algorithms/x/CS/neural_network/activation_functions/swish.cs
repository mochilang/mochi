// Generated by Mochi 0.10.64 (commit 0529231fcf) on 2025-08-12 11:18 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double exp_approx(double x_0) {
        double sum_1 = 1.0;
        double term_2 = 1.0;
        long i_3 = 1;
        while ((i_3 <= 20)) {
            term_2 = ((term_2 * x_0) / Convert.ToDouble(i_3));
            sum_1 = (sum_1 + term_2);
            i_3 = (i_3 + 1);
        };
        return sum_1;
    }

    public static double[] sigmoid(double[] vector_4) {
        double[] result_5 = new double[]{};
        long i_6 = 0;
        while ((i_6 < vector_4.Length)) {
            double v_7 = _idx(vector_4, i_6);
            double s_8 = (1.0 / (1.0 + Program.exp_approx(-v_7)));
            result_5 = (Enumerable.ToArray(Enumerable.Append<double>(result_5, s_8)));
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static double[] swish(double[] vector_9, double beta_10) {
        double[] result_11 = new double[]{};
        long i_12 = 0;
        while ((i_12 < vector_9.Length)) {
            double v_13 = _idx(vector_9, i_12);
            double s_14 = (1.0 / (1.0 + Program.exp_approx((-beta_10 * v_13))));
            result_11 = (Enumerable.ToArray(Enumerable.Append<double>(result_11, (v_13 * s_14))));
            i_12 = (i_12 + 1);
        };
        return result_11;
    }

    public static double[] sigmoid_linear_unit(double[] vector_15) {
        return Program.swish(vector_15, 1.0);
    }

    public static bool approx_equal(double a_16, double b_17, double eps_18) {
        double diff_19 = ((a_16 > b_17) ? (a_16 - b_17) : (b_17 - a_16));
        return (diff_19 < eps_18);
    }

    public static bool approx_equal_list(double[] a_20, double[] b_21, double eps_22) {
        if ((a_20.Length != b_21.Length)) {
            return false;
        };
        long i_23 = 0;
        while ((i_23 < a_20.Length)) {
            if ((!Program.approx_equal(_idx(a_20, i_23), _idx(b_21, i_23), eps_22))) {
                return false;
            }
            i_23 = (i_23 + 1);
        };
        return true;
    }

    public static void test_swish() {
        double[] v_24 = new double[]{-1.0, 1.0, 2.0};
        double eps_25 = 0.001;
        if ((!Program.approx_equal_list(Program.sigmoid(v_24), new double[]{0.26894142, 0.73105858, 0.88079708}, eps_25))) {
            throw new Exception("sigmoid incorrect");
        };
        if ((!Program.approx_equal_list(Program.sigmoid_linear_unit(v_24), new double[]{-0.26894142, 0.73105858, 1.76159416}, eps_25))) {
            throw new Exception("sigmoid_linear_unit incorrect");
        };
        if ((!Program.approx_equal_list(Program.swish(v_24, 2.0), new double[]{-0.11920292, 0.88079708, 1.96402758}, eps_25))) {
            throw new Exception("swish incorrect");
        };
        if ((!Program.approx_equal_list(Program.swish(new double[]{-2.0}, 1.0), new double[]{-0.23840584}, eps_25))) {
            throw new Exception("swish with parameter 1 incorrect");
        };
    }

    public static void main() {
        Program.test_swish();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.sigmoid(new double[]{-1.0, 1.0, 2.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.sigmoid_linear_unit(new double[]{-1.0, 1.0, 2.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.swish(new double[]{-1.0, 1.0, 2.0}, 2.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.swish(new double[]{-2.0}, 1.0))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
