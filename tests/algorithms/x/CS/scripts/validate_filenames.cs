// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long indexOf(string s_0, string sub_1) {
        long n_2 = s_0.Length;
        long m_3 = sub_1.Length;
        long i_4 = 0;
        while ((i_4 <= (n_2 - m_3))) {
            if ((_substr(s_0, i_4, (i_4 + m_3)) == sub_1)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    public static bool contains(string s_5, string sub_6) {
        return (Program.indexOf(s_5, sub_6) >= 0);
    }

    public static long validate(string[] files_7) {
        string[] upper_8 = new string[]{};
        string[] space_9 = new string[]{};
        string[] hyphen_10 = new string[]{};
        string[] nodir_11 = new string[]{};
        foreach (string f_12 in files_7) {
            if ((f_12 != f_12.ToLower())) {
                upper_8 = (Enumerable.ToArray(Enumerable.Append<string>(upper_8, f_12)));
            }
            if (Program.contains(f_12, " ")) {
                space_9 = (Enumerable.ToArray(Enumerable.Append<string>(space_9, f_12)));
            }
            if ((Program.contains(f_12, "-") && (Program.contains(f_12, "/site-packages/") == false))) {
                hyphen_10 = (Enumerable.ToArray(Enumerable.Append<string>(hyphen_10, f_12)));
            }
            if ((!Program.contains(f_12, "/"))) {
                nodir_11 = (Enumerable.ToArray(Enumerable.Append<string>(nodir_11, f_12)));
            }
        };
        if ((upper_8.Length > 0)) {
            Console.WriteLine(Program._fmtTop((_fmtStr(upper_8.Length) + " files contain uppercase characters:")));
            foreach (string f_13 in upper_8) {
                Console.WriteLine(Program._fmtTop(f_13));
            }
            Console.WriteLine(Program._fmtTop(""));
        };
        if ((space_9.Length > 0)) {
            Console.WriteLine(Program._fmtTop((_fmtStr(space_9.Length) + " files contain space characters:")));
            foreach (string f_14 in space_9) {
                Console.WriteLine(Program._fmtTop(f_14));
            }
            Console.WriteLine(Program._fmtTop(""));
        };
        if ((hyphen_10.Length > 0)) {
            Console.WriteLine(Program._fmtTop((_fmtStr(hyphen_10.Length) + " files contain hyphen characters:")));
            foreach (string f_15 in hyphen_10) {
                Console.WriteLine(Program._fmtTop(f_15));
            }
            Console.WriteLine(Program._fmtTop(""));
        };
        if ((nodir_11.Length > 0)) {
            Console.WriteLine(Program._fmtTop((_fmtStr(nodir_11.Length) + " files are not in a directory:")));
            foreach (string f_16 in nodir_11) {
                Console.WriteLine(Program._fmtTop(f_16));
            }
            Console.WriteLine(Program._fmtTop(""));
        };
        return (((upper_8.Length + space_9.Length) + hyphen_10.Length) + nodir_11.Length);
    }

    public static void main() {
        string[] files_17 = new string[]{"scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py"};
        long bad_18 = Program.validate(files_17);
        Console.WriteLine(Program._fmtTop(_fmtStr(bad_18)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
