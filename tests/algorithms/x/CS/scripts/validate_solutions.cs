// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Security.Cryptography;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long[] _sha256(long[] bs) {
        using var sha = System.Security.Cryptography.SHA256.Create();
        var bytes = new byte[bs.Length];
        for (int i = 0; i < bs.Length; i++) bytes[i] = (byte)bs[i];
        var hash = sha.ComputeHash(bytes);
        var res = new long[hash.Length];
        for (int i = 0; i < hash.Length; i++) res[i] = hash[i];
        return res;
    }
    static long[] _sha256(string s) {
        using var sha = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(s);
        var hash = sha.ComputeHash(bytes);
        var res = new long[hash.Length];
        for (int i = 0; i < hash.Length; i++) res[i] = hash[i];
        return res;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string HEX_0 = "0123456789abcdef";
    static string expected_10 = Program.sha256_hex("233168");
    static string answer_11 = Program.solution_001();
    static string computed_12 = Program.sha256_hex(answer_11);
    public static string byte_to_hex(long b_1) {
        long hi_2 = (b_1 / 16);
        long lo_3 = _mod(b_1, 16);
        return (HEX_0.Substring((int)(hi_2), 1) + HEX_0.Substring((int)(lo_3), 1));
    }

    public static string bytes_to_hex(long[] bs_4) {
        string res_5 = "";
        long i_6 = 0;
        while ((i_6 < bs_4.Length)) {
            res_5 = (res_5 + Program.byte_to_hex(bs_4[(int)(i_6)]));
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static string sha256_hex(string s_7) {
        return Program.bytes_to_hex(_sha256(s_7));
    }

    public static string solution_001() {
        long total_8 = 0;
        long n_9 = 0;
        while ((n_9 < 1000)) {
            if (((_mod(n_9, 3) == 0) || (_mod(n_9, 5) == 0))) {
                total_8 = (total_8 + n_9);
            }
            n_9 = (n_9 + 1);
        };
        return _fmtStr(total_8);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if ((computed_12 == expected_10)) {
                Console.WriteLine(Program._fmtTop("Problem 001 passed"));
            } else {
                Console.WriteLine(Program._fmtTop(((("Problem 001 failed: " + computed_12) + " != ") + expected_10)));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
