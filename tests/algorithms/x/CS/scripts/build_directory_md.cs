// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] sample_68 = new string[]{"data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"};
    public static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((i_4 + sep_1.Length) <= s_0.Length)) && (_substr(s_0, i_4, (i_4 + sep_1.Length)) == sep_1))) {
                parts_2 = (Enumerable.ToArray(Enumerable.Append<string>(parts_2, cur_3)));
                cur_3 = "";
                i_4 = (i_4 + sep_1.Length);
            } else {
                cur_3 = (cur_3 + _substr(s_0, i_4, (i_4 + 1)));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = (Enumerable.ToArray(Enumerable.Append<string>(parts_2, cur_3)));
        return parts_2;
    }

    public static string join(string[] xs_5, string sep_6) {
        string res_7 = "";
        long i_8 = 0;
        while ((i_8 < xs_5.Length)) {
            if ((i_8 > 0)) {
                res_7 = (res_7 + sep_6);
            }
            res_7 = (res_7 + xs_5[(int)(i_8)]);
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static string repeat(string s_9, long n_10) {
        string out_11 = "";
        long i_12 = 0;
        while ((i_12 < n_10)) {
            out_11 = (out_11 + s_9);
            i_12 = (i_12 + 1);
        };
        return out_11;
    }

    public static string replace_char(string s_13, string old_14, string new_15) {
        string out_16 = "";
        long i_17 = 0;
        while ((i_17 < s_13.Length)) {
            string c_18 = _substr(s_13, i_17, (i_17 + 1));
            if ((c_18 == old_14)) {
                out_16 = (out_16 + new_15);
            } else {
                out_16 = (out_16 + c_18);
            }
            i_17 = (i_17 + 1);
        };
        return out_16;
    }

    public static bool contains(string s_19, string sub_20) {
        if ((sub_20.Length == 0)) {
            return true;
        };
        long i_21 = 0;
        while (((i_21 + sub_20.Length) <= s_19.Length)) {
            if ((_substr(s_19, i_21, (i_21 + sub_20.Length)) == sub_20)) {
                return true;
            }
            i_21 = (i_21 + 1);
        };
        return false;
    }

    public static string file_extension(string name_22) {
        long i_23 = (name_22.Length - 1);
        while ((i_23 >= 0)) {
            if ((_substr(name_22, i_23, (i_23 + 1)) == ".")) {
                return _substr(name_22, i_23, name_22.Length);
            }
            i_23 = (i_23 - 1);
        };
        return "";
    }

    public static string remove_extension(string name_24) {
        long i_25 = (name_24.Length - 1);
        while ((i_25 >= 0)) {
            if ((_substr(name_24, i_25, (i_25 + 1)) == ".")) {
                return _substr(name_24, 0, i_25);
            }
            i_25 = (i_25 - 1);
        };
        return name_24;
    }

    public static string title_case(string s_26) {
        string out_27 = "";
        bool cap_28 = true;
        long i_29 = 0;
        while ((i_29 < s_26.Length)) {
            string c_30 = _substr(s_26, i_29, (i_29 + 1));
            if ((c_30 == " ")) {
                out_27 = (out_27 + c_30);
                cap_28 = true;
            } else if (cap_28) {
                out_27 = (out_27 + c_30.ToUpper());
                cap_28 = false;
            } else {
                out_27 = (out_27 + c_30.ToLower());
            }
            i_29 = (i_29 + 1);
        };
        return out_27;
    }

    public static long count_char(string s_31, string ch_32) {
        long cnt_33 = 0;
        long i_34 = 0;
        while ((i_34 < s_31.Length)) {
            if ((_substr(s_31, i_34, (i_34 + 1)) == ch_32)) {
                cnt_33 = (cnt_33 + 1);
            }
            i_34 = (i_34 + 1);
        };
        return cnt_33;
    }

    public static string md_prefix(long level_35) {
        if ((level_35 == 0)) {
            return "\n##";
        };
        return (Program.repeat("  ", level_35) + "*");
    }

    public static string print_path(string old_path_36, string new_path_37) {
        string[] old_parts_38 = Program.split(old_path_36, "/");
        string[] new_parts_39 = Program.split(new_path_37, "/");
        long i_40 = 0;
        while ((i_40 < new_parts_39.Length)) {
            if ((((i_40 >= old_parts_38.Length) || (old_parts_38[(int)(i_40)] != new_parts_39[(int)(i_40)])) && (new_parts_39[(int)(i_40)] != ""))) {
                string title_41 = Program.title_case(Program.replace_char(new_parts_39[(int)(i_40)], "_", " "));
                Console.WriteLine(Program._fmtTop(((Program.md_prefix(i_40) + " ") + title_41)));
            }
            i_40 = (i_40 + 1);
        };
        return new_path_37;
    }

    public static string[] sort_strings(string[] xs_42) {
        string[] arr_43 = xs_42;
        long i_44 = 0;
        while ((i_44 < arr_43.Length)) {
            long min_idx_45 = i_44;
            long j_46 = (i_44 + 1);
            while ((j_46 < arr_43.Length)) {
                if ((string.Compare(arr_43[(int)(j_46)], arr_43[(int)(min_idx_45)]) < 0)) {
                    min_idx_45 = j_46;
                }
                j_46 = (j_46 + 1);
            }
            string tmp_47 = arr_43[(int)(i_44)];
            arr_43[i_44] = arr_43[(int)(min_idx_45)];
            arr_43[min_idx_45] = tmp_47;
            i_44 = (i_44 + 1);
        };
        return arr_43;
    }

    public static string[] good_file_paths(string[] paths_48) {
        string[] res_49 = new string[]{};
        foreach (string p_50 in paths_48) {
            string[] parts_51 = Program.split(p_50, "/");
            bool skip_52 = false;
            long k_53 = 0;
            while ((k_53 < (parts_51.Length - 1))) {
                string part_54 = parts_51[(int)(k_53)];
                if (((((part_54 == "scripts") || (_substr(part_54, 0, 1) == ".")) || (_substr(part_54, 0, 1) == "_")) || Program.contains(part_54, "venv"))) {
                    skip_52 = true;
                }
                k_53 = (k_53 + 1);
            }
            if (skip_52) {
                continue;
            }
            string filename_55 = parts_51[(int)((parts_51.Length - 1))];
            if ((filename_55 == "__init__.py")) {
                continue;
            }
            string ext_56 = Program.file_extension(filename_55);
            if (((ext_56 == ".py") || (ext_56 == ".ipynb"))) {
                res_49 = (Enumerable.ToArray(Enumerable.Append<string>(res_49, p_50)));
            }
        };
        return res_49;
    }

    public static void print_directory_md(string[] paths_57) {
        string[] files_58 = Program.sort_strings(Program.good_file_paths(paths_57));
        string old_path_59 = "";
        long i_60 = 0;
        while ((i_60 < files_58.Length)) {
            string fp_61 = files_58[(int)(i_60)];
            string[] parts_62 = Program.split(fp_61, "/");
            string filename_63 = parts_62[(int)((parts_62.Length - 1))];
            string filepath_64 = "";
            if ((parts_62.Length > 1)) {
                filepath_64 = Program.join(_slice<string>(parts_62, 0, (parts_62.Length - 1)), "/");
            }
            if ((filepath_64 != old_path_59)) {
                old_path_59 = Program.print_path(old_path_59, filepath_64);
            }
            long indent_65 = 0;
            if ((filepath_64.Length > 0)) {
                indent_65 = (Program.count_char(filepath_64, "/") + 1);
            }
            string url_66 = Program.replace_char(fp_61, " ", "%20");
            string name_67 = Program.title_case(Program.replace_char(Program.remove_extension(filename_63), "_", " "));
            Console.WriteLine(Program._fmtTop((((((Program.md_prefix(indent_65) + " [") + name_67) + "](") + url_66) + ")")));
            i_60 = (i_60 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_directory_md(sample_68);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
