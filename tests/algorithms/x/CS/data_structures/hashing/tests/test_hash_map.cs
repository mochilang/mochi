// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Entry {
    public string key;
    public string value;
    public override string ToString() => $"Entry {{key = \"{key}\", value = \"{value}\"}}";
}
class HashMap {
    public Entry[] entries;
    public override string ToString() => $"HashMap {{entries = {entries}}}";
}
class GetResult {
    public bool found;
    public string value;
    public override string ToString() => $"GetResult {{found = {found}, value = \"{value}\"}}";
}
class DelResult {
    public HashMap map;
    public bool ok;
    public override string ToString() => $"DelResult {{map = {map}, ok = {ok}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static HashMap make_hash_map() {
        return new HashMap{entries = new Entry[]{}};
    }

    public static long hm_len(HashMap m_0) {
        return m_0.entries.Length;
    }

    public static HashMap hm_set(HashMap m_1, string key_2, string value_3) {
        Entry[] entries_4 = m_1.entries;
        bool updated_5 = false;
        Entry[] new_entries_6 = new Entry[]{};
        long i_7 = 0;
        while ((i_7 < entries_4.Length)) {
            Entry e_8 = entries_4[(int)(i_7)];
            if ((e_8.key == key_2)) {
                new_entries_6 = (Enumerable.ToArray(Enumerable.Append<Entry>(new_entries_6, new Entry{key = key_2, value = value_3})));
                updated_5 = true;
            } else {
                new_entries_6 = (Enumerable.ToArray(Enumerable.Append<Entry>(new_entries_6, e_8)));
            }
            i_7 = (i_7 + 1);
        };
        if ((!updated_5)) {
            new_entries_6 = (Enumerable.ToArray(Enumerable.Append<Entry>(new_entries_6, new Entry{key = key_2, value = value_3})));
        };
        return new HashMap{entries = new_entries_6};
    }

    public static GetResult hm_get(HashMap m_9, string key_10) {
        long i_11 = 0;
        while ((i_11 < m_9.entries.Length)) {
            Entry e_12 = m_9.entries[(int)(i_11)];
            if ((e_12.key == key_10)) {
                return new GetResult{found = true, value = e_12.value};
            }
            i_11 = (i_11 + 1);
        };
        return new GetResult{found = false, value = ""};
    }

    public static DelResult hm_del(HashMap m_13, string key_14) {
        Entry[] entries_15 = m_13.entries;
        Entry[] new_entries_16 = new Entry[]{};
        bool removed_17 = false;
        long i_18 = 0;
        while ((i_18 < entries_15.Length)) {
            Entry e_19 = entries_15[(int)(i_18)];
            if ((e_19.key == key_14)) {
                removed_17 = true;
            } else {
                new_entries_16 = (Enumerable.ToArray(Enumerable.Append<Entry>(new_entries_16, e_19)));
            }
            i_18 = (i_18 + 1);
        };
        if (removed_17) {
            return new DelResult{map = new HashMap{entries = new_entries_16}, ok = true};
        };
        return new DelResult{map = m_13, ok = false};
    }

    public static bool test_add_items() {
        HashMap h_20 = Program.make_hash_map();
        h_20 = Program.hm_set(h_20, "key_a", "val_a");
        h_20 = Program.hm_set(h_20, "key_b", "val_b");
        GetResult a_21 = Program.hm_get(h_20, "key_a");
        GetResult b_22 = Program.hm_get(h_20, "key_b");
        return (((((Program.hm_len(h_20) == 2) && a_21.found) && b_22.found) && (a_21.value == "val_a")) && (b_22.value == "val_b"));
    }

    public static bool test_overwrite_items() {
        HashMap h_23 = Program.make_hash_map();
        h_23 = Program.hm_set(h_23, "key_a", "val_a");
        h_23 = Program.hm_set(h_23, "key_a", "val_b");
        GetResult a_24 = Program.hm_get(h_23, "key_a");
        return (((Program.hm_len(h_23) == 1) && a_24.found) && (a_24.value == "val_b"));
    }

    public static bool test_delete_items() {
        HashMap h_25 = Program.make_hash_map();
        h_25 = Program.hm_set(h_25, "key_a", "val_a");
        h_25 = Program.hm_set(h_25, "key_b", "val_b");
        DelResult d1_26 = Program.hm_del(h_25, "key_a");
        h_25 = d1_26.map;
        DelResult d2_27 = Program.hm_del(h_25, "key_b");
        h_25 = d2_27.map;
        h_25 = Program.hm_set(h_25, "key_a", "val_a");
        DelResult d3_28 = Program.hm_del(h_25, "key_a");
        h_25 = d3_28.map;
        return (Program.hm_len(h_25) == 0);
    }

    public static bool test_access_absent_items() {
        HashMap h_29 = Program.make_hash_map();
        GetResult g1_30 = Program.hm_get(h_29, "key_a");
        DelResult d1_31 = Program.hm_del(h_29, "key_a");
        h_29 = d1_31.map;
        h_29 = Program.hm_set(h_29, "key_a", "val_a");
        DelResult d2_32 = Program.hm_del(h_29, "key_a");
        h_29 = d2_32.map;
        DelResult d3_33 = Program.hm_del(h_29, "key_a");
        h_29 = d3_33.map;
        GetResult g2_34 = Program.hm_get(h_29, "key_a");
        return ((((((g1_30.found == false) && (d1_31.ok == false)) && d2_32.ok) && (d3_33.ok == false)) && (g2_34.found == false)) && (Program.hm_len(h_29) == 0));
    }

    public static bool test_add_with_resize_up() {
        HashMap h_35 = Program.make_hash_map();
        long i_36 = 0;
        while ((i_36 < 5)) {
            string s_37 = _fmtStr(i_36);
            h_35 = Program.hm_set(h_35, s_37, s_37);
            i_36 = (i_36 + 1);
        };
        return (Program.hm_len(h_35) == 5);
    }

    public static bool test_add_with_resize_down() {
        HashMap h_38 = Program.make_hash_map();
        long i_39 = 0;
        while ((i_39 < 5)) {
            string s_40 = _fmtStr(i_39);
            h_38 = Program.hm_set(h_38, s_40, s_40);
            i_39 = (i_39 + 1);
        };
        long j_41 = 0;
        while ((j_41 < 5)) {
            string s_42 = _fmtStr(j_41);
            DelResult d_43 = Program.hm_del(h_38, s_42);
            h_38 = d_43.map;
            j_41 = (j_41 + 1);
        };
        h_38 = Program.hm_set(h_38, "key_a", "val_b");
        GetResult a_44 = Program.hm_get(h_38, "key_a");
        return (((Program.hm_len(h_38) == 1) && a_44.found) && (a_44.value == "val_b"));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.test_add_items()));
            Console.WriteLine(Program._fmtTop(Program.test_overwrite_items()));
            Console.WriteLine(Program._fmtTop(Program.test_delete_items()));
            Console.WriteLine(Program._fmtTop(Program.test_access_absent_items()));
            Console.WriteLine(Program._fmtTop(Program.test_add_with_resize_up()));
            Console.WriteLine(Program._fmtTop(Program.test_add_with_resize_down()));
            Console.WriteLine(Program._fmtTop(true));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
