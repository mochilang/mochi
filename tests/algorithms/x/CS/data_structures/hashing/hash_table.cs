// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class HashTable {
    public BigInteger size_table;
    public BigInteger[] values;
    public bool[] filled;
    public BigInteger charge_factor;
    public double lim_charge;
    public override string ToString() => $"HashTable {{size_table = {size_table}, values = {values}, filled = {filled}, charge_factor = {charge_factor}, lim_charge = {lim_charge.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] repeat_int(BigInteger n_0, BigInteger val_1) {
        BigInteger[] res_2 = new BigInteger[]{};
        BigInteger i_3 = 0;
        while ((i_3 < n_0)) {
            res_2 = ((Func<BigInteger[]>)(() => { var _tmp = res_2.Cast<BigInteger>().ToList(); _tmp.Add(val_1); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static bool[] repeat_bool(BigInteger n_4, bool val_5) {
        bool[] res_6 = new bool[]{};
        BigInteger i_7 = 0;
        while ((i_7 < n_4)) {
            res_6 = ((Func<bool[]>)(() => { var _tmp = res_6.Cast<bool>().ToList(); _tmp.Add(val_5); return _tmp.ToArray(); }))();
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static BigInteger[] set_int(BigInteger[] xs_8, BigInteger idx_9, BigInteger value_10) {
        BigInteger[] res_11 = new BigInteger[]{};
        BigInteger i_12 = 0;
        while ((i_12 < xs_8.Length)) {
            if ((i_12 == idx_9)) {
                res_11 = ((Func<BigInteger[]>)(() => { var _tmp = res_11.Cast<BigInteger>().ToList(); _tmp.Add(value_10); return _tmp.ToArray(); }))();
            } else {
                res_11 = ((Func<BigInteger[]>)(() => { var _tmp = res_11.Cast<BigInteger>().ToList(); _tmp.Add(_idx(xs_8, (long)(i_12))); return _tmp.ToArray(); }))();
            }
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static bool[] set_bool(bool[] xs_13, BigInteger idx_14, bool value_15) {
        bool[] res_16 = new bool[]{};
        BigInteger i_17 = 0;
        while ((i_17 < xs_13.Length)) {
            if ((i_17 == idx_14)) {
                res_16 = ((Func<bool[]>)(() => { var _tmp = res_16.Cast<bool>().ToList(); _tmp.Add(value_15); return _tmp.ToArray(); }))();
            } else {
                res_16 = ((Func<bool[]>)(() => { var _tmp = res_16.Cast<bool>().ToList(); _tmp.Add(_idx(xs_13, (long)(i_17))); return _tmp.ToArray(); }))();
            }
            i_17 = (i_17 + 1);
        };
        return res_16;
    }

    public static HashTable create_table(BigInteger size_table_18, BigInteger charge_factor_19, double lim_charge_20) {
        return new HashTable{size_table = size_table_18, values = Program.repeat_int(size_table_18, 0), filled = Program.repeat_bool(size_table_18, false), charge_factor = charge_factor_19, lim_charge = lim_charge_20};
    }

    public static BigInteger hash_function(HashTable ht_21, BigInteger key_22) {
        BigInteger k_23 = _mod(key_22, ht_21.size_table);
        if ((k_23 < 0)) {
            k_23 = (k_23 + ht_21.size_table);
        };
        return k_23;
    }

    public static bool is_prime(BigInteger n_24) {
        if ((n_24 < 2)) {
            return false;
        };
        if ((_mod(n_24, 2) == 0)) {
            return (n_24 == 2);
        };
        BigInteger i_25 = 3;
        while (((i_25 * i_25) <= n_24)) {
            if ((_mod(n_24, i_25) == 0)) {
                return false;
            }
            i_25 = (i_25 + 2);
        };
        return true;
    }

    public static BigInteger next_prime(BigInteger value_26, BigInteger factor_27) {
        BigInteger candidate_28 = ((value_26 * factor_27) + 1);
        while ((!Program.is_prime(candidate_28))) {
            candidate_28 = (candidate_28 + 1);
        };
        return candidate_28;
    }

    public static HashTable set_value(HashTable ht_29, BigInteger key_30, BigInteger data_31) {
        BigInteger[] new_values_32 = Program.set_int(ht_29.values, key_30, data_31);
        bool[] new_filled_33 = Program.set_bool(ht_29.filled, key_30, true);
        return new HashTable{size_table = ht_29.size_table, values = new_values_32, filled = new_filled_33, charge_factor = ht_29.charge_factor, lim_charge = ht_29.lim_charge};
    }

    public static BigInteger collision_resolution(HashTable ht_34, BigInteger key_35) {
        BigInteger new_key_36 = Program.hash_function(ht_34, (key_35 + 1));
        BigInteger steps_37 = 0;
        while (_idx(ht_34.filled, (long)(new_key_36))) {
            new_key_36 = Program.hash_function(ht_34, (new_key_36 + 1));
            steps_37 = (steps_37 + 1);
            if ((steps_37 >= ht_34.size_table)) {
                return -1;
            }
        };
        return new_key_36;
    }

    public static HashTable rehashing(HashTable ht_38) {
        BigInteger[] survivors_39 = new BigInteger[]{};
        BigInteger i_40 = 0;
        while ((i_40 < ht_38.values.Length)) {
            if (_idx(ht_38.filled, (long)(i_40))) {
                survivors_39 = ((Func<BigInteger[]>)(() => { var _tmp = survivors_39.Cast<BigInteger>().ToList(); _tmp.Add(_idx(ht_38.values, (long)(i_40))); return _tmp.ToArray(); }))();
            }
            i_40 = (i_40 + 1);
        };
        BigInteger new_size_41 = Program.next_prime(ht_38.size_table, 2);
        HashTable new_ht_42 = Program.create_table(new_size_41, ht_38.charge_factor, ht_38.lim_charge);
        i_40 = 0;
        while ((i_40 < survivors_39.Length)) {
            new_ht_42 = Program.insert_data(new_ht_42, _idx(survivors_39, (long)(i_40)));
            i_40 = (i_40 + 1);
        };
        return new_ht_42;
    }

    public static HashTable insert_data(HashTable ht_43, BigInteger data_44) {
        BigInteger key_45 = Program.hash_function(ht_43, data_44);
        if ((!_idx(ht_43.filled, (long)(key_45)))) {
            return Program.set_value(ht_43, key_45, data_44);
        };
        if ((_idx(ht_43.values, (long)(key_45)) == data_44)) {
            return ht_43;
        };
        BigInteger new_key_46 = Program.collision_resolution(ht_43, key_45);
        if ((new_key_46 >= 0)) {
            return Program.set_value(ht_43, new_key_46, data_44);
        };
        HashTable resized_47 = Program.rehashing(ht_43);
        return Program.insert_data(resized_47, data_44);
    }

    public static BigInteger[][] keys(HashTable ht_48) {
        BigInteger[][] res_49 = new BigInteger[][]{};
        BigInteger i_50 = 0;
        while ((i_50 < ht_48.values.Length)) {
            if (_idx(ht_48.filled, (long)(i_50))) {
                res_49 = ((Func<BigInteger[][]>)(() => { var _tmp = res_49.Cast<BigInteger[]>().ToList(); _tmp.Add(new BigInteger[]{i_50, _idx(ht_48.values, (long)(i_50))}); return _tmp.ToArray(); }))();
            }
            i_50 = (i_50 + 1);
        };
        return res_49;
    }

    public static void main() {
        HashTable ht_51 = Program.create_table(3, 1, 0.75);
        ht_51 = Program.insert_data(ht_51, 17);
        ht_51 = Program.insert_data(ht_51, 18);
        ht_51 = Program.insert_data(ht_51, 99);
        Console.WriteLine(Program._fmtTop(ht_51.Keys.ToArray()));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
