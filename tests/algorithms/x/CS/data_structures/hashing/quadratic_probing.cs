// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class HashTable {
    public long size_table;
    public long[] values;
    public double lim_charge;
    public override string ToString() => $"HashTable {{size_table = {size_table}, values = {values}, lim_charge = {lim_charge.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static HashTable qp_28 = Program.create_hash_table(8);
    public static HashTable create_hash_table(long size_0) {
        long[] vals_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < size_0)) {
            vals_1 = (Enumerable.ToArray(Enumerable.Append<long>(vals_1, (long)(object)null)));
            i_2 = (i_2 + 1);
        };
        return new HashTable{size_table = size_0, values = vals_1, lim_charge = 0.75};
    }

    public static long hash_function(HashTable table_3, long key_4) {
        return _mod(key_4, table_3.size_table);
    }

    public static double balanced_factor(HashTable table_5) {
        long count_6 = 0;
        long i_7 = 0;
        while ((i_7 < table_5.values.Length)) {
            if ((table_5.values[(int)(i_7)] != null)) {
                count_6 = (count_6 + 1);
            }
            i_7 = (i_7 + 1);
        };
        return (Convert.ToDouble(count_6) / Convert.ToDouble(table_5.size_table));
    }

    public static long collision_resolution(HashTable table_8, long key_9) {
        long i_10 = 1;
        long new_key_11 = Program.hash_function(table_8, (key_9 + (i_10 * i_10)));
        while (((table_8.values[(int)(new_key_11)] != null) && (table_8.values[(int)(new_key_11)] != key_9))) {
            i_10 = (i_10 + 1);
            if ((Program.balanced_factor(table_8) >= table_8.lim_charge)) {
                return table_8.size_table;
            }
            new_key_11 = Program.hash_function(table_8, (key_9 + (i_10 * i_10)));
        };
        return new_key_11;
    }

    public static void insert_data(HashTable table_12, long data_13) {
        long key_14 = Program.hash_function(table_12, data_13);
        long[] vals_15 = table_12.values;
        if ((vals_15[(int)(key_14)] == null)) {
            vals_15[key_14] = data_13;
        } else if ((vals_15[(int)(key_14)] == data_13)) {
            table_12.values = vals_15;
            return;
        } else {
            long new_key_16 = Program.collision_resolution(table_12, key_14);
            if (((new_key_16 < vals_15.Length) && (vals_15[(int)(new_key_16)] == null))) {
                vals_15[new_key_16] = data_13;
            }
        };
        table_12.values = vals_15;
    }

    public static string int_to_string(long n_17) {
        if ((n_17 == 0)) {
            return "0";
        };
        long num_18 = n_17;
        bool neg_19 = false;
        if ((num_18 < 0)) {
            neg_19 = true;
            num_18 = -num_18;
        };
        string res_20 = "";
        while ((num_18 > 0)) {
            long digit_21 = _mod(num_18, 10);
            string ch_22 = _substr("0123456789", digit_21, (digit_21 + 1));
            res_20 = (ch_22 + res_20);
            num_18 = (num_18 / 10);
        };
        if (neg_19) {
            res_20 = ("-" + res_20);
        };
        return res_20;
    }

    public static string keys_to_string(HashTable table_23) {
        string result_24 = "{";
        bool first_25 = true;
        long i_26 = 0;
        while ((i_26 < table_23.values.Length)) {
            long v_27 = table_23.values[(int)(i_26)];
            if ((v_27 != null)) {
                if ((!first_25)) {
                    result_24 = (result_24 + ", ");
                }
                result_24 = (((result_24 + Program.int_to_string(i_26)) + ": ") + Program.int_to_string(v_27));
                first_25 = false;
            }
            i_26 = (i_26 + 1);
        };
        result_24 = (result_24 + "}");
        return result_24;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.insert_data(qp_28, 0);
            Program.insert_data(qp_28, 999);
            Program.insert_data(qp_28, 111);
            Console.WriteLine(Program._fmtTop(Program.keys_to_string(qp_28)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
