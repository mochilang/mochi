// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class HashTableWithLinkedList {
    public long size_table;
    public long charge_factor;
    public long[][] values;
    public Dictionary<long, long[]> keys;
    public override string ToString() => $"HashTableWithLinkedList {{size_table = {size_table}, charge_factor = {charge_factor}, values = {values}, keys = {keys}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static HashTableWithLinkedList make_table(long size_table_0, long charge_factor_1) {
        long[][] vals_2 = new long[][]{};
        long i_3 = 0;
        while ((i_3 < size_table_0)) {
            vals_2 = (Enumerable.ToArray(Enumerable.Append<long[]>(vals_2, new long[]{})));
            i_3 = (i_3 + 1);
        };
        return new HashTableWithLinkedList{size_table = size_table_0, charge_factor = charge_factor_1, values = vals_2, keys = new Dictionary<long, long[]>{}};
    }

    public static long hash_function(HashTableWithLinkedList ht_4, long key_5) {
        long res_6 = _mod(key_5, ht_4.size_table);
        if ((res_6 < 0)) {
            res_6 = (res_6 + ht_4.size_table);
        };
        return res_6;
    }

    public static long[] prepend(long[] lst_7, long value_8) {
        long[] result_9 = new long[]{value_8};
        long i_10 = 0;
        while ((i_10 < lst_7.Length)) {
            result_9 = (Enumerable.ToArray(Enumerable.Append<long>(result_9, lst_7[(int)(i_10)])));
            i_10 = (i_10 + 1);
        };
        return result_9;
    }

    public static void set_value(HashTableWithLinkedList ht_11, long key_12, long data_13) {
        long[] current_14 = ht_11.values[(int)(key_12)];
        long[] updated_15 = Program.prepend(current_14, data_13);
        long[][] vals_16 = ht_11.values;
        vals_16[key_12] = updated_15;
        ht_11.values = vals_16;
        Dictionary<long, long[]> ks_17 = ht_11.keys;
        ks_17[key_12] = updated_15;
        ht_11.keys = ks_17;
    }

    public static long count_empty(HashTableWithLinkedList ht_18) {
        long count_19 = 0;
        long i_20 = 0;
        while ((i_20 < ht_18.values.Length)) {
            if ((ht_18.values[(int)(i_20)].Length == 0)) {
                count_19 = (count_19 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return count_19;
    }

    public static double balanced_factor(HashTableWithLinkedList ht_21) {
        long total_22 = 0;
        long i_23 = 0;
        while ((i_23 < ht_21.values.Length)) {
            total_22 = (total_22 + (ht_21.charge_factor - ht_21.values[(int)(i_23)].Length));
            i_23 = (i_23 + 1);
        };
        return ((Convert.ToDouble(total_22) / Convert.ToDouble(ht_21.size_table)) * Convert.ToDouble(ht_21.charge_factor));
    }

    public static long collision_resolution(HashTableWithLinkedList ht_24, long key_25) {
        if ((!((ht_24.values[(int)(key_25)].Length == ht_24.charge_factor) && (Program.count_empty(ht_24) == 0)))) {
            return key_25;
        };
        long new_key_26 = _mod((key_25 + 1), ht_24.size_table);
        long steps_27 = 0;
        while (((ht_24.values[(int)(new_key_26)].Length == ht_24.charge_factor) && (steps_27 < (ht_24.size_table - 1)))) {
            new_key_26 = _mod((new_key_26 + 1), ht_24.size_table);
            steps_27 = (steps_27 + 1);
        };
        if ((ht_24.values[(int)(new_key_26)].Length < ht_24.charge_factor)) {
            return new_key_26;
        };
        return -1;
    }

    public static void insert(HashTableWithLinkedList ht_28, long data_29) {
        long key_30 = Program.hash_function(ht_28, data_29);
        if (((ht_28.values[(int)(key_30)].Length == 0) || (ht_28.values[(int)(key_30)].Length < ht_28.charge_factor))) {
            Program.set_value(ht_28, key_30, data_29);
            return;
        };
        long dest_31 = Program.collision_resolution(ht_28, key_30);
        if ((dest_31 >= 0)) {
            Program.set_value(ht_28, dest_31, data_29);
        } else {
            Console.WriteLine(Program._fmtTop("table full"));
        };
    }

    public static void main() {
        HashTableWithLinkedList ht_32 = Program.make_table(3, 2);
        Program.insert(ht_32, 10);
        Program.insert(ht_32, 20);
        Program.insert(ht_32, 30);
        Program.insert(ht_32, 40);
        Program.insert(ht_32, 50);
        Console.WriteLine(Program._fmtTop(_fmtStr(ht_32.values)));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.balanced_factor(ht_32))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
