// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool is_prime(BigInteger n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        BigInteger i_1 = 2;
        while (((i_1 * i_1) <= n_0)) {
            if ((_mod(n_0, i_1) == 0)) {
                return false;
            }
            i_1 = (i_1 + 1);
        };
        return true;
    }

    public static BigInteger prev_prime(BigInteger n_2) {
        BigInteger p_3 = (n_2 - 1);
        while ((p_3 >= 2)) {
            if (Program.is_prime(p_3)) {
                return p_3;
            }
            p_3 = (p_3 - 1);
        };
        return 1;
    }

    public static BigInteger[] create_table(BigInteger size_4) {
        BigInteger[] vals_5 = new BigInteger[]{};
        BigInteger i_6 = 0;
        while ((i_6 < size_4)) {
            vals_5 = ((Func<BigInteger[]>)(() => { var _tmp = vals_5.Cast<BigInteger>().ToList(); _tmp.Add(-1); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        return vals_5;
    }

    public static BigInteger hash1(BigInteger size_7, BigInteger key_8) {
        return _mod(key_8, size_7);
    }

    public static BigInteger hash2(BigInteger prime_9, BigInteger key_10) {
        return (prime_9 - _mod(key_10, prime_9));
    }

    public static BigInteger[] insert_double_hash(BigInteger[] values_11, BigInteger size_12, BigInteger prime_13, BigInteger value_14) {
        BigInteger[] vals_15 = values_11;
        BigInteger idx_16 = Program.hash1(size_12, value_14);
        BigInteger step_17 = Program.hash2(prime_13, value_14);
        BigInteger count_18 = 0;
        while (((_idx(vals_15, (long)(idx_16)) != -1) && (count_18 < size_12))) {
            idx_16 = _mod((idx_16 + step_17), size_12);
            count_18 = (count_18 + 1);
        };
        if ((_idx(vals_15, (long)(idx_16)) == -1)) {
            vals_15[(int)(idx_16)] = value_14;
        };
        return vals_15;
    }

    public static Dictionary<BigInteger, BigInteger> table_keys(BigInteger[] values_19) {
        Dictionary<BigInteger, BigInteger> res_20 = new Dictionary<BigInteger, BigInteger>{};
        BigInteger i_21 = 0;
        while ((i_21 < values_19.Length)) {
            if ((_idx(values_19, (long)(i_21)) != -1)) {
                res_20[i_21] = _idx(values_19, (long)(i_21));
            }
            i_21 = (i_21 + 1);
        };
        return res_20;
    }

    public static void run_example(BigInteger size_22, BigInteger[] data_23) {
        BigInteger prime_24 = Program.prev_prime(size_22);
        BigInteger[] table_25 = Program.create_table(size_22);
        BigInteger i_26 = 0;
        while ((i_26 < data_23.Length)) {
            table_25 = Program.insert_double_hash(table_25, size_22, prime_24, _idx(data_23, (long)(i_26)));
            i_26 = (i_26 + 1);
        };
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.table_keys(table_25))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.run_example(3, new BigInteger[]{10, 20, 30});
            Program.run_example(4, new BigInteger[]{10, 20, 30});
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
