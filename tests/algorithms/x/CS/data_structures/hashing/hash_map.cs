// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Bucket {
    public long state;
    public long key;
    public long val;
    public override string ToString() => $"Bucket {{state = {state}, key = {key}, val = {val}}}";
}
class HashMap {
    public Bucket[] buckets;
    public long len;
    public long cap_num;
    public long cap_den;
    public long initial_size;
    public override string ToString() => $"HashMap {{buckets = {buckets}, len = {len}, cap_num = {cap_num}, cap_den = {cap_den}, initial_size = {initial_size}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static HashMap hm_52 = Program.hashmap_new(5);
    public static Bucket[] make_buckets(long n_0) {
        Bucket[] buckets_1 = new Bucket[]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            buckets_1 = (Enumerable.ToArray(Enumerable.Append<Bucket>(buckets_1, new Bucket{state = 0, key = 0, val = 0})));
            i_2 = (i_2 + 1);
        };
        return buckets_1;
    }

    public static HashMap hashmap_new(long initial_size_3) {
        return new HashMap{buckets = Program.make_buckets(initial_size_3), len = 0, cap_num = 3, cap_den = 4, initial_size = initial_size_3};
    }

    public static long bucket_index(HashMap hm_4, long key_5) {
        long ind_6 = _mod(key_5, hm_4.buckets.Length);
        if ((ind_6 < 0)) {
            ind_6 = (ind_6 + hm_4.buckets.Length);
        };
        return ind_6;
    }

    public static long next_index(HashMap hm_7, long ind_8) {
        return _mod((ind_8 + 1), hm_7.buckets.Length);
    }

    public static bool try_set(HashMap hm_9, long ind_10, long key_11, long val_12) {
        Bucket[] buckets_13 = hm_9.buckets;
        Bucket b_14 = buckets_13[(int)(ind_10)];
        if (((b_14.state == 0) || (b_14.state == 2))) {
            buckets_13[ind_10] = new Bucket{state = 1, key = key_11, val = val_12};
            hm_9.buckets = buckets_13;
            hm_9.len = (hm_9.len + 1);
            return true;
        };
        if ((b_14.key == key_11)) {
            buckets_13[ind_10] = new Bucket{state = 1, key = key_11, val = val_12};
            hm_9.buckets = buckets_13;
            return true;
        };
        return false;
    }

    public static bool is_full(HashMap hm_15) {
        long limit_16 = ((hm_15.buckets.Length * hm_15.cap_num) / hm_15.cap_den);
        return (hm_15.len >= limit_16);
    }

    public static bool is_sparse(HashMap hm_17) {
        if ((hm_17.buckets.Length <= hm_17.initial_size)) {
            return false;
        };
        long limit_18 = ((hm_17.buckets.Length * hm_17.cap_num) / (2 * hm_17.cap_den));
        return (hm_17.len < limit_18);
    }

    public static void resize(HashMap hm_19, long new_size_20) {
        Bucket[] old_21 = hm_19.buckets;
        hm_19.buckets = Program.make_buckets(new_size_20);
        hm_19.len = 0;
        long i_22 = 0;
        while ((i_22 < old_21.Length)) {
            Bucket it_23 = old_21[(int)(i_22)];
            if ((it_23.state == 1)) {
                Program.add_item(hm_19, it_23.key, it_23.val);
            }
            i_22 = (i_22 + 1);
        };
    }

    public static void size_up(HashMap hm_24) {
        Program.resize(hm_24, (hm_24.buckets.Length * 2));
    }

    public static void size_down(HashMap hm_25) {
        Program.resize(hm_25, (hm_25.buckets.Length / 2));
    }

    public static void add_item(HashMap hm_26, long key_27, long val_28) {
        long ind_29 = Program.bucket_index(hm_26, key_27);
        long i_30 = 0;
        while ((i_30 < hm_26.buckets.Length)) {
            if (Program.try_set(hm_26, ind_29, key_27, val_28)) {
                break;
            }
            ind_29 = Program.next_index(hm_26, ind_29);
            i_30 = (i_30 + 1);
        };
    }

    public static void hashmap_set(HashMap hm_31, long key_32, long val_33) {
        if (Program.is_full(hm_31)) {
            Program.size_up(hm_31);
        };
        Program.add_item(hm_31, key_32, val_33);
    }

    public static long hashmap_get(HashMap hm_34, long key_35) {
        Bucket[] buckets_36 = hm_34.buckets;
        long ind_37 = Program.bucket_index(hm_34, key_35);
        long i_38 = 0;
        while ((i_38 < buckets_36.Length)) {
            Bucket it_39 = buckets_36[(int)(ind_37)];
            if ((it_39.state == 0)) {
                break;
            }
            if (((it_39.state == 1) && (it_39.key == key_35))) {
                return it_39.val;
            }
            ind_37 = Program.next_index(hm_34, ind_37);
            i_38 = (i_38 + 1);
        };
        return 0;
    }

    public static void hashmap_del(HashMap hm_40, long key_41) {
        Bucket[] buckets_42 = hm_40.buckets;
        long ind_43 = Program.bucket_index(hm_40, key_41);
        long i_44 = 0;
        while ((i_44 < buckets_42.Length)) {
            Bucket it_45 = buckets_42[(int)(ind_43)];
            if ((it_45.state == 0)) {
                Console.WriteLine(Program._fmtTop(("KeyError: " + _fmtStr(key_41))));
                return;
            }
            if (((it_45.state == 1) && (it_45.key == key_41))) {
                buckets_42[ind_43] = new Bucket{state = 2, key = 0, val = 0};
                hm_40.buckets = buckets_42;
                hm_40.len = (hm_40.len - 1);
                break;
            }
            ind_43 = Program.next_index(hm_40, ind_43);
            i_44 = (i_44 + 1);
        };
        if (Program.is_sparse(hm_40)) {
            Program.size_down(hm_40);
        };
    }

    public static long hashmap_len(HashMap hm_46) {
        return hm_46.len;
    }

    public static string hashmap_repr(HashMap hm_47) {
        string out_48 = "HashMap(";
        bool first_49 = true;
        long i_50 = 0;
        while ((i_50 < hm_47.buckets.Length)) {
            Bucket b_51 = hm_47.buckets[(int)(i_50)];
            if ((b_51.state == 1)) {
                if ((!first_49)) {
                    out_48 = (out_48 + ", ");
                } else {
                    first_49 = false;
                }
                out_48 = (((out_48 + _fmtStr(b_51.key)) + ": ") + _fmtStr(b_51.val));
            }
            i_50 = (i_50 + 1);
        };
        out_48 = (out_48 + ")");
        return out_48;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.hashmap_set(hm_52, 1, 10);
            Program.hashmap_set(hm_52, 2, 20);
            Program.hashmap_set(hm_52, 3, 30);
            Console.WriteLine(Program._fmtTop(Program.hashmap_repr(hm_52)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hashmap_get(hm_52, 2))));
            Program.hashmap_del(hm_52, 1);
            Console.WriteLine(Program._fmtTop(Program.hashmap_repr(hm_52)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hashmap_len(hm_52))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
