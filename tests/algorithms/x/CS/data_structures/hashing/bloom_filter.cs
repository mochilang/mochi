// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Bloom {
    public long size;
    public long[] bits;
    public override string ToString() => $"Bloom {{size = {size}, bits = {bits}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ascii_0 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    public static long ord(string ch_1) {
        long i_2 = 0;
        while ((i_2 < ascii_0.Length)) {
            if ((_substr(ascii_0, i_2, (i_2 + 1)) == ch_1)) {
                return (32 + i_2);
            }
            i_2 = (i_2 + 1);
        };
        return 0;
    }

    public static Bloom new_bloom(long size_3) {
        long[] bits_4 = new long[]{};
        long i_5 = 0;
        while ((i_5 < size_3)) {
            bits_4 = (Enumerable.ToArray(Enumerable.Append<long>(bits_4, 0)));
            i_5 = (i_5 + 1);
        };
        return new Bloom{size = size_3, bits = bits_4};
    }

    public static long hash1(string value_6, long size_7) {
        long h_8 = 0;
        long i_9 = 0;
        while ((i_9 < value_6.Length)) {
            h_8 = _mod(((h_8 * 31) + Program.ord(_substr(value_6, i_9, (i_9 + 1)))), size_7);
            i_9 = (i_9 + 1);
        };
        return h_8;
    }

    public static long hash2(string value_10, long size_11) {
        long h_12 = 0;
        long i_13 = 0;
        while ((i_13 < value_10.Length)) {
            h_12 = _mod(((h_12 * 131) + Program.ord(_substr(value_10, i_13, (i_13 + 1)))), size_11);
            i_13 = (i_13 + 1);
        };
        return h_12;
    }

    public static long[] hash_positions(string value_14, long size_15) {
        long h1_16 = Program.hash1(value_14, size_15);
        long h2_17 = Program.hash2(value_14, size_15);
        long[] res_18 = new long[]{};
        res_18 = (Enumerable.ToArray(Enumerable.Append<long>(res_18, h1_16)));
        res_18 = (Enumerable.ToArray(Enumerable.Append<long>(res_18, h2_17)));
        return res_18;
    }

    public static Bloom bloom_add(Bloom b_19, string value_20) {
        long[] pos_21 = Program.hash_positions(value_20, b_19.size);
        long[] bits_22 = b_19.bits;
        long i_23 = 0;
        while ((i_23 < pos_21.Length)) {
            long idx_24 = ((b_19.size - 1) - pos_21[(int)(i_23)]);
            bits_22[idx_24] = 1;
            i_23 = (i_23 + 1);
        };
        return new Bloom{size = b_19.size, bits = bits_22};
    }

    public static bool bloom_exists(Bloom b_25, string value_26) {
        long[] pos_27 = Program.hash_positions(value_26, b_25.size);
        long i_28 = 0;
        while ((i_28 < pos_27.Length)) {
            long idx_29 = ((b_25.size - 1) - pos_27[(int)(i_28)]);
            if ((b_25.bits[(int)(idx_29)] != 1)) {
                return false;
            }
            i_28 = (i_28 + 1);
        };
        return true;
    }

    public static string bitstring(Bloom b_30) {
        string res_31 = "";
        long i_32 = 0;
        while ((i_32 < b_30.size)) {
            res_31 = (res_31 + _fmtStr(b_30.bits[(int)(i_32)]));
            i_32 = (i_32 + 1);
        };
        return res_31;
    }

    public static string format_hash(Bloom b_33, string value_34) {
        long[] pos_35 = Program.hash_positions(value_34, b_33.size);
        long[] bits_36 = new long[]{};
        long i_37 = 0;
        while ((i_37 < b_33.size)) {
            bits_36 = (Enumerable.ToArray(Enumerable.Append<long>(bits_36, 0)));
            i_37 = (i_37 + 1);
        };
        i_37 = 0;
        while ((i_37 < pos_35.Length)) {
            long idx_38 = ((b_33.size - 1) - pos_35[(int)(i_37)]);
            bits_36[idx_38] = 1;
            i_37 = (i_37 + 1);
        };
        string res_39 = "";
        i_37 = 0;
        while ((i_37 < b_33.size)) {
            res_39 = (res_39 + _fmtStr(bits_36[(int)(i_37)]));
            i_37 = (i_37 + 1);
        };
        return res_39;
    }

    public static double estimated_error_rate(Bloom b_40) {
        long ones_41 = 0;
        long i_42 = 0;
        while ((i_42 < b_40.size)) {
            if ((b_40.bits[(int)(i_42)] == 1)) {
                ones_41 = (ones_41 + 1);
            }
            i_42 = (i_42 + 1);
        };
        double frac_43 = (Convert.ToDouble(ones_41) / Convert.ToDouble(b_40.size));
        return (frac_43 * frac_43);
    }

    public static bool any_in(Bloom b_44, string[] items_45) {
        long i_46 = 0;
        while ((i_46 < items_45.Length)) {
            if (Program.bloom_exists(b_44, items_45[(int)(i_46)])) {
                return true;
            }
            i_46 = (i_46 + 1);
        };
        return false;
    }

    public static void main() {
        Bloom bloom_47 = Program.new_bloom(8);
        Console.WriteLine(Program._fmtTop(Program.bitstring(bloom_47)));
        Console.WriteLine(Program._fmtTop(Program.bloom_exists(bloom_47, "Titanic")));
        bloom_47 = Program.bloom_add(bloom_47, "Titanic");
        Console.WriteLine(Program._fmtTop(Program.bitstring(bloom_47)));
        Console.WriteLine(Program._fmtTop(Program.bloom_exists(bloom_47, "Titanic")));
        bloom_47 = Program.bloom_add(bloom_47, "Avatar");
        Console.WriteLine(Program._fmtTop(Program.bloom_exists(bloom_47, "Avatar")));
        Console.WriteLine(Program._fmtTop(Program.format_hash(bloom_47, "Avatar")));
        Console.WriteLine(Program._fmtTop(Program.bitstring(bloom_47)));
        string[] not_present_48 = new string[]{"The Godfather", "Interstellar", "Parasite", "Pulp Fiction"};
        long i_49 = 0;
        while ((i_49 < not_present_48.Length)) {
            string film_50 = not_present_48[(int)(i_49)];
            Console.WriteLine(Program._fmtTop(((film_50 + ":") + Program.format_hash(bloom_47, film_50))));
            i_49 = (i_49 + 1);
        };
        Console.WriteLine(Program._fmtTop(Program.any_in(bloom_47, not_present_48)));
        Console.WriteLine(Program._fmtTop(Program.bloom_exists(bloom_47, "Ratatouille")));
        Console.WriteLine(Program._fmtTop(Program.format_hash(bloom_47, "Ratatouille")));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.estimated_error_rate(bloom_47))));
        bloom_47 = Program.bloom_add(bloom_47, "The Godfather");
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.estimated_error_rate(bloom_47))));
        Console.WriteLine(Program._fmtTop(Program.bitstring(bloom_47)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
