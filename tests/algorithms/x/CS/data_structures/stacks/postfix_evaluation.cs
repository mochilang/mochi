// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[] slice_without_last(double[] xs_0) {
        double[] res_1 = new double[]{};
        long i_2 = 0;
        while ((i_2 < (xs_0.Length - 1))) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<double>(res_1, xs_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static double parse_float(string token_3) {
        double sign_4 = 1.0;
        long idx_5 = 0;
        if ((token_3.Length > 0)) {
            string first_6 = _substr(token_3, 0, 1);
            if ((first_6 == "-")) {
                sign_4 = -1.0;
                idx_5 = 1;
            } else if ((first_6 == "+")) {
                idx_5 = 1;
            }
        };
        long int_part_7 = 0;
        while (((idx_5 < token_3.Length) && (_substr(token_3, idx_5, (idx_5 + 1)) != "."))) {
            int_part_7 = ((int_part_7 * 10) + Convert.ToInt64(_substr(token_3, idx_5, (idx_5 + 1))));
            idx_5 = (idx_5 + 1);
        };
        double result_8 = (1.0 * int_part_7);
        if (((idx_5 < token_3.Length) && (_substr(token_3, idx_5, (idx_5 + 1)) == "."))) {
            idx_5 = (idx_5 + 1);
            double place_9 = 0.1;
            while ((idx_5 < token_3.Length)) {
                long digit_10 = Convert.ToInt64(_substr(token_3, idx_5, (idx_5 + 1)));
                result_8 = (result_8 + (place_9 * (1.0 * digit_10)));
                place_9 = (place_9 / 10.0);
                idx_5 = (idx_5 + 1);
            }
        };
        return (sign_4 * result_8);
    }

    public static double pow_float(double base_11, double exp_12) {
        double result_13 = 1.0;
        long i_14 = 0;
        long e_15 = Convert.ToInt64(exp_12);
        while ((i_14 < e_15)) {
            result_13 = (result_13 * base_11);
            i_14 = (i_14 + 1);
        };
        return result_13;
    }

    public static double apply_op(double a_16, double b_17, string op_18) {
        if ((op_18 == "+")) {
            return (a_16 + b_17);
        };
        if ((op_18 == "-")) {
            return (a_16 - b_17);
        };
        if ((op_18 == "*")) {
            return (a_16 * b_17);
        };
        if ((op_18 == "/")) {
            return (a_16 / b_17);
        };
        if ((op_18 == "^")) {
            return Program.pow_float(a_16, b_17);
        };
        return 0.0;
    }

    public static double evaluate(string[] tokens_19) {
        if ((tokens_19.Length == 0)) {
            return 0.0;
        };
        double[] stack_20 = new double[]{};
        foreach (string token_21 in tokens_19) {
            if ((((((token_21 == "+") || (token_21 == "-")) || (token_21 == "*")) || (token_21 == "/")) || (token_21 == "^"))) {
                if ((((token_21 == "+") || (token_21 == "-")) && (stack_20.Length < 2))) {
                    double b_22 = stack_20[(int)((stack_20.Length - 1))];
                    stack_20 = Program.slice_without_last(stack_20);
                    if ((token_21 == "-")) {
                        stack_20 = (Enumerable.ToArray(Enumerable.Append<double>(stack_20, (0.0 - b_22))));
                    } else {
                        stack_20 = (Enumerable.ToArray(Enumerable.Append<double>(stack_20, b_22)));
                    }
                } else {
                    double b_23 = stack_20[(int)((stack_20.Length - 1))];
                    stack_20 = Program.slice_without_last(stack_20);
                    double a_24 = stack_20[(int)((stack_20.Length - 1))];
                    stack_20 = Program.slice_without_last(stack_20);
                    double result_25 = Program.apply_op(a_24, b_23, token_21);
                    stack_20 = (Enumerable.ToArray(Enumerable.Append<double>(stack_20, result_25)));
                }
            } else {
                stack_20 = (Enumerable.ToArray(Enumerable.Append<double>(stack_20, Program.parse_float(token_21))));
            }
        };
        if ((stack_20.Length != 1)) {
            throw new Exception("Invalid postfix expression");
        };
        return stack_20[(int)(0)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(new string[]{"2", "1", "+", "3", "*"}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(new string[]{"4", "13", "5", "/", "+"}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(new string[]{"5", "6", "9", "*", "+"}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(new string[]{"2", "-", "3", "+"}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(new string[]{}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
