// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[] arr_0 = new double[]{-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0};
    static double[] expected_1 = new double[]{-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0};
    public static double[] next_greatest_element_slow(double[] xs_2) {
        double[] res_3 = new double[]{};
        BigInteger i_4 = 0;
        while ((i_4 < xs_2.Length)) {
            double next_5 = -1.0;
            BigInteger j_6 = (i_4 + 1);
            while ((j_6 < xs_2.Length)) {
                if ((_idx(xs_2, (long)(i_4)) < _idx(xs_2, (long)(j_6)))) {
                    next_5 = _idx(xs_2, (long)(j_6));
                    break;
                }
                j_6 = (j_6 + 1);
            }
            res_3 = ((Func<double[]>)(() => { var _tmp = res_3.Cast<double>().ToList(); _tmp.Add(next_5); return _tmp.ToArray(); }))();
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static double[] next_greatest_element_fast(double[] xs_7) {
        double[] res_8 = new double[]{};
        BigInteger i_9 = 0;
        while ((i_9 < xs_7.Length)) {
            double next_10 = -1.0;
            BigInteger j_11 = (i_9 + 1);
            while ((j_11 < xs_7.Length)) {
                double inner_12 = _idx(xs_7, (long)(j_11));
                if ((_idx(xs_7, (long)(i_9)) < inner_12)) {
                    next_10 = inner_12;
                    break;
                }
                j_11 = (j_11 + 1);
            }
            res_8 = ((Func<double[]>)(() => { var _tmp = res_8.Cast<double>().ToList(); _tmp.Add(next_10); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static double[] set_at_float(double[] xs_13, BigInteger idx_14, double value_15) {
        BigInteger i_16 = 0;
        double[] res_17 = new double[]{};
        while ((i_16 < xs_13.Length)) {
            if ((i_16 == idx_14)) {
                res_17 = ((Func<double[]>)(() => { var _tmp = res_17.Cast<double>().ToList(); _tmp.Add(value_15); return _tmp.ToArray(); }))();
            } else {
                res_17 = ((Func<double[]>)(() => { var _tmp = res_17.Cast<double>().ToList(); _tmp.Add(_idx(xs_13, (long)(i_16))); return _tmp.ToArray(); }))();
            }
            i_16 = (i_16 + 1);
        };
        return res_17;
    }

    public static double[] next_greatest_element(double[] xs_18) {
        double[] res_19 = new double[]{};
        BigInteger k_20 = 0;
        while ((k_20 < xs_18.Length)) {
            res_19 = ((Func<double[]>)(() => { var _tmp = res_19.Cast<double>().ToList(); _tmp.Add(-1.0); return _tmp.ToArray(); }))();
            k_20 = (k_20 + 1);
        };
        BigInteger[] stack_21 = new BigInteger[]{};
        BigInteger i_22 = 0;
        while ((i_22 < xs_18.Length)) {
            while (((stack_21.Length > 0) && (_idx(xs_18, (long)(i_22)) > _idx(xs_18, (long)(_idx(stack_21, (long)((stack_21.Length - 1)))))))) {
                BigInteger idx_23 = _idx(stack_21, (long)((stack_21.Length - 1)));
                stack_21 = _slice<BigInteger>(stack_21, 0, (stack_21.Length - 1));
                res_19 = Program.set_at_float(res_19, idx_23, _idx(xs_18, (long)(i_22)));
            }
            stack_21 = ((Func<BigInteger[]>)(() => { var _tmp = stack_21.Cast<BigInteger>().ToList(); _tmp.Add(i_22); return _tmp.ToArray(); }))();
            i_22 = (i_22 + 1);
        };
        return res_19;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.next_greatest_element_slow(arr_0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.next_greatest_element_fast(arr_0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.next_greatest_element(arr_0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
