// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    static Dictionary<string, BigInteger> PRIORITY_0 = new Dictionary<string, BigInteger>{{"^", 3}, {"*", 2}, {"/", 2}, {"%", 2}, {"+", 1}, {"-", 1}};
    static string LETTERS_1 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string DIGITS_2 = "0123456789";
    public static bool is_alpha(string ch_3) {
        BigInteger i_4 = 0;
        while ((i_4 < LETTERS_1.Length)) {
            if ((LETTERS_1.Substring((int)(i_4), 1) == ch_3)) {
                return true;
            }
            i_4 = (i_4 + 1);
        };
        return false;
    }

    public static bool is_digit(string ch_5) {
        BigInteger i_6 = 0;
        while ((i_6 < DIGITS_2.Length)) {
            if ((DIGITS_2.Substring((int)(i_6), 1) == ch_5)) {
                return true;
            }
            i_6 = (i_6 + 1);
        };
        return false;
    }

    public static string reverse_string(string s_7) {
        string out_8 = "";
        BigInteger i_9 = (s_7.Length - 1);
        while ((i_9 >= 0)) {
            out_8 = (out_8 + s_7.Substring((int)(i_9), 1));
            i_9 = (i_9 - 1);
        };
        return out_8;
    }

    public static string infix_to_postfix(string infix_10) {
        string[] stack_11 = new string[]{};
        string[] post_12 = new string[]{};
        BigInteger i_13 = 0;
        while ((i_13 < infix_10.Length)) {
            string x_14 = infix_10.Substring((int)(i_13), 1);
            if ((Program.is_alpha(x_14) || Program.is_digit(x_14))) {
                post_12 = ((Func<string[]>)(() => { var _tmp = post_12.Cast<string>().ToList(); _tmp.Add(x_14); return _tmp.ToArray(); }))();
            } else if ((x_14 == "(")) {
                stack_11 = ((Func<string[]>)(() => { var _tmp = stack_11.Cast<string>().ToList(); _tmp.Add(x_14); return _tmp.ToArray(); }))();
            } else if ((x_14 == ")")) {
                if ((stack_11.Length == 0)) {
                    throw new Exception("list index out of range");
                }
                while ((_idx(stack_11, (long)((stack_11.Length - 1))) != "(")) {
                    post_12 = ((Func<string[]>)(() => { var _tmp = post_12.Cast<string>().ToList(); _tmp.Add(_idx(stack_11, (long)((stack_11.Length - 1)))); return _tmp.ToArray(); }))();
                    stack_11 = _slice<string>(stack_11, 0, (stack_11.Length - 1));
                }
                stack_11 = _slice<string>(stack_11, 0, (stack_11.Length - 1));
            } else if ((stack_11.Length == 0)) {
                stack_11 = ((Func<string[]>)(() => { var _tmp = stack_11.Cast<string>().ToList(); _tmp.Add(x_14); return _tmp.ToArray(); }))();
            } else {
                while ((((stack_11.Length > 0) && (_idx(stack_11, (long)((stack_11.Length - 1))) != "(")) && ((PRIORITY_0.ContainsKey(x_14) ? PRIORITY_0[x_14] : BigInteger.Zero) <= (PRIORITY_0.ContainsKey(_idx(stack_11, (long)((stack_11.Length - 1)))) ? PRIORITY_0[_idx(stack_11, (long)((stack_11.Length - 1)))] : BigInteger.Zero)))) {
                    post_12 = ((Func<string[]>)(() => { var _tmp = post_12.Cast<string>().ToList(); _tmp.Add(_idx(stack_11, (long)((stack_11.Length - 1)))); return _tmp.ToArray(); }))();
                    stack_11 = _slice<string>(stack_11, 0, (stack_11.Length - 1));
                }
                stack_11 = ((Func<string[]>)(() => { var _tmp = stack_11.Cast<string>().ToList(); _tmp.Add(x_14); return _tmp.ToArray(); }))();
            }
            i_13 = (i_13 + 1);
        };
        while ((stack_11.Length > 0)) {
            if ((_idx(stack_11, (long)((stack_11.Length - 1))) == "(")) {
                throw new Exception("invalid expression");
            }
            post_12 = ((Func<string[]>)(() => { var _tmp = post_12.Cast<string>().ToList(); _tmp.Add(_idx(stack_11, (long)((stack_11.Length - 1)))); return _tmp.ToArray(); }))();
            stack_11 = _slice<string>(stack_11, 0, (stack_11.Length - 1));
        };
        string res_15 = "";
        BigInteger j_16 = 0;
        while ((j_16 < post_12.Length)) {
            res_15 = (res_15 + _idx(post_12, (long)(j_16)));
            j_16 = (j_16 + 1);
        };
        return res_15;
    }

    public static string infix_to_prefix(string infix_17) {
        string reversed_18 = "";
        BigInteger i_19 = (infix_17.Length - 1);
        while ((i_19 >= 0)) {
            string ch_20 = infix_17.Substring((int)(i_19), 1);
            if ((ch_20 == "(")) {
                reversed_18 = (reversed_18 + ")");
            } else if ((ch_20 == ")")) {
                reversed_18 = (reversed_18 + "(");
            } else {
                reversed_18 = (reversed_18 + ch_20);
            }
            i_19 = (i_19 - 1);
        };
        string postfix_21 = Program.infix_to_postfix(reversed_18);
        string prefix_22 = Program.reverse_string(postfix_21);
        return prefix_22;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
