// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] tests_9 = new string[]{"([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""};
    static long idx_10 = 0;
    public static string[] pop_last(string[] xs_0) {
        string[] res_1 = new string[]{};
        long i_2 = 0;
        while ((i_2 < (xs_0.Length - 1))) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<string>(res_1, xs_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static bool balanced_parentheses(string s_3) {
        string[] stack_4 = new string[]{};
        Dictionary<string, string> pairs_5 = new Dictionary<string, string>{{"(", ")"}, {"[", "]"}, {"{", "}"}};
        long i_6 = 0;
        while ((i_6 < s_3.Length)) {
            string ch_7 = s_3.Substring((int)(i_6), 1);
            if ((pairs_5.ContainsKey(ch_7))) {
                stack_4 = (Enumerable.ToArray(Enumerable.Append<string>(stack_4, ch_7)));
            } else if ((((ch_7 == ")") || (ch_7 == "]")) || (ch_7 == "}"))) {
                if ((stack_4.Length == 0)) {
                    return false;
                }
                string top_8 = stack_4[(int)((stack_4.Length - 1))];
                if (((pairs_5.ContainsKey(top_8) ? pairs_5[top_8] : "") != ch_7)) {
                    return false;
                }
                stack_4 = Program.pop_last(stack_4);
            }
            i_6 = (i_6 + 1);
        };
        return (stack_4.Length == 0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_10 < tests_9.Length)) {
                Console.WriteLine(Program._fmtTop(Program.balanced_parentheses(tests_9[(int)(idx_10)])));
                idx_10 = (idx_10 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
