// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string equation_16 = "(5 + ((4 * 2) * (2 + 3)))";
    public static bool is_digit(string ch_0) {
        return ((((((((((ch_0 == "0") || (ch_0 == "1")) || (ch_0 == "2")) || (ch_0 == "3")) || (ch_0 == "4")) || (ch_0 == "5")) || (ch_0 == "6")) || (ch_0 == "7")) || (ch_0 == "8")) || (ch_0 == "9"));
    }

    public static BigInteger[] slice_without_last_int(BigInteger[] xs_1) {
        BigInteger[] res_2 = new BigInteger[]{};
        BigInteger i_3 = 0;
        while ((i_3 < (xs_1.Length - 1))) {
            res_2 = ((Func<BigInteger[]>)(() => { var _tmp = res_2.Cast<BigInteger>().ToList(); _tmp.Add(_idx(xs_1, (long)(i_3))); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string[] slice_without_last_string(string[] xs_4) {
        string[] res_5 = new string[]{};
        BigInteger i_6 = 0;
        while ((i_6 < (xs_4.Length - 1))) {
            res_5 = ((Func<string[]>)(() => { var _tmp = res_5.Cast<string>().ToList(); _tmp.Add(_idx(xs_4, (long)(i_6))); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static BigInteger dijkstras_two_stack_algorithm(string equation_7) {
        BigInteger[] operand_stack_8 = new BigInteger[]{};
        string[] operator_stack_9 = new string[]{};
        BigInteger idx_10 = 0;
        while ((idx_10 < equation_7.Length)) {
            string ch_11 = _substr(equation_7, (long)(idx_10), (long)((idx_10 + 1)));
            if (Program.is_digit(ch_11)) {
                operand_stack_8 = ((Func<BigInteger[]>)(() => { var _tmp = operand_stack_8.Cast<BigInteger>().ToList(); _tmp.Add(_atoi(ch_11)); return _tmp.ToArray(); }))();
            } else if (((((ch_11 == "+") || (ch_11 == "-")) || (ch_11 == "*")) || (ch_11 == "/"))) {
                operator_stack_9 = ((Func<string[]>)(() => { var _tmp = operator_stack_9.Cast<string>().ToList(); _tmp.Add(ch_11); return _tmp.ToArray(); }))();
            } else if ((ch_11 == ")")) {
                string opr_12 = _idx(operator_stack_9, (long)((operator_stack_9.Length - 1)));
                operator_stack_9 = Program.slice_without_last_string(operator_stack_9);
                BigInteger num1_13 = _idx(operand_stack_8, (long)((operand_stack_8.Length - 1)));
                operand_stack_8 = Program.slice_without_last_int(operand_stack_8);
                BigInteger num2_14 = _idx(operand_stack_8, (long)((operand_stack_8.Length - 1)));
                operand_stack_8 = Program.slice_without_last_int(operand_stack_8);
                BigInteger total_15 = ((opr_12 == "+") ? (num2_14 + num1_13) : ((opr_12 == "-") ? (num2_14 - num1_13) : ((opr_12 == "*") ? (num2_14 * num1_13) : (num2_14 / num1_13))));
                operand_stack_8 = ((Func<BigInteger[]>)(() => { var _tmp = operand_stack_8.Cast<BigInteger>().ToList(); _tmp.Add(total_15); return _tmp.ToArray(); }))();
            }
            idx_10 = (idx_10 + 1);
        };
        return _idx(operand_stack_8, (long)((operand_stack_8.Length - 1)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((equation_16 + " = ") + _fmtStr(Program.dijkstras_two_stack_algorithm(equation_16)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
