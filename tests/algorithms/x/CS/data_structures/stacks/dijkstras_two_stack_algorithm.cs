// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string equation_16 = "(5 + ((4 * 2) * (2 + 3)))";
    public static bool is_digit(string ch_0) {
        return ((((((((((ch_0 == "0") || (ch_0 == "1")) || (ch_0 == "2")) || (ch_0 == "3")) || (ch_0 == "4")) || (ch_0 == "5")) || (ch_0 == "6")) || (ch_0 == "7")) || (ch_0 == "8")) || (ch_0 == "9"));
    }

    public static long[] slice_without_last_int(long[] xs_1) {
        long[] res_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < (xs_1.Length - 1))) {
            res_2 = (Enumerable.ToArray(Enumerable.Append<long>(res_2, xs_1[(int)(i_3)])));
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string[] slice_without_last_string(string[] xs_4) {
        string[] res_5 = new string[]{};
        long i_6 = 0;
        while ((i_6 < (xs_4.Length - 1))) {
            res_5 = (Enumerable.ToArray(Enumerable.Append<string>(res_5, xs_4[(int)(i_6)])));
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static long dijkstras_two_stack_algorithm(string equation_7) {
        long[] operand_stack_8 = new long[]{};
        string[] operator_stack_9 = new string[]{};
        long idx_10 = 0;
        while ((idx_10 < equation_7.Length)) {
            string ch_11 = _substr(equation_7, idx_10, (idx_10 + 1));
            if (Program.is_digit(ch_11)) {
                operand_stack_8 = (Enumerable.ToArray(Enumerable.Append<long>(operand_stack_8, Convert.ToInt64(ch_11))));
            } else if (((((ch_11 == "+") || (ch_11 == "-")) || (ch_11 == "*")) || (ch_11 == "/"))) {
                operator_stack_9 = (Enumerable.ToArray(Enumerable.Append<string>(operator_stack_9, ch_11)));
            } else if ((ch_11 == ")")) {
                string opr_12 = operator_stack_9[(int)((operator_stack_9.Length - 1))];
                operator_stack_9 = Program.slice_without_last_string(operator_stack_9);
                long num1_13 = operand_stack_8[(int)((operand_stack_8.Length - 1))];
                operand_stack_8 = Program.slice_without_last_int(operand_stack_8);
                long num2_14 = operand_stack_8[(int)((operand_stack_8.Length - 1))];
                operand_stack_8 = Program.slice_without_last_int(operand_stack_8);
                long total_15 = ((opr_12 == "+") ? (num2_14 + num1_13) : ((opr_12 == "-") ? (num2_14 - num1_13) : ((opr_12 == "*") ? (num2_14 * num1_13) : (num2_14 / num1_13))));
                operand_stack_8 = (Enumerable.ToArray(Enumerable.Append<long>(operand_stack_8, total_15)));
            }
            idx_10 = (idx_10 + 1);
        };
        return operand_stack_8[(int)((operand_stack_8.Length - 1))];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((equation_16 + " = ") + _fmtStr(Program.dijkstras_two_stack_algorithm(equation_16)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
