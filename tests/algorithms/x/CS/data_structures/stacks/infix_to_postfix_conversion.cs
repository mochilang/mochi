// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, BigInteger> PRECEDENCES_0 = new Dictionary<string, BigInteger>{{"+", 1}, {"-", 1}, {"*", 2}, {"/", 2}, {"^", 3}};
    static Dictionary<string, string> ASSOCIATIVITIES_1 = new Dictionary<string, string>{{"+", "LR"}, {"-", "LR"}, {"*", "LR"}, {"/", "LR"}, {"^", "RL"}};
    public static BigInteger precedence(string ch_2) {
        if ((PRECEDENCES_0.ContainsKey(ch_2))) {
            return (PRECEDENCES_0.ContainsKey(ch_2) ? PRECEDENCES_0[ch_2] : BigInteger.Zero);
        };
        return -1;
    }

    public static string associativity(string ch_3) {
        if ((ASSOCIATIVITIES_1.ContainsKey(ch_3))) {
            return (ASSOCIATIVITIES_1.ContainsKey(ch_3) ? ASSOCIATIVITIES_1[ch_3] : "");
        };
        return "";
    }

    public static bool balanced_parentheses(string expr_4) {
        BigInteger count_5 = 0;
        BigInteger i_6 = 0;
        while ((i_6 < expr_4.Length)) {
            string ch_7 = _substr(expr_4, (long)(i_6), (long)((i_6 + 1)));
            if ((ch_7 == "(")) {
                count_5 = (count_5 + 1);
            }
            if ((ch_7 == ")")) {
                count_5 = (count_5 - 1);
                if ((count_5 < 0)) {
                    return false;
                }
            }
            i_6 = (i_6 + 1);
        };
        return (count_5 == 0);
    }

    public static bool is_letter(string ch_8) {
        return (((string.Compare("a", ch_8) <= 0) && (string.Compare(ch_8, "z") <= 0)) || ((string.Compare("A", ch_8) <= 0) && (string.Compare(ch_8, "Z") <= 0)));
    }

    public static bool is_digit(string ch_9) {
        return ((string.Compare("0", ch_9) <= 0) && (string.Compare(ch_9, "9") <= 0));
    }

    public static bool is_alnum(string ch_10) {
        return (Program.is_letter(ch_10) || Program.is_digit(ch_10));
    }

    public static string infix_to_postfix(string expression_11) {
        if ((Program.balanced_parentheses(expression_11) == false)) {
            throw new Exception("Mismatched parentheses");
        };
        string[] stack_12 = new string[]{};
        string[] postfix_13 = new string[]{};
        BigInteger i_14 = 0;
        while ((i_14 < expression_11.Length)) {
            string ch_15 = _substr(expression_11, (long)(i_14), (long)((i_14 + 1)));
            if (Program.is_alnum(ch_15)) {
                postfix_13 = ((Func<string[]>)(() => { var _tmp = postfix_13.Cast<string>().ToList(); _tmp.Add(ch_15); return _tmp.ToArray(); }))();
            } else if ((ch_15 == "(")) {
                stack_12 = ((Func<string[]>)(() => { var _tmp = stack_12.Cast<string>().ToList(); _tmp.Add(ch_15); return _tmp.ToArray(); }))();
            } else if ((ch_15 == ")")) {
                while (((stack_12.Length > 0) && (_idx(stack_12, (long)((stack_12.Length - 1))) != "("))) {
                    postfix_13 = ((Func<string[]>)(() => { var _tmp = postfix_13.Cast<string>().ToList(); _tmp.Add(_idx(stack_12, (long)((stack_12.Length - 1)))); return _tmp.ToArray(); }))();
                    stack_12 = _slice<string>(stack_12, 0, (stack_12.Length - 1));
                }
                if ((stack_12.Length > 0)) {
                    stack_12 = _slice<string>(stack_12, 0, (stack_12.Length - 1));
                }
            } else if ((ch_15 == " ")) {
            } else {
                while (true) {
                    if ((stack_12.Length == 0)) {
                        stack_12 = ((Func<string[]>)(() => { var _tmp = stack_12.Cast<string>().ToList(); _tmp.Add(ch_15); return _tmp.ToArray(); }))();
                        break;
                    }
                    BigInteger cp_16 = Program.precedence(ch_15);
                    BigInteger tp_17 = Program.precedence(_idx(stack_12, (long)((stack_12.Length - 1))));
                    if ((cp_16 > tp_17)) {
                        stack_12 = ((Func<string[]>)(() => { var _tmp = stack_12.Cast<string>().ToList(); _tmp.Add(ch_15); return _tmp.ToArray(); }))();
                        break;
                    }
                    if ((cp_16 < tp_17)) {
                        postfix_13 = ((Func<string[]>)(() => { var _tmp = postfix_13.Cast<string>().ToList(); _tmp.Add(_idx(stack_12, (long)((stack_12.Length - 1)))); return _tmp.ToArray(); }))();
                        stack_12 = _slice<string>(stack_12, 0, (stack_12.Length - 1));
                        continue;
                    }
                    if ((Program.associativity(ch_15) == "RL")) {
                        stack_12 = ((Func<string[]>)(() => { var _tmp = stack_12.Cast<string>().ToList(); _tmp.Add(ch_15); return _tmp.ToArray(); }))();
                        break;
                    }
                    postfix_13 = ((Func<string[]>)(() => { var _tmp = postfix_13.Cast<string>().ToList(); _tmp.Add(_idx(stack_12, (long)((stack_12.Length - 1)))); return _tmp.ToArray(); }))();
                    stack_12 = _slice<string>(stack_12, 0, (stack_12.Length - 1));
                }
            }
            i_14 = (i_14 + 1);
        };
        while ((stack_12.Length > 0)) {
            postfix_13 = ((Func<string[]>)(() => { var _tmp = postfix_13.Cast<string>().ToList(); _tmp.Add(_idx(stack_12, (long)((stack_12.Length - 1)))); return _tmp.ToArray(); }))();
            stack_12 = _slice<string>(stack_12, 0, (stack_12.Length - 1));
        };
        string res_18 = "";
        BigInteger j_19 = 0;
        while ((j_19 < postfix_13.Length)) {
            if ((j_19 > 0)) {
                res_18 = (res_18 + " ");
            }
            res_18 = (res_18 + _idx(postfix_13, (long)(j_19)));
            j_19 = (j_19 + 1);
        };
        return res_18;
    }

    public static void main() {
        string expression_20 = "a+b*(c^d-e)^(f+g*h)-i";
        Console.WriteLine(Program._fmtTop(expression_20));
        Console.WriteLine(Program._fmtTop(Program.infix_to_postfix(expression_20)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
