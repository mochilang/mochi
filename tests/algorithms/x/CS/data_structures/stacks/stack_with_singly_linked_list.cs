// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public string value;
    public long next;
    public override string ToString() => $"Node {{value = \"{value}\", next = {next}}}";
}
class Stack {
    public Node[] nodes;
    public long top;
    public override string ToString() => $"Stack {{nodes = {nodes}, top = {top}}}";
}
class PopResult {
    public Stack stack;
    public string value;
    public override string ToString() => $"PopResult {{stack = {stack}, value = \"{value}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Stack empty_stack() {
        return new Stack{nodes = new Node[]{}, top = -1};
    }

    public static bool is_empty(Stack stack_0) {
        return (stack_0.top == -1);
    }

    public static Stack push(Stack stack_1, string item_2) {
        Node new_node_3 = new Node{value = item_2, next = stack_1.top};
        Node[] new_nodes_4 = stack_1.nodes;
        new_nodes_4 = (Enumerable.ToArray(Enumerable.Append<Node>(new_nodes_4, new_node_3)));
        long new_top_5 = (new_nodes_4.Length - 1);
        return new Stack{nodes = new_nodes_4, top = new_top_5};
    }

    public static PopResult pop(Stack stack_6) {
        if ((stack_6.top == -1)) {
            throw new Exception("pop from empty stack");
        };
        Node node_7 = stack_6.nodes[(int)(stack_6.top)];
        long new_top_8 = node_7.next;
        Stack new_stack_9 = new Stack{nodes = stack_6.nodes, top = new_top_8};
        return new PopResult{stack = new_stack_9, value = node_7.value};
    }

    public static string peek(Stack stack_10) {
        if ((stack_10.top == -1)) {
            throw new Exception("peek from empty stack");
        };
        Node node_11 = stack_10.nodes[(int)(stack_10.top)];
        return node_11.value;
    }

    public static Stack clear(Stack stack_12) {
        return new Stack{nodes = new Node[]{}, top = -1};
    }

    public static void main() {
        Stack stack_13 = Program.empty_stack();
        Console.WriteLine(Program._fmtTop(Program.is_empty(stack_13)));
        stack_13 = Program.push(stack_13, "5");
        stack_13 = Program.push(stack_13, "9");
        stack_13 = Program.push(stack_13, "python");
        Console.WriteLine(Program._fmtTop(Program.is_empty(stack_13)));
        PopResult res_14 = Program.pop(stack_13);
        stack_13 = res_14.stack;
        Console.WriteLine(Program._fmtTop(res_14.value));
        stack_13 = Program.push(stack_13, "algorithms");
        res_14 = Program.pop(stack_13);
        stack_13 = res_14.stack;
        Console.WriteLine(Program._fmtTop(res_14.value));
        res_14 = Program.pop(stack_13);
        stack_13 = res_14.stack;
        Console.WriteLine(Program._fmtTop(res_14.value));
        res_14 = Program.pop(stack_13);
        stack_13 = res_14.stack;
        Console.WriteLine(Program._fmtTop(res_14.value));
        Console.WriteLine(Program._fmtTop(Program.is_empty(stack_13)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
