// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string test_expression_42 = "+ 9 * 2 6";
    static string test_expression2_43 = "/ * 10 2 + 4 1 ";
    static string test_expression3_44 = "+ * 2 3 / 8 4";
    public static string[] split_custom(string s_0, string sep_1) {
        string[] res_2 = new string[]{};
        string current_3 = "";
        BigInteger i_4 = 0;
        while ((i_4 < s_0.Length)) {
            string ch_5 = _substr(s_0, (long)(i_4), (long)((i_4 + 1)));
            if ((ch_5 == sep_1)) {
                res_2 = ((Func<string[]>)(() => { var _tmp = res_2.Cast<string>().ToList(); _tmp.Add(current_3); return _tmp.ToArray(); }))();
                current_3 = "";
            } else {
                current_3 = (current_3 + ch_5);
            }
            i_4 = (i_4 + 1);
        };
        res_2 = ((Func<string[]>)(() => { var _tmp = res_2.Cast<string>().ToList(); _tmp.Add(current_3); return _tmp.ToArray(); }))();
        return res_2;
    }

    public static string[] tokenize(string s_6) {
        string[] parts_7 = Program.split_custom(s_6, " ");
        string[] res_8 = new string[]{};
        BigInteger i_9 = 0;
        while ((i_9 < parts_7.Length)) {
            string p_10 = _idx(parts_7, (long)(i_9));
            if ((p_10 != "")) {
                res_8 = ((Func<string[]>)(() => { var _tmp = res_8.Cast<string>().ToList(); _tmp.Add(p_10); return _tmp.ToArray(); }))();
            }
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static bool is_digit(string ch_11) {
        return ((string.Compare(ch_11, "0") >= 0) && (string.Compare(ch_11, "9") <= 0));
    }

    public static bool is_operand(string token_12) {
        if ((token_12 == "")) {
            return false;
        };
        BigInteger i_13 = 0;
        while ((i_13 < token_12.Length)) {
            string ch_14 = _substr(token_12, (long)(i_13), (long)((i_13 + 1)));
            if ((!Program.is_digit(ch_14))) {
                return false;
            }
            i_13 = (i_13 + 1);
        };
        return true;
    }

    public static BigInteger to_int(string token_15) {
        BigInteger res_16 = 0;
        BigInteger i_17 = 0;
        while ((i_17 < token_15.Length)) {
            res_16 = ((res_16 * 10) + long.Parse(_substr(token_15, (long)(i_17), (long)((i_17 + 1)))));
            i_17 = (i_17 + 1);
        };
        return res_16;
    }

    public static double apply_op(string op_18, double a_19, double b_20) {
        if ((op_18 == "+")) {
            return (a_19 + b_20);
        };
        if ((op_18 == "-")) {
            return (a_19 - b_20);
        };
        if ((op_18 == "*")) {
            return (a_19 * b_20);
        };
        if ((op_18 == "/")) {
            return (a_19 / b_20);
        };
        return 0.0;
    }

    public static double evaluate(string expression_21) {
        string[] tokens_22 = Program.tokenize(expression_21);
        double[] stack_23 = new double[]{};
        BigInteger i_24 = (tokens_22.Length - 1);
        while ((i_24 >= 0)) {
            string token_25 = _idx(tokens_22, (long)(i_24));
            if ((token_25 != "")) {
                if (Program.is_operand(token_25)) {
                    stack_23 = ((Func<double[]>)(() => { var _tmp = stack_23.Cast<double>().ToList(); _tmp.Add((double)(Program.to_int(token_25))); return _tmp.ToArray(); }))();
                } else {
                    double o1_26 = _idx(stack_23, (long)((stack_23.Length - 1)));
                    double o2_27 = _idx(stack_23, (long)((stack_23.Length - 2)));
                    stack_23 = _slice<double>(stack_23, 0, (stack_23.Length - 2));
                    double res_28 = Program.apply_op(token_25, o1_26, o2_27);
                    stack_23 = ((Func<double[]>)(() => { var _tmp = stack_23.Cast<double>().ToList(); _tmp.Add(res_28); return _tmp.ToArray(); }))();
                }
            }
            i_24 = (i_24 - 1);
        };
        return _idx(stack_23, (long)(0));
    }

    public static double[] eval_rec(string[] tokens_29, BigInteger pos_30) {
        string token_31 = _idx(tokens_29, (long)(pos_30));
        BigInteger next_32 = (pos_30 + 1);
        if (Program.is_operand(token_31)) {
            return new double[]{(double)(Program.to_int(token_31)), (double)(next_32)};
        };
        double[] left_33 = Program.eval_rec(tokens_29, next_32);
        double a_34 = _idx(left_33, (long)(0));
        long p1_35 = (long)(_idx(left_33, (long)(1)));
        double[] right_36 = Program.eval_rec(tokens_29, p1_35);
        double b_37 = _idx(right_36, (long)(0));
        double p2_38 = _idx(right_36, (long)(1));
        return new double[]{Program.apply_op(token_31, a_34, b_37), p2_38};
    }

    public static double evaluate_recursive(string expression_39) {
        string[] tokens_40 = Program.tokenize(expression_39);
        double[] res_41 = Program.eval_rec(tokens_40, 0);
        return _idx(res_41, (long)(0));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(test_expression_42))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate(test_expression2_43))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.evaluate_recursive(test_expression3_44))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
