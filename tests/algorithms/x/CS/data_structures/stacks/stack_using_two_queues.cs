// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class StackWithQueues {
    public BigInteger[] main_queue;
    public BigInteger[] temp_queue;
    public override string ToString() => $"StackWithQueues {{main_queue = {main_queue}, temp_queue = {temp_queue}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static StackWithQueues stack_7 = Program.make_stack();
    public static StackWithQueues make_stack() {
        return new StackWithQueues{main_queue = new BigInteger[]{}, temp_queue = new BigInteger[]{}};
    }

    public static void push(StackWithQueues s_0, BigInteger item_1) {
        s_0.temp_queue = ((Func<BigInteger[]>)(() => { var _tmp = s_0.temp_queue.Cast<BigInteger>().ToList(); _tmp.Add(item_1); return _tmp.ToArray(); }))();
        while ((s_0.main_queue.Length > 0)) {
            s_0.temp_queue = ((Func<BigInteger[]>)(() => { var _tmp = s_0.temp_queue.Cast<BigInteger>().ToList(); _tmp.Add(_idx(s_0.main_queue, (long)(0))); return _tmp.ToArray(); }))();
            s_0.main_queue = _slice<BigInteger>(s_0.main_queue, 1, s_0.main_queue.Length);
        };
        BigInteger[] new_main_2 = s_0.temp_queue;
        s_0.temp_queue = s_0.main_queue;
        s_0.main_queue = new_main_2;
    }

    public static BigInteger pop(StackWithQueues s_3) {
        if ((s_3.main_queue.Length == 0)) {
            throw new Exception("pop from empty stack");
        };
        BigInteger item_4 = _idx(s_3.main_queue, (long)(0));
        s_3.main_queue = _slice<BigInteger>(s_3.main_queue, 1, s_3.main_queue.Length);
        return item_4;
    }

    public static BigInteger peek(StackWithQueues s_5) {
        if ((s_5.main_queue.Length == 0)) {
            throw new Exception("peek from empty stack");
        };
        return _idx(s_5.main_queue, (long)(0));
    }

    public static bool is_empty(StackWithQueues s_6) {
        return (s_6.main_queue.Length == 0);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.push(stack_7, 1);
            Program.push(stack_7, 2);
            Program.push(stack_7, 3);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.peek(stack_7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pop(stack_7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.peek(stack_7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pop(stack_7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pop(stack_7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_empty(stack_7))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
