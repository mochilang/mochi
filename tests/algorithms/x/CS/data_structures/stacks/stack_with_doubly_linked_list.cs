// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Node {
    public BigInteger data;
    public BigInteger next;
    public BigInteger prev;
    public override string ToString() => $"Node {{data = {data}, next = {next}, prev = {prev}}}";
}
class Stack {
    public Node[] nodes;
    public BigInteger head;
    public override string ToString() => $"Stack {{nodes = {nodes}, head = {head}}}";
}
class PopResult {
    public Stack stack;
    public BigInteger value;
    public bool ok;
    public override string ToString() => $"PopResult {{stack = {stack}, value = {value}, ok = {ok}}}";
}
class TopResult {
    public BigInteger value;
    public bool ok;
    public override string ToString() => $"TopResult {{value = {value}, ok = {ok}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Stack empty_stack() {
        return new Stack{nodes = new Node[]{}, head = -1};
    }

    public static Stack push(Stack stack_0, BigInteger value_1) {
        Node[] nodes_2 = stack_0.nodes;
        long idx_3 = nodes_2.Length;
        Node new_node_4 = new Node{data = value_1, next = stack_0.head, prev = -1};
        nodes_2 = ((Func<Node[]>)(() => { var _tmp = nodes_2.Cast<Node>().ToList(); _tmp.Add(new_node_4); return _tmp.ToArray(); }))();
        if ((stack_0.head != -1)) {
            Node head_node_5 = _idx(nodes_2, (long)(stack_0.head));
            head_node_5.prev = idx_3;
            nodes_2[(int)(stack_0.head)] = head_node_5;
        };
        return new Stack{nodes = nodes_2, head = idx_3};
    }

    public static PopResult pop(Stack stack_6) {
        if ((stack_6.head == -1)) {
            return new PopResult{stack = stack_6, value = 0, ok = false};
        };
        Node[] nodes_7 = stack_6.nodes;
        Node head_node_8 = _idx(nodes_7, (long)(stack_6.head));
        BigInteger value_9 = head_node_8.data;
        BigInteger next_idx_10 = head_node_8.next;
        if ((next_idx_10 != -1)) {
            Node next_node_11 = _idx(nodes_7, (long)(next_idx_10));
            next_node_11.prev = -1;
            nodes_7[(int)(next_idx_10)] = next_node_11;
        };
        Stack new_stack_12 = new Stack{nodes = nodes_7, head = next_idx_10};
        return new PopResult{stack = new_stack_12, value = value_9, ok = true};
    }

    public static TopResult top(Stack stack_13) {
        if ((stack_13.head == -1)) {
            return new TopResult{value = 0, ok = false};
        };
        Node node_14 = _idx(stack_13.nodes, (long)(stack_13.head));
        return new TopResult{value = node_14.data, ok = true};
    }

    public static BigInteger size(Stack stack_15) {
        BigInteger count_16 = 0;
        BigInteger idx_17 = stack_15.head;
        while ((idx_17 != -1)) {
            count_16 = (count_16 + 1);
            Node node_18 = _idx(stack_15.nodes, (long)(idx_17));
            idx_17 = node_18.next;
        };
        return count_16;
    }

    public static bool is_empty(Stack stack_19) {
        return (stack_19.head == -1);
    }

    public static void print_stack(Stack stack_20) {
        Console.WriteLine(Program._fmtTop("stack elements are:"));
        BigInteger idx_21 = stack_20.head;
        string s_22 = "";
        while ((idx_21 != -1)) {
            Node node_23 = _idx(stack_20.nodes, (long)(idx_21));
            s_22 = ((s_22 + _fmtStr(node_23.data)) + "->");
            idx_21 = node_23.next;
        };
        if ((s_22.Length > 0)) {
            Console.WriteLine(Program._fmtTop(s_22));
        };
    }

    public static void main() {
        Stack stack_24 = Program.empty_stack();
        Console.WriteLine(Program._fmtTop("Stack operations using Doubly LinkedList"));
        stack_24 = Program.push(stack_24, 4);
        stack_24 = Program.push(stack_24, 5);
        stack_24 = Program.push(stack_24, 6);
        stack_24 = Program.push(stack_24, 7);
        Program.print_stack(stack_24);
        TopResult t_25 = Program.top(stack_24);
        if (t_25.ok) {
            Console.WriteLine(Program._fmtTop(("Top element is " + _fmtStr(t_25.value))));
        } else {
            Console.WriteLine(Program._fmtTop("Top element is None"));
        };
        Console.WriteLine(Program._fmtTop(("Size of the stack is " + _fmtStr(Program.size(stack_24)))));
        PopResult p_26 = Program.pop(stack_24);
        stack_24 = p_26.stack;
        p_26 = Program.pop(stack_24);
        stack_24 = p_26.stack;
        Program.print_stack(stack_24);
        Console.WriteLine(Program._fmtTop(("stack is empty: " + _fmtStr(Program.is_empty(stack_24)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
