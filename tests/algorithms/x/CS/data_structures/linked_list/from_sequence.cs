// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long data;
    public long next;
    public override string ToString() => $"Node {{data = {data}, next = {next}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NIL_0 = (0 - 1);
    static Node[] nodes_1 = new Node[]{};
    public static long make_linked_list(long[] elements_2) {
        if ((elements_2.Length == 0)) {
            throw new Exception("The Elements List is empty");
        };
        nodes_1 = new object[]{};
        nodes_1 = (Enumerable.ToArray(Enumerable.Append<object>(nodes_1, new Node{data = elements_2[(int)(0)], next = NIL_0})));
        long head_3 = 0;
        long current_4 = head_3;
        long i_5 = 1;
        while ((i_5 < elements_2.Length)) {
            nodes_1 = (Enumerable.ToArray(Enumerable.Append<object>(nodes_1, new Node{data = elements_2[(int)(i_5)], next = NIL_0})));
            nodes_1[(int)(current_4)].next = (nodes_1.Length - 1);
            current_4 = (nodes_1.Length - 1);
            i_5 = (i_5 + 1);
        };
        return head_3;
    }

    public static string node_to_string(long head_6) {
        string s_7 = "";
        long index_8 = head_6;
        while ((index_8 != NIL_0)) {
            Node node_9 = nodes_1[(int)(index_8)];
            s_7 = (((s_7 + "<") + _fmtStr(node_9.data)) + "> ---> ");
            index_8 = node_9.next;
        };
        s_7 = (s_7 + "<END>");
        return s_7;
    }

    public static void main() {
        long[] list_data_10 = new long[]{1, 3, 5, 32, 44, 12, 43};
        Console.WriteLine(Program._fmtTop(("List: " + _fmtStr(list_data_10))));
        Console.WriteLine(Program._fmtTop("Creating Linked List from List."));
        long head_11 = Program.make_linked_list(list_data_10);
        Console.WriteLine(Program._fmtTop("Linked List:"));
        Console.WriteLine(Program._fmtTop(Program.node_to_string(head_11)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
