// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class DoublyLinkedList {
    public long[] data;
    public override string ToString() => $"DoublyLinkedList {{data = {data}}}";
}
class DeleteResult {
    public DoublyLinkedList list;
    public long value;
    public override string ToString() => $"DeleteResult {{list = {list}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static DoublyLinkedList empty_list() {
        return new DoublyLinkedList{data = new long[]{}};
    }

    public static long length(DoublyLinkedList list_0) {
        return list_0.data.Length;
    }

    public static bool is_empty(DoublyLinkedList list_1) {
        return (list_1.data.Length == 0);
    }

    public static string to_string(DoublyLinkedList list_2) {
        if ((list_2.data.Length == 0)) {
            return "";
        };
        string s_3 = _fmtStr(list_2.data[(int)(0)]);
        long i_4 = 1;
        while ((i_4 < list_2.data.Length)) {
            s_3 = ((s_3 + "->") + _fmtStr(list_2.data[(int)(i_4)]));
            i_4 = (i_4 + 1);
        };
        return s_3;
    }

    public static DoublyLinkedList insert_nth(DoublyLinkedList list_5, long index_6, long value_7) {
        if (((index_6 < 0) || (index_6 > list_5.data.Length))) {
            throw new Exception("index out of range");
        };
        long[] res_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < index_6)) {
            res_8 = (Enumerable.ToArray(Enumerable.Append<long>(res_8, list_5.data[(int)(i_9)])));
            i_9 = (i_9 + 1);
        };
        res_8 = (Enumerable.ToArray(Enumerable.Append<long>(res_8, value_7)));
        while ((i_9 < list_5.data.Length)) {
            res_8 = (Enumerable.ToArray(Enumerable.Append<long>(res_8, list_5.data[(int)(i_9)])));
            i_9 = (i_9 + 1);
        };
        return new DoublyLinkedList{data = res_8};
    }

    public static DoublyLinkedList insert_head(DoublyLinkedList list_10, long value_11) {
        return Program.insert_nth(list_10, 0, value_11);
    }

    public static DoublyLinkedList insert_tail(DoublyLinkedList list_12, long value_13) {
        return Program.insert_nth(list_12, list_12.data.Length, value_13);
    }

    public static DeleteResult delete_nth(DoublyLinkedList list_14, long index_15) {
        if (((index_15 < 0) || (index_15 >= list_14.data.Length))) {
            throw new Exception("index out of range");
        };
        long[] res_16 = new long[]{};
        long i_17 = 0;
        long removed_18 = 0;
        while ((i_17 < list_14.data.Length)) {
            if ((i_17 == index_15)) {
                removed_18 = list_14.data[(int)(i_17)];
            } else {
                res_16 = (Enumerable.ToArray(Enumerable.Append<long>(res_16, list_14.data[(int)(i_17)])));
            }
            i_17 = (i_17 + 1);
        };
        return new DeleteResult{list = new DoublyLinkedList{data = res_16}, value = removed_18};
    }

    public static DeleteResult delete_head(DoublyLinkedList list_19) {
        return Program.delete_nth(list_19, 0);
    }

    public static DeleteResult delete_tail(DoublyLinkedList list_20) {
        return Program.delete_nth(list_20, (list_20.data.Length - 1));
    }

    public static DeleteResult delete_value(DoublyLinkedList list_21, long value_22) {
        long idx_23 = 0;
        bool found_24 = false;
        while ((idx_23 < list_21.data.Length)) {
            if ((list_21.data[(int)(idx_23)] == value_22)) {
                found_24 = true;
                break;
            }
            idx_23 = (idx_23 + 1);
        };
        if ((!found_24)) {
            throw new Exception("value not found");
        };
        return Program.delete_nth(list_21, idx_23);
    }

    public static void main() {
        DoublyLinkedList dll_25 = Program.empty_list();
        dll_25 = Program.insert_tail(dll_25, 1);
        dll_25 = Program.insert_tail(dll_25, 2);
        dll_25 = Program.insert_tail(dll_25, 3);
        Console.WriteLine(Program._fmtTop(Program.to_string(dll_25)));
        dll_25 = Program.insert_head(dll_25, 0);
        Console.WriteLine(Program._fmtTop(Program.to_string(dll_25)));
        dll_25 = Program.insert_nth(dll_25, 2, 9);
        Console.WriteLine(Program._fmtTop(Program.to_string(dll_25)));
        DeleteResult res_26 = Program.delete_nth(dll_25, 2);
        dll_25 = res_26.list;
        Console.WriteLine(Program._fmtTop(res_26.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(dll_25)));
        res_26 = Program.delete_tail(dll_25);
        dll_25 = res_26.list;
        Console.WriteLine(Program._fmtTop(res_26.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(dll_25)));
        res_26 = Program.delete_value(dll_25, 1);
        dll_25 = res_26.list;
        Console.WriteLine(Program._fmtTop(res_26.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(dll_25)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
