// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class LinkedList {
    public long[] data;
    public override string ToString() => $"LinkedList {{data = {data}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string to_string(LinkedList list_0) {
        if ((list_0.data.Length == 0)) {
            return "";
        };
        string s_1 = _fmtStr(list_0.data[(int)(0)]);
        long i_2 = 1;
        while ((i_2 < list_0.data.Length)) {
            s_1 = ((s_1 + " -> ") + _fmtStr(list_0.data[(int)(i_2)]));
            i_2 = (i_2 + 1);
        };
        return s_1;
    }

    public static LinkedList reverse_k_nodes(LinkedList list_3, long k_4) {
        if ((k_4 <= 1)) {
            return list_3;
        };
        long[] res_5 = new long[]{};
        long i_6 = 0;
        while ((i_6 < list_3.data.Length)) {
            long j_7 = 0;
            long[] group_8 = new long[]{};
            while (((j_7 < k_4) && ((i_6 + j_7) < list_3.data.Length))) {
                group_8 = (Enumerable.ToArray(Enumerable.Append<long>(group_8, list_3.data[(int)((i_6 + j_7))])));
                j_7 = (j_7 + 1);
            }
            if ((group_8.Length == k_4)) {
                long g_9 = (k_4 - 1);
                while ((g_9 >= 0)) {
                    res_5 = (Enumerable.ToArray(Enumerable.Append<long>(res_5, group_8[(int)(g_9)])));
                    g_9 = (g_9 - 1);
                }
            } else {
                long g_10 = 0;
                while ((g_10 < group_8.Length)) {
                    res_5 = (Enumerable.ToArray(Enumerable.Append<long>(res_5, group_8[(int)(g_10)])));
                    g_10 = (g_10 + 1);
                }
            }
            i_6 = (i_6 + k_4);
        };
        return new LinkedList{data = res_5};
    }

    public static void main() {
        LinkedList ll_11 = new LinkedList{data = new long[]{1, 2, 3, 4, 5}};
        Console.WriteLine(Program._fmtTop(("Original Linked List: " + Program.to_string(ll_11))));
        long k_12 = 2;
        ll_11 = Program.reverse_k_nodes(ll_11, k_12);
        Console.WriteLine(Program._fmtTop(((("After reversing groups of size " + _fmtStr(k_12)) + ": ") + Program.to_string(ll_11))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
