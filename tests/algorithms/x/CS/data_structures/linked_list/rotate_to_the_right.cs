// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string list_to_string(long[] xs_0) {
        if ((xs_0.Length == 0)) {
            return "";
        };
        string s_1 = _fmtStr(xs_0[(int)(0)]);
        long i_2 = 1;
        while ((i_2 < xs_0.Length)) {
            s_1 = ((s_1 + "->") + _fmtStr(xs_0[(int)(i_2)]));
            i_2 = (i_2 + 1);
        };
        return s_1;
    }

    public static long[] insert_node(long[] xs_3, long data_4) {
        return (Enumerable.ToArray(Enumerable.Append<long>(xs_3, data_4)));
    }

    public static long[] rotate_to_the_right(long[] xs_5, long places_6) {
        if ((xs_5.Length == 0)) {
            throw new Exception("The linked list is empty.");
        };
        long n_7 = xs_5.Length;
        long k_8 = _mod(places_6, n_7);
        if ((k_8 == 0)) {
            return xs_5;
        };
        long split_9 = (n_7 - k_8);
        long[] res_10 = new long[]{};
        long i_11 = split_9;
        while ((i_11 < n_7)) {
            res_10 = (Enumerable.ToArray(Enumerable.Append<long>(res_10, xs_5[(int)(i_11)])));
            i_11 = (i_11 + 1);
        };
        long j_12 = 0;
        while ((j_12 < split_9)) {
            res_10 = (Enumerable.ToArray(Enumerable.Append<long>(res_10, xs_5[(int)(j_12)])));
            j_12 = (j_12 + 1);
        };
        return res_10;
    }

    public static void main() {
        long[] head_13 = new long[]{};
        head_13 = Program.insert_node(head_13, 5);
        head_13 = Program.insert_node(head_13, 1);
        head_13 = Program.insert_node(head_13, 2);
        head_13 = Program.insert_node(head_13, 4);
        head_13 = Program.insert_node(head_13, 3);
        Console.WriteLine(Program._fmtTop(("Original list: " + Program.list_to_string(head_13))));
        long places_14 = 3;
        long[] new_head_15 = Program.rotate_to_the_right(head_13, places_14);
        Console.WriteLine(Program._fmtTop(((("After " + _fmtStr(places_14)) + " iterations: ") + Program.list_to_string(new_head_15))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
