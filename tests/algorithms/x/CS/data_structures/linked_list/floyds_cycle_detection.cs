// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class LinkedList {
    public long[] next;
    public long head;
    public override string ToString() => $"LinkedList {{next = {next}, head = {head}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NULL_0 = (0 - 1);
    public static LinkedList empty_list() {
        return new LinkedList{next = new long[]{}, head = NULL_0};
    }

    public static LinkedList add_node(LinkedList list_1, long value_2) {
        long[] nexts_3 = list_1.next;
        long new_index_4 = nexts_3.Length;
        nexts_3 = (Enumerable.ToArray(Enumerable.Append<long>(nexts_3, NULL_0)));
        if ((list_1.head == NULL_0)) {
            return new LinkedList{next = nexts_3, head = new_index_4};
        };
        long last_5 = list_1.head;
        while ((nexts_3[(int)(last_5)] != NULL_0)) {
            last_5 = nexts_3[(int)(last_5)];
        };
        long[] new_nexts_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < nexts_3.Length)) {
            if ((i_7 == last_5)) {
                new_nexts_6 = (Enumerable.ToArray(Enumerable.Append<long>(new_nexts_6, new_index_4)));
            } else {
                new_nexts_6 = (Enumerable.ToArray(Enumerable.Append<long>(new_nexts_6, nexts_3[(int)(i_7)])));
            }
            i_7 = (i_7 + 1);
        };
        return new LinkedList{next = new_nexts_6, head = list_1.head};
    }

    public static LinkedList set_next(LinkedList list_8, long index_9, long next_index_10) {
        long[] nexts_11 = list_8.next;
        long[] new_nexts_12 = new long[]{};
        long i_13 = 0;
        while ((i_13 < nexts_11.Length)) {
            if ((i_13 == index_9)) {
                new_nexts_12 = (Enumerable.ToArray(Enumerable.Append<long>(new_nexts_12, next_index_10)));
            } else {
                new_nexts_12 = (Enumerable.ToArray(Enumerable.Append<long>(new_nexts_12, nexts_11[(int)(i_13)])));
            }
            i_13 = (i_13 + 1);
        };
        return new LinkedList{next = new_nexts_12, head = list_8.head};
    }

    public static bool detect_cycle(LinkedList list_14) {
        if ((list_14.head == NULL_0)) {
            return false;
        };
        long[] nexts_15 = list_14.next;
        long slow_16 = list_14.head;
        long fast_17 = list_14.head;
        while (((fast_17 != NULL_0) && (nexts_15[(int)(fast_17)] != NULL_0))) {
            slow_16 = nexts_15[(int)(slow_16)];
            fast_17 = nexts_15[(int)(nexts_15[(int)(fast_17)])];
            if ((slow_16 == fast_17)) {
                return true;
            }
        };
        return false;
    }

    public static void main() {
        LinkedList ll_18 = Program.empty_list();
        ll_18 = Program.add_node(ll_18, 1);
        ll_18 = Program.add_node(ll_18, 2);
        ll_18 = Program.add_node(ll_18, 3);
        ll_18 = Program.add_node(ll_18, 4);
        ll_18 = Program.set_next(ll_18, 3, 1);
        Console.WriteLine(Program._fmtTop(Program.detect_cycle(ll_18)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
