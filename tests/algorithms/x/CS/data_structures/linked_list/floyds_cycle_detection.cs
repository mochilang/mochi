// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class LinkedList {
    public BigInteger[] next;
    public BigInteger head;
    public override string ToString() => $"LinkedList {{next = {next}, head = {head}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger NULL_0 = -1;
    public static LinkedList empty_list() {
        return new LinkedList{next = new BigInteger[]{}, head = NULL_0};
    }

    public static LinkedList add_node(LinkedList list_1, BigInteger value_2) {
        BigInteger[] nexts_3 = list_1.next;
        long new_index_4 = nexts_3.Length;
        nexts_3 = ((Func<BigInteger[]>)(() => { var _tmp = nexts_3.Cast<BigInteger>().ToList(); _tmp.Add(NULL_0); return _tmp.ToArray(); }))();
        if ((list_1.head == NULL_0)) {
            return new LinkedList{next = nexts_3, head = new_index_4};
        };
        BigInteger last_5 = list_1.head;
        while ((_idx(nexts_3, (long)(last_5)) != NULL_0)) {
            last_5 = _idx(nexts_3, (long)(last_5));
        };
        BigInteger[] new_nexts_6 = new BigInteger[]{};
        BigInteger i_7 = 0;
        while ((i_7 < nexts_3.Length)) {
            if ((i_7 == last_5)) {
                new_nexts_6 = ((Func<BigInteger[]>)(() => { var _tmp = new_nexts_6.Cast<BigInteger>().ToList(); _tmp.Add(new_index_4); return _tmp.ToArray(); }))();
            } else {
                new_nexts_6 = ((Func<BigInteger[]>)(() => { var _tmp = new_nexts_6.Cast<BigInteger>().ToList(); _tmp.Add(_idx(nexts_3, (long)(i_7))); return _tmp.ToArray(); }))();
            }
            i_7 = (i_7 + 1);
        };
        return new LinkedList{next = new_nexts_6, head = list_1.head};
    }

    public static LinkedList set_next(LinkedList list_8, BigInteger index_9, BigInteger next_index_10) {
        BigInteger[] nexts_11 = list_8.next;
        BigInteger[] new_nexts_12 = new BigInteger[]{};
        BigInteger i_13 = 0;
        while ((i_13 < nexts_11.Length)) {
            if ((i_13 == index_9)) {
                new_nexts_12 = ((Func<BigInteger[]>)(() => { var _tmp = new_nexts_12.Cast<BigInteger>().ToList(); _tmp.Add(next_index_10); return _tmp.ToArray(); }))();
            } else {
                new_nexts_12 = ((Func<BigInteger[]>)(() => { var _tmp = new_nexts_12.Cast<BigInteger>().ToList(); _tmp.Add(_idx(nexts_11, (long)(i_13))); return _tmp.ToArray(); }))();
            }
            i_13 = (i_13 + 1);
        };
        return new LinkedList{next = new_nexts_12, head = list_8.head};
    }

    public static bool detect_cycle(LinkedList list_14) {
        if ((list_14.head == NULL_0)) {
            return false;
        };
        BigInteger[] nexts_15 = list_14.next;
        BigInteger slow_16 = list_14.head;
        BigInteger fast_17 = list_14.head;
        while (((fast_17 != NULL_0) && (_idx(nexts_15, (long)(fast_17)) != NULL_0))) {
            slow_16 = _idx(nexts_15, (long)(slow_16));
            fast_17 = _idx(nexts_15, (long)(_idx(nexts_15, (long)(fast_17))));
            if ((slow_16 == fast_17)) {
                return true;
            }
        };
        return false;
    }

    public static void main() {
        LinkedList ll_18 = Program.empty_list();
        ll_18 = Program.add_node(ll_18, 1);
        ll_18 = Program.add_node(ll_18, 2);
        ll_18 = Program.add_node(ll_18, 3);
        ll_18 = Program.add_node(ll_18, 4);
        ll_18 = Program.set_next(ll_18, 3, 1);
        Console.WriteLine(Program._fmtTop(Program.detect_cycle(ll_18)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
