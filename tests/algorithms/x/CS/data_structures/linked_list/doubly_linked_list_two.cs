// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Node {
    public BigInteger data;
    public BigInteger prev_index;
    public BigInteger next_index;
    public override string ToString() => $"Node {{data = {data}, prev_index = {prev_index}, next_index = {next_index}}}";
}
class LinkedList {
    public Node[] nodes;
    public BigInteger head_idx;
    public BigInteger tail_idx;
    public override string ToString() => $"LinkedList {{nodes = {nodes}, head_idx = {head_idx}, tail_idx = {tail_idx}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static LinkedList empty_list() {
        return new LinkedList{nodes = new Node[]{}, head_idx = -1, tail_idx = -1};
    }

    public static BigInteger get_head_data(LinkedList ll_0) {
        if ((ll_0.head_idx == -1)) {
            return -1;
        };
        Node node_1 = _idx(ll_0.nodes, (long)(ll_0.head_idx));
        return node_1.data;
    }

    public static BigInteger get_tail_data(LinkedList ll_2) {
        if ((ll_2.tail_idx == -1)) {
            return -1;
        };
        Node node_3 = _idx(ll_2.nodes, (long)(ll_2.tail_idx));
        return node_3.data;
    }

    public static void insert_before_node(LinkedList ll_4, BigInteger idx_5, BigInteger new_idx_6) {
        Node[] nodes_7 = ll_4.nodes;
        Node new_node_8 = _idx(nodes_7, (long)(new_idx_6));
        new_node_8.next_index = idx_5;
        Node node_9 = _idx(nodes_7, (long)(idx_5));
        BigInteger p_10 = node_9.prev_index;
        new_node_8.prev_index = p_10;
        nodes_7[(int)(new_idx_6)] = new_node_8;
        if ((p_10 == -1)) {
            ll_4.head_idx = new_idx_6;
        } else {
            Node prev_node_11 = _idx(nodes_7, (long)(p_10));
            prev_node_11.next_index = new_idx_6;
            nodes_7[(int)(p_10)] = prev_node_11;
        };
        node_9.prev_index = new_idx_6;
        nodes_7[(int)(idx_5)] = node_9;
        ll_4.nodes = nodes_7;
    }

    public static void insert_after_node(LinkedList ll_12, BigInteger idx_13, BigInteger new_idx_14) {
        Node[] nodes_15 = ll_12.nodes;
        Node new_node_16 = _idx(nodes_15, (long)(new_idx_14));
        new_node_16.prev_index = idx_13;
        Node node_17 = _idx(nodes_15, (long)(idx_13));
        BigInteger nxt_18 = node_17.next_index;
        new_node_16.next_index = nxt_18;
        nodes_15[(int)(new_idx_14)] = new_node_16;
        if ((nxt_18 == -1)) {
            ll_12.tail_idx = new_idx_14;
        } else {
            Node next_node_19 = _idx(nodes_15, (long)(nxt_18));
            next_node_19.prev_index = new_idx_14;
            nodes_15[(int)(nxt_18)] = next_node_19;
        };
        node_17.next_index = new_idx_14;
        nodes_15[(int)(idx_13)] = node_17;
        ll_12.nodes = nodes_15;
    }

    public static void set_head(LinkedList ll_20, BigInteger idx_21) {
        if ((ll_20.head_idx == -1)) {
            ll_20.head_idx = idx_21;
            ll_20.tail_idx = idx_21;
        } else {
            Program.insert_before_node(ll_20, ll_20.head_idx, idx_21);
        };
    }

    public static void set_tail(LinkedList ll_22, BigInteger idx_23) {
        if ((ll_22.tail_idx == -1)) {
            ll_22.head_idx = idx_23;
            ll_22.tail_idx = idx_23;
        } else {
            Program.insert_after_node(ll_22, ll_22.tail_idx, idx_23);
        };
    }

    public static void insert(LinkedList ll_24, BigInteger value_25) {
        Node[] nodes_26 = ll_24.nodes;
        nodes_26 = ((Func<Node[]>)(() => { var _tmp = nodes_26.Cast<Node>().ToList(); _tmp.Add(new Node{data = value_25, prev_index = -1, next_index = -1}); return _tmp.ToArray(); }))();
        BigInteger idx_27 = (nodes_26.Length - 1);
        ll_24.nodes = nodes_26;
        if ((ll_24.head_idx == -1)) {
            ll_24.head_idx = idx_27;
            ll_24.tail_idx = idx_27;
        } else {
            Program.insert_after_node(ll_24, ll_24.tail_idx, idx_27);
        };
    }

    public static void insert_at_position(LinkedList ll_28, BigInteger position_29, BigInteger value_30) {
        BigInteger current_31 = ll_28.head_idx;
        BigInteger current_pos_32 = 1;
        while ((current_31 != -1)) {
            if ((current_pos_32 == position_29)) {
                Node[] nodes_33 = ll_28.nodes;
                nodes_33 = ((Func<Node[]>)(() => { var _tmp = nodes_33.Cast<Node>().ToList(); _tmp.Add(new Node{data = value_30, prev_index = -1, next_index = -1}); return _tmp.ToArray(); }))();
                BigInteger new_idx_34 = (nodes_33.Length - 1);
                ll_28.nodes = nodes_33;
                Program.insert_before_node(ll_28, current_31, new_idx_34);
                return;
            }
            Node node_35 = _idx(ll_28.nodes, (long)(current_31));
            current_31 = node_35.next_index;
            current_pos_32 = (current_pos_32 + 1);
        };
        Program.insert(ll_28, value_30);
    }

    public static BigInteger get_node(LinkedList ll_36, BigInteger item_37) {
        BigInteger current_38 = ll_36.head_idx;
        while ((current_38 != -1)) {
            Node node_39 = _idx(ll_36.nodes, (long)(current_38));
            if ((node_39.data == item_37)) {
                return current_38;
            }
            current_38 = node_39.next_index;
        };
        return -1;
    }

    public static void remove_node_pointers(LinkedList ll_40, BigInteger idx_41) {
        Node[] nodes_42 = ll_40.nodes;
        Node node_43 = _idx(nodes_42, (long)(idx_41));
        BigInteger nxt_44 = node_43.next_index;
        BigInteger p_45 = node_43.prev_index;
        if ((nxt_44 != -1)) {
            Node nxt_node_46 = _idx(nodes_42, (long)(nxt_44));
            nxt_node_46.prev_index = p_45;
            nodes_42[(int)(nxt_44)] = nxt_node_46;
        };
        if ((p_45 != -1)) {
            Node prev_node_47 = _idx(nodes_42, (long)(p_45));
            prev_node_47.next_index = nxt_44;
            nodes_42[(int)(p_45)] = prev_node_47;
        };
        node_43.next_index = -1;
        node_43.prev_index = -1;
        nodes_42[(int)(idx_41)] = node_43;
        ll_40.nodes = nodes_42;
    }

    public static void delete_value(LinkedList ll_48, BigInteger value_49) {
        BigInteger idx_50 = Program.get_node(ll_48, value_49);
        if ((idx_50 == -1)) {
            return;
        };
        if ((idx_50 == ll_48.head_idx)) {
            Node node_51 = _idx(ll_48.nodes, (long)(idx_50));
            ll_48.head_idx = node_51.next_index;
        };
        if ((idx_50 == ll_48.tail_idx)) {
            Node node_52 = _idx(ll_48.nodes, (long)(idx_50));
            ll_48.tail_idx = node_52.prev_index;
        };
        Program.remove_node_pointers(ll_48, idx_50);
    }

    public static bool contains(LinkedList ll_53, BigInteger value_54) {
        return (Program.get_node(ll_53, value_54) != -1);
    }

    public static bool is_empty(LinkedList ll_55) {
        return (ll_55.head_idx == -1);
    }

    public static string to_string(LinkedList ll_56) {
        string res_57 = "";
        bool first_58 = true;
        BigInteger current_59 = ll_56.head_idx;
        while ((current_59 != -1)) {
            Node node_60 = _idx(ll_56.nodes, (long)(current_59));
            string val_61 = _fmtStr(node_60.data);
            if (first_58) {
                res_57 = val_61;
                first_58 = false;
            } else {
                res_57 = ((res_57 + " ") + val_61);
            }
            current_59 = node_60.next_index;
        };
        return res_57;
    }

    public static void print_list(LinkedList ll_62) {
        BigInteger current_63 = ll_62.head_idx;
        while ((current_63 != -1)) {
            Node node_64 = _idx(ll_62.nodes, (long)(current_63));
            Console.WriteLine(Program._fmtTop(_fmtStr(node_64.data)));
            current_63 = node_64.next_index;
        };
    }

    public static void main() {
        LinkedList ll_65 = Program.empty_list();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_head_data(ll_65))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_tail_data(ll_65))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_empty(ll_65))));
        Program.insert(ll_65, 10);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_head_data(ll_65))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_tail_data(ll_65))));
        Program.insert_at_position(ll_65, 3, 20);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_head_data(ll_65))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_tail_data(ll_65))));
        Node[] nodes_66 = ll_65.nodes;
        nodes_66 = ((Func<Node[]>)(() => { var _tmp = nodes_66.Cast<Node>().ToList(); _tmp.Add(new Node{data = 1000, prev_index = -1, next_index = -1}); return _tmp.ToArray(); }))();
        BigInteger idx_head_67 = (nodes_66.Length - 1);
        ll_65.nodes = nodes_66;
        Program.set_head(ll_65, idx_head_67);
        nodes_66 = ll_65.nodes;
        nodes_66 = ((Func<Node[]>)(() => { var _tmp = nodes_66.Cast<Node>().ToList(); _tmp.Add(new Node{data = 2000, prev_index = -1, next_index = -1}); return _tmp.ToArray(); }))();
        BigInteger idx_tail_68 = (nodes_66.Length - 1);
        ll_65.nodes = nodes_66;
        Program.set_tail(ll_65, idx_tail_68);
        Program.print_list(ll_65);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_empty(ll_65))));
        Program.print_list(ll_65);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains(ll_65, 10))));
        Program.delete_value(ll_65, 10);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains(ll_65, 10))));
        Program.delete_value(ll_65, 2000);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_tail_data(ll_65))));
        Program.delete_value(ll_65, 1000);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_tail_data(ll_65))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_head_data(ll_65))));
        Program.print_list(ll_65);
        Program.delete_value(ll_65, 20);
        Program.print_list(ll_65);
        BigInteger i_69 = 1;
        while ((i_69 < 10)) {
            Program.insert(ll_65, i_69);
            i_69 = (i_69 + 1);
        };
        Program.print_list(ll_65);
        LinkedList ll2_70 = Program.empty_list();
        Program.insert_at_position(ll2_70, 1, 10);
        Console.WriteLine(Program._fmtTop(Program.to_string(ll2_70)));
        Program.insert_at_position(ll2_70, 2, 20);
        Console.WriteLine(Program._fmtTop(Program.to_string(ll2_70)));
        Program.insert_at_position(ll2_70, 1, 30);
        Console.WriteLine(Program._fmtTop(Program.to_string(ll2_70)));
        Program.insert_at_position(ll2_70, 3, 40);
        Console.WriteLine(Program._fmtTop(Program.to_string(ll2_70)));
        Program.insert_at_position(ll2_70, 5, 50);
        Console.WriteLine(Program._fmtTop(Program.to_string(ll2_70)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
