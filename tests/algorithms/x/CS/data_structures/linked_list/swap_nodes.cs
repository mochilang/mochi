// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class LinkedList {
    public BigInteger[] data;
    public override string ToString() => $"LinkedList {{data = {data}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static LinkedList empty_list() {
        return new LinkedList{data = new BigInteger[]{}};
    }

    public static LinkedList push(LinkedList list_0, BigInteger value_1) {
        BigInteger[] res_2 = new BigInteger[]{value_1};
        res_2 = (Enumerable.ToArray(Enumerable.Concat(res_2, list_0.data)));
        return new LinkedList{data = res_2};
    }

    public static LinkedList swap_nodes(LinkedList list_3, BigInteger v1_4, BigInteger v2_5) {
        if ((v1_4 == v2_5)) {
            return list_3;
        };
        BigInteger idx1_6 = -1;
        BigInteger idx2_7 = -1;
        BigInteger i_8 = 0;
        while ((i_8 < list_3.data.Length)) {
            if (((_idx(list_3.data, (long)(i_8)) == v1_4) && (idx1_6 == -1))) {
                idx1_6 = i_8;
            }
            if (((_idx(list_3.data, (long)(i_8)) == v2_5) && (idx2_7 == -1))) {
                idx2_7 = i_8;
            }
            i_8 = (i_8 + 1);
        };
        if (((idx1_6 == -1) || (idx2_7 == -1))) {
            return list_3;
        };
        BigInteger[] res_9 = list_3.data;
        BigInteger temp_10 = _idx(res_9, (long)(idx1_6));
        res_9[(int)(idx1_6)] = _idx(res_9, (long)(idx2_7));
        res_9[(int)(idx2_7)] = temp_10;
        return new LinkedList{data = res_9};
    }

    public static string to_string(LinkedList list_11) {
        return _fmtStr(list_11.data);
    }

    public static void main() {
        LinkedList ll_12 = Program.empty_list();
        BigInteger i_13 = 5;
        while ((i_13 > 0)) {
            ll_12 = Program.push(ll_12, i_13);
            i_13 = (i_13 - 1);
        };
        Console.WriteLine(Program._fmtTop(("Original Linked List: " + Program.to_string(ll_12))));
        ll_12 = Program.swap_nodes(ll_12, 1, 4);
        Console.WriteLine(Program._fmtTop(("Modified Linked List: " + Program.to_string(ll_12))));
        Console.WriteLine(Program._fmtTop("After swapping the nodes whose data is 1 and 4."));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
