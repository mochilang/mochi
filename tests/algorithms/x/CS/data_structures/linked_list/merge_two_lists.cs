// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class SortedLinkedList {
    public BigInteger[] values;
    public override string ToString() => $"SortedLinkedList {{values = {values}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] sort_list(BigInteger[] nums_0) {
        BigInteger[] arr_1 = new BigInteger[]{};
        BigInteger i_2 = 0;
        while ((i_2 < nums_0.Length)) {
            arr_1 = ((Func<BigInteger[]>)(() => { var _tmp = arr_1.Cast<BigInteger>().ToList(); _tmp.Add(_idx(nums_0, (long)(i_2))); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        BigInteger j_3 = 0;
        while ((j_3 < arr_1.Length)) {
            BigInteger k_4 = (j_3 + 1);
            while ((k_4 < arr_1.Length)) {
                if ((_idx(arr_1, (long)(k_4)) < _idx(arr_1, (long)(j_3)))) {
                    BigInteger tmp_5 = _idx(arr_1, (long)(j_3));
                    arr_1[(int)(j_3)] = _idx(arr_1, (long)(k_4));
                    arr_1[(int)(k_4)] = tmp_5;
                }
                k_4 = (k_4 + 1);
            }
            j_3 = (j_3 + 1);
        };
        return arr_1;
    }

    public static SortedLinkedList make_sorted_linked_list(BigInteger[] ints_6) {
        return new SortedLinkedList{values = Program.sort_list(ints_6)};
    }

    public static BigInteger len_sll(SortedLinkedList sll_7) {
        return (BigInteger)sll_7.values.Length;
    }

    public static string str_sll(SortedLinkedList sll_8) {
        string res_9 = "";
        BigInteger i_10 = 0;
        while ((i_10 < sll_8.values.Length)) {
            res_9 = (res_9 + _fmtStr(_idx(sll_8.values, (long)(i_10))));
            if (((i_10 + 1) < sll_8.values.Length)) {
                res_9 = (res_9 + " -> ");
            }
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static SortedLinkedList merge_lists(SortedLinkedList a_11, SortedLinkedList b_12) {
        BigInteger[] combined_13 = new BigInteger[]{};
        BigInteger i_14 = 0;
        while ((i_14 < a_11.values.Length)) {
            combined_13 = ((Func<BigInteger[]>)(() => { var _tmp = combined_13.Cast<BigInteger>().ToList(); _tmp.Add(_idx(a_11.values, (long)(i_14))); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        i_14 = 0;
        while ((i_14 < b_12.values.Length)) {
            combined_13 = ((Func<BigInteger[]>)(() => { var _tmp = combined_13.Cast<BigInteger>().ToList(); _tmp.Add(_idx(b_12.values, (long)(i_14))); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        return Program.make_sorted_linked_list(combined_13);
    }

    public static void main() {
        BigInteger[] test_data_odd_15 = new BigInteger[]{3, 9, -11, 0, 7, 5, 1, -1};
        BigInteger[] test_data_even_16 = new BigInteger[]{4, 6, 2, 0, 8, 10, 3, -2};
        SortedLinkedList sll_one_17 = Program.make_sorted_linked_list(test_data_odd_15);
        SortedLinkedList sll_two_18 = Program.make_sorted_linked_list(test_data_even_16);
        SortedLinkedList merged_19 = Program.merge_lists(sll_one_17, sll_two_18);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.len_sll(merged_19))));
        Console.WriteLine(Program._fmtTop(Program.str_sll(merged_19)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
