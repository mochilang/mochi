// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NIL_0 = (0 - 1);
    static long MAX_LEVEL_1 = 6;
    static double P_2 = 0.5;
    static long seed_3 = 1;
    static long[] node_keys_7 = new long[]{};
    static long[] node_vals_8 = new long[]{};
    static long[][] node_forwards_9 = new long[][]{};
    static long level_10 = 1;
    public static double random() {
        seed_3 = _mod(((seed_3 * 13) + 7), 100);
        return (Convert.ToDouble(seed_3) / 100.0);
    }

    public static long random_level() {
        long lvl_4 = 1;
        while (((Program.random() < P_2) && (lvl_4 < MAX_LEVEL_1))) {
            lvl_4 = (lvl_4 + 1);
        };
        return lvl_4;
    }

    public static long[] empty_forward() {
        long[] f_5 = new long[]{};
        long i_6 = 0;
        while ((i_6 < MAX_LEVEL_1)) {
            f_5 = (Enumerable.ToArray(Enumerable.Append<long>(f_5, NIL_0)));
            i_6 = (i_6 + 1);
        };
        return f_5;
    }

    public static void init() {
        node_keys_7 = new long[]{-1};
        node_vals_8 = new long[]{0};
        node_forwards_9 = new long[][]{Program.empty_forward()};
        level_10 = 1;
    }

    public static void insert(long key_11, long value_12) {
        long[] update_13 = new long[]{};
        long i_14 = 0;
        while ((i_14 < MAX_LEVEL_1)) {
            update_13 = (Enumerable.ToArray(Enumerable.Append<long>(update_13, 0)));
            i_14 = (i_14 + 1);
        };
        long x_15 = 0;
        i_14 = (level_10 - 1);
        while ((i_14 >= 0)) {
            while (((node_forwards_9[(int)(x_15)][(int)(i_14)] != NIL_0) && (node_keys_7[(int)(node_forwards_9[(int)(x_15)][(int)(i_14)])] < key_11))) {
                x_15 = node_forwards_9[(int)(x_15)][(int)(i_14)];
            }
            update_13[i_14] = x_15;
            i_14 = (i_14 - 1);
        };
        x_15 = node_forwards_9[(int)(x_15)][(int)(0)];
        if (((x_15 != NIL_0) && (node_keys_7[(int)(x_15)] == key_11))) {
            node_vals_8[x_15] = value_12;
            return;
        };
        long lvl_16 = Program.random_level();
        if ((lvl_16 > level_10)) {
            long j_17 = level_10;
            while ((j_17 < lvl_16)) {
                update_13[j_17] = 0;
                j_17 = (j_17 + 1);
            }
            level_10 = lvl_16;
        };
        node_keys_7 = (Enumerable.ToArray(Enumerable.Append<long>(node_keys_7, key_11)));
        node_vals_8 = (Enumerable.ToArray(Enumerable.Append<long>(node_vals_8, value_12)));
        long[] forwards_18 = Program.empty_forward();
        long idx_19 = (node_keys_7.Length - 1);
        i_14 = 0;
        while ((i_14 < lvl_16)) {
            forwards_18[i_14] = node_forwards_9[(int)(update_13[(int)(i_14)])][(int)(i_14)];
            node_forwards_9[(int)(update_13[(int)(i_14)])][i_14] = idx_19;
            i_14 = (i_14 + 1);
        };
        node_forwards_9 = (Enumerable.ToArray(Enumerable.Append<long[]>(node_forwards_9, forwards_18)));
    }

    public static long find(long key_20) {
        long x_21 = 0;
        long i_22 = (level_10 - 1);
        while ((i_22 >= 0)) {
            while (((node_forwards_9[(int)(x_21)][(int)(i_22)] != NIL_0) && (node_keys_7[(int)(node_forwards_9[(int)(x_21)][(int)(i_22)])] < key_20))) {
                x_21 = node_forwards_9[(int)(x_21)][(int)(i_22)];
            }
            i_22 = (i_22 - 1);
        };
        x_21 = node_forwards_9[(int)(x_21)][(int)(0)];
        if (((x_21 != NIL_0) && (node_keys_7[(int)(x_21)] == key_20))) {
            return node_vals_8[(int)(x_21)];
        };
        return -1;
    }

    public static void delete(long key_23) {
        long[] update_24 = new long[]{};
        long i_25 = 0;
        while ((i_25 < MAX_LEVEL_1)) {
            update_24 = (Enumerable.ToArray(Enumerable.Append<long>(update_24, 0)));
            i_25 = (i_25 + 1);
        };
        long x_26 = 0;
        i_25 = (level_10 - 1);
        while ((i_25 >= 0)) {
            while (((node_forwards_9[(int)(x_26)][(int)(i_25)] != NIL_0) && (node_keys_7[(int)(node_forwards_9[(int)(x_26)][(int)(i_25)])] < key_23))) {
                x_26 = node_forwards_9[(int)(x_26)][(int)(i_25)];
            }
            update_24[i_25] = x_26;
            i_25 = (i_25 - 1);
        };
        x_26 = node_forwards_9[(int)(x_26)][(int)(0)];
        if (((x_26 == NIL_0) || (node_keys_7[(int)(x_26)] != key_23))) {
            return;
        };
        i_25 = 0;
        while ((i_25 < level_10)) {
            if ((node_forwards_9[(int)(update_24[(int)(i_25)])][(int)(i_25)] == x_26)) {
                node_forwards_9[(int)(update_24[(int)(i_25)])][i_25] = node_forwards_9[(int)(x_26)][(int)(i_25)];
            }
            i_25 = (i_25 + 1);
        };
        while (((level_10 > 1) && (node_forwards_9[(int)(0)][(int)((level_10 - 1))] == NIL_0))) {
            level_10 = (level_10 - 1);
        };
    }

    public static string to_string() {
        string s_27 = "";
        long x_28 = node_forwards_9[(int)(0)][(int)(0)];
        while ((x_28 != NIL_0)) {
            if ((s_27 != "")) {
                s_27 = (s_27 + " -> ");
            }
            s_27 = (((s_27 + _fmtStr(node_keys_7[(int)(x_28)])) + ":") + _fmtStr(node_vals_8[(int)(x_28)]));
            x_28 = node_forwards_9[(int)(x_28)][(int)(0)];
        };
        return s_27;
    }

    public static void main() {
        Program.init();
        Program.insert(2, 2);
        Program.insert(4, 4);
        Program.insert(6, 4);
        Program.insert(4, 5);
        Program.insert(8, 4);
        Program.insert(9, 4);
        Program.delete(4);
        Console.WriteLine(Program._fmtTop(Program.to_string()));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
