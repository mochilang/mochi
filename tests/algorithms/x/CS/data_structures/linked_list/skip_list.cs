// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger NIL_0 = -1;
    static BigInteger MAX_LEVEL_1 = 6;
    static double P_2 = 0.5;
    static BigInteger seed_3 = 1;
    static BigInteger[] node_keys_7 = new BigInteger[]{};
    static BigInteger[] node_vals_8 = new BigInteger[]{};
    static BigInteger[][] node_forwards_9 = new BigInteger[][]{};
    static BigInteger level_10 = 1;
    public static double random() {
        seed_3 = _mod(((seed_3 * 13) + 7), 100);
        return ((double)(seed_3) / 100.0);
    }

    public static BigInteger random_level() {
        BigInteger lvl_4 = 1;
        while (((Program.random() < P_2) && (lvl_4 < MAX_LEVEL_1))) {
            lvl_4 = (lvl_4 + 1);
        };
        return lvl_4;
    }

    public static BigInteger[] empty_forward() {
        BigInteger[] f_5 = new BigInteger[]{};
        BigInteger i_6 = 0;
        while ((i_6 < MAX_LEVEL_1)) {
            f_5 = ((Func<BigInteger[]>)(() => { var _tmp = f_5.Cast<BigInteger>().ToList(); _tmp.Add(NIL_0); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        return f_5;
    }

    public static void init() {
        node_keys_7 = new BigInteger[]{-1};
        node_vals_8 = new BigInteger[]{0};
        node_forwards_9 = new BigInteger[][]{Program.empty_forward()};
        level_10 = 1;
    }

    public static void insert(BigInteger key_11, BigInteger value_12) {
        BigInteger[] update_13 = new BigInteger[]{};
        BigInteger i_14 = 0;
        while ((i_14 < MAX_LEVEL_1)) {
            update_13 = ((Func<BigInteger[]>)(() => { var _tmp = update_13.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        BigInteger x_15 = 0;
        i_14 = (level_10 - 1);
        while ((i_14 >= 0)) {
            while (((_idx(_idx(node_forwards_9, (long)(x_15)), (long)(i_14)) != NIL_0) && (_idx(node_keys_7, (long)(_idx(_idx(node_forwards_9, (long)(x_15)), (long)(i_14)))) < key_11))) {
                x_15 = _idx(_idx(node_forwards_9, (long)(x_15)), (long)(i_14));
            }
            update_13[(int)(i_14)] = x_15;
            i_14 = (i_14 - 1);
        };
        x_15 = _idx(_idx(node_forwards_9, (long)(x_15)), (long)(0));
        if (((x_15 != NIL_0) && (_idx(node_keys_7, (long)(x_15)) == key_11))) {
            node_vals_8[(int)(x_15)] = value_12;
            return;
        };
        BigInteger lvl_16 = Program.random_level();
        if ((lvl_16 > level_10)) {
            BigInteger j_17 = level_10;
            while ((j_17 < lvl_16)) {
                update_13[(int)(j_17)] = 0;
                j_17 = (j_17 + 1);
            }
            level_10 = lvl_16;
        };
        node_keys_7 = ((Func<BigInteger[]>)(() => { var _tmp = node_keys_7.Cast<BigInteger>().ToList(); _tmp.Add(key_11); return _tmp.ToArray(); }))();
        node_vals_8 = ((Func<BigInteger[]>)(() => { var _tmp = node_vals_8.Cast<BigInteger>().ToList(); _tmp.Add(value_12); return _tmp.ToArray(); }))();
        BigInteger[] forwards_18 = Program.empty_forward();
        BigInteger idx_19 = (node_keys_7.Length - 1);
        i_14 = 0;
        while ((i_14 < lvl_16)) {
            forwards_18[(int)(i_14)] = _idx(_idx(node_forwards_9, (long)(_idx(update_13, (long)(i_14)))), (long)(i_14));
            _idx(node_forwards_9, (long)(_idx(update_13, (long)(i_14))))[(int)(i_14)] = idx_19;
            i_14 = (i_14 + 1);
        };
        node_forwards_9 = ((Func<BigInteger[][]>)(() => { var _tmp = node_forwards_9.Cast<BigInteger[]>().ToList(); _tmp.Add(forwards_18); return _tmp.ToArray(); }))();
    }

    public static BigInteger find(BigInteger key_20) {
        BigInteger x_21 = 0;
        BigInteger i_22 = (level_10 - 1);
        while ((i_22 >= 0)) {
            while (((_idx(_idx(node_forwards_9, (long)(x_21)), (long)(i_22)) != NIL_0) && (_idx(node_keys_7, (long)(_idx(_idx(node_forwards_9, (long)(x_21)), (long)(i_22)))) < key_20))) {
                x_21 = _idx(_idx(node_forwards_9, (long)(x_21)), (long)(i_22));
            }
            i_22 = (i_22 - 1);
        };
        x_21 = _idx(_idx(node_forwards_9, (long)(x_21)), (long)(0));
        if (((x_21 != NIL_0) && (_idx(node_keys_7, (long)(x_21)) == key_20))) {
            return _idx(node_vals_8, (long)(x_21));
        };
        return -1;
    }

    public static void delete(BigInteger key_23) {
        BigInteger[] update_24 = new BigInteger[]{};
        BigInteger i_25 = 0;
        while ((i_25 < MAX_LEVEL_1)) {
            update_24 = ((Func<BigInteger[]>)(() => { var _tmp = update_24.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_25 = (i_25 + 1);
        };
        BigInteger x_26 = 0;
        i_25 = (level_10 - 1);
        while ((i_25 >= 0)) {
            while (((_idx(_idx(node_forwards_9, (long)(x_26)), (long)(i_25)) != NIL_0) && (_idx(node_keys_7, (long)(_idx(_idx(node_forwards_9, (long)(x_26)), (long)(i_25)))) < key_23))) {
                x_26 = _idx(_idx(node_forwards_9, (long)(x_26)), (long)(i_25));
            }
            update_24[(int)(i_25)] = x_26;
            i_25 = (i_25 - 1);
        };
        x_26 = _idx(_idx(node_forwards_9, (long)(x_26)), (long)(0));
        if (((x_26 == NIL_0) || (_idx(node_keys_7, (long)(x_26)) != key_23))) {
            return;
        };
        i_25 = 0;
        while ((i_25 < level_10)) {
            if ((_idx(_idx(node_forwards_9, (long)(_idx(update_24, (long)(i_25)))), (long)(i_25)) == x_26)) {
                _idx(node_forwards_9, (long)(_idx(update_24, (long)(i_25))))[(int)(i_25)] = _idx(_idx(node_forwards_9, (long)(x_26)), (long)(i_25));
            }
            i_25 = (i_25 + 1);
        };
        while (((level_10 > 1) && (_idx(_idx(node_forwards_9, (long)(0)), (long)((level_10 - 1))) == NIL_0))) {
            level_10 = (level_10 - 1);
        };
    }

    public static string to_string() {
        string s_27 = "";
        BigInteger x_28 = _idx(_idx(node_forwards_9, (long)(0)), (long)(0));
        while ((x_28 != NIL_0)) {
            if ((s_27 != "")) {
                s_27 = (s_27 + " -> ");
            }
            s_27 = (((s_27 + _fmtStr(_idx(node_keys_7, (long)(x_28)))) + ":") + _fmtStr(_idx(node_vals_8, (long)(x_28))));
            x_28 = _idx(_idx(node_forwards_9, (long)(x_28)), (long)(0));
        };
        return s_27;
    }

    public static void main() {
        Program.init();
        Program.insert(2, 2);
        Program.insert(4, 4);
        Program.insert(6, 4);
        Program.insert(4, 5);
        Program.insert(8, 4);
        Program.insert(9, 4);
        Program.delete(4);
        Console.WriteLine(Program._fmtTop(Program.to_string()));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
