// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class LinkedList {
    public BigInteger[] data;
    public override string ToString() => $"LinkedList {{data = {data}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static LinkedList empty_list() {
        return new LinkedList{data = new BigInteger[]{}};
    }

    public static LinkedList append_value(LinkedList list_0, BigInteger value_1) {
        BigInteger[] d_2 = list_0.data;
        d_2 = ((Func<BigInteger[]>)(() => { var _tmp = d_2.Cast<BigInteger>().ToList(); _tmp.Add(value_1); return _tmp.ToArray(); }))();
        return new LinkedList{data = d_2};
    }

    public static LinkedList extend_list(LinkedList list_3, BigInteger[] items_4) {
        LinkedList result_5 = list_3;
        BigInteger i_6 = 0;
        while ((i_6 < items_4.Length)) {
            result_5 = Program.append_value(result_5, _idx(items_4, (long)(i_6)));
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static string to_string(LinkedList list_7) {
        if ((list_7.data.Length == 0)) {
            return "";
        };
        string s_8 = _fmtStr(_idx(list_7.data, (long)(0)));
        BigInteger i_9 = 1;
        while ((i_9 < list_7.data.Length)) {
            s_8 = ((s_8 + " -> ") + _fmtStr(_idx(list_7.data, (long)(i_9))));
            i_9 = (i_9 + 1);
        };
        return s_8;
    }

    public static LinkedList make_linked_list(BigInteger[] items_10) {
        if ((items_10.Length == 0)) {
            throw new Exception("The Elements List is empty");
        };
        LinkedList ll_11 = Program.empty_list();
        ll_11 = Program.extend_list(ll_11, items_10);
        return ll_11;
    }

    public static string in_reverse(LinkedList list_12) {
        if ((list_12.data.Length == 0)) {
            return "";
        };
        BigInteger i_13 = (list_12.data.Length - 1);
        string s_14 = _fmtStr(_idx(list_12.data, (long)(i_13)));
        i_13 = (i_13 - 1);
        while ((i_13 >= 0)) {
            s_14 = ((s_14 + " <- ") + _fmtStr(_idx(list_12.data, (long)(i_13))));
            i_13 = (i_13 - 1);
        };
        return s_14;
    }

    public static void main() {
        LinkedList linked_list_15 = Program.make_linked_list(new BigInteger[]{14, 52, 14, 12, 43});
        Console.WriteLine(Program._fmtTop(("Linked List:  " + Program.to_string(linked_list_15))));
        Console.WriteLine(Program._fmtTop(("Reverse List: " + Program.in_reverse(linked_list_15))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
