// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long data;
    public long next;
    public override string ToString() => $"Node {{data = {data}, next = {next}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool has_loop(Node[] nodes_0, long head_1) {
        long slow_2 = head_1;
        long fast_3 = head_1;
        while ((fast_3 != (0 - 1))) {
            Node fast_node1_4 = nodes_0[(int)(fast_3)];
            if ((fast_node1_4.next == (0 - 1))) {
                return false;
            }
            Node fast_node2_5 = nodes_0[(int)(fast_node1_4.next)];
            if ((fast_node2_5.next == (0 - 1))) {
                return false;
            }
            Node slow_node_6 = nodes_0[(int)(slow_2)];
            slow_2 = slow_node_6.next;
            fast_3 = fast_node2_5.next;
            if ((slow_2 == fast_3)) {
                return true;
            }
        };
        return false;
    }

    public static Node[] make_nodes(long[] values_7) {
        Node[] nodes_8 = new Node[]{};
        long i_9 = 0;
        while ((i_9 < values_7.Length)) {
            long next_idx_10 = ((i_9 == (values_7.Length - 1)) ? (0 - 1) : (i_9 + 1));
            nodes_8 = (Enumerable.ToArray(Enumerable.Append<Node>(nodes_8, new Node{data = values_7[(int)(i_9)], next = next_idx_10})));
            i_9 = (i_9 + 1);
        };
        return nodes_8;
    }

    public static void main() {
        Node[] list1_11 = Program.make_nodes(new long[]{1, 2, 3, 4});
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.has_loop(list1_11, 0))));
        list1_11[(int)(3)].next = 1;
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.has_loop(list1_11, 0))));
        Node[] list2_12 = Program.make_nodes(new long[]{5, 6, 5, 6});
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.has_loop(list2_12, 0))));
        Node[] list3_13 = Program.make_nodes(new long[]{1});
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.has_loop(list3_13, 0))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
