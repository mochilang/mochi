// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NIL_0 = (0 - 1);
    static Dictionary<string, long>[] nodes_1 = new Dictionary<string, long>[]{};
    public static long new_node(long value_2) {
        Dictionary<string, long> node_3 = new Dictionary<string, long>{{"data", value_2}, {"left", NIL_0}, {"right", NIL_0}, {"height", 1}};
        nodes_1 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, long>>(nodes_1, node_3)));
        return (nodes_1.Length - 1);
    }

    public static long get_height(long i_4) {
        if ((i_4 == NIL_0)) {
            return 0;
        };
        return (nodes_1[(int)(i_4)].ContainsKey("height") ? nodes_1[(int)(i_4)]["height"] : 0);
    }

    public static long my_max(long a_5, long b_6) {
        if ((a_5 > b_6)) {
            return a_5;
        };
        return b_6;
    }

    public static void update_height(long i_7) {
        nodes_1[(int)(i_7)]["height"] = (Program.my_max(Program.get_height((nodes_1[(int)(i_7)].ContainsKey("left") ? nodes_1[(int)(i_7)]["left"] : 0)), Program.get_height((nodes_1[(int)(i_7)].ContainsKey("right") ? nodes_1[(int)(i_7)]["right"] : 0))) + 1);
    }

    public static long right_rotation(long i_8) {
        long left_9 = (nodes_1[(int)(i_8)].ContainsKey("left") ? nodes_1[(int)(i_8)]["left"] : 0);
        nodes_1[(int)(i_8)]["left"] = (nodes_1[(int)(left_9)].ContainsKey("right") ? nodes_1[(int)(left_9)]["right"] : 0);
        nodes_1[(int)(left_9)]["right"] = i_8;
        Program.update_height(i_8);
        Program.update_height(left_9);
        return left_9;
    }

    public static long left_rotation(long i_10) {
        long right_11 = (nodes_1[(int)(i_10)].ContainsKey("right") ? nodes_1[(int)(i_10)]["right"] : 0);
        nodes_1[(int)(i_10)]["right"] = (nodes_1[(int)(right_11)].ContainsKey("left") ? nodes_1[(int)(right_11)]["left"] : 0);
        nodes_1[(int)(right_11)]["left"] = i_10;
        Program.update_height(i_10);
        Program.update_height(right_11);
        return right_11;
    }

    public static long lr_rotation(long i_12) {
        nodes_1[(int)(i_12)]["left"] = Program.left_rotation((nodes_1[(int)(i_12)].ContainsKey("left") ? nodes_1[(int)(i_12)]["left"] : 0));
        return Program.right_rotation(i_12);
    }

    public static long rl_rotation(long i_13) {
        nodes_1[(int)(i_13)]["right"] = Program.right_rotation((nodes_1[(int)(i_13)].ContainsKey("right") ? nodes_1[(int)(i_13)]["right"] : 0));
        return Program.left_rotation(i_13);
    }

    public static long insert_node(long i_14, long value_15) {
        if ((i_14 == NIL_0)) {
            return Program.new_node(value_15);
        };
        if ((value_15 < (nodes_1[(int)(i_14)].ContainsKey("data") ? nodes_1[(int)(i_14)]["data"] : 0))) {
            nodes_1[(int)(i_14)]["left"] = Program.insert_node((nodes_1[(int)(i_14)].ContainsKey("left") ? nodes_1[(int)(i_14)]["left"] : 0), value_15);
            if (((Program.get_height((nodes_1[(int)(i_14)].ContainsKey("left") ? nodes_1[(int)(i_14)]["left"] : 0)) - Program.get_height((nodes_1[(int)(i_14)].ContainsKey("right") ? nodes_1[(int)(i_14)]["right"] : 0))) == 2)) {
                if ((value_15 < (nodes_1[(int)((nodes_1[(int)(i_14)].ContainsKey("left") ? nodes_1[(int)(i_14)]["left"] : 0))].ContainsKey("data") ? nodes_1[(int)((nodes_1[(int)(i_14)].ContainsKey("left") ? nodes_1[(int)(i_14)]["left"] : 0))]["data"] : 0))) {
                    i_14 = Program.right_rotation(i_14);
                } else {
                    i_14 = Program.lr_rotation(i_14);
                }
            }
        } else {
            nodes_1[(int)(i_14)]["right"] = Program.insert_node((nodes_1[(int)(i_14)].ContainsKey("right") ? nodes_1[(int)(i_14)]["right"] : 0), value_15);
            if (((Program.get_height((nodes_1[(int)(i_14)].ContainsKey("right") ? nodes_1[(int)(i_14)]["right"] : 0)) - Program.get_height((nodes_1[(int)(i_14)].ContainsKey("left") ? nodes_1[(int)(i_14)]["left"] : 0))) == 2)) {
                if ((value_15 < (nodes_1[(int)((nodes_1[(int)(i_14)].ContainsKey("right") ? nodes_1[(int)(i_14)]["right"] : 0))].ContainsKey("data") ? nodes_1[(int)((nodes_1[(int)(i_14)].ContainsKey("right") ? nodes_1[(int)(i_14)]["right"] : 0))]["data"] : 0))) {
                    i_14 = Program.rl_rotation(i_14);
                } else {
                    i_14 = Program.left_rotation(i_14);
                }
            }
        };
        Program.update_height(i_14);
        return i_14;
    }

    public static long get_left_most(long i_16) {
        long cur_17 = i_16;
        while (((nodes_1[(int)(cur_17)].ContainsKey("left") ? nodes_1[(int)(cur_17)]["left"] : 0) != NIL_0)) {
            cur_17 = (nodes_1[(int)(cur_17)].ContainsKey("left") ? nodes_1[(int)(cur_17)]["left"] : 0);
        };
        return (nodes_1[(int)(cur_17)].ContainsKey("data") ? nodes_1[(int)(cur_17)]["data"] : 0);
    }

    public static long del_node(long i_18, long value_19) {
        if ((i_18 == NIL_0)) {
            return NIL_0;
        };
        if ((value_19 < (nodes_1[(int)(i_18)].ContainsKey("data") ? nodes_1[(int)(i_18)]["data"] : 0))) {
            nodes_1[(int)(i_18)]["left"] = Program.del_node((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0), value_19);
        } else if ((value_19 > (nodes_1[(int)(i_18)].ContainsKey("data") ? nodes_1[(int)(i_18)]["data"] : 0))) {
            nodes_1[(int)(i_18)]["right"] = Program.del_node((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0), value_19);
        } else if ((((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0) != NIL_0) && ((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0) != NIL_0))) {
            long temp_20 = Program.get_left_most((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0));
            nodes_1[(int)(i_18)]["data"] = temp_20;
            nodes_1[(int)(i_18)]["right"] = Program.del_node((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0), temp_20);
        } else if (((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0) != NIL_0)) {
            i_18 = (nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0);
        } else {
            i_18 = (nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0);
        };
        if ((i_18 == NIL_0)) {
            return NIL_0;
        };
        long lh_21 = Program.get_height((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0));
        long rh_22 = Program.get_height((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0));
        if (((rh_22 - lh_21) == 2)) {
            if ((Program.get_height((nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0))].ContainsKey("right") ? nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0))]["right"] : 0)) > Program.get_height((nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0))].ContainsKey("left") ? nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("right") ? nodes_1[(int)(i_18)]["right"] : 0))]["left"] : 0)))) {
                i_18 = Program.left_rotation(i_18);
            } else {
                i_18 = Program.rl_rotation(i_18);
            }
        } else if (((lh_21 - rh_22) == 2)) {
            if ((Program.get_height((nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0))].ContainsKey("left") ? nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0))]["left"] : 0)) > Program.get_height((nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0))].ContainsKey("right") ? nodes_1[(int)((nodes_1[(int)(i_18)].ContainsKey("left") ? nodes_1[(int)(i_18)]["left"] : 0))]["right"] : 0)))) {
                i_18 = Program.right_rotation(i_18);
            } else {
                i_18 = Program.lr_rotation(i_18);
            }
        };
        Program.update_height(i_18);
        return i_18;
    }

    public static string inorder(long i_23) {
        if ((i_23 == NIL_0)) {
            return "";
        };
        string left_24 = Program.inorder((nodes_1[(int)(i_23)].ContainsKey("left") ? nodes_1[(int)(i_23)]["left"] : 0));
        string right_25 = Program.inorder((nodes_1[(int)(i_23)].ContainsKey("right") ? nodes_1[(int)(i_23)]["right"] : 0));
        string res_26 = _fmtStr((nodes_1[(int)(i_23)].ContainsKey("data") ? nodes_1[(int)(i_23)]["data"] : 0));
        if ((left_24 != "")) {
            res_26 = ((left_24 + " ") + res_26);
        };
        if ((right_25 != "")) {
            res_26 = ((res_26 + " ") + right_25);
        };
        return res_26;
    }

    public static void main() {
        nodes_1 = new Dictionary<string, long>[]{};
        long root_27 = NIL_0;
        root_27 = Program.insert_node(root_27, 4);
        root_27 = Program.insert_node(root_27, 2);
        root_27 = Program.insert_node(root_27, 3);
        Console.WriteLine(Program._fmtTop(Program.inorder(root_27)));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_height(root_27))));
        root_27 = Program.del_node(root_27, 3);
        Console.WriteLine(Program._fmtTop(Program.inorder(root_27)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
