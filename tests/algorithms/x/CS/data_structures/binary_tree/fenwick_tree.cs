// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class FenwickTree {
    public BigInteger size;
    public BigInteger[] tree;
    public override string ToString() => $"FenwickTree {{size = {size}, tree = {tree}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static FenwickTree f_base_45 = Program.fenwick_from_list(new BigInteger[]{1, 2, 3, 4, 5});
    static FenwickTree f_46 = Program.fenwick_from_list(new BigInteger[]{1, 2, 3, 4, 5});
    static FenwickTree f2_47 = Program.fenwick_from_list(new BigInteger[]{1, 2, 3, 4, 5});
    static FenwickTree f3_48 = Program.fenwick_from_list(new BigInteger[]{1, 2, 0, 3, 0, 5});
    public static FenwickTree fenwick_from_list(BigInteger[] arr_0) {
        long size_1 = arr_0.Length;
        BigInteger[] tree_2 = new BigInteger[]{};
        BigInteger i_3 = 0;
        while ((i_3 < size_1)) {
            tree_2 = ((Func<BigInteger[]>)(() => { var _tmp = tree_2.Cast<BigInteger>().ToList(); _tmp.Add(_idx(arr_0, (long)(i_3))); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        i_3 = 1;
        while ((i_3 < size_1)) {
            BigInteger j_4 = Program.fenwick_next(i_3);
            if ((j_4 < size_1)) {
                tree_2[(int)(j_4)] = (_idx(tree_2, (long)(j_4)) + _idx(tree_2, (long)(i_3)));
            }
            i_3 = (i_3 + 1);
        };
        return new FenwickTree{size = size_1, tree = tree_2};
    }

    public static FenwickTree fenwick_empty(BigInteger size_5) {
        BigInteger[] tree_6 = new BigInteger[]{};
        BigInteger i_7 = 0;
        while ((i_7 < size_5)) {
            tree_6 = ((Func<BigInteger[]>)(() => { var _tmp = tree_6.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_7 = (i_7 + 1);
        };
        return new FenwickTree{size = size_5, tree = tree_6};
    }

    public static BigInteger[] fenwick_get_array(FenwickTree f_8) {
        BigInteger[] arr_9 = new BigInteger[]{};
        BigInteger i_10 = 0;
        while ((i_10 < f_8.size)) {
            arr_9 = ((Func<BigInteger[]>)(() => { var _tmp = arr_9.Cast<BigInteger>().ToList(); _tmp.Add(_idx(f_8.tree, (long)(i_10))); return _tmp.ToArray(); }))();
            i_10 = (i_10 + 1);
        };
        i_10 = (f_8.size - 1);
        while ((i_10 > 0)) {
            BigInteger j_11 = Program.fenwick_next(i_10);
            if ((j_11 < f_8.size)) {
                arr_9[(int)(j_11)] = (_idx(arr_9, (long)(j_11)) - _idx(arr_9, (long)(i_10)));
            }
            i_10 = (i_10 - 1);
        };
        return arr_9;
    }

    public static BigInteger bit_and(BigInteger a_12, BigInteger b_13) {
        BigInteger ua_14 = a_12;
        BigInteger ub_15 = b_13;
        BigInteger res_16 = 0;
        BigInteger bit_17 = 1;
        while (((ua_14 != 0) || (ub_15 != 0))) {
            if (((_mod(ua_14, 2) == 1) && (_mod(ub_15, 2) == 1))) {
                res_16 = (res_16 + bit_17);
            }
            ua_14 = (long)((ua_14 / 2));
            ub_15 = (long)((ub_15 / 2));
            bit_17 = (bit_17 * 2);
        };
        return res_16;
    }

    public static BigInteger low_bit(BigInteger x_18) {
        if ((x_18 == 0)) {
            return 0;
        };
        return (x_18 - Program.bit_and(x_18, (x_18 - 1)));
    }

    public static BigInteger fenwick_next(BigInteger index_19) {
        return (index_19 + Program.low_bit(index_19));
    }

    public static BigInteger fenwick_prev(BigInteger index_20) {
        return (index_20 - Program.low_bit(index_20));
    }

    public static FenwickTree fenwick_add(FenwickTree f_21, BigInteger index_22, BigInteger value_23) {
        BigInteger[] tree_24 = f_21.tree;
        if ((index_22 == 0)) {
            tree_24[(int)(0)] = (_idx(tree_24, (long)(0)) + value_23);
            return new FenwickTree{size = f_21.size, tree = tree_24};
        };
        BigInteger i_25 = index_22;
        while ((i_25 < f_21.size)) {
            tree_24[(int)(i_25)] = (_idx(tree_24, (long)(i_25)) + value_23);
            i_25 = Program.fenwick_next(i_25);
        };
        return new FenwickTree{size = f_21.size, tree = tree_24};
    }

    public static FenwickTree fenwick_update(FenwickTree f_26, BigInteger index_27, BigInteger value_28) {
        BigInteger current_29 = Program.fenwick_get(f_26, index_27);
        return Program.fenwick_add(f_26, index_27, (value_28 - current_29));
    }

    public static BigInteger fenwick_prefix(FenwickTree f_30, BigInteger right_31) {
        if ((right_31 == 0)) {
            return 0;
        };
        BigInteger result_32 = _idx(f_30.tree, (long)(0));
        BigInteger r_33 = (right_31 - 1);
        while ((r_33 > 0)) {
            result_32 = (result_32 + _idx(f_30.tree, (long)(r_33)));
            r_33 = Program.fenwick_prev(r_33);
        };
        return result_32;
    }

    public static BigInteger fenwick_query(FenwickTree f_34, BigInteger left_35, BigInteger right_36) {
        return (Program.fenwick_prefix(f_34, right_36) - Program.fenwick_prefix(f_34, left_35));
    }

    public static BigInteger fenwick_get(FenwickTree f_37, BigInteger index_38) {
        return Program.fenwick_query(f_37, index_38, (index_38 + 1));
    }

    public static BigInteger fenwick_rank_query(FenwickTree f_39, BigInteger value_40) {
        BigInteger v_41 = (value_40 - _idx(f_39.tree, (long)(0)));
        if ((v_41 < 0)) {
            return -1;
        };
        BigInteger j_42 = 1;
        while (((j_42 * 2) < f_39.size)) {
            j_42 = (j_42 * 2);
        };
        BigInteger i_43 = 0;
        BigInteger jj_44 = j_42;
        while ((jj_44 > 0)) {
            if ((((i_43 + jj_44) < f_39.size) && (_idx(f_39.tree, (long)((i_43 + jj_44))) <= v_41))) {
                v_41 = (v_41 - _idx(f_39.tree, (long)((i_43 + jj_44))));
                i_43 = (i_43 + jj_44);
            }
            jj_44 = (jj_44 / 2);
        };
        return i_43;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.fenwick_get_array(f_base_45)));
            f_46 = Program.fenwick_add(f_46, 0, 1);
            f_46 = Program.fenwick_add(f_46, 1, 2);
            f_46 = Program.fenwick_add(f_46, 2, 3);
            f_46 = Program.fenwick_add(f_46, 3, 4);
            f_46 = Program.fenwick_add(f_46, 4, 5);
            Console.WriteLine(Program._fmtTop(Program.fenwick_get_array(f_46)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_prefix(f2_47, 3)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_query(f2_47, 1, 4)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 0)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 2)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 1)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 3)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 5)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 6)));
            Console.WriteLine(Program._fmtTop(Program.fenwick_rank_query(f3_48, 11)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
