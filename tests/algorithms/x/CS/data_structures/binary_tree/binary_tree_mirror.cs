// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static void binary_tree_mirror_dict(Dictionary<long, long[]> tree_0, long root_1) {
        if (((root_1 == 0) || (!(tree_0.ContainsKey(root_1))))) {
            return;
        };
        long[] children_2 = (tree_0.ContainsKey(root_1) ? tree_0[root_1] : null);
        long left_3 = children_2[(int)(0)];
        long right_4 = children_2[(int)(1)];
        tree_0[root_1] = new long[]{right_4, left_3};
        Program.binary_tree_mirror_dict(tree_0, left_3);
        Program.binary_tree_mirror_dict(tree_0, right_4);
    }

    public static Dictionary<long, long[]> binary_tree_mirror(Dictionary<long, long[]> binary_tree_5, long root_6) {
        if ((binary_tree_5.Count == 0)) {
            throw new Exception("binary tree cannot be empty");
        };
        if ((!(binary_tree_5.ContainsKey(root_6)))) {
            throw new Exception((("root " + _fmtStr(root_6)) + " is not present in the binary_tree"));
        };
        Dictionary<long, long[]> tree_copy_7 = new Dictionary<long, long[]>{};
        foreach (var k_8 in binary_tree_5.Keys) {
            tree_copy_7[k_8] = (binary_tree_5.ContainsKey(k_8) ? binary_tree_5[k_8] : null);
        };
        Program.binary_tree_mirror_dict(tree_copy_7, root_6);
        return tree_copy_7;
    }

    public static void main() {
        Dictionary<long, long[]> binary_tree_9 = new Dictionary<long, long[]>{{1, new long[]{2, 3}}, {2, new long[]{4, 5}}, {3, new long[]{6, 7}}, {7, new long[]{8, 9}}};
        Console.WriteLine(Program._fmtTop(("Binary tree: " + _fmtStr(binary_tree_9))));
        Dictionary<long, long[]> mirrored_10 = Program.binary_tree_mirror(binary_tree_9, 1);
        Console.WriteLine(Program._fmtTop(("Binary tree mirror: " + _fmtStr(mirrored_10))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
