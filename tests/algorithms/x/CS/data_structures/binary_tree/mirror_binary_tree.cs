// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Tree {
    public long[] values;
    public long[] left;
    public long[] right;
    public long root;
    public override string ToString() => $"Tree {{values = {values}, left = {left}, right = {right}, root = {root}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static void mirror_node(long[] left_0, long[] right_1, long idx_2) {
        if ((idx_2 == -1)) {
            return;
        };
        long temp_3 = left_0[(int)(idx_2)];
        left_0[idx_2] = right_1[(int)(idx_2)];
        right_1[idx_2] = temp_3;
        Program.mirror_node(left_0, right_1, left_0[(int)(idx_2)]);
        Program.mirror_node(left_0, right_1, right_1[(int)(idx_2)]);
    }

    public static Tree mirror(Tree tree_4) {
        Program.mirror_node(tree_4.left, tree_4.right, tree_4.root);
        return tree_4;
    }

    public static long[] inorder(Tree tree_5, long idx_6) {
        if ((idx_6 == -1)) {
            return new long[]{};
        };
        long[] left_vals_7 = Program.inorder(tree_5, tree_5.left[(int)(idx_6)]);
        long[] right_vals_8 = Program.inorder(tree_5, tree_5.right[(int)(idx_6)]);
        return (Enumerable.ToArray(Enumerable.Concat((Enumerable.ToArray(Enumerable.Concat(left_vals_7, new long[]{tree_5.values[(int)(idx_6)]}))), right_vals_8)));
    }

    public static Tree make_tree_zero() {
        return new Tree{values = new long[]{0}, left = new long[]{-1}, right = new long[]{-1}, root = 0};
    }

    public static Tree make_tree_seven() {
        return new Tree{values = new long[]{1, 2, 3, 4, 5, 6, 7}, left = new long[]{1, 3, 5, -1, -1, -1, -1}, right = new long[]{2, 4, 6, -1, -1, -1, -1}, root = 0};
    }

    public static Tree make_tree_nine() {
        return new Tree{values = new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, left = new long[]{1, 3, -1, 6, -1, -1, -1, -1, -1}, right = new long[]{2, 4, 5, 7, 8, -1, -1, -1, -1}, root = 0};
    }

    public static void main() {
        string[] names_9 = new string[]{"zero", "seven", "nine"};
        Tree[] trees_10 = new Tree[]{Program.make_tree_zero(), Program.make_tree_seven(), Program.make_tree_nine()};
        long i_11 = 0;
        while ((i_11 < trees_10.Length)) {
            Tree tree_12 = trees_10[(int)(i_11)];
            Console.WriteLine(Program._fmtTop(((("      The " + names_9[(int)(i_11)]) + " tree: ") + _fmtStr(Program.inorder(tree_12, tree_12.root)))));
            Tree mirrored_13 = Program.mirror(tree_12);
            Console.WriteLine(Program._fmtTop(((("Mirror of " + names_9[(int)(i_11)]) + " tree: ") + _fmtStr(Program.inorder(mirrored_13, mirrored_13.root)))));
            i_11 = (i_11 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
