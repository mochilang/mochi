// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[] A_0 = new BigInteger[]{};
    static long N_1 = 0;
    static BigInteger[] st_2 = new BigInteger[]{};
    static BigInteger NEG_INF_23 = -1000000000;
    public static BigInteger left_child(BigInteger idx_3) {
        return (idx_3 * 2);
    }

    public static BigInteger right_child(BigInteger idx_4) {
        return ((idx_4 * 2) + 1);
    }

    public static void build(BigInteger idx_5, BigInteger left_6, BigInteger right_7) {
        if ((left_6 == right_7)) {
            st_2[(int)(idx_5)] = _idx(A_0, (long)(left_6));
        } else {
            BigInteger mid_8 = ((left_6 + right_7) / 2);
            Program.build(Program.left_child(idx_5), left_6, mid_8);
            Program.build(Program.right_child(idx_5), (mid_8 + 1), right_7);
            BigInteger left_val_9 = _idx(st_2, (long)(Program.left_child(idx_5)));
            BigInteger right_val_10 = _idx(st_2, (long)(Program.right_child(idx_5)));
            st_2[(int)(idx_5)] = ((left_val_9 > right_val_10) ? left_val_9 : right_val_10);
        };
    }

    public static bool update_recursive(BigInteger idx_11, BigInteger left_12, BigInteger right_13, BigInteger a_14, BigInteger b_15, BigInteger val_16) {
        if (((right_13 < a_14) || (left_12 > b_15))) {
            return true;
        };
        if ((left_12 == right_13)) {
            st_2[(int)(idx_11)] = val_16;
            return true;
        };
        BigInteger mid_17 = ((left_12 + right_13) / 2);
        Program.update_recursive(Program.left_child(idx_11), left_12, mid_17, a_14, b_15, val_16);
        Program.update_recursive(Program.right_child(idx_11), (mid_17 + 1), right_13, a_14, b_15, val_16);
        BigInteger left_val_18 = _idx(st_2, (long)(Program.left_child(idx_11)));
        BigInteger right_val_19 = _idx(st_2, (long)(Program.right_child(idx_11)));
        st_2[(int)(idx_11)] = ((left_val_18 > right_val_19) ? left_val_18 : right_val_19);
        return true;
    }

    public static bool update(BigInteger a_20, BigInteger b_21, BigInteger val_22) {
        return Program.update_recursive(1, 0, (N_1 - 1), (a_20 - 1), (b_21 - 1), val_22);
    }

    public static BigInteger query_recursive(BigInteger idx_24, BigInteger left_25, BigInteger right_26, BigInteger a_27, BigInteger b_28) {
        if (((right_26 < a_27) || (left_25 > b_28))) {
            return NEG_INF_23;
        };
        if (((left_25 >= a_27) && (right_26 <= b_28))) {
            return _idx(st_2, (long)(idx_24));
        };
        BigInteger mid_29 = ((left_25 + right_26) / 2);
        BigInteger q1_30 = Program.query_recursive(Program.left_child(idx_24), left_25, mid_29, a_27, b_28);
        BigInteger q2_31 = Program.query_recursive(Program.right_child(idx_24), (mid_29 + 1), right_26, a_27, b_28);
        return ((q1_30 > q2_31) ? q1_30 : q2_31);
    }

    public static BigInteger query(BigInteger a_32, BigInteger b_33) {
        return Program.query_recursive(1, 0, (N_1 - 1), (a_32 - 1), (b_33 - 1));
    }

    public static void show_data() {
        BigInteger i_34 = 0;
        BigInteger[] show_list_35 = new BigInteger[]{};
        while ((i_34 < N_1)) {
            show_list_35 = ((Func<BigInteger[]>)(() => { var _tmp = show_list_35.Cast<BigInteger>().ToList(); _tmp.Add(Program.query((i_34 + 1), (i_34 + 1))); return _tmp.ToArray(); }))();
            i_34 = (i_34 + 1);
        };
        Console.WriteLine(Program._fmtTop(show_list_35));
    }

    public static void main() {
        A_0 = new BigInteger[]{1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8};
        N_1 = A_0.Length;
        BigInteger i_36 = 0;
        while ((i_36 < (4 * N_1))) {
            st_2 = ((Func<BigInteger[]>)(() => { var _tmp = st_2.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_36 = (i_36 + 1);
        };
        if ((N_1 > 0)) {
            Program.build(1, 0, (N_1 - 1));
        };
        Console.WriteLine(Program._fmtTop(Program.query(4, 6)));
        Console.WriteLine(Program._fmtTop(Program.query(7, 11)));
        Console.WriteLine(Program._fmtTop(Program.query(7, 12)));
        Program.update(1, 3, 111);
        Console.WriteLine(Program._fmtTop(Program.query(1, 15)));
        Program.update(7, 8, 235);
        Program.show_data();
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
