// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class TreeNode {
    public BigInteger data;
    public BigInteger left;
    public BigInteger right;
    public override string ToString() => $"TreeNode {{data = {data}, left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger total_moves_6 = 0;
    public static BigInteger count_nodes(TreeNode[] nodes_0, BigInteger idx_1) {
        if ((idx_1 == 0)) {
            return 0;
        };
        TreeNode node_2 = _idx(nodes_0, (long)(idx_1));
        return ((Program.count_nodes(nodes_0, node_2.left) + Program.count_nodes(nodes_0, node_2.right)) + 1);
    }

    public static BigInteger count_coins(TreeNode[] nodes_3, BigInteger idx_4) {
        if ((idx_4 == 0)) {
            return 0;
        };
        TreeNode node_5 = _idx(nodes_3, (long)(idx_4));
        return ((Program.count_coins(nodes_3, node_5.left) + Program.count_coins(nodes_3, node_5.right)) + node_5.data);
    }

    public static BigInteger iabs(BigInteger x_7) {
        if ((x_7 < 0)) {
            return -x_7;
        };
        return x_7;
    }

    public static BigInteger dfs(TreeNode[] nodes_8, BigInteger idx_9) {
        if ((idx_9 == 0)) {
            return 0;
        };
        TreeNode node_10 = _idx(nodes_8, (long)(idx_9));
        BigInteger left_excess_11 = Program.dfs(nodes_8, node_10.left);
        BigInteger right_excess_12 = Program.dfs(nodes_8, node_10.right);
        BigInteger abs_left_13 = Program.iabs(left_excess_11);
        BigInteger abs_right_14 = Program.iabs(right_excess_12);
        total_moves_6 = ((total_moves_6 + abs_left_13) + abs_right_14);
        return (((node_10.data + left_excess_11) + right_excess_12) - 1);
    }

    public static BigInteger distribute_coins(TreeNode[] nodes_15, BigInteger root_16) {
        if ((root_16 == 0)) {
            return 0;
        };
        if ((Program.count_nodes(nodes_15, root_16) != Program.count_coins(nodes_15, root_16))) {
            throw new Exception("The nodes number should be same as the number of coins");
        };
        total_moves_6 = 0;
        Program.dfs(nodes_15, root_16);
        return total_moves_6;
    }

    public static void main() {
        TreeNode[] example1_17 = new TreeNode[]{new TreeNode{data = 0, left = 0, right = 0}, new TreeNode{data = 3, left = 2, right = 3}, new TreeNode{data = 0, left = 0, right = 0}, new TreeNode{data = 0, left = 0, right = 0}};
        TreeNode[] example2_18 = new TreeNode[]{new TreeNode{data = 0, left = 0, right = 0}, new TreeNode{data = 0, left = 2, right = 3}, new TreeNode{data = 3, left = 0, right = 0}, new TreeNode{data = 0, left = 0, right = 0}};
        TreeNode[] example3_19 = new TreeNode[]{new TreeNode{data = 0, left = 0, right = 0}, new TreeNode{data = 0, left = 2, right = 3}, new TreeNode{data = 0, left = 0, right = 0}, new TreeNode{data = 3, left = 0, right = 0}};
        Console.WriteLine(Program._fmtTop(Program.distribute_coins(example1_17, 1)));
        Console.WriteLine(Program._fmtTop(Program.distribute_coins(example2_18, 1)));
        Console.WriteLine(Program._fmtTop(Program.distribute_coins(example3_19, 1)));
        Console.WriteLine(Program._fmtTop(Program.distribute_coins(new TreeNode[]{new TreeNode{data = 0, left = 0, right = 0}}, 0)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
