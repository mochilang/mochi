// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Node {
    public BigInteger key;
    public BigInteger left;
    public BigInteger right;
    public override string ToString() => $"Node {{key = {key}, left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Node[] tree_11 = new Node[]{new Node{key = 10, left = 1, right = 2}, new Node{key = 5, left = 3, right = 4}, new Node{key = 20, left = 5, right = 6}, new Node{key = 3, left = -1, right = -1}, new Node{key = 7, left = -1, right = -1}, new Node{key = 15, left = -1, right = -1}, new Node{key = 25, left = -1, right = -1}};
    public static BigInteger[] inorder(Node[] nodes_0, BigInteger idx_1) {
        if ((idx_1 == -1)) {
            return new BigInteger[]{};
        };
        Node node_2 = _idx(nodes_0, (long)(idx_1));
        BigInteger[] result_3 = Program.inorder(nodes_0, node_2.left);
        result_3 = ((Func<BigInteger[]>)(() => { var _tmp = result_3.Cast<BigInteger>().ToList(); _tmp.Add(node_2.key); return _tmp.ToArray(); }))();
        result_3 = (Enumerable.ToArray(Enumerable.Concat(result_3, Program.inorder(nodes_0, node_2.right))));
        return result_3;
    }

    public static BigInteger[] floor_ceiling(Node[] nodes_4, BigInteger idx_5, BigInteger key_6) {
        object floor_val_7 = null;
        object ceiling_val_8 = null;
        BigInteger current_9 = idx_5;
        while ((current_9 != -1)) {
            Node node_10 = _idx(nodes_4, (long)(current_9));
            if ((node_10.key == key_6)) {
                floor_val_7 = node_10.key;
                ceiling_val_8 = node_10.key;
                break;
            }
            if ((key_6 < node_10.key)) {
                ceiling_val_8 = node_10.key;
                current_9 = node_10.left;
            } else {
                floor_val_7 = node_10.key;
                current_9 = node_10.right;
            }
        };
        return Enumerable.Select(new object[]{floor_val_7, ceiling_val_8}, x => x is BigInteger v ? v : default(BigInteger)).ToArray();
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(tree_11, 0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.floor_ceiling(tree_11, 0, 8))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.floor_ceiling(tree_11, 0, 14))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.floor_ceiling(tree_11, 0, -1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.floor_ceiling(tree_11, 0, 30))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
