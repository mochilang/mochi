// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long data;
    public long left;
    public long right;
    public override string ToString() => $"Node {{data = {data}, left = {left}, right = {right}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Node[] small_18 = Program.small_tree();
    public static long[] inorder(Node[] nodes_0, long index_1, long[] acc_2) {
        if ((index_1 == (0 - 1))) {
            return acc_2;
        };
        Node node_3 = nodes_0[(int)(index_1)];
        long[] res_4 = Program.inorder(nodes_0, node_3.left, acc_2);
        res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, node_3.data)));
        res_4 = Program.inorder(nodes_0, node_3.right, res_4);
        return res_4;
    }

    public static long size(Node[] nodes_5, long index_6) {
        if ((index_6 == (0 - 1))) {
            return 0;
        };
        Node node_7 = nodes_5[(int)(index_6)];
        return ((1 + Program.size(nodes_5, node_7.left)) + Program.size(nodes_5, node_7.right));
    }

    public static long depth(Node[] nodes_8, long index_9) {
        if ((index_9 == (0 - 1))) {
            return 0;
        };
        Node node_10 = nodes_8[(int)(index_9)];
        long left_depth_11 = Program.depth(nodes_8, node_10.left);
        long right_depth_12 = Program.depth(nodes_8, node_10.right);
        if ((left_depth_11 > right_depth_12)) {
            return (left_depth_11 + 1);
        };
        return (right_depth_12 + 1);
    }

    public static bool is_full(Node[] nodes_13, long index_14) {
        if ((index_14 == (0 - 1))) {
            return true;
        };
        Node node_15 = nodes_13[(int)(index_14)];
        if (((node_15.left == (0 - 1)) && (node_15.right == (0 - 1)))) {
            return true;
        };
        if (((node_15.left != (0 - 1)) && (node_15.right != (0 - 1)))) {
            return (Program.is_full(nodes_13, node_15.left) && Program.is_full(nodes_13, node_15.right));
        };
        return false;
    }

    public static Node[] small_tree() {
        Node[] arr_16 = new Node[]{};
        arr_16 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_16, new Node{data = 2, left = 1, right = 2})));
        arr_16 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_16, new Node{data = 1, left = (0 - 1), right = (0 - 1)})));
        arr_16 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_16, new Node{data = 3, left = (0 - 1), right = (0 - 1)})));
        return arr_16;
    }

    public static Node[] medium_tree() {
        Node[] arr_17 = new Node[]{};
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 4, left = 1, right = 4})));
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 2, left = 2, right = 3})));
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 1, left = (0 - 1), right = (0 - 1)})));
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 3, left = (0 - 1), right = (0 - 1)})));
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 5, left = (0 - 1), right = 5})));
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 6, left = (0 - 1), right = 6})));
        arr_17 = (Enumerable.ToArray(Enumerable.Append<Node>(arr_17, new Node{data = 7, left = (0 - 1), right = (0 - 1)})));
        return arr_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.size(small_18, 0)));
            Console.WriteLine(Program._fmtTop(Program.inorder(small_18, 0, new long[]{})));
            Console.WriteLine(Program._fmtTop(Program.depth(small_18, 0)));
            Console.WriteLine(Program._fmtTop(Program.is_full(small_18, 0)));
            Node[] medium_19 = Program.medium_tree();
            Console.WriteLine(Program._fmtTop(Program.size(medium_19, 0)));
            Console.WriteLine(Program._fmtTop(Program.inorder(medium_19, 0, new long[]{})));
            Console.WriteLine(Program._fmtTop(Program.depth(medium_19, 0)));
            Console.WriteLine(Program._fmtTop(Program.is_full(medium_19, 0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
