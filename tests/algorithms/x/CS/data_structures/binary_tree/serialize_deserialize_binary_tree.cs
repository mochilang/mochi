// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class BuildResult {
    public object node;
    public BigInteger next;
    public override string ToString() => $"BuildResult {{node = {node}, next = {next}}}";
}
class Node {
    public object left;
    public BigInteger value;
    public object right;
    public override string ToString() => $"Node {{left = {left}, value = {value}, right = {right}}}";
}
class Empty {
    public override string ToString() => $"Empty {{}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger digit(string ch_0) {
        string digits_1 = "0123456789";
        BigInteger i_2 = 0;
        while ((i_2 < digits_1.Length)) {
            if ((_substr(digits_1, (long)(i_2), (long)((i_2 + 1))) == ch_0)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return 0;
    }

    public static BigInteger to_int(string s_3) {
        BigInteger i_4 = 0;
        BigInteger sign_5 = 1;
        if (((s_3.Length > 0) && (_substr(s_3, (long)(0), (long)(1)) == "-"))) {
            sign_5 = -1;
            i_4 = 1;
        };
        BigInteger num_6 = 0;
        while ((i_4 < s_3.Length)) {
            string ch_7 = _substr(s_3, (long)(i_4), (long)((i_4 + 1)));
            num_6 = ((num_6 * 10) + Program.digit(ch_7));
            i_4 = (i_4 + 1);
        };
        return (sign_5 * num_6);
    }

    public static string[] split(string s_8, string sep_9) {
        string[] res_10 = new string[]{};
        string current_11 = "";
        BigInteger i_12 = 0;
        while ((i_12 < s_8.Length)) {
            string ch_13 = _substr(s_8, (long)(i_12), (long)((i_12 + 1)));
            if ((ch_13 == sep_9)) {
                res_10 = ((Func<string[]>)(() => { var _tmp = res_10.Cast<string>().ToList(); _tmp.Add(current_11); return _tmp.ToArray(); }))();
                current_11 = "";
            } else {
                current_11 = (current_11 + ch_13);
            }
            i_12 = (i_12 + 1);
        };
        res_10 = ((Func<string[]>)(() => { var _tmp = res_10.Cast<string>().ToList(); _tmp.Add(current_11); return _tmp.ToArray(); }))();
        return res_10;
    }

    public static string serialize(object node_14) {
        return ((Func<string>)(() => { var __t = node_14; if (__t is Empty) { return "null"; } else if (__t is Node _p1) { var l = _p1.left; var v = _p1.value; var r = _p1.right; return ((((_fmtStr(v) + ",") + serialize((object)l)) + ",") + serialize((object)r)); } return default(string); }))();
    }

    public static BuildResult build(string[] nodes_15, BigInteger idx_16) {
        string value_17 = _idx(nodes_15, (long)(idx_16));
        if ((value_17 == "null")) {
            return new BuildResult{node = new Empty{}, next = (idx_16 + 1)};
        };
        BuildResult left_res_18 = Program.build(nodes_15, (idx_16 + 1));
        BuildResult right_res_19 = Program.build(nodes_15, left_res_18.next);
        Node node_20 = new Node{left = left_res_18.node, value = Program.to_int(value_17), right = right_res_19.node};
        return new BuildResult{node = node_20, next = right_res_19.next};
    }

    public static object deserialize(string data_21) {
        string[] nodes_22 = Program.split(data_21, ",");
        BuildResult res_23 = Program.build(nodes_22, 0);
        return res_23.node;
    }

    public static object five_tree() {
        Node left_child_24 = new Node{value = 2, left = new Empty{}, right = new Empty{}};
        Node right_left_25 = new Node{value = 4, left = new Empty{}, right = new Empty{}};
        Node right_right_26 = new Node{value = 5, left = new Empty{}, right = new Empty{}};
        Node right_child_27 = new Node{value = 3, left = right_left_25, right = right_right_26};
        return (object)new Node{value = 1, left = left_child_24, right = right_child_27};
    }

    public static void main() {
        object root_28 = Program.five_tree();
        string serial_29 = Program.serialize((object)root_28);
        Console.WriteLine(Program._fmtTop(serial_29));
        object rebuilt_30 = Program.deserialize(serial_29);
        string serial2_31 = Program.serialize((object)rebuilt_30);
        Console.WriteLine(Program._fmtTop(serial2_31));
        Console.WriteLine(Program._fmtTop((serial_29 == serial2_31)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
