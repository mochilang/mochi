// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class RBTree {
    public long[][] nodes;
    public long root;
    public override string ToString() => $"RBTree {{nodes = {nodes}, root = {root}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long LABEL_0 = 0;
    static long COLOR_1 = 1;
    static long PARENT_2 = 2;
    static long LEFT_3 = 3;
    static long RIGHT_4 = 4;
    static long NEG_ONE_5 = -1;
    public static RBTree make_tree() {
        return new RBTree{nodes = new long[][]{}, root = -1};
    }

    public static RBTree rotate_left(RBTree t_6, long x_7) {
        long[][] nodes_8 = t_6.nodes;
        long y_9 = nodes_8[(int)(x_7)][(int)(RIGHT_4)];
        long yLeft_10 = nodes_8[(int)(y_9)][(int)(LEFT_3)];
        nodes_8[(int)(x_7)][RIGHT_4] = yLeft_10;
        if ((yLeft_10 != NEG_ONE_5)) {
            nodes_8[(int)(yLeft_10)][PARENT_2] = x_7;
        };
        long xParent_11 = nodes_8[(int)(x_7)][(int)(PARENT_2)];
        nodes_8[(int)(y_9)][PARENT_2] = xParent_11;
        if ((xParent_11 == NEG_ONE_5)) {
            t_6.root = y_9;
        } else if ((x_7 == nodes_8[(int)(xParent_11)][(int)(LEFT_3)])) {
            nodes_8[(int)(xParent_11)][LEFT_3] = y_9;
        } else {
            nodes_8[(int)(xParent_11)][RIGHT_4] = y_9;
        };
        nodes_8[(int)(y_9)][LEFT_3] = x_7;
        nodes_8[(int)(x_7)][PARENT_2] = y_9;
        t_6.nodes = nodes_8;
        return t_6;
    }

    public static RBTree rotate_right(RBTree t_12, long x_13) {
        long[][] nodes_14 = t_12.nodes;
        long y_15 = nodes_14[(int)(x_13)][(int)(LEFT_3)];
        long yRight_16 = nodes_14[(int)(y_15)][(int)(RIGHT_4)];
        nodes_14[(int)(x_13)][LEFT_3] = yRight_16;
        if ((yRight_16 != NEG_ONE_5)) {
            nodes_14[(int)(yRight_16)][PARENT_2] = x_13;
        };
        long xParent_17 = nodes_14[(int)(x_13)][(int)(PARENT_2)];
        nodes_14[(int)(y_15)][PARENT_2] = xParent_17;
        if ((xParent_17 == NEG_ONE_5)) {
            t_12.root = y_15;
        } else if ((x_13 == nodes_14[(int)(xParent_17)][(int)(RIGHT_4)])) {
            nodes_14[(int)(xParent_17)][RIGHT_4] = y_15;
        } else {
            nodes_14[(int)(xParent_17)][LEFT_3] = y_15;
        };
        nodes_14[(int)(y_15)][RIGHT_4] = x_13;
        nodes_14[(int)(x_13)][PARENT_2] = y_15;
        t_12.nodes = nodes_14;
        return t_12;
    }

    public static RBTree insert_fix(RBTree t_18, long z_19) {
        long[][] nodes_20 = t_18.nodes;
        while (((z_19 != t_18.root) && (nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(COLOR_1)] == 1))) {
            if ((nodes_20[(int)(z_19)][(int)(PARENT_2)] == nodes_20[(int)(nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)])][(int)(LEFT_3)])) {
                long y_21 = nodes_20[(int)(nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)])][(int)(RIGHT_4)];
                if (((y_21 != NEG_ONE_5) && (nodes_20[(int)(y_21)][(int)(COLOR_1)] == 1))) {
                    nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][COLOR_1] = 0;
                    nodes_20[(int)(y_21)][COLOR_1] = 0;
                    long gp_22 = nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)];
                    nodes_20[(int)(gp_22)][COLOR_1] = 1;
                    z_19 = gp_22;
                } else {
                    if ((z_19 == nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(RIGHT_4)])) {
                        z_19 = nodes_20[(int)(z_19)][(int)(PARENT_2)];
                        t_18.nodes = nodes_20;
                        t_18 = Program.rotate_left(t_18, z_19);
                        nodes_20 = t_18.nodes;
                    }
                    nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][COLOR_1] = 0;
                    long gp_23 = nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)];
                    nodes_20[(int)(gp_23)][COLOR_1] = 1;
                    t_18.nodes = nodes_20;
                    t_18 = Program.rotate_right(t_18, gp_23);
                    nodes_20 = t_18.nodes;
                }
            } else {
                long y_24 = nodes_20[(int)(nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)])][(int)(LEFT_3)];
                if (((y_24 != NEG_ONE_5) && (nodes_20[(int)(y_24)][(int)(COLOR_1)] == 1))) {
                    nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][COLOR_1] = 0;
                    nodes_20[(int)(y_24)][COLOR_1] = 0;
                    long gp_25 = nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)];
                    nodes_20[(int)(gp_25)][COLOR_1] = 1;
                    z_19 = gp_25;
                } else {
                    if ((z_19 == nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(LEFT_3)])) {
                        z_19 = nodes_20[(int)(z_19)][(int)(PARENT_2)];
                        t_18.nodes = nodes_20;
                        t_18 = Program.rotate_right(t_18, z_19);
                        nodes_20 = t_18.nodes;
                    }
                    nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][COLOR_1] = 0;
                    long gp_26 = nodes_20[(int)(nodes_20[(int)(z_19)][(int)(PARENT_2)])][(int)(PARENT_2)];
                    nodes_20[(int)(gp_26)][COLOR_1] = 1;
                    t_18.nodes = nodes_20;
                    t_18 = Program.rotate_left(t_18, gp_26);
                    nodes_20 = t_18.nodes;
                }
            }
        };
        nodes_20 = t_18.nodes;
        nodes_20[(int)(t_18.root)][COLOR_1] = 0;
        t_18.nodes = nodes_20;
        return t_18;
    }

    public static RBTree tree_insert(RBTree t_27, long v_28) {
        long[][] nodes_29 = t_27.nodes;
        long[] node_30 = new long[]{v_28, 1, -1, -1, -1};
        nodes_29 = (Enumerable.ToArray(Enumerable.Append<long[]>(nodes_29, node_30)));
        long idx_31 = (nodes_29.Length - 1);
        long y_32 = NEG_ONE_5;
        long x_33 = t_27.root;
        while ((x_33 != NEG_ONE_5)) {
            y_32 = x_33;
            if ((v_28 < nodes_29[(int)(x_33)][(int)(LABEL_0)])) {
                x_33 = nodes_29[(int)(x_33)][(int)(LEFT_3)];
            } else {
                x_33 = nodes_29[(int)(x_33)][(int)(RIGHT_4)];
            }
        };
        nodes_29[(int)(idx_31)][PARENT_2] = y_32;
        if ((y_32 == NEG_ONE_5)) {
            t_27.root = idx_31;
        } else if ((v_28 < nodes_29[(int)(y_32)][(int)(LABEL_0)])) {
            nodes_29[(int)(y_32)][LEFT_3] = idx_31;
        } else {
            nodes_29[(int)(y_32)][RIGHT_4] = idx_31;
        };
        t_27.nodes = nodes_29;
        t_27 = Program.insert_fix(t_27, idx_31);
        return t_27;
    }

    public static long[] inorder(RBTree t_34, long x_35, long[] acc_36) {
        if ((x_35 == NEG_ONE_5)) {
            return acc_36;
        };
        acc_36 = Program.inorder(t_34, t_34.nodes[(int)(x_35)][(int)(LEFT_3)], acc_36);
        acc_36 = (Enumerable.ToArray(Enumerable.Append<long>(acc_36, t_34.nodes[(int)(x_35)][(int)(LABEL_0)])));
        acc_36 = Program.inorder(t_34, t_34.nodes[(int)(x_35)][(int)(RIGHT_4)], acc_36);
        return acc_36;
    }

    public static void main() {
        RBTree t_37 = Program.make_tree();
        long[] values_38 = new long[]{10, 20, 30, 15, 25, 5, 1};
        long i_39 = 0;
        while ((i_39 < values_38.Length)) {
            t_37 = Program.tree_insert(t_37, values_38[(int)(i_39)]);
            i_39 = (i_39 + 1);
        };
        long[] res_40 = new long[]{};
        res_40 = Program.inorder(t_37, t_37.root, res_40);
        Console.WriteLine(Program._fmtTop(_fmtStr(res_40)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
