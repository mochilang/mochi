// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class RBTree {
    public BigInteger[][] nodes;
    public BigInteger root;
    public override string ToString() => $"RBTree {{nodes = {nodes}, root = {root}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger LABEL_0 = 0;
    static BigInteger COLOR_1 = 1;
    static BigInteger PARENT_2 = 2;
    static BigInteger LEFT_3 = 3;
    static BigInteger RIGHT_4 = 4;
    static BigInteger NEG_ONE_5 = -1;
    public static RBTree make_tree() {
        return new RBTree{nodes = new BigInteger[][]{}, root = -1};
    }

    public static RBTree rotate_left(RBTree t_6, BigInteger x_7) {
        BigInteger[][] nodes_8 = t_6.nodes;
        BigInteger y_9 = _idx(_idx(nodes_8, (long)(x_7)), (long)(RIGHT_4));
        BigInteger yLeft_10 = _idx(_idx(nodes_8, (long)(y_9)), (long)(LEFT_3));
        _idx(nodes_8, (long)(x_7))[(int)(RIGHT_4)] = yLeft_10;
        if ((yLeft_10 != NEG_ONE_5)) {
            _idx(nodes_8, (long)(yLeft_10))[(int)(PARENT_2)] = x_7;
        };
        BigInteger xParent_11 = _idx(_idx(nodes_8, (long)(x_7)), (long)(PARENT_2));
        _idx(nodes_8, (long)(y_9))[(int)(PARENT_2)] = xParent_11;
        if ((xParent_11 == NEG_ONE_5)) {
            t_6.root = y_9;
        } else if ((x_7 == _idx(_idx(nodes_8, (long)(xParent_11)), (long)(LEFT_3)))) {
            _idx(nodes_8, (long)(xParent_11))[(int)(LEFT_3)] = y_9;
        } else {
            _idx(nodes_8, (long)(xParent_11))[(int)(RIGHT_4)] = y_9;
        };
        _idx(nodes_8, (long)(y_9))[(int)(LEFT_3)] = x_7;
        _idx(nodes_8, (long)(x_7))[(int)(PARENT_2)] = y_9;
        t_6.nodes = nodes_8;
        return t_6;
    }

    public static RBTree rotate_right(RBTree t_12, BigInteger x_13) {
        BigInteger[][] nodes_14 = t_12.nodes;
        BigInteger y_15 = _idx(_idx(nodes_14, (long)(x_13)), (long)(LEFT_3));
        BigInteger yRight_16 = _idx(_idx(nodes_14, (long)(y_15)), (long)(RIGHT_4));
        _idx(nodes_14, (long)(x_13))[(int)(LEFT_3)] = yRight_16;
        if ((yRight_16 != NEG_ONE_5)) {
            _idx(nodes_14, (long)(yRight_16))[(int)(PARENT_2)] = x_13;
        };
        BigInteger xParent_17 = _idx(_idx(nodes_14, (long)(x_13)), (long)(PARENT_2));
        _idx(nodes_14, (long)(y_15))[(int)(PARENT_2)] = xParent_17;
        if ((xParent_17 == NEG_ONE_5)) {
            t_12.root = y_15;
        } else if ((x_13 == _idx(_idx(nodes_14, (long)(xParent_17)), (long)(RIGHT_4)))) {
            _idx(nodes_14, (long)(xParent_17))[(int)(RIGHT_4)] = y_15;
        } else {
            _idx(nodes_14, (long)(xParent_17))[(int)(LEFT_3)] = y_15;
        };
        _idx(nodes_14, (long)(y_15))[(int)(RIGHT_4)] = x_13;
        _idx(nodes_14, (long)(x_13))[(int)(PARENT_2)] = y_15;
        t_12.nodes = nodes_14;
        return t_12;
    }

    public static RBTree insert_fix(RBTree t_18, BigInteger z_19) {
        BigInteger[][] nodes_20 = t_18.nodes;
        while (((z_19 != t_18.root) && (_idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(COLOR_1)) == 1))) {
            if ((_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)) == _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2)))), (long)(LEFT_3)))) {
                BigInteger y_21 = _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2)))), (long)(RIGHT_4));
                if (((y_21 != NEG_ONE_5) && (_idx(_idx(nodes_20, (long)(y_21)), (long)(COLOR_1)) == 1))) {
                    _idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2))))[(int)(COLOR_1)] = 0;
                    _idx(nodes_20, (long)(y_21))[(int)(COLOR_1)] = 0;
                    BigInteger gp_22 = _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2));
                    _idx(nodes_20, (long)(gp_22))[(int)(COLOR_1)] = 1;
                    z_19 = gp_22;
                } else {
                    if ((z_19 == _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(RIGHT_4)))) {
                        z_19 = _idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2));
                        t_18.nodes = nodes_20;
                        t_18 = Program.rotate_left(t_18, z_19);
                        nodes_20 = t_18.nodes;
                    }
                    _idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2))))[(int)(COLOR_1)] = 0;
                    BigInteger gp_23 = _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2));
                    _idx(nodes_20, (long)(gp_23))[(int)(COLOR_1)] = 1;
                    t_18.nodes = nodes_20;
                    t_18 = Program.rotate_right(t_18, gp_23);
                    nodes_20 = t_18.nodes;
                }
            } else {
                BigInteger y_24 = _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2)))), (long)(LEFT_3));
                if (((y_24 != NEG_ONE_5) && (_idx(_idx(nodes_20, (long)(y_24)), (long)(COLOR_1)) == 1))) {
                    _idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2))))[(int)(COLOR_1)] = 0;
                    _idx(nodes_20, (long)(y_24))[(int)(COLOR_1)] = 0;
                    BigInteger gp_25 = _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2));
                    _idx(nodes_20, (long)(gp_25))[(int)(COLOR_1)] = 1;
                    z_19 = gp_25;
                } else {
                    if ((z_19 == _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(LEFT_3)))) {
                        z_19 = _idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2));
                        t_18.nodes = nodes_20;
                        t_18 = Program.rotate_right(t_18, z_19);
                        nodes_20 = t_18.nodes;
                    }
                    _idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2))))[(int)(COLOR_1)] = 0;
                    BigInteger gp_26 = _idx(_idx(nodes_20, (long)(_idx(_idx(nodes_20, (long)(z_19)), (long)(PARENT_2)))), (long)(PARENT_2));
                    _idx(nodes_20, (long)(gp_26))[(int)(COLOR_1)] = 1;
                    t_18.nodes = nodes_20;
                    t_18 = Program.rotate_left(t_18, gp_26);
                    nodes_20 = t_18.nodes;
                }
            }
        };
        nodes_20 = t_18.nodes;
        _idx(nodes_20, (long)(t_18.root))[(int)(COLOR_1)] = 0;
        t_18.nodes = nodes_20;
        return t_18;
    }

    public static RBTree tree_insert(RBTree t_27, BigInteger v_28) {
        BigInteger[][] nodes_29 = t_27.nodes;
        BigInteger[] node_30 = new BigInteger[]{v_28, 1, -1, -1, -1};
        nodes_29 = ((Func<BigInteger[][]>)(() => { var _tmp = nodes_29.Cast<BigInteger[]>().ToList(); _tmp.Add(node_30); return _tmp.ToArray(); }))();
        BigInteger idx_31 = (nodes_29.Length - 1);
        BigInteger y_32 = NEG_ONE_5;
        BigInteger x_33 = t_27.root;
        while ((x_33 != NEG_ONE_5)) {
            y_32 = x_33;
            if ((v_28 < _idx(_idx(nodes_29, (long)(x_33)), (long)(LABEL_0)))) {
                x_33 = _idx(_idx(nodes_29, (long)(x_33)), (long)(LEFT_3));
            } else {
                x_33 = _idx(_idx(nodes_29, (long)(x_33)), (long)(RIGHT_4));
            }
        };
        _idx(nodes_29, (long)(idx_31))[(int)(PARENT_2)] = y_32;
        if ((y_32 == NEG_ONE_5)) {
            t_27.root = idx_31;
        } else if ((v_28 < _idx(_idx(nodes_29, (long)(y_32)), (long)(LABEL_0)))) {
            _idx(nodes_29, (long)(y_32))[(int)(LEFT_3)] = idx_31;
        } else {
            _idx(nodes_29, (long)(y_32))[(int)(RIGHT_4)] = idx_31;
        };
        t_27.nodes = nodes_29;
        t_27 = Program.insert_fix(t_27, idx_31);
        return t_27;
    }

    public static BigInteger[] inorder(RBTree t_34, BigInteger x_35, BigInteger[] acc_36) {
        if ((x_35 == NEG_ONE_5)) {
            return acc_36;
        };
        acc_36 = Program.inorder(t_34, _idx(_idx(t_34.nodes, (long)(x_35)), (long)(LEFT_3)), acc_36);
        acc_36 = ((Func<BigInteger[]>)(() => { var _tmp = acc_36.Cast<BigInteger>().ToList(); _tmp.Add(_idx(_idx(t_34.nodes, (long)(x_35)), (long)(LABEL_0))); return _tmp.ToArray(); }))();
        acc_36 = Program.inorder(t_34, _idx(_idx(t_34.nodes, (long)(x_35)), (long)(RIGHT_4)), acc_36);
        return acc_36;
    }

    public static void main() {
        RBTree t_37 = Program.make_tree();
        BigInteger[] values_38 = new BigInteger[]{10, 20, 30, 15, 25, 5, 1};
        BigInteger i_39 = 0;
        while ((i_39 < values_38.Length)) {
            t_37 = Program.tree_insert(t_37, _idx(values_38, (long)(i_39)));
            i_39 = (i_39 + 1);
        };
        BigInteger[] res_40 = new BigInteger[]{};
        res_40 = Program.inorder(t_37, t_37.root, res_40);
        Console.WriteLine(Program._fmtTop(_fmtStr(res_40)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
