// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Empty {
    public override string ToString() => $"Empty {{}}";
}
class Node {
    public object left;
    public BigInteger value;
    public object right;
    public override string ToString() => $"Node {{left = {left}, value = {value}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger dfs(object node_0, BigInteger target_1, BigInteger current_2) {
        return ((Func<BigInteger>)(() => { var __t = node_0; if (__t is Empty) { return 0; } else if (__t is Node _p1) { var l = _p1.left; var v = _p1.value; var r = _p1.right; return (((((((dynamic)(current_2)) + ((dynamic)(v))) == target_1) ? 1 : 0) + dfs((object)l, target_1, (((dynamic)(current_2)) + ((dynamic)(v))))) + dfs((object)r, target_1, (((dynamic)(current_2)) + ((dynamic)(v))))); } return default(BigInteger); }))();
    }

    public static BigInteger path_sum(object node_3, BigInteger target_4) {
        return ((Func<BigInteger>)(() => { var __t = node_3; if (__t is Empty) { return 0; } else if (__t is Node _p1) { var l = _p1.left; var v = _p1.value; var r = _p1.right; return ((Program.dfs((object)node_3, target_4, 0) + path_sum((object)l, target_4)) + path_sum((object)r, target_4)); } return default(BigInteger); }))();
    }

    public static object sample_tree_one() {
        return (object)new Node{value = 10, left = new Node{value = 5, left = new Node{value = 3, left = new Node{value = 3, left = new Empty{}, right = new Empty{}}, right = new Node{value = -2, left = new Empty{}, right = new Empty{}}}, right = new Node{value = 2, left = new Empty{}, right = new Node{value = 1, left = new Empty{}, right = new Empty{}}}}, right = new Node{value = -3, left = new Empty{}, right = new Node{value = 11, left = new Empty{}, right = new Empty{}}}};
    }

    public static object sample_tree_two() {
        return (object)new Node{value = 10, left = new Node{value = 5, left = new Node{value = 3, left = new Node{value = 3, left = new Empty{}, right = new Empty{}}, right = new Node{value = -2, left = new Empty{}, right = new Empty{}}}, right = new Node{value = 2, left = new Empty{}, right = new Node{value = 1, left = new Empty{}, right = new Empty{}}}}, right = new Node{value = -3, left = new Empty{}, right = new Node{value = 10, left = new Empty{}, right = new Empty{}}}};
    }

    public static void main() {
        object tree1_5 = Program.sample_tree_one();
        Console.WriteLine(Program._fmtTop(Program.path_sum((object)tree1_5, 8)));
        Console.WriteLine(Program._fmtTop(Program.path_sum((object)tree1_5, 7)));
        object tree2_6 = Program.sample_tree_two();
        Console.WriteLine(Program._fmtTop(Program.path_sum((object)tree2_6, 8)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
