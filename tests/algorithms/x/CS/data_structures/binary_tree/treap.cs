// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class SplitResult {
    public BigInteger left;
    public BigInteger right;
    public override string ToString() => $"SplitResult {{left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger NIL_0 = -1;
    static BigInteger[] node_values_1 = new BigInteger[]{};
    static double[] node_priors_2 = new double[]{};
    static BigInteger[] node_lefts_3 = new BigInteger[]{};
    static BigInteger[] node_rights_4 = new BigInteger[]{};
    static BigInteger seed_5 = 1;
    public static double random() {
        seed_5 = _mod(((seed_5 * 13) + 7), 100);
        return (Convert.ToDouble(seed_5) / 100.0);
    }

    public static BigInteger new_node(BigInteger value_6) {
        node_values_1 = ((Func<BigInteger[]>)(() => { var _tmp = node_values_1.Cast<BigInteger>().ToList(); _tmp.Add(value_6); return _tmp.ToArray(); }))();
        node_priors_2 = ((Func<double[]>)(() => { var _tmp = node_priors_2.Cast<double>().ToList(); _tmp.Add(Program.random()); return _tmp.ToArray(); }))();
        node_lefts_3 = ((Func<BigInteger[]>)(() => { var _tmp = node_lefts_3.Cast<BigInteger>().ToList(); _tmp.Add(NIL_0); return _tmp.ToArray(); }))();
        node_rights_4 = ((Func<BigInteger[]>)(() => { var _tmp = node_rights_4.Cast<BigInteger>().ToList(); _tmp.Add(NIL_0); return _tmp.ToArray(); }))();
        return (node_values_1.Length - 1);
    }

    public static SplitResult split(BigInteger root_7, BigInteger value_8) {
        if ((root_7 == NIL_0)) {
            return new SplitResult{left = NIL_0, right = NIL_0};
        };
        if ((value_8 < _idx(node_values_1, (long)(root_7)))) {
            string[] res_9 = _idx(node_lefts_3, (long)(root_7)).Split(value_8);
            node_lefts_3[(int)(root_7)] = res_9.right;
            return new SplitResult{left = res_9.left, right = root_7};
        };
        string[] res_10 = _idx(node_rights_4, (long)(root_7)).Split(value_8);
        node_rights_4[(int)(root_7)] = res_10.left;
        return new SplitResult{left = root_7, right = res_10.right};
    }

    public static BigInteger merge(BigInteger left_11, BigInteger right_12) {
        if ((left_11 == NIL_0)) {
            return right_12;
        };
        if ((right_12 == NIL_0)) {
            return left_11;
        };
        if ((_idx(node_priors_2, (long)(left_11)) < _idx(node_priors_2, (long)(right_12)))) {
            node_rights_4[(int)(left_11)] = Program.merge(_idx(node_rights_4, (long)(left_11)), right_12);
            return left_11;
        };
        node_lefts_3[(int)(right_12)] = Program.merge(left_11, _idx(node_lefts_3, (long)(right_12)));
        return right_12;
    }

    public static BigInteger insert(BigInteger root_13, BigInteger value_14) {
        BigInteger node_15 = Program.new_node(value_14);
        SplitResult res_16 = Program.split(root_13, value_14);
        return Program.merge(Program.merge(res_16.left, node_15), res_16.right);
    }

    public static BigInteger erase(BigInteger root_17, BigInteger value_18) {
        SplitResult res1_19 = Program.split(root_17, (value_18 - 1));
        SplitResult res2_20 = Program.split(res1_19.right, value_18);
        return Program.merge(res1_19.left, res2_20.right);
    }

    public static BigInteger[] inorder(BigInteger i_21, BigInteger[] acc_22) {
        if ((i_21 == NIL_0)) {
            return acc_22;
        };
        BigInteger[] left_acc_23 = Program.inorder(_idx(node_lefts_3, (long)(i_21)), acc_22);
        BigInteger[] with_node_24 = ((Func<BigInteger[]>)(() => { var _tmp = left_acc_23.Cast<BigInteger>().ToList(); _tmp.Add(_idx(node_values_1, (long)(i_21))); return _tmp.ToArray(); }))();
        return Program.inorder(_idx(node_rights_4, (long)(i_21)), with_node_24);
    }

    public static void main() {
        BigInteger root_25 = NIL_0;
        root_25 = Program.insert(root_25, 1);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_25, new BigInteger[]{}))));
        root_25 = Program.insert(root_25, 3);
        root_25 = Program.insert(root_25, 5);
        root_25 = Program.insert(root_25, 17);
        root_25 = Program.insert(root_25, 19);
        root_25 = Program.insert(root_25, 2);
        root_25 = Program.insert(root_25, 16);
        root_25 = Program.insert(root_25, 4);
        root_25 = Program.insert(root_25, 0);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_25, new BigInteger[]{}))));
        root_25 = Program.insert(root_25, 4);
        root_25 = Program.insert(root_25, 4);
        root_25 = Program.insert(root_25, 4);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_25, new BigInteger[]{}))));
        root_25 = Program.erase(root_25, 0);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_25, new BigInteger[]{}))));
        root_25 = Program.erase(root_25, 4);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_25, new BigInteger[]{}))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
