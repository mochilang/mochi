// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Tree {
    public double[] data;
    public BigInteger[] left;
    public BigInteger[] right;
    public override string ToString() => $"Tree {{data = {data}, left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger NONE_0 = -1;
    static Tree tree1_10 = new Tree{data = new double[]{2.1, 2.0, 2.2}, left = new BigInteger[]{1, NONE_0, NONE_0}, right = new BigInteger[]{2, NONE_0, NONE_0}};
    static Tree tree2_11 = new Tree{data = new double[]{2.1, 2.0, 2.0}, left = new BigInteger[]{1, NONE_0, NONE_0}, right = new BigInteger[]{2, NONE_0, NONE_0}};
    static Tree tree3_12 = new Tree{data = new double[]{2.1, 2.0, 2.1}, left = new BigInteger[]{1, NONE_0, NONE_0}, right = new BigInteger[]{2, NONE_0, NONE_0}};
    public static double[] inorder(Tree tree_1, BigInteger index_2) {
        double[] res_3 = new double[]{};
        if ((index_2 == NONE_0)) {
            return res_3;
        };
        BigInteger left_idx_4 = _idx(tree_1.left, (long)(index_2));
        if ((left_idx_4 != NONE_0)) {
            res_3 = (Enumerable.ToArray(Enumerable.Concat(res_3, Program.inorder(tree_1, left_idx_4))));
        };
        res_3 = ((Func<double[]>)(() => { var _tmp = res_3.Cast<double>().ToList(); _tmp.Add(_idx(tree_1.data, (long)(index_2))); return _tmp.ToArray(); }))();
        BigInteger right_idx_5 = _idx(tree_1.right, (long)(index_2));
        if ((right_idx_5 != NONE_0)) {
            res_3 = (Enumerable.ToArray(Enumerable.Concat(res_3, Program.inorder(tree_1, right_idx_5))));
        };
        return res_3;
    }

    public static bool is_sorted(Tree tree_6, BigInteger index_7) {
        if ((index_7 == NONE_0)) {
            return true;
        };
        BigInteger left_idx_8 = _idx(tree_6.left, (long)(index_7));
        if ((left_idx_8 != NONE_0)) {
            if ((_idx(tree_6.data, (long)(index_7)) < _idx(tree_6.data, (long)(left_idx_8)))) {
                return false;
            }
            if ((!Program.is_sorted(tree_6, left_idx_8))) {
                return false;
            }
        };
        BigInteger right_idx_9 = _idx(tree_6.right, (long)(index_7));
        if ((right_idx_9 != NONE_0)) {
            if ((_idx(tree_6.data, (long)(index_7)) > _idx(tree_6.data, (long)(right_idx_9)))) {
                return false;
            }
            if ((!Program.is_sorted(tree_6, right_idx_9))) {
                return false;
            }
        };
        return true;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((("Tree " + _fmtStr(Program.inorder(tree1_10, 0))) + " is sorted: ") + _fmtStr(Program.is_sorted(tree1_10, 0)))));
            Console.WriteLine(Program._fmtTop(((("Tree " + _fmtStr(Program.inorder(tree2_11, 0))) + " is sorted: ") + _fmtStr(Program.is_sorted(tree2_11, 0)))));
            Console.WriteLine(Program._fmtTop(((("Tree " + _fmtStr(Program.inorder(tree3_12, 0))) + " is sorted: ") + _fmtStr(Program.is_sorted(tree3_12, 0)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
