// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long start;
    public long end;
    public long val;
    public long mid;
    public long left;
    public long right;
    public override string ToString() => $"Node {{start = {start}, end = {end}, val = {val}, mid = {mid}, left = {left}, right = {right}}}";
}
class BuildResult {
    public Node[] nodes;
    public long idx;
    public override string ToString() => $"BuildResult {{nodes = {nodes}, idx = {idx}}}";
}
class SegmentTree {
    public long[] arr;
    public long op;
    public override string ToString() => $"SegmentTree {{arr = {arr}, op = {op}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] arr_36 = new long[]{2, 1, 5, 3, 4};
    public static long combine(long a_0, long b_1, long op_2) {
        if ((op_2 == 0)) {
            return (a_0 + b_1);
        };
        if ((op_2 == 1)) {
            if ((a_0 > b_1)) {
                return a_0;
            }
            return b_1;
        };
        if ((a_0 < b_1)) {
            return a_0;
        };
        return b_1;
    }

    public static BuildResult build_tree(Node[] nodes_3, long[] arr_4, long start_5, long end_6, long op_7) {
        if ((start_5 == end_6)) {
            Node node_8 = new Node{start = start_5, end = end_6, val = arr_4[(int)(start_5)], mid = start_5, left = -1, right = -1};
            Node[] new_nodes_9 = (Enumerable.ToArray(Enumerable.Append<Node>(nodes_3, node_8)));
            return new BuildResult{nodes = new_nodes_9, idx = (new_nodes_9.Length - 1)};
        };
        long mid_10 = ((start_5 + end_6) / 2);
        BuildResult left_res_11 = Program.build_tree(nodes_3, arr_4, start_5, mid_10, op_7);
        BuildResult right_res_12 = Program.build_tree(left_res_11.nodes, arr_4, (mid_10 + 1), end_6, op_7);
        Node left_node_13 = right_res_12.nodes[(int)(left_res_11.idx)];
        Node right_node_14 = right_res_12.nodes[(int)(right_res_12.idx)];
        long val_15 = Program.combine(left_node_13.val, right_node_14.val, op_7);
        Node parent_16 = new Node{start = start_5, end = end_6, val = val_15, mid = mid_10, left = left_res_11.idx, right = right_res_12.idx};
        Node[] new_nodes_17 = (Enumerable.ToArray(Enumerable.Append<Node>(right_res_12.nodes, parent_16)));
        return new BuildResult{nodes = new_nodes_17, idx = (new_nodes_17.Length - 1)};
    }

    public static SegmentTree new_segment_tree(long[] collection_18, long op_19) {
        return new SegmentTree{arr = collection_18, op = op_19};
    }

    public static SegmentTree update(SegmentTree tree_20, long i_21, long val_22) {
        long[] new_arr_23 = new long[]{};
        long idx_24 = 0;
        while ((idx_24 < tree_20.arr.Length)) {
            if ((idx_24 == i_21)) {
                new_arr_23 = (Enumerable.ToArray(Enumerable.Append<long>(new_arr_23, val_22)));
            } else {
                new_arr_23 = (Enumerable.ToArray(Enumerable.Append<long>(new_arr_23, tree_20.arr[(int)(idx_24)])));
            }
            idx_24 = (idx_24 + 1);
        };
        return new SegmentTree{arr = new_arr_23, op = tree_20.op};
    }

    public static long query_range(SegmentTree tree_25, long i_26, long j_27) {
        long result_28 = tree_25.arr[(int)(i_26)];
        long idx_29 = (i_26 + 1);
        while ((idx_29 <= j_27)) {
            result_28 = Program.combine(result_28, tree_25.arr[(int)(idx_29)], tree_25.op);
            idx_29 = (idx_29 + 1);
        };
        return result_28;
    }

    public static Node[] traverse(SegmentTree tree_30) {
        if ((tree_30.arr.Length == 0)) {
            return new Node[]{};
        };
        BuildResult res_31 = Program.build_tree(new Node[]{}, tree_30.arr, 0, (tree_30.arr.Length - 1), tree_30.op);
        return res_31.nodes;
    }

    public static string node_to_string(Node node_32) {
        return (((((("SegmentTreeNode(start=" + _fmtStr(node_32.start)) + ", end=") + _fmtStr(node_32.end)) + ", val=") + _fmtStr(node_32.val)) + ")");
    }

    public static void print_traverse(SegmentTree tree_33) {
        Node[] nodes_34 = Program.traverse(tree_33);
        long i_35 = 0;
        while ((i_35 < nodes_34.Length)) {
            Console.WriteLine(Program._fmtTop(Program.node_to_string(nodes_34[(int)(i_35)])));
            i_35 = (i_35 + 1);
        };
        Console.WriteLine(Program._fmtTop(""));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (long op_37 in new long[]{0, 1, 2}) {
                Console.WriteLine(Program._fmtTop("**************************************************"));
                SegmentTree tree_38 = Program.new_segment_tree(arr_36, op_37);
                Program.print_traverse(tree_38);
                tree_38 = Program.update(tree_38, 1, 5);
                Program.print_traverse(tree_38);
                Console.WriteLine(Program._fmtTop(Program.query_range(tree_38, 3, 4)));
                Console.WriteLine(Program._fmtTop(Program.query_range(tree_38, 2, 2)));
                Console.WriteLine(Program._fmtTop(Program.query_range(tree_38, 1, 3)));
                Console.WriteLine(Program._fmtTop(""));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
