// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long val;
    public long left;
    public long right;
    public override string ToString() => $"Node {{val = {val}, left = {left}, right = {right}}}";
}
class Info {
    public bool is_bst;
    public long min_val;
    public long max_val;
    public long total;
    public long best;
    public override string ToString() => $"Info {{is_bst = {is_bst}, min_val = {min_val}, max_val = {max_val}, total = {total}, best = {best}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long min_int(long a_0, long b_1) {
        if ((a_0 < b_1)) {
            return a_0;
        };
        return b_1;
    }

    public static long max_int(long a_2, long b_3) {
        if ((a_2 > b_3)) {
            return a_2;
        };
        return b_3;
    }

    public static Info solver(Node[] nodes_4, long idx_5) {
        if ((idx_5 == (0 - 1))) {
            return new Info{is_bst = true, min_val = 2147483647, max_val = -2147483648L, total = 0, best = 0};
        };
        Node node_6 = nodes_4[(int)(idx_5)];
        Info left_info_7 = Program.solver(nodes_4, node_6.left);
        Info right_info_8 = Program.solver(nodes_4, node_6.right);
        long current_best_9 = Program.max_int(left_info_7.best, right_info_8.best);
        if ((((left_info_7.is_bst && right_info_8.is_bst) && (left_info_7.max_val < node_6.val)) && (node_6.val < right_info_8.min_val))) {
            long sum_val_10 = ((left_info_7.total + right_info_8.total) + node_6.val);
            current_best_9 = Program.max_int(current_best_9, sum_val_10);
            return new Info{is_bst = true, min_val = Program.min_int(left_info_7.min_val, node_6.val), max_val = Program.max_int(right_info_8.max_val, node_6.val), total = sum_val_10, best = current_best_9};
        };
        return new Info{is_bst = false, min_val = 0, max_val = 0, total = 0, best = current_best_9};
    }

    public static long max_sum_bst(Node[] nodes_11, long root_12) {
        Info info_13 = Program.solver(nodes_11, root_12);
        return info_13.best;
    }

    public static void main() {
        Node[] t1_nodes_14 = new Node[]{new Node{val = 4, left = 1, right = (0 - 1)}, new Node{val = 3, left = 2, right = 3}, new Node{val = 1, left = (0 - 1), right = (0 - 1)}, new Node{val = 2, left = (0 - 1), right = (0 - 1)}};
        Console.WriteLine(Program._fmtTop(Program.max_sum_bst(t1_nodes_14, 0)));
        Node[] t2_nodes_15 = new Node[]{new Node{val = -4, left = 1, right = 2}, new Node{val = -2, left = (0 - 1), right = (0 - 1)}, new Node{val = -5, left = (0 - 1), right = (0 - 1)}};
        Console.WriteLine(Program._fmtTop(Program.max_sum_bst(t2_nodes_15, 0)));
        Node[] t3_nodes_16 = new Node[]{new Node{val = 1, left = 1, right = 2}, new Node{val = 4, left = 3, right = 4}, new Node{val = 3, left = 5, right = 6}, new Node{val = 2, left = (0 - 1), right = (0 - 1)}, new Node{val = 4, left = (0 - 1), right = (0 - 1)}, new Node{val = 2, left = (0 - 1), right = (0 - 1)}, new Node{val = 5, left = 7, right = 8}, new Node{val = 4, left = (0 - 1), right = (0 - 1)}, new Node{val = 6, left = (0 - 1), right = (0 - 1)}};
        Console.WriteLine(Program._fmtTop(Program.max_sum_bst(t3_nodes_16, 0)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
