// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Node {
    public BigInteger minn;
    public BigInteger maxx;
    public BigInteger[] map_left;
    public BigInteger left;
    public BigInteger right;
    public override string ToString() => $"Node {{minn = {minn}, maxx = {maxx}, map_left = {map_left}, left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Node[] nodes_0 = new Node[]{};
    static BigInteger[] test_array_45 = new BigInteger[]{2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7};
    static BigInteger root_46 = Program.build_tree(test_array_45);
    public static BigInteger[] make_list(BigInteger length_1, BigInteger value_2) {
        BigInteger[] lst_3 = new BigInteger[]{};
        BigInteger i_4 = 0;
        while ((i_4 < length_1)) {
            lst_3 = ((Func<BigInteger[]>)(() => { var _tmp = lst_3.Cast<BigInteger>().ToList(); _tmp.Add(value_2); return _tmp.ToArray(); }))();
            i_4 = (i_4 + 1);
        };
        return lst_3;
    }

    public static BigInteger min_list(BigInteger[] arr_5) {
        BigInteger m_6 = _idx(arr_5, (long)(0));
        BigInteger i_7 = 1;
        while ((i_7 < arr_5.Length)) {
            if ((_idx(arr_5, (long)(i_7)) < m_6)) {
                m_6 = _idx(arr_5, (long)(i_7));
            }
            i_7 = (i_7 + 1);
        };
        return m_6;
    }

    public static BigInteger max_list(BigInteger[] arr_8) {
        BigInteger m_9 = _idx(arr_8, (long)(0));
        BigInteger i_10 = 1;
        while ((i_10 < arr_8.Length)) {
            if ((_idx(arr_8, (long)(i_10)) > m_9)) {
                m_9 = _idx(arr_8, (long)(i_10));
            }
            i_10 = (i_10 + 1);
        };
        return m_9;
    }

    public static BigInteger build_tree(BigInteger[] arr_11) {
        Node n_12 = new Node{minn = Program.min_list(arr_11), maxx = Program.max_list(arr_11), map_left = Program.make_list(arr_11.Length, 0), left = -1, right = -1};
        if ((n_12.minn == n_12.maxx)) {
            nodes_0 = ((Func<Node[]>)(() => { var _tmp = nodes_0.Cast<Node>().ToList(); _tmp.Add(n_12); return _tmp.ToArray(); }))();
            return (nodes_0.Length - 1);
        };
        BigInteger pivot_13 = ((n_12.minn + n_12.maxx) / 2);
        BigInteger[] left_arr_14 = new BigInteger[]{};
        BigInteger[] right_arr_15 = new BigInteger[]{};
        BigInteger i_16 = 0;
        while ((i_16 < arr_11.Length)) {
            BigInteger num_17 = _idx(arr_11, (long)(i_16));
            if ((num_17 <= pivot_13)) {
                left_arr_14 = ((Func<BigInteger[]>)(() => { var _tmp = left_arr_14.Cast<BigInteger>().ToList(); _tmp.Add(num_17); return _tmp.ToArray(); }))();
            } else {
                right_arr_15 = ((Func<BigInteger[]>)(() => { var _tmp = right_arr_15.Cast<BigInteger>().ToList(); _tmp.Add(num_17); return _tmp.ToArray(); }))();
            }
            BigInteger[] ml_18 = n_12.map_left;
            ml_18[(int)(i_16)] = left_arr_14.Length;
            n_12.map_left = ml_18;
            i_16 = (i_16 + 1);
        };
        if ((left_arr_14.Length > 0)) {
            n_12.left = Program.build_tree(left_arr_14);
        };
        if ((right_arr_15.Length > 0)) {
            n_12.right = Program.build_tree(right_arr_15);
        };
        nodes_0 = ((Func<Node[]>)(() => { var _tmp = nodes_0.Cast<Node>().ToList(); _tmp.Add(n_12); return _tmp.ToArray(); }))();
        return (nodes_0.Length - 1);
    }

    public static BigInteger rank_till_index(BigInteger node_idx_19, BigInteger num_20, BigInteger index_21) {
        if (((index_21 < 0) || (node_idx_19 < 0))) {
            return 0;
        };
        Node node_22 = _idx(nodes_0, (long)(node_idx_19));
        if ((node_22.minn == node_22.maxx)) {
            if ((node_22.minn == num_20)) {
                return (index_21 + 1);
            } else {
                return 0;
            }
        };
        BigInteger pivot_23 = ((node_22.minn + node_22.maxx) / 2);
        if ((num_20 <= pivot_23)) {
            return Program.rank_till_index(node_22.left, num_20, (_idx(node_22.map_left, (long)(index_21)) - 1));
        } else {
            return Program.rank_till_index(node_22.right, num_20, (index_21 - _idx(node_22.map_left, (long)(index_21))));
        };
        return default(BigInteger);
    }

    public static BigInteger rank(BigInteger node_idx_24, BigInteger num_25, BigInteger start_26, BigInteger end_27) {
        if ((start_26 > end_27)) {
            return 0;
        };
        BigInteger rank_till_end_28 = Program.rank_till_index(node_idx_24, num_25, end_27);
        BigInteger rank_before_start_29 = Program.rank_till_index(node_idx_24, num_25, (start_26 - 1));
        return (rank_till_end_28 - rank_before_start_29);
    }

    public static BigInteger quantile(BigInteger node_idx_30, BigInteger index_31, BigInteger start_32, BigInteger end_33) {
        if ((((index_31 > (end_33 - start_32)) || (start_32 > end_33)) || (node_idx_30 < 0))) {
            return -1;
        };
        Node node_34 = _idx(nodes_0, (long)(node_idx_30));
        if ((node_34.minn == node_34.maxx)) {
            return node_34.minn;
        };
        BigInteger left_start_35 = ((start_32 == 0) ? 0 : _idx(node_34.map_left, (long)((start_32 - 1))));
        BigInteger num_left_36 = (_idx(node_34.map_left, (long)(end_33)) - left_start_35);
        if ((num_left_36 > index_31)) {
            return Program.quantile(node_34.left, index_31, left_start_35, (_idx(node_34.map_left, (long)(end_33)) - 1));
        } else {
            return Program.quantile(node_34.right, (index_31 - num_left_36), (start_32 - left_start_35), (end_33 - _idx(node_34.map_left, (long)(end_33))));
        };
        return default(BigInteger);
    }

    public static BigInteger range_counting(BigInteger node_idx_37, BigInteger start_38, BigInteger end_39, BigInteger start_num_40, BigInteger end_num_41) {
        if ((((start_38 > end_39) || (node_idx_37 < 0)) || (start_num_40 > end_num_41))) {
            return 0;
        };
        Node node_42 = _idx(nodes_0, (long)(node_idx_37));
        if (((node_42.minn > end_num_41) || (node_42.maxx < start_num_40))) {
            return 0;
        };
        if (((start_num_40 <= node_42.minn) && (node_42.maxx <= end_num_41))) {
            return ((end_39 - start_38) + 1);
        };
        BigInteger left_43 = Program.range_counting(node_42.left, ((start_38 == 0) ? 0 : _idx(node_42.map_left, (long)((start_38 - 1)))), (_idx(node_42.map_left, (long)(end_39)) - 1), start_num_40, end_num_41);
        BigInteger right_44 = Program.range_counting(node_42.right, (start_38 - ((start_38 == 0) ? 0 : _idx(node_42.map_left, (long)((start_38 - 1))))), (end_39 - _idx(node_42.map_left, (long)(end_39))), start_num_40, end_num_41);
        return (left_43 + right_44);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("rank_till_index 6 at 6 -> " + _fmtStr(Program.rank_till_index(root_46, 6, 6)))));
            Console.WriteLine(Program._fmtTop(("rank 6 in [3,13] -> " + _fmtStr(Program.rank(root_46, 6, 3, 13)))));
            Console.WriteLine(Program._fmtTop(("quantile index 2 in [2,5] -> " + _fmtStr(Program.quantile(root_46, 2, 2, 5)))));
            Console.WriteLine(Program._fmtTop(("range_counting [3,7] in [1,10] -> " + _fmtStr(Program.range_counting(root_46, 1, 10, 3, 7)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
