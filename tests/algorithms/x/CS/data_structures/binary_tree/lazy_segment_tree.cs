// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger NEG_INF_28 = -1000000000;
    static BigInteger[] A_47 = new BigInteger[]{1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8};
    static BigInteger n_48 = 15;
    static BigInteger[] segment_tree_49 = Program.init_int_array(n_48);
    static BigInteger[] lazy_50 = Program.init_int_array(n_48);
    static bool[] flag_51 = Program.init_bool_array(n_48);
    public static BigInteger[] init_int_array(BigInteger n_0) {
        BigInteger[] arr_1 = new BigInteger[]{};
        BigInteger i_2 = 0;
        while ((i_2 < ((4 * n_0) + 5))) {
            arr_1 = ((Func<BigInteger[]>)(() => { var _tmp = arr_1.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        return arr_1;
    }

    public static bool[] init_bool_array(BigInteger n_3) {
        bool[] arr_4 = new bool[]{};
        BigInteger i_5 = 0;
        while ((i_5 < ((4 * n_3) + 5))) {
            arr_4 = ((Func<bool[]>)(() => { var _tmp = arr_4.Cast<bool>().ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            i_5 = (i_5 + 1);
        };
        return arr_4;
    }

    public static BigInteger left(BigInteger idx_6) {
        return (idx_6 * 2);
    }

    public static BigInteger right(BigInteger idx_7) {
        return ((idx_7 * 2) + 1);
    }

    public static void build(BigInteger[] segment_tree_8, BigInteger idx_9, BigInteger l_10, BigInteger r_11, BigInteger[] a_12) {
        if ((l_10 == r_11)) {
            segment_tree_8[(int)(idx_9)] = _idx(a_12, (long)((l_10 - 1)));
        } else {
            BigInteger mid_13 = ((l_10 + r_11) / 2);
            Program.build(segment_tree_8, Program.left(idx_9), l_10, mid_13, a_12);
            Program.build(segment_tree_8, Program.right(idx_9), (mid_13 + 1), r_11, a_12);
            BigInteger lv_14 = _idx(segment_tree_8, (long)(Program.left(idx_9)));
            BigInteger rv_15 = _idx(segment_tree_8, (long)(Program.right(idx_9)));
            if ((lv_14 > rv_15)) {
                segment_tree_8[(int)(idx_9)] = lv_14;
            } else {
                segment_tree_8[(int)(idx_9)] = rv_15;
            }
        };
    }

    public static void update(BigInteger[] segment_tree_16, BigInteger[] lazy_17, bool[] flag_18, BigInteger idx_19, BigInteger l_20, BigInteger r_21, BigInteger a_22, BigInteger b_23, BigInteger val_24) {
        if (_idx(flag_18, (long)(idx_19))) {
            segment_tree_16[(int)(idx_19)] = _idx(lazy_17, (long)(idx_19));
            flag_18[(int)(idx_19)] = false;
            if ((l_20 != r_21)) {
                lazy_17[(int)(Program.left(idx_19))] = _idx(lazy_17, (long)(idx_19));
                lazy_17[(int)(Program.right(idx_19))] = _idx(lazy_17, (long)(idx_19));
                flag_18[(int)(Program.left(idx_19))] = true;
                flag_18[(int)(Program.right(idx_19))] = true;
            }
        };
        if (((r_21 < a_22) || (l_20 > b_23))) {
            return;
        };
        if (((l_20 >= a_22) && (r_21 <= b_23))) {
            segment_tree_16[(int)(idx_19)] = val_24;
            if ((l_20 != r_21)) {
                lazy_17[(int)(Program.left(idx_19))] = val_24;
                lazy_17[(int)(Program.right(idx_19))] = val_24;
                flag_18[(int)(Program.left(idx_19))] = true;
                flag_18[(int)(Program.right(idx_19))] = true;
            }
            return;
        };
        BigInteger mid_25 = ((l_20 + r_21) / 2);
        Program.update(segment_tree_16, lazy_17, flag_18, Program.left(idx_19), l_20, mid_25, a_22, b_23, val_24);
        Program.update(segment_tree_16, lazy_17, flag_18, Program.right(idx_19), (mid_25 + 1), r_21, a_22, b_23, val_24);
        BigInteger lv_26 = _idx(segment_tree_16, (long)(Program.left(idx_19)));
        BigInteger rv_27 = _idx(segment_tree_16, (long)(Program.right(idx_19)));
        if ((lv_26 > rv_27)) {
            segment_tree_16[(int)(idx_19)] = lv_26;
        } else {
            segment_tree_16[(int)(idx_19)] = rv_27;
        };
    }

    public static BigInteger query(BigInteger[] segment_tree_29, BigInteger[] lazy_30, bool[] flag_31, BigInteger idx_32, BigInteger l_33, BigInteger r_34, BigInteger a_35, BigInteger b_36) {
        if (_idx(flag_31, (long)(idx_32))) {
            segment_tree_29[(int)(idx_32)] = _idx(lazy_30, (long)(idx_32));
            flag_31[(int)(idx_32)] = false;
            if ((l_33 != r_34)) {
                lazy_30[(int)(Program.left(idx_32))] = _idx(lazy_30, (long)(idx_32));
                lazy_30[(int)(Program.right(idx_32))] = _idx(lazy_30, (long)(idx_32));
                flag_31[(int)(Program.left(idx_32))] = true;
                flag_31[(int)(Program.right(idx_32))] = true;
            }
        };
        if (((r_34 < a_35) || (l_33 > b_36))) {
            return NEG_INF_28;
        };
        if (((l_33 >= a_35) && (r_34 <= b_36))) {
            return _idx(segment_tree_29, (long)(idx_32));
        };
        BigInteger mid_37 = ((l_33 + r_34) / 2);
        BigInteger q1_38 = Program.query(segment_tree_29, lazy_30, flag_31, Program.left(idx_32), l_33, mid_37, a_35, b_36);
        BigInteger q2_39 = Program.query(segment_tree_29, lazy_30, flag_31, Program.right(idx_32), (mid_37 + 1), r_34, a_35, b_36);
        if ((q1_38 > q2_39)) {
            return q1_38;
        } else {
            return q2_39;
        };
        return default(BigInteger);
    }

    public static string segtree_to_string(BigInteger[] segment_tree_40, BigInteger[] lazy_41, bool[] flag_42, BigInteger n_43) {
        string res_44 = "[";
        BigInteger i_45 = 1;
        while ((i_45 <= n_43)) {
            BigInteger v_46 = Program.query(segment_tree_40, lazy_41, flag_42, 1, 1, n_43, i_45, i_45);
            res_44 = (res_44 + _fmtStr(v_46));
            if ((i_45 < n_43)) {
                res_44 = (res_44 + ", ");
            }
            i_45 = (i_45 + 1);
        };
        res_44 = (res_44 + "]");
        return res_44;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.build(segment_tree_49, 1, 1, n_48, A_47);
            Console.WriteLine(Program._fmtTop(Program.query(segment_tree_49, lazy_50, flag_51, 1, 1, n_48, 4, 6)));
            Console.WriteLine(Program._fmtTop(Program.query(segment_tree_49, lazy_50, flag_51, 1, 1, n_48, 7, 11)));
            Console.WriteLine(Program._fmtTop(Program.query(segment_tree_49, lazy_50, flag_51, 1, 1, n_48, 7, 12)));
            Program.update(segment_tree_49, lazy_50, flag_51, 1, 1, n_48, 1, 3, 111);
            Console.WriteLine(Program._fmtTop(Program.query(segment_tree_49, lazy_50, flag_51, 1, 1, n_48, 1, 15)));
            Program.update(segment_tree_49, lazy_50, flag_51, 1, 1, n_48, 7, 8, 235);
            Console.WriteLine(Program._fmtTop(Program.segtree_to_string(segment_tree_49, lazy_50, flag_51, n_48)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
