// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[] node_data_0 = (new BigInteger[]{0} as BigInteger[]) ?? new BigInteger[]{};
    static BigInteger[] left_child_1 = (new BigInteger[]{0} as BigInteger[]) ?? new BigInteger[]{};
    static BigInteger[] right_child_2 = (new BigInteger[]{0} as BigInteger[]) ?? new BigInteger[]{};
    static BigInteger root_18 = Program.build_tree();
    static BigInteger[] vals_19 = Program.flatten(root_18);
    public static BigInteger new_node(BigInteger value_3) {
        node_data_0 = ((Func<BigInteger[]>)(() => { var _tmp = node_data_0.Cast<BigInteger>().ToList(); _tmp.Add(value_3); return _tmp.ToArray(); }))();
        left_child_1 = ((Func<BigInteger[]>)(() => { var _tmp = left_child_1.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
        right_child_2 = ((Func<BigInteger[]>)(() => { var _tmp = right_child_2.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
        return (node_data_0.Length - 1);
    }

    public static BigInteger build_tree() {
        BigInteger root_4 = Program.new_node(1);
        BigInteger n2_5 = Program.new_node(2);
        BigInteger n5_6 = Program.new_node(5);
        BigInteger n3_7 = Program.new_node(3);
        BigInteger n4_8 = Program.new_node(4);
        BigInteger n6_9 = Program.new_node(6);
        left_child_1[(int)(root_4)] = n2_5;
        right_child_2[(int)(root_4)] = n5_6;
        left_child_1[(int)(n2_5)] = n3_7;
        right_child_2[(int)(n2_5)] = n4_8;
        right_child_2[(int)(n5_6)] = n6_9;
        return root_4;
    }

    public static BigInteger[] flatten(BigInteger root_10) {
        if ((root_10 == 0)) {
            return new BigInteger[]{};
        };
        BigInteger[] res_11 = (new BigInteger[]{_idx(node_data_0, (long)(root_10))} as BigInteger[]) ?? new BigInteger[]{};
        BigInteger[] left_vals_12 = Program.flatten(_idx(left_child_1, (long)(root_10)));
        BigInteger[] right_vals_13 = Program.flatten(_idx(right_child_2, (long)(root_10)));
        BigInteger i_14 = 0;
        while ((i_14 < left_vals_12.Length)) {
            res_11 = ((Func<BigInteger[]>)(() => { var _tmp = res_11.Cast<BigInteger>().ToList(); _tmp.Add(_idx(left_vals_12, (long)(i_14))); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        i_14 = 0;
        while ((i_14 < right_vals_13.Length)) {
            res_11 = ((Func<BigInteger[]>)(() => { var _tmp = res_11.Cast<BigInteger>().ToList(); _tmp.Add(_idx(right_vals_13, (long)(i_14))); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        return res_11;
    }

    public static void display(BigInteger[] values_15) {
        string s_16 = "";
        BigInteger i_17 = 0;
        while ((i_17 < values_15.Length)) {
            if ((i_17 == 0)) {
                s_16 = _fmtStr(_idx(values_15, (long)(i_17)));
            } else {
                s_16 = ((s_16 + " ") + _fmtStr(_idx(values_15, (long)(i_17))));
            }
            i_17 = (i_17 + 1);
        };
        Console.WriteLine(Program._fmtTop(s_16));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Flattened Linked List:"));
            Program.display(vals_19);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
