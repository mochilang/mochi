// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] node_data_0 = (new long[]{0} as long[]) ?? new long[]{};
    static long[] left_child_1 = (new long[]{0} as long[]) ?? new long[]{};
    static long[] right_child_2 = (new long[]{0} as long[]) ?? new long[]{};
    public static long new_node(long value_3) {
        node_data_0 = (Enumerable.ToArray(Enumerable.Append<long>(node_data_0, value_3)));
        left_child_1 = (Enumerable.ToArray(Enumerable.Append<long>(left_child_1, 0)));
        right_child_2 = (Enumerable.ToArray(Enumerable.Append<long>(right_child_2, 0)));
        return (node_data_0.Length - 1);
    }

    public static long build_tree() {
        long root_4 = Program.new_node(1);
        long n2_5 = Program.new_node(2);
        long n5_6 = Program.new_node(5);
        long n3_7 = Program.new_node(3);
        long n4_8 = Program.new_node(4);
        long n6_9 = Program.new_node(6);
        left_child_1[root_4] = n2_5;
        right_child_2[root_4] = n5_6;
        left_child_1[n2_5] = n3_7;
        right_child_2[n2_5] = n4_8;
        right_child_2[n5_6] = n6_9;
        return root_4;
    }

    public static long[] flatten(long root_10) {
        if ((root_10 == 0)) {
            return new long[]{};
        };
        long[] res_11 = (new long[]{node_data_0[(int)(root_10)]} as long[]) ?? new long[]{};
        long[] left_vals_12 = Program.flatten(left_child_1[(int)(root_10)]);
        long[] right_vals_13 = Program.flatten(right_child_2[(int)(root_10)]);
        long i_14 = 0;
        while ((i_14 < left_vals_12.Length)) {
            res_11 = (Enumerable.ToArray(Enumerable.Append<long>(res_11, left_vals_12[(int)(i_14)])));
            i_14 = (i_14 + 1);
        };
        i_14 = 0;
        while ((i_14 < right_vals_13.Length)) {
            res_11 = (Enumerable.ToArray(Enumerable.Append<long>(res_11, right_vals_13[(int)(i_14)])));
            i_14 = (i_14 + 1);
        };
        return res_11;
    }

    public static void display(long[] values_15) {
        string s_16 = "";
        long i_17 = 0;
        while ((i_17 < values_15.Length)) {
            if ((i_17 == 0)) {
                s_16 = _fmtStr(values_15[(int)(i_17)]);
            } else {
                s_16 = ((s_16 + " ") + _fmtStr(values_15[(int)(i_17)]));
            }
            i_17 = (i_17 + 1);
        };
        Console.WriteLine(Program._fmtTop(s_16));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Flattened Linked List:"));
            long root_18 = Program.build_tree();
            long[] vals_19 = Program.flatten(root_18);
            Program.display(vals_19);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
