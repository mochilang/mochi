// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[][] symmetric_tree_6 = Program.make_symmetric_tree();
    static BigInteger[][] asymmetric_tree_7 = Program.make_asymmetric_tree();
    public static BigInteger[][] make_symmetric_tree() {
        return new BigInteger[][]{new BigInteger[]{1, 1, 2}, new BigInteger[]{2, 3, 4}, new BigInteger[]{2, 5, 6}, new BigInteger[]{3, -1, -1}, new BigInteger[]{4, -1, -1}, new BigInteger[]{4, -1, -1}, new BigInteger[]{3, -1, -1}};
    }

    public static BigInteger[][] make_asymmetric_tree() {
        return new BigInteger[][]{new BigInteger[]{1, 1, 2}, new BigInteger[]{2, 3, 4}, new BigInteger[]{2, 5, 6}, new BigInteger[]{3, -1, -1}, new BigInteger[]{4, -1, -1}, new BigInteger[]{3, -1, -1}, new BigInteger[]{4, -1, -1}};
    }

    public static bool is_symmetric_tree(BigInteger[][] tree_0) {
        BigInteger[] stack_1 = new BigInteger[]{_idx(_idx(tree_0, (long)(0)), (long)(1)), _idx(_idx(tree_0, (long)(0)), (long)(2))};
        while ((stack_1.Length >= 2)) {
            BigInteger left_2 = _idx(stack_1, (long)((stack_1.Length - 2)));
            BigInteger right_3 = _idx(stack_1, (long)((stack_1.Length - 1)));
            stack_1 = _slice<BigInteger>(stack_1, 0, (stack_1.Length - 2));
            if (((left_2 == -1) && (right_3 == -1))) {
                continue;
            }
            if (((left_2 == -1) || (right_3 == -1))) {
                return false;
            }
            BigInteger[] lnode_4 = _idx(tree_0, (long)(left_2));
            BigInteger[] rnode_5 = _idx(tree_0, (long)(right_3));
            if ((_idx(lnode_4, (long)(0)) != _idx(rnode_5, (long)(0)))) {
                return false;
            }
            stack_1 = ((Func<BigInteger[]>)(() => { var _tmp = stack_1.Cast<BigInteger>().ToList(); _tmp.Add(_idx(lnode_4, (long)(1))); return _tmp.ToArray(); }))();
            stack_1 = ((Func<BigInteger[]>)(() => { var _tmp = stack_1.Cast<BigInteger>().ToList(); _tmp.Add(_idx(rnode_5, (long)(2))); return _tmp.ToArray(); }))();
            stack_1 = ((Func<BigInteger[]>)(() => { var _tmp = stack_1.Cast<BigInteger>().ToList(); _tmp.Add(_idx(lnode_4, (long)(2))); return _tmp.ToArray(); }))();
            stack_1 = ((Func<BigInteger[]>)(() => { var _tmp = stack_1.Cast<BigInteger>().ToList(); _tmp.Add(_idx(rnode_5, (long)(1))); return _tmp.ToArray(); }))();
        };
        return true;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_symmetric_tree(symmetric_tree_6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_symmetric_tree(asymmetric_tree_7))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
