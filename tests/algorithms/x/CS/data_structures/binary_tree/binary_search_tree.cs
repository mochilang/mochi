// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static object[] create_node(long value_0) {
        return new object[]{value_0, null, null};
    }

    public static object[] insert(object[] node_1, long value_2) {
        if ((node_1 == null)) {
            return Program.create_node(value_2);
        };
        if ((Convert.ToDouble(value_2) < Convert.ToDouble(((dynamic)node_1)[0]))) {
            node_1[1] = Program.insert((object[])((dynamic)node_1)[1], value_2);
        } else if ((Convert.ToDouble(value_2) > Convert.ToDouble(((dynamic)node_1)[0]))) {
            node_1[2] = Program.insert((object[])((dynamic)node_1)[2], value_2);
        };
        return node_1;
    }

    public static bool search(object[] node_3, long value_4) {
        if ((node_3 == null)) {
            return false;
        };
        if ((value_4 == ((dynamic)node_3)[0])) {
            return true;
        };
        if ((Convert.ToDouble(value_4) < Convert.ToDouble(((dynamic)node_3)[0]))) {
            return Program.search((object[])((dynamic)node_3)[1], value_4);
        };
        return Program.search((object[])((dynamic)node_3)[2], value_4);
    }

    public static long[] inorder(object[] node_5, long[] acc_6) {
        if ((node_5 == null)) {
            return acc_6;
        };
        long[] left_acc_7 = Program.inorder((object[])((dynamic)node_5)[1], acc_6);
        long[] with_node_8 = (Enumerable.ToArray(Enumerable.Append<long>(left_acc_7, (long)(object)((dynamic)node_5)[0])));
        return Program.inorder((object[])((dynamic)node_5)[2], with_node_8);
    }

    public static long find_min(object[] node_9) {
        object[] current_10 = node_9;
        while ((((dynamic)current_10)[1] != null)) {
            current_10 = (object[])(((dynamic)current_10)[1]);
        };
        return (long)(((dynamic)current_10)[0]);
    }

    public static long find_max(object[] node_11) {
        object[] current_12 = node_11;
        while ((((dynamic)current_12)[2] != null)) {
            current_12 = (object[])(((dynamic)current_12)[2]);
        };
        return (long)(((dynamic)current_12)[0]);
    }

    public static object[] delete(object[] node_13, long value_14) {
        if ((node_13 == null)) {
            return (object[])null;
        };
        if ((Convert.ToDouble(value_14) < Convert.ToDouble(((dynamic)node_13)[0]))) {
            node_13[1] = Program.delete((object[])((dynamic)node_13)[1], value_14);
        } else if ((Convert.ToDouble(value_14) > Convert.ToDouble(((dynamic)node_13)[0]))) {
            node_13[2] = Program.delete((object[])((dynamic)node_13)[2], value_14);
        } else {
            if ((((dynamic)node_13)[1] == null)) {
                return (object[])(((dynamic)node_13)[2]);
            }
            if ((((dynamic)node_13)[2] == null)) {
                return (object[])(((dynamic)node_13)[1]);
            }
            long min_val_15 = Program.find_min((object[])((dynamic)node_13)[2]);
            node_13[0] = min_val_15;
            node_13[2] = Program.delete((object[])((dynamic)node_13)[2], min_val_15);
        };
        return node_13;
    }

    public static void main() {
        object[] root_16 = null;
        long[] nums_17 = new long[]{8, 3, 6, 1, 10, 14, 13, 4, 7};
        foreach (long v_18 in nums_17) {
            root_16 = Program.insert(root_16, v_18);
        };
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_16, new long[]{}))));
        Console.WriteLine(Program._fmtTop(Program.search(root_16, 6)));
        Console.WriteLine(Program._fmtTop(Program.search(root_16, 20)));
        Console.WriteLine(Program._fmtTop(Program.find_min(root_16)));
        Console.WriteLine(Program._fmtTop(Program.find_max(root_16)));
        root_16 = Program.delete(root_16, 6);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.inorder(root_16, new long[]{}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
