// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[] arr1_26 = new BigInteger[]{1, 2, 3};
    static BigInteger[] st1_27 = Program.build(arr1_26, add);
    static BigInteger[] arr2_28 = new BigInteger[]{3, 1, 2};
    static BigInteger[] st2_29 = Program.build(arr2_28, min_int);
    static BigInteger[] arr3_30 = new BigInteger[]{2, 3, 1};
    static BigInteger[] st3_31 = Program.build(arr3_30, max_int);
    static BigInteger[] arr4_32 = new BigInteger[]{1, 5, 7, -1, 6};
    static long n4_33 = arr4_32.Length;
    static BigInteger[] st4_34 = Program.build(arr4_32, add);
    public static BigInteger[] build(BigInteger[] arr_0, Func<BigInteger, BigInteger, BigInteger> combine_1) {
        long n_2 = arr_0.Length;
        BigInteger[] st_3 = new BigInteger[]{};
        BigInteger i_4 = 0;
        while ((i_4 < (2 * n_2))) {
            st_3 = ((Func<BigInteger[]>)(() => { var _tmp = st_3.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_4 = (i_4 + 1);
        };
        i_4 = 0;
        while ((i_4 < n_2)) {
            st_3[(int)((n_2 + i_4))] = _idx(arr_0, (long)(i_4));
            i_4 = (i_4 + 1);
        };
        i_4 = (n_2 - 1);
        while ((i_4 > 0)) {
            st_3[(int)(i_4)] = combine_1(_idx(st_3, (long)((i_4 * 2))), _idx(st_3, (long)(((i_4 * 2) + 1))));
            i_4 = (i_4 - 1);
        };
        return st_3;
    }

    public static void update(BigInteger[] st_5, BigInteger n_6, Func<BigInteger, BigInteger, BigInteger> combine_7, BigInteger p_8, BigInteger v_9) {
        BigInteger idx_10 = (p_8 + n_6);
        st_5[(int)(idx_10)] = v_9;
        while ((idx_10 > 1)) {
            idx_10 = (long)((idx_10 / 2));
            st_5[(int)(idx_10)] = combine_7(_idx(st_5, (long)((idx_10 * 2))), _idx(st_5, (long)(((idx_10 * 2) + 1))));
        };
    }

    public static BigInteger query(BigInteger[] st_11, BigInteger n_12, Func<BigInteger, BigInteger, BigInteger> combine_13, BigInteger left_14, BigInteger right_15) {
        BigInteger l_16 = (left_14 + n_12);
        BigInteger r_17 = (right_15 + n_12);
        BigInteger res_18 = 0;
        bool has_19 = false;
        while ((l_16 <= r_17)) {
            if ((_mod(l_16, 2) == 1)) {
                if ((!has_19)) {
                    res_18 = _idx(st_11, (long)(l_16));
                    has_19 = true;
                } else {
                    res_18 = combine_13(res_18, _idx(st_11, (long)(l_16)));
                }
                l_16 = (l_16 + 1);
            }
            if ((_mod(r_17, 2) == 0)) {
                if ((!has_19)) {
                    res_18 = _idx(st_11, (long)(r_17));
                    has_19 = true;
                } else {
                    res_18 = combine_13(res_18, _idx(st_11, (long)(r_17)));
                }
                r_17 = (r_17 - 1);
            }
            l_16 = (long)((l_16 / 2));
            r_17 = (long)((r_17 / 2));
        };
        return res_18;
    }

    public static BigInteger add(BigInteger a_20, BigInteger b_21) {
        return (a_20 + b_21);
    }

    public static BigInteger min_int(BigInteger a_22, BigInteger b_23) {
        if ((a_22 < b_23)) {
            return a_22;
        } else {
            return b_23;
        };
        return default(BigInteger);
    }

    public static BigInteger max_int(BigInteger a_24, BigInteger b_25) {
        if ((a_24 > b_25)) {
            return a_24;
        } else {
            return b_25;
        };
        return default(BigInteger);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st1_27, arr1_26.Length, add, 0, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st2_29, arr2_28.Length, min_int, 0, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st3_31, arr3_30.Length, max_int, 0, 2))));
            Program.update(st4_34, n4_33, add, 1, -1);
            Program.update(st4_34, n4_33, add, 2, 3);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st4_34, n4_33, add, 1, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st4_34, n4_33, add, 1, 1))));
            Program.update(st4_34, n4_33, add, 4, 1);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st4_34, n4_33, add, 3, 4))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
