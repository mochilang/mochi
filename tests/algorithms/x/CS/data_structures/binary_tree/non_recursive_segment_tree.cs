// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] arr1_26 = new long[]{1, 2, 3};
    static long[] st1_27 = Program.build(arr1_26, add);
    public static long[] build(long[] arr_0, Func<long, long, long> combine_1) {
        long n_2 = arr_0.Length;
        long[] st_3 = new long[]{};
        long i_4 = 0;
        while ((i_4 < (2 * n_2))) {
            st_3 = (Enumerable.ToArray(Enumerable.Append<long>(st_3, 0)));
            i_4 = (i_4 + 1);
        };
        i_4 = 0;
        while ((i_4 < n_2)) {
            st_3[(n_2 + i_4)] = arr_0[(int)(i_4)];
            i_4 = (i_4 + 1);
        };
        i_4 = (n_2 - 1);
        while ((i_4 > 0)) {
            st_3[i_4] = combine_1(st_3[(int)((i_4 * 2))], st_3[(int)(((i_4 * 2) + 1))]);
            i_4 = (i_4 - 1);
        };
        return st_3;
    }

    public static void update(long[] st_5, long n_6, Func<long, long, long> combine_7, long p_8, long v_9) {
        long idx_10 = (p_8 + n_6);
        st_5[idx_10] = v_9;
        while ((idx_10 > 1)) {
            idx_10 = Convert.ToInt64((idx_10 / 2));
            st_5[idx_10] = combine_7(st_5[(int)((idx_10 * 2))], st_5[(int)(((idx_10 * 2) + 1))]);
        };
    }

    public static long query(long[] st_11, long n_12, Func<long, long, long> combine_13, long left_14, long right_15) {
        long l_16 = (left_14 + n_12);
        long r_17 = (right_15 + n_12);
        long res_18 = 0;
        bool has_19 = false;
        while ((l_16 <= r_17)) {
            if ((_mod(l_16, 2) == 1)) {
                if ((!has_19)) {
                    res_18 = st_11[(int)(l_16)];
                    has_19 = true;
                } else {
                    res_18 = combine_13(res_18, st_11[(int)(l_16)]);
                }
                l_16 = (l_16 + 1);
            }
            if ((_mod(r_17, 2) == 0)) {
                if ((!has_19)) {
                    res_18 = st_11[(int)(r_17)];
                    has_19 = true;
                } else {
                    res_18 = combine_13(res_18, st_11[(int)(r_17)]);
                }
                r_17 = (r_17 - 1);
            }
            l_16 = Convert.ToInt64((l_16 / 2));
            r_17 = Convert.ToInt64((r_17 / 2));
        };
        return res_18;
    }

    public static long add(long a_20, long b_21) {
        return (a_20 + b_21);
    }

    public static long min_int(long a_22, long b_23) {
        if ((a_22 < b_23)) {
            return a_22;
        } else {
            return b_23;
        };
        return default(long);
    }

    public static long max_int(long a_24, long b_25) {
        if ((a_24 > b_25)) {
            return a_24;
        } else {
            return b_25;
        };
        return default(long);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st1_27, arr1_26.Length, add, 0, 2))));
            long[] arr2_28 = new long[]{3, 1, 2};
            long[] st2_29 = Program.build(arr2_28, min_int);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st2_29, arr2_28.Length, min_int, 0, 2))));
            long[] arr3_30 = new long[]{2, 3, 1};
            long[] st3_31 = Program.build(arr3_30, max_int);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st3_31, arr3_30.Length, max_int, 0, 2))));
            long[] arr4_32 = new long[]{1, 5, 7, -1, 6};
            long n4_33 = arr4_32.Length;
            long[] st4_34 = Program.build(arr4_32, add);
            Program.update(st4_34, n4_33, add, 1, -1);
            Program.update(st4_34, n4_33, add, 2, 3);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st4_34, n4_33, add, 1, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st4_34, n4_33, add, 1, 1))));
            Program.update(st4_34, n4_33, add, 4, 1);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st4_34, n4_33, add, 3, 4))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
