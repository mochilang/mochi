// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Tree {
    public BigInteger[] values;
    public BigInteger[] lefts;
    public BigInteger[] rights;
    public BigInteger root;
    public override string ToString() => $"Tree {{values = {values}, lefts = {lefts}, rights = {rights}, root = {root}}}";
}
class Pair {
    public BigInteger idx;
    public BigInteger hd;
    public override string ToString() => $"Pair {{idx = {idx}, hd = {hd}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger NIL_0 = -1;
    static Tree tree_37 = Program.make_tree();
    public static Tree make_tree() {
        return new Tree{values = new BigInteger[]{3, 9, 20, 15, 7}, lefts = new BigInteger[]{1, NIL_0, 3, NIL_0, NIL_0}, rights = new BigInteger[]{2, NIL_0, 4, NIL_0, NIL_0}, root = 0};
    }

    public static BigInteger index_of(BigInteger[] xs_1, BigInteger x_2) {
        BigInteger i_3 = 0;
        while ((i_3 < xs_1.Length)) {
            if ((_idx(xs_1, (long)(i_3)) == x_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return NIL_0;
    }

    public static void sort_pairs(BigInteger[] hds_4, BigInteger[] vals_5) {
        BigInteger i_6 = 0;
        while ((i_6 < hds_4.Length)) {
            BigInteger j_7 = i_6;
            while (((j_7 > 0) && (_idx(hds_4, (long)((j_7 - 1))) > _idx(hds_4, (long)(j_7))))) {
                BigInteger hd_tmp_8 = _idx(hds_4, (long)((j_7 - 1)));
                hds_4[(int)((j_7 - 1))] = _idx(hds_4, (long)(j_7));
                hds_4[(int)(j_7)] = hd_tmp_8;
                BigInteger val_tmp_9 = _idx(vals_5, (long)((j_7 - 1)));
                vals_5[(int)((j_7 - 1))] = _idx(vals_5, (long)(j_7));
                vals_5[(int)(j_7)] = val_tmp_9;
                j_7 = (j_7 - 1);
            }
            i_6 = (i_6 + 1);
        };
    }

    public static BigInteger[] right_view(Tree t_10) {
        BigInteger[] res_11 = new BigInteger[]{};
        BigInteger[] queue_12 = new BigInteger[]{t_10.root};
        while ((queue_12.Length > 0)) {
            long size_13 = queue_12.Length;
            BigInteger i_14 = 0;
            while ((i_14 < size_13)) {
                BigInteger idx_15 = _idx(queue_12, (long)(i_14));
                if ((_idx(t_10.lefts, (long)(idx_15)) != NIL_0)) {
                    queue_12 = ((Func<BigInteger[]>)(() => { var _tmp = queue_12.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_10.lefts, (long)(idx_15))); return _tmp.ToArray(); }))();
                }
                if ((_idx(t_10.rights, (long)(idx_15)) != NIL_0)) {
                    queue_12 = ((Func<BigInteger[]>)(() => { var _tmp = queue_12.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_10.rights, (long)(idx_15))); return _tmp.ToArray(); }))();
                }
                i_14 = (i_14 + 1);
            }
            res_11 = ((Func<BigInteger[]>)(() => { var _tmp = res_11.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_10.values, (long)(_idx(queue_12, (long)((size_13 - 1)))))); return _tmp.ToArray(); }))();
            queue_12 = _slice<BigInteger>(queue_12, size_13, queue_12.Length);
        };
        return res_11;
    }

    public static BigInteger[] left_view(Tree t_16) {
        BigInteger[] res_17 = new BigInteger[]{};
        BigInteger[] queue_18 = new BigInteger[]{t_16.root};
        while ((queue_18.Length > 0)) {
            long size_19 = queue_18.Length;
            BigInteger i_20 = 0;
            while ((i_20 < size_19)) {
                BigInteger idx_21 = _idx(queue_18, (long)(i_20));
                if ((_idx(t_16.lefts, (long)(idx_21)) != NIL_0)) {
                    queue_18 = ((Func<BigInteger[]>)(() => { var _tmp = queue_18.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_16.lefts, (long)(idx_21))); return _tmp.ToArray(); }))();
                }
                if ((_idx(t_16.rights, (long)(idx_21)) != NIL_0)) {
                    queue_18 = ((Func<BigInteger[]>)(() => { var _tmp = queue_18.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_16.rights, (long)(idx_21))); return _tmp.ToArray(); }))();
                }
                i_20 = (i_20 + 1);
            }
            res_17 = ((Func<BigInteger[]>)(() => { var _tmp = res_17.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_16.values, (long)(_idx(queue_18, (long)(0))))); return _tmp.ToArray(); }))();
            queue_18 = _slice<BigInteger>(queue_18, size_19, queue_18.Length);
        };
        return res_17;
    }

    public static BigInteger[] top_view(Tree t_22) {
        BigInteger[] hds_23 = new BigInteger[]{};
        BigInteger[] vals_24 = new BigInteger[]{};
        BigInteger[] queue_idx_25 = new BigInteger[]{t_22.root};
        BigInteger[] queue_hd_26 = new BigInteger[]{0};
        while ((queue_idx_25.Length > 0)) {
            BigInteger idx_27 = _idx(queue_idx_25, (long)(0));
            queue_idx_25 = _slice<BigInteger>(queue_idx_25, 1, queue_idx_25.Length);
            BigInteger hd_28 = _idx(queue_hd_26, (long)(0));
            queue_hd_26 = _slice<BigInteger>(queue_hd_26, 1, queue_hd_26.Length);
            if ((Program.index_of(hds_23, hd_28) == NIL_0)) {
                hds_23 = ((Func<BigInteger[]>)(() => { var _tmp = hds_23.Cast<BigInteger>().ToList(); _tmp.Add(hd_28); return _tmp.ToArray(); }))();
                vals_24 = ((Func<BigInteger[]>)(() => { var _tmp = vals_24.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_22.values, (long)(idx_27))); return _tmp.ToArray(); }))();
            }
            if ((_idx(t_22.lefts, (long)(idx_27)) != NIL_0)) {
                queue_idx_25 = ((Func<BigInteger[]>)(() => { var _tmp = queue_idx_25.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_22.lefts, (long)(idx_27))); return _tmp.ToArray(); }))();
                queue_hd_26 = ((Func<BigInteger[]>)(() => { var _tmp = queue_hd_26.Cast<BigInteger>().ToList(); _tmp.Add((hd_28 - 1)); return _tmp.ToArray(); }))();
            }
            if ((_idx(t_22.rights, (long)(idx_27)) != NIL_0)) {
                queue_idx_25 = ((Func<BigInteger[]>)(() => { var _tmp = queue_idx_25.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_22.rights, (long)(idx_27))); return _tmp.ToArray(); }))();
                queue_hd_26 = ((Func<BigInteger[]>)(() => { var _tmp = queue_hd_26.Cast<BigInteger>().ToList(); _tmp.Add((hd_28 + 1)); return _tmp.ToArray(); }))();
            }
        };
        Program.sort_pairs(hds_23, vals_24);
        return vals_24;
    }

    public static BigInteger[] bottom_view(Tree t_29) {
        BigInteger[] hds_30 = new BigInteger[]{};
        BigInteger[] vals_31 = new BigInteger[]{};
        BigInteger[] queue_idx_32 = new BigInteger[]{t_29.root};
        BigInteger[] queue_hd_33 = new BigInteger[]{0};
        while ((queue_idx_32.Length > 0)) {
            BigInteger idx_34 = _idx(queue_idx_32, (long)(0));
            queue_idx_32 = _slice<BigInteger>(queue_idx_32, 1, queue_idx_32.Length);
            BigInteger hd_35 = _idx(queue_hd_33, (long)(0));
            queue_hd_33 = _slice<BigInteger>(queue_hd_33, 1, queue_hd_33.Length);
            BigInteger pos_36 = Program.index_of(hds_30, hd_35);
            if ((pos_36 == NIL_0)) {
                hds_30 = ((Func<BigInteger[]>)(() => { var _tmp = hds_30.Cast<BigInteger>().ToList(); _tmp.Add(hd_35); return _tmp.ToArray(); }))();
                vals_31 = ((Func<BigInteger[]>)(() => { var _tmp = vals_31.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_29.values, (long)(idx_34))); return _tmp.ToArray(); }))();
            } else {
                vals_31[(int)(pos_36)] = _idx(t_29.values, (long)(idx_34));
            }
            if ((_idx(t_29.lefts, (long)(idx_34)) != NIL_0)) {
                queue_idx_32 = ((Func<BigInteger[]>)(() => { var _tmp = queue_idx_32.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_29.lefts, (long)(idx_34))); return _tmp.ToArray(); }))();
                queue_hd_33 = ((Func<BigInteger[]>)(() => { var _tmp = queue_hd_33.Cast<BigInteger>().ToList(); _tmp.Add((hd_35 - 1)); return _tmp.ToArray(); }))();
            }
            if ((_idx(t_29.rights, (long)(idx_34)) != NIL_0)) {
                queue_idx_32 = ((Func<BigInteger[]>)(() => { var _tmp = queue_idx_32.Cast<BigInteger>().ToList(); _tmp.Add(_idx(t_29.rights, (long)(idx_34))); return _tmp.ToArray(); }))();
                queue_hd_33 = ((Func<BigInteger[]>)(() => { var _tmp = queue_hd_33.Cast<BigInteger>().ToList(); _tmp.Add((hd_35 + 1)); return _tmp.ToArray(); }))();
            }
        };
        Program.sort_pairs(hds_30, vals_31);
        return vals_31;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.right_view(tree_37)));
            Console.WriteLine(Program._fmtTop(Program.left_view(tree_37)));
            Console.WriteLine(Program._fmtTop(Program.top_view(tree_37)));
            Console.WriteLine(Program._fmtTop(Program.bottom_view(tree_37)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
