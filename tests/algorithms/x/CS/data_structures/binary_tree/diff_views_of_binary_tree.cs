// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Tree {
    public long[] values;
    public long[] lefts;
    public long[] rights;
    public long root;
    public override string ToString() => $"Tree {{values = {values}, lefts = {lefts}, rights = {rights}, root = {root}}}";
}
class Pair {
    public long idx;
    public long hd;
    public override string ToString() => $"Pair {{idx = {idx}, hd = {hd}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NIL_0 = (0 - 1);
    static Tree tree_37 = Program.make_tree();
    public static Tree make_tree() {
        return new Tree{values = new long[]{3, 9, 20, 15, 7}, lefts = new long[]{1, NIL_0, 3, NIL_0, NIL_0}, rights = new long[]{2, NIL_0, 4, NIL_0, NIL_0}, root = 0};
    }

    public static long index_of(long[] xs_1, long x_2) {
        long i_3 = 0;
        while ((i_3 < xs_1.Length)) {
            if ((xs_1[(int)(i_3)] == x_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return NIL_0;
    }

    public static void sort_pairs(long[] hds_4, long[] vals_5) {
        long i_6 = 0;
        while ((i_6 < hds_4.Length)) {
            long j_7 = i_6;
            while (((j_7 > 0) && (hds_4[(int)((j_7 - 1))] > hds_4[(int)(j_7)]))) {
                long hd_tmp_8 = hds_4[(int)((j_7 - 1))];
                hds_4[(j_7 - 1)] = hds_4[(int)(j_7)];
                hds_4[j_7] = hd_tmp_8;
                long val_tmp_9 = vals_5[(int)((j_7 - 1))];
                vals_5[(j_7 - 1)] = vals_5[(int)(j_7)];
                vals_5[j_7] = val_tmp_9;
                j_7 = (j_7 - 1);
            }
            i_6 = (i_6 + 1);
        };
    }

    public static long[] right_view(Tree t_10) {
        long[] res_11 = new long[]{};
        long[] queue_12 = new long[]{t_10.root};
        while ((queue_12.Length > 0)) {
            long size_13 = queue_12.Length;
            long i_14 = 0;
            while ((i_14 < size_13)) {
                long idx_15 = queue_12[(int)(i_14)];
                if ((t_10.lefts[(int)(idx_15)] != NIL_0)) {
                    queue_12 = (Enumerable.ToArray(Enumerable.Append<long>(queue_12, t_10.lefts[(int)(idx_15)])));
                }
                if ((t_10.rights[(int)(idx_15)] != NIL_0)) {
                    queue_12 = (Enumerable.ToArray(Enumerable.Append<long>(queue_12, t_10.rights[(int)(idx_15)])));
                }
                i_14 = (i_14 + 1);
            }
            res_11 = (Enumerable.ToArray(Enumerable.Append<long>(res_11, t_10.values[(int)(queue_12[(int)((size_13 - 1))])])));
            queue_12 = queue_12.Skip((int)(size_13)).Take((int)((queue_12.Length - size_13))).ToArray();
        };
        return res_11;
    }

    public static long[] left_view(Tree t_16) {
        long[] res_17 = new long[]{};
        long[] queue_18 = new long[]{t_16.root};
        while ((queue_18.Length > 0)) {
            long size_19 = queue_18.Length;
            long i_20 = 0;
            while ((i_20 < size_19)) {
                long idx_21 = queue_18[(int)(i_20)];
                if ((t_16.lefts[(int)(idx_21)] != NIL_0)) {
                    queue_18 = (Enumerable.ToArray(Enumerable.Append<long>(queue_18, t_16.lefts[(int)(idx_21)])));
                }
                if ((t_16.rights[(int)(idx_21)] != NIL_0)) {
                    queue_18 = (Enumerable.ToArray(Enumerable.Append<long>(queue_18, t_16.rights[(int)(idx_21)])));
                }
                i_20 = (i_20 + 1);
            }
            res_17 = (Enumerable.ToArray(Enumerable.Append<long>(res_17, t_16.values[(int)(queue_18[(int)(0)])])));
            queue_18 = queue_18.Skip((int)(size_19)).Take((int)((queue_18.Length - size_19))).ToArray();
        };
        return res_17;
    }

    public static long[] top_view(Tree t_22) {
        long[] hds_23 = new long[]{};
        long[] vals_24 = new long[]{};
        long[] queue_idx_25 = new long[]{t_22.root};
        long[] queue_hd_26 = new long[]{0};
        while ((queue_idx_25.Length > 0)) {
            long idx_27 = queue_idx_25[(int)(0)];
            queue_idx_25 = queue_idx_25.Skip((int)(1)).Take((int)((queue_idx_25.Length - 1))).ToArray();
            long hd_28 = queue_hd_26[(int)(0)];
            queue_hd_26 = queue_hd_26.Skip((int)(1)).Take((int)((queue_hd_26.Length - 1))).ToArray();
            if ((Program.index_of(hds_23, hd_28) == NIL_0)) {
                hds_23 = (Enumerable.ToArray(Enumerable.Append<long>(hds_23, hd_28)));
                vals_24 = (Enumerable.ToArray(Enumerable.Append<long>(vals_24, t_22.values[(int)(idx_27)])));
            }
            if ((t_22.lefts[(int)(idx_27)] != NIL_0)) {
                queue_idx_25 = (Enumerable.ToArray(Enumerable.Append<long>(queue_idx_25, t_22.lefts[(int)(idx_27)])));
                queue_hd_26 = (Enumerable.ToArray(Enumerable.Append<long>(queue_hd_26, (hd_28 - 1))));
            }
            if ((t_22.rights[(int)(idx_27)] != NIL_0)) {
                queue_idx_25 = (Enumerable.ToArray(Enumerable.Append<long>(queue_idx_25, t_22.rights[(int)(idx_27)])));
                queue_hd_26 = (Enumerable.ToArray(Enumerable.Append<long>(queue_hd_26, (hd_28 + 1))));
            }
        };
        Program.sort_pairs(hds_23, vals_24);
        return vals_24;
    }

    public static long[] bottom_view(Tree t_29) {
        long[] hds_30 = new long[]{};
        long[] vals_31 = new long[]{};
        long[] queue_idx_32 = new long[]{t_29.root};
        long[] queue_hd_33 = new long[]{0};
        while ((queue_idx_32.Length > 0)) {
            long idx_34 = queue_idx_32[(int)(0)];
            queue_idx_32 = queue_idx_32.Skip((int)(1)).Take((int)((queue_idx_32.Length - 1))).ToArray();
            long hd_35 = queue_hd_33[(int)(0)];
            queue_hd_33 = queue_hd_33.Skip((int)(1)).Take((int)((queue_hd_33.Length - 1))).ToArray();
            long pos_36 = Program.index_of(hds_30, hd_35);
            if ((pos_36 == NIL_0)) {
                hds_30 = (Enumerable.ToArray(Enumerable.Append<long>(hds_30, hd_35)));
                vals_31 = (Enumerable.ToArray(Enumerable.Append<long>(vals_31, t_29.values[(int)(idx_34)])));
            } else {
                vals_31[pos_36] = t_29.values[(int)(idx_34)];
            }
            if ((t_29.lefts[(int)(idx_34)] != NIL_0)) {
                queue_idx_32 = (Enumerable.ToArray(Enumerable.Append<long>(queue_idx_32, t_29.lefts[(int)(idx_34)])));
                queue_hd_33 = (Enumerable.ToArray(Enumerable.Append<long>(queue_hd_33, (hd_35 - 1))));
            }
            if ((t_29.rights[(int)(idx_34)] != NIL_0)) {
                queue_idx_32 = (Enumerable.ToArray(Enumerable.Append<long>(queue_idx_32, t_29.rights[(int)(idx_34)])));
                queue_hd_33 = (Enumerable.ToArray(Enumerable.Append<long>(queue_hd_33, (hd_35 + 1))));
            }
        };
        Program.sort_pairs(hds_30, vals_31);
        return vals_31;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.right_view(tree_37)));
            Console.WriteLine(Program._fmtTop(Program.left_view(tree_37)));
            Console.WriteLine(Program._fmtTop(Program.top_view(tree_37)));
            Console.WriteLine(Program._fmtTop(Program.bottom_view(tree_37)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
