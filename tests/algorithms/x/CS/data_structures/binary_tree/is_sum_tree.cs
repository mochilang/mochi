// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Node {
    public long value;
    public long left;
    public long right;
    public override string ToString() => $"Node {{value = {value}, left = {left}, right = {right}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static long tree_sum(Node[] nodes_0, long idx_1) {
        if ((idx_1 == -1)) {
            return 0;
        };
        Node node_2 = nodes_0[(int)(idx_1)];
        return ((node_2.value + Program.tree_sum(nodes_0, node_2.left)) + Program.tree_sum(nodes_0, node_2.right));
    }

    public static bool is_sum_node(Node[] nodes_3, long idx_4) {
        Node node_5 = nodes_3[(int)(idx_4)];
        if (((node_5.left == -1) && (node_5.right == -1))) {
            return true;
        };
        long left_sum_6 = Program.tree_sum(nodes_3, node_5.left);
        long right_sum_7 = Program.tree_sum(nodes_3, node_5.right);
        if ((node_5.value != (left_sum_6 + right_sum_7))) {
            return false;
        };
        bool left_ok_8 = true;
        if ((node_5.left != -1)) {
            left_ok_8 = Program.is_sum_node(nodes_3, node_5.left);
        };
        bool right_ok_9 = true;
        if ((node_5.right != -1)) {
            right_ok_9 = Program.is_sum_node(nodes_3, node_5.right);
        };
        return (left_ok_8 && right_ok_9);
    }

    public static Node[] build_a_tree() {
        return new Node[]{new Node{value = 11, left = 1, right = 2}, new Node{value = 2, left = 3, right = 4}, new Node{value = 29, left = 5, right = 6}, new Node{value = 1, left = -1, right = -1}, new Node{value = 7, left = -1, right = -1}, new Node{value = 15, left = -1, right = -1}, new Node{value = 40, left = 7, right = -1}, new Node{value = 35, left = -1, right = -1}};
    }

    public static Node[] build_a_sum_tree() {
        return new Node[]{new Node{value = 26, left = 1, right = 2}, new Node{value = 10, left = 3, right = 4}, new Node{value = 3, left = -1, right = 5}, new Node{value = 4, left = -1, right = -1}, new Node{value = 6, left = -1, right = -1}, new Node{value = 3, left = -1, right = -1}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
