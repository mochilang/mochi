// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;

class Node {
    public BigInteger value;
    public BigInteger left;
    public BigInteger right;
    public override string ToString() => $"Node {{value = {value}, left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    public static BigInteger tree_sum(Node[] nodes_0, BigInteger idx_1) {
        if ((idx_1 == -1)) {
            return 0;
        };
        Node node_2 = _idx(nodes_0, (long)(idx_1));
        return ((node_2.value + Program.tree_sum(nodes_0, node_2.left)) + Program.tree_sum(nodes_0, node_2.right));
    }

    public static bool is_sum_node(Node[] nodes_3, BigInteger idx_4) {
        Node node_5 = _idx(nodes_3, (long)(idx_4));
        if (((node_5.left == -1) && (node_5.right == -1))) {
            return true;
        };
        BigInteger left_sum_6 = Program.tree_sum(nodes_3, node_5.left);
        BigInteger right_sum_7 = Program.tree_sum(nodes_3, node_5.right);
        if ((node_5.value != (left_sum_6 + right_sum_7))) {
            return false;
        };
        bool left_ok_8 = true;
        if ((node_5.left != -1)) {
            left_ok_8 = Program.is_sum_node(nodes_3, node_5.left);
        };
        bool right_ok_9 = true;
        if ((node_5.right != -1)) {
            right_ok_9 = Program.is_sum_node(nodes_3, node_5.right);
        };
        return (left_ok_8 && right_ok_9);
    }

    public static Node[] build_a_tree() {
        return new Node[]{new Node{value = 11, left = 1, right = 2}, new Node{value = 2, left = 3, right = 4}, new Node{value = 29, left = 5, right = 6}, new Node{value = 1, left = -1, right = -1}, new Node{value = 7, left = -1, right = -1}, new Node{value = 15, left = -1, right = -1}, new Node{value = 40, left = 7, right = -1}, new Node{value = 35, left = -1, right = -1}};
    }

    public static Node[] build_a_sum_tree() {
        return new Node[]{new Node{value = 26, left = 1, right = 2}, new Node{value = 10, left = 3, right = 4}, new Node{value = 3, left = -1, right = 5}, new Node{value = 4, left = -1, right = -1}, new Node{value = 6, left = -1, right = -1}, new Node{value = 3, left = -1, right = -1}};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
