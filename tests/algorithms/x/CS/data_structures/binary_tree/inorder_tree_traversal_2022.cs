// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long data;
    public long left;
    public long right;
    public override string ToString() => $"Node {{data = {data}, left = {left}, right = {right}}}";
}
class TreeState {
    public Node[] nodes;
    public long root;
    public override string ToString() => $"TreeState {{nodes = {nodes}, root = {root}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long new_node(TreeState state_0, long value_1) {
        state_0.nodes = (Enumerable.ToArray(Enumerable.Append<Node>(state_0.nodes, new Node{data = value_1, left = -1, right = -1})));
        return (state_0.nodes.Length - 1);
    }

    public static void insert(TreeState state_2, long value_3) {
        if ((state_2.root == -1)) {
            state_2.root = Program.new_node(state_2, value_3);
            return;
        };
        long current_4 = state_2.root;
        Node[] nodes_5 = state_2.nodes;
        while (true) {
            Node node_6 = nodes_5[(int)(current_4)];
            if ((value_3 < node_6.data)) {
                if ((node_6.left == -1)) {
                    node_6.left = Program.new_node(state_2, value_3);
                    nodes_5[current_4] = node_6;
                    state_2.nodes = nodes_5;
                    return;
                }
                current_4 = node_6.left;
            } else {
                if ((node_6.right == -1)) {
                    node_6.right = Program.new_node(state_2, value_3);
                    nodes_5[current_4] = node_6;
                    state_2.nodes = nodes_5;
                    return;
                }
                current_4 = node_6.right;
            }
        };
    }

    public static long[] inorder(TreeState state_7, long idx_8) {
        if ((idx_8 == -1)) {
            return new long[]{};
        };
        Node node_9 = state_7.nodes[(int)(idx_8)];
        long[] result_10 = Program.inorder(state_7, node_9.left);
        result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, node_9.data)));
        long[] right_part_11 = Program.inorder(state_7, node_9.right);
        long i_12 = 0;
        while ((i_12 < right_part_11.Length)) {
            result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, right_part_11[(int)(i_12)])));
            i_12 = (i_12 + 1);
        };
        return result_10;
    }

    public static TreeState make_tree() {
        TreeState state_13 = new TreeState{nodes = new Node[]{}, root = -1};
        Program.insert(state_13, 15);
        Program.insert(state_13, 10);
        Program.insert(state_13, 25);
        Program.insert(state_13, 6);
        Program.insert(state_13, 14);
        Program.insert(state_13, 20);
        Program.insert(state_13, 60);
        return state_13;
    }

    public static void main() {
        TreeState state_14 = Program.make_tree();
        Console.WriteLine(Program._fmtTop("Printing values of binary search tree in Inorder Traversal."));
        Console.WriteLine(Program._fmtTop(Program.inorder(state_14, state_14.root)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
