// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger pow2(BigInteger exp_0) {
        BigInteger res_1 = 1;
        BigInteger i_2 = 0;
        while ((i_2 < exp_0)) {
            res_1 = (res_1 * 2);
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static BigInteger[][] create_sparse(BigInteger max_node_3, BigInteger[][] parent_4) {
        BigInteger j_5 = 1;
        while ((Program.pow2(j_5) < max_node_3)) {
            BigInteger i_6 = 1;
            while ((i_6 <= max_node_3)) {
                _idx(parent_4, (long)(j_5))[(int)(i_6)] = _idx(_idx(parent_4, (long)((j_5 - 1))), (long)(_idx(_idx(parent_4, (long)((j_5 - 1))), (long)(i_6))));
                i_6 = (i_6 + 1);
            }
            j_5 = (j_5 + 1);
        };
        return parent_4;
    }

    public static BigInteger lowest_common_ancestor(BigInteger u_7, BigInteger v_8, BigInteger[] level_9, BigInteger[][] parent_10) {
        if ((_idx(level_9, (long)(u_7)) < _idx(level_9, (long)(v_8)))) {
            BigInteger temp_11 = u_7;
            u_7 = v_8;
            v_8 = temp_11;
        };
        BigInteger i_12 = 18;
        while ((i_12 >= 0)) {
            if (((_idx(level_9, (long)(u_7)) - Program.pow2(i_12)) >= _idx(level_9, (long)(v_8)))) {
                u_7 = _idx(_idx(parent_10, (long)(i_12)), (long)(u_7));
            }
            i_12 = (i_12 - 1);
        };
        if ((u_7 == v_8)) {
            return u_7;
        };
        i_12 = 18;
        while ((i_12 >= 0)) {
            BigInteger pu_13 = _idx(_idx(parent_10, (long)(i_12)), (long)(u_7));
            BigInteger pv_14 = _idx(_idx(parent_10, (long)(i_12)), (long)(v_8));
            if (((pu_13 != 0) && (pu_13 != pv_14))) {
                u_7 = pu_13;
                v_8 = pv_14;
            }
            i_12 = (i_12 - 1);
        };
        return _idx(_idx(parent_10, (long)(0)), (long)(u_7));
    }

    public static void breadth_first_search(BigInteger[] level_15, BigInteger[][] parent_16, BigInteger max_node_17, Dictionary<BigInteger, BigInteger[]> graph_18, BigInteger root_19) {
        level_15[(int)(root_19)] = 0;
        BigInteger[] q_20 = new BigInteger[]{};
        q_20 = ((Func<BigInteger[]>)(() => { var _tmp = q_20.Cast<BigInteger>().ToList(); _tmp.Add(root_19); return _tmp.ToArray(); }))();
        BigInteger head_21 = 0;
        while ((head_21 < q_20.Length)) {
            BigInteger u_22 = _idx(q_20, (long)(head_21));
            head_21 = (head_21 + 1);
            BigInteger[] adj_23 = (graph_18.ContainsKey(u_22) ? graph_18[u_22] : null);
            BigInteger j_24 = 0;
            while ((j_24 < adj_23.Length)) {
                BigInteger v_25 = _idx(adj_23, (long)(j_24));
                if ((_idx(level_15, (long)(v_25)) == -1)) {
                    level_15[(int)(v_25)] = (_idx(level_15, (long)(u_22)) + 1);
                    _idx(parent_16, (long)(0))[(int)(v_25)] = u_22;
                    q_20 = ((Func<BigInteger[]>)(() => { var _tmp = q_20.Cast<BigInteger>().ToList(); _tmp.Add(v_25); return _tmp.ToArray(); }))();
                }
                j_24 = (j_24 + 1);
            }
        };
    }

    public static void main() {
        BigInteger max_node_26 = 13;
        BigInteger[][] parent_27 = new BigInteger[][]{};
        BigInteger i_28 = 0;
        while ((i_28 < 20)) {
            BigInteger[] row_29 = new BigInteger[]{};
            BigInteger j_30 = 0;
            while ((j_30 < (max_node_26 + 10))) {
                row_29 = ((Func<BigInteger[]>)(() => { var _tmp = row_29.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_30 = (j_30 + 1);
            }
            parent_27 = ((Func<BigInteger[][]>)(() => { var _tmp = parent_27.Cast<BigInteger[]>().ToList(); _tmp.Add(row_29); return _tmp.ToArray(); }))();
            i_28 = (i_28 + 1);
        };
        BigInteger[] level_31 = new BigInteger[]{};
        i_28 = 0;
        while ((i_28 < (max_node_26 + 10))) {
            level_31 = ((Func<BigInteger[]>)(() => { var _tmp = level_31.Cast<BigInteger>().ToList(); _tmp.Add(-1); return _tmp.ToArray(); }))();
            i_28 = (i_28 + 1);
        };
        Dictionary<BigInteger, BigInteger[]> graph_32 = new Dictionary<BigInteger, BigInteger[]>{};
        graph_32[1] = new BigInteger[]{2, 3, 4};
        graph_32[2] = new BigInteger[]{5};
        graph_32[3] = new BigInteger[]{6, 7};
        graph_32[4] = new BigInteger[]{8};
        graph_32[5] = new BigInteger[]{9, 10};
        graph_32[6] = new BigInteger[]{11};
        graph_32[7] = new BigInteger[]{};
        graph_32[8] = new BigInteger[]{12, 13};
        graph_32[9] = new BigInteger[]{};
        graph_32[10] = new BigInteger[]{};
        graph_32[11] = new BigInteger[]{};
        graph_32[12] = new BigInteger[]{};
        graph_32[13] = new BigInteger[]{};
        Program.breadth_first_search(level_31, parent_27, max_node_26, graph_32, 1);
        parent_27 = Program.create_sparse(max_node_26, parent_27);
        Console.WriteLine(Program._fmtTop(("LCA of node 1 and 3 is: " + _fmtStr(Program.lowest_common_ancestor(1, 3, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 5 and 6 is: " + _fmtStr(Program.lowest_common_ancestor(5, 6, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 7 and 11 is: " + _fmtStr(Program.lowest_common_ancestor(7, 11, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 6 and 7 is: " + _fmtStr(Program.lowest_common_ancestor(6, 7, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 4 and 12 is: " + _fmtStr(Program.lowest_common_ancestor(4, 12, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 8 and 8 is: " + _fmtStr(Program.lowest_common_ancestor(8, 8, level_31, parent_27)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
