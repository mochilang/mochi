// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long pow2(long exp_0) {
        long res_1 = 1;
        long i_2 = 0;
        while ((i_2 < exp_0)) {
            res_1 = (res_1 * 2);
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static long[][] create_sparse(long max_node_3, long[][] parent_4) {
        long j_5 = 1;
        while ((Program.pow2(j_5) < max_node_3)) {
            long i_6 = 1;
            while ((i_6 <= max_node_3)) {
                parent_4[(int)(j_5)][i_6] = parent_4[(int)((j_5 - 1))][(int)(parent_4[(int)((j_5 - 1))][(int)(i_6)])];
                i_6 = (i_6 + 1);
            }
            j_5 = (j_5 + 1);
        };
        return parent_4;
    }

    public static long lowest_common_ancestor(long u_7, long v_8, long[] level_9, long[][] parent_10) {
        if ((level_9[(int)(u_7)] < level_9[(int)(v_8)])) {
            long temp_11 = u_7;
            u_7 = v_8;
            v_8 = temp_11;
        };
        long i_12 = 18;
        while ((i_12 >= 0)) {
            if (((level_9[(int)(u_7)] - Program.pow2(i_12)) >= level_9[(int)(v_8)])) {
                u_7 = parent_10[(int)(i_12)][(int)(u_7)];
            }
            i_12 = (i_12 - 1);
        };
        if ((u_7 == v_8)) {
            return u_7;
        };
        i_12 = 18;
        while ((i_12 >= 0)) {
            long pu_13 = parent_10[(int)(i_12)][(int)(u_7)];
            long pv_14 = parent_10[(int)(i_12)][(int)(v_8)];
            if (((pu_13 != 0) && (pu_13 != pv_14))) {
                u_7 = pu_13;
                v_8 = pv_14;
            }
            i_12 = (i_12 - 1);
        };
        return parent_10[(int)(0)][(int)(u_7)];
    }

    public static void breadth_first_search(long[] level_15, long[][] parent_16, long max_node_17, Dictionary<long, long[]> graph_18, long root_19) {
        level_15[root_19] = 0;
        long[] q_20 = new long[]{};
        q_20 = (Enumerable.ToArray(Enumerable.Append<long>(q_20, root_19)));
        long head_21 = 0;
        while ((head_21 < q_20.Length)) {
            long u_22 = q_20[(int)(head_21)];
            head_21 = (head_21 + 1);
            long[] adj_23 = (graph_18.ContainsKey(u_22) ? graph_18[u_22] : null);
            long j_24 = 0;
            while ((j_24 < adj_23.Length)) {
                long v_25 = adj_23[(int)(j_24)];
                if ((level_15[(int)(v_25)] == (0 - 1))) {
                    level_15[v_25] = (level_15[(int)(u_22)] + 1);
                    parent_16[(int)(0)][v_25] = u_22;
                    q_20 = (Enumerable.ToArray(Enumerable.Append<long>(q_20, v_25)));
                }
                j_24 = (j_24 + 1);
            }
        };
    }

    public static void main() {
        long max_node_26 = 13;
        long[][] parent_27 = new long[][]{};
        long i_28 = 0;
        while ((i_28 < 20)) {
            long[] row_29 = new long[]{};
            long j_30 = 0;
            while ((j_30 < (max_node_26 + 10))) {
                row_29 = (Enumerable.ToArray(Enumerable.Append<long>(row_29, 0)));
                j_30 = (j_30 + 1);
            }
            parent_27 = (Enumerable.ToArray(Enumerable.Append<long[]>(parent_27, row_29)));
            i_28 = (i_28 + 1);
        };
        long[] level_31 = new long[]{};
        i_28 = 0;
        while ((i_28 < (max_node_26 + 10))) {
            level_31 = (Enumerable.ToArray(Enumerable.Append<long>(level_31, (0 - 1))));
            i_28 = (i_28 + 1);
        };
        Dictionary<long, long[]> graph_32 = new Dictionary<long, long[]>{};
        graph_32[1] = new long[]{2, 3, 4};
        graph_32[2] = new long[]{5};
        graph_32[3] = new long[]{6, 7};
        graph_32[4] = new long[]{8};
        graph_32[5] = new long[]{9, 10};
        graph_32[6] = new long[]{11};
        graph_32[7] = new long[]{};
        graph_32[8] = new long[]{12, 13};
        graph_32[9] = new long[]{};
        graph_32[10] = new long[]{};
        graph_32[11] = new long[]{};
        graph_32[12] = new long[]{};
        graph_32[13] = new long[]{};
        Program.breadth_first_search(level_31, parent_27, max_node_26, graph_32, 1);
        parent_27 = Program.create_sparse(max_node_26, parent_27);
        Console.WriteLine(Program._fmtTop(("LCA of node 1 and 3 is: " + _fmtStr(Program.lowest_common_ancestor(1, 3, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 5 and 6 is: " + _fmtStr(Program.lowest_common_ancestor(5, 6, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 7 and 11 is: " + _fmtStr(Program.lowest_common_ancestor(7, 11, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 6 and 7 is: " + _fmtStr(Program.lowest_common_ancestor(6, 7, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 4 and 12 is: " + _fmtStr(Program.lowest_common_ancestor(4, 12, level_31, parent_27)))));
        Console.WriteLine(Program._fmtTop(("LCA of node 8 and 8 is: " + _fmtStr(Program.lowest_common_ancestor(8, 8, level_31, parent_27)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
