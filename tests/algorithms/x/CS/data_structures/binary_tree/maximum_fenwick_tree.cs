// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[] arr_11 = new BigInteger[]{0, 0, 0, 0, 0};
    public static BigInteger[] zeros(BigInteger n_0) {
        BigInteger[] res_1 = new BigInteger[]{};
        BigInteger i_2 = 0;
        while ((i_2 < n_0)) {
            res_1 = ((Func<BigInteger[]>)(() => { var _tmp = res_1.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static void update(BigInteger[] arr_3, BigInteger idx_4, BigInteger value_5) {
        arr_3[(int)(idx_4)] = value_5;
    }

    public static BigInteger query(BigInteger[] arr_6, BigInteger left_7, BigInteger right_8) {
        BigInteger result_9 = 0;
        BigInteger i_10 = left_7;
        while ((i_10 < right_8)) {
            if ((_idx(arr_6, (long)(i_10)) > result_9)) {
                result_9 = _idx(arr_6, (long)(i_10));
            }
            i_10 = (i_10 + 1);
        };
        return result_9;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 0, 5)));
            Program.update(arr_11, 4, 100);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 0, 5)));
            Program.update(arr_11, 4, 0);
            Program.update(arr_11, 2, 20);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 0, 5)));
            Program.update(arr_11, 4, 10);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 2, 5)));
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 1, 5)));
            Program.update(arr_11, 2, 0);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 0, 5)));
            arr_11 = Program.zeros(10000);
            Program.update(arr_11, 255, 30);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 0, 10000)));
            arr_11 = Program.zeros(6);
            Program.update(arr_11, 5, 1);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 5, 6)));
            arr_11 = Program.zeros(6);
            Program.update(arr_11, 0, 1000);
            Console.WriteLine(Program._fmtTop(Program.query(arr_11, 0, 1)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
