// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] heap_0 = new long[]{0};
    static long size_1 = 0;
    public static void swap_up(long i_2) {
        long temp_3 = heap_0[(int)(i_2)];
        long idx_4 = i_2;
        while (((idx_4 / 2) > 0)) {
            if ((heap_0[(int)(idx_4)] > heap_0[(int)((idx_4 / 2))])) {
                heap_0[idx_4] = heap_0[(int)((idx_4 / 2))];
                heap_0[(idx_4 / 2)] = temp_3;
            }
            idx_4 = (idx_4 / 2);
        };
    }

    public static void insert(long value_5) {
        heap_0 = (Enumerable.ToArray(Enumerable.Append<long>(heap_0, value_5)));
        size_1 = (size_1 + 1);
        Program.swap_up(size_1);
    }

    public static void swap_down(long i_6) {
        long idx_7 = i_6;
        while ((size_1 >= (2 * idx_7))) {
            long bigger_child_8 = ((((2 * idx_7) + 1) > size_1) ? (2 * idx_7) : ((heap_0[(int)((2 * idx_7))] > heap_0[(int)(((2 * idx_7) + 1))]) ? (2 * idx_7) : ((2 * idx_7) + 1)));
            long temp_9 = heap_0[(int)(idx_7)];
            if ((heap_0[(int)(idx_7)] < heap_0[(int)(bigger_child_8)])) {
                heap_0[idx_7] = heap_0[(int)(bigger_child_8)];
                heap_0[bigger_child_8] = temp_9;
            }
            idx_7 = bigger_child_8;
        };
    }

    public static void shrink() {
        long[] new_heap_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 <= size_1)) {
            new_heap_10 = (Enumerable.ToArray(Enumerable.Append<long>(new_heap_10, heap_0[(int)(i_11)])));
            i_11 = (i_11 + 1);
        };
        heap_0 = new_heap_10;
    }

    public static long pop() {
        long max_value_12 = heap_0[(int)(1)];
        heap_0[1] = heap_0[(int)(size_1)];
        size_1 = (size_1 - 1);
        Program.shrink();
        Program.swap_down(1);
        return max_value_12;
    }

    public static long[] get_list() {
        long[] out_13 = new long[]{};
        long i_14 = 1;
        while ((i_14 <= size_1)) {
            out_13 = (Enumerable.ToArray(Enumerable.Append<long>(out_13, heap_0[(int)(i_14)])));
            i_14 = (i_14 + 1);
        };
        return out_13;
    }

    public static long len() {
        return size_1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.insert(6);
            Program.insert(10);
            Program.insert(15);
            Program.insert(12);
            Console.WriteLine(Program._fmtTop(Program.pop()));
            Console.WriteLine(Program._fmtTop(Program.pop()));
            Console.WriteLine(Program._fmtTop(Program.get_list()));
            Console.WriteLine(Program._fmtTop(Program.len()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
