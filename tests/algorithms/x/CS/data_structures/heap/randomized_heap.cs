// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NIL_0 = (0 - 1);
    static long seed_1 = 1;
    static Dictionary<string, long>[] nodes_5 = new Dictionary<string, long>[]{};
    static long root_6 = NIL_0;
    public static void set_seed(long s_2) {
        seed_1 = s_2;
    }

    public static long randint(long a_3, long b_4) {
        seed_1 = _mod(((seed_1 * 1103515245) + 12345), 2147483648L);
        return (_mod(seed_1, ((b_4 - a_3) + 1)) + a_3);
    }

    public static bool rand_bool() {
        return (Program.randint(0, 1) == 1);
    }

    public static void new_heap() {
        nodes_5 = new Dictionary<string, long>[]{};
        root_6 = NIL_0;
    }

    public static long merge(long r1_7, long r2_8) {
        if ((r1_7 == NIL_0)) {
            return r2_8;
        };
        if ((r2_8 == NIL_0)) {
            return r1_7;
        };
        if (((nodes_5[(int)(r1_7)].ContainsKey("value") ? nodes_5[(int)(r1_7)]["value"] : 0) > (nodes_5[(int)(r2_8)].ContainsKey("value") ? nodes_5[(int)(r2_8)]["value"] : 0))) {
            long tmp_9 = r1_7;
            r1_7 = r2_8;
            r2_8 = tmp_9;
        };
        if (Program.rand_bool()) {
            long tmp_10 = (nodes_5[(int)(r1_7)].ContainsKey("left") ? nodes_5[(int)(r1_7)]["left"] : 0);
            nodes_5[(int)(r1_7)]["left"] = (nodes_5[(int)(r1_7)].ContainsKey("right") ? nodes_5[(int)(r1_7)]["right"] : 0);
            nodes_5[(int)(r1_7)]["right"] = tmp_10;
        };
        nodes_5[(int)(r1_7)]["left"] = Program.merge((nodes_5[(int)(r1_7)].ContainsKey("left") ? nodes_5[(int)(r1_7)]["left"] : 0), r2_8);
        return r1_7;
    }

    public static void insert(long value_11) {
        Dictionary<string, long> node_12 = new Dictionary<string, long>{{"value", value_11}, {"left", NIL_0}, {"right", NIL_0}};
        nodes_5 = (Enumerable.ToArray(Enumerable.Append<Dictionary<string, long>>(nodes_5, node_12)));
        long idx_13 = (nodes_5.Length - 1);
        root_6 = Program.merge(root_6, idx_13);
    }

    public static long top() {
        if ((root_6 == NIL_0)) {
            return 0;
        };
        return (nodes_5[(int)(root_6)].ContainsKey("value") ? nodes_5[(int)(root_6)]["value"] : 0);
    }

    public static long pop() {
        long result_14 = Program.top();
        long l_15 = (nodes_5[(int)(root_6)].ContainsKey("left") ? nodes_5[(int)(root_6)]["left"] : 0);
        long r_16 = (nodes_5[(int)(root_6)].ContainsKey("right") ? nodes_5[(int)(root_6)]["right"] : 0);
        root_6 = Program.merge(l_15, r_16);
        return result_14;
    }

    public static bool is_empty() {
        return (root_6 == NIL_0);
    }

    public static long[] to_sorted_list() {
        long[] res_17 = new long[]{};
        while ((!Program.is_empty())) {
            res_17 = (Enumerable.ToArray(Enumerable.Append<long>(res_17, Program.pop())));
        };
        return res_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.set_seed(1);
            Program.new_heap();
            Program.insert(2);
            Program.insert(3);
            Program.insert(1);
            Program.insert(5);
            Program.insert(1);
            Program.insert(7);
            Console.WriteLine(Program._fmtTop(Program.to_sorted_list()));
            Program.new_heap();
            Program.insert(1);
            Program.insert(-1);
            Program.insert(0);
            Console.WriteLine(Program._fmtTop(Program.to_sorted_list()));
            Program.new_heap();
            Program.insert(3);
            Program.insert(1);
            Program.insert(3);
            Program.insert(7);
            Console.WriteLine(Program._fmtTop(Program.pop()));
            Console.WriteLine(Program._fmtTop(Program.pop()));
            Console.WriteLine(Program._fmtTop(Program.pop()));
            Console.WriteLine(Program._fmtTop(Program.pop()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
