// Generated by Mochi 0.10.72 (commit 30c348480d) on 2025-08-24 23:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Heap {
    public BigInteger[][] arr;
    public Dictionary<BigInteger, BigInteger> pos_map;
    public BigInteger size;
    public Func<BigInteger, BigInteger> key;
    public override string ToString() => $"Heap {{arr = {arr}, pos_map = {pos_map}, size = {size}, key = {key}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Heap h_58 = Program.new_heap(identity);
    public static Heap new_heap(Func<BigInteger, BigInteger> key_0) {
        return new Heap{arr = new BigInteger[][]{}, pos_map = new Dictionary<BigInteger, BigInteger>{}, size = 0, key = key_0};
    }

    public static BigInteger parent(BigInteger i_1) {
        if ((i_1 > 0)) {
            return ((i_1 - 1) / 2);
        };
        return -1;
    }

    public static BigInteger left(BigInteger i_2, BigInteger size_3) {
        BigInteger l_4 = ((2 * i_2) + 1);
        if ((l_4 < size_3)) {
            return l_4;
        };
        return -1;
    }

    public static BigInteger right(BigInteger i_5, BigInteger size_6) {
        BigInteger r_7 = ((2 * i_5) + 2);
        if ((r_7 < size_6)) {
            return r_7;
        };
        return -1;
    }

    public static void swap(Heap h_8, BigInteger i_9, BigInteger j_10) {
        BigInteger[][] arr_11 = h_8.arr;
        BigInteger item_i_12 = _idx(_idx(arr_11, (long)(i_9)), (long)(0));
        BigInteger item_j_13 = _idx(_idx(arr_11, (long)(j_10)), (long)(0));
        Dictionary<BigInteger, BigInteger> pm_14 = h_8.pos_map;
        pm_14[item_i_12] = (j_10 + 1);
        pm_14[item_j_13] = (i_9 + 1);
        h_8.pos_map = pm_14;
        BigInteger[] tmp_15 = _idx(arr_11, (long)(i_9));
        arr_11[(int)(i_9)] = _idx(arr_11, (long)(j_10));
        arr_11[(int)(j_10)] = tmp_15;
        h_8.arr = arr_11;
    }

    public static bool cmp(Heap h_16, BigInteger i_17, BigInteger j_18) {
        BigInteger[][] arr_19 = h_16.arr;
        return (_idx(_idx(arr_19, (long)(i_17)), (long)(1)) < _idx(_idx(arr_19, (long)(j_18)), (long)(1)));
    }

    public static BigInteger get_valid_parent(Heap h_20, BigInteger i_21) {
        BigInteger vp_22 = i_21;
        BigInteger l_23 = Program.left(i_21, h_20.size);
        if (((l_23 != -1) && (Program.cmp(h_20, l_23, vp_22) == false))) {
            vp_22 = l_23;
        };
        BigInteger r_24 = Program.right(i_21, h_20.size);
        if (((r_24 != -1) && (Program.cmp(h_20, r_24, vp_22) == false))) {
            vp_22 = r_24;
        };
        return vp_22;
    }

    public static void heapify_up(Heap h_25, BigInteger index_26) {
        BigInteger idx_27 = index_26;
        BigInteger p_28 = Program.parent(idx_27);
        while (((p_28 != -1) && (Program.cmp(h_25, idx_27, p_28) == false))) {
            Program.swap(h_25, idx_27, p_28);
            idx_27 = p_28;
            p_28 = Program.parent(p_28);
        };
    }

    public static void heapify_down(Heap h_29, BigInteger index_30) {
        BigInteger idx_31 = index_30;
        BigInteger vp_32 = Program.get_valid_parent(h_29, idx_31);
        while ((vp_32 != idx_31)) {
            Program.swap(h_29, idx_31, vp_32);
            idx_31 = vp_32;
            vp_32 = Program.get_valid_parent(h_29, idx_31);
        };
    }

    public static void update_item(Heap h_33, BigInteger item_34, BigInteger item_value_35) {
        Dictionary<BigInteger, BigInteger> pm_36 = h_33.pos_map;
        if (((pm_36.ContainsKey(item_34) ? pm_36[item_34] : BigInteger.Zero) == 0)) {
            return;
        };
        BigInteger index_37 = ((pm_36.ContainsKey(item_34) ? pm_36[item_34] : BigInteger.Zero) - 1);
        BigInteger[][] arr_38 = h_33.arr;
        arr_38[(int)(index_37)] = new BigInteger[]{item_34, h_33.key(item_value_35)};
        h_33.arr = arr_38;
        h_33.pos_map = pm_36;
        Program.heapify_up(h_33, index_37);
        Program.heapify_down(h_33, index_37);
    }

    public static void delete_item(Heap h_39, BigInteger item_40) {
        Dictionary<BigInteger, BigInteger> pm_41 = h_39.pos_map;
        if (((pm_41.ContainsKey(item_40) ? pm_41[item_40] : BigInteger.Zero) == 0)) {
            return;
        };
        BigInteger index_42 = ((pm_41.ContainsKey(item_40) ? pm_41[item_40] : BigInteger.Zero) - 1);
        pm_41[item_40] = 0;
        BigInteger[][] arr_43 = h_39.arr;
        BigInteger last_index_44 = (h_39.size - 1);
        if ((index_42 != last_index_44)) {
            arr_43[(int)(index_42)] = _idx(arr_43, (long)(last_index_44));
            BigInteger moved_45 = _idx(_idx(arr_43, (long)(index_42)), (long)(0));
            pm_41[moved_45] = (index_42 + 1);
        };
        h_39.size = (h_39.size - 1);
        h_39.arr = arr_43;
        h_39.pos_map = pm_41;
        if ((h_39.size > index_42)) {
            Program.heapify_up(h_39, index_42);
            Program.heapify_down(h_39, index_42);
        };
    }

    public static void insert_item(Heap h_46, BigInteger item_47, BigInteger item_value_48) {
        BigInteger[][] arr_49 = h_46.arr;
        BigInteger arr_len_50 = arr_49.Length;
        if ((arr_len_50 == h_46.size)) {
            arr_49 = ((Func<BigInteger[][]>)(() => { var _tmp = arr_49.Cast<BigInteger[]>().ToList(); _tmp.Add(new BigInteger[]{item_47, h_46.key(item_value_48)}); return _tmp.ToArray(); }))();
        } else {
            arr_49[(int)(h_46.size)] = new BigInteger[]{item_47, h_46.key(item_value_48)};
        };
        Dictionary<BigInteger, BigInteger> pm_51 = h_46.pos_map;
        pm_51[item_47] = (h_46.size + 1);
        h_46.size = (h_46.size + 1);
        h_46.arr = arr_49;
        h_46.pos_map = pm_51;
        Program.heapify_up(h_46, (h_46.size - 1));
    }

    public static BigInteger[] get_top(Heap h_52) {
        BigInteger[][] arr_53 = h_52.arr;
        if ((h_52.size > 0)) {
            return _idx(arr_53, (long)(0));
        };
        return new BigInteger[]{};
    }

    public static BigInteger[] extract_top(Heap h_54) {
        BigInteger[] top_55 = Program.get_top(h_54);
        if ((top_55.Length > 0)) {
            Program.delete_item(h_54, _idx(top_55, (long)(0)));
        };
        return top_55;
    }

    public static BigInteger identity(BigInteger x_56) {
        return x_56;
    }

    public static BigInteger negate(BigInteger x_57) {
        return -x_57;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.insert_item(h_58, 5, 34);
            Program.insert_item(h_58, 6, 31);
            Program.insert_item(h_58, 7, 37);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_top(h_58))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extract_top(h_58))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extract_top(h_58))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extract_top(h_58))));
            h_58 = Program.new_heap(negate);
            Program.insert_item(h_58, 5, 34);
            Program.insert_item(h_58, 6, 31);
            Program.insert_item(h_58, 7, 37);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_top(h_58))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extract_top(h_58))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extract_top(h_58))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extract_top(h_58))));
            Program.insert_item(h_58, 8, 45);
            Program.insert_item(h_58, 9, 40);
            Program.insert_item(h_58, 10, 50);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_top(h_58))));
            Program.update_item(h_58, 10, 30);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_top(h_58))));
            Program.delete_item(h_58, 10);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_top(h_58))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
