// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class BinomialHeap {
    public long[] data;
    public override string ToString() => $"BinomialHeap {{data = {data}}}";
}
class DeleteResult {
    public BinomialHeap heap;
    public long value;
    public override string ToString() => $"DeleteResult {{heap = {heap}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static BinomialHeap new_heap() {
        return new BinomialHeap{data = new long[]{}};
    }

    public static void swap(long[] data_0, long i_1, long j_2) {
        long tmp_3 = data_0[(int)(i_1)];
        data_0[i_1] = data_0[(int)(j_2)];
        data_0[j_2] = tmp_3;
    }

    public static void sift_up(long[] data_4, long idx_5) {
        long i_6 = idx_5;
        while ((i_6 > 0)) {
            long parent_7 = ((i_6 - 1) / 2);
            if ((data_4[(int)(parent_7)] <= data_4[(int)(i_6)])) {
                break;
            }
            Program.swap(data_4, parent_7, i_6);
            i_6 = parent_7;
        };
    }

    public static void sift_down(long[] data_8, long idx_9) {
        long i_10 = idx_9;
        long n_11 = data_8.Length;
        while (true) {
            long left_12 = ((2 * i_10) + 1);
            long right_13 = (left_12 + 1);
            long smallest_14 = i_10;
            if (((left_12 < n_11) && (data_8[(int)(left_12)] < data_8[(int)(smallest_14)]))) {
                smallest_14 = left_12;
            }
            if (((right_13 < n_11) && (data_8[(int)(right_13)] < data_8[(int)(smallest_14)]))) {
                smallest_14 = right_13;
            }
            if ((smallest_14 == i_10)) {
                break;
            }
            Program.swap(data_8, i_10, smallest_14);
            i_10 = smallest_14;
        };
    }

    public static BinomialHeap insert(BinomialHeap heap_15, long v_16) {
        long[] d_17 = heap_15.data;
        d_17 = (Enumerable.ToArray(Enumerable.Append<long>(d_17, v_16)));
        Program.sift_up(d_17, (d_17.Length - 1));
        return new BinomialHeap{data = d_17};
    }

    public static long peek(BinomialHeap heap_18) {
        return heap_18.data[(int)(0)];
    }

    public static bool is_empty(BinomialHeap heap_19) {
        return (heap_19.data.Length == 0);
    }

    public static DeleteResult delete_min(BinomialHeap heap_20) {
        long[] d_21 = heap_20.data;
        long min_22 = d_21[(int)(0)];
        d_21[0] = d_21[(int)((d_21.Length - 1))];
        d_21 = d_21.Skip((int)(0)).Take((int)(((d_21.Length - 1) - 0))).ToArray();
        if ((d_21.Length > 0)) {
            Program.sift_down(d_21, 0);
        };
        return new DeleteResult{heap = new BinomialHeap{data = d_21}, value = min_22};
    }

    public static void main() {
        BinomialHeap h_23 = Program.new_heap();
        h_23 = Program.insert(h_23, 10);
        h_23 = Program.insert(h_23, 3);
        h_23 = Program.insert(h_23, 7);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.peek(h_23))));
        DeleteResult d1_24 = Program.delete_min(h_23);
        h_23 = d1_24.heap;
        Console.WriteLine(Program._fmtTop(_fmtStr(d1_24.value)));
        DeleteResult d2_25 = Program.delete_min(h_23);
        h_23 = d2_25.heap;
        Console.WriteLine(Program._fmtTop(_fmtStr(d2_25.value)));
        DeleteResult d3_26 = Program.delete_min(h_23);
        h_23 = d3_26.heap;
        Console.WriteLine(Program._fmtTop(_fmtStr(d3_26.value)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
