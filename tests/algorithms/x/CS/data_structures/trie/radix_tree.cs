// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class RadixNode {
    public string prefix;
    public bool is_leaf;
    public Dictionary<string, long> children;
    public override string ToString() => $"RadixNode {{prefix = \"{prefix}\", is_leaf = {is_leaf}, children = {children}}}";
}
class RadixTree {
    public RadixNode[] nodes;
    public override string ToString() => $"RadixTree {{nodes = {nodes}}}";
}
class MatchResult {
    public string common;
    public string rem_prefix;
    public string rem_word;
    public override string ToString() => $"MatchResult {{common = \"{common}\", rem_prefix = \"{rem_prefix}\", rem_word = \"{rem_word}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static RadixNode new_node(string prefix_0, bool is_leaf_1) {
        return new RadixNode{prefix = prefix_0, is_leaf = is_leaf_1, children = new Dictionary<string, long>{}};
    }

    public static RadixTree new_tree() {
        RadixNode[] nodes_2 = new RadixNode[]{Program.new_node("", false)};
        return new RadixTree{nodes = nodes_2};
    }

    public static MatchResult match_prefix(RadixNode node_3, string word_4) {
        long x_5 = 0;
        string p_6 = node_3.prefix;
        string w_7 = word_4;
        long min_len_8 = p_6.Length;
        if ((w_7.Length < min_len_8)) {
            min_len_8 = w_7.Length;
        };
        while ((x_5 < min_len_8)) {
            if ((_substr(p_6, x_5, (x_5 + 1)) != _substr(w_7, x_5, (x_5 + 1)))) {
                break;
            }
            x_5 = (x_5 + 1);
        };
        string common_9 = _substr(p_6, 0, x_5);
        string rem_prefix_10 = _substr(p_6, x_5, p_6.Length);
        string rem_word_11 = _substr(w_7, x_5, w_7.Length);
        return new MatchResult{common = common_9, rem_prefix = rem_prefix_10, rem_word = rem_word_11};
    }

    public static void insert_many(RadixTree tree_12, string[] words_13) {
        foreach (string w_14 in words_13) {
            Program.insert(tree_12, 0, w_14);
        };
    }

    public static void insert(RadixTree tree_15, long idx_16, string word_17) {
        RadixNode[] nodes_18 = tree_15.nodes;
        RadixNode node_19 = nodes_18[(int)(idx_16)];
        if (((node_19.prefix == word_17) && (!node_19.is_leaf))) {
            node_19.is_leaf = true;
            nodes_18[idx_16] = node_19;
            tree_15.nodes = nodes_18;
            return;
        };
        string first_20 = _substr(word_17, 0, 1);
        Dictionary<string, long> children_21 = node_19.children;
        if ((!Program.has_key(children_21, first_20))) {
            long new_idx_22 = nodes_18.Length;
            nodes_18 = (Enumerable.ToArray(Enumerable.Append<RadixNode>(nodes_18, Program.new_node(word_17, true))));
            children_21[first_20] = new_idx_22;
            node_19.children = children_21;
            nodes_18[idx_16] = node_19;
            tree_15.nodes = nodes_18;
            return;
        };
        long child_idx_23 = (children_21.ContainsKey(first_20) ? children_21[first_20] : 0);
        RadixNode child_24 = nodes_18[(int)(child_idx_23)];
        MatchResult res_25 = Program.match_prefix(child_24, word_17);
        if ((res_25.rem_prefix == "")) {
            Program.insert(tree_15, child_idx_23, res_25.rem_word);
            return;
        };
        child_24.prefix = res_25.rem_prefix;
        nodes_18[child_idx_23] = child_24;
        Dictionary<string, long> new_children_26 = new Dictionary<string, long>{};
        new_children_26[_substr(res_25.rem_prefix, 0, 1)] = child_idx_23;
        long new_idx_27 = nodes_18.Length;
        nodes_18 = (Enumerable.ToArray(Enumerable.Append<RadixNode>(nodes_18, Program.new_node(res_25.common, false))));
        nodes_18[(int)(new_idx_27)].children = new_children_26;
        if ((res_25.rem_word == "")) {
            nodes_18[(int)(new_idx_27)].is_leaf = true;
        } else {
            Program.insert(tree_15, new_idx_27, res_25.rem_word);
        };
        children_21[first_20] = new_idx_27;
        node_19.children = children_21;
        nodes_18[idx_16] = node_19;
        tree_15.nodes = nodes_18;
    }

    public static bool find(RadixTree tree_28, long idx_29, string word_30) {
        RadixNode[] nodes_31 = tree_28.nodes;
        RadixNode node_32 = nodes_31[(int)(idx_29)];
        string first_33 = _substr(word_30, 0, 1);
        Dictionary<string, long> children_34 = node_32.children;
        if ((!Program.has_key(children_34, first_33))) {
            return false;
        };
        long child_idx_35 = (children_34.ContainsKey(first_33) ? children_34[first_33] : 0);
        RadixNode child_36 = nodes_31[(int)(child_idx_35)];
        MatchResult res_37 = Program.match_prefix(child_36, word_30);
        if ((res_37.rem_prefix != "")) {
            return false;
        };
        if ((res_37.rem_word == "")) {
            return child_36.is_leaf;
        };
        return Program.find(tree_28, child_idx_35, res_37.rem_word);
    }

    public static Dictionary<string, long> remove_key(Dictionary<string, long> m_38, string k_39) {
        Dictionary<string, long> out_40 = new Dictionary<string, long>{};
        foreach (string key_41 in m_38.Keys) {
            if ((key_41 != k_39)) {
                out_40[key_41] = (m_38.ContainsKey(key_41) ? m_38[key_41] : 0);
            }
        };
        return out_40;
    }

    public static bool has_key(Dictionary<string, long> m_42, string k_43) {
        foreach (string key_44 in m_42.Keys) {
            if ((key_44 == k_43)) {
                return true;
            }
        };
        return false;
    }

    public static bool delete(RadixTree tree_45, long idx_46, string word_47) {
        RadixNode[] nodes_48 = tree_45.nodes;
        RadixNode node_49 = nodes_48[(int)(idx_46)];
        string first_50 = _substr(word_47, 0, 1);
        Dictionary<string, long> children_51 = node_49.children;
        if ((!Program.has_key(children_51, first_50))) {
            return false;
        };
        long child_idx_52 = (children_51.ContainsKey(first_50) ? children_51[first_50] : 0);
        RadixNode child_53 = nodes_48[(int)(child_idx_52)];
        MatchResult res_54 = Program.match_prefix(child_53, word_47);
        if ((res_54.rem_prefix != "")) {
            return false;
        };
        if ((res_54.rem_word != "")) {
            bool deleted_55 = Program.delete(tree_45, child_idx_52, res_54.rem_word);
            if (deleted_55) {
                nodes_48 = tree_45.nodes;
                node_49 = nodes_48[(int)(idx_46)];
            }
            return deleted_55;
        };
        if ((!child_53.is_leaf)) {
            return false;
        };
        if ((child_53.children.Count == 0)) {
            children_51 = Program.remove_key(children_51, first_50);
            node_49.children = children_51;
            nodes_48[idx_46] = node_49;
            tree_45.nodes = nodes_48;
            if (((children_51.Count == 1) && (!node_49.is_leaf))) {
                string only_key_56 = "";
                foreach (string k_57 in children_51.Keys) {
                    only_key_56 = k_57;
                }
                long merge_idx_58 = (children_51.ContainsKey(only_key_56) ? children_51[only_key_56] : 0);
                RadixNode merge_node_59 = nodes_48[(int)(merge_idx_58)];
                node_49.is_leaf = merge_node_59.is_leaf;
                node_49.prefix = (node_49.prefix + merge_node_59.prefix);
                node_49.children = merge_node_59.children;
                nodes_48[idx_46] = node_49;
                tree_45.nodes = nodes_48;
            }
        } else if ((child_53.children.Count > 1)) {
            child_53.is_leaf = false;
            nodes_48[child_idx_52] = child_53;
            tree_45.nodes = nodes_48;
        } else {
            string only_key_60 = "";
            foreach (string k_61 in child_53.children.Keys) {
                only_key_60 = k_61;
            }
            long merge_idx_62 = (child_53.children.ContainsKey(only_key_60) ? child_53.children[only_key_60] : 0);
            RadixNode merge_node_63 = nodes_48[(int)(merge_idx_62)];
            child_53.is_leaf = merge_node_63.is_leaf;
            child_53.prefix = (child_53.prefix + merge_node_63.prefix);
            child_53.children = merge_node_63.children;
            nodes_48[child_idx_52] = child_53;
            tree_45.nodes = nodes_48;
        };
        return true;
    }

    public static void print_tree(RadixTree tree_64, long idx_65, long height_66) {
        RadixNode[] nodes_67 = tree_64.nodes;
        RadixNode node_68 = nodes_67[(int)(idx_65)];
        if ((node_68.prefix != "")) {
            string line_69 = "";
            long i_70 = 0;
            while ((i_70 < height_66)) {
                line_69 = (line_69 + "-");
                i_70 = (i_70 + 1);
            }
            line_69 = ((line_69 + " ") + node_68.prefix);
            if (node_68.is_leaf) {
                line_69 = (line_69 + "  (leaf)");
            }
            Console.WriteLine(Program._fmtTop(line_69));
        };
        Dictionary<string, long> children_71 = node_68.children;
        foreach (string k_72 in children_71.Keys) {
            long child_idx_73 = (children_71.ContainsKey(k_72) ? children_71[k_72] : 0);
            Program.print_tree(tree_64, child_idx_73, (height_66 + 1));
        };
    }

    public static bool test_trie() {
        string[] words_74 = new string[]{"banana", "bananas", "bandana", "band", "apple", "all", "beast"};
        RadixTree tree_75 = Program.new_tree();
        Program.insert_many(tree_75, words_74);
        bool ok_76 = true;
        foreach (string w_77 in words_74) {
            if ((!Program.find(tree_75, 0, w_77))) {
                ok_76 = false;
            }
        };
        if (Program.find(tree_75, 0, "bandanas")) {
            ok_76 = false;
        };
        if (Program.find(tree_75, 0, "apps")) {
            ok_76 = false;
        };
        Program.delete(tree_75, 0, "all");
        if (Program.find(tree_75, 0, "all")) {
            ok_76 = false;
        };
        Program.delete(tree_75, 0, "banana");
        if (Program.find(tree_75, 0, "banana")) {
            ok_76 = false;
        };
        if ((!Program.find(tree_75, 0, "bananas"))) {
            ok_76 = false;
        };
        return ok_76;
    }

    public static void pytests() {
        if ((!Program.test_trie())) {
            throw new Exception("test failed");
        };
    }

    public static void main() {
        RadixTree tree_78 = Program.new_tree();
        string[] words_79 = new string[]{"banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast"};
        Program.insert_many(tree_78, words_79);
        Console.WriteLine(Program._fmtTop(("Words: " + _fmtStr(words_79))));
        Console.WriteLine(Program._fmtTop("Tree:"));
        Program.print_tree(tree_78, 0, 0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
