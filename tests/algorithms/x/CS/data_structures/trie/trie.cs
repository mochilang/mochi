// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public Dictionary<string, long> children;
    public bool is_leaf;
    public override string ToString() => $"Node {{children = {children}, is_leaf = {is_leaf}}}";
}
class Trie {
    public Node[] nodes;
    public override string ToString() => $"Trie {{nodes = {nodes}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Trie trie_54 = Program.new_trie();
    public static Trie new_trie() {
        return new Trie{nodes = new Node[]{new Node{children = new Dictionary<string, long>{}, is_leaf = false}}};
    }

    public static Dictionary<string, long> remove_key(Dictionary<string, long> m_0, string k_1) {
        Dictionary<string, long> out_2 = new Dictionary<string, long>{};
        foreach (string key_3 in m_0.Keys) {
            if ((key_3 != k_1)) {
                out_2[key_3] = (m_0.ContainsKey(key_3) ? m_0[key_3] : 0);
            }
        };
        return out_2;
    }

    public static void insert(Trie trie_4, string word_5) {
        Node[] nodes_6 = trie_4.nodes;
        long curr_7 = 0;
        long i_8 = 0;
        while ((i_8 < word_5.Length)) {
            string ch_9 = word_5.Substring((int)(i_8), 1);
            long child_idx_10 = -1;
            Dictionary<string, long> children_11 = nodes_6[(int)(curr_7)].children;
            if ((children_11.ContainsKey(ch_9))) {
                child_idx_10 = (children_11.ContainsKey(ch_9) ? children_11[ch_9] : 0);
            } else {
                Node new_node_12 = new Node{children = new Dictionary<string, long>{}, is_leaf = false};
                nodes_6 = (Enumerable.ToArray(Enumerable.Append<Node>(nodes_6, new_node_12)));
                child_idx_10 = (nodes_6.Length - 1);
                Dictionary<string, long> new_children_13 = children_11;
                new_children_13[ch_9] = child_idx_10;
                Node node_14 = nodes_6[(int)(curr_7)];
                node_14.children = new_children_13;
                nodes_6[curr_7] = node_14;
            }
            curr_7 = child_idx_10;
            i_8 = (i_8 + 1);
        };
        Node node_15 = nodes_6[(int)(curr_7)];
        node_15.is_leaf = true;
        nodes_6[curr_7] = node_15;
        trie_4.nodes = nodes_6;
    }

    public static void insert_many(Trie trie_16, string[] words_17) {
        foreach (string w_18 in words_17) {
            Program.insert(trie_16, w_18);
        };
    }

    public static bool find(Trie trie_19, string word_20) {
        Node[] nodes_21 = trie_19.nodes;
        long curr_22 = 0;
        long i_23 = 0;
        while ((i_23 < word_20.Length)) {
            string ch_24 = word_20.Substring((int)(i_23), 1);
            Dictionary<string, long> children_25 = nodes_21[(int)(curr_22)].children;
            if ((!(children_25.ContainsKey(ch_24)))) {
                return false;
            }
            curr_22 = (children_25.ContainsKey(ch_24) ? children_25[ch_24] : 0);
            i_23 = (i_23 + 1);
        };
        Node node_26 = nodes_21[(int)(curr_22)];
        return node_26.is_leaf;
    }

    public static void delete(Trie trie_27, string word_28) {
        Node[] nodes_29 = trie_27.nodes;
        Func<long, long, bool> _delete = null;
        _delete = (long idx_30, long pos_31) => {if ((pos_31 == word_28.Length)) {
            Node node_32 = nodes_29[(int)(idx_30)];
            if ((node_32.is_leaf == false)) {
                return false;
            }
            node_32.is_leaf = false;
            nodes_29[idx_30] = node_32;
            return (node_32.children.Count == 0);
        }; Node node_33 = nodes_29[(int)(idx_30)]; Dictionary<string, long> children_34 = node_33.children; string ch_35 = word_28.Substring((int)(pos_31), 1); if ((!(children_34.ContainsKey(ch_35)))) {
            return false;
        }; long child_idx_36 = (children_34.ContainsKey(ch_35) ? children_34[ch_35] : 0); bool should_delete_37 = _delete(child_idx_36, (pos_31 + 1)); node_33 = nodes_29[(int)(idx_30)]; if (should_delete_37) {
            Dictionary<string, long> new_children_38 = Program.remove_key(node_33.children, ch_35);
            node_33.children = new_children_38;
            nodes_29[idx_30] = node_33;
            return ((new_children_38.Count == 0) && (node_33.is_leaf == false));
        }; nodes_29[idx_30] = node_33; return false;};
        _delete(0, 0);
        trie_27.nodes = nodes_29;
    }

    public static void print_words(Trie trie_39) {
        Action<long, string> dfs = null;
        dfs = (long idx_40, string word_41) => {Node node_42 = trie_39.nodes[(int)(idx_40)]; if (node_42.is_leaf) {
            Console.WriteLine(Program._fmtTop(word_41));
        }; foreach (string key_43 in node_42.children.Keys) {
            dfs((node_42.children.ContainsKey(key_43) ? node_42.children[key_43] : 0), (word_41 + key_43));
        };};
        dfs(0, "");
    }

    public static bool test_trie() {
        string[] words_44 = new string[]{"banana", "bananas", "bandana", "band", "apple", "all", "beast"};
        Trie trie_45 = Program.new_trie();
        Program.insert_many(trie_45, words_44);
        bool ok_46 = true;
        foreach (string w_47 in words_44) {
            ok_46 = (ok_46 && Program.find(trie_45, w_47));
        };
        ok_46 = (ok_46 && Program.find(trie_45, "banana"));
        bool t_48 = Program.find(trie_45, "bandanas");
        ok_46 = (ok_46 && (t_48 == false));
        bool t2_49 = Program.find(trie_45, "apps");
        ok_46 = (ok_46 && (t2_49 == false));
        ok_46 = (ok_46 && Program.find(trie_45, "apple"));
        ok_46 = (ok_46 && Program.find(trie_45, "all"));
        Program.delete(trie_45, "all");
        bool t3_50 = Program.find(trie_45, "all");
        ok_46 = (ok_46 && (t3_50 == false));
        Program.delete(trie_45, "banana");
        bool t4_51 = Program.find(trie_45, "banana");
        ok_46 = (ok_46 && (t4_51 == false));
        ok_46 = (ok_46 && Program.find(trie_45, "bananas"));
        return ok_46;
    }

    public static void print_results(string msg_52, bool passes_53) {
        if (passes_53) {
            Console.WriteLine(Program._fmtTop((msg_52 + " works!")));
        } else {
            Console.WriteLine(Program._fmtTop((msg_52 + " doesn't work :(")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_results("Testing trie functionality", Program.test_trie());
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
