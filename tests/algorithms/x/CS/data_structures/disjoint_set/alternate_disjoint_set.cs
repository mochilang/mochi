// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class DisjointSet {
    public long[] set_counts;
    public long max_set;
    public long[] ranks;
    public long[] parents;
    public override string ToString() => $"DisjointSet {{set_counts = {set_counts}, max_set = {max_set}, ranks = {ranks}, parents = {parents}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static DisjointSet ds_24 = Program.disjoint_set_new(new long[]{1, 1, 1});
    public static long max_list(long[] xs_0) {
        long m_1 = xs_0[(int)(0)];
        long i_2 = 1;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] > m_1)) {
                m_1 = xs_0[(int)(i_2)];
            }
            i_2 = (i_2 + 1);
        };
        return m_1;
    }

    public static DisjointSet disjoint_set_new(long[] set_counts_3) {
        long max_set_4 = Program.max_list(set_counts_3);
        long num_sets_5 = set_counts_3.Length;
        long[] ranks_6 = new long[]{};
        long[] parents_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 < num_sets_5)) {
            ranks_6 = (Enumerable.ToArray(Enumerable.Append<long>(ranks_6, 1)));
            parents_7 = (Enumerable.ToArray(Enumerable.Append<long>(parents_7, i_8)));
            i_8 = (i_8 + 1);
        };
        return new DisjointSet{set_counts = set_counts_3, max_set = max_set_4, ranks = ranks_6, parents = parents_7};
    }

    public static long get_parent(DisjointSet ds_9, long idx_10) {
        if ((ds_9.parents[(int)(idx_10)] == idx_10)) {
            return idx_10;
        };
        long[] parents_11 = ds_9.parents;
        parents_11[idx_10] = Program.get_parent(ds_9, parents_11[(int)(idx_10)]);
        ds_9.parents = parents_11;
        return ds_9.parents[(int)(idx_10)];
    }

    public static bool merge(DisjointSet ds_12, long src_13, long dst_14) {
        long src_parent_15 = Program.get_parent(ds_12, src_13);
        long dst_parent_16 = Program.get_parent(ds_12, dst_14);
        if ((src_parent_15 == dst_parent_16)) {
            return false;
        };
        if ((ds_12.ranks[(int)(dst_parent_16)] >= ds_12.ranks[(int)(src_parent_15)])) {
            long[] counts_17 = ds_12.set_counts;
            counts_17[dst_parent_16] = (counts_17[(int)(dst_parent_16)] + counts_17[(int)(src_parent_15)]);
            counts_17[src_parent_15] = 0;
            ds_12.set_counts = counts_17;
            long[] parents_18 = ds_12.parents;
            parents_18[src_parent_15] = dst_parent_16;
            ds_12.parents = parents_18;
            if ((ds_12.ranks[(int)(dst_parent_16)] == ds_12.ranks[(int)(src_parent_15)])) {
                long[] ranks_19 = ds_12.ranks;
                ranks_19[dst_parent_16] = (ranks_19[(int)(dst_parent_16)] + 1);
                ds_12.ranks = ranks_19;
            }
            long joined_20 = ds_12.set_counts[(int)(dst_parent_16)];
            if ((joined_20 > ds_12.max_set)) {
                ds_12.max_set = joined_20;
            }
        } else {
            long[] counts_21 = ds_12.set_counts;
            counts_21[src_parent_15] = (counts_21[(int)(src_parent_15)] + counts_21[(int)(dst_parent_16)]);
            counts_21[dst_parent_16] = 0;
            ds_12.set_counts = counts_21;
            long[] parents_22 = ds_12.parents;
            parents_22[dst_parent_16] = src_parent_15;
            ds_12.parents = parents_22;
            long joined_23 = ds_12.set_counts[(int)(src_parent_15)];
            if ((joined_23 > ds_12.max_set)) {
                ds_12.max_set = joined_23;
            }
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.merge(ds_24, 1, 2)));
            Console.WriteLine(Program._fmtTop(Program.merge(ds_24, 0, 2)));
            Console.WriteLine(Program._fmtTop(Program.merge(ds_24, 0, 1)));
            Console.WriteLine(Program._fmtTop(Program.get_parent(ds_24, 0)));
            Console.WriteLine(Program._fmtTop(Program.get_parent(ds_24, 1)));
            Console.WriteLine(Program._fmtTop(ds_24.max_set));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
