// Generated by Mochi 0.10.72 (commit bec97b2ce3) on 2025-08-24 16:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class DS {
    public BigInteger[] parent;
    public BigInteger[] rank;
    public override string ToString() => $"DS {{parent = {parent}, rank = {rank}}}";
}
class FindResult {
    public DS ds;
    public BigInteger root;
    public override string ToString() => $"FindResult {{ds = {ds}, root = {root}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static DS ds_21 = new DS{parent = new BigInteger[]{}, rank = new BigInteger[]{}};
    static BigInteger i_22 = 0;
    public static DS make_set(DS ds_0, BigInteger x_1) {
        BigInteger[] p_2 = ds_0.parent;
        BigInteger[] r_3 = ds_0.rank;
        p_2[(int)(x_1)] = x_1;
        r_3[(int)(x_1)] = 0;
        return new DS{parent = p_2, rank = r_3};
    }

    public static FindResult find_set(DS ds_4, BigInteger x_5) {
        if ((_idx(ds_4.parent, (long)(x_5)) == x_5)) {
            return new FindResult{ds = ds_4, root = x_5};
        };
        FindResult res_6 = Program.find_set(ds_4, _idx(ds_4.parent, (long)(x_5)));
        BigInteger[] p_7 = res_6.ds.parent;
        p_7[(int)(x_5)] = res_6.root;
        return new FindResult{ds = new DS{parent = p_7, rank = res_6.ds.rank}, root = res_6.root};
    }

    public static DS union_set(DS ds_8, BigInteger x_9, BigInteger y_10) {
        FindResult fx_11 = Program.find_set(ds_8, x_9);
        DS ds1_12 = fx_11.ds;
        BigInteger x_root_13 = fx_11.root;
        FindResult fy_14 = Program.find_set(ds1_12, y_10);
        DS ds2_15 = fy_14.ds;
        BigInteger y_root_16 = fy_14.root;
        if ((x_root_13 == y_root_16)) {
            return ds2_15;
        };
        BigInteger[] p_17 = ds2_15.parent;
        BigInteger[] r_18 = ds2_15.rank;
        if ((_idx(r_18, (long)(x_root_13)) > _idx(r_18, (long)(y_root_16)))) {
            p_17[(int)(y_root_16)] = x_root_13;
        } else {
            p_17[(int)(x_root_13)] = y_root_16;
            if ((_idx(r_18, (long)(x_root_13)) == _idx(r_18, (long)(y_root_16)))) {
                r_18[(int)(y_root_16)] = (_idx(r_18, (long)(y_root_16)) + 1);
            }
        };
        return new DS{parent = p_17, rank = r_18};
    }

    public static bool same_python_set(BigInteger a_19, BigInteger b_20) {
        if (((a_19 < 3) && (b_20 < 3))) {
            return true;
        };
        if (((((a_19 >= 3) && (a_19 < 6)) && (b_20 >= 3)) && (b_20 < 6))) {
            return true;
        };
        return false;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_22 < 6)) {
                ds_21.parent = ((Func<BigInteger[]>)(() => { var _tmp = ds_21.parent.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                ds_21.rank = ((Func<BigInteger[]>)(() => { var _tmp = ds_21.rank.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                ds_21 = Program.make_set(ds_21, i_22);
                i_22 = (i_22 + 1);
            }
            ds_21 = Program.union_set(ds_21, 0, 1);
            ds_21 = Program.union_set(ds_21, 1, 2);
            ds_21 = Program.union_set(ds_21, 3, 4);
            ds_21 = Program.union_set(ds_21, 3, 5);
            i_22 = 0;
            while ((i_22 < 6)) {
                BigInteger j_23 = 0;
                while ((j_23 < 6)) {
                    FindResult res_i_24 = Program.find_set(ds_21, i_22);
                    ds_21 = res_i_24.ds;
                    BigInteger root_i_25 = res_i_24.root;
                    FindResult res_j_26 = Program.find_set(ds_21, j_23);
                    ds_21 = res_j_26.ds;
                    BigInteger root_j_27 = res_j_26.root;
                    bool same_28 = Program.same_python_set(i_22, j_23);
                    bool root_same_29 = (root_i_25 == root_j_27);
                    if (same_28) {
                        if ((!root_same_29)) {
                            throw new Exception("nodes should be in same set");
                        }
                    } else if (root_same_29) {
                        throw new Exception("nodes should be in different sets");
                    }
                    j_23 = (j_23 + 1);
                }
                i_22 = (i_22 + 1);
            }
            i_22 = 0;
            while ((i_22 < 6)) {
                FindResult res_30 = Program.find_set(ds_21, i_22);
                ds_21 = res_30.ds;
                Console.WriteLine(Program._fmtTop(_fmtStr(res_30.root)));
                i_22 = (i_22 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
