// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] tail(long[] xs_0) {
        long[] res_1 = new long[]{};
        long i_2 = 1;
        while ((i_2 < xs_0.Length)) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<long>(res_1, xs_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static long[] rotate_left(long[] xs_3) {
        if ((xs_3.Length == 0)) {
            return xs_3;
        };
        long[] res_4 = new long[]{};
        long i_5 = 1;
        while ((i_5 < xs_3.Length)) {
            res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, xs_3[(int)(i_5)])));
            i_5 = (i_5 + 1);
        };
        res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, xs_3[(int)(0)])));
        return res_4;
    }

    public static long[][] permute_recursive(long[] nums_6) {
        if ((nums_6.Length == 0)) {
            long[][] base_7 = new long[][]{};
            return (Enumerable.ToArray(Enumerable.Append<long[]>(base_7, new long[]{})));
        };
        long[][] result_8 = new long[][]{};
        long[] current_9 = nums_6;
        long count_10 = 0;
        while ((count_10 < nums_6.Length)) {
            long n_11 = current_9[(int)(0)];
            long[] rest_12 = Program.tail(current_9);
            long[][] perms_13 = Program.permute_recursive(rest_12);
            long j_14 = 0;
            while ((j_14 < perms_13.Length)) {
                long[] perm_15 = (Enumerable.ToArray(Enumerable.Append<long>(perms_13[(int)(j_14)], n_11)));
                result_8 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_8, perm_15)));
                j_14 = (j_14 + 1);
            }
            current_9 = Program.rotate_left(current_9);
            count_10 = (count_10 + 1);
        };
        return result_8;
    }

    public static long[] swap(long[] xs_16, long i_17, long j_18) {
        long[] res_19 = new long[]{};
        long k_20 = 0;
        while ((k_20 < xs_16.Length)) {
            if ((k_20 == i_17)) {
                res_19 = (Enumerable.ToArray(Enumerable.Append<long>(res_19, xs_16[(int)(j_18)])));
            } else if ((k_20 == j_18)) {
                res_19 = (Enumerable.ToArray(Enumerable.Append<long>(res_19, xs_16[(int)(i_17)])));
            } else {
                res_19 = (Enumerable.ToArray(Enumerable.Append<long>(res_19, xs_16[(int)(k_20)])));
            }
            k_20 = (k_20 + 1);
        };
        return res_19;
    }

    public static long[][] permute_backtrack_helper(long[] nums_21, long start_22, long[][] output_23) {
        if ((start_22 == (nums_21.Length - 1))) {
            return (Enumerable.ToArray(Enumerable.Append<long[]>(output_23, nums_21)));
        };
        long i_24 = start_22;
        long[][] res_25 = output_23;
        while ((i_24 < nums_21.Length)) {
            long[] swapped_26 = Program.swap(nums_21, start_22, i_24);
            res_25 = Program.permute_backtrack_helper(swapped_26, (start_22 + 1), res_25);
            i_24 = (i_24 + 1);
        };
        return res_25;
    }

    public static long[][] permute_backtrack(long[] nums_27) {
        long[][] output_28 = new long[][]{};
        return Program.permute_backtrack_helper(nums_27, 0, output_28);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.permute_recursive(new long[]{1, 2, 3}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.permute_backtrack(new long[]{1, 2, 3}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
