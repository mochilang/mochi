// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] arr1_14 = new long[]{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    public static long partition(long[] arr_0, long low_1, long high_2) {
        long pivot_3 = arr_0[(int)(high_2)];
        long i_4 = (low_1 - 1);
        long j_5 = low_1;
        while ((j_5 < high_2)) {
            if ((arr_0[(int)(j_5)] >= pivot_3)) {
                i_4 = (i_4 + 1);
                long tmp_6 = arr_0[(int)(i_4)];
                arr_0[i_4] = arr_0[(int)(j_5)];
                arr_0[j_5] = tmp_6;
            }
            j_5 = (j_5 + 1);
        };
        long k_7 = (i_4 + 1);
        long tmp_8 = arr_0[(int)(k_7)];
        arr_0[k_7] = arr_0[(int)(high_2)];
        arr_0[high_2] = tmp_8;
        return k_7;
    }

    public static long kth_largest_element(long[] arr_9, long position_10) {
        if ((arr_9.Length == 0)) {
            return -1;
        };
        if (((position_10 < 1) || (position_10 > arr_9.Length))) {
            return -1;
        };
        long low_11 = 0;
        long high_12 = (arr_9.Length - 1);
        while ((low_11 <= high_12)) {
            if (((low_11 > (arr_9.Length - 1)) || (high_12 < 0))) {
                return -1;
            }
            long pivot_index_13 = Program.partition(arr_9, low_11, high_12);
            if ((pivot_index_13 == (position_10 - 1))) {
                return arr_9[(int)(pivot_index_13)];
            } else if ((pivot_index_13 > (position_10 - 1))) {
                high_12 = (pivot_index_13 - 1);
            } else {
                low_11 = (pivot_index_13 + 1);
            }
        };
        return -1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.kth_largest_element(arr1_14, 3)));
            Console.WriteLine(Program._fmtTop("\n"));
            long[] arr2_15 = new long[]{2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5};
            Console.WriteLine(Program._fmtTop(Program.kth_largest_element(arr2_15, 1)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
