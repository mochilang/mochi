// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string puzzle_26 = "003020600900305001001806400008102900700000008006708200002609500800203009005010300";
    static long[][] grid_27 = Program.string_to_grid(puzzle_26);
    public static long[][] string_to_grid(string s_0) {
        long[][] grid_1 = new long[][]{};
        long i_2 = 0;
        while ((i_2 < 9)) {
            long[] row_3 = new long[]{};
            long j_4 = 0;
            while ((j_4 < 9)) {
                string ch_5 = _substr(s_0, ((i_2 * 9) + j_4), (((i_2 * 9) + j_4) + 1));
                long val_6 = 0;
                if (((ch_5 != "0") && (ch_5 != "."))) {
                    val_6 = Convert.ToInt64(ch_5);
                }
                row_3 = (Enumerable.ToArray(Enumerable.Append<long>(row_3, val_6)));
                j_4 = (j_4 + 1);
            }
            grid_1 = (Enumerable.ToArray(Enumerable.Append<long[]>(grid_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return grid_1;
    }

    public static void print_grid(long[][] grid_7) {
        for (var r_8 = 0; r_8 < 9; r_8++) {
            string line_9 = "";
            for (var c_10 = 0; c_10 < 9; c_10++) {
                line_9 = (line_9 + _fmtStr(grid_7[(int)(r_8)][(int)(c_10)]));
                if ((c_10 < 8)) {
                    line_9 = (line_9 + " ");
                }
            }
            Console.WriteLine(Program._fmtTop(line_9));
        };
    }

    public static bool is_safe(long[][] grid_11, long row_12, long column_13, long n_14) {
        for (var i_15 = 0; i_15 < 9; i_15++) {
            if (((grid_11[(int)(row_12)][(int)(i_15)] == n_14) || (grid_11[(int)(i_15)][(int)(column_13)] == n_14))) {
                return false;
            }
        };
        for (var i_16 = 0; i_16 < 3; i_16++) {
            for (var j_17 = 0; j_17 < 3; j_17++) {
                if ((grid_11[(int)(((row_12 - _mod(row_12, 3)) + i_16))][(int)(((column_13 - _mod(column_13, 3)) + j_17))] == n_14)) {
                    return false;
                }
            }
        };
        return true;
    }

    public static long[] find_empty(long[][] grid_18) {
        for (var i_19 = 0; i_19 < 9; i_19++) {
            for (var j_20 = 0; j_20 < 9; j_20++) {
                if ((grid_18[(int)(i_19)][(int)(j_20)] == 0)) {
                    return new long[]{i_19, j_20};
                }
            }
        };
        return new long[]{};
    }

    public static bool solve(long[][] grid_21) {
        long[] loc_22 = Program.find_empty(grid_21);
        if ((loc_22.Length == 0)) {
            return true;
        };
        long row_23 = loc_22[(int)(0)];
        long column_24 = loc_22[(int)(1)];
        for (var digit_25 = 1; digit_25 < 10; digit_25++) {
            if (Program.is_safe(grid_21, row_23, column_24, digit_25)) {
                grid_21[(int)(row_23)][column_24] = digit_25;
                if (Program.solve(grid_21)) {
                    return true;
                }
                grid_21[(int)(row_23)][column_24] = 0;
            }
        };
        return false;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Original grid:"));
            Program.print_grid(grid_27);
            if (Program.solve(grid_27)) {
                Console.WriteLine(Program._fmtTop("\nSolved grid:"));
                Program.print_grid(grid_27);
            } else {
                Console.WriteLine(Program._fmtTop("\nNo solution found"));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
