// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] st1_23 = Program.build_sparse_table(new long[]{8, 1, 0, 3, 4, 9, 3});
    public static long pow2(long n_0) {
        long result_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            result_1 = (result_1 * 2);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long int_log2(long n_3) {
        long v_4 = n_3;
        long res_5 = 0;
        while ((v_4 > 1)) {
            v_4 = (v_4 / 2);
            res_5 = (res_5 + 1);
        };
        return res_5;
    }

    public static long[][] build_sparse_table(long[] number_list_6) {
        if ((number_list_6.Length == 0)) {
            throw new Exception("empty number list not allowed");
        };
        long length_7 = number_list_6.Length;
        long row_8 = (Program.int_log2(length_7) + 1);
        long[][] sparse_table_9 = new long[][]{};
        long j_10 = 0;
        while ((j_10 < row_8)) {
            long[] inner_11 = new long[]{};
            long i_12 = 0;
            while ((i_12 < length_7)) {
                inner_11 = (Enumerable.ToArray(Enumerable.Append<long>(inner_11, 0)));
                i_12 = (i_12 + 1);
            }
            sparse_table_9 = (Enumerable.ToArray(Enumerable.Append<long[]>(sparse_table_9, inner_11)));
            j_10 = (j_10 + 1);
        };
        long i_13 = 0;
        while ((i_13 < length_7)) {
            sparse_table_9[(int)(0)][i_13] = number_list_6[(int)(i_13)];
            i_13 = (i_13 + 1);
        };
        j_10 = 1;
        while ((Program.pow2(j_10) <= length_7)) {
            i_13 = 0;
            while ((((i_13 + Program.pow2(j_10)) - 1) < length_7)) {
                long left_14 = sparse_table_9[(int)((j_10 - 1))][(int)((i_13 + Program.pow2((j_10 - 1))))];
                long right_15 = sparse_table_9[(int)((j_10 - 1))][(int)(i_13)];
                if ((left_14 < right_15)) {
                    sparse_table_9[(int)(j_10)][i_13] = left_14;
                } else {
                    sparse_table_9[(int)(j_10)][i_13] = right_15;
                }
                i_13 = (i_13 + 1);
            }
            j_10 = (j_10 + 1);
        };
        return sparse_table_9;
    }

    public static long query(long[][] sparse_table_16, long left_bound_17, long right_bound_18) {
        if (((left_bound_17 < 0) || (right_bound_18 >= sparse_table_16[(int)(0)].Length))) {
            throw new Exception("list index out of range");
        };
        long interval_19 = ((right_bound_18 - left_bound_17) + 1);
        long j_20 = Program.int_log2(interval_19);
        long val1_21 = sparse_table_16[(int)(j_20)][(int)(((right_bound_18 - Program.pow2(j_20)) + 1))];
        long val2_22 = sparse_table_16[(int)(j_20)][(int)(left_bound_17)];
        if ((val1_21 < val2_22)) {
            return val1_21;
        };
        return val2_22;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(st1_23)));
            long[][] st2_24 = Program.build_sparse_table(new long[]{3, 1, 9});
            Console.WriteLine(Program._fmtTop(_fmtStr(st2_24)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st1_23, 0, 4))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st1_23, 4, 6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st2_24, 2, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.query(st2_24, 0, 1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
