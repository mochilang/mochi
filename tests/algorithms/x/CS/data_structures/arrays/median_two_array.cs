// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[] sortFloats(double[] xs_0) {
        double[] arr_1 = xs_0;
        long i_2 = 0;
        while ((i_2 < arr_1.Length)) {
            long j_3 = 0;
            while ((j_3 < (arr_1.Length - 1))) {
                if ((arr_1[(int)(j_3)] > arr_1[(int)((j_3 + 1))])) {
                    double t_4 = arr_1[(int)(j_3)];
                    arr_1[j_3] = arr_1[(int)((j_3 + 1))];
                    arr_1[(j_3 + 1)] = t_4;
                }
                j_3 = (j_3 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return arr_1;
    }

    public static double find_median_sorted_arrays(double[] nums1_5, double[] nums2_6) {
        if (((nums1_5.Length == 0) && (nums2_6.Length == 0))) {
            throw new Exception("Both input arrays are empty.");
        };
        double[] merged_7 = new double[]{};
        long i_8 = 0;
        while ((i_8 < nums1_5.Length)) {
            merged_7 = (Enumerable.ToArray(Enumerable.Append<double>(merged_7, nums1_5[(int)(i_8)])));
            i_8 = (i_8 + 1);
        };
        long j_9 = 0;
        while ((j_9 < nums2_6.Length)) {
            merged_7 = (Enumerable.ToArray(Enumerable.Append<double>(merged_7, nums2_6[(int)(j_9)])));
            j_9 = (j_9 + 1);
        };
        double[] sorted_10 = Program.sortFloats(merged_7);
        long total_11 = sorted_10.Length;
        if ((_mod(total_11, 2) == 1)) {
            return sorted_10[(int)((total_11 / 2))];
        };
        double middle1_12 = sorted_10[(int)(((total_11 / 2) - 1))];
        double middle2_13 = sorted_10[(int)((total_11 / 2))];
        return ((middle1_12 + middle2_13) / 2.0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.find_median_sorted_arrays(new double[]{1.0, 3.0}, new double[]{2.0})));
            Console.WriteLine(Program._fmtTop(Program.find_median_sorted_arrays(new double[]{1.0, 2.0}, new double[]{3.0, 4.0})));
            Console.WriteLine(Program._fmtTop(Program.find_median_sorted_arrays(new double[]{0.0, 0.0}, new double[]{0.0, 0.0})));
            Console.WriteLine(Program._fmtTop(Program.find_median_sorted_arrays(new double[]{}, new double[]{1.0})));
            Console.WriteLine(Program._fmtTop(Program.find_median_sorted_arrays(new double[]{-1000.0}, new double[]{1000.0})));
            Console.WriteLine(Program._fmtTop(Program.find_median_sorted_arrays(new double[]{-1.1, -2.2}, new double[]{-3.3, -4.4})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
