// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] sort_triplet(long a_0, long b_1, long c_2) {
        long x_3 = a_0;
        long y_4 = b_1;
        long z_5 = c_2;
        if ((x_3 > y_4)) {
            long t_6 = x_3;
            x_3 = y_4;
            y_4 = t_6;
        };
        if ((y_4 > z_5)) {
            long t_7 = y_4;
            y_4 = z_5;
            z_5 = t_7;
        };
        if ((x_3 > y_4)) {
            long t_8 = x_3;
            x_3 = y_4;
            y_4 = t_8;
        };
        return new long[]{x_3, y_4, z_5};
    }

    public static bool contains_triplet(long[][] arr_9, long[] target_10) {
        for (var i_11 = 0; i_11 < arr_9.Length; i_11++) {
            long[] item_12 = arr_9[(int)(i_11)];
            bool same_13 = true;
            for (var j_14 = 0; j_14 < target_10.Length; j_14++) {
                if ((item_12[(int)(j_14)] != target_10[(int)(j_14)])) {
                    same_13 = false;
                    break;
                }
            }
            if (same_13) {
                return true;
            }
        };
        return false;
    }

    public static bool contains_int(long[] arr_15, long value_16) {
        for (var i_17 = 0; i_17 < arr_15.Length; i_17++) {
            if ((arr_15[(int)(i_17)] == value_16)) {
                return true;
            }
        };
        return false;
    }

    public static long[][] find_triplets_with_0_sum(long[] nums_18) {
        long n_19 = nums_18.Length;
        long[][] result_20 = new long[][]{};
        for (var i_21 = 0; i_21 < n_19; i_21++) {
            for (var j_22 = (i_21 + 1); j_22 < n_19; j_22++) {
                for (var k_23 = (j_22 + 1); k_23 < n_19; k_23++) {
                    long a_24 = nums_18[(int)(i_21)];
                    long b_25 = nums_18[(int)(j_22)];
                    long c_26 = nums_18[(int)(k_23)];
                    if ((((a_24 + b_25) + c_26) == 0)) {
                        long[] trip_27 = Program.sort_triplet(a_24, b_25, c_26);
                        if ((!Program.contains_triplet(result_20, trip_27))) {
                            result_20 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_20, trip_27)));
                        }
                    }
                }
            }
        };
        return result_20;
    }

    public static long[][] find_triplets_with_0_sum_hashing(long[] arr_28) {
        long target_sum_29 = 0;
        long[][] output_30 = new long[][]{};
        for (var i_31 = 0; i_31 < arr_28.Length; i_31++) {
            long[] seen_32 = new long[]{};
            long current_sum_33 = (target_sum_29 - arr_28[(int)(i_31)]);
            for (var j_34 = (i_31 + 1); j_34 < arr_28.Length; j_34++) {
                long other_35 = arr_28[(int)(j_34)];
                long required_36 = (current_sum_33 - other_35);
                if (Program.contains_int(seen_32, required_36)) {
                    long[] trip_37 = Program.sort_triplet(arr_28[(int)(i_31)], other_35, required_36);
                    if ((!Program.contains_triplet(output_30, trip_37))) {
                        output_30 = (Enumerable.ToArray(Enumerable.Append<long[]>(output_30, trip_37)));
                    }
                }
                seen_32 = (Enumerable.ToArray(Enumerable.Append<long>(seen_32, other_35)));
            }
        };
        return output_30;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum(new long[]{-1, 0, 1, 2, -1, -4}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum(new long[]{0, 0, 0}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum(new long[]{1, 2, 3, 0, -1, -2, -3}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum_hashing(new long[]{-1, 0, 1, 2, -1, -4}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum_hashing(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum_hashing(new long[]{0, 0, 0}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_triplets_with_0_sum_hashing(new long[]{1, 2, 3, 0, -1, -2, -3}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
