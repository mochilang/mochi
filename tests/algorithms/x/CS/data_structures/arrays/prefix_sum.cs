// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class PrefixSum {
    public long[] prefix_sum;
    public override string ToString() => $"PrefixSum {{prefix_sum = {prefix_sum}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static PrefixSum ps_15 = Program.make_prefix_sum(new long[]{1, 2, 3});
    public static PrefixSum make_prefix_sum(long[] arr_0) {
        long[] prefix_1 = new long[]{};
        long running_2 = 0;
        long i_3 = 0;
        while ((i_3 < arr_0.Length)) {
            running_2 = (running_2 + arr_0[(int)(i_3)]);
            prefix_1 = (Enumerable.ToArray(Enumerable.Append<long>(prefix_1, running_2)));
            i_3 = (i_3 + 1);
        };
        return new PrefixSum{prefix_sum = prefix_1};
    }

    public static long get_sum(PrefixSum ps_4, long start_5, long end_6) {
        long[] prefix_7 = ps_4.prefix_sum;
        if ((prefix_7.Length == 0)) {
            throw new Exception("The array is empty.");
        };
        if ((((start_5 < 0) || (end_6 >= prefix_7.Length)) || (start_5 > end_6))) {
            throw new Exception("Invalid range specified.");
        };
        if ((start_5 == 0)) {
            return prefix_7[(int)(end_6)];
        };
        return (prefix_7[(int)(end_6)] - prefix_7[(int)((start_5 - 1))]);
    }

    public static bool contains_sum(PrefixSum ps_8, long target_sum_9) {
        long[] prefix_10 = ps_8.prefix_sum;
        long[] sums_11 = new long[]{0};
        long i_12 = 0;
        while ((i_12 < prefix_10.Length)) {
            long sum_item_13 = prefix_10[(int)(i_12)];
            long j_14 = 0;
            while ((j_14 < sums_11.Length)) {
                if ((sums_11[(int)(j_14)] == (sum_item_13 - target_sum_9))) {
                    return true;
                }
                j_14 = (j_14 + 1);
            }
            sums_11 = (Enumerable.ToArray(Enumerable.Append<long>(sums_11, sum_item_13)));
            i_12 = (i_12 + 1);
        };
        return false;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_sum(ps_15, 0, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_sum(ps_15, 1, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_sum(ps_15, 2, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_sum(ps_15, 6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_sum(ps_15, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_sum(ps_15, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_sum(ps_15, 4))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_sum(ps_15, 7))));
            PrefixSum ps2_16 = Program.make_prefix_sum(new long[]{1, -2, 3});
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.contains_sum(ps2_16, 2))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
