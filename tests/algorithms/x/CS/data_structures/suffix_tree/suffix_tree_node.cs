// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SuffixTreeNode {
    public Dictionary<string, long> children;
    public bool is_end_of_string;
    public long start;
    public long end;
    public long suffix_link;
    public override string ToString() => $"SuffixTreeNode {{children = {children}, is_end_of_string = {is_end_of_string}, start = {start}, end = {end}, suffix_link = {suffix_link}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static SuffixTreeNode root_8 = Program.new_suffix_tree_node(new Dictionary<string, long>{{"a", 1}}, false, (0 - 1), (0 - 1), (0 - 1));
    static SuffixTreeNode leaf_9 = Program.new_suffix_tree_node(new Dictionary<string, long>{}, true, 0, 2, 0);
    static SuffixTreeNode[] nodes_10 = new SuffixTreeNode[]{root_8, leaf_9};
    static SuffixTreeNode root_check_11 = nodes_10[(int)(0)];
    static SuffixTreeNode leaf_check_12 = nodes_10[(int)(1)];
    public static SuffixTreeNode new_suffix_tree_node(Dictionary<string, long> children_0, bool is_end_of_string_1, long start_2, long end_3, long suffix_link_4) {
        return new SuffixTreeNode{children = children_0, is_end_of_string = is_end_of_string_1, start = start_2, end = end_3, suffix_link = suffix_link_4};
    }

    public static SuffixTreeNode empty_suffix_tree_node() {
        return Program.new_suffix_tree_node(new Dictionary<string, long>{}, false, (0 - 1), (0 - 1), (0 - 1));
    }

    public static bool has_key(Dictionary<string, long> m_5, string k_6) {
        foreach (var key_7 in m_5.Keys) {
            if ((key_7 == k_6)) {
                return true;
            }
        };
        return false;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.has_key(root_check_11.children, "a"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(leaf_check_12.is_end_of_string)));
            Console.WriteLine(Program._fmtTop(_fmtStr(leaf_check_12.start)));
            Console.WriteLine(Program._fmtTop(_fmtStr(leaf_check_12.end)));
            Console.WriteLine(Program._fmtTop(_fmtStr(leaf_check_12.suffix_link)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
