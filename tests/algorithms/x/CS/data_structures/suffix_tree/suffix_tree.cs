// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Node {
    public Dictionary<string, BigInteger> children;
    public bool is_end_of_string;
    public BigInteger start;
    public BigInteger end;
    public override string ToString() => $"Node {{children = {children}, is_end_of_string = {is_end_of_string}, start = {start}, end = {end}}}";
}
class SuffixTree {
    public string text;
    public Node[] nodes;
    public override string ToString() => $"SuffixTree {{text = \"{text}\", nodes = {nodes}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static SuffixTree st_31 = Program.new_suffix_tree("bananas");
    public static Node new_node() {
        return new Node{children = new Dictionary<string, BigInteger>{}, is_end_of_string = false, start = -1, end = -1};
    }

    public static bool has_key(Dictionary<string, BigInteger> m_0, string k_1) {
        foreach (string key_2 in m_0.Keys) {
            if ((key_2 == k_1)) {
                return true;
            }
        };
        return false;
    }

    public static SuffixTree add_suffix(SuffixTree tree_3, string suffix_4, BigInteger index_5) {
        Node[] nodes_6 = tree_3.nodes;
        BigInteger node_idx_7 = 0;
        BigInteger j_8 = 0;
        while ((j_8 < suffix_4.Length)) {
            string ch_9 = _substr(suffix_4, (long)(j_8), (long)((j_8 + 1)));
            Node node_10 = _idx(nodes_6, (long)(node_idx_7));
            Dictionary<string, BigInteger> children_11 = node_10.children;
            if ((!Program.has_key(children_11, ch_9))) {
                nodes_6 = ((Func<Node[]>)(() => { var _tmp = nodes_6.Cast<Node>().ToList(); _tmp.Add(Program.new_node()); return _tmp.ToArray(); }))();
                BigInteger new_idx_12 = (nodes_6.Length - 1);
                children_11[ch_9] = new_idx_12;
            }
            node_10.children = children_11;
            nodes_6[(int)(node_idx_7)] = node_10;
            node_idx_7 = (children_11.ContainsKey(ch_9) ? children_11[ch_9] : BigInteger.Zero);
            j_8 = (j_8 + 1);
        };
        Node node_13 = _idx(nodes_6, (long)(node_idx_7));
        node_13.is_end_of_string = true;
        node_13.start = index_5;
        node_13.end = ((index_5 + suffix_4.Length) - 1);
        nodes_6[(int)(node_idx_7)] = node_13;
        tree_3.nodes = nodes_6;
        return tree_3;
    }

    public static SuffixTree build_suffix_tree(SuffixTree tree_14) {
        string text_15 = tree_14.text;
        long n_16 = text_15.Length;
        BigInteger i_17 = 0;
        SuffixTree t_18 = tree_14;
        while ((i_17 < n_16)) {
            string suffix_19 = "";
            BigInteger k_20 = i_17;
            while ((k_20 < n_16)) {
                suffix_19 = (suffix_19 + _substr(text_15, (long)(k_20), (long)((k_20 + 1))));
                k_20 = (k_20 + 1);
            }
            t_18 = Program.add_suffix(t_18, suffix_19, i_17);
            i_17 = (i_17 + 1);
        };
        return t_18;
    }

    public static SuffixTree new_suffix_tree(string text_21) {
        SuffixTree tree_22 = new SuffixTree{text = text_21, nodes = new Node[]{}};
        tree_22.nodes = ((Func<Node[]>)(() => { var _tmp = tree_22.nodes.Cast<Node>().ToList(); _tmp.Add(Program.new_node()); return _tmp.ToArray(); }))();
        tree_22 = Program.build_suffix_tree(tree_22);
        return tree_22;
    }

    public static bool search(SuffixTree tree_23, string pattern_24) {
        BigInteger node_idx_25 = 0;
        BigInteger i_26 = 0;
        Node[] nodes_27 = tree_23.nodes;
        while ((i_26 < pattern_24.Length)) {
            string ch_28 = _substr(pattern_24, (long)(i_26), (long)((i_26 + 1)));
            Node node_29 = _idx(nodes_27, (long)(node_idx_25));
            Dictionary<string, BigInteger> children_30 = node_29.children;
            if ((!Program.has_key(children_30, ch_28))) {
                return false;
            }
            node_idx_25 = (children_30.ContainsKey(ch_28) ? children_30[ch_28] : BigInteger.Zero);
            i_26 = (i_26 + 1);
        };
        return true;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.search(st_31, "ana"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.search(st_31, "apple"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
