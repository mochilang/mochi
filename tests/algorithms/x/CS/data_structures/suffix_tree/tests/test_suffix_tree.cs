// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SuffixTree {
    public string text;
    public override string ToString() => $"SuffixTree {{text = \"{text}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string text_8 = "banana";
    static SuffixTree st_9 = Program.suffix_tree_new(text_8);
    static string[] patterns_exist_10 = new string[]{"ana", "ban", "na"};
    static long i_11 = 0;
    public static SuffixTree suffix_tree_new(string text_0) {
        return new SuffixTree{text = text_0};
    }

    public static bool suffix_tree_search(SuffixTree st_1, string pattern_2) {
        if ((pattern_2.Length == 0)) {
            return true;
        };
        long i_3 = 0;
        long n_4 = st_1.text.Length;
        long m_5 = pattern_2.Length;
        while ((i_3 <= (n_4 - m_5))) {
            long j_6 = 0;
            bool found_7 = true;
            while ((j_6 < m_5)) {
                if ((st_1.text.Substring((int)((i_3 + j_6)), 1) != pattern_2.Substring((int)(j_6), 1))) {
                    found_7 = false;
                    break;
                }
                j_6 = (j_6 + 1);
            }
            if (found_7) {
                return true;
            }
            i_3 = (i_3 + 1);
        };
        return false;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_11 < patterns_exist_10.Length)) {
                Console.WriteLine(Program._fmtTop(_fmtStr(Program.suffix_tree_search(st_9, patterns_exist_10[(int)(i_11)]))));
                i_11 = (i_11 + 1);
            }
            string[] patterns_none_12 = new string[]{"xyz", "apple", "cat"};
            i_11 = 0;
            while ((i_11 < patterns_none_12.Length)) {
                Console.WriteLine(Program._fmtTop(_fmtStr(Program.suffix_tree_search(st_9, patterns_none_12[(int)(i_11)]))));
                i_11 = (i_11 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.suffix_tree_search(st_9, ""))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.suffix_tree_search(st_9, text_8))));
            string[] substrings_13 = new string[]{"ban", "ana", "a", "na"};
            i_11 = 0;
            while ((i_11 < substrings_13.Length)) {
                Console.WriteLine(Program._fmtTop(_fmtStr(Program.suffix_tree_search(st_9, substrings_13[(int)(i_11)]))));
                i_11 = (i_11 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
