// Generated by Mochi 0.10.59 on 2025-08-06 22:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class KDNode {
    public double[] point;
    public long left;
    public long right;
    public override string ToString() => $"KDNode {{point = {point}, left = {left}, right = {right}}}";
}
class SearchResult {
    public double[] point;
    public double distance;
    public long nodes_visited;
    public override string ToString() => $"SearchResult {{point = {point}, distance = {distance.ToString("0.0")}, nodes_visited = {nodes_visited}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static KDNode[] nodes_23 = new KDNode[]{new KDNode{point = new double[]{9.0, 1.0}, left = 1, right = 4}, new KDNode{point = new double[]{2.0, 7.0}, left = 2, right = 3}, new KDNode{point = new double[]{3.0, 6.0}, left = -1, right = -1}, new KDNode{point = new double[]{6.0, 12.0}, left = -1, right = -1}, new KDNode{point = new double[]{17.0, 15.0}, left = 5, right = 6}, new KDNode{point = new double[]{13.0, 15.0}, left = -1, right = -1}, new KDNode{point = new double[]{10.0, 19.0}, left = -1, right = -1}};
    static double[][] queries_24 = new double[][]{new double[]{9.0, 2.0}, new double[]{12.0, 15.0}, new double[]{1.0, 3.0}};
    static long q_25 = 0;
    public static double square_distance(double[] a_0, double[] b_1) {
        long i_2 = 0;
        double total_3 = 0.0;
        while ((i_2 < a_0.Length)) {
            double diff_4 = (a_0[(int)(i_2)] - b_1[(int)(i_2)]);
            total_3 = (total_3 + (diff_4 * diff_4));
            i_2 = (i_2 + 1);
        };
        return total_3;
    }

    public static SearchResult search(KDNode[] nodes_5, long index_6, double[] query_point_7, long depth_8, SearchResult best_9) {
        if ((index_6 == -1)) {
            return best_9;
        };
        SearchResult result_10 = best_9;
        result_10.nodes_visited = (result_10.nodes_visited + 1);
        KDNode node_11 = nodes_5[(int)(index_6)];
        double[] current_point_12 = node_11.point;
        double current_dist_13 = Program.square_distance(query_point_7, current_point_12);
        if (((result_10.point.Length == 0) || (current_dist_13 < result_10.distance))) {
            result_10.point = current_point_12;
            result_10.distance = current_dist_13;
        };
        long k_14 = query_point_7.Length;
        long axis_15 = _mod(depth_8, k_14);
        long nearer_16 = node_11.left;
        long further_17 = node_11.right;
        if ((query_point_7[(int)(axis_15)] > current_point_12[(int)(axis_15)])) {
            nearer_16 = node_11.right;
            further_17 = node_11.left;
        };
        result_10 = Program.search(nodes_5, nearer_16, query_point_7, (depth_8 + 1), result_10);
        double diff_18 = (query_point_7[(int)(axis_15)] - current_point_12[(int)(axis_15)]);
        if (((diff_18 * diff_18) < result_10.distance)) {
            result_10 = Program.search(nodes_5, further_17, query_point_7, (depth_8 + 1), result_10);
        };
        return result_10;
    }

    public static SearchResult nearest_neighbour_search(KDNode[] nodes_19, long root_20, double[] query_point_21) {
        SearchResult initial_22 = new SearchResult{point = new double[]{}, distance = 1e+30, nodes_visited = 0};
        return Program.search(nodes_19, root_20, query_point_21, 0, initial_22);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((q_25 < queries_24.Length)) {
                SearchResult res_26 = Program.nearest_neighbour_search(nodes_23, 0, queries_24[(int)(q_25)]);
                Console.WriteLine(Program._fmtTop((((((_fmtStr(res_26.point) + " ") + _fmtStr(res_26.distance)) + " ") + _fmtStr(res_26.nodes_visited)) + "\n")));
                q_25 = (q_25 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
