// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double INF_0 = 1e+09;
    static long seed_1 = 1;
    public static double rand_float() {
        seed_1 = _mod(((seed_1 * 1103515245) + 12345), 2147483648L);
        return (Convert.ToDouble(seed_1) / 2.147483648e+09);
    }

    public static double[][] hypercube_points(long num_points_2, double cube_size_3, long num_dimensions_4) {
        double[][] pts_5 = new double[][]{};
        long i_6 = 0;
        while ((i_6 < num_points_2)) {
            double[] p_7 = new double[]{};
            long j_8 = 0;
            while ((j_8 < num_dimensions_4)) {
                double v_9 = (cube_size_3 * Program.rand_float());
                p_7 = (Enumerable.ToArray(Enumerable.Append<double>(p_7, v_9)));
                j_8 = (j_8 + 1);
            }
            pts_5 = (Enumerable.ToArray(Enumerable.Append<double[]>(pts_5, p_7)));
            i_6 = (i_6 + 1);
        };
        return pts_5;
    }

    public static double[][] build_kdtree(double[][] points_10, long depth_11) {
        return points_10;
    }

    public static double distance_sq(double[] a_12, double[] b_13) {
        double sum_14 = 0.0;
        long i_15 = 0;
        while ((i_15 < a_12.Length)) {
            double d_16 = (a_12[(int)(i_15)] - b_13[(int)(i_15)]);
            sum_14 = (sum_14 + (d_16 * d_16));
            i_15 = (i_15 + 1);
        };
        return sum_14;
    }

    public static Dictionary<string, double> nearest_neighbour_search(double[][] points_17, double[] query_18) {
        if ((points_17.Length == 0)) {
            return new Dictionary<string, double>{{"index", -1.0}, {"dist", INF_0}, {"visited", 0.0}};
        };
        long nearest_idx_19 = 0;
        double nearest_dist_20 = INF_0;
        long visited_21 = 0;
        long i_22 = 0;
        while ((i_22 < points_17.Length)) {
            double d_23 = Program.distance_sq(query_18, points_17[(int)(i_22)]);
            visited_21 = (visited_21 + 1);
            if ((d_23 < nearest_dist_20)) {
                nearest_dist_20 = d_23;
                nearest_idx_19 = i_22;
            }
            i_22 = (i_22 + 1);
        };
        return new Dictionary<string, double>{{"index", Convert.ToDouble(nearest_idx_19)}, {"dist", nearest_dist_20}, {"visited", Convert.ToDouble(visited_21)}};
    }

    public static void test_build_cases() {
        double[][] empty_pts_24 = new double[][]{};
        double[][] tree0_25 = Program.build_kdtree(empty_pts_24, 0);
        if ((tree0_25.Length == 0)) {
            Console.WriteLine(Program._fmtTop("case1 true"));
        } else {
            Console.WriteLine(Program._fmtTop("case1 false"));
        };
        double[][] pts1_26 = Program.hypercube_points(10, 10.0, 2);
        double[][] tree1_27 = Program.build_kdtree(pts1_26, 2);
        if (((tree1_27.Length > 0) && (tree1_27[(int)(0)].Length == 2))) {
            Console.WriteLine(Program._fmtTop("case2 true"));
        } else {
            Console.WriteLine(Program._fmtTop("case2 false"));
        };
        double[][] pts2_28 = Program.hypercube_points(10, 10.0, 3);
        double[][] tree2_29 = Program.build_kdtree(pts2_28, -2);
        if (((tree2_29.Length > 0) && (tree2_29[(int)(0)].Length == 3))) {
            Console.WriteLine(Program._fmtTop("case3 true"));
        } else {
            Console.WriteLine(Program._fmtTop("case3 false"));
        };
    }

    public static void test_search() {
        double[][] pts_30 = Program.hypercube_points(10, 10.0, 2);
        double[][] tree_31 = Program.build_kdtree(pts_30, 0);
        double[] qp_32 = Program.hypercube_points(1, 10.0, 2)[(int)(0)];
        Dictionary<string, double> res_33 = Program.nearest_neighbour_search(tree_31, qp_32);
        if (((((res_33.ContainsKey("index") ? res_33["index"] : 0.0) != -1.0) && ((res_33.ContainsKey("dist") ? res_33["dist"] : 0.0) >= 0.0)) && ((res_33.ContainsKey("visited") ? res_33["visited"] : 0.0) > 0.0))) {
            Console.WriteLine(Program._fmtTop("search true"));
        } else {
            Console.WriteLine(Program._fmtTop("search false"));
        };
    }

    public static void test_edge() {
        double[][] empty_pts_34 = new double[][]{};
        double[][] tree_35 = Program.build_kdtree(empty_pts_34, 0);
        double[] query_36 = new double[]{0.0, 0.0};
        Dictionary<string, double> res_37 = Program.nearest_neighbour_search(tree_35, query_36);
        if (((((res_37.ContainsKey("index") ? res_37["index"] : 0.0) == -1.0) && ((res_37.ContainsKey("dist") ? res_37["dist"] : 0.0) > 1e+08)) && ((res_37.ContainsKey("visited") ? res_37["visited"] : 0.0) == 0.0))) {
            Console.WriteLine(Program._fmtTop("edge true"));
        } else {
            Console.WriteLine(Program._fmtTop("edge false"));
        };
    }

    public static void main() {
        seed_1 = 1;
        Program.test_build_cases();
        Program.test_search();
        Program.test_edge();
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
