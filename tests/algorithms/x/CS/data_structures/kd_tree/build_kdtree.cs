// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class KDNode {
    public double[] point;
    public long left;
    public long right;
    public override string ToString() => $"KDNode {{point = {point}, left = {left}, right = {right}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static KDNode[] tree_0 = new KDNode[]{};
    static double[][] pts_19 = new double[][]{new double[]{2.0, 3.0}, new double[]{5.0, 4.0}, new double[]{9.0, 6.0}, new double[]{4.0, 7.0}, new double[]{8.0, 1.0}, new double[]{7.0, 2.0}};
    static long root_20 = Program.build_kdtree(pts_19, 0);
    public static double[][] sort_points(double[][] points_1, long axis_2) {
        double[][] arr_3 = points_1;
        long i_4 = 0;
        while ((i_4 < arr_3.Length)) {
            long j_5 = 0;
            while ((j_5 < (arr_3.Length - 1))) {
                if ((arr_3[(int)(j_5)][(int)(axis_2)] > arr_3[(int)((j_5 + 1))][(int)(axis_2)])) {
                    double[] tmp_6 = arr_3[(int)(j_5)];
                    arr_3[j_5] = arr_3[(int)((j_5 + 1))];
                    arr_3[(j_5 + 1)] = tmp_6;
                }
                j_5 = (j_5 + 1);
            }
            i_4 = (i_4 + 1);
        };
        return arr_3;
    }

    public static long build_kdtree(double[][] points_7, long depth_8) {
        if ((points_7.Length == 0)) {
            return (0 - 1);
        };
        long k_9 = points_7[(int)(0)].Length;
        long axis_10 = _mod(depth_8, k_9);
        double[][] sorted_11 = Program.sort_points(points_7, axis_10);
        long median_idx_12 = (sorted_11.Length / 2);
        double[][] left_points_13 = sorted_11.Skip((int)(0)).Take((int)((median_idx_12 - 0))).ToArray();
        double[][] right_points_14 = sorted_11.Skip((int)((median_idx_12 + 1))).Take((int)((sorted_11.Length - (median_idx_12 + 1)))).ToArray();
        long idx_15 = tree_0.Length;
        tree_0 = (Enumerable.ToArray(Enumerable.Append<KDNode>(tree_0, new KDNode{point = sorted_11[(int)(median_idx_12)], left = (0 - 1), right = (0 - 1)})));
        long left_idx_16 = Program.build_kdtree(left_points_13, (depth_8 + 1));
        long right_idx_17 = Program.build_kdtree(right_points_14, (depth_8 + 1));
        KDNode node_18 = tree_0[(int)(idx_15)];
        node_18.left = left_idx_16;
        node_18.right = right_idx_17;
        tree_0[idx_15] = node_18;
        return idx_15;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(tree_0)));
            Console.WriteLine(Program._fmtTop(root_20));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
