// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Deque {
    public BigInteger[] data;
    public override string ToString() => $"Deque {{data = {data}}}";
}
class PopResult {
    public Deque deque;
    public BigInteger value;
    public override string ToString() => $"PopResult {{deque = {deque}, value = {value}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Deque empty_deque() {
        return new Deque{data = new BigInteger[]{}};
    }

    public static Deque push_back(Deque dq_0, BigInteger value_1) {
        return new Deque{data = ((Func<BigInteger[]>)(() => { var _tmp = dq_0.data.Cast<BigInteger>().ToList(); _tmp.Add(value_1); return _tmp.ToArray(); }))()};
    }

    public static Deque push_front(Deque dq_2, BigInteger value_3) {
        BigInteger[] res_4 = new BigInteger[]{value_3};
        BigInteger i_5 = 0;
        while ((i_5 < dq_2.data.Length)) {
            res_4 = ((Func<BigInteger[]>)(() => { var _tmp = res_4.Cast<BigInteger>().ToList(); _tmp.Add(_idx(dq_2.data, (long)(i_5))); return _tmp.ToArray(); }))();
            i_5 = (i_5 + 1);
        };
        return new Deque{data = res_4};
    }

    public static Deque extend_back(Deque dq_6, BigInteger[] values_7) {
        BigInteger[] res_8 = dq_6.data;
        BigInteger i_9 = 0;
        while ((i_9 < values_7.Length)) {
            res_8 = ((Func<BigInteger[]>)(() => { var _tmp = res_8.Cast<BigInteger>().ToList(); _tmp.Add(_idx(values_7, (long)(i_9))); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        return new Deque{data = res_8};
    }

    public static Deque extend_front(Deque dq_10, BigInteger[] values_11) {
        BigInteger[] res_12 = new BigInteger[]{};
        BigInteger i_13 = (values_11.Length - 1);
        while ((i_13 >= 0)) {
            res_12 = ((Func<BigInteger[]>)(() => { var _tmp = res_12.Cast<BigInteger>().ToList(); _tmp.Add(_idx(values_11, (long)(i_13))); return _tmp.ToArray(); }))();
            i_13 = (i_13 - 1);
        };
        BigInteger j_14 = 0;
        while ((j_14 < dq_10.data.Length)) {
            res_12 = ((Func<BigInteger[]>)(() => { var _tmp = res_12.Cast<BigInteger>().ToList(); _tmp.Add(_idx(dq_10.data, (long)(j_14))); return _tmp.ToArray(); }))();
            j_14 = (j_14 + 1);
        };
        return new Deque{data = res_12};
    }

    public static PopResult pop_back(Deque dq_15) {
        if ((dq_15.data.Length == 0)) {
            throw new Exception("pop from empty deque");
        };
        BigInteger[] res_16 = new BigInteger[]{};
        BigInteger i_17 = 0;
        while ((i_17 < (dq_15.data.Length - 1))) {
            res_16 = ((Func<BigInteger[]>)(() => { var _tmp = res_16.Cast<BigInteger>().ToList(); _tmp.Add(_idx(dq_15.data, (long)(i_17))); return _tmp.ToArray(); }))();
            i_17 = (i_17 + 1);
        };
        return new PopResult{deque = new Deque{data = res_16}, value = _idx(dq_15.data, (long)((dq_15.data.Length - 1)))};
    }

    public static PopResult pop_front(Deque dq_18) {
        if ((dq_18.data.Length == 0)) {
            throw new Exception("popleft from empty deque");
        };
        BigInteger[] res_19 = new BigInteger[]{};
        BigInteger i_20 = 1;
        while ((i_20 < dq_18.data.Length)) {
            res_19 = ((Func<BigInteger[]>)(() => { var _tmp = res_19.Cast<BigInteger>().ToList(); _tmp.Add(_idx(dq_18.data, (long)(i_20))); return _tmp.ToArray(); }))();
            i_20 = (i_20 + 1);
        };
        return new PopResult{deque = new Deque{data = res_19}, value = _idx(dq_18.data, (long)(0))};
    }

    public static bool is_empty(Deque dq_21) {
        return (dq_21.data.Length == 0);
    }

    public static BigInteger length(Deque dq_22) {
        return (BigInteger)dq_22.data.Length;
    }

    public static string to_string(Deque dq_23) {
        if ((dq_23.data.Length == 0)) {
            return "[]";
        };
        string s_24 = ("[" + _fmtStr(_idx(dq_23.data, (long)(0))));
        BigInteger i_25 = 1;
        while ((i_25 < dq_23.data.Length)) {
            s_24 = ((s_24 + ", ") + _fmtStr(_idx(dq_23.data, (long)(i_25))));
            i_25 = (i_25 + 1);
        };
        return (s_24 + "]");
    }

    public static void main() {
        Deque dq_26 = Program.empty_deque();
        dq_26 = Program.push_back(dq_26, 2);
        dq_26 = Program.push_front(dq_26, 1);
        dq_26 = Program.extend_back(dq_26, new BigInteger[]{3, 4});
        dq_26 = Program.extend_front(dq_26, new BigInteger[]{0});
        Console.WriteLine(Program._fmtTop(Program.to_string(dq_26)));
        PopResult r_27 = Program.pop_back(dq_26);
        dq_26 = r_27.deque;
        Console.WriteLine(Program._fmtTop(r_27.value));
        r_27 = Program.pop_front(dq_26);
        dq_26 = r_27.deque;
        Console.WriteLine(Program._fmtTop(r_27.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(dq_26)));
        Console.WriteLine(Program._fmtTop(Program.is_empty(Program.empty_deque())));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
