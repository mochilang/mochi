// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Deque {
    public long[] data;
    public override string ToString() => $"Deque {{data = {data}}}";
}
class PopResult {
    public Deque deque;
    public long value;
    public override string ToString() => $"PopResult {{deque = {deque}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Deque empty_deque() {
        return new Deque{data = new long[]{}};
    }

    public static Deque push_back(Deque dq_0, long value_1) {
        return new Deque{data = (Enumerable.ToArray(Enumerable.Append<long>(dq_0.data, value_1)))};
    }

    public static Deque push_front(Deque dq_2, long value_3) {
        long[] res_4 = new long[]{value_3};
        long i_5 = 0;
        while ((i_5 < dq_2.data.Length)) {
            res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, dq_2.data[(int)(i_5)])));
            i_5 = (i_5 + 1);
        };
        return new Deque{data = res_4};
    }

    public static Deque extend_back(Deque dq_6, long[] values_7) {
        long[] res_8 = dq_6.data;
        long i_9 = 0;
        while ((i_9 < values_7.Length)) {
            res_8 = (Enumerable.ToArray(Enumerable.Append<long>(res_8, values_7[(int)(i_9)])));
            i_9 = (i_9 + 1);
        };
        return new Deque{data = res_8};
    }

    public static Deque extend_front(Deque dq_10, long[] values_11) {
        long[] res_12 = new long[]{};
        long i_13 = (values_11.Length - 1);
        while ((i_13 >= 0)) {
            res_12 = (Enumerable.ToArray(Enumerable.Append<long>(res_12, values_11[(int)(i_13)])));
            i_13 = (i_13 - 1);
        };
        long j_14 = 0;
        while ((j_14 < dq_10.data.Length)) {
            res_12 = (Enumerable.ToArray(Enumerable.Append<long>(res_12, dq_10.data[(int)(j_14)])));
            j_14 = (j_14 + 1);
        };
        return new Deque{data = res_12};
    }

    public static PopResult pop_back(Deque dq_15) {
        if ((dq_15.data.Length == 0)) {
            throw new Exception("pop from empty deque");
        };
        long[] res_16 = new long[]{};
        long i_17 = 0;
        while ((i_17 < (dq_15.data.Length - 1))) {
            res_16 = (Enumerable.ToArray(Enumerable.Append<long>(res_16, dq_15.data[(int)(i_17)])));
            i_17 = (i_17 + 1);
        };
        return new PopResult{deque = new Deque{data = res_16}, value = dq_15.data[(int)((dq_15.data.Length - 1))]};
    }

    public static PopResult pop_front(Deque dq_18) {
        if ((dq_18.data.Length == 0)) {
            throw new Exception("popleft from empty deque");
        };
        long[] res_19 = new long[]{};
        long i_20 = 1;
        while ((i_20 < dq_18.data.Length)) {
            res_19 = (Enumerable.ToArray(Enumerable.Append<long>(res_19, dq_18.data[(int)(i_20)])));
            i_20 = (i_20 + 1);
        };
        return new PopResult{deque = new Deque{data = res_19}, value = dq_18.data[(int)(0)]};
    }

    public static bool is_empty(Deque dq_21) {
        return (dq_21.data.Length == 0);
    }

    public static long length(Deque dq_22) {
        return dq_22.data.Length;
    }

    public static string to_string(Deque dq_23) {
        if ((dq_23.data.Length == 0)) {
            return "[]";
        };
        string s_24 = ("[" + _fmtStr(dq_23.data[(int)(0)]));
        long i_25 = 1;
        while ((i_25 < dq_23.data.Length)) {
            s_24 = ((s_24 + ", ") + _fmtStr(dq_23.data[(int)(i_25)]));
            i_25 = (i_25 + 1);
        };
        return (s_24 + "]");
    }

    public static void main() {
        Deque dq_26 = Program.empty_deque();
        dq_26 = Program.push_back(dq_26, 2);
        dq_26 = Program.push_front(dq_26, 1);
        dq_26 = Program.extend_back(dq_26, new long[]{3, 4});
        dq_26 = Program.extend_front(dq_26, new long[]{0});
        Console.WriteLine(Program._fmtTop(Program.to_string(dq_26)));
        PopResult r_27 = Program.pop_back(dq_26);
        dq_26 = r_27.deque;
        Console.WriteLine(Program._fmtTop(r_27.value));
        r_27 = Program.pop_front(dq_26);
        dq_26 = r_27.deque;
        Console.WriteLine(Program._fmtTop(r_27.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(dq_26)));
        Console.WriteLine(Program._fmtTop(Program.is_empty(Program.empty_deque())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
