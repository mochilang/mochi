// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Queue {
    public long[] stack1;
    public long[] stack2;
    public override string ToString() => $"Queue {{stack1 = {stack1}, stack2 = {stack2}}}";
}
class GetResult {
    public Queue queue;
    public long value;
    public override string ToString() => $"GetResult {{queue = {queue}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Queue q_22 = Program.new_queue(new long[]{10, 20, 30});
    static GetResult r1_23 = Program.get(q_22);
    public static Queue new_queue(long[] items_0) {
        return new Queue{stack1 = items_0, stack2 = new long[]{}};
    }

    public static long len_queue(Queue q_1) {
        return (q_1.stack1.Length + q_1.stack2.Length);
    }

    public static string str_queue(Queue q_2) {
        long[] items_3 = new long[]{};
        long i_4 = (q_2.stack2.Length - 1);
        while ((i_4 >= 0)) {
            items_3 = (Enumerable.ToArray(Enumerable.Append<long>(items_3, q_2.stack2[(int)(i_4)])));
            i_4 = (i_4 - 1);
        };
        long j_5 = 0;
        while ((j_5 < q_2.stack1.Length)) {
            items_3 = (Enumerable.ToArray(Enumerable.Append<long>(items_3, q_2.stack1[(int)(j_5)])));
            j_5 = (j_5 + 1);
        };
        string s_6 = "Queue((";
        long k_7 = 0;
        while ((k_7 < items_3.Length)) {
            s_6 = (s_6 + _fmtStr(items_3[(int)(k_7)]));
            if ((k_7 < (items_3.Length - 1))) {
                s_6 = (s_6 + ", ");
            }
            k_7 = (k_7 + 1);
        };
        s_6 = (s_6 + "))");
        return s_6;
    }

    public static Queue put(Queue q_8, long item_9) {
        long[] s1_10 = q_8.stack1;
        s1_10 = (Enumerable.ToArray(Enumerable.Append<long>(s1_10, item_9)));
        return new Queue{stack1 = s1_10, stack2 = q_8.stack2};
    }

    public static GetResult get(Queue q_11) {
        long[] s1_12 = q_11.stack1;
        long[] s2_13 = q_11.stack2;
        if ((s2_13.Length == 0)) {
            while ((s1_12.Length > 0)) {
                long idx_14 = (s1_12.Length - 1);
                long v_15 = s1_12[(int)(idx_14)];
                long[] new_s1_16 = new long[]{};
                long i_17 = 0;
                while ((i_17 < idx_14)) {
                    new_s1_16 = (Enumerable.ToArray(Enumerable.Append<long>(new_s1_16, s1_12[(int)(i_17)])));
                    i_17 = (i_17 + 1);
                }
                s1_12 = new_s1_16;
                s2_13 = (Enumerable.ToArray(Enumerable.Append<long>(s2_13, v_15)));
            }
        };
        if ((s2_13.Length == 0)) {
            throw new Exception("Queue is empty");
        };
        long idx2_18 = (s2_13.Length - 1);
        long value_19 = s2_13[(int)(idx2_18)];
        long[] new_s2_20 = new long[]{};
        long j_21 = 0;
        while ((j_21 < idx2_18)) {
            new_s2_20 = (Enumerable.ToArray(Enumerable.Append<long>(new_s2_20, s2_13[(int)(j_21)])));
            j_21 = (j_21 + 1);
        };
        s2_13 = new_s2_20;
        return new GetResult{queue = new Queue{stack1 = s1_12, stack2 = s2_13}, value = value_19};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            q_22 = r1_23.queue;
            Console.WriteLine(Program._fmtTop(r1_23.value));
            q_22 = Program.put(q_22, 40);
            GetResult r2_24 = Program.get(q_22);
            q_22 = r2_24.queue;
            Console.WriteLine(Program._fmtTop(r2_24.value));
            GetResult r3_25 = Program.get(q_22);
            q_22 = r3_25.queue;
            Console.WriteLine(Program._fmtTop(r3_25.value));
            Console.WriteLine(Program._fmtTop(Program.len_queue(q_22)));
            GetResult r4_26 = Program.get(q_22);
            q_22 = r4_26.queue;
            Console.WriteLine(Program._fmtTop(r4_26.value));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
