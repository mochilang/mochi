// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Queue {
    public BigInteger[] stack1;
    public BigInteger[] stack2;
    public override string ToString() => $"Queue {{stack1 = {stack1}, stack2 = {stack2}}}";
}
class GetResult {
    public Queue queue;
    public BigInteger value;
    public override string ToString() => $"GetResult {{queue = {queue}, value = {value}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Queue q_22 = Program.new_queue(new BigInteger[]{10, 20, 30});
    static GetResult r1_23 = Program.get(q_22);
    public static Queue new_queue(BigInteger[] items_0) {
        return new Queue{stack1 = items_0, stack2 = new BigInteger[]{}};
    }

    public static BigInteger len_queue(Queue q_1) {
        return (BigInteger)((q_1.stack1.Length + q_1.stack2.Length));
    }

    public static string str_queue(Queue q_2) {
        BigInteger[] items_3 = new BigInteger[]{};
        BigInteger i_4 = (q_2.stack2.Length - 1);
        while ((i_4 >= 0)) {
            items_3 = ((Func<BigInteger[]>)(() => { var _tmp = items_3.Cast<BigInteger>().ToList(); _tmp.Add(_idx(q_2.stack2, (long)(i_4))); return _tmp.ToArray(); }))();
            i_4 = (i_4 - 1);
        };
        BigInteger j_5 = 0;
        while ((j_5 < q_2.stack1.Length)) {
            items_3 = ((Func<BigInteger[]>)(() => { var _tmp = items_3.Cast<BigInteger>().ToList(); _tmp.Add(_idx(q_2.stack1, (long)(j_5))); return _tmp.ToArray(); }))();
            j_5 = (j_5 + 1);
        };
        string s_6 = "Queue((";
        BigInteger k_7 = 0;
        while ((k_7 < items_3.Length)) {
            s_6 = (s_6 + _fmtStr(_idx(items_3, (long)(k_7))));
            if ((k_7 < (items_3.Length - 1))) {
                s_6 = (s_6 + ", ");
            }
            k_7 = (k_7 + 1);
        };
        s_6 = (s_6 + "))");
        return s_6;
    }

    public static Queue put(Queue q_8, BigInteger item_9) {
        BigInteger[] s1_10 = q_8.stack1;
        s1_10 = ((Func<BigInteger[]>)(() => { var _tmp = s1_10.Cast<BigInteger>().ToList(); _tmp.Add(item_9); return _tmp.ToArray(); }))();
        return new Queue{stack1 = s1_10, stack2 = q_8.stack2};
    }

    public static GetResult get(Queue q_11) {
        BigInteger[] s1_12 = q_11.stack1;
        BigInteger[] s2_13 = q_11.stack2;
        if ((s2_13.Length == 0)) {
            while ((s1_12.Length > 0)) {
                BigInteger idx_14 = (s1_12.Length - 1);
                BigInteger v_15 = _idx(s1_12, (long)(idx_14));
                BigInteger[] new_s1_16 = new BigInteger[]{};
                BigInteger i_17 = 0;
                while ((i_17 < idx_14)) {
                    new_s1_16 = ((Func<BigInteger[]>)(() => { var _tmp = new_s1_16.Cast<BigInteger>().ToList(); _tmp.Add(_idx(s1_12, (long)(i_17))); return _tmp.ToArray(); }))();
                    i_17 = (i_17 + 1);
                }
                s1_12 = new_s1_16;
                s2_13 = ((Func<BigInteger[]>)(() => { var _tmp = s2_13.Cast<BigInteger>().ToList(); _tmp.Add(v_15); return _tmp.ToArray(); }))();
            }
        };
        if ((s2_13.Length == 0)) {
            throw new Exception("Queue is empty");
        };
        BigInteger idx2_18 = (s2_13.Length - 1);
        BigInteger value_19 = _idx(s2_13, (long)(idx2_18));
        BigInteger[] new_s2_20 = new BigInteger[]{};
        BigInteger j_21 = 0;
        while ((j_21 < idx2_18)) {
            new_s2_20 = ((Func<BigInteger[]>)(() => { var _tmp = new_s2_20.Cast<BigInteger>().ToList(); _tmp.Add(_idx(s2_13, (long)(j_21))); return _tmp.ToArray(); }))();
            j_21 = (j_21 + 1);
        };
        s2_13 = new_s2_20;
        return new GetResult{queue = new Queue{stack1 = s1_12, stack2 = s2_13}, value = value_19};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            q_22 = r1_23.queue;
            Console.WriteLine(Program._fmtTop(r1_23.value));
            q_22 = Program.put(q_22, 40);
            GetResult r2_24 = Program.get(q_22);
            q_22 = r2_24.queue;
            Console.WriteLine(Program._fmtTop(r2_24.value));
            GetResult r3_25 = Program.get(q_22);
            q_22 = r3_25.queue;
            Console.WriteLine(Program._fmtTop(r3_25.value));
            Console.WriteLine(Program._fmtTop(Program.len_queue(q_22)));
            GetResult r4_26 = Program.get(q_22);
            q_22 = r4_26.queue;
            Console.WriteLine(Program._fmtTop(r4_26.value));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
