// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class FixedPriorityQueue {
    public BigInteger[][] queues;
    public override string ToString() => $"FixedPriorityQueue {{queues = {queues}}}";
}
class FPQDequeueResult {
    public FixedPriorityQueue queue;
    public BigInteger value;
    public override string ToString() => $"FPQDequeueResult {{queue = {queue}, value = {value}}}";
}
class ElementPriorityQueue {
    public BigInteger[] queue;
    public override string ToString() => $"ElementPriorityQueue {{queue = {queue}}}";
}
class EPQDequeueResult {
    public ElementPriorityQueue queue;
    public BigInteger value;
    public override string ToString() => $"EPQDequeueResult {{queue = {queue}, value = {value}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static void panic(string msg_0) {
        Console.WriteLine(Program._fmtTop(msg_0));
    }

    public static FixedPriorityQueue fpq_new() {
        return new FixedPriorityQueue{queues = new object[]{new object{}, new object{}, new object{}}};
    }

    public static FixedPriorityQueue fpq_enqueue(FixedPriorityQueue fpq_1, BigInteger priority_2, BigInteger data_3) {
        if (((priority_2 < 0) || (priority_2 >= fpq_1.queues.Length))) {
            Program.panic("Valid priorities are 0, 1, and 2");
            return fpq_1;
        };
        if ((_idx(fpq_1.queues, (long)(priority_2)).Length >= 100)) {
            Program.panic("Maximum queue size is 100");
            return fpq_1;
        };
        BigInteger[][] qs_4 = fpq_1.queues;
        qs_4[(int)(priority_2)] = ((Func<BigInteger[]>)(() => { var _tmp = _idx(qs_4, (long)(priority_2)).Cast<BigInteger>().ToList(); _tmp.Add(data_3); return _tmp.ToArray(); }))();
        fpq_1.queues = qs_4;
        return fpq_1;
    }

    public static FPQDequeueResult fpq_dequeue(FixedPriorityQueue fpq_5) {
        BigInteger[][] qs_6 = fpq_5.queues;
        BigInteger i_7 = 0;
        while ((i_7 < qs_6.Length)) {
            BigInteger[] q_8 = _idx(qs_6, (long)(i_7));
            if ((q_8.Length > 0)) {
                BigInteger val_9 = _idx(q_8, (long)(0));
                BigInteger[] new_q_10 = new BigInteger[]{};
                BigInteger j_11 = 1;
                while ((j_11 < q_8.Length)) {
                    new_q_10 = ((Func<BigInteger[]>)(() => { var _tmp = new_q_10.Cast<BigInteger>().ToList(); _tmp.Add(_idx(q_8, (long)(j_11))); return _tmp.ToArray(); }))();
                    j_11 = (j_11 + 1);
                }
                qs_6[(int)(i_7)] = new_q_10;
                fpq_5.queues = qs_6;
                return new FPQDequeueResult{queue = fpq_5, value = val_9};
            }
            i_7 = (i_7 + 1);
        };
        Program.panic("All queues are empty");
        return new FPQDequeueResult{queue = fpq_5, value = 0};
    }

    public static string fpq_to_string(FixedPriorityQueue fpq_12) {
        string[] lines_13 = new string[]{};
        BigInteger i_14 = 0;
        while ((i_14 < fpq_12.queues.Length)) {
            string q_str_15 = "[";
            BigInteger[] q_16 = _idx(fpq_12.queues, (long)(i_14));
            BigInteger j_17 = 0;
            while ((j_17 < q_16.Length)) {
                if ((j_17 > 0)) {
                    q_str_15 = (q_str_15 + ", ");
                }
                q_str_15 = (q_str_15 + _fmtStr(_idx(q_16, (long)(j_17))));
                j_17 = (j_17 + 1);
            }
            q_str_15 = (q_str_15 + "]");
            lines_13 = ((Func<string[]>)(() => { var _tmp = lines_13.Cast<string>().ToList(); _tmp.Add(((("Priority " + _fmtStr(i_14)) + ": ") + q_str_15)); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        string res_18 = "";
        i_14 = 0;
        while ((i_14 < lines_13.Length)) {
            if ((i_14 > 0)) {
                res_18 = (res_18 + "\n");
            }
            res_18 = (res_18 + _idx(lines_13, (long)(i_14)));
            i_14 = (i_14 + 1);
        };
        return res_18;
    }

    public static ElementPriorityQueue epq_new() {
        return new ElementPriorityQueue{queue = new BigInteger[]{}};
    }

    public static ElementPriorityQueue epq_enqueue(ElementPriorityQueue epq_19, BigInteger data_20) {
        if ((epq_19.queue.Length >= 100)) {
            Program.panic("Maximum queue size is 100");
            return epq_19;
        };
        epq_19.queue = ((Func<BigInteger[]>)(() => { var _tmp = epq_19.queue.Cast<BigInteger>().ToList(); _tmp.Add(data_20); return _tmp.ToArray(); }))();
        return epq_19;
    }

    public static EPQDequeueResult epq_dequeue(ElementPriorityQueue epq_21) {
        if ((epq_21.queue.Length == 0)) {
            Program.panic("The queue is empty");
            return new EPQDequeueResult{queue = epq_21, value = 0};
        };
        BigInteger min_val_22 = _idx(epq_21.queue, (long)(0));
        BigInteger idx_23 = 0;
        BigInteger i_24 = 1;
        while ((i_24 < epq_21.queue.Length)) {
            BigInteger v_25 = _idx(epq_21.queue, (long)(i_24));
            if ((v_25 < min_val_22)) {
                min_val_22 = v_25;
                idx_23 = i_24;
            }
            i_24 = (i_24 + 1);
        };
        BigInteger[] new_q_26 = new BigInteger[]{};
        i_24 = 0;
        while ((i_24 < epq_21.queue.Length)) {
            if ((i_24 != idx_23)) {
                new_q_26 = ((Func<BigInteger[]>)(() => { var _tmp = new_q_26.Cast<BigInteger>().ToList(); _tmp.Add(_idx(epq_21.queue, (long)(i_24))); return _tmp.ToArray(); }))();
            }
            i_24 = (i_24 + 1);
        };
        epq_21.queue = new_q_26;
        return new EPQDequeueResult{queue = epq_21, value = min_val_22};
    }

    public static string epq_to_string(ElementPriorityQueue epq_27) {
        return _fmtStr(epq_27.queue);
    }

    public static void fixed_priority_queue() {
        FixedPriorityQueue fpq_28 = Program.fpq_new();
        fpq_28 = Program.fpq_enqueue(fpq_28, 0, 10);
        fpq_28 = Program.fpq_enqueue(fpq_28, 1, 70);
        fpq_28 = Program.fpq_enqueue(fpq_28, 0, 100);
        fpq_28 = Program.fpq_enqueue(fpq_28, 2, 1);
        fpq_28 = Program.fpq_enqueue(fpq_28, 2, 5);
        fpq_28 = Program.fpq_enqueue(fpq_28, 1, 7);
        fpq_28 = Program.fpq_enqueue(fpq_28, 2, 4);
        fpq_28 = Program.fpq_enqueue(fpq_28, 1, 64);
        fpq_28 = Program.fpq_enqueue(fpq_28, 0, 128);
        Console.WriteLine(Program._fmtTop(Program.fpq_to_string(fpq_28)));
        FPQDequeueResult res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        Console.WriteLine(Program._fmtTop(Program.fpq_to_string(fpq_28)));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
        res_29 = Program.fpq_dequeue(fpq_28);
        fpq_28 = res_29.queue;
        Console.WriteLine(Program._fmtTop(res_29.value));
    }

    public static void element_priority_queue() {
        ElementPriorityQueue epq_30 = Program.epq_new();
        epq_30 = Program.epq_enqueue(epq_30, 10);
        epq_30 = Program.epq_enqueue(epq_30, 70);
        epq_30 = Program.epq_enqueue(epq_30, 100);
        epq_30 = Program.epq_enqueue(epq_30, 1);
        epq_30 = Program.epq_enqueue(epq_30, 5);
        epq_30 = Program.epq_enqueue(epq_30, 7);
        epq_30 = Program.epq_enqueue(epq_30, 4);
        epq_30 = Program.epq_enqueue(epq_30, 64);
        epq_30 = Program.epq_enqueue(epq_30, 128);
        Console.WriteLine(Program._fmtTop(Program.epq_to_string(epq_30)));
        EPQDequeueResult res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        Console.WriteLine(Program._fmtTop(Program.epq_to_string(epq_30)));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
        res_31 = Program.epq_dequeue(epq_30);
        epq_30 = res_31.queue;
        Console.WriteLine(Program._fmtTop(res_31.value));
    }

    public static void main() {
        Program.fixed_priority_queue();
        Program.element_priority_queue();
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
