// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class CircularQueue {
    public BigInteger[] data;
    public BigInteger front;
    public BigInteger rear;
    public BigInteger size;
    public BigInteger capacity;
    public override string ToString() => $"CircularQueue {{data = {data}, front = {front}, rear = {rear}, size = {size}, capacity = {capacity}}}";
}
class DequeueResult {
    public CircularQueue queue;
    public BigInteger value;
    public override string ToString() => $"DequeueResult {{queue = {queue}, value = {value}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static CircularQueue create_queue(BigInteger capacity_0) {
        BigInteger[] arr_1 = new BigInteger[]{};
        BigInteger i_2 = 0;
        while ((i_2 < capacity_0)) {
            arr_1 = ((Func<BigInteger[]>)(() => { var _tmp = arr_1.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        return new CircularQueue{data = arr_1, front = 0, rear = 0, size = 0, capacity = capacity_0};
    }

    public static BigInteger length(CircularQueue q_3) {
        return q_3.size;
    }

    public static bool is_empty(CircularQueue q_4) {
        return (q_4.size == 0);
    }

    public static BigInteger front(CircularQueue q_5) {
        if (Program.is_empty(q_5)) {
            return 0;
        };
        return _idx(q_5.data, (long)(q_5.front));
    }

    public static CircularQueue enqueue(CircularQueue q_6, BigInteger value_7) {
        if ((q_6.size >= q_6.capacity)) {
            throw new Exception("QUEUE IS FULL");
        };
        BigInteger[] arr_8 = q_6.data;
        arr_8[(int)(q_6.rear)] = value_7;
        q_6.data = arr_8;
        q_6.rear = _mod((q_6.rear + 1), q_6.capacity);
        q_6.size = (q_6.size + 1);
        return q_6;
    }

    public static DequeueResult dequeue(CircularQueue q_9) {
        if ((q_9.size == 0)) {
            throw new Exception("UNDERFLOW");
        };
        BigInteger value_10 = _idx(q_9.data, (long)(q_9.front));
        BigInteger[] arr2_11 = q_9.data;
        arr2_11[(int)(q_9.front)] = 0;
        q_9.data = arr2_11;
        q_9.front = _mod((q_9.front + 1), q_9.capacity);
        q_9.size = (q_9.size - 1);
        return new DequeueResult{queue = q_9, value = value_10};
    }

    public static void main() {
        CircularQueue q_12 = Program.create_queue(5);
        Console.WriteLine(Program._fmtTop(Program.is_empty(q_12)));
        q_12 = Program.enqueue(q_12, 10);
        Console.WriteLine(Program._fmtTop(Program.is_empty(q_12)));
        q_12 = Program.enqueue(q_12, 20);
        q_12 = Program.enqueue(q_12, 30);
        Console.WriteLine(Program._fmtTop(Program.front(q_12)));
        DequeueResult r_13 = Program.dequeue(q_12);
        q_12 = r_13.queue;
        Console.WriteLine(Program._fmtTop(r_13.value));
        Console.WriteLine(Program._fmtTop(Program.front(q_12)));
        Console.WriteLine(Program._fmtTop(Program.length(q_12)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
