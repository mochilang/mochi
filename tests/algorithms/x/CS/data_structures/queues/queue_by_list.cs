// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Queue {
    public long[] entries;
    public override string ToString() => $"Queue {{entries = {entries}}}";
}
class GetResult {
    public Queue queue;
    public long value;
    public override string ToString() => $"GetResult {{queue = {queue}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Queue q_20 = Program.new_queue(new long[]{});
    public static Queue new_queue(long[] items_0) {
        return new Queue{entries = items_0};
    }

    public static long len_queue(Queue q_1) {
        return q_1.entries.Length;
    }

    public static string str_queue(Queue q_2) {
        string s_3 = "Queue((";
        long i_4 = 0;
        while ((i_4 < q_2.entries.Length)) {
            s_3 = (s_3 + _fmtStr(q_2.entries[(int)(i_4)]));
            if ((i_4 < (q_2.entries.Length - 1))) {
                s_3 = (s_3 + ", ");
            }
            i_4 = (i_4 + 1);
        };
        s_3 = (s_3 + "))");
        return s_3;
    }

    public static Queue put(Queue q_5, long item_6) {
        long[] e_7 = q_5.entries;
        e_7 = (Enumerable.ToArray(Enumerable.Append<long>(e_7, item_6)));
        return new Queue{entries = e_7};
    }

    public static GetResult get(Queue q_8) {
        if ((q_8.entries.Length == 0)) {
            throw new Exception("Queue is empty");
        };
        long value_9 = q_8.entries[(int)(0)];
        long[] new_entries_10 = new long[]{};
        long i_11 = 1;
        while ((i_11 < q_8.entries.Length)) {
            new_entries_10 = (Enumerable.ToArray(Enumerable.Append<long>(new_entries_10, q_8.entries[(int)(i_11)])));
            i_11 = (i_11 + 1);
        };
        return new GetResult{queue = new Queue{entries = new_entries_10}, value = value_9};
    }

    public static Queue rotate(Queue q_12, long rotation_13) {
        long[] e_14 = q_12.entries;
        long r_15 = 0;
        while ((r_15 < rotation_13)) {
            if ((e_14.Length > 0)) {
                long first_16 = e_14[(int)(0)];
                long[] rest_17 = new long[]{};
                long i_18 = 1;
                while ((i_18 < e_14.Length)) {
                    rest_17 = (Enumerable.ToArray(Enumerable.Append<long>(rest_17, e_14[(int)(i_18)])));
                    i_18 = (i_18 + 1);
                }
                rest_17 = (Enumerable.ToArray(Enumerable.Append<long>(rest_17, first_16)));
                e_14 = rest_17;
            }
            r_15 = (r_15 + 1);
        };
        return new Queue{entries = e_14};
    }

    public static long get_front(Queue q_19) {
        return q_19.entries[(int)(0)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.len_queue(q_20)));
            q_20 = Program.put(q_20, 10);
            q_20 = Program.put(q_20, 20);
            q_20 = Program.put(q_20, 30);
            q_20 = Program.put(q_20, 40);
            Console.WriteLine(Program._fmtTop(Program.str_queue(q_20)));
            GetResult res_21 = Program.get(q_20);
            q_20 = res_21.queue;
            Console.WriteLine(Program._fmtTop(res_21.value));
            Console.WriteLine(Program._fmtTop(Program.str_queue(q_20)));
            q_20 = Program.rotate(q_20, 2);
            Console.WriteLine(Program._fmtTop(Program.str_queue(q_20)));
            long front_22 = Program.get_front(q_20);
            Console.WriteLine(Program._fmtTop(front_22));
            Console.WriteLine(Program._fmtTop(Program.str_queue(q_20)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
