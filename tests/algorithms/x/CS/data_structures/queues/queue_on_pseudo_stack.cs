// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Queue {
    public long[] stack;
    public long length;
    public override string ToString() => $"Queue {{stack = {stack}, length = {length}}}";
}
class GetResult {
    public Queue queue;
    public long value;
    public override string ToString() => $"GetResult {{queue = {queue}, value = {value}}}";
}
class FrontResult {
    public Queue queue;
    public long value;
    public override string ToString() => $"FrontResult {{queue = {queue}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Queue empty_queue() {
        return new Queue{stack = new long[]{}, length = 0};
    }

    public static Queue put(Queue q_0, long item_1) {
        long[] s_2 = (Enumerable.ToArray(Enumerable.Append<long>(q_0.stack, item_1)));
        return new Queue{stack = s_2, length = (q_0.length + 1)};
    }

    public static long[] drop_first(long[] xs_3) {
        long[] res_4 = new long[]{};
        long i_5 = 1;
        while ((i_5 < xs_3.Length)) {
            res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, xs_3[(int)(i_5)])));
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static long[] drop_last(long[] xs_6) {
        long[] res_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 < (xs_6.Length - 1))) {
            res_7 = (Enumerable.ToArray(Enumerable.Append<long>(res_7, xs_6[(int)(i_8)])));
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static Queue rotate(Queue q_9, long rotation_10) {
        long[] s_11 = q_9.stack;
        long i_12 = 0;
        while (((i_12 < rotation_10) && (s_11.Length > 0))) {
            long temp_13 = s_11[(int)(0)];
            s_11 = Program.drop_first(s_11);
            s_11 = (Enumerable.ToArray(Enumerable.Append<long>(s_11, temp_13)));
            i_12 = (i_12 + 1);
        };
        return new Queue{stack = s_11, length = q_9.length};
    }

    public static GetResult get(Queue q_14) {
        if ((q_14.length == 0)) {
            throw new Exception("queue empty");
        };
        Queue q1_15 = Program.rotate(q_14, 1);
        long v_16 = q1_15.stack[(int)((q1_15.length - 1))];
        long[] s_17 = Program.drop_last(q1_15.stack);
        Queue q2_18 = new Queue{stack = s_17, length = q1_15.length};
        q2_18 = Program.rotate(q2_18, (q2_18.length - 1));
        q2_18 = new Queue{stack = q2_18.stack, length = (q2_18.length - 1)};
        return new GetResult{queue = q2_18, value = v_16};
    }

    public static FrontResult front(Queue q_19) {
        GetResult r_20 = Program.get(q_19);
        Queue q2_21 = Program.put(r_20.queue, r_20.value);
        q2_21 = Program.rotate(q2_21, (q2_21.length - 1));
        return new FrontResult{queue = q2_21, value = r_20.value};
    }

    public static long size(Queue q_22) {
        return q_22.length;
    }

    public static string to_string(Queue q_23) {
        string s_24 = "<";
        if ((q_23.length > 0)) {
            s_24 = (s_24 + _fmtStr(q_23.stack[(int)(0)]));
            long i_25 = 1;
            while ((i_25 < q_23.length)) {
                s_24 = ((s_24 + ", ") + _fmtStr(q_23.stack[(int)(i_25)]));
                i_25 = (i_25 + 1);
            }
        };
        s_24 = (s_24 + ">");
        return s_24;
    }

    public static void main() {
        Queue q_26 = Program.empty_queue();
        q_26 = Program.put(q_26, 1);
        q_26 = Program.put(q_26, 2);
        q_26 = Program.put(q_26, 3);
        Console.WriteLine(Program._fmtTop(Program.to_string(q_26)));
        GetResult g_27 = Program.get(q_26);
        q_26 = g_27.queue;
        Console.WriteLine(Program._fmtTop(g_27.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(q_26)));
        FrontResult f_28 = Program.front(q_26);
        q_26 = f_28.queue;
        Console.WriteLine(Program._fmtTop(f_28.value));
        Console.WriteLine(Program._fmtTop(Program.to_string(q_26)));
        Console.WriteLine(Program._fmtTop(Program.size(q_26)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
