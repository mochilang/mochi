// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string repeat_char(string ch_0, long times_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < times_1)) {
            res_2 = (res_2 + ch_0);
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string to_binary(long n_4) {
        if ((n_4 == 0)) {
            return "0";
        };
        string res_5 = "";
        long v_6 = n_4;
        while ((v_6 > 0)) {
            res_5 = (_fmtStr((v_6 % 2)) + res_5);
            v_6 = (v_6 / 2);
        };
        return res_5;
    }

    public static long pow2(long exp_7) {
        long res_8 = 1;
        long i_9 = 0;
        while ((i_9 < exp_7)) {
            res_8 = (res_8 * 2);
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static string twos_complement(long number_10) {
        if ((number_10 > 0)) {
            throw new Exception("input must be a negative integer");
        };
        if ((number_10 == 0)) {
            return "0b0";
        };
        long abs_number_11 = ((number_10 < 0) ? -number_10 : number_10);
        int binary_number_length_12 = Program.to_binary(abs_number_11).Length;
        long complement_value_13 = (Program.pow2(binary_number_length_12) - abs_number_11);
        string complement_binary_14 = Program.to_binary(complement_value_13);
        string padding_15 = Program.repeat_char("0", (binary_number_length_12 - complement_binary_14.Length));
        string twos_complement_number_16 = (("1" + padding_15) + complement_binary_14);
        return ("0b" + twos_complement_number_16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.twos_complement(0)));
            Console.WriteLine(Program._fmtTop(Program.twos_complement(-1)));
            Console.WriteLine(Program._fmtTop(Program.twos_complement(-5)));
            Console.WriteLine(Program._fmtTop(Program.twos_complement(-17)));
            Console.WriteLine(Program._fmtTop(Program.twos_complement(-207)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
