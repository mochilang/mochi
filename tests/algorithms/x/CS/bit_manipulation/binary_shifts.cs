// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string repeat_char(string ch_0, long count_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < count_1)) {
            res_2 = (res_2 + ch_0);
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long abs_int(long n_4) {
        if ((n_4 < 0)) {
            return -n_4;
        };
        return n_4;
    }

    public static long pow2(long exp_5) {
        long res_6 = 1;
        long i_7 = 0;
        while ((i_7 < exp_5)) {
            res_6 = (res_6 * 2);
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static string to_binary_no_prefix(long n_8) {
        long v_9 = n_8;
        if ((v_9 < 0)) {
            v_9 = -v_9;
        };
        if ((v_9 == 0)) {
            return "0";
        };
        string res_10 = "";
        while ((v_9 > 0)) {
            res_10 = (_fmtStr((v_9 % 2)) + res_10);
            v_9 = (v_9 / 2);
        };
        return res_10;
    }

    public static string logical_left_shift(long number_11, long shift_amount_12) {
        if (((number_11 < 0) || (shift_amount_12 < 0))) {
            throw new Exception("both inputs must be positive integers");
        };
        string binary_number_13 = ("0b" + Program.to_binary_no_prefix(number_11));
        return (binary_number_13 + Program.repeat_char("0", shift_amount_12));
    }

    public static string logical_right_shift(long number_14, long shift_amount_15) {
        if (((number_14 < 0) || (shift_amount_15 < 0))) {
            throw new Exception("both inputs must be positive integers");
        };
        string binary_number_16 = Program.to_binary_no_prefix(number_14);
        if ((shift_amount_15 >= binary_number_16.Length)) {
            return "0b0";
        };
        string shifted_17 = _substr(binary_number_16, 0, (binary_number_16.Length - shift_amount_15));
        return ("0b" + shifted_17);
    }

    public static string arithmetic_right_shift(long number_18, long shift_amount_19) {
        string binary_number_20 = "";
        if ((number_18 >= 0)) {
            binary_number_20 = ("0" + Program.to_binary_no_prefix(number_18));
        } else {
            int length_21 = Program.to_binary_no_prefix(-number_18).Length;
            long intermediate_22 = (Program.abs_int(number_18) - Program.pow2(length_21));
            string bin_repr_23 = Program.to_binary_no_prefix(intermediate_22);
            binary_number_20 = (("1" + Program.repeat_char("0", (length_21 - bin_repr_23.Length))) + bin_repr_23);
        };
        if ((shift_amount_19 >= binary_number_20.Length)) {
            string sign_24 = _substr(binary_number_20, 0, 1);
            return ("0b" + Program.repeat_char(sign_24, binary_number_20.Length));
        };
        string sign_25 = _substr(binary_number_20, 0, 1);
        string shifted_26 = _substr(binary_number_20, 0, (binary_number_20.Length - shift_amount_19));
        return (("0b" + Program.repeat_char(sign_25, shift_amount_19)) + shifted_26);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.logical_left_shift(17, 2)));
        Console.WriteLine(Program._fmtTop(Program.logical_right_shift(1983, 4)));
        Console.WriteLine(Program._fmtTop(Program.arithmetic_right_shift(-17, 2)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
