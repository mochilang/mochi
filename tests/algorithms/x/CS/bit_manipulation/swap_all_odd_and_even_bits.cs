// Generated by Mochi 0.10.59 on 2025-08-06 21:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string pad_left_num(long n_0) {
        string s_1 = _fmtStr(n_0);
        while ((s_1.Length < 5)) {
            s_1 = (" " + s_1);
        };
        return s_1;
    }

    public static string to_binary(long n_2) {
        string sign_3 = "";
        long num_4 = n_2;
        if ((num_4 < 0)) {
            sign_3 = "-";
            num_4 = (0 - num_4);
        };
        string bits_5 = "";
        while ((num_4 > 0)) {
            bits_5 = (_fmtStr((num_4 % 2)) + bits_5);
            num_4 = ((num_4 - (num_4 % 2)) / 2);
        };
        if ((bits_5 == "")) {
            bits_5 = "0";
        };
        long min_width_6 = 8;
        while ((bits_5.Length < (min_width_6 - sign_3.Length))) {
            bits_5 = ("0" + bits_5);
        };
        return (sign_3 + bits_5);
    }

    public static string show_bits(long before_7, long after_8) {
        return ((((((Program.pad_left_num(before_7) + ": ") + Program.to_binary(before_7)) + "\n") + Program.pad_left_num(after_8)) + ": ") + Program.to_binary(after_8));
    }

    public static long lshift(long num_9, long k_10) {
        long result_11 = num_9;
        long i_12 = 0;
        while ((i_12 < k_10)) {
            result_11 = (result_11 * 2);
            i_12 = (i_12 + 1);
        };
        return result_11;
    }

    public static long rshift(long num_13, long k_14) {
        long result_15 = num_13;
        long i_16 = 0;
        while ((i_16 < k_14)) {
            result_15 = ((result_15 - (result_15 % 2)) / 2);
            i_16 = (i_16 + 1);
        };
        return result_15;
    }

    public static long swap_odd_even_bits(long num_17) {
        long n_18 = num_17;
        if ((n_18 < 0)) {
            n_18 = (n_18 + 4294967296L);
        };
        long result_19 = 0;
        long i_20 = 0;
        while ((i_20 < 32)) {
            long bit1_21 = (Program.rshift(n_18, i_20) % 2);
            long bit2_22 = (Program.rshift(n_18, (i_20 + 1)) % 2);
            result_19 = ((result_19 + Program.lshift(bit1_21, (i_20 + 1))) + Program.lshift(bit2_22, i_20));
            i_20 = (i_20 + 2);
        };
        return result_19;
    }

    public static void main() {
        long[] nums_23 = new long[]{-1, 0, 1, 2, 3, 4, 23, 24};
        long i_24 = 0;
        while ((i_24 < nums_23.Length)) {
            long n_25 = nums_23[(int)(i_24)];
            Console.WriteLine(Program._fmtTop(Program.show_bits(n_25, Program.swap_odd_even_bits(n_25))));
            Console.WriteLine(Program._fmtTop(""));
            i_24 = (i_24 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
