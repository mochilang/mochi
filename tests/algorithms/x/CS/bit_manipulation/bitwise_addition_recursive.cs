// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long bitwise_xor(long a_0, long b_1) {
        long result_2 = 0;
        long bit_3 = 1;
        long x_4 = a_0;
        long y_5 = b_1;
        while (((x_4 > 0) || (y_5 > 0))) {
            long ax_6 = (x_4 % 2);
            long by_7 = (y_5 % 2);
            if ((((ax_6 + by_7) % 2) == 1)) {
                result_2 = (result_2 + bit_3);
            }
            x_4 = (x_4 / 2);
            y_5 = (y_5 / 2);
            bit_3 = (bit_3 * 2);
        };
        return result_2;
    }

    public static long bitwise_and(long a_8, long b_9) {
        long result_10 = 0;
        long bit_11 = 1;
        long x_12 = a_8;
        long y_13 = b_9;
        while (((x_12 > 0) && (y_13 > 0))) {
            if ((((x_12 % 2) == 1) && ((y_13 % 2) == 1))) {
                result_10 = (result_10 + bit_11);
            }
            x_12 = (x_12 / 2);
            y_13 = (y_13 / 2);
            bit_11 = (bit_11 * 2);
        };
        return result_10;
    }

    public static long bitwise_addition_recursive(long number_14, long other_number_15) {
        if (((number_14 < 0) || (other_number_15 < 0))) {
            throw new Exception("Both arguments MUST be non-negative!");
        };
        long bitwise_sum_16 = Program.bitwise_xor(number_14, other_number_15);
        long carry_17 = Program.bitwise_and(number_14, other_number_15);
        if ((carry_17 == 0)) {
            return bitwise_sum_16;
        };
        return Program.bitwise_addition_recursive(bitwise_sum_16, (carry_17 * 2));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitwise_addition_recursive(4, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitwise_addition_recursive(8, 9))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitwise_addition_recursive(0, 4))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
