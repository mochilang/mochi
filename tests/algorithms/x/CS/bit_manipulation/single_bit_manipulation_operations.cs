// Generated by Mochi 0.10.59 on 2025-08-06 21:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long pow2(long exp_0) {
        long result_1 = 1;
        long i_2 = 0;
        while ((i_2 < exp_0)) {
            result_1 = (result_1 * 2);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static bool is_bit_set(long number_3, long position_4) {
        long shifted_5 = (number_3 / Program.pow2(position_4));
        long remainder_6 = (shifted_5 % 2);
        return (remainder_6 == 1);
    }

    public static long set_bit(long number_7, long position_8) {
        if (Program.is_bit_set(number_7, position_8)) {
            return number_7;
        };
        return (number_7 + Program.pow2(position_8));
    }

    public static long clear_bit(long number_9, long position_10) {
        if (Program.is_bit_set(number_9, position_10)) {
            return (number_9 - Program.pow2(position_10));
        };
        return number_9;
    }

    public static long flip_bit(long number_11, long position_12) {
        if (Program.is_bit_set(number_11, position_12)) {
            return (number_11 - Program.pow2(position_12));
        };
        return (number_11 + Program.pow2(position_12));
    }

    public static long get_bit(long number_13, long position_14) {
        if (Program.is_bit_set(number_13, position_14)) {
            return 1;
        };
        return 0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.set_bit(13, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.clear_bit(18, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.flip_bit(5, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_bit_set(10, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_bit(10, 1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
