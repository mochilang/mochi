// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string int_to_binary(long n_0) {
        if ((n_0 == 0)) {
            return "0";
        };
        string res_1 = "";
        long num_2 = n_0;
        while ((num_2 > 0)) {
            res_1 = (_fmtStr((num_2 % 2)) + res_1);
            num_2 = (num_2 / 2);
        };
        return res_1;
    }

    public static string pad_left(string s_3, long width_4) {
        string res_5 = s_3;
        while ((res_5.Length < width_4)) {
            res_5 = ("0" + res_5);
        };
        return res_5;
    }

    public static string binary_xor(long a_6, long b_7) {
        if (((a_6 < 0) || (b_7 < 0))) {
            throw new Exception("the value of both inputs must be positive");
        };
        string a_bin_8 = Program.int_to_binary(a_6);
        string b_bin_9 = Program.int_to_binary(b_7);
        int max_len_10 = ((a_bin_8.Length > b_bin_9.Length) ? a_bin_8.Length : b_bin_9.Length);
        string a_pad_11 = Program.pad_left(a_bin_8, max_len_10);
        string b_pad_12 = Program.pad_left(b_bin_9, max_len_10);
        long i_13 = 0;
        string result_14 = "";
        while ((i_13 < max_len_10)) {
            if ((a_pad_11.Substring((int)(i_13), 1) != b_pad_12.Substring((int)(i_13), 1))) {
                result_14 = (result_14 + "1");
            } else {
                result_14 = (result_14 + "0");
            }
            i_13 = (i_13 + 1);
        };
        return ("0b" + result_14);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.binary_xor(25, 32)));
            Console.WriteLine(Program._fmtTop(Program.binary_xor(37, 50)));
            Console.WriteLine(Program._fmtTop(Program.binary_xor(21, 30)));
            Console.WriteLine(Program._fmtTop(Program.binary_xor(58, 73)));
            Console.WriteLine(Program._fmtTop(Program.binary_xor(0, 255)));
            Console.WriteLine(Program._fmtTop(Program.binary_xor(256, 256)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
