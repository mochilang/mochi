// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static bool is_sorted(long[] xs_0) {
        long i_1 = 1;
        while ((i_1 < xs_0.Length)) {
            if ((xs_0[(int)((i_1 - 1))] > xs_0[(int)(i_1)])) {
                return false;
            }
            i_1 = (i_1 + 1);
        };
        return true;
    }

    public static long exponential_search(long[] arr_2, long item_3) {
        if ((!Program.is_sorted(arr_2))) {
            throw new Exception("sorted_collection must be sorted in ascending order");
        };
        if ((arr_2.Length == 0)) {
            return -1;
        };
        if ((arr_2[(int)(0)] == item_3)) {
            return 0;
        };
        long bound_4 = 1;
        while (((bound_4 < arr_2.Length) && (arr_2[(int)(bound_4)] < item_3))) {
            bound_4 = (bound_4 * 2);
        };
        long left_5 = (bound_4 / 2);
        long right_6 = bound_4;
        if ((right_6 >= arr_2.Length)) {
            right_6 = (arr_2.Length - 1);
        };
        while ((left_5 <= right_6)) {
            long mid_7 = (left_5 + ((right_6 - left_5) / 2));
            if ((arr_2[(int)(mid_7)] == item_3)) {
                return mid_7;
            }
            if ((arr_2[(int)(mid_7)] > item_3)) {
                right_6 = (mid_7 - 1);
            } else {
                left_5 = (mid_7 + 1);
            }
        };
        return -1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
