// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_sorted(long[] arr_0) {
        long i_1 = 1;
        while ((i_1 < arr_0.Length)) {
            if ((arr_0[(int)((i_1 - 1))] > arr_0[(int)(i_1)])) {
                return false;
            }
            i_1 = (i_1 + 1);
        };
        return true;
    }

    public static long binary_search(long[] sorted_collection_2, long item_3) {
        if ((!Program.is_sorted(sorted_collection_2))) {
            return -1;
        };
        long left_4 = 0;
        long right_5 = (sorted_collection_2.Length - 1);
        while ((left_4 <= right_5)) {
            long midpoint_6 = (left_4 + ((right_5 - left_4) / 2));
            long current_item_7 = sorted_collection_2[(int)(midpoint_6)];
            if ((current_item_7 == item_3)) {
                return midpoint_6;
            }
            if ((item_3 < current_item_7)) {
                right_5 = (midpoint_6 - 1);
            } else {
                left_4 = (midpoint_6 + 1);
            }
        };
        return -1;
    }

    public static long binary_search_by_recursion(long[] sorted_collection_8, long item_9, long left_10, long right_11) {
        if ((right_11 < left_10)) {
            return -1;
        };
        long midpoint_12 = (left_10 + ((right_11 - left_10) / 2));
        if ((sorted_collection_8[(int)(midpoint_12)] == item_9)) {
            return midpoint_12;
        };
        if ((sorted_collection_8[(int)(midpoint_12)] > item_9)) {
            return Program.binary_search_by_recursion(sorted_collection_8, item_9, left_10, (midpoint_12 - 1));
        };
        return Program.binary_search_by_recursion(sorted_collection_8, item_9, (midpoint_12 + 1), right_11);
    }

    public static long exponential_search(long[] sorted_collection_13, long item_14) {
        if ((!Program.is_sorted(sorted_collection_13))) {
            return -1;
        };
        if ((sorted_collection_13.Length == 0)) {
            return -1;
        };
        long bound_15 = 1;
        while (((bound_15 < sorted_collection_13.Length) && (sorted_collection_13[(int)(bound_15)] < item_14))) {
            bound_15 = (bound_15 * 2);
        };
        long left_16 = (bound_15 / 2);
        long right_17 = (new long[]{bound_15, (sorted_collection_13.Length - 1)}.Min());
        return Program.binary_search_by_recursion(sorted_collection_13, item_14, left_16, right_17);
    }

    public static void main() {
        long[] data_18 = new long[]{0, 5, 7, 10, 15};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search(data_18, 0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search(data_18, 15))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search(data_18, 5))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search(data_18, 6))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search_by_recursion(data_18, 0, 0, (data_18.Length - 1)))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search_by_recursion(data_18, 15, 0, (data_18.Length - 1)))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search_by_recursion(data_18, 5, 0, (data_18.Length - 1)))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.binary_search_by_recursion(data_18, 6, 0, (data_18.Length - 1)))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.exponential_search(data_18, 0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.exponential_search(data_18, 15))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.exponential_search(data_18, 5))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.exponential_search(data_18, 6))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
