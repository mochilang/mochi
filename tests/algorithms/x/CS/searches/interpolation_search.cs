// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long interpolation_search(long[] arr_0, long item_1) {
        long left_2 = 0;
        long right_3 = (arr_0.Length - 1);
        while ((left_2 <= right_3)) {
            if ((arr_0[(int)(left_2)] == arr_0[(int)(right_3)])) {
                if ((arr_0[(int)(left_2)] == item_1)) {
                    return left_2;
                }
                return -1;
            }
            long point_4 = (left_2 + (((item_1 - arr_0[(int)(left_2)]) * (right_3 - left_2)) / (arr_0[(int)(right_3)] - arr_0[(int)(left_2)])));
            if (((point_4 < 0) || (point_4 >= arr_0.Length))) {
                return -1;
            }
            long current_5 = arr_0[(int)(point_4)];
            if ((current_5 == item_1)) {
                return point_4;
            }
            if ((point_4 < left_2)) {
                right_3 = left_2;
                left_2 = point_4;
            } else if ((point_4 > right_3)) {
                left_2 = right_3;
                right_3 = point_4;
            } else if ((item_1 < current_5)) {
                right_3 = (point_4 - 1);
            } else {
                left_2 = (point_4 + 1);
            }
        };
        return -1;
    }

    public static long interpolation_search_recursive(long[] arr_6, long item_7, long left_8, long right_9) {
        if ((left_8 > right_9)) {
            return -1;
        };
        if ((arr_6[(int)(left_8)] == arr_6[(int)(right_9)])) {
            if ((arr_6[(int)(left_8)] == item_7)) {
                return left_8;
            }
            return -1;
        };
        long point_10 = (left_8 + (((item_7 - arr_6[(int)(left_8)]) * (right_9 - left_8)) / (arr_6[(int)(right_9)] - arr_6[(int)(left_8)])));
        if (((point_10 < 0) || (point_10 >= arr_6.Length))) {
            return -1;
        };
        if ((arr_6[(int)(point_10)] == item_7)) {
            return point_10;
        };
        if ((point_10 < left_8)) {
            return Program.interpolation_search_recursive(arr_6, item_7, point_10, left_8);
        };
        if ((point_10 > right_9)) {
            return Program.interpolation_search_recursive(arr_6, item_7, right_9, left_8);
        };
        if ((arr_6[(int)(point_10)] > item_7)) {
            return Program.interpolation_search_recursive(arr_6, item_7, left_8, (point_10 - 1));
        };
        return Program.interpolation_search_recursive(arr_6, item_7, (point_10 + 1), right_9);
    }

    public static long interpolation_search_by_recursion(long[] arr_11, long item_12) {
        return Program.interpolation_search_recursive(arr_11, item_12, 0, (arr_11.Length - 1));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.interpolation_search(new long[]{1, 2, 3, 4, 5}, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.interpolation_search(new long[]{1, 2, 3, 4, 5}, 6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.interpolation_search_by_recursion(new long[]{0, 5, 7, 10, 15}, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.interpolation_search_by_recursion(new long[]{0, 5, 7, 10, 15}, 100))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.interpolation_search_by_recursion(new long[]{5, 5, 5, 5, 5}, 3))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
