// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SearchProblem {
    public double x;
    public double y;
    public double step;
    public override string ToString() => $"SearchProblem {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, step = {step.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_9 = 1;
    public static double score(SearchProblem p_0, Func<double, double, double> f_1) {
        return f_1(p_0.x, p_0.y);
    }

    public static SearchProblem[] get_neighbors(SearchProblem p_2) {
        double s_3 = p_2.step;
        SearchProblem[] ns_4 = new SearchProblem[]{};
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = (p_2.x - s_3), y = (p_2.y - s_3), step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = (p_2.x - s_3), y = p_2.y, step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = (p_2.x - s_3), y = (p_2.y + s_3), step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = p_2.x, y = (p_2.y - s_3), step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = p_2.x, y = (p_2.y + s_3), step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = (p_2.x + s_3), y = (p_2.y - s_3), step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = (p_2.x + s_3), y = p_2.y, step = s_3})));
        ns_4 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(ns_4, new SearchProblem{x = (p_2.x + s_3), y = (p_2.y + s_3), step = s_3})));
        return ns_4;
    }

    public static SearchProblem[] remove_at(SearchProblem[] lst_5, long idx_6) {
        SearchProblem[] res_7 = new SearchProblem[]{};
        long i_8 = 0;
        while ((i_8 < lst_5.Length)) {
            if ((i_8 != idx_6)) {
                res_7 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(res_7, _idx(lst_5, i_8))));
            }
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static long rand() {
        long _t_10 = _now();
        seed_9 = _mod(((seed_9 * 1103515245) + 12345), 2147483648L);
        return seed_9;
    }

    public static double random_float() {
        return (Convert.ToDouble(Program.rand()) / 2.147483648e09);
    }

    public static long randint(long low_11, long high_12) {
        return (_mod(Program.rand(), ((high_12 - low_11) + 1)) + low_11);
    }

    public static double expApprox(double x_13) {
        double y_14 = x_13;
        bool is_neg_15 = false;
        if ((x_13 < 0.0)) {
            is_neg_15 = true;
            y_14 = -x_13;
        };
        double term_16 = 1.0;
        double sum_17 = 1.0;
        long n_18 = 1;
        while ((n_18 < 30)) {
            term_16 = ((term_16 * y_14) / Convert.ToDouble(n_18));
            sum_17 = (sum_17 + term_16);
            n_18 = (n_18 + 1);
        };
        if (is_neg_15) {
            return (1.0 / sum_17);
        };
        return sum_17;
    }

    public static SearchProblem simulated_annealing(SearchProblem search_prob_19, Func<double, double, double> f_20, bool find_max_21, double max_x_22, double min_x_23, double max_y_24, double min_y_25, double start_temp_26, double rate_of_decrease_27, double threshold_temp_28) {
        bool search_end_29 = false;
        SearchProblem current_state_30 = search_prob_19;
        double current_temp_31 = start_temp_26;
        SearchProblem best_state_32 = current_state_30;
        while ((!search_end_29)) {
            double current_score_33 = Program.score(current_state_30, f_20);
            if ((Program.score(best_state_32, f_20) < current_score_33)) {
                best_state_32 = current_state_30;
            }
            SearchProblem next_state_34 = current_state_30;
            bool found_next_35 = false;
            SearchProblem[] neighbors_36 = Program.get_neighbors(current_state_30);
            while (((!found_next_35) && (neighbors_36.Length > 0))) {
                long idx_37 = Program.randint(0, (neighbors_36.Length - 1));
                SearchProblem picked_neighbor_38 = _idx(neighbors_36, idx_37);
                neighbors_36 = Program.remove_at(neighbors_36, idx_37);
                if (((((picked_neighbor_38.x > max_x_22) || (picked_neighbor_38.x < min_x_23)) || (picked_neighbor_38.y > max_y_24)) || (picked_neighbor_38.y < min_y_25))) {
                    continue;
                }
                double change_39 = (Program.score(picked_neighbor_38, f_20) - current_score_33);
                if ((!find_max_21)) {
                    change_39 = -change_39;
                }
                if ((change_39 > 0.0)) {
                    next_state_34 = picked_neighbor_38;
                    found_next_35 = true;
                } else {
                    double probability_40 = Program.expApprox((change_39 / current_temp_31));
                    if ((Program.random_float() < probability_40)) {
                        next_state_34 = picked_neighbor_38;
                        found_next_35 = true;
                    }
                }
            }
            current_temp_31 = (current_temp_31 - (current_temp_31 * rate_of_decrease_27));
            if (((current_temp_31 < threshold_temp_28) || (!found_next_35))) {
                search_end_29 = true;
            } else {
                current_state_30 = next_state_34;
            }
        };
        return best_state_32;
    }

    public static double test_f1(double x_41, double y_42) {
        return ((x_41 * x_41) + (y_42 * y_42));
    }

    public static double test_f2(double x_43, double y_44) {
        return (((3.0 * x_43) * x_43) - (6.0 * y_44));
    }

    public static void main() {
        SearchProblem prob1_45 = new SearchProblem{x = 12.0, y = 47.0, step = 1.0};
        SearchProblem min_state_46 = Program.simulated_annealing(prob1_45, test_f1, false, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0);
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("min1"), Program._fmtTop(Program.test_f1(min_state_46.x, min_state_46.y))}));
        SearchProblem prob2_47 = new SearchProblem{x = 12.0, y = 47.0, step = 1.0};
        SearchProblem max_state_48 = Program.simulated_annealing(prob2_47, test_f1, true, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0);
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("max1"), Program._fmtTop(Program.test_f1(max_state_48.x, max_state_48.y))}));
        SearchProblem prob3_49 = new SearchProblem{x = 3.0, y = 4.0, step = 1.0};
        SearchProblem min_state2_50 = Program.simulated_annealing(prob3_49, test_f2, false, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0);
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("min2"), Program._fmtTop(Program.test_f2(min_state2_50.x, min_state2_50.y))}));
        SearchProblem prob4_51 = new SearchProblem{x = 3.0, y = 4.0, step = 1.0};
        SearchProblem max_state2_52 = Program.simulated_annealing(prob4_51, test_f2, true, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0);
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("max2"), Program._fmtTop(Program.test_f2(max_state2_52.x, max_state2_52.y))}));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
