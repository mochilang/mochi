// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] set_at_int(long[] xs_0, long idx_1, long value_2) {
        long i_3 = 0;
        long[] res_4 = new long[]{};
        while ((i_3 < xs_0.Length)) {
            if ((i_3 == idx_1)) {
                res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, value_2)));
            } else {
                res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, _idx(xs_0, i_3))));
            }
            i_3 = (i_3 + 1);
        };
        return res_4;
    }

    public static long[] sort_int(long[] xs_5) {
        long[] res_6 = xs_5;
        long i_7 = 1;
        while ((i_7 < res_6.Length)) {
            long key_8 = _idx(res_6, i_7);
            long j_9 = (i_7 - 1);
            while (((j_9 >= 0) && (_idx(res_6, j_9) > key_8))) {
                res_6 = Program.set_at_int(res_6, (j_9 + 1), _idx(res_6, j_9));
                j_9 = (j_9 - 1);
            }
            res_6 = Program.set_at_int(res_6, (j_9 + 1), key_8);
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static long median_of_five(long[] arr_10) {
        long[] sorted_11 = Program.sort_int(arr_10);
        return _idx(sorted_11, (sorted_11.Length / 2));
    }

    public static long median_of_medians(long[] arr_12) {
        if ((arr_12.Length <= 5)) {
            return Program.median_of_five(arr_12);
        };
        long[] medians_13 = new long[]{};
        long i_14 = 0;
        while ((i_14 < arr_12.Length)) {
            if (((i_14 + 5) <= arr_12.Length)) {
                medians_13 = (Enumerable.ToArray(Enumerable.Append<long>(medians_13, Program.median_of_five(_slice<long>(arr_12, i_14, (i_14 + 5))))));
            } else {
                medians_13 = (Enumerable.ToArray(Enumerable.Append<long>(medians_13, Program.median_of_five(_slice<long>(arr_12, i_14, arr_12.Length)))));
            }
            i_14 = (i_14 + 5);
        };
        return Program.median_of_medians(medians_13);
    }

    public static long quick_select(long[] arr_15, long target_16) {
        if ((target_16 > arr_15.Length)) {
            return -1;
        };
        long x_17 = Program.median_of_medians(arr_15);
        long[] left_18 = new long[]{};
        long[] right_19 = new long[]{};
        bool check_20 = false;
        long i_21 = 0;
        while ((i_21 < arr_15.Length)) {
            if ((_idx(arr_15, i_21) < x_17)) {
                left_18 = (Enumerable.ToArray(Enumerable.Append<long>(left_18, _idx(arr_15, i_21))));
            } else if ((_idx(arr_15, i_21) > x_17)) {
                right_19 = (Enumerable.ToArray(Enumerable.Append<long>(right_19, _idx(arr_15, i_21))));
            } else if ((_idx(arr_15, i_21) == x_17)) {
                if ((!check_20)) {
                    check_20 = true;
                } else {
                    right_19 = (Enumerable.ToArray(Enumerable.Append<long>(right_19, _idx(arr_15, i_21))));
                }
            } else {
                right_19 = (Enumerable.ToArray(Enumerable.Append<long>(right_19, _idx(arr_15, i_21))));
            }
            i_21 = (i_21 + 1);
        };
        long rank_x_22 = (left_18.Length + 1);
        long answer_23 = 0;
        if ((rank_x_22 == target_16)) {
            answer_23 = x_17;
        } else if ((rank_x_22 > target_16)) {
            answer_23 = Program.quick_select(left_18, target_16);
        } else {
            answer_23 = Program.quick_select(right_19, (target_16 - rank_x_22));
        };
        return answer_23;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.median_of_five(new long[]{5, 4, 3, 2}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.quick_select(new long[]{2, 4, 5, 7, 899, 54, 32}, 5))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
