// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Solution {
    public string[] path;
    public long cost;
    public override string ToString() => $"Solution {{path = {path}, cost = {cost}}}";
}
class Swap {
    public string a;
    public string b;
    public override string ToString() => $"Swap {{a = \"{a}\", b = \"{b}\"}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, Dictionary<string, long>> graph_46 = new Dictionary<string, Dictionary<string, long>>{{"a", new Dictionary<string, long>{{"b", 20}, {"c", 18}, {"d", 22}, {"e", 26}}}, {"b", new Dictionary<string, long>{{"a", 20}, {"c", 10}, {"d", 11}, {"e", 12}}}, {"c", new Dictionary<string, long>{{"a", 18}, {"b", 10}, {"d", 23}, {"e", 24}}}, {"d", new Dictionary<string, long>{{"a", 22}, {"b", 11}, {"c", 23}, {"e", 40}}}, {"e", new Dictionary<string, long>{{"a", 26}, {"b", 12}, {"c", 24}, {"d", 40}}}};
    static Solution first_47 = Program.generate_first_solution(graph_46, "a");
    static Solution best_48 = Program.tabu_search(first_47, graph_46, 4, 3);
    public static long path_cost(string[] path_0, Dictionary<string, Dictionary<string, long>> graph_1) {
        long total_2 = 0;
        long i_3 = 0;
        while ((i_3 < (path_0.Length - 1))) {
            string u_4 = _idx(path_0, i_3);
            string v_5 = _idx(path_0, (i_3 + 1));
            total_2 = (total_2 + ((graph_1.ContainsKey(u_4) ? graph_1[u_4] : null).ContainsKey(v_5) ? (graph_1.ContainsKey(u_4) ? graph_1[u_4] : null)[v_5] : 0));
            i_3 = (i_3 + 1);
        };
        return total_2;
    }

    public static Solution generate_first_solution(Dictionary<string, Dictionary<string, long>> graph_6, string start_7) {
        string[] path_8 = new string[]{};
        string visiting_9 = start_7;
        long total_10 = 0;
        while ((path_8.Length < graph_6.Count)) {
            path_8 = (Enumerable.ToArray(Enumerable.Append<string>(path_8, visiting_9)));
            string best_node_11 = "";
            long best_cost_12 = 1000000;
            foreach (string n_13 in (graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null).Keys) {
                if (((!(Array.IndexOf(path_8, n_13) >= 0)) && (((graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null).ContainsKey(n_13) ? (graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null)[n_13] : 0) < best_cost_12))) {
                    best_cost_12 = ((graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null).ContainsKey(n_13) ? (graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null)[n_13] : 0);
                    best_node_11 = n_13;
                }
            }
            if ((best_node_11 == "")) {
                break;
            }
            total_10 = (total_10 + best_cost_12);
            visiting_9 = best_node_11;
        };
        path_8 = (Enumerable.ToArray(Enumerable.Append<string>(path_8, start_7)));
        total_10 = (total_10 + ((graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null).ContainsKey(start_7) ? (graph_6.ContainsKey(visiting_9) ? graph_6[visiting_9] : null)[start_7] : 0));
        return new Solution{path = path_8, cost = total_10};
    }

    public static string[] copy_path(string[] path_14) {
        string[] res_15 = new string[]{};
        long i_16 = 0;
        while ((i_16 < path_14.Length)) {
            res_15 = (Enumerable.ToArray(Enumerable.Append<string>(res_15, _idx(path_14, i_16))));
            i_16 = (i_16 + 1);
        };
        return res_15;
    }

    public static Solution[] find_neighborhood(Solution sol_17, Dictionary<string, Dictionary<string, long>> graph_18) {
        Solution[] neighbors_19 = new Solution[]{};
        long i_20 = 1;
        while ((i_20 < (sol_17.path.Length - 1))) {
            long j_21 = 1;
            while ((j_21 < (sol_17.path.Length - 1))) {
                if ((i_20 != j_21)) {
                    string[] new_path_22 = Program.copy_path(sol_17.path);
                    string tmp_23 = _idx(new_path_22, i_20);
                    new_path_22[(int)(i_20)] = _idx(new_path_22, j_21);
                    new_path_22[(int)(j_21)] = tmp_23;
                    long cost_24 = Program.path_cost(new_path_22, graph_18);
                    neighbors_19 = (Enumerable.ToArray(Enumerable.Append<Solution>(neighbors_19, new Solution{path = new_path_22, cost = cost_24})));
                }
                j_21 = (j_21 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return neighbors_19;
    }

    public static Swap find_swap(string[] a_25, string[] b_26) {
        long i_27 = 0;
        while ((i_27 < a_25.Length)) {
            if ((_idx(a_25, i_27) != _idx(b_26, i_27))) {
                return new Swap{a = _idx(a_25, i_27), b = _idx(b_26, i_27)};
            }
            i_27 = (i_27 + 1);
        };
        return new Swap{a = "", b = ""};
    }

    public static Solution tabu_search(Solution first_28, Dictionary<string, Dictionary<string, long>> graph_29, long iters_30, long size_31) {
        Solution solution_32 = first_28;
        Solution best_33 = first_28;
        Swap[] tabu_34 = new Swap[]{};
        long count_35 = 0;
        while ((count_35 < iters_30)) {
            Solution[] neighborhood_36 = Program.find_neighborhood(solution_32, graph_29);
            if ((neighborhood_36.Length == 0)) {
                break;
            }
            Solution best_neighbor_37 = _idx(neighborhood_36, 0);
            Swap best_move_38 = Program.find_swap(solution_32.path, best_neighbor_37.path);
            long i_39 = 1;
            while ((i_39 < neighborhood_36.Length)) {
                Solution cand_40 = _idx(neighborhood_36, i_39);
                Swap move_41 = Program.find_swap(solution_32.path, cand_40.path);
                bool forbidden_42 = false;
                long t_43 = 0;
                while ((t_43 < tabu_34.Length)) {
                    if ((((_idx(tabu_34, t_43).a == move_41.a) && (_idx(tabu_34, t_43).b == move_41.b)) || ((_idx(tabu_34, t_43).a == move_41.b) && (_idx(tabu_34, t_43).b == move_41.a)))) {
                        forbidden_42 = true;
                    }
                    t_43 = (t_43 + 1);
                }
                if (((forbidden_42 == false) && (cand_40.cost < best_neighbor_37.cost))) {
                    best_neighbor_37 = cand_40;
                    best_move_38 = move_41;
                }
                i_39 = (i_39 + 1);
            }
            solution_32 = best_neighbor_37;
            tabu_34 = (Enumerable.ToArray(Enumerable.Append<Swap>(tabu_34, best_move_38)));
            if ((tabu_34.Length > size_31)) {
                Swap[] new_tab_44 = new Swap[]{};
                long j_45 = 1;
                while ((j_45 < tabu_34.Length)) {
                    new_tab_44 = (Enumerable.ToArray(Enumerable.Append<Swap>(new_tab_44, _idx(tabu_34, j_45))));
                    j_45 = (j_45 + 1);
                }
                tabu_34 = new_tab_44;
            }
            if ((solution_32.cost < best_33.cost)) {
                best_33 = solution_32;
            }
            count_35 = (count_35 + 1);
        };
        return best_33;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(best_48.path)));
            Console.WriteLine(Program._fmtTop(_fmtStr(best_48.cost)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
