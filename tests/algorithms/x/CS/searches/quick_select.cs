// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] partition(long[] data_0, long pivot_1) {
        long[] less_2 = new long[]{};
        long[] equal_3 = new long[]{};
        long[] greater_4 = new long[]{};
        for (var i_5 = 0; i_5 < data_0.Length; i_5++) {
            long v_6 = data_0[(int)(i_5)];
            if ((v_6 < pivot_1)) {
                less_2 = (Enumerable.ToArray(Enumerable.Append<long>(less_2, v_6)));
            } else if ((v_6 > pivot_1)) {
                greater_4 = (Enumerable.ToArray(Enumerable.Append<long>(greater_4, v_6)));
            } else {
                equal_3 = (Enumerable.ToArray(Enumerable.Append<long>(equal_3, v_6)));
            }
        };
        return new long[][]{less_2, equal_3, greater_4};
    }

    public static long quick_select(long[] items_7, long index_8) {
        if (((index_8 < 0) || (index_8 >= items_7.Length))) {
            return -1;
        };
        long pivot_9 = items_7[(int)((items_7.Length / 2))];
        long[][] parts_10 = Program.partition(items_7, pivot_9);
        long[] smaller_11 = parts_10[(int)(0)];
        long[] equal_12 = parts_10[(int)(1)];
        long[] larger_13 = parts_10[(int)(2)];
        long count_14 = equal_12.Length;
        long m_15 = smaller_11.Length;
        if (((m_15 <= index_8) && (index_8 < (m_15 + count_14)))) {
            return pivot_9;
        } else if ((index_8 < m_15)) {
            return Program.quick_select(smaller_11, index_8);
        } else {
            return Program.quick_select(larger_13, (index_8 - (m_15 + count_14)));
        };
        return default(long);
    }

    public static double median(long[] items_16) {
        long n_17 = items_16.Length;
        long mid_18 = (n_17 / 2);
        if ((_mod(n_17, 2) != 0)) {
            return (1.0 * Program.quick_select(items_16, mid_18));
        } else {
            long low_19 = Program.quick_select(items_16, (mid_18 - 1));
            long high_20 = Program.quick_select(items_16, mid_18);
            return ((1.0 * (low_19 + high_20)) / 2.0);
        };
        return default(double);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.quick_select(new long[]{2, 4, 5, 7, 899, 54, 32}, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.quick_select(new long[]{2, 4, 5, 7, 899, 54, 32}, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.quick_select(new long[]{5, 4, 3, 2}, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.quick_select(new long[]{3, 5, 7, 10, 2, 12}, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.median(new long[]{3, 2, 2, 9, 9}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.median(new long[]{2, 2, 9, 9, 9, 3}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
