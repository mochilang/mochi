// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] example1_14 = new long[]{4, 5, 6, 7};
    static long[] example2_15 = new long[]{-18, 2};
    static long[] example3_16 = new long[]{0, 5, 10, 15, 20, 25, 30};
    public static long fibonacci(long k_0) {
        if ((k_0 < 0)) {
            throw new Exception("k must be >= 0");
        };
        long a_1 = 0;
        long b_2 = 1;
        long i_3 = 0;
        while ((i_3 < k_0)) {
            long tmp_4 = (a_1 + b_2);
            a_1 = b_2;
            b_2 = tmp_4;
            i_3 = (i_3 + 1);
        };
        return a_1;
    }

    public static long min_int(long a_5, long b_6) {
        if ((a_5 < b_6)) {
            return a_5;
        } else {
            return b_6;
        };
        return default(long);
    }

    public static long fibonacci_search(long[] arr_7, long val_8) {
        long n_9 = arr_7.Length;
        long m_10 = 0;
        while ((Program.fibonacci(m_10) < n_9)) {
            m_10 = (m_10 + 1);
        };
        long offset_11 = 0;
        while ((m_10 > 0)) {
            long i_12 = Program.min_int((offset_11 + Program.fibonacci((m_10 - 1))), (n_9 - 1));
            long item_13 = arr_7[(int)(i_12)];
            if ((item_13 == val_8)) {
                return i_12;
            } else if ((val_8 < item_13)) {
                m_10 = (m_10 - 1);
            } else {
                offset_11 = (offset_11 + Program.fibonacci((m_10 - 1)));
                m_10 = (m_10 - 2);
            }
        };
        return -1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_search(example1_14, 4))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_search(example1_14, -10))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_search(example2_15, -18))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_search(example3_16, 15))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_search(example3_16, 17))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
