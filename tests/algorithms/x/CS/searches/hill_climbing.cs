// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SearchProblem {
    public double x;
    public double y;
    public double step;
    public Func<double, double, double> f;
    public override string ToString() => $"SearchProblem {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, step = {step.ToString("0.0")}, f = {f}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double score(SearchProblem sp_0) {
        return sp_0.f(sp_0.x, sp_0.y);
    }

    public static SearchProblem[] neighbors(SearchProblem sp_1) {
        double s_2 = sp_1.step;
        return new SearchProblem[]{new SearchProblem{x = (sp_1.x - s_2), y = (sp_1.y - s_2), step = s_2, f = sp_1.f}, new SearchProblem{x = (sp_1.x - s_2), y = sp_1.y, step = s_2, f = sp_1.f}, new SearchProblem{x = (sp_1.x - s_2), y = (sp_1.y + s_2), step = s_2, f = sp_1.f}, new SearchProblem{x = sp_1.x, y = (sp_1.y - s_2), step = s_2, f = sp_1.f}, new SearchProblem{x = sp_1.x, y = (sp_1.y + s_2), step = s_2, f = sp_1.f}, new SearchProblem{x = (sp_1.x + s_2), y = (sp_1.y - s_2), step = s_2, f = sp_1.f}, new SearchProblem{x = (sp_1.x + s_2), y = sp_1.y, step = s_2, f = sp_1.f}, new SearchProblem{x = (sp_1.x + s_2), y = (sp_1.y + s_2), step = s_2, f = sp_1.f}};
    }

    public static bool equal_state(SearchProblem a_3, SearchProblem b_4) {
        return ((a_3.x == b_4.x) && (a_3.y == b_4.y));
    }

    public static bool contains_state(SearchProblem[] lst_5, SearchProblem sp_6) {
        long i_7 = 0;
        while ((i_7 < lst_5.Length)) {
            if (Program.equal_state(lst_5[(int)(i_7)], sp_6)) {
                return true;
            }
            i_7 = (i_7 + 1);
        };
        return false;
    }

    public static SearchProblem hill_climbing(SearchProblem sp_8, bool find_max_9, double max_x_10, double min_x_11, double max_y_12, double min_y_13, long max_iter_14) {
        SearchProblem current_15 = sp_8;
        SearchProblem[] visited_16 = new SearchProblem[]{};
        long iterations_17 = 0;
        bool solution_found_18 = false;
        while (((solution_found_18 == false) && (iterations_17 < max_iter_14))) {
            visited_16 = (Enumerable.ToArray(Enumerable.Append<SearchProblem>(visited_16, current_15)));
            iterations_17 = (iterations_17 + 1);
            double current_score_19 = Program.score(current_15);
            SearchProblem[] neighs_20 = Program.neighbors(current_15);
            double max_change_21 = -1e18;
            double min_change_22 = 1e18;
            SearchProblem next_23 = current_15;
            bool improved_24 = false;
            long i_25 = 0;
            while ((i_25 < neighs_20.Length)) {
                SearchProblem n_26 = neighs_20[(int)(i_25)];
                i_25 = (i_25 + 1);
                if (Program.contains_state(visited_16, n_26)) {
                    continue;
                }
                if (((((n_26.x > max_x_10) || (n_26.x < min_x_11)) || (n_26.y > max_y_12)) || (n_26.y < min_y_13))) {
                    continue;
                }
                double change_27 = (Program.score(n_26) - current_score_19);
                if (find_max_9) {
                    if (((change_27 > max_change_21) && (change_27 > 0.0))) {
                        max_change_21 = change_27;
                        next_23 = n_26;
                        improved_24 = true;
                    }
                } else if (((change_27 < min_change_22) && (change_27 < 0.0))) {
                    min_change_22 = change_27;
                    next_23 = n_26;
                    improved_24 = true;
                }
            }
            if (improved_24) {
                current_15 = next_23;
            } else {
                solution_found_18 = true;
            }
        };
        return current_15;
    }

    public static double test_f1(double x_28, double y_29) {
        return ((x_28 * x_28) + (y_29 * y_29));
    }

    public static void main() {
        SearchProblem prob1_30 = new SearchProblem{x = 3.0, y = 4.0, step = 1.0, f = test_f1};
        SearchProblem local_min1_31 = Program.hill_climbing(prob1_30, false, 1e09, -1e09, 1e09, -1e09, 10000);
        Console.WriteLine(Program._fmtTop(_fmtStr(_atoi(Program.score(local_min1_31)))));
        SearchProblem prob2_32 = new SearchProblem{x = 12.0, y = 47.0, step = 1.0, f = test_f1};
        SearchProblem local_min2_33 = Program.hill_climbing(prob2_32, false, 100.0, 5.0, 50.0, -5.0, 10000);
        Console.WriteLine(Program._fmtTop(_fmtStr(_atoi(Program.score(local_min2_33)))));
        SearchProblem prob3_34 = new SearchProblem{x = 3.0, y = 4.0, step = 1.0, f = test_f1};
        SearchProblem local_max_35 = Program.hill_climbing(prob3_34, true, 1e09, -1e09, 1e09, -1e09, 1000);
        Console.WriteLine(Program._fmtTop(_fmtStr(_atoi(Program.score(local_max_35)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
