// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long precision_0 = 10;
    public static long lin_search(long left_1, long right_2, long[] array_3, long target_4) {
        long i_5 = left_1;
        while ((i_5 < right_2)) {
            if ((_idx(array_3, i_5) == target_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    public static long ite_ternary_search(long[] array_6, long target_7) {
        long left_8 = 0;
        long right_9 = (array_6.Length - 1);
        while ((left_8 <= right_9)) {
            if (((right_9 - left_8) < precision_0)) {
                long idx_10 = Program.lin_search(left_8, (right_9 + 1), array_6, target_7);
                return idx_10;
            }
            long one_third_11 = (left_8 + ((right_9 - left_8) / 3));
            long two_third_12 = (right_9 - ((right_9 - left_8) / 3));
            if ((_idx(array_6, one_third_11) == target_7)) {
                return one_third_11;
            }
            if ((_idx(array_6, two_third_12) == target_7)) {
                return two_third_12;
            }
            if ((target_7 < _idx(array_6, one_third_11))) {
                right_9 = (one_third_11 - 1);
            } else if ((_idx(array_6, two_third_12) < target_7)) {
                left_8 = (two_third_12 + 1);
            } else {
                left_8 = (one_third_11 + 1);
                right_9 = (two_third_12 - 1);
            }
        };
        return -1;
    }

    public static long rec_ternary_search(long left_13, long right_14, long[] array_15, long target_16) {
        if ((left_13 <= right_14)) {
            if (((right_14 - left_13) < precision_0)) {
                long idx_17 = Program.lin_search(left_13, (right_14 + 1), array_15, target_16);
                return idx_17;
            }
            long one_third_18 = (left_13 + ((right_14 - left_13) / 3));
            long two_third_19 = (right_14 - ((right_14 - left_13) / 3));
            if ((_idx(array_15, one_third_18) == target_16)) {
                return one_third_18;
            }
            if ((_idx(array_15, two_third_19) == target_16)) {
                return two_third_19;
            }
            if ((target_16 < _idx(array_15, one_third_18))) {
                return Program.rec_ternary_search(left_13, (one_third_18 - 1), array_15, target_16);
            }
            if ((_idx(array_15, two_third_19) < target_16)) {
                return Program.rec_ternary_search((two_third_19 + 1), right_14, array_15, target_16);
            }
            return Program.rec_ternary_search((one_third_18 + 1), (two_third_19 - 1), array_15, target_16);
        };
        return -1;
    }

    public static void main() {
        long[] test_list_20 = new long[]{0, 1, 2, 8, 13, 17, 19, 32, 42};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.ite_ternary_search(test_list_20, 3))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.ite_ternary_search(test_list_20, 13))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.rec_ternary_search(0, (test_list_20.Length - 1), test_list_20, 3))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.rec_ternary_search(0, (test_list_20.Length - 1), test_list_20, 13))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
