// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] graph_13 = new long[][]{new long[]{0, 1, 0, 0, 0}, new long[]{1, 0, 1, 0, 1}, new long[]{0, 1, 0, 1, 0}, new long[]{0, 1, 1, 0, 0}, new long[]{0, 1, 0, 0, 0}};
    public static bool valid_coloring(long[] neighbours_0, long[] colored_vertices_1, long color_2) {
        long i_3 = 0;
        while ((i_3 < neighbours_0.Length)) {
            if (((neighbours_0[(int)(i_3)] == 1) && (colored_vertices_1[(int)(i_3)] == color_2))) {
                return false;
            }
            i_3 = (i_3 + 1);
        };
        return true;
    }

    public static bool util_color(long[][] graph_4, long max_colors_5, long[] colored_vertices_6, long index_7) {
        if ((index_7 == graph_4.Length)) {
            return true;
        };
        long c_8 = 0;
        while ((c_8 < max_colors_5)) {
            if (Program.valid_coloring(graph_4[(int)(index_7)], colored_vertices_6, c_8)) {
                colored_vertices_6[index_7] = c_8;
                if (Program.util_color(graph_4, max_colors_5, colored_vertices_6, (index_7 + 1))) {
                    return true;
                }
                colored_vertices_6[index_7] = -1;
            }
            c_8 = (c_8 + 1);
        };
        return false;
    }

    public static long[] color(long[][] graph_9, long max_colors_10) {
        long[] colored_vertices_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < graph_9.Length)) {
            colored_vertices_11 = (Enumerable.ToArray(Enumerable.Append(colored_vertices_11, -1)));
            i_12 = (i_12 + 1);
        };
        if (Program.util_color(graph_9, max_colors_10, colored_vertices_11, 0)) {
            return colored_vertices_11;
        };
        return new long[]{};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.color(graph_13, 3)));
            Console.WriteLine(Program._fmtTop("\n"));
            Console.WriteLine(Program._fmtTop(Program.color(graph_13, 2).Length));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
