// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool contains(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static long get_point_key(long len_board_3, long len_board_column_4, long row_5, long column_6) {
        return (((len_board_3 * len_board_column_4) * row_5) + column_6);
    }

    public static bool search_from(string[][] board_7, string word_8, long row_9, long column_10, long word_index_11, long[] visited_12) {
        if ((board_7[(int)(row_9)][(int)(column_10)] != _substr(word_8, word_index_11, (word_index_11 + 1)))) {
            return false;
        };
        if ((word_index_11 == (word_8.Length - 1))) {
            return true;
        };
        int len_board_13 = board_7.Length;
        int len_board_column_14 = board_7[(int)(0)].Length;
        long[] dir_i_15 = new long[]{0, 0, -1, 1};
        long[] dir_j_16 = new long[]{1, -1, 0, 0};
        long k_17 = 0;
        while ((k_17 < 4)) {
            long next_i_18 = (row_9 + dir_i_15[(int)(k_17)]);
            long next_j_19 = (column_10 + dir_j_16[(int)(k_17)]);
            if ((!((((0 <= next_i_18) && (next_i_18 < len_board_13)) && (0 <= next_j_19)) && (next_j_19 < len_board_column_14)))) {
                k_17 = (k_17 + 1);
                continue;
            }
            long key_20 = Program.get_point_key(len_board_13, len_board_column_14, next_i_18, next_j_19);
            if (Program.contains(visited_12, key_20)) {
                k_17 = (k_17 + 1);
                continue;
            }
            long[] new_visited_21 = (Enumerable.ToArray(Enumerable.Append(visited_12, key_20)));
            if (Program.search_from(board_7, word_8, next_i_18, next_j_19, (word_index_11 + 1), new_visited_21)) {
                return true;
            }
            k_17 = (k_17 + 1);
        };
        return false;
    }

    public static bool word_exists(string[][] board_22, string word_23) {
        int len_board_24 = board_22.Length;
        int len_board_column_25 = board_22[(int)(0)].Length;
        long i_26 = 0;
        while ((i_26 < len_board_24)) {
            long j_27 = 0;
            while ((j_27 < len_board_column_25)) {
                long key_28 = Program.get_point_key(len_board_24, len_board_column_25, i_26, j_27);
                long[] visited_29 = (Enumerable.ToArray(Enumerable.Append(new long[]{}, key_28)));
                if (Program.search_from(board_22, word_23, i_26, j_27, 0, visited_29)) {
                    return true;
                }
                j_27 = (j_27 + 1);
            }
            i_26 = (i_26 + 1);
        };
        return false;
    }

    public static void main() {
        string[][] board_30 = new string[][]{new string[]{"A", "B", "C", "E"}, new string[]{"S", "F", "C", "S"}, new string[]{"A", "D", "E", "E"}};
        Console.WriteLine(Program._fmtTop(Program.word_exists(board_30, "ABCCED")));
        Console.WriteLine(Program._fmtTop(Program.word_exists(board_30, "SEE")));
        Console.WriteLine(Program._fmtTop(Program.word_exists(board_30, "ABCB")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
