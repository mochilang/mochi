// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool contains(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static string repeat(string s_3, long times_4) {
        string result_5 = "";
        long i_6 = 0;
        while ((i_6 < times_4)) {
            result_5 = (result_5 + s_3);
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static string[] build_board(long[] pos_7, long n_8) {
        string[] board_9 = new string[]{};
        long i_10 = 0;
        while ((i_10 < pos_7.Length)) {
            long col_11 = pos_7[(int)(i_10)];
            string line_12 = ((Program.repeat(". ", col_11) + "Q ") + Program.repeat(". ", ((n_8 - 1) - col_11)));
            board_9 = (Enumerable.ToArray(Enumerable.Append(board_9, line_12)));
            i_10 = (i_10 + 1);
        };
        return board_9;
    }

    public static string[][] depth_first_search(long[] pos_13, long[] dr_14, long[] dl_15, long n_16) {
        int row_17 = pos_13.Length;
        if ((row_17 == n_16)) {
            string[][] single_18 = new string[][]{};
            single_18 = (Enumerable.ToArray(Enumerable.Append(single_18, Program.build_board(pos_13, n_16))));
            return single_18;
        };
        string[][] boards_19 = new string[][]{};
        long col_20 = 0;
        while ((col_20 < n_16)) {
            if (((Program.contains(pos_13, col_20) || Program.contains(dr_14, (row_17 - col_20))) || Program.contains(dl_15, (row_17 + col_20)))) {
                col_20 = (col_20 + 1);
                continue;
            }
            string[][] result_21 = Program.depth_first_search((Enumerable.ToArray(Enumerable.Append(pos_13, col_20))), (Enumerable.ToArray(Enumerable.Append(dr_14, (row_17 - col_20)))), (Enumerable.ToArray(Enumerable.Append(dl_15, (row_17 + col_20)))), n_16);
            boards_19 = (Enumerable.ToArray(Enumerable.Concat(boards_19, result_21)));
            col_20 = (col_20 + 1);
        };
        return boards_19;
    }

    public static long n_queens_solution(long n_22) {
        string[][] boards_23 = Program.depth_first_search(new long[]{}, new long[]{}, new long[]{}, n_22);
        long i_24 = 0;
        while ((i_24 < boards_23.Length)) {
            long j_25 = 0;
            while ((j_25 < boards_23[(int)(i_24)].Length)) {
                Console.WriteLine(Program._fmtTop(boards_23[(int)(i_24)][(int)(j_25)]));
                j_25 = (j_25 + 1);
            }
            Console.WriteLine(Program._fmtTop(""));
            i_24 = (i_24 + 1);
        };
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop(boards_23.Length), Program._fmtTop("solutions were found.")}));
        return (long)boards_23.Length;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.n_queens_solution(4);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
