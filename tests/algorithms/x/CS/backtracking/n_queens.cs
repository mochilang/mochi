// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] create_board(long n_0) {
        long[][] board_1 = new long[][]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            long[] row_3 = new long[]{};
            long j_4 = 0;
            while ((j_4 < n_0)) {
                row_3 = (Enumerable.ToArray(Enumerable.Append(row_3, 0)));
                j_4 = (j_4 + 1);
            }
            board_1 = (Enumerable.ToArray(Enumerable.Append(board_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return board_1;
    }

    public static bool is_safe(long[][] board_5, long row_6, long column_7) {
        int n_8 = board_5.Length;
        long i_9 = 0;
        while ((i_9 < row_6)) {
            if ((board_5[(int)(i_9)][(int)(column_7)] == 1)) {
                return false;
            }
            i_9 = (i_9 + 1);
        };
        i_9 = (row_6 - 1);
        long j_10 = (column_7 - 1);
        while (((i_9 >= 0) && (j_10 >= 0))) {
            if ((board_5[(int)(i_9)][(int)(j_10)] == 1)) {
                return false;
            }
            i_9 = (i_9 - 1);
            j_10 = (j_10 - 1);
        };
        i_9 = (row_6 - 1);
        j_10 = (column_7 + 1);
        while (((i_9 >= 0) && (j_10 < n_8))) {
            if ((board_5[(int)(i_9)][(int)(j_10)] == 1)) {
                return false;
            }
            i_9 = (i_9 - 1);
            j_10 = (j_10 + 1);
        };
        return true;
    }

    public static string row_string(long[] row_11) {
        string s_12 = "";
        long j_13 = 0;
        while ((j_13 < row_11.Length)) {
            if ((row_11[(int)(j_13)] == 1)) {
                s_12 = (s_12 + "Q ");
            } else {
                s_12 = (s_12 + ". ");
            }
            j_13 = (j_13 + 1);
        };
        return s_12;
    }

    public static void printboard(long[][] board_14) {
        long i_15 = 0;
        while ((i_15 < board_14.Length)) {
            Console.WriteLine(Program._fmtTop(Program.row_string(board_14[(int)(i_15)])));
            i_15 = (i_15 + 1);
        };
    }

    public static long solve(long[][] board_16, long row_17) {
        if ((row_17 >= board_16.Length)) {
            Program.printboard(board_16);
            Console.WriteLine(Program._fmtTop(""));
            return 1;
        };
        long count_18 = 0;
        long i_19 = 0;
        while ((i_19 < board_16.Length)) {
            if (Program.is_safe(board_16, row_17, i_19)) {
                board_16[(int)(row_17)][i_19] = 1;
                count_18 = (count_18 + Program.solve(board_16, (row_17 + 1)));
                board_16[(int)(row_17)][i_19] = 0;
            }
            i_19 = (i_19 + 1);
        };
        return count_18;
    }

    public static long n_queens(long n_20) {
        long[][] board_21 = Program.create_board(n_20);
        long total_22 = Program.solve(board_21, 0);
        Console.WriteLine(Program._fmtTop(("The total number of solutions are: " + _fmtStr(total_22))));
        return total_22;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.n_queens(4);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
