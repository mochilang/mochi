// Generated by Mochi 0.10.59 on 2025-08-06 15:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static long[][] create_all_state(long increment_0, long total_1, long level_2, long[] current_3, long[][] result_4) {
        if ((level_2 == 0)) {
            return (Enumerable.ToArray(Enumerable.Append(result_4, current_3)));
        };
        long i_5 = increment_0;
        while ((i_5 <= ((total_1 - level_2) + 1))) {
            long[] next_current_6 = (Enumerable.ToArray(Enumerable.Append(current_3, i_5)));
            result_4 = Program.create_all_state((i_5 + 1), total_1, (level_2 - 1), next_current_6, result_4);
            i_5 = (i_5 + 1);
        };
        return result_4;
    }

    public static long[][] generate_all_combinations(long n_7, long k_8) {
        if (((k_8 < 0) || (n_7 < 0))) {
            return new long[][]{};
        };
        long[][] result_9 = new long[][]{};
        return Program.create_all_state(1, n_7, k_8, new long[]{}, result_9);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmt(Program.generate_all_combinations(4, 2))));
            Console.WriteLine(Program._fmtTop(_fmt(Program.generate_all_combinations(3, 1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
