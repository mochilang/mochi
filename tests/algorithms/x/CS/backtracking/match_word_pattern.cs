// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string get_value(string[] keys_0, string[] values_1, string key_2) {
        long i_3 = 0;
        while ((i_3 < keys_0.Length)) {
            if ((keys_0[(int)(i_3)] == key_2)) {
                return values_1[(int)(i_3)];
            }
            i_3 = (i_3 + 1);
        };
        return (string)null;
    }

    public static bool contains_value(string[] values_4, string value_5) {
        long i_6 = 0;
        while ((i_6 < values_4.Length)) {
            if ((values_4[(int)(i_6)] == value_5)) {
                return true;
            }
            i_6 = (i_6 + 1);
        };
        return false;
    }

    public static bool backtrack(string pattern_7, string input_string_8, long pi_9, long si_10, string[] keys_11, string[] values_12) {
        if (((pi_9 == pattern_7.Length) && (si_10 == input_string_8.Length))) {
            return true;
        };
        if (((pi_9 == pattern_7.Length) || (si_10 == input_string_8.Length))) {
            return false;
        };
        string ch_13 = _substr(pattern_7, pi_9, (pi_9 + 1));
        string mapped_14 = Program.get_value(keys_11, values_12, ch_13);
        if ((mapped_14 != null)) {
            if ((_substr(input_string_8, si_10, (si_10 + mapped_14.Length)) == mapped_14)) {
                return Program.backtrack(pattern_7, input_string_8, (pi_9 + 1), (si_10 + mapped_14.Length), keys_11, values_12);
            }
            return false;
        };
        long end_15 = (si_10 + 1);
        while ((end_15 <= input_string_8.Length)) {
            string substr_16 = _substr(input_string_8, si_10, end_15);
            if (Program.contains_value(values_12, substr_16)) {
                end_15 = (end_15 + 1);
                continue;
            }
            string[] new_keys_17 = (Enumerable.ToArray(Enumerable.Append(keys_11, ch_13)));
            string[] new_values_18 = (Enumerable.ToArray(Enumerable.Append(values_12, substr_16)));
            if (Program.backtrack(pattern_7, input_string_8, (pi_9 + 1), end_15, new_keys_17, new_values_18)) {
                return true;
            }
            end_15 = (end_15 + 1);
        };
        return false;
    }

    public static bool match_word_pattern(string pattern_19, string input_string_20) {
        string[] keys_21 = new string[]{};
        string[] values_22 = new string[]{};
        return Program.backtrack(pattern_19, input_string_20, 0, 0, keys_21, values_22);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.match_word_pattern("aba", "GraphTreesGraph")));
        Console.WriteLine(Program._fmtTop(Program.match_word_pattern("xyx", "PythonRubyPython")));
        Console.WriteLine(Program._fmtTop(Program.match_word_pattern("GG", "PythonJavaPython")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
