// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] initial_grid_19 = new long[][]{new long[]{3, 0, 6, 5, 0, 8, 4, 0, 0}, new long[]{5, 2, 0, 0, 0, 0, 0, 0, 0}, new long[]{0, 8, 7, 0, 0, 0, 0, 3, 1}, new long[]{0, 0, 3, 0, 1, 0, 0, 8, 0}, new long[]{9, 0, 0, 8, 6, 3, 0, 0, 5}, new long[]{0, 5, 0, 0, 9, 0, 6, 0, 0}, new long[]{1, 3, 0, 0, 0, 0, 2, 5, 0}, new long[]{0, 0, 0, 0, 0, 0, 0, 7, 4}, new long[]{0, 0, 5, 2, 0, 6, 3, 0, 0}};
    static long[][] no_solution_20 = new long[][]{new long[]{5, 0, 6, 5, 0, 8, 4, 0, 3}, new long[]{5, 2, 0, 0, 0, 0, 0, 0, 2}, new long[]{1, 8, 7, 0, 0, 0, 0, 3, 1}, new long[]{0, 0, 3, 0, 1, 0, 0, 8, 0}, new long[]{9, 0, 0, 8, 6, 3, 0, 0, 5}, new long[]{0, 5, 0, 0, 9, 0, 6, 0, 0}, new long[]{1, 3, 0, 0, 0, 0, 2, 5, 0}, new long[]{0, 0, 0, 0, 0, 0, 0, 7, 4}, new long[]{0, 0, 5, 2, 0, 6, 3, 0, 0}};
    static long[][][] examples_21 = new long[][][]{initial_grid_19, no_solution_20};
    static long idx_22 = 0;
    public static bool is_safe(long[][] grid_0, long row_1, long column_2, long n_3) {
        for (var i_4 = 0; i_4 < 9; i_4++) {
            if (((grid_0[(int)(row_1)][(int)(i_4)] == n_3) || (grid_0[(int)(i_4)][(int)(column_2)] == n_3))) {
                return false;
            }
        };
        for (var i_5 = 0; i_5 < 3; i_5++) {
            for (var j_6 = 0; j_6 < 3; j_6++) {
                if ((grid_0[(int)(((row_1 - (row_1 % 3)) + i_5))][(int)(((column_2 - (column_2 % 3)) + j_6))] == n_3)) {
                    return false;
                }
            }
        };
        return true;
    }

    public static long[] find_empty_location(long[][] grid_7) {
        for (var i_8 = 0; i_8 < 9; i_8++) {
            for (var j_9 = 0; j_9 < 9; j_9++) {
                if ((grid_7[(int)(i_8)][(int)(j_9)] == 0)) {
                    return new long[]{i_8, j_9};
                }
            }
        };
        return new long[]{};
    }

    public static bool sudoku(long[][] grid_10) {
        long[] loc_11 = Program.find_empty_location(grid_10);
        if ((loc_11.Length == 0)) {
            return true;
        };
        long row_12 = loc_11[(int)(0)];
        long column_13 = loc_11[(int)(1)];
        for (var digit_14 = 1; digit_14 < 10; digit_14++) {
            if (Program.is_safe(grid_10, row_12, column_13, digit_14)) {
                grid_10[(int)(row_12)][column_13] = digit_14;
                if (Program.sudoku(grid_10)) {
                    return true;
                }
                grid_10[(int)(row_12)][column_13] = 0;
            }
        };
        return false;
    }

    public static void print_solution(long[][] grid_15) {
        for (var r_16 = 0; r_16 < grid_15.Length; r_16++) {
            string line_17 = "";
            for (var c_18 = 0; c_18 < grid_15[(int)(r_16)].Length; c_18++) {
                line_17 = (line_17 + _fmtStr(grid_15[(int)(r_16)][(int)(c_18)]));
                if ((c_18 < (grid_15[(int)(r_16)].Length - 1))) {
                    line_17 = (line_17 + " ");
                }
            }
            Console.WriteLine(Program._fmtTop(line_17));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_22 < examples_21.Length)) {
                Console.WriteLine(Program._fmtTop("\nExample grid:\n===================="));
                Program.print_solution(examples_21[(int)(idx_22)]);
                Console.WriteLine(Program._fmtTop("\nExample grid solution:"));
                if (Program.sudoku(examples_21[(int)(idx_22)])) {
                    Program.print_solution(examples_21[(int)(idx_22)]);
                } else {
                    Console.WriteLine(Program._fmtTop("Cannot find a solution."));
                }
                idx_22 = (idx_22 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
