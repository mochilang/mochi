// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[][] puzzle_27 = new string[][]{new string[]{"", "", ""}, new string[]{"", "", ""}, new string[]{"", "", ""}};
    static string[] words_28 = new string[]{"cat", "dog", "car"};
    static bool[] used_29 = new bool[]{false, false, false};
    public static bool is_valid(string[][] puzzle_0, string word_1, long row_2, long col_3, bool vertical_4) {
        for (var i_5 = 0; i_5 < word_1.Length; i_5++) {
            if (vertical_4) {
                if ((((row_2 + i_5) >= puzzle_0.Length) || (puzzle_0[(int)((row_2 + i_5))][(int)(col_3)] != ""))) {
                    return false;
                }
            } else if ((((col_3 + i_5) >= puzzle_0[(int)(0)].Length) || (puzzle_0[(int)(row_2)][(int)((col_3 + i_5))] != ""))) {
                return false;
            }
        };
        return true;
    }

    public static void place_word(string[][] puzzle_6, string word_7, long row_8, long col_9, bool vertical_10) {
        for (var i_11 = 0; i_11 < word_7.Length; i_11++) {
            string ch_12 = word_7.Substring((int)(i_11), 1);
            if (vertical_10) {
                puzzle_6[(int)((row_8 + i_11))][col_9] = ch_12;
            } else {
                puzzle_6[(int)(row_8)][(col_9 + i_11)] = ch_12;
            }
        };
    }

    public static void remove_word(string[][] puzzle_13, string word_14, long row_15, long col_16, bool vertical_17) {
        for (var i_18 = 0; i_18 < word_14.Length; i_18++) {
            if (vertical_17) {
                puzzle_13[(int)((row_15 + i_18))][col_16] = "";
            } else {
                puzzle_13[(int)(row_15)][(col_16 + i_18)] = "";
            }
        };
    }

    public static bool solve_crossword(string[][] puzzle_19, string[] words_20, bool[] used_21) {
        for (var row_22 = 0; row_22 < puzzle_19.Length; row_22++) {
            for (var col_23 = 0; col_23 < puzzle_19[(int)(0)].Length; col_23++) {
                if ((puzzle_19[(int)(row_22)][(int)(col_23)] == "")) {
                    for (var i_24 = 0; i_24 < words_20.Length; i_24++) {
                        if ((!used_21[(int)(i_24)])) {
                            string word_25 = words_20[(int)(i_24)];
                            foreach (bool vertical_26 in new bool[]{true, false}) {
                                if (Program.is_valid(puzzle_19, word_25, row_22, col_23, vertical_26)) {
                                    Program.place_word(puzzle_19, word_25, row_22, col_23, vertical_26);
                                    used_21[i_24] = true;
                                    if (Program.solve_crossword(puzzle_19, words_20, used_21)) {
                                        return true;
                                    }
                                    used_21[i_24] = false;
                                    Program.remove_word(puzzle_19, word_25, row_22, col_23, vertical_26);
                                }
                            }
                        }
                    }
                    return false;
                }
            }
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if (Program.solve_crossword(puzzle_27, words_28, used_29)) {
                Console.WriteLine(Program._fmtTop("Solution found:"));
                foreach (string[] row_30 in puzzle_27) {
                    Console.WriteLine(Program._fmtTop(row_30));
                }
            } else {
                Console.WriteLine(Program._fmtTop("No solution found:"));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
