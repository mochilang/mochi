// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string alphabet_0 = "abcdefghijklmnopqrstuvwxyz";
    public static bool contains(string[] xs_1, string x_2) {
        long i_3 = 0;
        while ((i_3 < xs_1.Length)) {
            if ((xs_1[(int)(i_3)] == x_2)) {
                return true;
            }
            i_3 = (i_3 + 1);
        };
        return false;
    }

    public static string[] remove_item(string[] xs_4, string x_5) {
        string[] res_6 = new string[]{};
        bool removed_7 = false;
        long i_8 = 0;
        while ((i_8 < xs_4.Length)) {
            if (((!removed_7) && (xs_4[(int)(i_8)] == x_5))) {
                removed_7 = true;
            } else {
                res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, xs_4[(int)(i_8)])));
            }
            i_8 = (i_8 + 1);
        };
        return res_6;
    }

    public static string[] word_ladder(string current_9, string[] path_10, string target_11, string[] words_12) {
        if ((current_9 == target_11)) {
            return path_10;
        };
        long i_13 = 0;
        while ((i_13 < current_9.Length)) {
            long j_14 = 0;
            while ((j_14 < alphabet_0.Length)) {
                string c_15 = _substr(alphabet_0, j_14, (j_14 + 1));
                string transformed_16 = ((_substr(current_9, 0, i_13) + c_15) + _substr(current_9, (i_13 + 1), current_9.Length));
                if (Program.contains(words_12, transformed_16)) {
                    string[] new_words_17 = Program.remove_item(words_12, transformed_16);
                    string[] new_path_18 = (Enumerable.ToArray(Enumerable.Append(path_10, transformed_16)));
                    string[] result_19 = Program.word_ladder(transformed_16, new_path_18, target_11, new_words_17);
                    if ((result_19.Length > 0)) {
                        return result_19;
                    }
                }
                j_14 = (j_14 + 1);
            }
            i_13 = (i_13 + 1);
        };
        return new string[]{};
    }

    public static void main() {
        string[] w1_20 = new string[]{"hot", "dot", "dog", "lot", "log", "cog"};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.word_ladder("hit", new string[]{"hit"}, "cog", w1_20))));
        string[] w2_21 = new string[]{"hot", "dot", "dog", "lot", "log"};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.word_ladder("hit", new string[]{"hit"}, "cog", w2_21))));
        string[] w3_22 = new string[]{"load", "goad", "gold", "lead", "lord"};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.word_ladder("lead", new string[]{"lead"}, "gold", w3_22))));
        string[] w4_23 = new string[]{"came", "cage", "code", "cade", "gave"};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.word_ladder("game", new string[]{"game"}, "code", w4_23))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
