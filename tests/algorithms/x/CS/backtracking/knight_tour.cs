// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] board_29 = Program.open_knight_tour(1);
    public static long[][] get_valid_pos(long[] position_0, long n_1) {
        long y_2 = position_0[(int)(0)];
        long x_3 = position_0[(int)(1)];
        long[][] positions_4 = new long[][]{new long[]{(y_2 + 1), (x_3 + 2)}, new long[]{(y_2 - 1), (x_3 + 2)}, new long[]{(y_2 + 1), (x_3 - 2)}, new long[]{(y_2 - 1), (x_3 - 2)}, new long[]{(y_2 + 2), (x_3 + 1)}, new long[]{(y_2 + 2), (x_3 - 1)}, new long[]{(y_2 - 2), (x_3 + 1)}, new long[]{(y_2 - 2), (x_3 - 1)}};
        long[][] permissible_5 = new long[][]{};
        for (var idx_6 = 0; idx_6 < positions_4.Length; idx_6++) {
            long[] inner_7 = positions_4[(int)(idx_6)];
            long y_test_8 = inner_7[(int)(0)];
            long x_test_9 = inner_7[(int)(1)];
            if (((((y_test_8 >= 0) && (y_test_8 < n_1)) && (x_test_9 >= 0)) && (x_test_9 < n_1))) {
                permissible_5 = (Enumerable.ToArray(Enumerable.Append(permissible_5, inner_7)));
            }
        };
        return permissible_5;
    }

    public static bool is_complete(long[][] board_10) {
        for (var i_11 = 0; i_11 < board_10.Length; i_11++) {
            long[] row_12 = board_10[(int)(i_11)];
            for (var j_13 = 0; j_13 < row_12.Length; j_13++) {
                if ((row_12[(int)(j_13)] == 0)) {
                    return false;
                }
            }
        };
        return true;
    }

    public static bool open_knight_tour_helper(long[][] board_14, long[] pos_15, long curr_16) {
        if (Program.is_complete(board_14)) {
            return true;
        };
        long[][] moves_17 = Program.get_valid_pos(pos_15, board_14.Length);
        for (var i_18 = 0; i_18 < moves_17.Length; i_18++) {
            long[] position_19 = moves_17[(int)(i_18)];
            long y_20 = position_19[(int)(0)];
            long x_21 = position_19[(int)(1)];
            if ((board_14[(int)(y_20)][(int)(x_21)] == 0)) {
                board_14[(int)(y_20)][x_21] = (curr_16 + 1);
                if (Program.open_knight_tour_helper(board_14, position_19, (curr_16 + 1))) {
                    return true;
                }
                board_14[(int)(y_20)][x_21] = 0;
            }
        };
        return false;
    }

    public static long[][] open_knight_tour(long n_22) {
        long[][] board_23 = new long[][]{};
        for (var i_24 = 0; i_24 < n_22; i_24++) {
            long[] row_25 = new long[]{};
            for (var j_26 = 0; j_26 < n_22; j_26++) {
                row_25 = (Enumerable.ToArray(Enumerable.Append(row_25, 0)));
            }
            board_23 = (Enumerable.ToArray(Enumerable.Append(board_23, row_25)));
        };
        for (var i_27 = 0; i_27 < n_22; i_27++) {
            for (var j_28 = 0; j_28 < n_22; j_28++) {
                board_23[(int)(i_27)][j_28] = 1;
                if (Program.open_knight_tour_helper(board_23, new long[]{i_27, j_28}, 1)) {
                    return board_23;
                }
                board_23[(int)(i_27)][j_28] = 0;
            }
        };
        Console.WriteLine(Program._fmtTop(("Open Knight Tour cannot be performed on a board of size " + _fmtStr(n_22))));
        return board_23;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(board_29[(int)(0)][(int)(0)]));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
