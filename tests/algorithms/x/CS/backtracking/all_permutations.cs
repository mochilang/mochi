// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static object[] sequence_17 = new object[]{3, 1, 2, 4};
    public static bool[] repeat_bool(long times_0) {
        bool[] res_1 = new bool[]{};
        long i_2 = 0;
        while ((i_2 < times_0)) {
            res_1 = (Enumerable.ToArray(Enumerable.Append(res_1, false)));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static bool[] set_bool(bool[] xs_3, long idx_4, bool value_5) {
        bool[] res_6 = new bool[]{};
        long i_7 = 0;
        while ((i_7 < xs_3.Length)) {
            if ((i_7 == idx_4)) {
                res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, value_5)));
            } else {
                res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, xs_3[(int)(i_7)])));
            }
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static void create_state_space_tree(object[] sequence_8, object[] current_9, long index_10, bool[] used_11) {
        if ((index_10 == sequence_8.Length)) {
            Console.WriteLine(Program._fmtTop(_fmt(current_9)));
            return;
        };
        long i_12 = 0;
        while ((i_12 < sequence_8.Length)) {
            if ((!used_11[(int)(i_12)])) {
                object[] next_current_13 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(current_9.Cast<object>()), (object)((dynamic)sequence_8)[i_12])));
                bool[] next_used_14 = Program.set_bool(used_11, i_12, true);
                Program.create_state_space_tree(Enumerable.ToArray(sequence_8.Cast<object>()), Enumerable.ToArray(next_current_13.Cast<object>()), (index_10 + 1), next_used_14);
            }
            i_12 = (i_12 + 1);
        };
    }

    public static void generate_all_permutations(object[] sequence_15) {
        bool[] used_16 = Program.repeat_bool(sequence_15.Length);
        Program.create_state_space_tree(Enumerable.ToArray(sequence_15.Cast<object>()), Enumerable.ToArray((new object[]{} as object[]) ?? new object[]{}.Cast<object>()), 0, used_16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.generate_all_permutations(Enumerable.ToArray(sequence_17.Cast<object>()));
            object[] sequence_2_18 = new object[]{"A", "B", "C"};
            Program.generate_all_permutations(Enumerable.ToArray(sequence_2_18.Cast<object>()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
