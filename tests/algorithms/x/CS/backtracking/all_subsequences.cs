// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static object[] seq_5 = new object[]{1, 2, 3};
    public static void create_state_space_tree(object[] sequence_0, object[] current_1, long index_2) {
        if ((index_2 == sequence_0.Length)) {
            Console.WriteLine(Program._fmtTop(current_1));
            return;
        };
        Program.create_state_space_tree(Enumerable.ToArray(sequence_0.Cast<object>()), Enumerable.ToArray(current_1.Cast<object>()), (index_2 + 1));
        object[] with_elem_3 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(current_1.Cast<object>()), (object)((dynamic)sequence_0)[index_2])));
        Program.create_state_space_tree(Enumerable.ToArray(sequence_0.Cast<object>()), Enumerable.ToArray(with_elem_3.Cast<object>()), (index_2 + 1));
    }

    public static void generate_all_subsequences(object[] sequence_4) {
        Program.create_state_space_tree(Enumerable.ToArray(sequence_4.Cast<object>()), Enumerable.ToArray((new object[]{} as object[]) ?? new object[]{}.Cast<object>()), 0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.generate_all_subsequences(Enumerable.ToArray(seq_5.Cast<object>()));
            object[] seq2_6 = new object[]{"A", "B", "C"};
            Program.generate_all_subsequences(Enumerable.ToArray(seq2_6.Cast<object>()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
