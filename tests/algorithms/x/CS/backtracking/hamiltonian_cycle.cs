// Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    public static bool valid_connection(long[][] graph_0, long next_ver_1, long curr_ind_2, long[] path_3) {
        if ((graph_0[(int)(path_3[(int)((curr_ind_2 - 1))])][(int)(next_ver_1)] == 0)) {
            return false;
        };
        foreach (long v_4 in path_3) {
            if ((v_4 == next_ver_1)) {
                return false;
            }
        };
        return true;
    }

    public static bool util_hamilton_cycle(long[][] graph_5, long[] path_6, long curr_ind_7) {
        if ((curr_ind_7 == graph_5.Length)) {
            return (graph_5[(int)(path_6[(int)((curr_ind_7 - 1))])][(int)(path_6[(int)(0)])] == 1);
        };
        long next_ver_8 = 0;
        while ((next_ver_8 < graph_5.Length)) {
            if (Program.valid_connection(graph_5, next_ver_8, curr_ind_7, path_6)) {
                path_6[curr_ind_7] = next_ver_8;
                if (Program.util_hamilton_cycle(graph_5, path_6, (curr_ind_7 + 1))) {
                    return true;
                }
                path_6[curr_ind_7] = -1;
            }
            next_ver_8 = (next_ver_8 + 1);
        };
        return false;
    }

    public static long[] hamilton_cycle(long[][] graph_9, long start_index_10) {
        long[] path_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < (graph_9.Length + 1))) {
            path_11[i_12] = -1;
            i_12 = (i_12 + 1);
        };
        path_11[0] = start_index_10;
        long last_13 = (path_11.Length - 1);
        path_11[last_13] = start_index_10;
        if (Program.util_hamilton_cycle(graph_9, path_11, 1)) {
            return path_11;
        };
        return new long[]{};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
