// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] maze_21 = new long[][]{new long[]{0, 1, 0, 1, 1}, new long[]{0, 0, 0, 0, 0}, new long[]{1, 0, 1, 0, 1}, new long[]{0, 0, 1, 0, 0}, new long[]{1, 0, 0, 1, 0}};
    static long n_22 = (maze_21.Length - 1);
    public static bool run_maze(long[][] maze_0, long i_1, long j_2, long dr_3, long dc_4, long[][] sol_5) {
        int size_6 = maze_0.Length;
        if ((((i_1 == dr_3) && (j_2 == dc_4)) && (maze_0[(int)(i_1)][(int)(j_2)] == 0))) {
            sol_5[(int)(i_1)][j_2] = 0;
            return true;
        };
        bool lower_flag_7 = ((i_1 >= 0) && (j_2 >= 0));
        bool upper_flag_8 = ((i_1 < size_6) && (j_2 < size_6));
        if ((lower_flag_7 && upper_flag_8)) {
            bool block_flag_9 = ((sol_5[(int)(i_1)][(int)(j_2)] == 1) && (maze_0[(int)(i_1)][(int)(j_2)] == 0));
            if (block_flag_9) {
                sol_5[(int)(i_1)][j_2] = 0;
                if ((((Program.run_maze(maze_0, (i_1 + 1), j_2, dr_3, dc_4, sol_5) || Program.run_maze(maze_0, i_1, (j_2 + 1), dr_3, dc_4, sol_5)) || Program.run_maze(maze_0, (i_1 - 1), j_2, dr_3, dc_4, sol_5)) || Program.run_maze(maze_0, i_1, (j_2 - 1), dr_3, dc_4, sol_5))) {
                    return true;
                }
                sol_5[(int)(i_1)][j_2] = 1;
                return false;
            }
        };
        return false;
    }

    public static long[][] solve_maze(long[][] maze_10, long sr_11, long sc_12, long dr_13, long dc_14) {
        int size_15 = maze_10.Length;
        if ((!((((((((0 <= sr_11) && (sr_11 < size_15)) && (0 <= sc_12)) && (sc_12 < size_15)) && (0 <= dr_13)) && (dr_13 < size_15)) && (0 <= dc_14)) && (dc_14 < size_15)))) {
            throw new Exception("Invalid source or destination coordinates");
        };
        long[][] sol_16 = new long[][]{};
        long i_17 = 0;
        while ((i_17 < size_15)) {
            long[] row_18 = new long[]{};
            long j_19 = 0;
            while ((j_19 < size_15)) {
                row_18 = (Enumerable.ToArray(Enumerable.Append(row_18, 1)));
                j_19 = (j_19 + 1);
            }
            sol_16 = (Enumerable.ToArray(Enumerable.Append(sol_16, row_18)));
            i_17 = (i_17 + 1);
        };
        bool solved_20 = Program.run_maze(maze_10, sr_11, sc_12, dr_13, dc_14, sol_16);
        if (solved_20) {
            return sol_16;
        } else {
            throw new Exception("No solution exists!");
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.solve_maze(maze_21, 0, 0, n_22, n_22))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
