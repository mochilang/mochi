// Generated by Mochi 0.10.59 on 2025-08-06 17:33 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static long sum_list(long[] nums_0) {
        long s_1 = 0;
        foreach (long n_2 in nums_0) {
            s_1 = (s_1 + n_2);
        };
        return s_1;
    }

    public static long[][] create_state_space_tree(long[] nums_3, long max_sum_4, long num_index_5, long[] path_6, long curr_sum_7, long remaining_sum_8) {
        long[][] result_9 = new long[][]{};
        if (((curr_sum_7 > max_sum_4) || ((curr_sum_7 + remaining_sum_8) < max_sum_4))) {
            return result_9;
        };
        if ((curr_sum_7 == max_sum_4)) {
            result_9 = (Enumerable.ToArray(Enumerable.Append(result_9, path_6)));
            return result_9;
        };
        long index_10 = num_index_5;
        while ((index_10 < nums_3.Length)) {
            long value_11 = nums_3[(int)(index_10)];
            long[][] subres_12 = Program.create_state_space_tree(nums_3, max_sum_4, (index_10 + 1), (Enumerable.ToArray(Enumerable.Append(path_6, value_11))), (curr_sum_7 + value_11), (remaining_sum_8 - value_11));
            long j_13 = 0;
            while ((j_13 < subres_12.Length)) {
                result_9 = (Enumerable.ToArray(Enumerable.Append(result_9, subres_12[(int)(j_13)])));
                j_13 = (j_13 + 1);
            }
            index_10 = (index_10 + 1);
        };
        return result_9;
    }

    public static long[][] generate_sum_of_subsets_solutions(long[] nums_14, long max_sum_15) {
        long total_16 = Program.sum_list(nums_14);
        return Program.create_state_space_tree(nums_14, max_sum_15, 0, new long[]{}, 0, total_16);
    }

    public static void main() {
        Console.WriteLine(JsonSerializer.Serialize(Program.generate_sum_of_subsets_solutions(new long[]{3, 34, 4, 12, 5, 2}, 9)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
