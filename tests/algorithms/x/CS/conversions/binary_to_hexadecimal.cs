// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string strip_spaces(string s_0) {
        long start_1 = 0;
        long end_2 = (s_0.Length - 1);
        while (((start_1 < s_0.Length) && (s_0.Substring((int)(start_1), 1) == " "))) {
            start_1 = (start_1 + 1);
        };
        while (((end_2 >= start_1) && (s_0.Substring((int)(end_2), 1) == " "))) {
            end_2 = (end_2 - 1);
        };
        string res_3 = "";
        long i_4 = start_1;
        while ((i_4 <= end_2)) {
            res_3 = (res_3 + s_0.Substring((int)(i_4), 1));
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static string repeat_char(string ch_5, long count_6) {
        string res_7 = "";
        long i_8 = 0;
        while ((i_8 < count_6)) {
            res_7 = (res_7 + ch_5);
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static string slice(string s_9, long start_10, long end_11) {
        string res_12 = "";
        long i_13 = start_10;
        while ((i_13 < end_11)) {
            res_12 = (res_12 + s_9.Substring((int)(i_13), 1));
            i_13 = (i_13 + 1);
        };
        return res_12;
    }

    public static long bits_to_int(string bits_14) {
        long value_15 = 0;
        long i_16 = 0;
        while ((i_16 < bits_14.Length)) {
            value_15 = (value_15 * 2);
            if ((bits_14.Substring((int)(i_16), 1) == "1")) {
                value_15 = (value_15 + 1);
            }
            i_16 = (i_16 + 1);
        };
        return value_15;
    }

    public static string bin_to_hexadecimal(string binary_str_17) {
        string s_18 = Program.strip_spaces(binary_str_17);
        if ((s_18.Length == 0)) {
            throw new Exception("Empty string was passed to the function");
        };
        bool is_negative_19 = false;
        if ((s_18.Substring((int)(0), 1) == "-")) {
            is_negative_19 = true;
            s_18 = Program.slice(s_18, 1, s_18.Length);
        };
        long i_20 = 0;
        while ((i_20 < s_18.Length)) {
            string c_21 = s_18.Substring((int)(i_20), 1);
            if (((c_21 != "0") && (c_21 != "1"))) {
                throw new Exception("Non-binary value was passed to the function");
            }
            i_20 = (i_20 + 1);
        };
        long groups_22 = ((s_18.Length / 4) + 1);
        long pad_len_23 = ((groups_22 * 4) - s_18.Length);
        s_18 = (Program.repeat_char("0", pad_len_23) + s_18);
        string digits_24 = "0123456789abcdef";
        string res_25 = "0x";
        long j_26 = 0;
        while ((j_26 < s_18.Length)) {
            string chunk_27 = Program.slice(s_18, j_26, (j_26 + 4));
            long val_28 = Program.bits_to_int(chunk_27);
            res_25 = (res_25 + digits_24.Substring((int)(val_28), 1));
            j_26 = (j_26 + 4);
        };
        if (is_negative_19) {
            return ("-" + res_25);
        };
        return res_25;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.bin_to_hexadecimal("101011111")));
            Console.WriteLine(Program._fmtTop(Program.bin_to_hexadecimal(" 1010   ")));
            Console.WriteLine(Program._fmtTop(Program.bin_to_hexadecimal("-11101")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
