// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] nums_10 = new string[]{"030", "100", "247", "235", "007"};
    static long t_11 = 0;
    public static string octal_to_hex(string octal_0) {
        string s_1 = octal_0;
        if ((((s_1.Length >= 2) && (s_1.Substring((int)(0), 1) == "0")) && (s_1.Substring((int)(1), 1) == "o"))) {
            s_1 = _substr(s_1, 2, s_1.Length);
        };
        if ((s_1.Length == 0)) {
            throw new Exception("Empty string was passed to the function");
        };
        long j_2 = 0;
        while ((j_2 < s_1.Length)) {
            string c_3 = s_1.Substring((int)(j_2), 1);
            if (((((((((c_3 != "0") && (c_3 != "1")) && (c_3 != "2")) && (c_3 != "3")) && (c_3 != "4")) && (c_3 != "5")) && (c_3 != "6")) && (c_3 != "7"))) {
                throw new Exception("Not a Valid Octal Number");
            }
            j_2 = (j_2 + 1);
        };
        long decimal_4 = 0;
        long k_5 = 0;
        while ((k_5 < s_1.Length)) {
            long d_6 = Convert.ToInt64(s_1.Substring((int)(k_5), 1));
            decimal_4 = ((decimal_4 * 8) + d_6);
            k_5 = (k_5 + 1);
        };
        string hex_chars_7 = "0123456789ABCDEF";
        if ((decimal_4 == 0)) {
            return "0x";
        };
        string hex_8 = "";
        while ((decimal_4 > 0)) {
            long idx_9 = _mod(decimal_4, 16);
            hex_8 = (hex_chars_7.Substring((int)(idx_9), 1) + hex_8);
            decimal_4 = (decimal_4 / 16);
        };
        return ("0x" + hex_8);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((t_11 < nums_10.Length)) {
                string num_12 = nums_10[(int)(t_11)];
                Console.WriteLine(Program._fmtTop(Program.octal_to_hex(num_12)));
                t_11 = (t_11 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
