// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string strip(string s_0) {
        long start_1 = 0;
        long end_2 = s_0.Length;
        while (((start_1 < end_2) && (_substr(s_0, start_1, (start_1 + 1)) == " "))) {
            start_1 = (start_1 + 1);
        };
        while (((end_2 > start_1) && (_substr(s_0, (end_2 - 1), end_2) == " "))) {
            end_2 = (end_2 - 1);
        };
        return _substr(s_0, start_1, end_2);
    }

    public static long hex_digit_value(string c_3) {
        if ((c_3 == "0")) {
            return 0;
        };
        if ((c_3 == "1")) {
            return 1;
        };
        if ((c_3 == "2")) {
            return 2;
        };
        if ((c_3 == "3")) {
            return 3;
        };
        if ((c_3 == "4")) {
            return 4;
        };
        if ((c_3 == "5")) {
            return 5;
        };
        if ((c_3 == "6")) {
            return 6;
        };
        if ((c_3 == "7")) {
            return 7;
        };
        if ((c_3 == "8")) {
            return 8;
        };
        if ((c_3 == "9")) {
            return 9;
        };
        if (((c_3 == "a") || (c_3 == "A"))) {
            return 10;
        };
        if (((c_3 == "b") || (c_3 == "B"))) {
            return 11;
        };
        if (((c_3 == "c") || (c_3 == "C"))) {
            return 12;
        };
        if (((c_3 == "d") || (c_3 == "D"))) {
            return 13;
        };
        if (((c_3 == "e") || (c_3 == "E"))) {
            return 14;
        };
        if (((c_3 == "f") || (c_3 == "F"))) {
            return 15;
        };
        Console.WriteLine(Program._fmtTop("Non-hexadecimal value was passed to the function"));
        return 0;
    }

    public static long hex_to_decimal(string hex_string_4) {
        string s_5 = Program.strip(hex_string_4);
        if ((s_5.Length == 0)) {
            Console.WriteLine(Program._fmtTop("Empty string was passed to the function"));
            return 0;
        };
        bool is_negative_6 = false;
        if ((_substr(s_5, 0, 1) == "-")) {
            is_negative_6 = true;
            s_5 = _substr(s_5, 1, s_5.Length);
        };
        long decimal_number_7 = 0;
        long i_8 = 0;
        while ((i_8 < s_5.Length)) {
            string c_9 = _substr(s_5, i_8, (i_8 + 1));
            long value_10 = Program.hex_digit_value(c_9);
            decimal_number_7 = ((16 * decimal_number_7) + value_10);
            i_8 = (i_8 + 1);
        };
        if (is_negative_6) {
            return -decimal_number_7;
        };
        return decimal_number_7;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_decimal("a"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_decimal("12f"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_decimal("   12f   "))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_decimal("FfFf"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_decimal("-Ff"))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
