// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static void panic(string msg_0) {
        Console.WriteLine(Program._fmtTop(msg_0));
    }

    public static string trim_spaces(string s_1) {
        long start_2 = 0;
        long end_3 = s_1.Length;
        while (((start_2 < end_3) && (_substr(s_1, start_2, (start_2 + 1)) == " "))) {
            start_2 = (start_2 + 1);
        };
        while (((end_3 > start_2) && (_substr(s_1, (end_3 - 1), end_3) == " "))) {
            end_3 = (end_3 - 1);
        };
        return _substr(s_1, start_2, end_3);
    }

    public static long hex_digit_value(string ch_4) {
        if ((ch_4 == "0")) {
            return 0;
        };
        if ((ch_4 == "1")) {
            return 1;
        };
        if ((ch_4 == "2")) {
            return 2;
        };
        if ((ch_4 == "3")) {
            return 3;
        };
        if ((ch_4 == "4")) {
            return 4;
        };
        if ((ch_4 == "5")) {
            return 5;
        };
        if ((ch_4 == "6")) {
            return 6;
        };
        if ((ch_4 == "7")) {
            return 7;
        };
        if ((ch_4 == "8")) {
            return 8;
        };
        if ((ch_4 == "9")) {
            return 9;
        };
        if (((ch_4 == "a") || (ch_4 == "A"))) {
            return 10;
        };
        if (((ch_4 == "b") || (ch_4 == "B"))) {
            return 11;
        };
        if (((ch_4 == "c") || (ch_4 == "C"))) {
            return 12;
        };
        if (((ch_4 == "d") || (ch_4 == "D"))) {
            return 13;
        };
        if (((ch_4 == "e") || (ch_4 == "E"))) {
            return 14;
        };
        if (((ch_4 == "f") || (ch_4 == "F"))) {
            return 15;
        };
        Program.panic("Invalid value was passed to the function");
        return default(long);
    }

    public static long hex_to_bin(string hex_num_5) {
        string trimmed_6 = Program.trim_spaces(hex_num_5);
        if ((trimmed_6.Length == 0)) {
            Program.panic("No value was passed to the function");
        };
        string s_7 = trimmed_6;
        bool is_negative_8 = false;
        if ((_substr(s_7, 0, 1) == "-")) {
            is_negative_8 = true;
            s_7 = _substr(s_7, 1, s_7.Length);
        };
        long int_num_9 = 0;
        long i_10 = 0;
        while ((i_10 < s_7.Length)) {
            string ch_11 = _substr(s_7, i_10, (i_10 + 1));
            long val_12 = Program.hex_digit_value(ch_11);
            int_num_9 = ((int_num_9 * 16) + val_12);
            i_10 = (i_10 + 1);
        };
        string bin_str_13 = "";
        long n_14 = int_num_9;
        if ((n_14 == 0)) {
            bin_str_13 = "0";
        };
        while ((n_14 > 0)) {
            bin_str_13 = (_fmtStr(_mod(n_14, 2)) + bin_str_13);
            n_14 = (n_14 / 2);
        };
        long result_15 = Convert.ToInt64(bin_str_13);
        if (is_negative_8) {
            result_15 = -result_15;
        };
        return result_15;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_bin("AC"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_bin("9A4"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_bin("   12f   "))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_bin("FfFf"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.hex_to_bin("-fFfF"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
