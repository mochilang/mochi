// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long round_int(double x_0) {
        return Convert.ToInt64((x_0 + 0.5));
    }

    public static long[] rgb_to_cmyk(long r_input_1, long g_input_2, long b_input_3) {
        if (((((((r_input_1 < 0) || (r_input_1 >= 256)) || (g_input_2 < 0)) || (g_input_2 >= 256)) || (b_input_3 < 0)) || (b_input_3 >= 256))) {
            throw new Exception("Expected int of the range 0..255");
        };
        double r_4 = (Convert.ToDouble(r_input_1) / 255.0);
        double g_5 = (Convert.ToDouble(g_input_2) / 255.0);
        double b_6 = (Convert.ToDouble(b_input_3) / 255.0);
        double max_val_7 = r_4;
        if ((g_5 > max_val_7)) {
            max_val_7 = g_5;
        };
        if ((b_6 > max_val_7)) {
            max_val_7 = b_6;
        };
        double k_float_8 = (1.0 - max_val_7);
        if ((k_float_8 == 1.0)) {
            return new long[]{0, 0, 0, 100};
        };
        double c_float_9 = ((100.0 * ((1.0 - r_4) - k_float_8)) / (1.0 - k_float_8));
        double m_float_10 = ((100.0 * ((1.0 - g_5) - k_float_8)) / (1.0 - k_float_8));
        double y_float_11 = ((100.0 * ((1.0 - b_6) - k_float_8)) / (1.0 - k_float_8));
        double k_percent_12 = (100.0 * k_float_8);
        long c_13 = Program.round_int(c_float_9);
        long m_14 = Program.round_int(m_float_10);
        long y_15 = Program.round_int(y_float_11);
        long k_16 = Program.round_int(k_percent_12);
        return new long[]{c_13, m_14, y_15, k_16};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.rgb_to_cmyk(255, 255, 255)));
            Console.WriteLine(Program._fmtTop(Program.rgb_to_cmyk(128, 128, 128)));
            Console.WriteLine(Program._fmtTop(Program.rgb_to_cmyk(0, 0, 0)));
            Console.WriteLine(Program._fmtTop(Program.rgb_to_cmyk(255, 0, 0)));
            Console.WriteLine(Program._fmtTop(Program.rgb_to_cmyk(0, 255, 0)));
            Console.WriteLine(Program._fmtTop(Program.rgb_to_cmyk(0, 0, 255)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
