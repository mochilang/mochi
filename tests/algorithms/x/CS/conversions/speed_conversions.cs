// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] units_0 = new string[]{"km/h", "m/s", "mph", "knot"};
    static double[] speed_chart_1 = new double[]{1.0, 3.6, 1.609344, 1.852};
    static double[] speed_chart_inverse_2 = new double[]{1.0, 0.277777778, 0.621371192, 0.539956803};
    public static long index_of(string[] arr_3, string value_4) {
        long i_5 = 0;
        while ((i_5 < arr_3.Length)) {
            if ((arr_3[(int)(i_5)] == value_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    public static string units_string(string[] arr_6) {
        string s_7 = "";
        long i_8 = 0;
        while ((i_8 < arr_6.Length)) {
            if ((i_8 > 0)) {
                s_7 = (s_7 + ", ");
            }
            s_7 = (s_7 + arr_6[(int)(i_8)]);
            i_8 = (i_8 + 1);
        };
        return s_7;
    }

    public static double round3(double x_9) {
        double y_10 = ((x_9 * 1000.0) + 0.5);
        long z_11 = Convert.ToInt64(y_10);
        double zf_12 = Convert.ToDouble(z_11);
        return (zf_12 / 1000.0);
    }

    public static double convert_speed(double speed_13, string unit_from_14, string unit_to_15) {
        long from_index_16 = Program.index_of(units_0, unit_from_14);
        long to_index_17 = Program.index_of(units_0, unit_to_15);
        if (((from_index_16 < 0) || (to_index_17 < 0))) {
            string msg_18 = ((((("Incorrect 'from_type' or 'to_type' value: " + unit_from_14) + ", ") + unit_to_15) + "\nValid values are: ") + Program.units_string(units_0));
            throw new Exception(msg_18);
        };
        double result_19 = ((speed_13 * speed_chart_1[(int)(from_index_16)]) * speed_chart_inverse_2[(int)(to_index_17)]);
        double r_20 = Program.round3(result_19);
        return r_20;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "km/h", "m/s"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "km/h", "mph"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "km/h", "knot"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "m/s", "km/h"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "m/s", "mph"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "m/s", "knot"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "mph", "km/h"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "mph", "m/s"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "mph", "knot"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "knot", "km/h"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "knot", "m/s"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_speed(100.0, "knot", "mph"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
