// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string rstrip_s(string s_0) {
        if (((s_0.Length > 0) && (s_0.Substring((int)((s_0.Length - 1)), 1) == "s"))) {
            return _substr(s_0, 0, (s_0.Length - 1));
        };
        return s_0;
    }

    public static string normalize_alias(string u_1) {
        if ((u_1 == "millimeter")) {
            return "mm";
        };
        if ((u_1 == "centimeter")) {
            return "cm";
        };
        if ((u_1 == "meter")) {
            return "m";
        };
        if ((u_1 == "kilometer")) {
            return "km";
        };
        if ((u_1 == "inch")) {
            return "in";
        };
        if ((u_1 == "inche")) {
            return "in";
        };
        if ((u_1 == "feet")) {
            return "ft";
        };
        if ((u_1 == "foot")) {
            return "ft";
        };
        if ((u_1 == "yard")) {
            return "yd";
        };
        if ((u_1 == "mile")) {
            return "mi";
        };
        return u_1;
    }

    public static bool has_unit(string u_2) {
        return ((((((((u_2 == "mm") || (u_2 == "cm")) || (u_2 == "m")) || (u_2 == "km")) || (u_2 == "in")) || (u_2 == "ft")) || (u_2 == "yd")) || (u_2 == "mi"));
    }

    public static double from_factor(string u_3) {
        if ((u_3 == "mm")) {
            return 0.001;
        };
        if ((u_3 == "cm")) {
            return 0.01;
        };
        if ((u_3 == "m")) {
            return 1.0;
        };
        if ((u_3 == "km")) {
            return 1000.0;
        };
        if ((u_3 == "in")) {
            return 0.0254;
        };
        if ((u_3 == "ft")) {
            return 0.3048;
        };
        if ((u_3 == "yd")) {
            return 0.9144;
        };
        if ((u_3 == "mi")) {
            return 1609.34;
        };
        return 0.0;
    }

    public static double to_factor(string u_4) {
        if ((u_4 == "mm")) {
            return 1000.0;
        };
        if ((u_4 == "cm")) {
            return 100.0;
        };
        if ((u_4 == "m")) {
            return 1.0;
        };
        if ((u_4 == "km")) {
            return 0.001;
        };
        if ((u_4 == "in")) {
            return 39.3701;
        };
        if ((u_4 == "ft")) {
            return 3.28084;
        };
        if ((u_4 == "yd")) {
            return 1.09361;
        };
        if ((u_4 == "mi")) {
            return 0.000621371;
        };
        return 0.0;
    }

    public static double length_conversion(double value_5, string from_type_6, string to_type_7) {
        string new_from_8 = Program.normalize_alias(Program.rstrip_s(from_type_6.ToLower()));
        string new_to_9 = Program.normalize_alias(Program.rstrip_s(to_type_7.ToLower()));
        if ((!Program.has_unit(new_from_8))) {
            throw new Exception((("Invalid 'from_type' value: '" + from_type_6) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"));
        };
        if ((!Program.has_unit(new_to_9))) {
            throw new Exception((("Invalid 'to_type' value: '" + to_type_7) + "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"));
        };
        return ((value_5 * Program.from_factor(new_from_8)) * Program.to_factor(new_to_9));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.length_conversion(4.0, "METER", "FEET")));
            Console.WriteLine(Program._fmtTop(Program.length_conversion(1.0, "kilometer", "inch")));
            Console.WriteLine(Program._fmtTop(Program.length_conversion(2.0, "feet", "meter")));
            Console.WriteLine(Program._fmtTop(Program.length_conversion(2.0, "centimeter", "millimeter")));
            Console.WriteLine(Program._fmtTop(Program.length_conversion(4.0, "yard", "kilometer")));
            Console.WriteLine(Program._fmtTop(Program.length_conversion(3.0, "foot", "inch")));
            Console.WriteLine(Program._fmtTop(Program.length_conversion(3.0, "mm", "in")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
