// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string trim(string s_0) {
        long start_1 = 0;
        while ((start_1 < s_0.Length)) {
            string ch_2 = _substr(s_0, start_1, (start_1 + 1));
            if (((((ch_2 != " ") && (ch_2 != "\n")) && (ch_2 != "\t")) && (ch_2 != "\r"))) {
                break;
            }
            start_1 = (start_1 + 1);
        };
        long end_3 = s_0.Length;
        while ((end_3 > start_1)) {
            string ch_4 = _substr(s_0, (end_3 - 1), end_3);
            if (((((ch_4 != " ") && (ch_4 != "\n")) && (ch_4 != "\t")) && (ch_4 != "\r"))) {
                break;
            }
            end_3 = (end_3 - 1);
        };
        return _substr(s_0, start_1, end_3);
    }

    public static long bin_to_decimal(string bin_string_5) {
        string trimmed_6 = Program.trim(bin_string_5);
        if ((trimmed_6 == "")) {
            throw new Exception("Empty string was passed to the function");
        };
        bool is_negative_7 = false;
        string s_8 = trimmed_6;
        if ((_substr(s_8, 0, 1) == "-")) {
            is_negative_7 = true;
            s_8 = _substr(s_8, 1, s_8.Length);
        };
        long i_9 = 0;
        while ((i_9 < s_8.Length)) {
            string c_10 = _substr(s_8, i_9, (i_9 + 1));
            if (((c_10 != "0") && (c_10 != "1"))) {
                throw new Exception("Non-binary value was passed to the function");
            }
            i_9 = (i_9 + 1);
        };
        long decimal_number_11 = 0;
        i_9 = 0;
        while ((i_9 < s_8.Length)) {
            string c_12 = _substr(s_8, i_9, (i_9 + 1));
            long digit_13 = Convert.ToInt64(c_12);
            decimal_number_11 = ((2 * decimal_number_11) + digit_13);
            i_9 = (i_9 + 1);
        };
        if (is_negative_7) {
            return -decimal_number_11;
        };
        return decimal_number_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bin_to_decimal("101"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bin_to_decimal(" 1010   "))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bin_to_decimal("-11101"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bin_to_decimal("0"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
