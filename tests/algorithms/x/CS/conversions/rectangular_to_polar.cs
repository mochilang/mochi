// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    public static double sqrtApprox(double x_1) {
        double guess_2 = (x_1 / 2.0);
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double atanApprox(double x_4) {
        if ((x_4 > 1.0)) {
            return ((PI_0 / 2.0) - (x_4 / ((x_4 * x_4) + 0.28)));
        };
        if ((x_4 < -1.0)) {
            return ((-PI_0 / 2.0) - (x_4 / ((x_4 * x_4) + 0.28)));
        };
        return (x_4 / (1.0 + ((0.28 * x_4) * x_4)));
    }

    public static double atan2Approx(double y_5, double x_6) {
        if ((x_6 > 0.0)) {
            double r_7 = Program.atanApprox((y_5 / x_6));
            return r_7;
        };
        if ((x_6 < 0.0)) {
            if ((y_5 >= 0.0)) {
                return (Program.atanApprox((y_5 / x_6)) + PI_0);
            }
            return (Program.atanApprox((y_5 / x_6)) - PI_0);
        };
        if ((y_5 > 0.0)) {
            return (PI_0 / 2.0);
        };
        if ((y_5 < 0.0)) {
            return (-PI_0 / 2.0);
        };
        return 0.0;
    }

    public static double deg(double rad_8) {
        return ((rad_8 * 180.0) / PI_0);
    }

    public static double floor(double x_9) {
        long i_10 = Convert.ToInt64(x_9);
        if ((Convert.ToDouble(i_10) > x_9)) {
            i_10 = (i_10 - 1);
        };
        return Convert.ToDouble(i_10);
    }

    public static double pow10(long n_11) {
        double p_12 = 1.0;
        long i_13 = 0;
        while ((i_13 < n_11)) {
            p_12 = (p_12 * 10.0);
            i_13 = (i_13 + 1);
        };
        return p_12;
    }

    public static double round(double x_14, long n_15) {
        double m_16 = Program.pow10(n_15);
        return (Program.floor(((x_14 * m_16) + 0.5)) / m_16);
    }

    public static double[] rectangular_to_polar(double real_17, double img_18) {
        double mod_19 = Program.round(Program.sqrtApprox(((real_17 * real_17) + (img_18 * img_18))), 2);
        double ang_20 = Program.round(Program.deg(Program.atan2Approx(img_18, real_17)), 2);
        return new double[]{mod_19, ang_20};
    }

    public static void show(double real_21, double img_22) {
        double[] r_23 = Program.rectangular_to_polar(real_21, img_22);
        Console.WriteLine(Program._fmtTop(_fmtStr(r_23)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.show(5.0, -5.0);
            Program.show(-1.0, 1.0);
            Program.show(-1.0, -1.0);
            Program.show(1e-10, 1e-10);
            Program.show(-1e-10, 1e-10);
            Program.show(9.75, 5.93);
            Program.show(10000.0, 99999.0);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
