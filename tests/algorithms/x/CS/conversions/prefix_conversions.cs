// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, long> SI_UNITS_0 = new Dictionary<string, long>{{"yotta", 24}, {"zetta", 21}, {"exa", 18}, {"peta", 15}, {"tera", 12}, {"giga", 9}, {"mega", 6}, {"kilo", 3}, {"hecto", 2}, {"deca", 1}, {"deci", -1}, {"centi", -2}, {"milli", -3}, {"micro", -6}, {"nano", -9}, {"pico", -12}, {"femto", -15}, {"atto", -18}, {"zepto", -21}, {"yocto", -24}};
    static Dictionary<string, long> BINARY_UNITS_1 = new Dictionary<string, long>{{"yotta", 8}, {"zetta", 7}, {"exa", 6}, {"peta", 5}, {"tera", 4}, {"giga", 3}, {"mega", 2}, {"kilo", 1}};
    public static double pow(double base_2, long exp_3) {
        if ((exp_3 == 0)) {
            return 1.0;
        };
        long e_4 = exp_3;
        if ((e_4 < 0)) {
            e_4 = -e_4;
        };
        double result_5 = 1.0;
        long i_6 = 0;
        while ((i_6 < e_4)) {
            result_5 = (result_5 * base_2);
            i_6 = (i_6 + 1);
        };
        if ((exp_3 < 0)) {
            return (1.0 / result_5);
        };
        return result_5;
    }

    public static double convert_si_prefix(double known_amount_7, string known_prefix_8, string unknown_prefix_9) {
        string kp_10 = known_prefix_8.ToLower();
        string up_11 = unknown_prefix_9.ToLower();
        if ((!(SI_UNITS_0.ContainsKey(kp_10)))) {
            throw new Exception(("unknown prefix: " + known_prefix_8));
        };
        if ((!(SI_UNITS_0.ContainsKey(up_11)))) {
            throw new Exception(("unknown prefix: " + unknown_prefix_9));
        };
        long diff_12 = ((SI_UNITS_0.ContainsKey(kp_10) ? SI_UNITS_0[kp_10] : 0) - (SI_UNITS_0.ContainsKey(up_11) ? SI_UNITS_0[up_11] : 0));
        return (known_amount_7 * Program.pow(10.0, diff_12));
    }

    public static double convert_binary_prefix(double known_amount_13, string known_prefix_14, string unknown_prefix_15) {
        string kp_16 = known_prefix_14.ToLower();
        string up_17 = unknown_prefix_15.ToLower();
        if ((!(BINARY_UNITS_1.ContainsKey(kp_16)))) {
            throw new Exception(("unknown prefix: " + known_prefix_14));
        };
        if ((!(BINARY_UNITS_1.ContainsKey(up_17)))) {
            throw new Exception(("unknown prefix: " + unknown_prefix_15));
        };
        long diff_18 = (((BINARY_UNITS_1.ContainsKey(kp_16) ? BINARY_UNITS_1[kp_16] : 0) - (BINARY_UNITS_1.ContainsKey(up_17) ? BINARY_UNITS_1[up_17] : 0)) * 10);
        return (known_amount_13 * Program.pow(2.0, diff_18));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_si_prefix(1.0, "giga", "mega"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_si_prefix(1.0, "mega", "giga"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_si_prefix(1.0, "kilo", "kilo"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_binary_prefix(1.0, "giga", "mega"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_binary_prefix(1.0, "mega", "giga"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_binary_prefix(1.0, "kilo", "kilo"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
