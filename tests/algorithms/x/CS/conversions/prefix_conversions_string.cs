// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Prefix {
    public string name;
    public long exp;
    public override string ToString() => $"Prefix {{name = \"{name}\", exp = {exp}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Prefix[] si_positive_0 = new Prefix[]{new Prefix{name = "yotta", exp = 24}, new Prefix{name = "zetta", exp = 21}, new Prefix{name = "exa", exp = 18}, new Prefix{name = "peta", exp = 15}, new Prefix{name = "tera", exp = 12}, new Prefix{name = "giga", exp = 9}, new Prefix{name = "mega", exp = 6}, new Prefix{name = "kilo", exp = 3}, new Prefix{name = "hecto", exp = 2}, new Prefix{name = "deca", exp = 1}};
    static Prefix[] si_negative_1 = new Prefix[]{new Prefix{name = "deci", exp = -1}, new Prefix{name = "centi", exp = -2}, new Prefix{name = "milli", exp = -3}, new Prefix{name = "micro", exp = -6}, new Prefix{name = "nano", exp = -9}, new Prefix{name = "pico", exp = -12}, new Prefix{name = "femto", exp = -15}, new Prefix{name = "atto", exp = -18}, new Prefix{name = "zepto", exp = -21}, new Prefix{name = "yocto", exp = -24}};
    static Prefix[] binary_prefixes_2 = new Prefix[]{new Prefix{name = "yotta", exp = 80}, new Prefix{name = "zetta", exp = 70}, new Prefix{name = "exa", exp = 60}, new Prefix{name = "peta", exp = 50}, new Prefix{name = "tera", exp = 40}, new Prefix{name = "giga", exp = 30}, new Prefix{name = "mega", exp = 20}, new Prefix{name = "kilo", exp = 10}};
    public static double pow(double base_3, long exp_4) {
        double result_5 = 1.0;
        long e_6 = exp_4;
        if ((e_6 < 0)) {
            e_6 = -e_6;
            long i_7 = 0;
            while ((i_7 < e_6)) {
                result_5 = (result_5 * base_3);
                i_7 = (i_7 + 1);
            }
            return (1.0 / result_5);
        };
        long i_8 = 0;
        while ((i_8 < e_6)) {
            result_5 = (result_5 * base_3);
            i_8 = (i_8 + 1);
        };
        return result_5;
    }

    public static string add_si_prefix(double value_9) {
        Prefix[] prefixes_10 = new Prefix[]{};
        if ((value_9 > 0.0)) {
            prefixes_10 = si_positive_0;
        } else {
            prefixes_10 = si_negative_1;
        };
        long i_11 = 0;
        while ((i_11 < prefixes_10.Length)) {
            Prefix p_12 = prefixes_10[(int)(i_11)];
            double num_13 = (value_9 / Program.pow(10.0, p_12.exp));
            if ((num_13 > 1.0)) {
                return ((_fmtStr(num_13) + " ") + p_12.name);
            }
            i_11 = (i_11 + 1);
        };
        return _fmtStr(value_9);
    }

    public static string add_binary_prefix(double value_14) {
        long i_15 = 0;
        while ((i_15 < binary_prefixes_2.Length)) {
            Prefix p_16 = binary_prefixes_2[(int)(i_15)];
            double num_17 = (value_14 / Program.pow(2.0, p_16.exp));
            if ((num_17 > 1.0)) {
                return ((_fmtStr(num_17) + " ") + p_16.name);
            }
            i_15 = (i_15 + 1);
        };
        return _fmtStr(value_14);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.add_si_prefix(10000.0)));
            Console.WriteLine(Program._fmtTop(Program.add_si_prefix(0.005)));
            Console.WriteLine(Program._fmtTop(Program.add_binary_prefix(65536.0)));
            Console.WriteLine(Program._fmtTop(Program.add_binary_prefix(512.0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
