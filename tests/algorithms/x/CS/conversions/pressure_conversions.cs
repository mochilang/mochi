// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class FromTo {
    public double from_factor;
    public double to_factor;
    public override string ToString() => $"FromTo {{from_factor = {from_factor.ToString("0.0")}, to_factor = {to_factor.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, FromTo> PRESSURE_CONVERSION_0 = new Dictionary<string, FromTo>{{"atm", new FromTo{from_factor = 1.0, to_factor = 1.0}}, {"pascal", new FromTo{from_factor = 9.8e-06, to_factor = 101325.0}}, {"bar", new FromTo{from_factor = 0.986923, to_factor = 1.01325}}, {"kilopascal", new FromTo{from_factor = 0.00986923, to_factor = 101.325}}, {"megapascal", new FromTo{from_factor = 9.86923, to_factor = 0.101325}}, {"psi", new FromTo{from_factor = 0.068046, to_factor = 14.6959}}, {"inHg", new FromTo{from_factor = 0.0334211, to_factor = 29.9213}}, {"torr", new FromTo{from_factor = 0.00131579, to_factor = 760.0}}};
    public static double pressure_conversion(double value_1, string from_type_2, string to_type_3) {
        if ((!(PRESSURE_CONVERSION_0.ContainsKey(from_type_2)))) {
            var keys_4 = string.Join(", ", ((System.Collections.IDictionary)PRESSURE_CONVERSION_0).Keys.Cast<string>());
            throw new Exception((((dynamic)((("Invalid 'from_type' value: '" + from_type_2) + "'  Supported values are:\n"))) + ((dynamic)(keys_4))));
        };
        if ((!(PRESSURE_CONVERSION_0.ContainsKey(to_type_3)))) {
            var keys_5 = string.Join(", ", ((System.Collections.IDictionary)PRESSURE_CONVERSION_0).Keys.Cast<string>());
            throw new Exception((((dynamic)((("Invalid 'to_type' value: '" + to_type_3) + ".  Supported values are:\n"))) + ((dynamic)(keys_5))));
        };
        FromTo from_6 = (PRESSURE_CONVERSION_0.ContainsKey(from_type_2) ? PRESSURE_CONVERSION_0[from_type_2] : null);
        FromTo to_7 = (PRESSURE_CONVERSION_0.ContainsKey(to_type_3) ? PRESSURE_CONVERSION_0[to_type_3] : null);
        return ((value_1 * from_6.from_factor) * to_7.to_factor);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(4.0, "atm", "pascal")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(1.0, "pascal", "psi")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(1.0, "bar", "atm")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(3.0, "kilopascal", "bar")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(2.0, "megapascal", "psi")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(4.0, "psi", "torr")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(1.0, "inHg", "atm")));
            Console.WriteLine(Program._fmtTop(Program.pressure_conversion(1.0, "torr", "psi")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
