// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, double> KILOGRAM_CHART_4 = new Dictionary<string, double>{{"kilogram", 1.0}, {"gram", 1000.0}, {"milligram", 1e+06}, {"metric-ton", 0.001}, {"long-ton", 0.0009842073}, {"short-ton", 0.0011023122}, {"pound", 2.2046244202}, {"stone", 0.1574731728}, {"ounce", 35.273990723}, {"carrat", 5000.0}, {"atomic-mass-unit", (6.022136652 * Program.pow10(26))}};
    static Dictionary<string, double> WEIGHT_TYPE_CHART_5 = new Dictionary<string, double>{{"kilogram", 1.0}, {"gram", 0.001}, {"milligram", 1e-06}, {"metric-ton", 1000.0}, {"long-ton", 1016.04608}, {"short-ton", 907.184}, {"pound", 0.453592}, {"stone", 6.35029}, {"ounce", 0.0283495}, {"carrat", 0.0002}, {"atomic-mass-unit", (1.660540199 * Program.pow10(-27))}};
    public static double pow10(long exp_0) {
        double result_1 = 1.0;
        if ((exp_0 >= 0)) {
            long i_2 = 0;
            while ((i_2 < exp_0)) {
                result_1 = (result_1 * 10.0);
                i_2 = (i_2 + 1);
            }
        } else {
            long i_3 = 0;
            while ((i_3 < (0 - exp_0))) {
                result_1 = (result_1 / 10.0);
                i_3 = (i_3 + 1);
            }
        };
        return result_1;
    }

    public static double weight_conversion(string from_type_6, string to_type_7, double value_8) {
        bool has_to_9 = (KILOGRAM_CHART_4.ContainsKey(to_type_7));
        bool has_from_10 = (WEIGHT_TYPE_CHART_5.ContainsKey(from_type_6));
        if ((has_to_9 && has_from_10)) {
            return ((value_8 * (KILOGRAM_CHART_4.ContainsKey(to_type_7) ? KILOGRAM_CHART_4[to_type_7] : 0.0)) * (WEIGHT_TYPE_CHART_5.ContainsKey(from_type_6) ? WEIGHT_TYPE_CHART_5[from_type_6] : 0.0));
        };
        Console.WriteLine(Program._fmtTop("Invalid 'from_type' or 'to_type'"));
        return 0.0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.weight_conversion("kilogram", "gram", 1.0)));
            Console.WriteLine(Program._fmtTop(Program.weight_conversion("gram", "pound", 3.0)));
            Console.WriteLine(Program._fmtTop(Program.weight_conversion("ounce", "kilogram", 3.0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
