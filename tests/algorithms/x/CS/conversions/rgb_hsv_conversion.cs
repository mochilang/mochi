// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] rgb_38 = Program.hsv_to_rgb(180.0, 0.5, 0.5);
    public static double absf(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double fmod(double a_1, double b_2) {
        return (a_1 - (b_2 * Convert.ToInt64((a_1 / b_2))));
    }

    public static long roundf(double x_3) {
        if ((x_3 >= 0.0)) {
            return Convert.ToInt64((x_3 + 0.5));
        };
        return Convert.ToInt64((x_3 - 0.5));
    }

    public static double maxf(double a_4, double b_5, double c_6) {
        double m_7 = a_4;
        if ((b_5 > m_7)) {
            m_7 = b_5;
        };
        if ((c_6 > m_7)) {
            m_7 = c_6;
        };
        return m_7;
    }

    public static double minf(double a_8, double b_9, double c_10) {
        double m_11 = a_8;
        if ((b_9 < m_11)) {
            m_11 = b_9;
        };
        if ((c_10 < m_11)) {
            m_11 = c_10;
        };
        return m_11;
    }

    public static long[] hsv_to_rgb(double hue_12, double saturation_13, double value_14) {
        if (((hue_12 < 0.0) || (hue_12 > 360.0))) {
            Console.WriteLine(Program._fmtTop("hue should be between 0 and 360"));
            return new long[]{};
        };
        if (((saturation_13 < 0.0) || (saturation_13 > 1.0))) {
            Console.WriteLine(Program._fmtTop("saturation should be between 0 and 1"));
            return new long[]{};
        };
        if (((value_14 < 0.0) || (value_14 > 1.0))) {
            Console.WriteLine(Program._fmtTop("value should be between 0 and 1"));
            return new long[]{};
        };
        double chroma_15 = (value_14 * saturation_13);
        double hue_section_16 = (hue_12 / 60.0);
        double second_largest_component_17 = (chroma_15 * (1.0 - Program.absf((Program.fmod(hue_section_16, 2.0) - 1.0))));
        double match_value_18 = (value_14 - chroma_15);
        long red_19 = 0;
        long green_20 = 0;
        long blue_21 = 0;
        if (((hue_section_16 >= 0.0) && (hue_section_16 <= 1.0))) {
            red_19 = Program.roundf((255.0 * (chroma_15 + match_value_18)));
            green_20 = Program.roundf((255.0 * (second_largest_component_17 + match_value_18)));
            blue_21 = Program.roundf((255.0 * match_value_18));
        } else if (((hue_section_16 > 1.0) && (hue_section_16 <= 2.0))) {
            red_19 = Program.roundf((255.0 * (second_largest_component_17 + match_value_18)));
            green_20 = Program.roundf((255.0 * (chroma_15 + match_value_18)));
            blue_21 = Program.roundf((255.0 * match_value_18));
        } else if (((hue_section_16 > 2.0) && (hue_section_16 <= 3.0))) {
            red_19 = Program.roundf((255.0 * match_value_18));
            green_20 = Program.roundf((255.0 * (chroma_15 + match_value_18)));
            blue_21 = Program.roundf((255.0 * (second_largest_component_17 + match_value_18)));
        } else if (((hue_section_16 > 3.0) && (hue_section_16 <= 4.0))) {
            red_19 = Program.roundf((255.0 * match_value_18));
            green_20 = Program.roundf((255.0 * (second_largest_component_17 + match_value_18)));
            blue_21 = Program.roundf((255.0 * (chroma_15 + match_value_18)));
        } else if (((hue_section_16 > 4.0) && (hue_section_16 <= 5.0))) {
            red_19 = Program.roundf((255.0 * (second_largest_component_17 + match_value_18)));
            green_20 = Program.roundf((255.0 * match_value_18));
            blue_21 = Program.roundf((255.0 * (chroma_15 + match_value_18)));
        } else {
            red_19 = Program.roundf((255.0 * (chroma_15 + match_value_18)));
            green_20 = Program.roundf((255.0 * match_value_18));
            blue_21 = Program.roundf((255.0 * (second_largest_component_17 + match_value_18)));
        };
        return new long[]{red_19, green_20, blue_21};
    }

    public static double[] rgb_to_hsv(long red_22, long green_23, long blue_24) {
        if (((red_22 < 0) || (red_22 > 255))) {
            Console.WriteLine(Program._fmtTop("red should be between 0 and 255"));
            return new double[]{};
        };
        if (((green_23 < 0) || (green_23 > 255))) {
            Console.WriteLine(Program._fmtTop("green should be between 0 and 255"));
            return new double[]{};
        };
        if (((blue_24 < 0) || (blue_24 > 255))) {
            Console.WriteLine(Program._fmtTop("blue should be between 0 and 255"));
            return new double[]{};
        };
        double float_red_25 = (red_22 / 255.0);
        double float_green_26 = (green_23 / 255.0);
        double float_blue_27 = (blue_24 / 255.0);
        double value_28 = Program.maxf(float_red_25, float_green_26, float_blue_27);
        double min_val_29 = Program.minf(float_red_25, float_green_26, float_blue_27);
        double chroma_30 = (value_28 - min_val_29);
        double saturation_31 = ((value_28 == 0.0) ? 0.0 : (chroma_30 / value_28));
        double hue_32 = 0.0;
        if ((chroma_30 == 0.0)) {
            hue_32 = 0.0;
        } else if ((value_28 == float_red_25)) {
            hue_32 = (60.0 * (0.0 + ((float_green_26 - float_blue_27) / chroma_30)));
        } else if ((value_28 == float_green_26)) {
            hue_32 = (60.0 * (2.0 + ((float_blue_27 - float_red_25) / chroma_30)));
        } else {
            hue_32 = (60.0 * (4.0 + ((float_red_25 - float_green_26) / chroma_30)));
        };
        hue_32 = Program.fmod((hue_32 + 360.0), 360.0);
        return new double[]{hue_32, saturation_31, value_28};
    }

    public static bool approximately_equal_hsv(double[] hsv1_33, double[] hsv2_34) {
        bool check_hue_35 = (Program.absf((hsv1_33[(int)(0)] - hsv2_34[(int)(0)])) < 0.2);
        bool check_saturation_36 = (Program.absf((hsv1_33[(int)(1)] - hsv2_34[(int)(1)])) < 0.002);
        bool check_value_37 = (Program.absf((hsv1_33[(int)(2)] - hsv2_34[(int)(2)])) < 0.002);
        return ((check_hue_35 && check_saturation_36) && check_value_37);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(rgb_38)));
            double[] hsv_39 = Program.rgb_to_hsv(64, 128, 128);
            Console.WriteLine(Program._fmtTop(_fmtStr(hsv_39)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.approximately_equal_hsv(hsv_39, new double[]{180.0, 0.5, 0.5}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
