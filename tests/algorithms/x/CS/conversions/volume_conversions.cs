// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] units_0 = new string[]{"cubic meter", "litre", "kilolitre", "gallon", "cubic yard", "cubic foot", "cup"};
    static double[] from_factors_1 = new double[]{1.0, 0.001, 1.0, 0.00454, 0.76455, 0.028, 0.000236588};
    static double[] to_factors_2 = new double[]{1.0, 1000.0, 1.0, 264.172, 1.30795, 35.3147, 4226.75};
    public static string supported_values() {
        string result_3 = units_0[(int)(0)];
        long i_4 = 1;
        while ((i_4 < units_0.Length)) {
            result_3 = ((result_3 + ", ") + units_0[(int)(i_4)]);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static long find_index(string name_5) {
        long i_6 = 0;
        while ((i_6 < units_0.Length)) {
            if ((units_0[(int)(i_6)] == name_5)) {
                return i_6;
            }
            i_6 = (i_6 + 1);
        };
        return -1;
    }

    public static double get_from_factor(string name_7) {
        long idx_8 = Program.find_index(name_7);
        if ((idx_8 < 0)) {
            throw new Exception(((("Invalid 'from_type' value: '" + name_7) + "' Supported values are: ") + Program.supported_values()));
        };
        return from_factors_1[(int)(idx_8)];
    }

    public static double get_to_factor(string name_9) {
        long idx_10 = Program.find_index(name_9);
        if ((idx_10 < 0)) {
            throw new Exception(((("Invalid 'to_type' value: '" + name_9) + "' Supported values are: ") + Program.supported_values()));
        };
        return to_factors_2[(int)(idx_10)];
    }

    public static double volume_conversion(double value_11, string from_type_12, string to_type_13) {
        double from_factor_14 = Program.get_from_factor(from_type_12);
        double to_factor_15 = Program.get_to_factor(to_type_13);
        return ((value_11 * from_factor_14) * to_factor_15);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(4.0, "cubic meter", "litre"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(1.0, "litre", "gallon"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(1.0, "kilolitre", "cubic meter"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(3.0, "gallon", "cubic yard"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(2.0, "cubic yard", "litre"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(4.0, "cubic foot", "cup"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.volume_conversion(1.0, "cup", "kilolitre"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
