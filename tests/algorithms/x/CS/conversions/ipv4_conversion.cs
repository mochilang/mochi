// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string hex_digits_0 = "0123456789abcdef";
    public static string[] split_by_dot(string s_1) {
        string[] res_2 = new string[]{};
        string current_3 = "";
        long i_4 = 0;
        while ((i_4 < s_1.Length)) {
            string c_5 = s_1.Substring((int)(i_4), 1);
            if ((c_5 == ".")) {
                res_2 = (Enumerable.ToArray(Enumerable.Append<string>(res_2, current_3)));
                current_3 = "";
            } else {
                current_3 = (current_3 + c_5);
            }
            i_4 = (i_4 + 1);
        };
        res_2 = (Enumerable.ToArray(Enumerable.Append<string>(res_2, current_3)));
        return res_2;
    }

    public static long parse_decimal(string s_6) {
        if ((s_6.Length == 0)) {
            throw new Exception("Invalid IPv4 address format");
        };
        long value_7 = 0;
        long i_8 = 0;
        while ((i_8 < s_6.Length)) {
            string c_9 = s_6.Substring((int)(i_8), 1);
            if (((string.Compare(c_9, "0") < 0) || (string.Compare(c_9, "9") > 0))) {
                throw new Exception("Invalid IPv4 address format");
            }
            value_7 = ((value_7 * 10) + Convert.ToInt64(c_9));
            i_8 = (i_8 + 1);
        };
        return value_7;
    }

    public static string to_hex2(long n_10) {
        long x_11 = n_10;
        string res_12 = "";
        while ((x_11 > 0)) {
            long d_13 = _mod(x_11, 16);
            res_12 = (hex_digits_0.Substring((int)(d_13), 1) + res_12);
            x_11 = (x_11 / 16);
        };
        while ((res_12.Length < 2)) {
            res_12 = ("0" + res_12);
        };
        return res_12;
    }

    public static long ipv4_to_decimal(string ipv4_address_14) {
        string[] parts_15 = Program.split_by_dot(ipv4_address_14);
        if ((parts_15.Length != 4)) {
            throw new Exception("Invalid IPv4 address format");
        };
        long result_16 = 0;
        long i_17 = 0;
        while ((i_17 < 4)) {
            long oct_18 = Program.parse_decimal(parts_15[(int)(i_17)]);
            if (((oct_18 < 0) || (oct_18 > 255))) {
                throw new Exception(("Invalid IPv4 octet " + _fmtStr(oct_18)));
            }
            result_16 = ((result_16 * 256) + oct_18);
            i_17 = (i_17 + 1);
        };
        return result_16;
    }

    public static long alt_ipv4_to_decimal(string ipv4_address_19) {
        string[] parts_20 = Program.split_by_dot(ipv4_address_19);
        if ((parts_20.Length != 4)) {
            throw new Exception("Invalid IPv4 address format");
        };
        string hex_str_21 = "";
        long i_22 = 0;
        while ((i_22 < 4)) {
            long oct_23 = Program.parse_decimal(parts_20[(int)(i_22)]);
            if (((oct_23 < 0) || (oct_23 > 255))) {
                throw new Exception(("Invalid IPv4 octet " + _fmtStr(oct_23)));
            }
            hex_str_21 = (hex_str_21 + Program.to_hex2(oct_23));
            i_22 = (i_22 + 1);
        };
        long value_24 = 0;
        long k_25 = 0;
        while ((k_25 < hex_str_21.Length)) {
            string c_26 = hex_str_21.Substring((int)(k_25), 1);
            long digit_27 = (0 - 1);
            long j_28 = 0;
            while ((j_28 < hex_digits_0.Length)) {
                if ((hex_digits_0.Substring((int)(j_28), 1) == c_26)) {
                    digit_27 = j_28;
                }
                j_28 = (j_28 + 1);
            }
            if ((digit_27 < 0)) {
                throw new Exception("Invalid hex digit");
            }
            value_24 = ((value_24 * 16) + digit_27);
            k_25 = (k_25 + 1);
        };
        return value_24;
    }

    public static string decimal_to_ipv4(long decimal_ipv4_29) {
        if (((decimal_ipv4_29 < 0) || (decimal_ipv4_29 > 4294967295L))) {
            throw new Exception("Invalid decimal IPv4 address");
        };
        long n_30 = decimal_ipv4_29;
        string[] parts_31 = new string[]{};
        long i_32 = 0;
        while ((i_32 < 4)) {
            long octet_33 = _mod(n_30, 256);
            parts_31 = (Enumerable.ToArray(Enumerable.Append<string>(parts_31, _fmtStr(octet_33))));
            n_30 = (n_30 / 256);
            i_32 = (i_32 + 1);
        };
        string res_34 = "";
        long j_35 = (parts_31.Length - 1);
        while ((j_35 >= 0)) {
            res_34 = (res_34 + parts_31[(int)(j_35)]);
            if ((j_35 > 0)) {
                res_34 = (res_34 + ".");
            }
            j_35 = (j_35 - 1);
        };
        return res_34;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.ipv4_to_decimal("192.168.0.1")));
            Console.WriteLine(Program._fmtTop(Program.ipv4_to_decimal("10.0.0.255")));
            Console.WriteLine(Program._fmtTop(Program.alt_ipv4_to_decimal("192.168.0.1")));
            Console.WriteLine(Program._fmtTop(Program.alt_ipv4_to_decimal("10.0.0.255")));
            Console.WriteLine(Program._fmtTop(Program.decimal_to_ipv4(3232235521L)));
            Console.WriteLine(Program._fmtTop(Program.decimal_to_ipv4(167772415)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
