// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, string> UNIT_SYMBOL_0 = new Dictionary<string, string>{{"meter", "m"}, {"kilometer", "km"}, {"megametre", "Mm"}, {"gigametre", "Gm"}, {"terametre", "Tm"}, {"petametre", "Pm"}, {"exametre", "Em"}, {"zettametre", "Zm"}, {"yottametre", "Ym"}};
    static Dictionary<string, long> METRIC_CONVERSION_1 = new Dictionary<string, long>{{"m", 0}, {"km", 3}, {"Mm", 6}, {"Gm", 9}, {"Tm", 12}, {"Pm", 15}, {"Em", 18}, {"Zm", 21}, {"Ym", 24}};
    static string ABBREVIATIONS_2 = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym";
    public static string sanitize(string unit_3) {
        string res_4 = unit_3.ToLower();
        if ((res_4.Length > 0)) {
            string last_5 = _substr(res_4, (res_4.Length - 1), res_4.Length);
            if ((last_5 == "s")) {
                res_4 = _substr(res_4, 0, (res_4.Length - 1));
            }
        };
        if ((UNIT_SYMBOL_0.ContainsKey(res_4))) {
            return (UNIT_SYMBOL_0.ContainsKey(res_4) ? UNIT_SYMBOL_0[res_4] : "");
        };
        return res_4;
    }

    public static double pow10(long exp_6) {
        if ((exp_6 == 0)) {
            return 1.0;
        };
        long e_7 = exp_6;
        double res_8 = 1.0;
        if ((e_7 < 0)) {
            e_7 = -e_7;
        };
        long i_9 = 0;
        while ((i_9 < e_7)) {
            res_8 = (res_8 * 10.0);
            i_9 = (i_9 + 1);
        };
        if ((exp_6 < 0)) {
            return (1.0 / res_8);
        };
        return res_8;
    }

    public static double length_conversion(double value_10, string from_type_11, string to_type_12) {
        string from_sanitized_13 = Program.sanitize(from_type_11);
        string to_sanitized_14 = Program.sanitize(to_type_12);
        if ((!(METRIC_CONVERSION_1.ContainsKey(from_sanitized_13)))) {
            throw new Exception(((("Invalid 'from_type' value: '" + from_type_11) + "'.\nConversion abbreviations are: ") + ABBREVIATIONS_2));
        };
        if ((!(METRIC_CONVERSION_1.ContainsKey(to_sanitized_14)))) {
            throw new Exception(((("Invalid 'to_type' value: '" + to_type_12) + "'.\nConversion abbreviations are: ") + ABBREVIATIONS_2));
        };
        long from_exp_15 = (METRIC_CONVERSION_1.ContainsKey(from_sanitized_13) ? METRIC_CONVERSION_1[from_sanitized_13] : 0);
        long to_exp_16 = (METRIC_CONVERSION_1.ContainsKey(to_sanitized_14) ? METRIC_CONVERSION_1[to_sanitized_14] : 0);
        long exponent_17 = 0;
        if ((from_exp_15 > to_exp_16)) {
            exponent_17 = (from_exp_15 - to_exp_16);
        } else {
            exponent_17 = -(to_exp_16 - from_exp_15);
        };
        return (value_10 * Program.pow10(exponent_17));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.length_conversion(1.0, "meter", "kilometer"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.length_conversion(1.0, "meter", "megametre"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.length_conversion(1.0, "gigametre", "meter"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.length_conversion(1.0, "terametre", "zettametre"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.length_conversion(1.0, "yottametre", "zettametre"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
