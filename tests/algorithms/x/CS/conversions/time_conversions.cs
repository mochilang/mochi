// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, double> time_chart_0 = new Dictionary<string, double>{{"seconds", 1.0}, {"minutes", 60.0}, {"hours", 3600.0}, {"days", 86400.0}, {"weeks", 604800.0}, {"months", 2.6298e+06}, {"years", 3.15576e+07}};
    static Dictionary<string, double> time_chart_inverse_1 = new Dictionary<string, double>{{"seconds", 1.0}, {"minutes", (1.0 / 60.0)}, {"hours", (1.0 / 3600.0)}, {"days", (1.0 / 86400.0)}, {"weeks", (1.0 / 604800.0)}, {"months", (1.0 / 2.6298e+06)}, {"years", (1.0 / 3.15576e+07)}};
    static string[] units_2 = new string[]{"seconds", "minutes", "hours", "days", "weeks", "months", "years"};
    static string units_str_3 = "seconds, minutes, hours, days, weeks, months, years";
    public static bool contains(string[] arr_4, string t_5) {
        long i_6 = 0;
        while ((i_6 < arr_4.Length)) {
            if ((arr_4[(int)(i_6)] == t_5)) {
                return true;
            }
            i_6 = (i_6 + 1);
        };
        return false;
    }

    public static double convert_time(double time_value_7, string unit_from_8, string unit_to_9) {
        if ((time_value_7 < 0.0)) {
            throw new Exception("'time_value' must be a non-negative number.");
        };
        string from_10 = unit_from_8.ToLower();
        string to_11 = unit_to_9.ToLower();
        if (((!Program.contains(units_2, from_10)) || (!Program.contains(units_2, to_11)))) {
            string invalid_unit_12 = from_10;
            if (Program.contains(units_2, from_10)) {
                invalid_unit_12 = to_11;
            }
            throw new Exception((((("Invalid unit " + invalid_unit_12) + " is not in ") + units_str_3) + "."));
        };
        double seconds_13 = (time_value_7 * (time_chart_0.ContainsKey(from_10) ? time_chart_0[from_10] : 0.0));
        double converted_14 = (seconds_13 * (time_chart_inverse_1.ContainsKey(to_11) ? time_chart_inverse_1[to_11] : 0.0));
        double scaled_15 = (converted_14 * 1000.0);
        long int_part_16 = Convert.ToInt64((scaled_15 + 0.5));
        return ((int_part_16 + 0.0) / 1000.0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.convert_time(3600.0, "seconds", "hours")));
            Console.WriteLine(Program._fmtTop(Program.convert_time(360.0, "days", "months")));
            Console.WriteLine(Program._fmtTop(Program.convert_time(360.0, "months", "years")));
            Console.WriteLine(Program._fmtTop(Program.convert_time(1.0, "years", "seconds")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
