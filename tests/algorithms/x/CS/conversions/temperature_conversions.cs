// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double floor(double x_0) {
        long i_1 = Convert.ToInt64(x_0);
        if ((Convert.ToDouble(i_1) > x_0)) {
            i_1 = (i_1 - 1);
        };
        return Convert.ToDouble(i_1);
    }

    public static double pow10(long n_2) {
        double p_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < n_2)) {
            p_3 = (p_3 * 10.0);
            i_4 = (i_4 + 1);
        };
        return p_3;
    }

    public static double round_to(double x_5, long ndigits_6) {
        double m_7 = Program.pow10(ndigits_6);
        return (Program.floor(((x_5 * m_7) + 0.5)) / m_7);
    }

    public static double celsius_to_fahrenheit(double c_8, long ndigits_9) {
        return Program.round_to((((c_8 * 9.0) / 5.0) + 32.0), ndigits_9);
    }

    public static double celsius_to_kelvin(double c_10, long ndigits_11) {
        return Program.round_to((c_10 + 273.15), ndigits_11);
    }

    public static double celsius_to_rankine(double c_12, long ndigits_13) {
        return Program.round_to((((c_12 * 9.0) / 5.0) + 491.67), ndigits_13);
    }

    public static double fahrenheit_to_celsius(double f_14, long ndigits_15) {
        return Program.round_to((((f_14 - 32.0) * 5.0) / 9.0), ndigits_15);
    }

    public static double fahrenheit_to_kelvin(double f_16, long ndigits_17) {
        return Program.round_to(((((f_16 - 32.0) * 5.0) / 9.0) + 273.15), ndigits_17);
    }

    public static double fahrenheit_to_rankine(double f_18, long ndigits_19) {
        return Program.round_to((f_18 + 459.67), ndigits_19);
    }

    public static double kelvin_to_celsius(double k_20, long ndigits_21) {
        return Program.round_to((k_20 - 273.15), ndigits_21);
    }

    public static double kelvin_to_fahrenheit(double k_22, long ndigits_23) {
        return Program.round_to(((((k_22 - 273.15) * 9.0) / 5.0) + 32.0), ndigits_23);
    }

    public static double kelvin_to_rankine(double k_24, long ndigits_25) {
        return Program.round_to(((k_24 * 9.0) / 5.0), ndigits_25);
    }

    public static double rankine_to_celsius(double r_26, long ndigits_27) {
        return Program.round_to((((r_26 - 491.67) * 5.0) / 9.0), ndigits_27);
    }

    public static double rankine_to_fahrenheit(double r_28, long ndigits_29) {
        return Program.round_to((r_28 - 459.67), ndigits_29);
    }

    public static double rankine_to_kelvin(double r_30, long ndigits_31) {
        return Program.round_to(((r_30 * 5.0) / 9.0), ndigits_31);
    }

    public static double reaumur_to_kelvin(double r_32, long ndigits_33) {
        return Program.round_to(((r_32 * 1.25) + 273.15), ndigits_33);
    }

    public static double reaumur_to_fahrenheit(double r_34, long ndigits_35) {
        return Program.round_to(((r_34 * 2.25) + 32.0), ndigits_35);
    }

    public static double reaumur_to_celsius(double r_36, long ndigits_37) {
        return Program.round_to((r_36 * 1.25), ndigits_37);
    }

    public static double reaumur_to_rankine(double r_38, long ndigits_39) {
        return Program.round_to((((r_38 * 2.25) + 32.0) + 459.67), ndigits_39);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.celsius_to_fahrenheit(0.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.celsius_to_kelvin(0.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.celsius_to_rankine(0.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.fahrenheit_to_celsius(32.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.fahrenheit_to_kelvin(32.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.fahrenheit_to_rankine(32.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.kelvin_to_celsius(273.15, 2)));
            Console.WriteLine(Program._fmtTop(Program.kelvin_to_fahrenheit(273.15, 2)));
            Console.WriteLine(Program._fmtTop(Program.kelvin_to_rankine(273.15, 2)));
            Console.WriteLine(Program._fmtTop(Program.rankine_to_celsius(491.67, 2)));
            Console.WriteLine(Program._fmtTop(Program.rankine_to_fahrenheit(491.67, 2)));
            Console.WriteLine(Program._fmtTop(Program.rankine_to_kelvin(491.67, 2)));
            Console.WriteLine(Program._fmtTop(Program.reaumur_to_kelvin(80.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.reaumur_to_fahrenheit(80.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.reaumur_to_celsius(80.0, 2)));
            Console.WriteLine(Program._fmtTop(Program.reaumur_to_rankine(80.0, 2)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
