// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static long[] roman_values_0 = new long[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    static string[] roman_symbols_1 = new string[]{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
    public static long char_value(string c_2) {
        if ((c_2 == "I")) {
            return 1;
        };
        if ((c_2 == "V")) {
            return 5;
        };
        if ((c_2 == "X")) {
            return 10;
        };
        if ((c_2 == "L")) {
            return 50;
        };
        if ((c_2 == "C")) {
            return 100;
        };
        if ((c_2 == "D")) {
            return 500;
        };
        if ((c_2 == "M")) {
            return 1000;
        };
        return 0;
    }

    public static long roman_to_int(string roman_3) {
        long total_4 = 0;
        long i_5 = 0;
        while ((i_5 < roman_3.Length)) {
            if ((((i_5 + 1) < roman_3.Length) && (Program.char_value(roman_3.Substring((int)(i_5), 1)) < Program.char_value(roman_3.Substring((int)((i_5 + 1)), 1))))) {
                total_4 = ((total_4 + Program.char_value(roman_3.Substring((int)((i_5 + 1)), 1))) - Program.char_value(roman_3.Substring((int)(i_5), 1)));
                i_5 = (i_5 + 2);
            } else {
                total_4 = (total_4 + Program.char_value(roman_3.Substring((int)(i_5), 1)));
                i_5 = (i_5 + 1);
            }
        };
        return total_4;
    }

    public static string int_to_roman(long number_6) {
        long num_7 = number_6;
        string res_8 = "";
        long i_9 = 0;
        while ((i_9 < roman_values_0.Length)) {
            long value_10 = roman_values_0[(int)(i_9)];
            string symbol_11 = roman_symbols_1[(int)(i_9)];
            long factor_12 = (num_7 / value_10);
            num_7 = _mod(num_7, value_10);
            long j_13 = 0;
            while ((j_13 < factor_12)) {
                res_8 = (res_8 + symbol_11);
                j_13 = (j_13 + 1);
            }
            if ((num_7 == 0)) {
                break;
            }
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
