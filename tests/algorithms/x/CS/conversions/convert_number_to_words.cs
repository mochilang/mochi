// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] ones_0 = new string[]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
    static string[] teens_1 = new string[]{"ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    static string[] tens_2 = new string[]{"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
    static long[] short_powers_3 = new long[]{15, 12, 9, 6, 3, 2};
    static string[] short_units_4 = new string[]{"quadrillion", "trillion", "billion", "million", "thousand", "hundred"};
    static long[] long_powers_5 = new long[]{15, 9, 6, 3, 2};
    static string[] long_units_6 = new string[]{"billiard", "milliard", "million", "thousand", "hundred"};
    static long[] indian_powers_7 = new long[]{14, 12, 7, 5, 3, 2};
    static string[] indian_units_8 = new string[]{"crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"};
    public static long pow10(long exp_9) {
        long res_10 = 1;
        long i_11 = 0;
        while ((i_11 < exp_9)) {
            res_10 = (res_10 * 10);
            i_11 = (i_11 + 1);
        };
        return res_10;
    }

    public static long max_value(string system_12) {
        if ((system_12 == "short")) {
            return (Program.pow10(18) - 1);
        };
        if ((system_12 == "long")) {
            return (Program.pow10(21) - 1);
        };
        if ((system_12 == "indian")) {
            return (Program.pow10(19) - 1);
        };
        return 0;
    }

    public static string join_words(string[] words_13) {
        string res_14 = "";
        long i_15 = 0;
        while ((i_15 < words_13.Length)) {
            if ((i_15 > 0)) {
                res_14 = (res_14 + " ");
            }
            res_14 = (res_14 + words_13[(int)(i_15)]);
            i_15 = (i_15 + 1);
        };
        return res_14;
    }

    public static string convert_small_number(long num_16) {
        if ((num_16 < 0)) {
            return "";
        };
        if ((num_16 >= 100)) {
            return "";
        };
        long tens_digit_17 = (num_16 / 10);
        long ones_digit_18 = _mod(num_16, 10);
        if ((tens_digit_17 == 0)) {
            return ones_0[(int)(ones_digit_18)];
        };
        if ((tens_digit_17 == 1)) {
            return teens_1[(int)(ones_digit_18)];
        };
        string hyphen_19 = ((ones_digit_18 > 0) ? "-" : "");
        string tail_20 = ((ones_digit_18 > 0) ? ones_0[(int)(ones_digit_18)] : "");
        return ((tens_2[(int)(tens_digit_17)] + hyphen_19) + tail_20);
    }

    public static string convert_number(long num_21, string system_22) {
        string[] word_groups_23 = new string[]{};
        long n_24 = num_21;
        if ((n_24 < 0)) {
            word_groups_23 = (Enumerable.ToArray(Enumerable.Append<string>(word_groups_23, "negative")));
            n_24 = -n_24;
        };
        if ((n_24 > Program.max_value(system_22))) {
            return "";
        };
        long[] powers_25 = new long[]{};
        string[] units_26 = new string[]{};
        if ((system_22 == "short")) {
            powers_25 = short_powers_3;
            units_26 = short_units_4;
        } else if ((system_22 == "long")) {
            powers_25 = long_powers_5;
            units_26 = long_units_6;
        } else if ((system_22 == "indian")) {
            powers_25 = indian_powers_7;
            units_26 = indian_units_8;
        } else {
            return "";
        };
        long i_27 = 0;
        while ((i_27 < powers_25.Length)) {
            long power_28 = powers_25[(int)(i_27)];
            string unit_29 = units_26[(int)(i_27)];
            long divisor_30 = Program.pow10(power_28);
            long digit_group_31 = (n_24 / divisor_30);
            n_24 = _mod(n_24, divisor_30);
            if ((digit_group_31 > 0)) {
                string word_group_32 = ((digit_group_31 >= 100) ? Program.convert_number(digit_group_31, system_22) : Program.convert_small_number(digit_group_31));
                word_groups_23 = (Enumerable.ToArray(Enumerable.Append<string>(word_groups_23, ((word_group_32 + " ") + unit_29))));
            }
            i_27 = (i_27 + 1);
        };
        if (((n_24 > 0) || (word_groups_23.Length == 0))) {
            word_groups_23 = (Enumerable.ToArray(Enumerable.Append<string>(word_groups_23, Program.convert_small_number(n_24))));
        };
        string joined_33 = Program.join_words(word_groups_23);
        return joined_33;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.convert_number(123456789012345L, "short")));
            Console.WriteLine(Program._fmtTop(Program.convert_number(123456789012345L, "long")));
            Console.WriteLine(Program._fmtTop(Program.convert_number(123456789012345L, "indian")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
