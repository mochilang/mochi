// Generated by Mochi 0.10.59 on 2025-08-06 22:16 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long round_to_int(double x_0) {
        if ((x_0 >= 0.0)) {
            return Convert.ToInt64((x_0 + 0.5));
        };
        return Convert.ToInt64((x_0 - 0.5));
    }

    public static long molarity_to_normality(double nfactor_1, double moles_2, double volume_3) {
        return Program.round_to_int(((moles_2 / volume_3) * nfactor_1));
    }

    public static long moles_to_pressure(double volume_4, double moles_5, double temperature_6) {
        return Program.round_to_int((((moles_5 * 0.0821) * temperature_6) / volume_4));
    }

    public static long moles_to_volume(double pressure_7, double moles_8, double temperature_9) {
        return Program.round_to_int((((moles_8 * 0.0821) * temperature_9) / pressure_7));
    }

    public static long pressure_and_volume_to_temperature(double pressure_10, double moles_11, double volume_12) {
        return Program.round_to_int(((pressure_10 * volume_12) / (0.0821 * moles_11)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.molarity_to_normality(2.0, 3.1, 0.31))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.molarity_to_normality(4.0, 11.4, 5.7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.moles_to_pressure(0.82, 3.0, 300.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.moles_to_pressure(8.2, 5.0, 200.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.moles_to_volume(0.82, 3.0, 300.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.moles_to_volume(8.2, 5.0, 200.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pressure_and_volume_to_temperature(0.82, 1.0, 2.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pressure_and_volume_to_temperature(8.2, 5.0, 3.0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
