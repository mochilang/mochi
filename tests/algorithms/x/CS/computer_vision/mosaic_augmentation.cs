// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class MosaicResult {
    public long[][] img;
    public double[][] annos;
    public string path;
    public override string ToString() => $"MosaicResult {{img = {img}, annos = {annos}, path = \"{path}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static MosaicResult update_image_and_anno(string[] all_img_list_0, double[][][] all_annos_1, long[] idxs_2, long[] output_size_3, double[] scale_range_4, double filter_scale_5) {
        long height_6 = output_size_3[(int)(0 < 0 ? output_size_3.Length + (0) : 0)];
        long width_7 = output_size_3[(int)(1 < 0 ? output_size_3.Length + (1) : 1)];
        long[][] output_img_8 = new long[][]{};
        long r_9 = 0;
        while ((r_9 < height_6)) {
            long[] row_10 = new long[]{};
            long c_11 = 0;
            while ((c_11 < width_7)) {
                row_10 = (Enumerable.ToArray(Enumerable.Append<long>(row_10, 0)));
                c_11 = (c_11 + 1);
            }
            output_img_8 = (Enumerable.ToArray(Enumerable.Append<long[]>(output_img_8, row_10)));
            r_9 = (r_9 + 1);
        };
        double scale_x_12 = ((scale_range_4[(int)(0 < 0 ? scale_range_4.Length + (0) : 0)] + scale_range_4[(int)(1 < 0 ? scale_range_4.Length + (1) : 1)]) / 2.0);
        double scale_y_13 = ((scale_range_4[(int)(0 < 0 ? scale_range_4.Length + (0) : 0)] + scale_range_4[(int)(1 < 0 ? scale_range_4.Length + (1) : 1)]) / 2.0);
        long divid_point_x_14 = (long)((scale_x_12 * Convert.ToDouble(width_7)));
        long divid_point_y_15 = (long)((scale_y_13 * Convert.ToDouble(height_6)));
        double[][] new_anno_16 = new double[][]{};
        string[] path_list_17 = new string[]{};
        long i_18 = 0;
        while ((i_18 < idxs_2.Length)) {
            long index_19 = idxs_2[(int)(i_18 < 0 ? idxs_2.Length + (i_18) : i_18)];
            string path_20 = all_img_list_0[(int)(index_19 < 0 ? all_img_list_0.Length + (index_19) : index_19)];
            path_list_17 = (Enumerable.ToArray(Enumerable.Append<string>(path_list_17, path_20)));
            double[][] img_annos_21 = all_annos_1[(int)(index_19 < 0 ? all_annos_1.Length + (index_19) : index_19)];
            if ((i_18 == 0)) {
                long y0_22 = 0;
                while ((y0_22 < divid_point_y_15)) {
                    long x0_23 = 0;
                    while ((x0_23 < divid_point_x_14)) {
                        output_img_8[(int)(y0_22 < 0 ? output_img_8.Length + (y0_22) : y0_22)][(int)(x0_23)] = (i_18 + 1);
                        x0_23 = (x0_23 + 1);
                    }
                    y0_22 = (y0_22 + 1);
                }
                long j0_24 = 0;
                while ((j0_24 < img_annos_21.Length)) {
                    double[] bbox_25 = img_annos_21[(int)(j0_24 < 0 ? img_annos_21.Length + (j0_24) : j0_24)];
                    double xmin_26 = (bbox_25[(int)(1 < 0 ? bbox_25.Length + (1) : 1)] * scale_x_12);
                    double ymin_27 = (bbox_25[(int)(2 < 0 ? bbox_25.Length + (2) : 2)] * scale_y_13);
                    double xmax_28 = (bbox_25[(int)(3 < 0 ? bbox_25.Length + (3) : 3)] * scale_x_12);
                    double ymax_29 = (bbox_25[(int)(4 < 0 ? bbox_25.Length + (4) : 4)] * scale_y_13);
                    new_anno_16 = (Enumerable.ToArray(Enumerable.Append<double[]>(new_anno_16, new double[]{bbox_25[(int)(0 < 0 ? bbox_25.Length + (0) : 0)], xmin_26, ymin_27, xmax_28, ymax_29})));
                    j0_24 = (j0_24 + 1);
                }
            } else if ((i_18 == 1)) {
                long y1_30 = 0;
                while ((y1_30 < divid_point_y_15)) {
                    long x1_31 = divid_point_x_14;
                    while ((x1_31 < width_7)) {
                        output_img_8[(int)(y1_30 < 0 ? output_img_8.Length + (y1_30) : y1_30)][(int)(x1_31)] = (i_18 + 1);
                        x1_31 = (x1_31 + 1);
                    }
                    y1_30 = (y1_30 + 1);
                }
                long j1_32 = 0;
                while ((j1_32 < img_annos_21.Length)) {
                    double[] bbox1_33 = img_annos_21[(int)(j1_32 < 0 ? img_annos_21.Length + (j1_32) : j1_32)];
                    double xmin1_34 = (scale_x_12 + (bbox1_33[(int)(1 < 0 ? bbox1_33.Length + (1) : 1)] * (1.0 - scale_x_12)));
                    double ymin1_35 = (bbox1_33[(int)(2 < 0 ? bbox1_33.Length + (2) : 2)] * scale_y_13);
                    double xmax1_36 = (scale_x_12 + (bbox1_33[(int)(3 < 0 ? bbox1_33.Length + (3) : 3)] * (1.0 - scale_x_12)));
                    double ymax1_37 = (bbox1_33[(int)(4 < 0 ? bbox1_33.Length + (4) : 4)] * scale_y_13);
                    new_anno_16 = (Enumerable.ToArray(Enumerable.Append<double[]>(new_anno_16, new double[]{bbox1_33[(int)(0 < 0 ? bbox1_33.Length + (0) : 0)], xmin1_34, ymin1_35, xmax1_36, ymax1_37})));
                    j1_32 = (j1_32 + 1);
                }
            } else if ((i_18 == 2)) {
                long y2_38 = divid_point_y_15;
                while ((y2_38 < height_6)) {
                    long x2_39 = 0;
                    while ((x2_39 < divid_point_x_14)) {
                        output_img_8[(int)(y2_38 < 0 ? output_img_8.Length + (y2_38) : y2_38)][(int)(x2_39)] = (i_18 + 1);
                        x2_39 = (x2_39 + 1);
                    }
                    y2_38 = (y2_38 + 1);
                }
                long j2_40 = 0;
                while ((j2_40 < img_annos_21.Length)) {
                    double[] bbox2_41 = img_annos_21[(int)(j2_40 < 0 ? img_annos_21.Length + (j2_40) : j2_40)];
                    double xmin2_42 = (bbox2_41[(int)(1 < 0 ? bbox2_41.Length + (1) : 1)] * scale_x_12);
                    double ymin2_43 = (scale_y_13 + (bbox2_41[(int)(2 < 0 ? bbox2_41.Length + (2) : 2)] * (1.0 - scale_y_13)));
                    double xmax2_44 = (bbox2_41[(int)(3 < 0 ? bbox2_41.Length + (3) : 3)] * scale_x_12);
                    double ymax2_45 = (scale_y_13 + (bbox2_41[(int)(4 < 0 ? bbox2_41.Length + (4) : 4)] * (1.0 - scale_y_13)));
                    new_anno_16 = (Enumerable.ToArray(Enumerable.Append<double[]>(new_anno_16, new double[]{bbox2_41[(int)(0 < 0 ? bbox2_41.Length + (0) : 0)], xmin2_42, ymin2_43, xmax2_44, ymax2_45})));
                    j2_40 = (j2_40 + 1);
                }
            } else {
                long y3_46 = divid_point_y_15;
                while ((y3_46 < height_6)) {
                    long x3_47 = divid_point_x_14;
                    while ((x3_47 < width_7)) {
                        output_img_8[(int)(y3_46 < 0 ? output_img_8.Length + (y3_46) : y3_46)][(int)(x3_47)] = (i_18 + 1);
                        x3_47 = (x3_47 + 1);
                    }
                    y3_46 = (y3_46 + 1);
                }
                long j3_48 = 0;
                while ((j3_48 < img_annos_21.Length)) {
                    double[] bbox3_49 = img_annos_21[(int)(j3_48 < 0 ? img_annos_21.Length + (j3_48) : j3_48)];
                    double xmin3_50 = (scale_x_12 + (bbox3_49[(int)(1 < 0 ? bbox3_49.Length + (1) : 1)] * (1.0 - scale_x_12)));
                    double ymin3_51 = (scale_y_13 + (bbox3_49[(int)(2 < 0 ? bbox3_49.Length + (2) : 2)] * (1.0 - scale_y_13)));
                    double xmax3_52 = (scale_x_12 + (bbox3_49[(int)(3 < 0 ? bbox3_49.Length + (3) : 3)] * (1.0 - scale_x_12)));
                    double ymax3_53 = (scale_y_13 + (bbox3_49[(int)(4 < 0 ? bbox3_49.Length + (4) : 4)] * (1.0 - scale_y_13)));
                    new_anno_16 = (Enumerable.ToArray(Enumerable.Append<double[]>(new_anno_16, new double[]{bbox3_49[(int)(0 < 0 ? bbox3_49.Length + (0) : 0)], xmin3_50, ymin3_51, xmax3_52, ymax3_53})));
                    j3_48 = (j3_48 + 1);
                }
            }
            i_18 = (i_18 + 1);
        };
        if ((filter_scale_5 > 0.0)) {
            double[][] filtered_54 = new double[][]{};
            long k_55 = 0;
            while ((k_55 < new_anno_16.Length)) {
                double[] anno_56 = new_anno_16[(int)(k_55 < 0 ? new_anno_16.Length + (k_55) : k_55)];
                double w_57 = (anno_56[(int)(3 < 0 ? anno_56.Length + (3) : 3)] - anno_56[(int)(1 < 0 ? anno_56.Length + (1) : 1)]);
                double h_58 = (anno_56[(int)(4 < 0 ? anno_56.Length + (4) : 4)] - anno_56[(int)(2 < 0 ? anno_56.Length + (2) : 2)]);
                if (((filter_scale_5 < w_57) && (filter_scale_5 < h_58))) {
                    filtered_54 = (Enumerable.ToArray(Enumerable.Append<double[]>(filtered_54, anno_56)));
                }
                k_55 = (k_55 + 1);
            }
            new_anno_16 = filtered_54;
        };
        return new MosaicResult{img = output_img_8, annos = new_anno_16, path = path_list_17[(int)(0 < 0 ? path_list_17.Length + (0) : 0)]};
    }

    public static void main() {
        string[] all_img_list_59 = new string[]{"img0.jpg", "img1.jpg", "img2.jpg", "img3.jpg"};
        double[][][] all_annos_60 = new double[][][]{new double[][]{new double[]{0.0, 0.1, 0.1, 0.4, 0.4}}, new double[][]{new double[]{1.0, 0.2, 0.3, 0.5, 0.7}}, new double[][]{new double[]{2.0, 0.6, 0.2, 0.9, 0.5}}, new double[][]{new double[]{3.0, 0.5, 0.5, 0.8, 0.8}}};
        long[] idxs_61 = new long[]{0, 1, 2, 3};
        long[] output_size_62 = new long[]{100, 100};
        double[] scale_range_63 = new double[]{0.4, 0.6};
        double filter_scale_64 = 0.05;
        MosaicResult res_65 = Program.update_image_and_anno(all_img_list_59, all_annos_60, idxs_61, output_size_62, scale_range_63, filter_scale_64);
        double[][] new_annos_66 = res_65.annos;
        string path_67 = res_65.path;
        Console.WriteLine(Program._fmtTop(("Base image: " + path_67)));
        Console.WriteLine(Program._fmtTop(("Mosaic annotation count: " + _fmtStr(new_annos_66.Length))));
        long i_68 = 0;
        while ((i_68 < new_annos_66.Length)) {
            double[] a_69 = new_annos_66[(int)(i_68 < 0 ? new_annos_66.Length + (i_68) : i_68)];
            Console.WriteLine(Program._fmtTop(((((((((_fmtStr(a_69[(int)(0 < 0 ? a_69.Length + (0) : 0)]) + " ") + _fmtStr(a_69[(int)(1 < 0 ? a_69.Length + (1) : 1)])) + " ") + _fmtStr(a_69[(int)(2 < 0 ? a_69.Length + (2) : 2)])) + " ") + _fmtStr(a_69[(int)(3 < 0 ? a_69.Length + (3) : 3)])) + " ") + _fmtStr(a_69[(int)(4 < 0 ? a_69.Length + (4) : 4)]))));
            i_68 = (i_68 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
