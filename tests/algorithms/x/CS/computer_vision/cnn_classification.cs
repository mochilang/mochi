// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] image_39 = new double[][]{new double[]{0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, new double[]{0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0}, new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0}, new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    static double[][] kernel_40 = new double[][]{new double[]{1.0, 0.0, -1.0}, new double[]{1.0, 0.0, -1.0}, new double[]{1.0, 0.0, -1.0}};
    static double[][] conv_41 = Program.conv2d(image_39, kernel_40);
    static double[][] activated_42 = Program.relu_matrix(conv_41);
    static double[][] pooled_43 = Program.max_pool2x2(activated_42);
    static double[] flat_44 = Program.flatten(pooled_43);
    static double[] weights_45 = new double[]{0.5, -0.4, 0.3, 0.1};
    static double bias_46 = 0.0;
    static double output_47 = Program.dense(flat_44, weights_45, bias_46);
    static double probability_48 = Program.sigmoid(output_47);
    public static double[][] conv2d(double[][] image_0, double[][] kernel_1) {
        long rows_2 = image_0.Length;
        long cols_3 = image_0[(int)(0 < 0 ? image_0.Length + (0) : 0)].Length;
        long k_4 = kernel_1.Length;
        double[][] output_5 = new double[][]{};
        long i_6 = 0;
        while ((i_6 <= (rows_2 - k_4))) {
            double[] row_7 = new double[]{};
            long j_8 = 0;
            while ((j_8 <= (cols_3 - k_4))) {
                double sum_9 = 0.0;
                long ki_10 = 0;
                while ((ki_10 < k_4)) {
                    long kj_11 = 0;
                    while ((kj_11 < k_4)) {
                        sum_9 = (sum_9 + (image_0[(int)((i_6 + ki_10) < 0 ? image_0.Length + ((i_6 + ki_10)) : (i_6 + ki_10))][(int)((j_8 + kj_11) < 0 ? image_0[(int)((i_6 + ki_10) < 0 ? image_0.Length + ((i_6 + ki_10)) : (i_6 + ki_10))].Length + ((j_8 + kj_11)) : (j_8 + kj_11))] * kernel_1[(int)(ki_10 < 0 ? kernel_1.Length + (ki_10) : ki_10)][(int)(kj_11 < 0 ? kernel_1[(int)(ki_10 < 0 ? kernel_1.Length + (ki_10) : ki_10)].Length + (kj_11) : kj_11)]));
                        kj_11 = (kj_11 + 1);
                    }
                    ki_10 = (ki_10 + 1);
                }
                row_7 = (Enumerable.ToArray(Enumerable.Append<double>(row_7, sum_9)));
                j_8 = (j_8 + 1);
            }
            output_5 = (Enumerable.ToArray(Enumerable.Append<double[]>(output_5, row_7)));
            i_6 = (i_6 + 1);
        };
        return output_5;
    }

    public static double[][] relu_matrix(double[][] m_12) {
        double[][] out_13 = new double[][]{};
        foreach (double[] row_14 in m_12) {
            double[] new_row_15 = new double[]{};
            foreach (double v_16 in row_14) {
                if ((v_16 > 0.0)) {
                    new_row_15 = (Enumerable.ToArray(Enumerable.Append<double>(new_row_15, v_16)));
                } else {
                    new_row_15 = (Enumerable.ToArray(Enumerable.Append<double>(new_row_15, 0.0)));
                }
            }
            out_13 = (Enumerable.ToArray(Enumerable.Append<double[]>(out_13, new_row_15)));
        };
        return out_13;
    }

    public static double[][] max_pool2x2(double[][] m_17) {
        long rows_18 = m_17.Length;
        long cols_19 = m_17[(int)(0 < 0 ? m_17.Length + (0) : 0)].Length;
        double[][] out_20 = new double[][]{};
        long i_21 = 0;
        while ((i_21 < rows_18)) {
            double[] new_row_22 = new double[]{};
            long j_23 = 0;
            while ((j_23 < cols_19)) {
                double max_val_24 = m_17[(int)(i_21 < 0 ? m_17.Length + (i_21) : i_21)][(int)(j_23 < 0 ? m_17[(int)(i_21 < 0 ? m_17.Length + (i_21) : i_21)].Length + (j_23) : j_23)];
                if ((m_17[(int)(i_21 < 0 ? m_17.Length + (i_21) : i_21)][(int)((j_23 + 1) < 0 ? m_17[(int)(i_21 < 0 ? m_17.Length + (i_21) : i_21)].Length + ((j_23 + 1)) : (j_23 + 1))] > max_val_24)) {
                    max_val_24 = m_17[(int)(i_21 < 0 ? m_17.Length + (i_21) : i_21)][(int)((j_23 + 1) < 0 ? m_17[(int)(i_21 < 0 ? m_17.Length + (i_21) : i_21)].Length + ((j_23 + 1)) : (j_23 + 1))];
                }
                if ((m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))][(int)(j_23 < 0 ? m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))].Length + (j_23) : j_23)] > max_val_24)) {
                    max_val_24 = m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))][(int)(j_23 < 0 ? m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))].Length + (j_23) : j_23)];
                }
                if ((m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))][(int)((j_23 + 1) < 0 ? m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))].Length + ((j_23 + 1)) : (j_23 + 1))] > max_val_24)) {
                    max_val_24 = m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))][(int)((j_23 + 1) < 0 ? m_17[(int)((i_21 + 1) < 0 ? m_17.Length + ((i_21 + 1)) : (i_21 + 1))].Length + ((j_23 + 1)) : (j_23 + 1))];
                }
                new_row_22 = (Enumerable.ToArray(Enumerable.Append<double>(new_row_22, max_val_24)));
                j_23 = (j_23 + 2);
            }
            out_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(out_20, new_row_22)));
            i_21 = (i_21 + 2);
        };
        return out_20;
    }

    public static double[] flatten(double[][] m_25) {
        double[] res_26 = new double[]{};
        foreach (double[] row_27 in m_25) {
            foreach (double v_28 in row_27) {
                res_26 = (Enumerable.ToArray(Enumerable.Append<double>(res_26, v_28)));
            }
        };
        return res_26;
    }

    public static double dense(double[] inputs_29, double[] weights_30, double bias_31) {
        double s_32 = bias_31;
        long i_33 = 0;
        while ((i_33 < inputs_29.Length)) {
            s_32 = (s_32 + (inputs_29[(int)(i_33 < 0 ? inputs_29.Length + (i_33) : i_33)] * weights_30[(int)(i_33 < 0 ? weights_30.Length + (i_33) : i_33)]));
            i_33 = (i_33 + 1);
        };
        return s_32;
    }

    public static double exp_approx(double x_34) {
        double sum_35 = 1.0;
        double term_36 = 1.0;
        long i_37 = 1;
        while ((i_37 <= 10)) {
            term_36 = ((term_36 * x_34) / i_37);
            sum_35 = (sum_35 + term_36);
            i_37 = (i_37 + 1);
        };
        return sum_35;
    }

    public static double sigmoid(double x_38) {
        return (1.0 / (1.0 + Program.exp_approx(-x_38)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if ((probability_48 >= 0.5)) {
                Console.WriteLine(Program._fmtTop("Abnormality detected"));
            } else {
                Console.WriteLine(Program._fmtTop("Normal"));
            }
            Console.WriteLine(Program._fmtTop("Probability:"));
            Console.WriteLine(Program._fmtTop(probability_48));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
