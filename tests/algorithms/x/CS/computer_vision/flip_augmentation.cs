// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] image_24 = new long[][]{new long[]{1, 2, 3}, new long[]{4, 5, 6}, new long[]{7, 8, 9}};
    static double[][] boxes_25 = new double[][]{new double[]{0.0, 0.25, 0.25, 0.5, 0.5}, new double[]{1.0, 0.75, 0.75, 0.5, 0.5}};
    public static long[][] flip_horizontal_image(long[][] img_0) {
        long[][] flipped_1 = new long[][]{};
        long i_2 = 0;
        while ((i_2 < img_0.Length)) {
            long[] row_3 = img_0[(int)(i_2 < 0 ? img_0.Length + (i_2) : i_2)];
            long j_4 = (row_3.Length - 1);
            long[] new_row_5 = new long[]{};
            while ((j_4 >= 0)) {
                new_row_5 = (Enumerable.ToArray(Enumerable.Append<long>(new_row_5, row_3[(int)(j_4 < 0 ? row_3.Length + (j_4) : j_4)])));
                j_4 = (j_4 - 1);
            }
            flipped_1 = (Enumerable.ToArray(Enumerable.Append<long[]>(flipped_1, new_row_5)));
            i_2 = (i_2 + 1);
        };
        return flipped_1;
    }

    public static long[][] flip_vertical_image(long[][] img_6) {
        long[][] flipped_7 = new long[][]{};
        long i_8 = (img_6.Length - 1);
        while ((i_8 >= 0)) {
            flipped_7 = (Enumerable.ToArray(Enumerable.Append<long[]>(flipped_7, img_6[(int)(i_8 < 0 ? img_6.Length + (i_8) : i_8)])));
            i_8 = (i_8 - 1);
        };
        return flipped_7;
    }

    public static double[][] flip_horizontal_boxes(double[][] boxes_9) {
        double[][] result_10 = new double[][]{};
        long i_11 = 0;
        while ((i_11 < boxes_9.Length)) {
            double[] b_12 = boxes_9[(int)(i_11 < 0 ? boxes_9.Length + (i_11) : i_11)];
            double x_new_13 = (1.0 - b_12[(int)(1 < 0 ? b_12.Length + (1) : 1)]);
            result_10 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_10, new double[]{b_12[(int)(0 < 0 ? b_12.Length + (0) : 0)], x_new_13, b_12[(int)(2 < 0 ? b_12.Length + (2) : 2)], b_12[(int)(3 < 0 ? b_12.Length + (3) : 3)], b_12[(int)(4 < 0 ? b_12.Length + (4) : 4)]})));
            i_11 = (i_11 + 1);
        };
        return result_10;
    }

    public static double[][] flip_vertical_boxes(double[][] boxes_14) {
        double[][] result_15 = new double[][]{};
        long i_16 = 0;
        while ((i_16 < boxes_14.Length)) {
            double[] b_17 = boxes_14[(int)(i_16 < 0 ? boxes_14.Length + (i_16) : i_16)];
            double y_new_18 = (1.0 - b_17[(int)(2 < 0 ? b_17.Length + (2) : 2)]);
            result_15 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_15, new double[]{b_17[(int)(0 < 0 ? b_17.Length + (0) : 0)], b_17[(int)(1 < 0 ? b_17.Length + (1) : 1)], y_new_18, b_17[(int)(3 < 0 ? b_17.Length + (3) : 3)], b_17[(int)(4 < 0 ? b_17.Length + (4) : 4)]})));
            i_16 = (i_16 + 1);
        };
        return result_15;
    }

    public static void print_image(long[][] img_19) {
        long i_20 = 0;
        while ((i_20 < img_19.Length)) {
            long[] row_21 = img_19[(int)(i_20 < 0 ? img_19.Length + (i_20) : i_20)];
            long j_22 = 0;
            string line_23 = "";
            while ((j_22 < row_21.Length)) {
                line_23 = ((line_23 + _fmtStr(row_21[(int)(j_22 < 0 ? row_21.Length + (j_22) : j_22)])) + " ");
                j_22 = (j_22 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_23));
            i_20 = (i_20 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Original image:"));
            Program.print_image(image_24);
            Console.WriteLine(Program._fmtTop(_fmtStr(boxes_25)));
            Console.WriteLine(Program._fmtTop("Horizontal flip:"));
            long[][] h_img_26 = Program.flip_horizontal_image(image_24);
            double[][] h_boxes_27 = Program.flip_horizontal_boxes(boxes_25);
            Program.print_image(h_img_26);
            Console.WriteLine(Program._fmtTop(_fmtStr(h_boxes_27)));
            Console.WriteLine(Program._fmtTop("Vertical flip:"));
            long[][] v_img_28 = Program.flip_vertical_image(image_24);
            double[][] v_boxes_29 = Program.flip_vertical_boxes(boxes_25);
            Program.print_image(v_img_28);
            Console.WriteLine(Program._fmtTop(_fmtStr(v_boxes_29)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
