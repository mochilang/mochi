// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] maxpooling(long[][] arr_0, long size_1, long stride_2) {
        long n_3 = arr_0.Length;
        if (((n_3 == 0) || (arr_0[(int)(0 < 0 ? arr_0.Length + (0) : 0)].Length != n_3))) {
            throw new Exception("The input array is not a square matrix");
        };
        long[][] result_4 = new long[][]{};
        long i_5 = 0;
        while (((i_5 + size_1) <= n_3)) {
            long[] row_6 = new long[]{};
            long j_7 = 0;
            while (((j_7 + size_1) <= n_3)) {
                long max_val_8 = arr_0[(int)(i_5 < 0 ? arr_0.Length + (i_5) : i_5)][(int)(j_7 < 0 ? arr_0[(int)(i_5 < 0 ? arr_0.Length + (i_5) : i_5)].Length + (j_7) : j_7)];
                long r_9 = i_5;
                while ((r_9 < (i_5 + size_1))) {
                    long c_10 = j_7;
                    while ((c_10 < (j_7 + size_1))) {
                        long val_11 = arr_0[(int)(r_9 < 0 ? arr_0.Length + (r_9) : r_9)][(int)(c_10 < 0 ? arr_0[(int)(r_9 < 0 ? arr_0.Length + (r_9) : r_9)].Length + (c_10) : c_10)];
                        if ((val_11 > max_val_8)) {
                            max_val_8 = val_11;
                        }
                        c_10 = (c_10 + 1);
                    }
                    r_9 = (r_9 + 1);
                }
                row_6 = (Enumerable.ToArray(Enumerable.Append<long>(row_6, max_val_8)));
                j_7 = (j_7 + stride_2);
            }
            result_4 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_4, row_6)));
            i_5 = (i_5 + stride_2);
        };
        return result_4;
    }

    public static long[][] avgpooling(long[][] arr_12, long size_13, long stride_14) {
        long n_15 = arr_12.Length;
        if (((n_15 == 0) || (arr_12[(int)(0 < 0 ? arr_12.Length + (0) : 0)].Length != n_15))) {
            throw new Exception("The input array is not a square matrix");
        };
        long[][] result_16 = new long[][]{};
        long i_17 = 0;
        while (((i_17 + size_13) <= n_15)) {
            long[] row_18 = new long[]{};
            long j_19 = 0;
            while (((j_19 + size_13) <= n_15)) {
                long sum_20 = 0;
                long r_21 = i_17;
                while ((r_21 < (i_17 + size_13))) {
                    long c_22 = j_19;
                    while ((c_22 < (j_19 + size_13))) {
                        sum_20 = (sum_20 + arr_12[(int)(r_21 < 0 ? arr_12.Length + (r_21) : r_21)][(int)(c_22 < 0 ? arr_12[(int)(r_21 < 0 ? arr_12.Length + (r_21) : r_21)].Length + (c_22) : c_22)]);
                        c_22 = (c_22 + 1);
                    }
                    r_21 = (r_21 + 1);
                }
                row_18 = (Enumerable.ToArray(Enumerable.Append<long>(row_18, (sum_20 / (size_13 * size_13)))));
                j_19 = (j_19 + stride_14);
            }
            result_16 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_16, row_18)));
            i_17 = (i_17 + stride_14);
        };
        return result_16;
    }

    public static void print_matrix(long[][] mat_23) {
        long i_24 = 0;
        while ((i_24 < mat_23.Length)) {
            string line_25 = "";
            long j_26 = 0;
            while ((j_26 < mat_23[(int)(i_24 < 0 ? mat_23.Length + (i_24) : i_24)].Length)) {
                line_25 = (line_25 + _fmtStr(mat_23[(int)(i_24 < 0 ? mat_23.Length + (i_24) : i_24)][(int)(j_26 < 0 ? mat_23[(int)(i_24 < 0 ? mat_23.Length + (i_24) : i_24)].Length + (j_26) : j_26)]));
                if ((j_26 < (mat_23[(int)(i_24 < 0 ? mat_23.Length + (i_24) : i_24)].Length - 1))) {
                    line_25 = (line_25 + " ");
                }
                j_26 = (j_26 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_25));
            i_24 = (i_24 + 1);
        };
    }

    public static void main() {
        long[][] arr1_27 = new long[][]{new long[]{1, 2, 3, 4}, new long[]{5, 6, 7, 8}, new long[]{9, 10, 11, 12}, new long[]{13, 14, 15, 16}};
        long[][] arr2_28 = new long[][]{new long[]{147, 180, 122}, new long[]{241, 76, 32}, new long[]{126, 13, 157}};
        Program.print_matrix(Program.maxpooling(arr1_27, 2, 2));
        Program.print_matrix(Program.maxpooling(arr2_28, 2, 1));
        Program.print_matrix(Program.avgpooling(arr1_27, 2, 2));
        Program.print_matrix(Program.avgpooling(arr2_28, 2, 1));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
