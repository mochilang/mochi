// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] segment_image(long[][] image_0, long[] thresholds_1) {
        long[][] segmented_2 = new long[][]{};
        long i_3 = 0;
        while ((i_3 < image_0.Length)) {
            long[] row_4 = new long[]{};
            long j_5 = 0;
            while ((j_5 < image_0[(int)(i_3 < 0 ? image_0.Length + (i_3) : i_3)].Length)) {
                long pixel_6 = image_0[(int)(i_3 < 0 ? image_0.Length + (i_3) : i_3)][(int)(j_5 < 0 ? image_0[(int)(i_3 < 0 ? image_0.Length + (i_3) : i_3)].Length + (j_5) : j_5)];
                long label_7 = 0;
                long k_8 = 0;
                while ((k_8 < thresholds_1.Length)) {
                    if ((pixel_6 > thresholds_1[(int)(k_8 < 0 ? thresholds_1.Length + (k_8) : k_8)])) {
                        label_7 = (k_8 + 1);
                    }
                    k_8 = (k_8 + 1);
                }
                row_4 = (Enumerable.ToArray(Enumerable.Append<long>(row_4, label_7)));
                j_5 = (j_5 + 1);
            }
            segmented_2 = (Enumerable.ToArray(Enumerable.Append<long[]>(segmented_2, row_4)));
            i_3 = (i_3 + 1);
        };
        return segmented_2;
    }

    public static void main() {
        long[][] image_9 = new long[][]{new long[]{80, 120, 180}, new long[]{40, 90, 150}, new long[]{20, 60, 100}};
        long[] thresholds_10 = new long[]{50, 100, 150};
        long[][] segmented_11 = Program.segment_image(image_9, thresholds_10);
        Console.WriteLine(Program._fmtTop(segmented_11));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
