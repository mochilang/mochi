// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long round_int(double x_0) {
        if ((x_0 >= 0.0)) {
            return _atoi((x_0 + 0.5));
        };
        return _atoi((x_0 - 0.5));
    }

    public static double[][] zeros(long rows_1, long cols_2) {
        double[][] res_3 = new double[][]{};
        long i_4 = 0;
        while ((i_4 < rows_1)) {
            double[] row_5 = new double[]{};
            long j_6 = 0;
            while ((j_6 < cols_2)) {
                row_5 = (Enumerable.ToArray(Enumerable.Append<double>(row_5, 0.0)));
                j_6 = (j_6 + 1);
            }
            res_3 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_3, row_5)));
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static double[][] warp(double[][] image_7, double[][] h_flow_8, double[][] v_flow_9) {
        long h_10 = image_7.Length;
        long w_11 = image_7[(int)(0 < 0 ? image_7.Length + (0) : 0)].Length;
        double[][] out_12 = new double[][]{};
        long y_13 = 0;
        while ((y_13 < h_10)) {
            double[] row_14 = new double[]{};
            long x_15 = 0;
            while ((x_15 < w_11)) {
                long sx_16 = (x_15 - Program.round_int(h_flow_8[(int)(y_13 < 0 ? h_flow_8.Length + (y_13) : y_13)][(int)(x_15 < 0 ? h_flow_8[(int)(y_13 < 0 ? h_flow_8.Length + (y_13) : y_13)].Length + (x_15) : x_15)]));
                long sy_17 = (y_13 - Program.round_int(v_flow_9[(int)(y_13 < 0 ? v_flow_9.Length + (y_13) : y_13)][(int)(x_15 < 0 ? v_flow_9[(int)(y_13 < 0 ? v_flow_9.Length + (y_13) : y_13)].Length + (x_15) : x_15)]));
                if (((((sx_16 >= 0) && (sx_16 < w_11)) && (sy_17 >= 0)) && (sy_17 < h_10))) {
                    row_14 = (Enumerable.ToArray(Enumerable.Append<double>(row_14, image_7[(int)(sy_17 < 0 ? image_7.Length + (sy_17) : sy_17)][(int)(sx_16 < 0 ? image_7[(int)(sy_17 < 0 ? image_7.Length + (sy_17) : sy_17)].Length + (sx_16) : sx_16)])));
                } else {
                    row_14 = (Enumerable.ToArray(Enumerable.Append<double>(row_14, 0.0)));
                }
                x_15 = (x_15 + 1);
            }
            out_12 = (Enumerable.ToArray(Enumerable.Append<double[]>(out_12, row_14)));
            y_13 = (y_13 + 1);
        };
        return out_12;
    }

    public static double[][] convolve(double[][] img_18, double[][] ker_19) {
        long h_20 = img_18.Length;
        long w_21 = img_18[(int)(0 < 0 ? img_18.Length + (0) : 0)].Length;
        long kh_22 = ker_19.Length;
        long kw_23 = ker_19[(int)(0 < 0 ? ker_19.Length + (0) : 0)].Length;
        long py_24 = (kh_22 / 2);
        long px_25 = (kw_23 / 2);
        double[][] out_26 = new double[][]{};
        long y_27 = 0;
        while ((y_27 < h_20)) {
            double[] row_28 = new double[]{};
            long x_29 = 0;
            while ((x_29 < w_21)) {
                double s_30 = 0.0;
                long ky_31 = 0;
                while ((ky_31 < kh_22)) {
                    long kx_32 = 0;
                    while ((kx_32 < kw_23)) {
                        long iy_33 = ((y_27 + ky_31) - py_24);
                        long ix_34 = ((x_29 + kx_32) - px_25);
                        if (((((iy_33 >= 0) && (iy_33 < h_20)) && (ix_34 >= 0)) && (ix_34 < w_21))) {
                            s_30 = (s_30 + (img_18[(int)(iy_33 < 0 ? img_18.Length + (iy_33) : iy_33)][(int)(ix_34 < 0 ? img_18[(int)(iy_33 < 0 ? img_18.Length + (iy_33) : iy_33)].Length + (ix_34) : ix_34)] * ker_19[(int)(ky_31 < 0 ? ker_19.Length + (ky_31) : ky_31)][(int)(kx_32 < 0 ? ker_19[(int)(ky_31 < 0 ? ker_19.Length + (ky_31) : ky_31)].Length + (kx_32) : kx_32)]));
                        }
                        kx_32 = (kx_32 + 1);
                    }
                    ky_31 = (ky_31 + 1);
                }
                row_28 = (Enumerable.ToArray(Enumerable.Append<double>(row_28, s_30)));
                x_29 = (x_29 + 1);
            }
            out_26 = (Enumerable.ToArray(Enumerable.Append<double[]>(out_26, row_28)));
            y_27 = (y_27 + 1);
        };
        return out_26;
    }

    public static double[][][] horn_schunck(double[][] image0_35, double[][] image1_36, long num_iter_37, double alpha_38) {
        long h_39 = image0_35.Length;
        long w_40 = image0_35[(int)(0 < 0 ? image0_35.Length + (0) : 0)].Length;
        double[][] u_41 = Program.zeros(h_39, w_40);
        double[][] v_42 = Program.zeros(h_39, w_40);
        double[][] kernel_x_43 = new double[][]{new double[]{-0.25, 0.25}, new double[]{-0.25, 0.25}};
        double[][] kernel_y_44 = new double[][]{new double[]{-0.25, -0.25}, new double[]{0.25, 0.25}};
        double[][] kernel_t_45 = new double[][]{new double[]{0.25, 0.25}, new double[]{0.25, 0.25}};
        double[][] laplacian_46 = new double[][]{new double[]{0.0833333333333, 0.166666666667, 0.0833333333333}, new double[]{0.166666666667, 0.0, 0.166666666667}, new double[]{0.0833333333333, 0.166666666667, 0.0833333333333}};
        long it_47 = 0;
        while ((it_47 < num_iter_37)) {
            double[][] warped_48 = Program.warp(image0_35, u_41, v_42);
            double[][] dx1_49 = Program.convolve(warped_48, kernel_x_43);
            double[][] dx2_50 = Program.convolve(image1_36, kernel_x_43);
            double[][] dy1_51 = Program.convolve(warped_48, kernel_y_44);
            double[][] dy2_52 = Program.convolve(image1_36, kernel_y_44);
            double[][] dt1_53 = Program.convolve(warped_48, kernel_t_45);
            double[][] dt2_54 = Program.convolve(image1_36, kernel_t_45);
            double[][] avg_u_55 = Program.convolve(u_41, laplacian_46);
            double[][] avg_v_56 = Program.convolve(v_42, laplacian_46);
            long y_57 = 0;
            while ((y_57 < h_39)) {
                long x_58 = 0;
                while ((x_58 < w_40)) {
                    double dx_59 = (dx1_49[(int)(y_57 < 0 ? dx1_49.Length + (y_57) : y_57)][(int)(x_58 < 0 ? dx1_49[(int)(y_57 < 0 ? dx1_49.Length + (y_57) : y_57)].Length + (x_58) : x_58)] + dx2_50[(int)(y_57 < 0 ? dx2_50.Length + (y_57) : y_57)][(int)(x_58 < 0 ? dx2_50[(int)(y_57 < 0 ? dx2_50.Length + (y_57) : y_57)].Length + (x_58) : x_58)]);
                    double dy_60 = (dy1_51[(int)(y_57 < 0 ? dy1_51.Length + (y_57) : y_57)][(int)(x_58 < 0 ? dy1_51[(int)(y_57 < 0 ? dy1_51.Length + (y_57) : y_57)].Length + (x_58) : x_58)] + dy2_52[(int)(y_57 < 0 ? dy2_52.Length + (y_57) : y_57)][(int)(x_58 < 0 ? dy2_52[(int)(y_57 < 0 ? dy2_52.Length + (y_57) : y_57)].Length + (x_58) : x_58)]);
                    double dt_61 = (dt1_53[(int)(y_57 < 0 ? dt1_53.Length + (y_57) : y_57)][(int)(x_58 < 0 ? dt1_53[(int)(y_57 < 0 ? dt1_53.Length + (y_57) : y_57)].Length + (x_58) : x_58)] - dt2_54[(int)(y_57 < 0 ? dt2_54.Length + (y_57) : y_57)][(int)(x_58 < 0 ? dt2_54[(int)(y_57 < 0 ? dt2_54.Length + (y_57) : y_57)].Length + (x_58) : x_58)]);
                    double au_62 = avg_u_55[(int)(y_57 < 0 ? avg_u_55.Length + (y_57) : y_57)][(int)(x_58 < 0 ? avg_u_55[(int)(y_57 < 0 ? avg_u_55.Length + (y_57) : y_57)].Length + (x_58) : x_58)];
                    double av_63 = avg_v_56[(int)(y_57 < 0 ? avg_v_56.Length + (y_57) : y_57)][(int)(x_58 < 0 ? avg_v_56[(int)(y_57 < 0 ? avg_v_56.Length + (y_57) : y_57)].Length + (x_58) : x_58)];
                    double numer_64 = (((dx_59 * au_62) + (dy_60 * av_63)) + dt_61);
                    double denom_65 = (((alpha_38 * alpha_38) + (dx_59 * dx_59)) + (dy_60 * dy_60));
                    double upd_66 = (numer_64 / denom_65);
                    u_41[(int)(y_57 < 0 ? u_41.Length + (y_57) : y_57)][(int)(x_58)] = (au_62 - (dx_59 * upd_66));
                    v_42[(int)(y_57 < 0 ? v_42.Length + (y_57) : y_57)][(int)(x_58)] = (av_63 - (dy_60 * upd_66));
                    x_58 = (x_58 + 1);
                }
                y_57 = (y_57 + 1);
            }
            it_47 = (it_47 + 1);
        };
        return new double[][][]{u_41, v_42};
    }

    public static void print_matrix(double[][] mat_67) {
        long y_68 = 0;
        while ((y_68 < mat_67.Length)) {
            double[] row_69 = mat_67[(int)(y_68 < 0 ? mat_67.Length + (y_68) : y_68)];
            long x_70 = 0;
            string line_71 = "";
            while ((x_70 < row_69.Length)) {
                line_71 = (line_71 + _fmtStr(Program.round_int(row_69[(int)(x_70 < 0 ? row_69.Length + (x_70) : x_70)])));
                if (((x_70 + 1) < row_69.Length)) {
                    line_71 = (line_71 + " ");
                }
                x_70 = (x_70 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_71));
            y_68 = (y_68 + 1);
        };
    }

    public static void main() {
        double[][] image0_72 = new double[][]{new double[]{0.0, 0.0, 2.0}, new double[]{0.0, 0.0, 2.0}};
        double[][] image1_73 = new double[][]{new double[]{0.0, 2.0, 0.0}, new double[]{0.0, 2.0, 0.0}};
        double[][][] flows_74 = Program.horn_schunck(image0_72, image1_73, 20, 0.1);
        double[][] u_75 = flows_74[(int)(0 < 0 ? flows_74.Length + (0) : 0)];
        double[][] v_76 = flows_74[(int)(1 < 0 ? flows_74.Length + (1) : 1)];
        Program.print_matrix(u_75);
        Console.WriteLine(Program._fmtTop("---"));
        Program.print_matrix(v_76);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
