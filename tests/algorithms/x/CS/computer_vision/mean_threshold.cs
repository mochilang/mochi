// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] img_10 = new long[][]{new long[]{10, 200, 50}, new long[]{100, 150, 30}, new long[]{90, 80, 220}};
    static long[][] result_11 = Program.mean_threshold(img_10);
    public static long[][] mean_threshold(long[][] image_0) {
        long height_1 = image_0.Length;
        long width_2 = image_0[(int)(0 < 0 ? image_0.Length + (0) : 0)].Length;
        long total_3 = 0;
        long i_4 = 0;
        while ((i_4 < height_1)) {
            long j_5 = 0;
            while ((j_5 < width_2)) {
                total_3 = (total_3 + image_0[(int)(i_4 < 0 ? image_0.Length + (i_4) : i_4)][(int)(j_5 < 0 ? image_0[(int)(i_4 < 0 ? image_0.Length + (i_4) : i_4)].Length + (j_5) : j_5)]);
                j_5 = (j_5 + 1);
            }
            i_4 = (i_4 + 1);
        };
        long mean_6 = (total_3 / (height_1 * width_2));
        i_4 = 0;
        while ((i_4 < height_1)) {
            long j_7 = 0;
            while ((j_7 < width_2)) {
                if ((image_0[(int)(i_4 < 0 ? image_0.Length + (i_4) : i_4)][(int)(j_7 < 0 ? image_0[(int)(i_4 < 0 ? image_0.Length + (i_4) : i_4)].Length + (j_7) : j_7)] > mean_6)) {
                    image_0[(int)(i_4 < 0 ? image_0.Length + (i_4) : i_4)][(int)(j_7)] = 255;
                } else {
                    image_0[(int)(i_4 < 0 ? image_0.Length + (i_4) : i_4)][(int)(j_7)] = 0;
                }
                j_7 = (j_7 + 1);
            }
            i_4 = (i_4 + 1);
        };
        return image_0;
    }

    public static void print_image(long[][] image_8) {
        long i_9 = 0;
        while ((i_9 < image_8.Length)) {
            Console.WriteLine(Program._fmtTop(image_8[(int)(i_9 < 0 ? image_8.Length + (i_9) : i_9)]));
            i_9 = (i_9 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_image(result_11);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
