// Generated by Mochi 0.10.61 on 2025-08-09 10:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] image_48 = new long[][]{new long[]{0, 1, 0}, new long[]{1, 0, 1}, new long[]{0, 1, 0}};
    static double[][] glcm_49 = Program.matrix_concurrency(image_48, new long[]{0, 1});
    static double[] descriptors_50 = Program.haralick_descriptors(glcm_49);
    static long idx_51 = 0;
    public static long abs_int(long n_0) {
        if ((n_0 < 0)) {
            return -n_0;
        };
        return n_0;
    }

    public static double sqrt(double x_1) {
        if ((x_1 <= 0.0)) {
            return 0.0;
        };
        double guess_2 = x_1;
        long i_3 = 0;
        while ((i_3 < 10)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double ln(double x_4) {
        if ((x_4 <= 0.0)) {
            return 0.0;
        };
        double e_5 = 2.718281828;
        long n_6 = 0;
        double y_7 = x_4;
        while ((y_7 >= e_5)) {
            y_7 = (y_7 / e_5);
            n_6 = (n_6 + 1);
        };
        while ((y_7 <= (1.0 / e_5))) {
            y_7 = (y_7 * e_5);
            n_6 = (n_6 - 1);
        };
        y_7 = (y_7 - 1.0);
        double term_8 = y_7;
        double result_9 = 0.0;
        long k_10 = 1;
        while ((k_10 <= 20)) {
            if ((_mod(k_10, 2) == 1)) {
                result_9 = (result_9 + (term_8 / (1.0 * k_10)));
            } else {
                result_9 = (result_9 - (term_8 / (1.0 * k_10)));
            }
            term_8 = (term_8 * y_7);
            k_10 = (k_10 + 1);
        };
        return (result_9 + (1.0 * n_6));
    }

    public static double[][] matrix_concurrency(long[][] image_11, long[] coord_12) {
        long offset_x_13 = coord_12[(int)(0 < 0 ? coord_12.Length + (0) : 0)];
        long offset_y_14 = coord_12[(int)(1 < 0 ? coord_12.Length + (1) : 1)];
        long max_val_15 = 0;
        for (var r_16 = 0; r_16 < image_11.Length; r_16++) {
            for (var c_17 = 0; c_17 < image_11[(int)(r_16 < 0 ? image_11.Length + (r_16) : r_16)].Length; c_17++) {
                if ((image_11[(int)(r_16 < 0 ? image_11.Length + (r_16) : r_16)][(int)(c_17 < 0 ? image_11[(int)(r_16 < 0 ? image_11.Length + (r_16) : r_16)].Length + (c_17) : c_17)] > max_val_15)) {
                    max_val_15 = image_11[(int)(r_16 < 0 ? image_11.Length + (r_16) : r_16)][(int)(c_17 < 0 ? image_11[(int)(r_16 < 0 ? image_11.Length + (r_16) : r_16)].Length + (c_17) : c_17)];
                }
            }
        };
        long size_18 = (max_val_15 + 1);
        double[][] matrix_19 = new double[][]{};
        for (var i_20 = 0; i_20 < size_18; i_20++) {
            double[] row_21 = new double[]{};
            for (var j_22 = 0; j_22 < size_18; j_22++) {
                row_21 = (Enumerable.ToArray(Enumerable.Append<double>(row_21, 0.0)));
            }
            matrix_19 = (Enumerable.ToArray(Enumerable.Append<double[]>(matrix_19, row_21)));
        };
        for (var x_23 = 1; x_23 < (image_11.Length - 1); x_23++) {
            for (var y_24 = 1; y_24 < (image_11[(int)(x_23 < 0 ? image_11.Length + (x_23) : x_23)].Length - 1); y_24++) {
                long base_25 = image_11[(int)(x_23 < 0 ? image_11.Length + (x_23) : x_23)][(int)(y_24 < 0 ? image_11[(int)(x_23 < 0 ? image_11.Length + (x_23) : x_23)].Length + (y_24) : y_24)];
                long offset_26 = image_11[(int)((x_23 + offset_x_13) < 0 ? image_11.Length + ((x_23 + offset_x_13)) : (x_23 + offset_x_13))][(int)((y_24 + offset_y_14) < 0 ? image_11[(int)((x_23 + offset_x_13) < 0 ? image_11.Length + ((x_23 + offset_x_13)) : (x_23 + offset_x_13))].Length + ((y_24 + offset_y_14)) : (y_24 + offset_y_14))];
                matrix_19[(int)(base_25 < 0 ? matrix_19.Length + (base_25) : base_25)][(int)(offset_26)] = (matrix_19[(int)(base_25 < 0 ? matrix_19.Length + (base_25) : base_25)][(int)(offset_26 < 0 ? matrix_19[(int)(base_25 < 0 ? matrix_19.Length + (base_25) : base_25)].Length + (offset_26) : offset_26)] + 1.0);
            }
        };
        double total_27 = 0.0;
        for (var i_28 = 0; i_28 < size_18; i_28++) {
            for (var j_29 = 0; j_29 < size_18; j_29++) {
                total_27 = (total_27 + matrix_19[(int)(i_28 < 0 ? matrix_19.Length + (i_28) : i_28)][(int)(j_29 < 0 ? matrix_19[(int)(i_28 < 0 ? matrix_19.Length + (i_28) : i_28)].Length + (j_29) : j_29)]);
            }
        };
        if ((total_27 == 0.0)) {
            return matrix_19;
        };
        for (var i_30 = 0; i_30 < size_18; i_30++) {
            for (var j_31 = 0; j_31 < size_18; j_31++) {
                matrix_19[(int)(i_30 < 0 ? matrix_19.Length + (i_30) : i_30)][(int)(j_31)] = (matrix_19[(int)(i_30 < 0 ? matrix_19.Length + (i_30) : i_30)][(int)(j_31 < 0 ? matrix_19[(int)(i_30 < 0 ? matrix_19.Length + (i_30) : i_30)].Length + (j_31) : j_31)] / total_27);
            }
        };
        return matrix_19;
    }

    public static double[] haralick_descriptors(double[][] matrix_32) {
        long rows_33 = matrix_32.Length;
        long cols_34 = matrix_32[(int)(0 < 0 ? matrix_32.Length + (0) : 0)].Length;
        double maximum_prob_35 = 0.0;
        double correlation_36 = 0.0;
        double energy_37 = 0.0;
        double contrast_38 = 0.0;
        double dissimilarity_39 = 0.0;
        double inverse_difference_40 = 0.0;
        double homogeneity_41 = 0.0;
        double entropy_42 = 0.0;
        long i_43 = 0;
        while ((i_43 < rows_33)) {
            long j_44 = 0;
            while ((j_44 < cols_34)) {
                double val_45 = matrix_32[(int)(i_43 < 0 ? matrix_32.Length + (i_43) : i_43)][(int)(j_44 < 0 ? matrix_32[(int)(i_43 < 0 ? matrix_32.Length + (i_43) : i_43)].Length + (j_44) : j_44)];
                if ((val_45 > maximum_prob_35)) {
                    maximum_prob_35 = val_45;
                }
                correlation_36 = (correlation_36 + (((1.0 * i_43) * j_44) * val_45));
                energy_37 = (energy_37 + (val_45 * val_45));
                long diff_46 = (i_43 - j_44);
                long adiff_47 = Program.abs_int(diff_46);
                contrast_38 = (contrast_38 + (val_45 * ((1.0 * diff_46) * diff_46)));
                dissimilarity_39 = (dissimilarity_39 + (val_45 * (1.0 * adiff_47)));
                inverse_difference_40 = (inverse_difference_40 + (val_45 / (1.0 + (1.0 * adiff_47))));
                homogeneity_41 = (homogeneity_41 + (val_45 / (1.0 + ((1.0 * diff_46) * diff_46))));
                if ((val_45 > 0.0)) {
                    entropy_42 = (entropy_42 - (val_45 * Program.ln(val_45)));
                }
                j_44 = (j_44 + 1);
            }
            i_43 = (i_43 + 1);
        };
        return new double[]{maximum_prob_35, correlation_36, energy_37, contrast_38, dissimilarity_39, inverse_difference_40, homogeneity_41, entropy_42};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_51 < descriptors_50.Length)) {
                Console.WriteLine(Program._fmtTop(_fmtStr(descriptors_50[(int)(idx_51 < 0 ? descriptors_50.Length + (idx_51) : idx_51)])));
                idx_51 = (idx_51 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
