// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] control_21 = new double[][]{new double[]{1.0, 1.0}, new double[]{1.0, 2.0}};
    public static double n_choose_k(long n_0, long k_1) {
        if (((k_1 < 0) || (k_1 > n_0))) {
            return 0.0;
        };
        if (((k_1 == 0) || (k_1 == n_0))) {
            return 1.0;
        };
        double result_2 = 1.0;
        long i_3 = 1;
        while ((i_3 <= k_1)) {
            result_2 = ((result_2 * (1.0 * ((n_0 - k_1) + i_3))) / (1.0 * i_3));
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static double pow_float(double base_4, long exp_5) {
        double result_6 = 1.0;
        long i_7 = 0;
        while ((i_7 < exp_5)) {
            result_6 = (result_6 * base_4);
            i_7 = (i_7 + 1);
        };
        return result_6;
    }

    public static double[] basis_function(double[][] points_8, double t_9) {
        long degree_10 = (points_8.Length - 1);
        double[] res_11 = new double[]{};
        long i_12 = 0;
        while ((i_12 <= degree_10)) {
            double coef_13 = Program.n_choose_k(degree_10, i_12);
            double term_14 = (Program.pow_float((1.0 - t_9), (degree_10 - i_12)) * Program.pow_float(t_9, i_12));
            res_11 = (Enumerable.ToArray(Enumerable.Append<double>(res_11, (coef_13 * term_14))));
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static double[] bezier_point(double[][] points_15, double t_16) {
        double[] basis_17 = Program.basis_function(points_15, t_16);
        double x_18 = 0.0;
        double y_19 = 0.0;
        long i_20 = 0;
        while ((i_20 < points_15.Length)) {
            x_18 = (x_18 + (basis_17[(int)(i_20)] * points_15[(int)(i_20)][(int)(0)]));
            y_19 = (y_19 + (basis_17[(int)(i_20)] * points_15[(int)(i_20)][(int)(1)]));
            i_20 = (i_20 + 1);
        };
        return new double[]{x_18, y_19};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.basis_function(control_21, 0.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.basis_function(control_21, 1.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bezier_point(control_21, 0.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bezier_point(control_21, 1.0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
