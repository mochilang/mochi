// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string repeat_char(string ch_0, long count_1) {
        string result_2 = "";
        long i_3 = 0;
        while ((i_3 < count_1)) {
            result_2 = (result_2 + ch_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static string butterfly_pattern(long n_4) {
        string[] lines_5 = new string[]{};
        long i_6 = 1;
        while ((i_6 < n_4)) {
            string left_7 = Program.repeat_char("*", i_6);
            string mid_8 = Program.repeat_char(" ", ((2 * (n_4 - i_6)) - 1));
            string right_9 = Program.repeat_char("*", i_6);
            lines_5 = (Enumerable.ToArray(Enumerable.Append<string>(lines_5, ((left_7 + mid_8) + right_9))));
            i_6 = (i_6 + 1);
        };
        lines_5 = (Enumerable.ToArray(Enumerable.Append<string>(lines_5, Program.repeat_char("*", ((2 * n_4) - 1)))));
        long j_10 = (n_4 - 1);
        while ((j_10 > 0)) {
            string left_11 = Program.repeat_char("*", j_10);
            string mid_12 = Program.repeat_char(" ", ((2 * (n_4 - j_10)) - 1));
            string right_13 = Program.repeat_char("*", j_10);
            lines_5 = (Enumerable.ToArray(Enumerable.Append<string>(lines_5, ((left_11 + mid_12) + right_13))));
            j_10 = (j_10 - 1);
        };
        string out_14 = "";
        long k_15 = 0;
        while ((k_15 < lines_5.Length)) {
            if ((k_15 > 0)) {
                out_14 = (out_14 + "\n");
            }
            out_14 = (out_14 + lines_5[(int)(k_15)]);
            k_15 = (k_15 + 1);
        };
        return out_14;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.butterfly_pattern(3)));
            Console.WriteLine(Program._fmtTop(Program.butterfly_pattern(5)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
