// Generated by Mochi 0.10.64 (commit 1f50014211) on 2025-08-13 15:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.1415926535897931;
    public static double floor(double x_1) {
        long i_2 = (long)(x_1);
        if ((Convert.ToDouble(i_2) > x_1)) {
            i_2 = (i_2 - 1);
        };
        return Convert.ToDouble(i_2);
    }

    public static double modf(double x_3, double m_4) {
        return (x_3 - (Program.floor((x_3 / m_4)) * m_4));
    }

    public static double sin_taylor(double x_5) {
        double term_6 = x_5;
        double sum_7 = x_5;
        long i_8 = 1;
        while ((i_8 < 10)) {
            double k1_9 = (2.0 * Convert.ToDouble(i_8));
            double k2_10 = (k1_9 + 1.0);
            term_6 = (((-term_6 * x_5) * x_5) / (k1_9 * k2_10));
            sum_7 = (sum_7 + term_6);
            i_8 = (i_8 + 1);
        };
        return sum_7;
    }

    public static double cos_taylor(double x_11) {
        double term_12 = 1.0;
        double sum_13 = 1.0;
        long i_14 = 1;
        while ((i_14 < 10)) {
            double k1_15 = ((2.0 * Convert.ToDouble(i_14)) - 1.0);
            double k2_16 = (2.0 * Convert.ToDouble(i_14));
            term_12 = (((-term_12 * x_11) * x_11) / (k1_15 * k2_16));
            sum_13 = (sum_13 + term_12);
            i_14 = (i_14 + 1);
        };
        return sum_13;
    }

    public static double[] convert_to_2d(double x_17, double y_18, double z_19, double scale_20, double distance_21) {
        double projected_x_22 = (((x_17 * distance_21) / (z_19 + distance_21)) * scale_20);
        double projected_y_23 = (((y_18 * distance_21) / (z_19 + distance_21)) * scale_20);
        return new double[]{projected_x_22, projected_y_23};
    }

    public static double[] rotate(double x_24, double y_25, double z_26, string axis_27, double angle_28) {
        angle_28 = (((Program.modf(angle_28, 360.0) / 450.0) * 180.0) / PI_0);
        angle_28 = Program.modf(angle_28, (2.0 * PI_0));
        if ((angle_28 > PI_0)) {
            angle_28 = (angle_28 - (2.0 * PI_0));
        };
        if ((axis_27 == "z")) {
            double new_x_29 = ((x_24 * Program.cos_taylor(angle_28)) - (y_25 * Program.sin_taylor(angle_28)));
            double new_y_30 = ((y_25 * Program.cos_taylor(angle_28)) + (x_24 * Program.sin_taylor(angle_28)));
            double new_z_31 = z_26;
            return new double[]{new_x_29, new_y_30, new_z_31};
        };
        if ((axis_27 == "x")) {
            double new_y_32 = ((y_25 * Program.cos_taylor(angle_28)) - (z_26 * Program.sin_taylor(angle_28)));
            double new_z_33 = ((z_26 * Program.cos_taylor(angle_28)) + (y_25 * Program.sin_taylor(angle_28)));
            double new_x_34 = x_24;
            return new double[]{new_x_34, new_y_32, new_z_33};
        };
        if ((axis_27 == "y")) {
            double new_x_35 = ((x_24 * Program.cos_taylor(angle_28)) - (z_26 * Program.sin_taylor(angle_28)));
            double new_z_36 = ((z_26 * Program.cos_taylor(angle_28)) + (x_24 * Program.sin_taylor(angle_28)));
            double new_y_37 = y_25;
            return new double[]{new_x_35, new_y_37, new_z_36};
        };
        Console.WriteLine(Program._fmtTop("not a valid axis, choose one of 'x', 'y', 'z'"));
        return new double[]{0.0, 0.0, 0.0};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.rotate(1.0, 2.0, 3.0, "y", 90.0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
