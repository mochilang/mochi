// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class CalcResult {
    public bool ok;
    public double value;
    public string error;
    public override string ToString() => $"CalcResult {{ok = {ok}, value = {value.ToString("0.0")}, error = \"{error}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static CalcResult calc_profit(long[] profit_0, long[] weight_1, long max_weight_2) {
        if ((profit_0.Length != weight_1.Length)) {
            return new CalcResult{ok = false, value = 0.0, error = "The length of profit and weight must be same."};
        };
        if ((max_weight_2 <= 0)) {
            return new CalcResult{ok = false, value = 0.0, error = "max_weight must greater than zero."};
        };
        long i_3 = 0;
        while ((i_3 < profit_0.Length)) {
            if ((profit_0[(int)(i_3)] < 0)) {
                return new CalcResult{ok = false, value = 0.0, error = "Profit can not be negative."};
            }
            if ((weight_1[(int)(i_3)] < 0)) {
                return new CalcResult{ok = false, value = 0.0, error = "Weight can not be negative."};
            }
            i_3 = (i_3 + 1);
        };
        bool[] used_4 = new bool[]{};
        long j_5 = 0;
        while ((j_5 < profit_0.Length)) {
            used_4 = (Enumerable.ToArray(Enumerable.Append<bool>(used_4, false)));
            j_5 = (j_5 + 1);
        };
        long limit_6 = 0;
        double gain_7 = 0.0;
        while ((limit_6 < max_weight_2)) {
            double max_ratio_8 = -1.0;
            long idx_9 = (0 - 1);
            long k_10 = 0;
            while ((k_10 < profit_0.Length)) {
                if ((!used_4[(int)(k_10)])) {
                    double ratio_11 = (Convert.ToDouble(profit_0[(int)(k_10)]) / Convert.ToDouble(weight_1[(int)(k_10)]));
                    if ((ratio_11 > max_ratio_8)) {
                        max_ratio_8 = ratio_11;
                        idx_9 = k_10;
                    }
                }
                k_10 = (k_10 + 1);
            }
            if ((idx_9 == (0 - 1))) {
                break;
            }
            used_4[idx_9] = true;
            if (((max_weight_2 - limit_6) >= weight_1[(int)(idx_9)])) {
                limit_6 = (limit_6 + weight_1[(int)(idx_9)]);
                gain_7 = (gain_7 + Convert.ToDouble(profit_0[(int)(idx_9)]));
            } else {
                gain_7 = (gain_7 + ((Convert.ToDouble((max_weight_2 - limit_6)) / Convert.ToDouble(weight_1[(int)(idx_9)])) * Convert.ToDouble(profit_0[(int)(idx_9)])));
                break;
            }
        };
        return new CalcResult{ok = true, value = gain_7, error = ""};
    }

    public static bool test_sorted() {
        long[] profit_12 = new long[]{10, 20, 30, 40, 50, 60};
        long[] weight_13 = new long[]{2, 4, 6, 8, 10, 12};
        CalcResult res_14 = Program.calc_profit(profit_12, weight_13, 100);
        return (res_14.ok && (res_14.value == 210.0));
    }

    public static bool test_negative_max_weight() {
        long[] profit_15 = new long[]{10, 20, 30, 40, 50, 60};
        long[] weight_16 = new long[]{2, 4, 6, 8, 10, 12};
        CalcResult res_17 = Program.calc_profit(profit_15, weight_16, -15);
        return ((!res_17.ok) && (res_17.error == "max_weight must greater than zero."));
    }

    public static bool test_negative_profit_value() {
        long[] profit_18 = new long[]{10, -20, 30, 40, 50, 60};
        long[] weight_19 = new long[]{2, 4, 6, 8, 10, 12};
        CalcResult res_20 = Program.calc_profit(profit_18, weight_19, 15);
        return ((!res_20.ok) && (res_20.error == "Profit can not be negative."));
    }

    public static bool test_negative_weight_value() {
        long[] profit_21 = new long[]{10, 20, 30, 40, 50, 60};
        long[] weight_22 = new long[]{2, -4, 6, -8, 10, 12};
        CalcResult res_23 = Program.calc_profit(profit_21, weight_22, 15);
        return ((!res_23.ok) && (res_23.error == "Weight can not be negative."));
    }

    public static bool test_null_max_weight() {
        long[] profit_24 = new long[]{10, 20, 30, 40, 50, 60};
        long[] weight_25 = new long[]{2, 4, 6, 8, 10, 12};
        CalcResult res_26 = Program.calc_profit(profit_24, weight_25, 0);
        return ((!res_26.ok) && (res_26.error == "max_weight must greater than zero."));
    }

    public static bool test_unequal_list_length() {
        long[] profit_27 = new long[]{10, 20, 30, 40, 50};
        long[] weight_28 = new long[]{2, 4, 6, 8, 10, 12};
        CalcResult res_29 = Program.calc_profit(profit_27, weight_28, 100);
        return ((!res_29.ok) && (res_29.error == "The length of profit and weight must be same."));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.test_sorted()));
            Console.WriteLine(Program._fmtTop(Program.test_negative_max_weight()));
            Console.WriteLine(Program._fmtTop(Program.test_negative_profit_value()));
            Console.WriteLine(Program._fmtTop(Program.test_negative_weight_value()));
            Console.WriteLine(Program._fmtTop(Program.test_null_max_weight()));
            Console.WriteLine(Program._fmtTop(Program.test_unequal_list_length()));
            Console.WriteLine(Program._fmtTop(true));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
