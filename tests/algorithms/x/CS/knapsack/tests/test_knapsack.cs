// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long knapsack(long capacity_0, long[] weights_1, long[] values_2, long counter_3) {
        if (((counter_3 == 0) || (capacity_0 == 0))) {
            return 0;
        };
        if ((weights_1[(int)((counter_3 - 1))] > capacity_0)) {
            return Program.knapsack(capacity_0, weights_1, values_2, (counter_3 - 1));
        };
        long left_capacity_4 = (capacity_0 - weights_1[(int)((counter_3 - 1))]);
        long include_val_5 = (values_2[(int)((counter_3 - 1))] + Program.knapsack(left_capacity_4, weights_1, values_2, (counter_3 - 1)));
        long exclude_val_6 = Program.knapsack(capacity_0, weights_1, values_2, (counter_3 - 1));
        if ((include_val_5 > exclude_val_6)) {
            return include_val_5;
        };
        return exclude_val_6;
    }

    public static bool test_base_case() {
        long cap_7 = 0;
        long[] val_8 = new long[]{0};
        long[] w_9 = new long[]{0};
        long c_10 = val_8.Length;
        if ((Program.knapsack(cap_7, w_9, val_8, c_10) != 0)) {
            return false;
        };
        long[] val2_11 = new long[]{60};
        long[] w2_12 = new long[]{10};
        long c2_13 = val2_11.Length;
        return (Program.knapsack(cap_7, w2_12, val2_11, c2_13) == 0);
    }

    public static bool test_easy_case() {
        long cap_14 = 3;
        long[] val_15 = new long[]{1, 2, 3};
        long[] w_16 = new long[]{3, 2, 1};
        long c_17 = val_15.Length;
        return (Program.knapsack(cap_14, w_16, val_15, c_17) == 5);
    }

    public static bool test_knapsack() {
        long cap_18 = 50;
        long[] val_19 = new long[]{60, 100, 120};
        long[] w_20 = new long[]{10, 20, 30};
        long c_21 = val_19.Length;
        return (Program.knapsack(cap_18, w_20, val_19, c_21) == 220);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.test_base_case()));
            Console.WriteLine(Program._fmtTop(Program.test_easy_case()));
            Console.WriteLine(Program._fmtTop(Program.test_knapsack()));
            Console.WriteLine(Program._fmtTop(true));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
