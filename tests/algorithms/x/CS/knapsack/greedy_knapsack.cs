// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double calc_profit(long[] profit_0, long[] weight_1, long max_weight_2) {
        if ((profit_0.Length != weight_1.Length)) {
            throw new Exception("The length of profit and weight must be same.");
        };
        if ((max_weight_2 <= 0)) {
            throw new Exception("max_weight must greater than zero.");
        };
        long i_3 = 0;
        while ((i_3 < profit_0.Length)) {
            if ((profit_0[(int)(i_3)] < 0)) {
                throw new Exception("Profit can not be negative.");
            }
            if ((weight_1[(int)(i_3)] < 0)) {
                throw new Exception("Weight can not be negative.");
            }
            i_3 = (i_3 + 1);
        };
        long n_4 = profit_0.Length;
        bool[] used_5 = new bool[]{};
        long j_6 = 0;
        while ((j_6 < n_4)) {
            used_5 = (Enumerable.ToArray(Enumerable.Append<bool>(used_5, false)));
            j_6 = (j_6 + 1);
        };
        long limit_7 = 0;
        double gain_8 = 0.0;
        long count_9 = 0;
        while (((limit_7 < max_weight_2) && (count_9 < n_4))) {
            double maxRatio_10 = -1.0;
            long maxIndex_11 = -1;
            long k_12 = 0;
            while ((k_12 < n_4)) {
                if ((!used_5[(int)(k_12)])) {
                    double ratio_13 = (Convert.ToDouble(profit_0[(int)(k_12)]) / Convert.ToDouble(weight_1[(int)(k_12)]));
                    if ((ratio_13 > maxRatio_10)) {
                        maxRatio_10 = ratio_13;
                        maxIndex_11 = k_12;
                    }
                }
                k_12 = (k_12 + 1);
            }
            if ((maxIndex_11 < 0)) {
                break;
            }
            used_5[maxIndex_11] = true;
            if (((max_weight_2 - limit_7) >= weight_1[(int)(maxIndex_11)])) {
                limit_7 = (limit_7 + weight_1[(int)(maxIndex_11)]);
                gain_8 = (gain_8 + Convert.ToDouble(profit_0[(int)(maxIndex_11)]));
            } else {
                gain_8 = (gain_8 + ((Convert.ToDouble((max_weight_2 - limit_7)) / Convert.ToDouble(weight_1[(int)(maxIndex_11)])) * Convert.ToDouble(profit_0[(int)(maxIndex_11)])));
                break;
            }
            count_9 = (count_9 + 1);
        };
        return gain_8;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.calc_profit(new long[]{1, 2, 3}, new long[]{3, 4, 5}, 15)));
        Console.WriteLine(Program._fmtTop(Program.calc_profit(new long[]{10, 9, 8}, new long[]{3, 4, 5}, 25)));
        Console.WriteLine(Program._fmtTop(Program.calc_profit(new long[]{10, 9, 8}, new long[]{3, 4, 5}, 5)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
