// Generated by Mochi 0.10.64 (commit 1f50014211) on 2025-08-13 15:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class ConnMock {
    public long recv_called;
    public long send_called;
    public long close_called;
    public override string ToString() => $"ConnMock {{recv_called = {recv_called}, send_called = {send_called}, close_called = {close_called}}}";
}
class SocketMock {
    public long bind_called;
    public long listen_called;
    public long accept_called;
    public long shutdown_called;
    public long close_called;
    public ConnMock conn;
    public override string ToString() => $"SocketMock {{bind_called = {bind_called}, listen_called = {listen_called}, accept_called = {accept_called}, shutdown_called = {shutdown_called}, close_called = {close_called}, conn = {conn}}}";
}
class FileMock {
    public long read_called;
    public long[] data;
    public override string ToString() => $"FileMock {{read_called = {read_called}, data = {data}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static ConnMock make_conn_mock() {
        return new ConnMock{recv_called = 0, send_called = 0, close_called = 0};
    }

    public static long conn_recv(ConnMock conn_0, long size_1) {
        conn_0.recv_called = (conn_0.recv_called + 1);
        return 0;
    }

    public static void conn_send(ConnMock conn_2, long data_3) {
        conn_2.send_called = (conn_2.send_called + 1);
    }

    public static void conn_close(ConnMock conn_4) {
        conn_4.close_called = (conn_4.close_called + 1);
    }

    public static SocketMock make_socket_mock(ConnMock conn_5) {
        return new SocketMock{bind_called = 0, listen_called = 0, accept_called = 0, shutdown_called = 0, close_called = 0, conn = conn_5};
    }

    public static void socket_bind(SocketMock sock_6) {
        sock_6.bind_called = (sock_6.bind_called + 1);
    }

    public static void socket_listen(SocketMock sock_7) {
        sock_7.listen_called = (sock_7.listen_called + 1);
    }

    public static ConnMock socket_accept(SocketMock sock_8) {
        sock_8.accept_called = (sock_8.accept_called + 1);
        return sock_8.conn;
    }

    public static void socket_shutdown(SocketMock sock_9) {
        sock_9.shutdown_called = (sock_9.shutdown_called + 1);
    }

    public static void socket_close(SocketMock sock_10) {
        sock_10.close_called = (sock_10.close_called + 1);
    }

    public static FileMock make_file_mock(long[] values_11) {
        return new FileMock{read_called = 0, data = values_11};
    }

    public static long file_read(FileMock f_12, long size_13) {
        if ((f_12.read_called < f_12.data.Length)) {
            long value_14 = _idx(f_12.data, f_12.read_called);
            f_12.read_called = (f_12.read_called + 1);
            return value_14;
        };
        f_12.read_called = (f_12.read_called + 1);
        return 0;
    }

    public static FileMock file_open() {
        return Program.make_file_mock(new long[]{1, 0});
    }

    public static void send_file(SocketMock sock_15, FileMock f_16) {
        Program.socket_bind(sock_15);
        Program.socket_listen(sock_15);
        ConnMock conn_17 = Program.socket_accept(sock_15);
        long __18 = Program.conn_recv(conn_17, 1024);
        long data_19 = Program.file_read(f_16, 1024);
        while ((data_19 != 0)) {
            Program.conn_send(conn_17, data_19);
            data_19 = Program.file_read(f_16, 1024);
        };
        Program.conn_close(conn_17);
        Program.socket_shutdown(sock_15);
        Program.socket_close(sock_15);
    }

    public static string test_send_file_running_as_expected() {
        ConnMock conn_20 = Program.make_conn_mock();
        SocketMock sock_21 = Program.make_socket_mock(conn_20);
        FileMock f_22 = Program.file_open();
        Program.send_file(sock_21, f_22);
        if ((((((((((sock_21.bind_called == 1) && (sock_21.listen_called == 1)) && (sock_21.accept_called == 1)) && (conn_20.recv_called == 1)) && (f_22.read_called >= 1)) && (conn_20.send_called == 1)) && (conn_20.close_called == 1)) && (sock_21.shutdown_called == 1)) && (sock_21.close_called == 1))) {
            return "pass";
        };
        return "fail";
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.test_send_file_running_as_expected()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
