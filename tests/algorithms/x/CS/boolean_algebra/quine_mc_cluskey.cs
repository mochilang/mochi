// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string compare_string(string string1_0, string string2_1) {
        string result_2 = "";
        long count_3 = 0;
        long i_4 = 0;
        while ((i_4 < string1_0.Length)) {
            string c1_5 = _substr(string1_0, i_4, (i_4 + 1));
            string c2_6 = _substr(string2_1, i_4, (i_4 + 1));
            if ((c1_5 != c2_6)) {
                count_3 = (count_3 + 1);
                result_2 = (result_2 + "_");
            } else {
                result_2 = (result_2 + c1_5);
            }
            i_4 = (i_4 + 1);
        };
        if ((count_3 > 1)) {
            return "";
        };
        return result_2;
    }

    public static bool contains_string(string[] arr_7, string value_8) {
        long i_9 = 0;
        while ((i_9 < arr_7.Length)) {
            if ((arr_7[(int)(i_9)] == value_8)) {
                return true;
            }
            i_9 = (i_9 + 1);
        };
        return false;
    }

    public static string[] unique_strings(string[] arr_10) {
        string[] res_11 = new string[]{};
        long i_12 = 0;
        while ((i_12 < arr_10.Length)) {
            if ((!Program.contains_string(res_11, arr_10[(int)(i_12)]))) {
                res_11 = (Enumerable.ToArray(Enumerable.Append(res_11, arr_10[(int)(i_12)])));
            }
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static string[] check(string[] binary_13) {
        string[] pi_14 = new string[]{};
        string[] current_15 = binary_13;
        while (true) {
            string[] check1_16 = new string[]{};
            long i_17 = 0;
            while ((i_17 < current_15.Length)) {
                check1_16 = (Enumerable.ToArray(Enumerable.Append(check1_16, "$")));
                i_17 = (i_17 + 1);
            }
            string[] temp_18 = new string[]{};
            i_17 = 0;
            while ((i_17 < current_15.Length)) {
                long j_19 = (i_17 + 1);
                while ((j_19 < current_15.Length)) {
                    string k_20 = Program.compare_string(current_15[(int)(i_17)], current_15[(int)(j_19)]);
                    if ((k_20 == "")) {
                        check1_16[i_17] = "*";
                        check1_16[j_19] = "*";
                        temp_18 = (Enumerable.ToArray(Enumerable.Append(temp_18, "X")));
                    }
                    j_19 = (j_19 + 1);
                }
                i_17 = (i_17 + 1);
            }
            i_17 = 0;
            while ((i_17 < current_15.Length)) {
                if ((check1_16[(int)(i_17)] == "$")) {
                    pi_14 = (Enumerable.ToArray(Enumerable.Append(pi_14, current_15[(int)(i_17)])));
                }
                i_17 = (i_17 + 1);
            }
            if ((temp_18.Length == 0)) {
                return pi_14;
            }
            current_15 = Program.unique_strings(temp_18);
        };
    }

    public static string[] decimal_to_binary(long no_of_variable_21, long[] minterms_22) {
        string[] temp_23 = new string[]{};
        long idx_24 = 0;
        while ((idx_24 < minterms_22.Length)) {
            long minterm_25 = minterms_22[(int)(idx_24)];
            string string_26 = "";
            long i_27 = 0;
            while ((i_27 < no_of_variable_21)) {
                string_26 = (_fmtStr((minterm_25 % 2)) + string_26);
                minterm_25 = (minterm_25 / 2);
                i_27 = (i_27 + 1);
            }
            temp_23 = (Enumerable.ToArray(Enumerable.Append(temp_23, string_26)));
            idx_24 = (idx_24 + 1);
        };
        return temp_23;
    }

    public static bool is_for_table(string string1_28, string string2_29, long count_30) {
        long count_n_31 = 0;
        long i_32 = 0;
        while ((i_32 < string1_28.Length)) {
            string c1_33 = _substr(string1_28, i_32, (i_32 + 1));
            string c2_34 = _substr(string2_29, i_32, (i_32 + 1));
            if ((c1_33 != c2_34)) {
                count_n_31 = (count_n_31 + 1);
            }
            i_32 = (i_32 + 1);
        };
        return (count_n_31 == count_30);
    }

    public static long count_ones(long[] row_35) {
        long c_36 = 0;
        long j_37 = 0;
        while ((j_37 < row_35.Length)) {
            if ((row_35[(int)(j_37)] == 1)) {
                c_36 = (c_36 + 1);
            }
            j_37 = (j_37 + 1);
        };
        return c_36;
    }

    public static string[] selection(long[][] chart_38, string[] prime_implicants_39) {
        string[] temp_40 = new string[]{};
        long[] select_41 = new long[]{};
        long i_42 = 0;
        while ((i_42 < chart_38.Length)) {
            select_41 = (Enumerable.ToArray(Enumerable.Append(select_41, 0)));
            i_42 = (i_42 + 1);
        };
        long col_43 = 0;
        while ((col_43 < chart_38[(int)(0)].Length)) {
            long count_44 = 0;
            long row_45 = 0;
            while ((row_45 < chart_38.Length)) {
                if ((chart_38[(int)(row_45)][(int)(col_43)] == 1)) {
                    count_44 = (count_44 + 1);
                }
                row_45 = (row_45 + 1);
            }
            if ((count_44 == 1)) {
                long rem_46 = 0;
                row_45 = 0;
                while ((row_45 < chart_38.Length)) {
                    if ((chart_38[(int)(row_45)][(int)(col_43)] == 1)) {
                        rem_46 = row_45;
                    }
                    row_45 = (row_45 + 1);
                }
                select_41[rem_46] = 1;
            }
            col_43 = (col_43 + 1);
        };
        i_42 = 0;
        while ((i_42 < select_41.Length)) {
            if ((select_41[(int)(i_42)] == 1)) {
                long j_47 = 0;
                while ((j_47 < chart_38[(int)(0)].Length)) {
                    if ((chart_38[(int)(i_42)][(int)(j_47)] == 1)) {
                        long r_48 = 0;
                        while ((r_48 < chart_38.Length)) {
                            chart_38[(int)(r_48)][j_47] = 0;
                            r_48 = (r_48 + 1);
                        }
                    }
                    j_47 = (j_47 + 1);
                }
                temp_40 = (Enumerable.ToArray(Enumerable.Append(temp_40, prime_implicants_39[(int)(i_42)])));
            }
            i_42 = (i_42 + 1);
        };
        while (true) {
            long[] counts_49 = new long[]{};
            long r_50 = 0;
            while ((r_50 < chart_38.Length)) {
                counts_49 = (Enumerable.ToArray(Enumerable.Append(counts_49, Program.count_ones(chart_38[(int)(r_50)]))));
                r_50 = (r_50 + 1);
            }
            long max_n_51 = counts_49[(int)(0)];
            long rem_52 = 0;
            long k_53 = 1;
            while ((k_53 < counts_49.Length)) {
                if ((counts_49[(int)(k_53)] > max_n_51)) {
                    max_n_51 = counts_49[(int)(k_53)];
                    rem_52 = k_53;
                }
                k_53 = (k_53 + 1);
            }
            if ((max_n_51 == 0)) {
                return temp_40;
            }
            temp_40 = (Enumerable.ToArray(Enumerable.Append(temp_40, prime_implicants_39[(int)(rem_52)])));
            long j_54 = 0;
            while ((j_54 < chart_38[(int)(0)].Length)) {
                if ((chart_38[(int)(rem_52)][(int)(j_54)] == 1)) {
                    long r2_55 = 0;
                    while ((r2_55 < chart_38.Length)) {
                        chart_38[(int)(r2_55)][j_54] = 0;
                        r2_55 = (r2_55 + 1);
                    }
                }
                j_54 = (j_54 + 1);
            }
        };
    }

    public static long count_char(string s_56, string ch_57) {
        long cnt_58 = 0;
        long i_59 = 0;
        while ((i_59 < s_56.Length)) {
            if ((_substr(s_56, i_59, (i_59 + 1)) == ch_57)) {
                cnt_58 = (cnt_58 + 1);
            }
            i_59 = (i_59 + 1);
        };
        return cnt_58;
    }

    public static long[][] prime_implicant_chart(string[] prime_implicants_60, string[] binary_61) {
        long[][] chart_62 = new long[][]{};
        long i_63 = 0;
        while ((i_63 < prime_implicants_60.Length)) {
            long[] row_64 = new long[]{};
            long j_65 = 0;
            while ((j_65 < binary_61.Length)) {
                row_64 = (Enumerable.ToArray(Enumerable.Append(row_64, 0)));
                j_65 = (j_65 + 1);
            }
            chart_62 = (Enumerable.ToArray(Enumerable.Append(chart_62, row_64)));
            i_63 = (i_63 + 1);
        };
        i_63 = 0;
        while ((i_63 < prime_implicants_60.Length)) {
            long count_66 = Program.count_char(prime_implicants_60[(int)(i_63)], "_");
            long j_67 = 0;
            while ((j_67 < binary_61.Length)) {
                if (Program.is_for_table(prime_implicants_60[(int)(i_63)], binary_61[(int)(j_67)], count_66)) {
                    chart_62[(int)(i_63)][j_67] = 1;
                }
                j_67 = (j_67 + 1);
            }
            i_63 = (i_63 + 1);
        };
        return chart_62;
    }

    public static void main() {
        long no_of_variable_68 = 3;
        long[] minterms_69 = new long[]{1, 5, 7};
        string[] binary_70 = Program.decimal_to_binary(no_of_variable_68, minterms_69);
        string[] prime_implicants_71 = Program.check(binary_70);
        Console.WriteLine(Program._fmtTop("Prime Implicants are:"));
        Console.WriteLine(Program._fmtTop(_fmtStr(prime_implicants_71)));
        long[][] chart_72 = Program.prime_implicant_chart(prime_implicants_71, binary_70);
        string[] essential_prime_implicants_73 = Program.selection(chart_72, prime_implicants_71);
        Console.WriteLine(Program._fmtTop("Essential Prime Implicants are:"));
        Console.WriteLine(Program._fmtTop(_fmtStr(essential_prime_implicants_73)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
