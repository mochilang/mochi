// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Angle {
    public double degrees;
    public override string ToString() => $"Angle {{degrees = {degrees.ToString("0.0")}}}";
}
class Side {
    public double length;
    public Angle angle;
    public long next;
    public override string ToString() => $"Side {{length = {length.ToString("0.0")}, angle = {angle}, next = {next}}}";
}
class Ellipse {
    public double major;
    public double minor;
    public override string ToString() => $"Ellipse {{major = {major.ToString("0.0")}, minor = {minor.ToString("0.0")}}}";
}
class Circle {
    public double radius;
    public override string ToString() => $"Circle {{radius = {radius.ToString("0.0")}}}";
}
class Polygon {
    public Side[] sides;
    public override string ToString() => $"Polygon {{sides = {sides}}}";
}
class Rectangle {
    public Side short_side;
    public Side long_side;
    public Polygon poly;
    public override string ToString() => $"Rectangle {{short_side = {short_side}, long_side = {long_side}, poly = {poly}}}";
}
class Square {
    public Side side;
    public Rectangle rect;
    public override string ToString() => $"Square {{side = {side}, rect = {rect}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    public static Angle make_angle(double deg_1) {
        if (((deg_1 < 0.0) || (deg_1 > 360.0))) {
            throw new Exception("degrees must be between 0 and 360");
        };
        return new Angle{degrees = deg_1};
    }

    public static Side make_side(double length_2, Angle angle_3) {
        if ((length_2 <= 0.0)) {
            throw new Exception("length must be positive");
        };
        return new Side{length = length_2, angle = angle_3, next = -1};
    }

    public static double ellipse_area(Ellipse e_4) {
        return ((PI_0 * e_4.major) * e_4.minor);
    }

    public static double ellipse_perimeter(Ellipse e_5) {
        return (PI_0 * (e_5.major + e_5.minor));
    }

    public static double circle_area(Circle c_6) {
        Ellipse e_7 = new Ellipse{major = c_6.radius, minor = c_6.radius};
        double area_8 = Program.ellipse_area(e_7);
        return area_8;
    }

    public static double circle_perimeter(Circle c_9) {
        Ellipse e_10 = new Ellipse{major = c_9.radius, minor = c_9.radius};
        double per_11 = Program.ellipse_perimeter(e_10);
        return per_11;
    }

    public static double circle_diameter(Circle c_12) {
        return (c_12.radius * 2.0);
    }

    public static double circle_max_parts(double num_cuts_13) {
        if ((num_cuts_13 < 0.0)) {
            throw new Exception("num_cuts must be positive");
        };
        return (((num_cuts_13 + 2.0) + (num_cuts_13 * num_cuts_13)) * 0.5);
    }

    public static Polygon make_polygon() {
        Side[] s_14 = new Side[]{};
        return new Polygon{sides = s_14};
    }

    public static void polygon_add_side(Polygon p_15, Side s_16) {
        p_15.sides = (Enumerable.ToArray(Enumerable.Append<Side>(p_15.sides, s_16)));
    }

    public static Side polygon_get_side(Polygon p_17, long index_18) {
        return p_17.sides[(int)(index_18)];
    }

    public static void polygon_set_side(Polygon p_19, long index_20, Side s_21) {
        Side[] tmp_22 = p_19.sides;
        tmp_22[index_20] = s_21;
        p_19.sides = tmp_22;
    }

    public static Rectangle make_rectangle(double short_len_23, double long_len_24) {
        if (((short_len_23 <= 0.0) || (long_len_24 <= 0.0))) {
            throw new Exception("length must be positive");
        };
        Side short_25 = Program.make_side(short_len_23, Program.make_angle(90.0));
        Side long_26 = Program.make_side(long_len_24, Program.make_angle(90.0));
        Polygon p_27 = Program.make_polygon();
        Program.polygon_add_side(p_27, short_25);
        Program.polygon_add_side(p_27, long_26);
        return new Rectangle{short_side = short_25, long_side = long_26, poly = p_27};
    }

    public static double rectangle_perimeter(Rectangle r_28) {
        return ((r_28.short_side.length + r_28.long_side.length) * 2.0);
    }

    public static double rectangle_area(Rectangle r_29) {
        return (r_29.short_side.length * r_29.long_side.length);
    }

    public static Square make_square(double side_len_30) {
        Rectangle rect_31 = Program.make_rectangle(side_len_30, side_len_30);
        return new Square{side = rect_31.short_side, rect = rect_31};
    }

    public static double square_perimeter(Square s_32) {
        double p_33 = Program.rectangle_perimeter(s_32.rect);
        return p_33;
    }

    public static double square_area(Square s_34) {
        double a_35 = Program.rectangle_area(s_34.rect);
        return a_35;
    }

    public static void main() {
        Angle a_36 = Program.make_angle(90.0);
        Console.WriteLine(Program._fmtTop(a_36.degrees));
        Side s_37 = Program.make_side(5.0, a_36);
        Console.WriteLine(Program._fmtTop(s_37.length));
        Ellipse e_38 = new Ellipse{major = 5.0, minor = 10.0};
        Console.WriteLine(Program._fmtTop(Program.ellipse_area(e_38)));
        Console.WriteLine(Program._fmtTop(Program.ellipse_perimeter(e_38)));
        Circle c_39 = new Circle{radius = 5.0};
        Console.WriteLine(Program._fmtTop(Program.circle_area(c_39)));
        Console.WriteLine(Program._fmtTop(Program.circle_perimeter(c_39)));
        Console.WriteLine(Program._fmtTop(Program.circle_diameter(c_39)));
        Console.WriteLine(Program._fmtTop(Program.circle_max_parts(7.0)));
        Rectangle r_40 = Program.make_rectangle(5.0, 10.0);
        Console.WriteLine(Program._fmtTop(Program.rectangle_perimeter(r_40)));
        Console.WriteLine(Program._fmtTop(Program.rectangle_area(r_40)));
        Square q_41 = Program.make_square(5.0);
        Console.WriteLine(Program._fmtTop(Program.square_perimeter(q_41)));
        Console.WriteLine(Program._fmtTop(Program.square_area(q_41)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
