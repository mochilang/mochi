// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.1415926535897931;
    public static double abs(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double to_radians(double deg_2) {
        return ((deg_2 * PI_0) / 180.0);
    }

    public static double sin_taylor(double x_3) {
        double term_4 = x_3;
        double sum_5 = x_3;
        long i_6 = 1;
        while ((i_6 < 10)) {
            double k1_7 = (2.0 * Convert.ToDouble(i_6));
            double k2_8 = (k1_7 + 1.0);
            term_4 = (((-term_4 * x_3) * x_3) / (k1_7 * k2_8));
            sum_5 = (sum_5 + term_4);
            i_6 = (i_6 + 1);
        };
        return sum_5;
    }

    public static double cos_taylor(double x_9) {
        double term_10 = 1.0;
        double sum_11 = 1.0;
        long i_12 = 1;
        while ((i_12 < 10)) {
            double k1_13 = ((2.0 * Convert.ToDouble(i_12)) - 1.0);
            double k2_14 = (2.0 * Convert.ToDouble(i_12));
            term_10 = (((-term_10 * x_9) * x_9) / (k1_13 * k2_14));
            sum_11 = (sum_11 + term_10);
            i_12 = (i_12 + 1);
        };
        return sum_11;
    }

    public static double[] rect(double mag_15, double angle_16) {
        double c_17 = Program.cos_taylor(angle_16);
        double s_18 = Program.sin_taylor(angle_16);
        return new double[]{(mag_15 * c_17), (mag_15 * s_18)};
    }

    public static double[] multiply(double[] a_19, double[] b_20) {
        return new double[]{((_idx(a_19, 0) * _idx(b_20, 0)) - (_idx(a_19, 1) * _idx(b_20, 1))), ((_idx(a_19, 0) * _idx(b_20, 1)) + (_idx(a_19, 1) * _idx(b_20, 0)))};
    }

    public static double[] apparent_power(double voltage_21, double current_22, double voltage_angle_23, double current_angle_24) {
        double vrad_25 = Program.to_radians(voltage_angle_23);
        double irad_26 = Program.to_radians(current_angle_24);
        double[] vrect_27 = Program.rect(voltage_21, vrad_25);
        double[] irect_28 = Program.rect(current_22, irad_26);
        double[] result_29 = Program.multiply(vrect_27, irect_28);
        return result_29;
    }

    public static bool approx_equal(double[] a_30, double[] b_31, double eps_32) {
        return ((Program.abs((_idx(a_30, 0) - _idx(b_31, 0))) < eps_32) && (Program.abs((_idx(a_30, 1) - _idx(b_31, 1))) < eps_32));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
