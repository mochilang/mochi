// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double BOLTZMANN_3 = (1.380649 / Math.Pow(10.0, 23));
    static double ELECTRON_VOLT_4 = (1.6021766340000001 / Math.Pow(10.0, 19));
    static double TEMPERATURE_5 = 300.0;
    public static double pow10(long n_0) {
        double result_1 = 1.0;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            result_1 = (result_1 * 10.0);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static double ln_series(double x_6) {
        double t_7 = ((x_6 - 1.0) / (x_6 + 1.0));
        double term_8 = t_7;
        double sum_9 = 0.0;
        long n_10 = 1;
        while ((n_10 <= 19)) {
            sum_9 = (sum_9 + (term_8 / Convert.ToDouble(n_10)));
            term_8 = ((term_8 * t_7) * t_7);
            n_10 = (n_10 + 2);
        };
        return (2.0 * sum_9);
    }

    public static double ln(double x_11) {
        double y_12 = x_11;
        long k_13 = 0;
        while ((y_12 >= 10.0)) {
            y_12 = (y_12 / 10.0);
            k_13 = (k_13 + 1);
        };
        while ((y_12 < 1.0)) {
            y_12 = (y_12 * 10.0);
            k_13 = (k_13 - 1);
        };
        return (Program.ln_series(y_12) + (Convert.ToDouble(k_13) * Program.ln_series(10.0)));
    }

    public static double builtin_voltage(double donor_conc_14, double acceptor_conc_15, double intrinsic_conc_16) {
        if ((donor_conc_14 <= 0.0)) {
            throw new Exception("Donor concentration should be positive");
        };
        if ((acceptor_conc_15 <= 0.0)) {
            throw new Exception("Acceptor concentration should be positive");
        };
        if ((intrinsic_conc_16 <= 0.0)) {
            throw new Exception("Intrinsic concentration should be positive");
        };
        if ((donor_conc_14 <= intrinsic_conc_16)) {
            throw new Exception("Donor concentration should be greater than intrinsic concentration");
        };
        if ((acceptor_conc_15 <= intrinsic_conc_16)) {
            throw new Exception("Acceptor concentration should be greater than intrinsic concentration");
        };
        return (((BOLTZMANN_3 * TEMPERATURE_5) * Program.ln(((donor_conc_14 * acceptor_conc_15) / (intrinsic_conc_16 * intrinsic_conc_16)))) / ELECTRON_VOLT_4);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.builtin_voltage(Math.Pow(10.0, 17), Math.Pow(10.0, 17), Math.Pow(10.0, 10)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
