// Generated by Mochi 0.10.64 (commit 1f50014211) on 2025-08-13 15:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[] example1_24 = Program.circular_convolution(new double[]{2.0, 1.0, 2.0, -1.0}, new double[]{1.0, 2.0, 3.0, 4.0});
    public static double floor(double x_0) {
        long i_1 = (long)(x_0);
        if ((Convert.ToDouble(i_1) > x_0)) {
            i_1 = (i_1 - 1);
        };
        return Convert.ToDouble(i_1);
    }

    public static double pow10(long n_2) {
        double p_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < n_2)) {
            p_3 = (p_3 * 10.0);
            i_4 = (i_4 + 1);
        };
        return p_3;
    }

    public static double roundn(double x_5, long n_6) {
        double m_7 = Math.Pow(10.0, n_6);
        return (Program.floor(((x_5 * m_7) + 0.5)) / m_7);
    }

    public static double[] pad(double[] signal_8, long target_9) {
        double[] s_10 = signal_8;
        while ((s_10.Length < target_9)) {
            s_10 = ((Func<double[]>)(() => { var _tmp = s_10.ToList(); _tmp.Add(0.0); return _tmp.ToArray(); }))();
        };
        return s_10;
    }

    public static double[] circular_convolution(double[] a_11, double[] b_12) {
        long n1_13 = a_11.Length;
        long n2_14 = b_12.Length;
        long n_15 = ((n1_13 > n2_14) ? n1_13 : n2_14);
        double[] x_16 = Program.pad(a_11, n_15);
        double[] y_17 = Program.pad(b_12, n_15);
        double[] res_18 = new double[]{};
        long i_19 = 0;
        while ((i_19 < n_15)) {
            double sum_20 = 0.0;
            long k_21 = 0;
            while ((k_21 < n_15)) {
                long j_22 = _mod((i_19 - k_21), n_15);
                long idx_23 = ((j_22 < 0) ? (j_22 + n_15) : j_22);
                sum_20 = (sum_20 + (_idx(x_16, k_21) * _idx(y_17, idx_23)));
                k_21 = (k_21 + 1);
            }
            res_18 = ((Func<double[]>)(() => { var _tmp = res_18.ToList(); _tmp.Add(Program.roundn(sum_20, 2)); return _tmp.ToArray(); }))();
            i_19 = (i_19 + 1);
        };
        return res_18;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(example1_24)));
            double[] example2_25 = Program.circular_convolution(new double[]{0.20000000000000001, 0.40000000000000002, 0.59999999999999998, 0.80000000000000004, 1.0, 1.2, 1.3999999999999999, 1.6000000000000001}, new double[]{0.10000000000000001, 0.29999999999999999, 0.5, 0.69999999999999996, 0.90000000000000002, 1.1000000000000001, 1.3, 1.5});
            Console.WriteLine(Program._fmtTop(_fmtStr(example2_25)));
            double[] example3_26 = Program.circular_convolution(new double[]{-1.0, 1.0, 2.0, -2.0}, new double[]{0.5, 1.0, -1.0, 2.0, 0.75});
            Console.WriteLine(Program._fmtTop(_fmtStr(example3_26)));
            double[] example4_27 = Program.circular_convolution(new double[]{1.0, -1.0, 2.0, 3.0, -1.0}, new double[]{1.0, 2.0, 3.0});
            Console.WriteLine(Program._fmtTop(_fmtStr(example4_27)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
