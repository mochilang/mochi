// Generated by Mochi 0.10.64 (commit 1f50014211) on 2025-08-13 15:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Result {
    public string name;
    public double value;
    public override string ToString() => $"Result {{name = \"{name}\", value = {value.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Result r1_13 = Program.electric_power(0.0, 2.0, 5.0);
    public static double absf(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double pow10(long n_1) {
        double p_2 = 1.0;
        long i_3 = 0;
        while ((i_3 < n_1)) {
            p_2 = (p_2 * 10.0);
            i_3 = (i_3 + 1);
        };
        return p_2;
    }

    public static double round_to(double x_4, long n_5) {
        double m_6 = Math.Pow(10.0, n_5);
        return (((dynamic)(Math.Floor(((x_4 * m_6) + 0.5)))) / ((dynamic)(m_6)));
    }

    public static Result electric_power(double voltage_7, double current_8, double power_9) {
        long zeros_10 = 0;
        if ((voltage_7 == 0.0)) {
            zeros_10 = (zeros_10 + 1);
        };
        if ((current_8 == 0.0)) {
            zeros_10 = (zeros_10 + 1);
        };
        if ((power_9 == 0.0)) {
            zeros_10 = (zeros_10 + 1);
        };
        if ((zeros_10 != 1)) {
            throw new Exception("Exactly one argument must be 0");
        } else if ((power_9 < 0.0)) {
            throw new Exception("Power cannot be negative in any electrical/electronics system");
        } else if ((voltage_7 == 0.0)) {
            return new Result{name = "voltage", value = (power_9 / current_8)};
        } else if ((current_8 == 0.0)) {
            return new Result{name = "current", value = (power_9 / voltage_7)};
        } else if ((power_9 == 0.0)) {
            double p_11 = Program.absf((voltage_7 * current_8));
            return new Result{name = "power", value = Program.round_to(p_11, 2)};
        } else {
            throw new Exception("Unhandled case");
        };
        return default(Result);
    }

    public static string str_result(Result r_12) {
        return (((("Result(name='" + r_12.name) + "', value=") + _fmtStr(r_12.value)) + ")");
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.str_result(r1_13)));
            Result r2_14 = Program.electric_power(2.0, 2.0, 0.0);
            Console.WriteLine(Program._fmtTop(Program.str_result(r2_14)));
            Result r3_15 = Program.electric_power(-2.0, 3.0, 0.0);
            Console.WriteLine(Program._fmtTop(Program.str_result(r3_15)));
            Result r4_16 = Program.electric_power(2.2000000000000002, 2.2000000000000002, 0.0);
            Console.WriteLine(Program._fmtTop(Program.str_result(r4_16)));
            Result r5_17 = Program.electric_power(2.0, 0.0, 6.0);
            Console.WriteLine(Program._fmtTop(Program.str_result(r5_17)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
