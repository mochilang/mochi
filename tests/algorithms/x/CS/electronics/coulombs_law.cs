// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double COULOMBS_CONSTANT_0 = 8.988e+09;
    public static double abs(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double sqrtApprox(double x_2) {
        if ((x_2 <= 0.0)) {
            return 0.0;
        };
        double guess_3 = x_2;
        long i_4 = 0;
        while ((i_4 < 20)) {
            guess_3 = ((guess_3 + (x_2 / guess_3)) / 2.0);
            i_4 = (i_4 + 1);
        };
        return guess_3;
    }

    public static Dictionary<string, double> coulombs_law(double force_5, double charge1_6, double charge2_7, double distance_8) {
        double charge_product_9 = Program.abs((charge1_6 * charge2_7));
        long zero_count_10 = 0;
        if ((force_5 == 0.0)) {
            zero_count_10 = (zero_count_10 + 1);
        };
        if ((charge1_6 == 0.0)) {
            zero_count_10 = (zero_count_10 + 1);
        };
        if ((charge2_7 == 0.0)) {
            zero_count_10 = (zero_count_10 + 1);
        };
        if ((distance_8 == 0.0)) {
            zero_count_10 = (zero_count_10 + 1);
        };
        if ((zero_count_10 != 1)) {
            throw new Exception("One and only one argument must be 0");
        };
        if ((distance_8 < 0.0)) {
            throw new Exception("Distance cannot be negative");
        };
        if ((force_5 == 0.0)) {
            double f_11 = ((COULOMBS_CONSTANT_0 * charge_product_9) / (distance_8 * distance_8));
            return new Dictionary<string, double>{{"force", f_11}};
        };
        if ((charge1_6 == 0.0)) {
            double c1_12 = ((Program.abs(force_5) * (distance_8 * distance_8)) / (COULOMBS_CONSTANT_0 * charge2_7));
            return new Dictionary<string, double>{{"charge1", c1_12}};
        };
        if ((charge2_7 == 0.0)) {
            double c2_13 = ((Program.abs(force_5) * (distance_8 * distance_8)) / (COULOMBS_CONSTANT_0 * charge1_6));
            return new Dictionary<string, double>{{"charge2", c2_13}};
        };
        double d_14 = Program.sqrtApprox(((COULOMBS_CONSTANT_0 * charge_product_9) / Program.abs(force_5)));
        return new Dictionary<string, double>{{"distance", d_14}};
    }

    public static void print_map(Dictionary<string, double> m_15) {
        foreach (var k_16 in m_15.Keys) {
            Console.WriteLine(Program._fmtTop((((("{\"" + k_16) + "\": ") + _fmtStr((m_15.ContainsKey(k_16) ? m_15[k_16] : 0.0))) + "}")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_map(Program.coulombs_law(0.0, 3.0, 5.0, 2000.0));
            Program.print_map(Program.coulombs_law(10.0, 3.0, 5.0, 0.0));
            Program.print_map(Program.coulombs_law(10.0, 0.0, 5.0, 2000.0));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
