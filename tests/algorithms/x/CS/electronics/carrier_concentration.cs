// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class CarrierResult {
    public string name;
    public double value;
    public override string ToString() => $"CarrierResult {{name = \"{name}\", value = {value.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static CarrierResult r1_7 = Program.carrier_concentration(25.0, 100.0, 0.0);
    public static double sqrtApprox(double x_0) {
        double guess_1 = (x_0 / 2.0);
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static CarrierResult carrier_concentration(double electron_conc_3, double hole_conc_4, double intrinsic_conc_5) {
        long zero_count_6 = 0;
        if ((electron_conc_3 == 0.0)) {
            zero_count_6 = (zero_count_6 + 1);
        };
        if ((hole_conc_4 == 0.0)) {
            zero_count_6 = (zero_count_6 + 1);
        };
        if ((intrinsic_conc_5 == 0.0)) {
            zero_count_6 = (zero_count_6 + 1);
        };
        if ((zero_count_6 != 1)) {
            throw new Exception("You cannot supply more or less than 2 values");
        };
        if ((electron_conc_3 < 0.0)) {
            throw new Exception("Electron concentration cannot be negative in a semiconductor");
        };
        if ((hole_conc_4 < 0.0)) {
            throw new Exception("Hole concentration cannot be negative in a semiconductor");
        };
        if ((intrinsic_conc_5 < 0.0)) {
            throw new Exception("Intrinsic concentration cannot be negative in a semiconductor");
        };
        if ((electron_conc_3 == 0.0)) {
            return new CarrierResult{name = "electron_conc", value = ((intrinsic_conc_5 * intrinsic_conc_5) / hole_conc_4)};
        };
        if ((hole_conc_4 == 0.0)) {
            return new CarrierResult{name = "hole_conc", value = ((intrinsic_conc_5 * intrinsic_conc_5) / electron_conc_3)};
        };
        if ((intrinsic_conc_5 == 0.0)) {
            return new CarrierResult{name = "intrinsic_conc", value = Program.sqrtApprox((electron_conc_3 * hole_conc_4))};
        };
        return new CarrierResult{name = "", value = -1.0};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((r1_7.name + ", ") + _fmtStr(r1_7.value))));
            CarrierResult r2_8 = Program.carrier_concentration(0.0, 1600.0, 200.0);
            Console.WriteLine(Program._fmtTop(((r2_8.name + ", ") + _fmtStr(r2_8.value))));
            CarrierResult r3_9 = Program.carrier_concentration(1000.0, 0.0, 1200.0);
            Console.WriteLine(Program._fmtTop(((r3_9.name + ", ") + _fmtStr(r3_9.value))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
