// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string[] valid_colors_0 = new string[]{"Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"};
    static Dictionary<string, long> significant_figures_color_values_1 = new Dictionary<string, long>{{"Black", 0}, {"Brown", 1}, {"Red", 2}, {"Orange", 3}, {"Yellow", 4}, {"Green", 5}, {"Blue", 6}, {"Violet", 7}, {"Grey", 8}, {"White", 9}};
    static Dictionary<string, double> multiplier_color_values_2 = new Dictionary<string, double>{{"Black", 1.0}, {"Brown", 10.0}, {"Red", 100.0}, {"Orange", 1000.0}, {"Yellow", 10000.0}, {"Green", 100000.0}, {"Blue", 1000000.0}, {"Violet", 10000000.0}, {"Grey", 100000000.0}, {"White", 1000000000.0}, {"Gold", 0.10000000000000001}, {"Silver", 0.01}};
    static Dictionary<string, double> tolerance_color_values_3 = new Dictionary<string, double>{{"Brown", 1.0}, {"Red", 2.0}, {"Orange", 0.050000000000000003}, {"Yellow", 0.02}, {"Green", 0.5}, {"Blue", 0.25}, {"Violet", 0.10000000000000001}, {"Grey", 0.01}, {"Gold", 5.0}, {"Silver", 10.0}};
    static Dictionary<string, long> temperature_coeffecient_color_values_4 = new Dictionary<string, long>{{"Black", 250}, {"Brown", 100}, {"Red", 50}, {"Orange", 15}, {"Yellow", 25}, {"Green", 20}, {"Blue", 10}, {"Violet", 5}, {"Grey", 1}};
    public static bool contains(string[] list_5, string value_6) {
        foreach (string c_7 in list_5) {
            if ((c_7 == value_6)) {
                return true;
            }
        };
        return false;
    }

    public static long get_significant_digits(string[] colors_8) {
        long digit_9 = 0;
        foreach (string color_10 in colors_8) {
            if ((!(significant_figures_color_values_1.ContainsKey(color_10)))) {
                throw new Exception((color_10 + " is not a valid color for significant figure bands"));
            }
            digit_9 = ((digit_9 * 10) + (significant_figures_color_values_1.ContainsKey(color_10) ? significant_figures_color_values_1[color_10] : 0));
        };
        return digit_9;
    }

    public static double get_multiplier(string color_11) {
        if ((!(multiplier_color_values_2.ContainsKey(color_11)))) {
            throw new Exception((color_11 + " is not a valid color for multiplier band"));
        };
        return (multiplier_color_values_2.ContainsKey(color_11) ? multiplier_color_values_2[color_11] : 0.0);
    }

    public static double get_tolerance(string color_12) {
        if ((!(tolerance_color_values_3.ContainsKey(color_12)))) {
            throw new Exception((color_12 + " is not a valid color for tolerance band"));
        };
        return (tolerance_color_values_3.ContainsKey(color_12) ? tolerance_color_values_3[color_12] : 0.0);
    }

    public static long get_temperature_coeffecient(string color_13) {
        if ((!(temperature_coeffecient_color_values_4.ContainsKey(color_13)))) {
            throw new Exception((color_13 + " is not a valid color for temperature coeffecient band"));
        };
        return (temperature_coeffecient_color_values_4.ContainsKey(color_13) ? temperature_coeffecient_color_values_4[color_13] : 0);
    }

    public static long get_band_type_count(long total_14, string typ_15) {
        if ((total_14 == 3)) {
            if ((typ_15 == "significant")) {
                return 2;
            }
            if ((typ_15 == "multiplier")) {
                return 1;
            }
            throw new Exception((typ_15 + " is not valid for a 3 band resistor"));
        } else if ((total_14 == 4)) {
            if ((typ_15 == "significant")) {
                return 2;
            }
            if ((typ_15 == "multiplier")) {
                return 1;
            }
            if ((typ_15 == "tolerance")) {
                return 1;
            }
            throw new Exception((typ_15 + " is not valid for a 4 band resistor"));
        } else if ((total_14 == 5)) {
            if ((typ_15 == "significant")) {
                return 3;
            }
            if ((typ_15 == "multiplier")) {
                return 1;
            }
            if ((typ_15 == "tolerance")) {
                return 1;
            }
            throw new Exception((typ_15 + " is not valid for a 5 band resistor"));
        } else if ((total_14 == 6)) {
            if ((typ_15 == "significant")) {
                return 3;
            }
            if ((typ_15 == "multiplier")) {
                return 1;
            }
            if ((typ_15 == "tolerance")) {
                return 1;
            }
            if ((typ_15 == "temp_coeffecient")) {
                return 1;
            }
            throw new Exception((typ_15 + " is not valid for a 6 band resistor"));
        } else {
            throw new Exception((_fmtStr(total_14) + " is not a valid number of bands"));
        };
        return default(long);
    }

    public static bool check_validity(long number_of_bands_16, string[] colors_17) {
        if (((number_of_bands_16 < 3) || (number_of_bands_16 > 6))) {
            throw new Exception("Invalid number of bands. Resistor bands must be 3 to 6");
        };
        if ((number_of_bands_16 != colors_17.Length)) {
            throw new Exception((((("Expecting " + _fmtStr(number_of_bands_16)) + " colors, provided ") + _fmtStr(colors_17.Length)) + " colors"));
        };
        foreach (string color_18 in colors_17) {
            if ((!Program.contains(valid_colors_0, color_18))) {
                throw new Exception((color_18 + " is not a valid color"));
            }
        };
        return true;
    }

    public static string calculate_resistance(long number_of_bands_19, string[] color_code_list_20) {
        Program.check_validity(number_of_bands_19, color_code_list_20);
        long sig_count_21 = Program.get_band_type_count(number_of_bands_19, "significant");
        string[] significant_colors_22 = _slice<string>(color_code_list_20, 0, sig_count_21);
        long significant_digits_23 = Program.get_significant_digits(significant_colors_22);
        string multiplier_color_24 = _idx(color_code_list_20, sig_count_21);
        double multiplier_25 = Program.get_multiplier(multiplier_color_24);
        double tolerance_26 = 20.0;
        if ((number_of_bands_19 >= 4)) {
            string tolerance_color_27 = _idx(color_code_list_20, (sig_count_21 + 1));
            tolerance_26 = Program.get_tolerance(tolerance_color_27);
        };
        long temp_coeff_28 = 0;
        if ((number_of_bands_19 == 6)) {
            string temp_color_29 = _idx(color_code_list_20, (sig_count_21 + 2));
            temp_coeff_28 = Program.get_temperature_coeffecient(temp_color_29);
        };
        double resistance_value_30 = (multiplier_25 * significant_digits_23);
        string resistance_str_31 = _fmtStr(resistance_value_30);
        if ((resistance_value_30 == _atoi(resistance_value_30))) {
            resistance_str_31 = _fmtStr(_atoi(resistance_value_30));
        };
        string answer_32 = (((resistance_str_31 + "Ω ±") + _fmtStr(tolerance_26)) + "% ");
        if ((temp_coeff_28 != 0)) {
            answer_32 = ((answer_32 + _fmtStr(temp_coeff_28)) + " ppm/K");
        };
        return answer_32;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
