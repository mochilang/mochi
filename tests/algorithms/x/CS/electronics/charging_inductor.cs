// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double expApprox(double x_0) {
        if ((x_0 < 0.0)) {
            return (1.0 / Program.expApprox(-x_0));
        };
        if ((x_0 > 1.0)) {
            double half_1 = Program.expApprox((x_0 / 2.0));
            return (half_1 * half_1);
        };
        double sum_2 = 1.0;
        double term_3 = 1.0;
        long n_4 = 1;
        while ((n_4 < 20)) {
            term_3 = ((term_3 * x_0) / Convert.ToDouble(n_4));
            sum_2 = (sum_2 + term_3);
            n_4 = (n_4 + 1);
        };
        return sum_2;
    }

    public static double floor(double x_5) {
        long i_6 = Convert.ToInt64(x_5);
        if ((Convert.ToDouble(i_6) > x_5)) {
            i_6 = (i_6 - 1);
        };
        return Convert.ToDouble(i_6);
    }

    public static double pow10(long n_7) {
        double result_8 = 1.0;
        long i_9 = 0;
        while ((i_9 < n_7)) {
            result_8 = (result_8 * 10.0);
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static double round(double x_10, long n_11) {
        double m_12 = Program.pow10(n_11);
        return (Program.floor(((x_10 * m_12) + 0.5)) / m_12);
    }

    public static double charging_inductor(double source_voltage_13, double resistance_14, double inductance_15, double time_16) {
        if ((source_voltage_13 <= 0.0)) {
            throw new Exception("Source voltage must be positive.");
        };
        if ((resistance_14 <= 0.0)) {
            throw new Exception("Resistance must be positive.");
        };
        if ((inductance_15 <= 0.0)) {
            throw new Exception("Inductance must be positive.");
        };
        double exponent_17 = ((-time_16 * resistance_14) / inductance_15);
        double current_18 = ((source_voltage_13 / resistance_14) * (1.0 - Program.expApprox(exponent_17)));
        return Program.round(current_18, 3);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.charging_inductor(5.8, 1.5, 2.3, 2.0)));
            Console.WriteLine(Program._fmtTop(Program.charging_inductor(8.0, 5.0, 3.0, 2.0)));
            Console.WriteLine(Program._fmtTop(Program.charging_inductor(8.0, (5.0 * Program.pow10(2)), 3.0, 2.0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
