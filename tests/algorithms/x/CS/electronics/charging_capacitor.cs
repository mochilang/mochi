// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double expApprox(double x_0) {
        double y_1 = x_0;
        bool is_neg_2 = false;
        if ((x_0 < 0.0)) {
            is_neg_2 = true;
            y_1 = -x_0;
        };
        double term_3 = 1.0;
        double sum_4 = 1.0;
        long n_5 = 1;
        while ((n_5 < 30)) {
            term_3 = ((term_3 * y_1) / Convert.ToDouble(n_5));
            sum_4 = (sum_4 + term_3);
            n_5 = (n_5 + 1);
        };
        if (is_neg_2) {
            return (1.0 / sum_4);
        };
        return sum_4;
    }

    public static double round3(double x_6) {
        double scaled_7 = (x_6 * 1000.0);
        if ((scaled_7 >= 0.0)) {
            scaled_7 = (scaled_7 + 0.5);
        } else {
            scaled_7 = (scaled_7 - 0.5);
        };
        long scaled_int_8 = (long)(scaled_7);
        return (Convert.ToDouble(scaled_int_8) / 1000.0);
    }

    public static double charging_capacitor(double source_voltage_9, double resistance_10, double capacitance_11, double time_sec_12) {
        if ((source_voltage_9 <= 0.0)) {
            throw new Exception("Source voltage must be positive.");
        };
        if ((resistance_10 <= 0.0)) {
            throw new Exception("Resistance must be positive.");
        };
        if ((capacitance_11 <= 0.0)) {
            throw new Exception("Capacitance must be positive.");
        };
        double exponent_13 = (-time_sec_12 / (resistance_10 * capacitance_11));
        double voltage_14 = (source_voltage_9 * (1.0 - Program.expApprox(exponent_13)));
        return Program.round3(voltage_14);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.charging_capacitor(0.20000000000000001, 0.90000000000000002, 8.4000000000000004, 0.5)));
            Console.WriteLine(Program._fmtTop(Program.charging_capacitor(2.2000000000000002, 3.5, 2.3999999999999999, 9.0)));
            Console.WriteLine(Program._fmtTop(Program.charging_capacitor(15.0, 200.0, 20.0, 2.0)));
            Console.WriteLine(Program._fmtTop(Program.charging_capacitor(20.0, 2000.0, 0.00029999999999999997, 4.0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
