// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double sqrt_newton(double n_0) {
        if ((n_0 == 0.0)) {
            return 0.0;
        };
        double x_1 = n_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            x_1 = ((x_1 + (n_0 / x_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return x_1;
    }

    public static double hypot(double a_3, double b_4) {
        return Program.sqrt_newton(((a_3 * a_3) + (b_4 * b_4)));
    }

    public static double line_length(Func<double, double> fnc_5, double x_start_6, double x_end_7, long steps_8) {
        double x1_9 = x_start_6;
        var fx1_10 = fnc_5(x_start_6);
        double length_11 = 0.0;
        long i_12 = 0;
        double step_13 = ((x_end_7 - x_start_6) / (1.0 * steps_8));
        while ((i_12 < steps_8)) {
            double x2_14 = (step_13 + x1_9);
            var fx2_15 = fnc_5(x2_14);
            length_11 = (length_11 + Program.hypot((x2_14 - x1_9), (((dynamic)(fx2_15)) - ((dynamic)(fx1_10)))));
            x1_9 = x2_14;
            fx1_10 = fx2_15;
            i_12 = (i_12 + 1);
        };
        return length_11;
    }

    public static double f1(double x_16) {
        return x_16;
    }

    public static double f2(double x_17) {
        return 1.0;
    }

    public static double f3(double x_18) {
        return ((x_18 * x_18) / 10.0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.line_length(f1, 0.0, 1.0, 10)));
            Console.WriteLine(Program._fmtTop(Program.line_length(f2, -5.5, 4.5, 100)));
            Console.WriteLine(Program._fmtTop(Program.line_length(f3, 0.0, 10.0, 1000)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
