// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long normalize_index(long index_0, long n_1) {
        if ((index_0 < 0)) {
            return (n_1 + index_0);
        };
        return index_0;
    }

    public static double find_max_iterative(double[] nums_2) {
        if ((nums_2.Length == 0)) {
            throw new Exception("find_max_iterative() arg is an empty sequence");
        };
        double max_num_3 = nums_2[(int)(0)];
        long i_4 = 0;
        while ((i_4 < nums_2.Length)) {
            double x_5 = nums_2[(int)(i_4)];
            if ((x_5 > max_num_3)) {
                max_num_3 = x_5;
            }
            i_4 = (i_4 + 1);
        };
        return max_num_3;
    }

    public static double find_max_recursive(double[] nums_6, long left_7, long right_8) {
        long n_9 = nums_6.Length;
        if ((n_9 == 0)) {
            throw new Exception("find_max_recursive() arg is an empty sequence");
        };
        if (((((left_7 >= n_9) || (left_7 < (0 - n_9))) || (right_8 >= n_9)) || (right_8 < (0 - n_9)))) {
            throw new Exception("list index out of range");
        };
        long l_10 = Program.normalize_index(left_7, n_9);
        long r_11 = Program.normalize_index(right_8, n_9);
        if ((l_10 == r_11)) {
            return nums_6[(int)(l_10)];
        };
        long mid_12 = ((l_10 + r_11) / 2);
        double left_max_13 = Program.find_max_recursive(nums_6, l_10, mid_12);
        double right_max_14 = Program.find_max_recursive(nums_6, (mid_12 + 1), r_11);
        if ((left_max_13 >= right_max_14)) {
            return left_max_13;
        };
        return right_max_14;
    }

    public static void test_find_max() {
        double[] arr_15 = new double[]{2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0};
        if ((Program.find_max_iterative(arr_15) != 94.0)) {
            throw new Exception("find_max_iterative failed");
        };
        if ((Program.find_max_recursive(arr_15, 0, (arr_15.Length - 1)) != 94.0)) {
            throw new Exception("find_max_recursive failed");
        };
        if ((Program.find_max_recursive(arr_15, -arr_15.Length, -1) != 94.0)) {
            throw new Exception("negative index handling failed");
        };
    }

    public static void main() {
        Program.test_find_max();
        double[] nums_16 = new double[]{2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0};
        Console.WriteLine(Program._fmtTop(Program.find_max_iterative(nums_16)));
        Console.WriteLine(Program._fmtTop(Program.find_max_recursive(nums_16, 0, (nums_16.Length - 1))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
