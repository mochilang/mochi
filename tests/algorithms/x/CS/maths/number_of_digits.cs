// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long abs_int(long n_0) {
        if ((n_0 < 0)) {
            return -n_0;
        };
        return n_0;
    }

    public static long num_digits(long n_1) {
        long x_2 = Program.abs_int(n_1);
        long digits_3 = 1;
        while ((x_2 >= 10)) {
            x_2 = (x_2 / 10);
            digits_3 = (digits_3 + 1);
        };
        return digits_3;
    }

    public static long num_digits_fast(long n_4) {
        long x_5 = Program.abs_int(n_4);
        long digits_6 = 1;
        long power_7 = 10;
        while ((x_5 >= power_7)) {
            power_7 = (power_7 * 10);
            digits_6 = (digits_6 + 1);
        };
        return digits_6;
    }

    public static long num_digits_faster(long n_8) {
        string s_9 = _fmtStr(Program.abs_int(n_8));
        return s_9.Length;
    }

    public static void test_num_digits() {
        if ((Program.num_digits(12345) != 5)) {
            throw new Exception("num_digits 12345 failed");
        };
        if ((Program.num_digits(123) != 3)) {
            throw new Exception("num_digits 123 failed");
        };
        if ((Program.num_digits(0) != 1)) {
            throw new Exception("num_digits 0 failed");
        };
        if ((Program.num_digits(-1) != 1)) {
            throw new Exception("num_digits -1 failed");
        };
        if ((Program.num_digits(-123456) != 6)) {
            throw new Exception("num_digits -123456 failed");
        };
        if ((Program.num_digits_fast(12345) != 5)) {
            throw new Exception("num_digits_fast 12345 failed");
        };
        if ((Program.num_digits_fast(123) != 3)) {
            throw new Exception("num_digits_fast 123 failed");
        };
        if ((Program.num_digits_fast(0) != 1)) {
            throw new Exception("num_digits_fast 0 failed");
        };
        if ((Program.num_digits_fast(-1) != 1)) {
            throw new Exception("num_digits_fast -1 failed");
        };
        if ((Program.num_digits_fast(-123456) != 6)) {
            throw new Exception("num_digits_fast -123456 failed");
        };
        if ((Program.num_digits_faster(12345) != 5)) {
            throw new Exception("num_digits_faster 12345 failed");
        };
        if ((Program.num_digits_faster(123) != 3)) {
            throw new Exception("num_digits_faster 123 failed");
        };
        if ((Program.num_digits_faster(0) != 1)) {
            throw new Exception("num_digits_faster 0 failed");
        };
        if ((Program.num_digits_faster(-1) != 1)) {
            throw new Exception("num_digits_faster -1 failed");
        };
        if ((Program.num_digits_faster(-123456) != 6)) {
            throw new Exception("num_digits_faster -123456 failed");
        };
    }

    public static void main() {
        Program.test_num_digits();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.num_digits(12345))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.num_digits_fast(12345))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.num_digits_faster(12345))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
