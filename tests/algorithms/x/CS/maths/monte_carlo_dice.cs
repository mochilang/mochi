// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long lcg_seed_0 = 1;
    public static long lcg_rand() {
        lcg_seed_0 = _mod(((lcg_seed_0 * 1103515245) + 12345), 2147483648L);
        return lcg_seed_0;
    }

    public static long roll() {
        double rv_1 = Convert.ToDouble(Program.lcg_rand());
        double r_2 = ((rv_1 * 6.0) / 2.147483648e09);
        return (1 + (long)(r_2));
    }

    public static double round2(double x_3) {
        double y_4 = ((x_3 * 100.0) + 0.5);
        long z_5 = (long)(y_4);
        return (Convert.ToDouble(z_5) / 100.0);
    }

    public static double[] throw_dice(long num_throws_6, long num_dice_7) {
        long[] count_of_sum_8 = new long[]{};
        long max_sum_9 = ((num_dice_7 * 6) + 1);
        long i_10 = 0;
        while ((i_10 < max_sum_9)) {
            count_of_sum_8 = (Enumerable.ToArray(Enumerable.Append<long>(count_of_sum_8, 0)));
            i_10 = (i_10 + 1);
        };
        long t_11 = 0;
        while ((t_11 < num_throws_6)) {
            long s_12 = 0;
            long d_13 = 0;
            while ((d_13 < num_dice_7)) {
                s_12 = (s_12 + Program.roll());
                d_13 = (d_13 + 1);
            }
            count_of_sum_8[s_12] = (count_of_sum_8[(int)(s_12)] + 1);
            t_11 = (t_11 + 1);
        };
        double[] probability_14 = new double[]{};
        i_10 = num_dice_7;
        while ((i_10 < max_sum_9)) {
            double p_15 = ((Convert.ToDouble(count_of_sum_8[(int)(i_10)]) * 100.0) / Convert.ToDouble(num_throws_6));
            probability_14 = (Enumerable.ToArray(Enumerable.Append<double>(probability_14, Program.round2(p_15))));
            i_10 = (i_10 + 1);
        };
        return probability_14;
    }

    public static void main() {
        lcg_seed_0 = 1;
        double[] result_16 = Program.throw_dice(10000, 2);
        Console.WriteLine(Program._fmtTop(_fmtStr(result_16)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
