// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long min_int(long a_0, long b_1) {
        if ((a_0 < b_1)) {
            return a_0;
        };
        return b_1;
    }

    public static long int_sqrt(long n_2) {
        long r_3 = 0;
        while ((((r_3 + 1) * (r_3 + 1)) <= n_2)) {
            r_3 = (r_3 + 1);
        };
        return r_3;
    }

    public static long[] sieve(long n_4) {
        if ((n_4 <= 0)) {
            throw new Exception("Number must instead be a positive integer");
        };
        long[] in_prime_5 = new long[]{};
        long start_6 = 2;
        long end_7 = Program.int_sqrt(n_4);
        long[] temp_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < (end_7 + 1))) {
            temp_8 = (Enumerable.ToArray(Enumerable.Append<long>(temp_8, 1)));
            i_9 = (i_9 + 1);
        };
        long[] prime_10 = new long[]{};
        while ((start_6 <= end_7)) {
            if ((temp_8[(int)(start_6)] == 1)) {
                in_prime_5 = (Enumerable.ToArray(Enumerable.Append<long>(in_prime_5, start_6)));
                long j_11 = (start_6 * start_6);
                while ((j_11 <= end_7)) {
                    temp_8[j_11] = 0;
                    j_11 = (j_11 + start_6);
                }
            }
            start_6 = (start_6 + 1);
        };
        i_9 = 0;
        while ((i_9 < in_prime_5.Length)) {
            prime_10 = (Enumerable.ToArray(Enumerable.Append<long>(prime_10, in_prime_5[(int)(i_9)])));
            i_9 = (i_9 + 1);
        };
        long low_12 = (end_7 + 1);
        long high_13 = Program.min_int((2 * end_7), n_4);
        while ((low_12 <= n_4)) {
            long[] tempSeg_14 = new long[]{};
            long size_15 = ((high_13 - low_12) + 1);
            long k_16 = 0;
            while ((k_16 < size_15)) {
                tempSeg_14 = (Enumerable.ToArray(Enumerable.Append<long>(tempSeg_14, 1)));
                k_16 = (k_16 + 1);
            }
            long idx_17 = 0;
            while ((idx_17 < in_prime_5.Length)) {
                long each_18 = in_prime_5[(int)(idx_17)];
                long t_19 = ((low_12 / each_18) * each_18);
                if ((t_19 < low_12)) {
                    t_19 = (t_19 + each_18);
                }
                long j2_20 = t_19;
                while ((j2_20 <= high_13)) {
                    tempSeg_14[(j2_20 - low_12)] = 0;
                    j2_20 = (j2_20 + each_18);
                }
                idx_17 = (idx_17 + 1);
            }
            long j3_21 = 0;
            while ((j3_21 < tempSeg_14.Length)) {
                if ((tempSeg_14[(int)(j3_21)] == 1)) {
                    prime_10 = (Enumerable.ToArray(Enumerable.Append<long>(prime_10, (j3_21 + low_12))));
                }
                j3_21 = (j3_21 + 1);
            }
            low_12 = (high_13 + 1);
            high_13 = Program.min_int((high_13 + end_7), n_4);
        };
        return prime_10;
    }

    public static bool lists_equal(long[] a_22, long[] b_23) {
        if ((a_22.Length != b_23.Length)) {
            return false;
        };
        long m_24 = 0;
        while ((m_24 < a_22.Length)) {
            if ((a_22[(int)(m_24)] != b_23[(int)(m_24)])) {
                return false;
            }
            m_24 = (m_24 + 1);
        };
        return true;
    }

    public static void test_sieve() {
        long[] e1_25 = Program.sieve(8);
        if ((!Program.lists_equal(e1_25, new long[]{2, 3, 5, 7}))) {
            throw new Exception("sieve(8) failed");
        };
        long[] e2_26 = Program.sieve(27);
        if ((!Program.lists_equal(e2_26, new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23}))) {
            throw new Exception("sieve(27) failed");
        };
    }

    public static void main() {
        Program.test_sieve();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.sieve(30))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
