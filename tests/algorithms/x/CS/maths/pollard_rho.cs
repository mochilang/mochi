// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class PollardResult {
    public long factor;
    public bool ok;
    public override string ToString() => $"PollardResult {{factor = {factor}, ok = {ok}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long gcd(long a_0, long b_1) {
        long x_2 = ((a_0 < 0) ? -a_0 : a_0);
        long y_3 = ((b_1 < 0) ? -b_1 : b_1);
        while ((y_3 != 0)) {
            long t_4 = _mod(x_2, y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        return x_2;
    }

    public static long rand_fn(long value_5, long step_6, long modulus_7) {
        return _mod(((value_5 * value_5) + step_6), modulus_7);
    }

    public static PollardResult pollard_rho(long num_8, long seed_9, long step_10, long attempts_11) {
        if ((num_8 < 2)) {
            throw new Exception("The input value cannot be less than 2");
        };
        if (((num_8 > 2) && (_mod(num_8, 2) == 0))) {
            return new PollardResult{factor = 2, ok = true};
        };
        long s_12 = seed_9;
        long st_13 = step_10;
        long i_14 = 0;
        while ((i_14 < attempts_11)) {
            long tortoise_15 = s_12;
            long hare_16 = s_12;
            while (true) {
                tortoise_15 = Program.rand_fn(tortoise_15, st_13, num_8);
                hare_16 = Program.rand_fn(hare_16, st_13, num_8);
                hare_16 = Program.rand_fn(hare_16, st_13, num_8);
                long divisor_17 = Program.gcd((hare_16 - tortoise_15), num_8);
                if ((divisor_17 == 1)) {
                    continue;
                } else if ((divisor_17 == num_8)) {
                    break;
                } else {
                    return new PollardResult{factor = divisor_17, ok = true};
                }
            }
            s_12 = hare_16;
            st_13 = (st_13 + 1);
            i_14 = (i_14 + 1);
        };
        return new PollardResult{factor = 0, ok = false};
    }

    public static void test_pollard_rho() {
        PollardResult r1_18 = Program.pollard_rho(8051, 2, 1, 5);
        if (((!r1_18.ok) || ((r1_18.factor != 83) && (r1_18.factor != 97)))) {
            throw new Exception("test1 failed");
        };
        PollardResult r2_19 = Program.pollard_rho(10403, 2, 1, 5);
        if (((!r2_19.ok) || ((r2_19.factor != 101) && (r2_19.factor != 103)))) {
            throw new Exception("test2 failed");
        };
        PollardResult r3_20 = Program.pollard_rho(100, 2, 1, 3);
        if (((!r3_20.ok) || (r3_20.factor != 2))) {
            throw new Exception("test3 failed");
        };
        PollardResult r4_21 = Program.pollard_rho(17, 2, 1, 3);
        if (r4_21.ok) {
            throw new Exception("test4 failed");
        };
        PollardResult r5_22 = Program.pollard_rho(((17 * 17) * 17), 2, 1, 3);
        if (((!r5_22.ok) || (r5_22.factor != 17))) {
            throw new Exception("test5 failed");
        };
        PollardResult r6_23 = Program.pollard_rho(((17 * 17) * 17), 2, 1, 1);
        if (r6_23.ok) {
            throw new Exception("test6 failed");
        };
        PollardResult r7_24 = Program.pollard_rho(((3 * 5) * 7), 2, 1, 3);
        if (((!r7_24.ok) || (r7_24.factor != 21))) {
            throw new Exception("test7 failed");
        };
    }

    public static void main() {
        Program.test_pollard_rho();
        PollardResult a_25 = Program.pollard_rho(100, 2, 1, 3);
        if (a_25.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(a_25.factor)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
        PollardResult b_26 = Program.pollard_rho(17, 2, 1, 3);
        if (b_26.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(b_26.factor)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
