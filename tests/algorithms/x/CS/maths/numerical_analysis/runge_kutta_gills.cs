// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[] y1_20 = Program.runge_kutta_gills(f1, 0.0, 3.0, 0.2, 5.0);
    public static double sqrt(double x_0) {
        double guess_1 = ((x_0 > 1.0) ? (x_0 / 2.0) : 1.0);
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = (0.5 * (guess_1 + (x_0 / guess_1)));
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double[] runge_kutta_gills(Func<double, double, double> func_3, double x_initial_4, double y_initial_5, double step_size_6, double x_final_7) {
        if ((x_initial_4 >= x_final_7)) {
            throw new Exception("The final value of x must be greater than initial value of x.");
        };
        if ((step_size_6 <= 0.0)) {
            throw new Exception("Step size must be positive.");
        };
        long n_8 = Convert.ToInt64(((x_final_7 - x_initial_4) / step_size_6));
        double[] y_9 = new double[]{};
        long i_10 = 0;
        while ((i_10 <= n_8)) {
            y_9 = (Enumerable.ToArray(Enumerable.Append<double>(y_9, 0.0)));
            i_10 = (i_10 + 1);
        };
        y_9[0] = y_initial_5;
        double xi_11 = x_initial_4;
        long idx_12 = 0;
        double root2_13 = Program.sqrt(2.0);
        while ((idx_12 < n_8)) {
            double k1_14 = (((dynamic)(step_size_6)) * ((dynamic)(func_3(xi_11, y_9[(int)(idx_12)]))));
            double k2_15 = (((dynamic)(step_size_6)) * ((dynamic)(func_3((xi_11 + (step_size_6 / 2.0)), (y_9[(int)(idx_12)] + (k1_14 / 2.0))))));
            double k3_16 = (((dynamic)(step_size_6)) * ((dynamic)(func_3((xi_11 + (step_size_6 / 2.0)), ((y_9[(int)(idx_12)] + ((-0.5 + (1.0 / root2_13)) * k1_14)) + ((1.0 - (1.0 / root2_13)) * k2_15))))));
            double k4_17 = (((dynamic)(step_size_6)) * ((dynamic)(func_3((xi_11 + step_size_6), ((y_9[(int)(idx_12)] - ((1.0 / root2_13) * k2_15)) + ((1.0 + (1.0 / root2_13)) * k3_16))))));
            y_9[(idx_12 + 1)] = (y_9[(int)(idx_12)] + ((((k1_14 + ((2.0 - root2_13) * k2_15)) + ((2.0 + root2_13) * k3_16)) + k4_17) / 6.0));
            xi_11 = (xi_11 + step_size_6);
            idx_12 = (idx_12 + 1);
        };
        return y_9;
    }

    public static double f1(double x_18, double y_19) {
        return ((x_18 - y_19) / 2.0);
    }

    public static double f2(double x_21, double y_22) {
        return x_21;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(y1_20[(int)((y1_20.Length - 1))])));
            double[] y2_23 = Program.runge_kutta_gills(f2, -1.0, 0.0, 0.2, 0.0);
            Console.WriteLine(Program._fmtTop(_fmtStr(y2_23)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
