// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[] x_points_20 = new double[]{0.0, 1.0, 2.0, 3.0};
    static double[] y_points_21 = new double[]{0.0, 1.0, 8.0, 27.0};
    public static double ucal(double u_0, long p_1) {
        double temp_2 = u_0;
        long i_3 = 1;
        while ((i_3 < p_1)) {
            temp_2 = (temp_2 * (u_0 - Convert.ToDouble(i_3)));
            i_3 = (i_3 + 1);
        };
        return temp_2;
    }

    public static double factorial(long n_4) {
        double result_5 = 1.0;
        long i_6 = 2;
        while ((i_6 <= n_4)) {
            result_5 = (result_5 * Convert.ToDouble(i_6));
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static double newton_forward_interpolation(double[] x_7, double[] y0_8, double value_9) {
        long n_10 = x_7.Length;
        double[][] y_11 = new double[][]{};
        long i_12 = 0;
        while ((i_12 < n_10)) {
            double[] row_13 = new double[]{};
            long j_14 = 0;
            while ((j_14 < n_10)) {
                row_13 = (Enumerable.ToArray(Enumerable.Append<double>(row_13, 0.0)));
                j_14 = (j_14 + 1);
            }
            y_11 = (Enumerable.ToArray(Enumerable.Append<double[]>(y_11, row_13)));
            i_12 = (i_12 + 1);
        };
        i_12 = 0;
        while ((i_12 < n_10)) {
            y_11[(int)(i_12)][0] = y0_8[(int)(i_12)];
            i_12 = (i_12 + 1);
        };
        long i1_15 = 1;
        while ((i1_15 < n_10)) {
            long j1_16 = 0;
            while ((j1_16 < (n_10 - i1_15))) {
                y_11[(int)(j1_16)][i1_15] = (y_11[(int)((j1_16 + 1))][(int)((i1_15 - 1))] - y_11[(int)(j1_16)][(int)((i1_15 - 1))]);
                j1_16 = (j1_16 + 1);
            }
            i1_15 = (i1_15 + 1);
        };
        double u_17 = ((value_9 - x_7[(int)(0)]) / (x_7[(int)(1)] - x_7[(int)(0)]));
        double sum_18 = y_11[(int)(0)][(int)(0)];
        long k_19 = 1;
        while ((k_19 < n_10)) {
            sum_18 = (sum_18 + ((Program.ucal(u_17, k_19) * y_11[(int)(0)][(int)(k_19)]) / Program.factorial(k_19)));
            k_19 = (k_19 + 1);
        };
        return sum_18;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.newton_forward_interpolation(x_points_20, y_points_21, 1.5))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
