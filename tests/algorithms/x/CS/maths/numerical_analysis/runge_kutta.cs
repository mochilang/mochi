// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[] runge_kutta(Func<double, double, double> f_0, double y0_1, double x0_2, double h_3, double x_end_4) {
        double span_5 = ((x_end_4 - x0_2) / h_3);
        long n_6 = Convert.ToInt64(span_5);
        if ((Convert.ToDouble(n_6) < span_5)) {
            n_6 = (n_6 + 1);
        };
        double[] y_7 = new double[]{};
        long i_8 = 0;
        while ((i_8 < (n_6 + 1))) {
            y_7 = (Enumerable.ToArray(Enumerable.Append<double>(y_7, 0.0)));
            i_8 = (i_8 + 1);
        };
        y_7[0] = y0_1;
        double x_9 = x0_2;
        long k_10 = 0;
        while ((k_10 < n_6)) {
            var k1_11 = f_0(x_9, y_7[(int)(k_10)]);
            var k2_12 = f_0((x_9 + (0.5 * h_3)), (y_7[(int)(k_10)] + (((dynamic)((0.5 * h_3))) * ((dynamic)(k1_11)))));
            var k3_13 = f_0((x_9 + (0.5 * h_3)), (y_7[(int)(k_10)] + (((dynamic)((0.5 * h_3))) * ((dynamic)(k2_12)))));
            var k4_14 = f_0((x_9 + h_3), (y_7[(int)(k_10)] + (((dynamic)(h_3)) * ((dynamic)(k3_13)))));
            y_7[(k_10 + 1)] = (y_7[(int)(k_10)] + (((1.0 / 6.0) * h_3) * (((dynamic)(((((dynamic)(k1_11)) + ((dynamic)((((dynamic)(2.0)) * ((dynamic)(k2_12)))))) + (((dynamic)(2.0)) * ((dynamic)(k3_13)))))) + ((dynamic)(k4_14)))));
            x_9 = (x_9 + h_3);
            k_10 = (k_10 + 1);
        };
        return y_7;
    }

    public static void test_runge_kutta() {
        Func<double, double, double> f = null;
        f = (double x_15, double y_16) => {return y_16;};
        double[] result_17 = Program.runge_kutta(f, 1.0, 0.0, 0.01, 5.0);
        double last_18 = result_17[(int)((result_17.Length - 1))];
        double expected_19 = 148.41315904125113;
        double diff_20 = (last_18 - expected_19);
        if ((diff_20 < 0.0)) {
            diff_20 = -diff_20;
        };
        if ((diff_20 > 1e-06)) {
            throw new Exception("runge_kutta failed");
        };
    }

    public static void main() {
        Program.test_runge_kutta();
        Func<double, double, double> f = null;
        f = (double x_21, double y_22) => {return y_22;};
        double[] r_23 = Program.runge_kutta(f, 1.0, 0.0, 0.1, 1.0);
        Console.WriteLine(Program._fmtTop(_fmtStr(r_23[(int)((r_23.Length - 1))])));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
