// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[] runge_kutta_fehlberg_45(Func<double, double, double> func_0, double x_initial_1, double y_initial_2, double step_size_3, double x_final_4) {
        if ((x_initial_1 >= x_final_4)) {
            throw new Exception("The final value of x must be greater than initial value of x.");
        };
        if ((step_size_3 <= 0.0)) {
            throw new Exception("Step size must be positive.");
        };
        long n_5 = Convert.ToInt64(((x_final_4 - x_initial_1) / step_size_3));
        double[] ys_6 = new double[]{};
        double x_7 = x_initial_1;
        double y_8 = y_initial_2;
        ys_6 = (Enumerable.ToArray(Enumerable.Append<double>(ys_6, y_8)));
        long i_9 = 0;
        while ((i_9 < n_5)) {
            double k1_10 = (((dynamic)(step_size_3)) * ((dynamic)(func_0(x_7, y_8))));
            double k2_11 = (((dynamic)(step_size_3)) * ((dynamic)(func_0((x_7 + (step_size_3 / 4.0)), (y_8 + (k1_10 / 4.0))))));
            double k3_12 = (((dynamic)(step_size_3)) * ((dynamic)(func_0((x_7 + ((3.0 / 8.0) * step_size_3)), ((y_8 + ((3.0 / 32.0) * k1_10)) + ((9.0 / 32.0) * k2_11))))));
            double k4_13 = (((dynamic)(step_size_3)) * ((dynamic)(func_0((x_7 + ((12.0 / 13.0) * step_size_3)), (((y_8 + ((1932.0 / 2197.0) * k1_10)) - ((7200.0 / 2197.0) * k2_11)) + ((7296.0 / 2197.0) * k3_12))))));
            double k5_14 = (((dynamic)(step_size_3)) * ((dynamic)(func_0((x_7 + step_size_3), ((((y_8 + ((439.0 / 216.0) * k1_10)) - (8.0 * k2_11)) + ((3680.0 / 513.0) * k3_12)) - ((845.0 / 4104.0) * k4_13))))));
            double k6_15 = (((dynamic)(step_size_3)) * ((dynamic)(func_0((x_7 + (step_size_3 / 2.0)), (((((y_8 - ((8.0 / 27.0) * k1_10)) + (2.0 * k2_11)) - ((3544.0 / 2565.0) * k3_12)) + ((1859.0 / 4104.0) * k4_13)) - ((11.0 / 40.0) * k5_14))))));
            y_8 = (((((y_8 + ((16.0 / 135.0) * k1_10)) + ((6656.0 / 12825.0) * k3_12)) + ((28561.0 / 56430.0) * k4_13)) - ((9.0 / 50.0) * k5_14)) + ((2.0 / 55.0) * k6_15));
            x_7 = (x_7 + step_size_3);
            ys_6 = (Enumerable.ToArray(Enumerable.Append<double>(ys_6, y_8)));
            i_9 = (i_9 + 1);
        };
        return ys_6;
    }

    public static void main() {
        Func<double, double, double> f1 = null;
        f1 = (double x_16, double y_17) => {return (1.0 + (y_17 * y_17));};
        double[] y1_18 = Program.runge_kutta_fehlberg_45(f1, 0.0, 0.0, 0.2, 1.0);
        Console.WriteLine(Program._fmtTop(y1_18[(int)(1)]));
        Func<double, double, double> f2 = null;
        f2 = (double x_19, double y_20) => {return x_19;};
        double[] y2_21 = Program.runge_kutta_fehlberg_45(f2, -1.0, 0.0, 0.2, 0.0);
        Console.WriteLine(Program._fmtTop(y2_21[(int)(1)]));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
