// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class NevilleResult {
    public double value;
    public double[][] table;
    public override string ToString() => $"NevilleResult {{value = {value.ToString("0.0")}, table = {table}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static NevilleResult neville_interpolate(double[] x_points_0, double[] y_points_1, double x0_2) {
        long n_3 = x_points_0.Length;
        double[][] q_4 = new double[][]{};
        long i_5 = 0;
        while ((i_5 < n_3)) {
            double[] row_6 = new double[]{};
            long j_7 = 0;
            while ((j_7 < n_3)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<double>(row_6, 0.0)));
                j_7 = (j_7 + 1);
            }
            q_4 = (Enumerable.ToArray(Enumerable.Append<double[]>(q_4, row_6)));
            i_5 = (i_5 + 1);
        };
        i_5 = 0;
        while ((i_5 < n_3)) {
            q_4[(int)(i_5)][1] = y_points_1[(int)(i_5)];
            i_5 = (i_5 + 1);
        };
        long col_8 = 2;
        while ((col_8 < n_3)) {
            long row_idx_9 = col_8;
            while ((row_idx_9 < n_3)) {
                q_4[(int)(row_idx_9)][col_8] = ((((x0_2 - x_points_0[(int)(((row_idx_9 - col_8) + 1))]) * q_4[(int)(row_idx_9)][(int)((col_8 - 1))]) - ((x0_2 - x_points_0[(int)(row_idx_9)]) * q_4[(int)((row_idx_9 - 1))][(int)((col_8 - 1))])) / (x_points_0[(int)(row_idx_9)] - x_points_0[(int)(((row_idx_9 - col_8) + 1))]));
                row_idx_9 = (row_idx_9 + 1);
            }
            col_8 = (col_8 + 1);
        };
        return new NevilleResult{value = q_4[(int)((n_3 - 1))][(int)((n_3 - 1))], table = q_4};
    }

    public static void test_neville() {
        double[] xs_10 = new double[]{1.0, 2.0, 3.0, 4.0, 6.0};
        double[] ys_11 = new double[]{6.0, 7.0, 8.0, 9.0, 11.0};
        NevilleResult r1_12 = Program.neville_interpolate(xs_10, ys_11, 5.0);
        if ((r1_12.value != 10.0)) {
            throw new Exception("neville_interpolate at 5 failed");
        };
        NevilleResult r2_13 = Program.neville_interpolate(xs_10, ys_11, 99.0);
        if ((r2_13.value != 104.0)) {
            throw new Exception("neville_interpolate at 99 failed");
        };
    }

    public static void main() {
        Program.test_neville();
        double[] xs_14 = new double[]{1.0, 2.0, 3.0, 4.0, 6.0};
        double[] ys_15 = new double[]{6.0, 7.0, 8.0, 9.0, 11.0};
        NevilleResult r_16 = Program.neville_interpolate(xs_14, ys_15, 5.0);
        Console.WriteLine(Program._fmtTop(r_16.value));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
