// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class NRResult {
    public double root;
    public double error;
    public double[] steps;
    public override string ToString() => $"NRResult {{root = {root.ToString("0.0")}, error = {error.ToString("0.0")}, steps = {steps}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static NRResult result_17 = Program.newton_raphson(poly, 0.4, 20, 1e-06, 1e-06, false);
    public static double abs_float(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        } else {
            return x_0;
        };
        return default(double);
    }

    public static void fail(string msg_1) {
        Console.WriteLine(Program._fmtTop(("error: " + msg_1)));
    }

    public static double calc_derivative(Func<double, double> f_2, double x_3, double delta_x_4) {
        return (((dynamic)((((dynamic)(f_2((x_3 + (delta_x_4 / 2.0))))) - ((dynamic)(f_2((x_3 - (delta_x_4 / 2.0)))))))) / ((dynamic)(delta_x_4)));
    }

    public static NRResult newton_raphson(Func<double, double> f_5, double x0_6, long max_iter_7, double step_8, double max_error_9, bool log_steps_10) {
        double a_11 = x0_6;
        double[] steps_12 = new double[]{};
        long i_13 = 0;
        while ((i_13 < max_iter_7)) {
            if (log_steps_10) {
                steps_12 = (Enumerable.ToArray(Enumerable.Append<double>(steps_12, a_11)));
            }
            double err_14 = Program.abs_float(f_5(a_11));
            if ((err_14 < max_error_9)) {
                return new NRResult{root = a_11, error = err_14, steps = steps_12};
            }
            double der_15 = Program.calc_derivative(f_5, a_11, step_8);
            if ((der_15 == 0.0)) {
                Program.fail("No converging solution found, zero derivative");
                return new NRResult{root = a_11, error = err_14, steps = steps_12};
            }
            a_11 = (a_11 - (((dynamic)(f_5(a_11))) / ((dynamic)(der_15))));
            i_13 = (i_13 + 1);
        };
        Program.fail("No converging solution found, iteration limit reached");
        return new NRResult{root = a_11, error = Program.abs_float(f_5(a_11)), steps = steps_12};
    }

    public static double poly(double x_16) {
        return (((x_16 * x_16) - (5.0 * x_16)) + 2.0);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((("root = " + _fmtStr(result_17.root)) + ", error = ") + _fmtStr(result_17.error))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
