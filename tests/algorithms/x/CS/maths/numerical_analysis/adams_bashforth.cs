// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[] y2_67 = Program.adams_bashforth_step2(f_x, new double[]{0.0, 0.2}, new double[]{0.0, 0.0}, 0.2, 1.0);
    public static double abs_float(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        } else {
            return x_0;
        };
        return default(double);
    }

    public static void validate_inputs(double[] x_initials_1, double step_size_2, double x_final_3) {
        if ((x_initials_1[(int)((x_initials_1.Length - 1))] >= x_final_3)) {
            throw new Exception("The final value of x must be greater than the initial values of x.");
        };
        if ((step_size_2 <= 0.0)) {
            throw new Exception("Step size must be positive.");
        };
        long i_4 = 0;
        while ((i_4 < (x_initials_1.Length - 1))) {
            double diff_5 = (x_initials_1[(int)((i_4 + 1))] - x_initials_1[(int)(i_4)]);
            if ((Program.abs_float((diff_5 - step_size_2)) > 1e-10)) {
                throw new Exception("x-values must be equally spaced according to step size.");
            }
            i_4 = (i_4 + 1);
        };
    }

    public static string list_to_string(double[] xs_6) {
        string s_7 = "[";
        long i_8 = 0;
        while ((i_8 < xs_6.Length)) {
            s_7 = (s_7 + _fmtStr(xs_6[(int)(i_8)]));
            if (((i_8 + 1) < xs_6.Length)) {
                s_7 = (s_7 + ", ");
            }
            i_8 = (i_8 + 1);
        };
        s_7 = (s_7 + "]");
        return s_7;
    }

    public static double[] adams_bashforth_step2(Func<double, double, double> f_9, double[] x_initials_10, double[] y_initials_11, double step_size_12, double x_final_13) {
        Program.validate_inputs(x_initials_10, step_size_12, x_final_13);
        if (((x_initials_10.Length != 2) || (y_initials_11.Length != 2))) {
            throw new Exception("Insufficient initial points information.");
        };
        double x0_14 = x_initials_10[(int)(0)];
        double x1_15 = x_initials_10[(int)(1)];
        double[] y_16 = new double[]{};
        y_16 = (Enumerable.ToArray(Enumerable.Append<double>(y_16, y_initials_11[(int)(0)])));
        y_16 = (Enumerable.ToArray(Enumerable.Append<double>(y_16, y_initials_11[(int)(1)])));
        long n_17 = Convert.ToInt64(((x_final_13 - x1_15) / step_size_12));
        long i_18 = 0;
        while ((i_18 < n_17)) {
            double term_19 = (((dynamic)((((dynamic)(3.0)) * ((dynamic)(f_9(x1_15, y_16[(int)((i_18 + 1))])))))) - ((dynamic)(f_9(x0_14, y_16[(int)(i_18)]))));
            double y_next_20 = (y_16[(int)((i_18 + 1))] + ((step_size_12 / 2.0) * term_19));
            y_16 = (Enumerable.ToArray(Enumerable.Append<double>(y_16, y_next_20)));
            x0_14 = x1_15;
            x1_15 = (x1_15 + step_size_12);
            i_18 = (i_18 + 1);
        };
        return y_16;
    }

    public static double[] adams_bashforth_step3(Func<double, double, double> f_21, double[] x_initials_22, double[] y_initials_23, double step_size_24, double x_final_25) {
        Program.validate_inputs(x_initials_22, step_size_24, x_final_25);
        if (((x_initials_22.Length != 3) || (y_initials_23.Length != 3))) {
            throw new Exception("Insufficient initial points information.");
        };
        double x0_26 = x_initials_22[(int)(0)];
        double x1_27 = x_initials_22[(int)(1)];
        double x2_28 = x_initials_22[(int)(2)];
        double[] y_29 = new double[]{};
        y_29 = (Enumerable.ToArray(Enumerable.Append<double>(y_29, y_initials_23[(int)(0)])));
        y_29 = (Enumerable.ToArray(Enumerable.Append<double>(y_29, y_initials_23[(int)(1)])));
        y_29 = (Enumerable.ToArray(Enumerable.Append<double>(y_29, y_initials_23[(int)(2)])));
        long n_30 = Convert.ToInt64(((x_final_25 - x2_28) / step_size_24));
        long i_31 = 0;
        while ((i_31 <= n_30)) {
            double term_32 = (((((dynamic)(23.0)) * ((dynamic)(f_21(x2_28, y_29[(int)((i_31 + 2))])))) - (((dynamic)(16.0)) * ((dynamic)(f_21(x1_27, y_29[(int)((i_31 + 1))]))))) + (((dynamic)(5.0)) * ((dynamic)(f_21(x0_26, y_29[(int)(i_31)])))));
            double y_next_33 = (y_29[(int)((i_31 + 2))] + ((step_size_24 / 12.0) * term_32));
            y_29 = (Enumerable.ToArray(Enumerable.Append<double>(y_29, y_next_33)));
            x0_26 = x1_27;
            x1_27 = x2_28;
            x2_28 = (x2_28 + step_size_24);
            i_31 = (i_31 + 1);
        };
        return y_29;
    }

    public static double[] adams_bashforth_step4(Func<double, double, double> f_34, double[] x_initials_35, double[] y_initials_36, double step_size_37, double x_final_38) {
        Program.validate_inputs(x_initials_35, step_size_37, x_final_38);
        if (((x_initials_35.Length != 4) || (y_initials_36.Length != 4))) {
            throw new Exception("Insufficient initial points information.");
        };
        double x0_39 = x_initials_35[(int)(0)];
        double x1_40 = x_initials_35[(int)(1)];
        double x2_41 = x_initials_35[(int)(2)];
        double x3_42 = x_initials_35[(int)(3)];
        double[] y_43 = new double[]{};
        y_43 = (Enumerable.ToArray(Enumerable.Append<double>(y_43, y_initials_36[(int)(0)])));
        y_43 = (Enumerable.ToArray(Enumerable.Append<double>(y_43, y_initials_36[(int)(1)])));
        y_43 = (Enumerable.ToArray(Enumerable.Append<double>(y_43, y_initials_36[(int)(2)])));
        y_43 = (Enumerable.ToArray(Enumerable.Append<double>(y_43, y_initials_36[(int)(3)])));
        long n_44 = Convert.ToInt64(((x_final_38 - x3_42) / step_size_37));
        long i_45 = 0;
        while ((i_45 < n_44)) {
            double term_46 = ((((((dynamic)(55.0)) * ((dynamic)(f_34(x3_42, y_43[(int)((i_45 + 3))])))) - (((dynamic)(59.0)) * ((dynamic)(f_34(x2_41, y_43[(int)((i_45 + 2))]))))) + (((dynamic)(37.0)) * ((dynamic)(f_34(x1_40, y_43[(int)((i_45 + 1))]))))) - (((dynamic)(9.0)) * ((dynamic)(f_34(x0_39, y_43[(int)(i_45)])))));
            double y_next_47 = (y_43[(int)((i_45 + 3))] + ((step_size_37 / 24.0) * term_46));
            y_43 = (Enumerable.ToArray(Enumerable.Append<double>(y_43, y_next_47)));
            x0_39 = x1_40;
            x1_40 = x2_41;
            x2_41 = x3_42;
            x3_42 = (x3_42 + step_size_37);
            i_45 = (i_45 + 1);
        };
        return y_43;
    }

    public static double[] adams_bashforth_step5(Func<double, double, double> f_48, double[] x_initials_49, double[] y_initials_50, double step_size_51, double x_final_52) {
        Program.validate_inputs(x_initials_49, step_size_51, x_final_52);
        if (((x_initials_49.Length != 5) || (y_initials_50.Length != 5))) {
            throw new Exception("Insufficient initial points information.");
        };
        double x0_53 = x_initials_49[(int)(0)];
        double x1_54 = x_initials_49[(int)(1)];
        double x2_55 = x_initials_49[(int)(2)];
        double x3_56 = x_initials_49[(int)(3)];
        double x4_57 = x_initials_49[(int)(4)];
        double[] y_58 = new double[]{};
        y_58 = (Enumerable.ToArray(Enumerable.Append<double>(y_58, y_initials_50[(int)(0)])));
        y_58 = (Enumerable.ToArray(Enumerable.Append<double>(y_58, y_initials_50[(int)(1)])));
        y_58 = (Enumerable.ToArray(Enumerable.Append<double>(y_58, y_initials_50[(int)(2)])));
        y_58 = (Enumerable.ToArray(Enumerable.Append<double>(y_58, y_initials_50[(int)(3)])));
        y_58 = (Enumerable.ToArray(Enumerable.Append<double>(y_58, y_initials_50[(int)(4)])));
        long n_59 = Convert.ToInt64(((x_final_52 - x4_57) / step_size_51));
        long i_60 = 0;
        while ((i_60 <= n_59)) {
            double term_61 = (((((((dynamic)(1901.0)) * ((dynamic)(f_48(x4_57, y_58[(int)((i_60 + 4))])))) - (((dynamic)(2774.0)) * ((dynamic)(f_48(x3_56, y_58[(int)((i_60 + 3))]))))) - (((dynamic)(2616.0)) * ((dynamic)(f_48(x2_55, y_58[(int)((i_60 + 2))]))))) - (((dynamic)(1274.0)) * ((dynamic)(f_48(x1_54, y_58[(int)((i_60 + 1))]))))) + (((dynamic)(251.0)) * ((dynamic)(f_48(x0_53, y_58[(int)(i_60)])))));
            double y_next_62 = (y_58[(int)((i_60 + 4))] + ((step_size_51 / 720.0) * term_61));
            y_58 = (Enumerable.ToArray(Enumerable.Append<double>(y_58, y_next_62)));
            x0_53 = x1_54;
            x1_54 = x2_55;
            x2_55 = x3_56;
            x3_56 = x4_57;
            x4_57 = (x4_57 + step_size_51);
            i_60 = (i_60 + 1);
        };
        return y_58;
    }

    public static double f_x(double x_63, double y_64) {
        return x_63;
    }

    public static double f_xy(double x_65, double y_66) {
        return (x_65 + y_66);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(y2_67)));
            double[] y3_68 = Program.adams_bashforth_step3(f_xy, new double[]{0.0, 0.2, 0.4}, new double[]{0.0, 0.0, 0.04}, 0.2, 1.0);
            Console.WriteLine(Program._fmtTop(_fmtStr(y3_68[(int)(3)])));
            double[] y4_69 = Program.adams_bashforth_step4(f_xy, new double[]{0.0, 0.2, 0.4, 0.6}, new double[]{0.0, 0.0, 0.04, 0.128}, 0.2, 1.0);
            Console.WriteLine(Program._fmtTop(_fmtStr(y4_69[(int)(4)])));
            Console.WriteLine(Program._fmtTop(_fmtStr(y4_69[(int)(5)])));
            double[] y5_70 = Program.adams_bashforth_step5(f_xy, new double[]{0.0, 0.2, 0.4, 0.6, 0.8}, new double[]{0.0, 0.0214, 0.0214, 0.22211, 0.42536}, 0.2, 1.0);
            Console.WriteLine(Program._fmtTop(_fmtStr(y5_70[(int)((y5_70.Length - 1))])));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
