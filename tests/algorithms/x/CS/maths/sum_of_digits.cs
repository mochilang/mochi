// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long abs_int(long n_0) {
        if ((n_0 < 0)) {
            return -n_0;
        };
        return n_0;
    }

    public static long sum_of_digits(long n_1) {
        long m_2 = Program.abs_int(n_1);
        long res_3 = 0;
        while ((m_2 > 0)) {
            res_3 = (res_3 + _mod(m_2, 10));
            m_2 = _floordiv(m_2, 10);
        };
        return res_3;
    }

    public static long sum_of_digits_recursion(long n_4) {
        long m_5 = Program.abs_int(n_4);
        if ((m_5 < 10)) {
            return m_5;
        };
        return (_mod(m_5, 10) + Program.sum_of_digits_recursion(_floordiv(m_5, 10)));
    }

    public static long sum_of_digits_compact(long n_6) {
        string s_7 = _fmtStr(Program.abs_int(n_6));
        long res_8 = 0;
        long i_9 = 0;
        while ((i_9 < s_7.Length)) {
            res_8 = (res_8 + long.Parse(s_7.Substring((int)(i_9), 1)));
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static void test_sum_of_digits() {
        if ((Program.sum_of_digits(12345) != 15)) {
            throw new Exception("sum_of_digits 12345 failed");
        };
        if ((Program.sum_of_digits(123) != 6)) {
            throw new Exception("sum_of_digits 123 failed");
        };
        if ((Program.sum_of_digits(-123) != 6)) {
            throw new Exception("sum_of_digits -123 failed");
        };
        if ((Program.sum_of_digits(0) != 0)) {
            throw new Exception("sum_of_digits 0 failed");
        };
        if ((Program.sum_of_digits_recursion(12345) != 15)) {
            throw new Exception("recursion 12345 failed");
        };
        if ((Program.sum_of_digits_recursion(123) != 6)) {
            throw new Exception("recursion 123 failed");
        };
        if ((Program.sum_of_digits_recursion(-123) != 6)) {
            throw new Exception("recursion -123 failed");
        };
        if ((Program.sum_of_digits_recursion(0) != 0)) {
            throw new Exception("recursion 0 failed");
        };
        if ((Program.sum_of_digits_compact(12345) != 15)) {
            throw new Exception("compact 12345 failed");
        };
        if ((Program.sum_of_digits_compact(123) != 6)) {
            throw new Exception("compact 123 failed");
        };
        if ((Program.sum_of_digits_compact(-123) != 6)) {
            throw new Exception("compact -123 failed");
        };
        if ((Program.sum_of_digits_compact(0) != 0)) {
            throw new Exception("compact 0 failed");
        };
    }

    public static void main() {
        Program.test_sum_of_digits();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.sum_of_digits(12345))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
