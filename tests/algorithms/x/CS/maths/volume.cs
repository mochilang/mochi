// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double SQRT5_1 = 2.23606797749979;
    public static double minf(double a_2, double b_3) {
        if ((a_2 < b_3)) {
            return a_2;
        };
        return b_3;
    }

    public static double maxf(double a_4, double b_5) {
        if ((a_4 > b_5)) {
            return a_4;
        };
        return b_5;
    }

    public static double vol_cube(double side_length_6) {
        if ((side_length_6 < 0.0)) {
            throw new Exception("vol_cube() only accepts non-negative values");
        };
        return ((side_length_6 * side_length_6) * side_length_6);
    }

    public static double vol_spherical_cap(double height_7, double radius_8) {
        if (((height_7 < 0.0) || (radius_8 < 0.0))) {
            throw new Exception("vol_spherical_cap() only accepts non-negative values");
        };
        return (((((1.0 / 3.0) * PI_0) * height_7) * height_7) * ((3.0 * radius_8) - height_7));
    }

    public static double vol_sphere(double radius_9) {
        if ((radius_9 < 0.0)) {
            throw new Exception("vol_sphere() only accepts non-negative values");
        };
        return (((((4.0 / 3.0) * PI_0) * radius_9) * radius_9) * radius_9);
    }

    public static double vol_spheres_intersect(double radius_1_10, double radius_2_11, double centers_distance_12) {
        if ((((radius_1_10 < 0.0) || (radius_2_11 < 0.0)) || (centers_distance_12 < 0.0))) {
            throw new Exception("vol_spheres_intersect() only accepts non-negative values");
        };
        if ((centers_distance_12 == 0.0)) {
            return Program.vol_sphere(Program.minf(radius_1_10, radius_2_11));
        };
        double h1_13 = ((((radius_1_10 - radius_2_11) + centers_distance_12) * ((radius_1_10 + radius_2_11) - centers_distance_12)) / (2.0 * centers_distance_12));
        double h2_14 = ((((radius_2_11 - radius_1_10) + centers_distance_12) * ((radius_2_11 + radius_1_10) - centers_distance_12)) / (2.0 * centers_distance_12));
        return (Program.vol_spherical_cap(h1_13, radius_2_11) + Program.vol_spherical_cap(h2_14, radius_1_10));
    }

    public static double vol_spheres_union(double radius_1_15, double radius_2_16, double centers_distance_17) {
        if ((((radius_1_15 <= 0.0) || (radius_2_16 <= 0.0)) || (centers_distance_17 < 0.0))) {
            throw new Exception("vol_spheres_union() only accepts non-negative values, non-zero radius");
        };
        if ((centers_distance_17 == 0.0)) {
            return Program.vol_sphere(Program.maxf(radius_1_15, radius_2_16));
        };
        return ((Program.vol_sphere(radius_1_15) + Program.vol_sphere(radius_2_16)) - Program.vol_spheres_intersect(radius_1_15, radius_2_16, centers_distance_17));
    }

    public static double vol_cuboid(double width_18, double height_19, double length_20) {
        if ((((width_18 < 0.0) || (height_19 < 0.0)) || (length_20 < 0.0))) {
            throw new Exception("vol_cuboid() only accepts non-negative values");
        };
        return ((width_18 * height_19) * length_20);
    }

    public static double vol_cone(double area_of_base_21, double height_22) {
        if (((height_22 < 0.0) || (area_of_base_21 < 0.0))) {
            throw new Exception("vol_cone() only accepts non-negative values");
        };
        return ((area_of_base_21 * height_22) / 3.0);
    }

    public static double vol_right_circ_cone(double radius_23, double height_24) {
        if (((height_24 < 0.0) || (radius_23 < 0.0))) {
            throw new Exception("vol_right_circ_cone() only accepts non-negative values");
        };
        return ((((PI_0 * radius_23) * radius_23) * height_24) / 3.0);
    }

    public static double vol_prism(double area_of_base_25, double height_26) {
        if (((height_26 < 0.0) || (area_of_base_25 < 0.0))) {
            throw new Exception("vol_prism() only accepts non-negative values");
        };
        return (area_of_base_25 * height_26);
    }

    public static double vol_pyramid(double area_of_base_27, double height_28) {
        if (((height_28 < 0.0) || (area_of_base_27 < 0.0))) {
            throw new Exception("vol_pyramid() only accepts non-negative values");
        };
        return ((area_of_base_27 * height_28) / 3.0);
    }

    public static double vol_hemisphere(double radius_29) {
        if ((radius_29 < 0.0)) {
            throw new Exception("vol_hemisphere() only accepts non-negative values");
        };
        return (((((radius_29 * radius_29) * radius_29) * PI_0) * 2.0) / 3.0);
    }

    public static double vol_circular_cylinder(double radius_30, double height_31) {
        if (((height_31 < 0.0) || (radius_30 < 0.0))) {
            throw new Exception("vol_circular_cylinder() only accepts non-negative values");
        };
        return (((radius_30 * radius_30) * height_31) * PI_0);
    }

    public static double vol_hollow_circular_cylinder(double inner_radius_32, double outer_radius_33, double height_34) {
        if ((((inner_radius_32 < 0.0) || (outer_radius_33 < 0.0)) || (height_34 < 0.0))) {
            throw new Exception("vol_hollow_circular_cylinder() only accepts non-negative values");
        };
        if ((outer_radius_33 <= inner_radius_32)) {
            throw new Exception("outer_radius must be greater than inner_radius");
        };
        return ((PI_0 * ((outer_radius_33 * outer_radius_33) - (inner_radius_32 * inner_radius_32))) * height_34);
    }

    public static double vol_conical_frustum(double height_35, double radius_1_36, double radius_2_37) {
        if ((((radius_1_36 < 0.0) || (radius_2_37 < 0.0)) || (height_35 < 0.0))) {
            throw new Exception("vol_conical_frustum() only accepts non-negative values");
        };
        return ((((1.0 / 3.0) * PI_0) * height_35) * (((radius_1_36 * radius_1_36) + (radius_2_37 * radius_2_37)) + (radius_1_36 * radius_2_37)));
    }

    public static double vol_torus(double torus_radius_38, double tube_radius_39) {
        if (((torus_radius_38 < 0.0) || (tube_radius_39 < 0.0))) {
            throw new Exception("vol_torus() only accepts non-negative values");
        };
        return (((((2.0 * PI_0) * PI_0) * torus_radius_38) * tube_radius_39) * tube_radius_39);
    }

    public static double vol_icosahedron(double tri_side_40) {
        if ((tri_side_40 < 0.0)) {
            throw new Exception("vol_icosahedron() only accepts non-negative values");
        };
        return (((((tri_side_40 * tri_side_40) * tri_side_40) * (3.0 + SQRT5_1)) * 5.0) / 12.0);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop("Volumes:"));
        Console.WriteLine(Program._fmtTop(("Cube: " + _fmtStr(Program.vol_cube(2.0)))));
        Console.WriteLine(Program._fmtTop(("Cuboid: " + _fmtStr(Program.vol_cuboid(2.0, 2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Cone: " + _fmtStr(Program.vol_cone(2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Right Circular Cone: " + _fmtStr(Program.vol_right_circ_cone(2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Prism: " + _fmtStr(Program.vol_prism(2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Pyramid: " + _fmtStr(Program.vol_pyramid(2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Sphere: " + _fmtStr(Program.vol_sphere(2.0)))));
        Console.WriteLine(Program._fmtTop(("Hemisphere: " + _fmtStr(Program.vol_hemisphere(2.0)))));
        Console.WriteLine(Program._fmtTop(("Circular Cylinder: " + _fmtStr(Program.vol_circular_cylinder(2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Torus: " + _fmtStr(Program.vol_torus(2.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Conical Frustum: " + _fmtStr(Program.vol_conical_frustum(2.0, 2.0, 4.0)))));
        Console.WriteLine(Program._fmtTop(("Spherical cap: " + _fmtStr(Program.vol_spherical_cap(1.0, 2.0)))));
        Console.WriteLine(Program._fmtTop(("Spheres intersection: " + _fmtStr(Program.vol_spheres_intersect(2.0, 2.0, 1.0)))));
        Console.WriteLine(Program._fmtTop(("Spheres union: " + _fmtStr(Program.vol_spheres_union(2.0, 2.0, 1.0)))));
        Console.WriteLine(Program._fmtTop(("Hollow Circular Cylinder: " + _fmtStr(Program.vol_hollow_circular_cylinder(1.0, 2.0, 3.0)))));
        Console.WriteLine(Program._fmtTop(("Icosahedron: " + _fmtStr(Program.vol_icosahedron(2.5)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
