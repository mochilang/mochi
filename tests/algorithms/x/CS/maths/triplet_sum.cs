// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] bubble_sort(long[] nums_0) {
        long[] arr_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < nums_0.Length)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append<long>(arr_1, nums_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        long n_3 = arr_1.Length;
        long a_4 = 0;
        while ((a_4 < n_3)) {
            long b_5 = 0;
            while ((b_5 < ((n_3 - a_4) - 1))) {
                if ((arr_1[(int)(b_5)] > arr_1[(int)((b_5 + 1))])) {
                    long tmp_6 = arr_1[(int)(b_5)];
                    arr_1[b_5] = arr_1[(int)((b_5 + 1))];
                    arr_1[(b_5 + 1)] = tmp_6;
                }
                b_5 = (b_5 + 1);
            }
            a_4 = (a_4 + 1);
        };
        return arr_1;
    }

    public static long[] sort3(long[] xs_7) {
        long[] arr_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < xs_7.Length)) {
            arr_8 = (Enumerable.ToArray(Enumerable.Append<long>(arr_8, xs_7[(int)(i_9)])));
            i_9 = (i_9 + 1);
        };
        long n_10 = arr_8.Length;
        long a_11 = 0;
        while ((a_11 < n_10)) {
            long b_12 = 0;
            while ((b_12 < ((n_10 - a_11) - 1))) {
                if ((arr_8[(int)(b_12)] > arr_8[(int)((b_12 + 1))])) {
                    long tmp_13 = arr_8[(int)(b_12)];
                    arr_8[b_12] = arr_8[(int)((b_12 + 1))];
                    arr_8[(b_12 + 1)] = tmp_13;
                }
                b_12 = (b_12 + 1);
            }
            a_11 = (a_11 + 1);
        };
        return arr_8;
    }

    public static long[] triplet_sum1(long[] arr_14, long target_15) {
        long i_16 = 0;
        while ((i_16 < (arr_14.Length - 2))) {
            long j_17 = (i_16 + 1);
            while ((j_17 < (arr_14.Length - 1))) {
                long k_18 = (j_17 + 1);
                while ((k_18 < arr_14.Length)) {
                    if ((((arr_14[(int)(i_16)] + arr_14[(int)(j_17)]) + arr_14[(int)(k_18)]) == target_15)) {
                        return Program.sort3(new long[]{arr_14[(int)(i_16)], arr_14[(int)(j_17)], arr_14[(int)(k_18)]});
                    }
                    k_18 = (k_18 + 1);
                }
                j_17 = (j_17 + 1);
            }
            i_16 = (i_16 + 1);
        };
        return new long[]{0, 0, 0};
    }

    public static long[] triplet_sum2(long[] arr_19, long target_20) {
        long[] sorted_21 = Program.bubble_sort(arr_19);
        long n_22 = sorted_21.Length;
        long i_23 = 0;
        while ((i_23 < (n_22 - 2))) {
            long left_24 = (i_23 + 1);
            long right_25 = (n_22 - 1);
            while ((left_24 < right_25)) {
                long s_26 = ((sorted_21[(int)(i_23)] + sorted_21[(int)(left_24)]) + sorted_21[(int)(right_25)]);
                if ((s_26 == target_20)) {
                    return new long[]{sorted_21[(int)(i_23)], sorted_21[(int)(left_24)], sorted_21[(int)(right_25)]};
                }
                if ((s_26 < target_20)) {
                    left_24 = (left_24 + 1);
                } else {
                    right_25 = (right_25 - 1);
                }
            }
            i_23 = (i_23 + 1);
        };
        return new long[]{0, 0, 0};
    }

    public static bool list_equal(long[] a_27, long[] b_28) {
        if ((a_27.Length != b_28.Length)) {
            return false;
        };
        long i_29 = 0;
        while ((i_29 < a_27.Length)) {
            if ((a_27[(int)(i_29)] != b_28[(int)(i_29)])) {
                return false;
            }
            i_29 = (i_29 + 1);
        };
        return true;
    }

    public static void test_triplet_sum() {
        long[] arr1_30 = new long[]{13, 29, 7, 23, 5};
        if ((!Program.list_equal(Program.triplet_sum1(arr1_30, 35), new long[]{5, 7, 23}))) {
            throw new Exception("ts1 case1 failed");
        };
        if ((!Program.list_equal(Program.triplet_sum2(arr1_30, 35), new long[]{5, 7, 23}))) {
            throw new Exception("ts2 case1 failed");
        };
        long[] arr2_31 = new long[]{37, 9, 19, 50, 44};
        if ((!Program.list_equal(Program.triplet_sum1(arr2_31, 65), new long[]{9, 19, 37}))) {
            throw new Exception("ts1 case2 failed");
        };
        if ((!Program.list_equal(Program.triplet_sum2(arr2_31, 65), new long[]{9, 19, 37}))) {
            throw new Exception("ts2 case2 failed");
        };
        long[] arr3_32 = new long[]{6, 47, 27, 1, 15};
        if ((!Program.list_equal(Program.triplet_sum1(arr3_32, 11), new long[]{0, 0, 0}))) {
            throw new Exception("ts1 case3 failed");
        };
        if ((!Program.list_equal(Program.triplet_sum2(arr3_32, 11), new long[]{0, 0, 0}))) {
            throw new Exception("ts2 case3 failed");
        };
    }

    public static void main() {
        Program.test_triplet_sum();
        long[] sample_33 = new long[]{13, 29, 7, 23, 5};
        long[] res_34 = Program.triplet_sum2(sample_33, 35);
        Console.WriteLine(Program._fmtTop(((((_fmtStr(res_34[(int)(0)]) + " ") + _fmtStr(res_34[(int)(1)])) + " ") + _fmtStr(res_34[(int)(2)]))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
