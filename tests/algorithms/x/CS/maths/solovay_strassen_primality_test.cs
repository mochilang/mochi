// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_0 = 1;
    public static void set_seed(long s_1) {
        seed_0 = s_1;
    }

    public static long randint(long a_2, long b_3) {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return (_mod(seed_0, ((b_3 - a_2) + 1)) + a_2);
    }

    public static long jacobi_symbol(long random_a_4, long number_5) {
        if (((random_a_4 == 0) || (random_a_4 == 1))) {
            return random_a_4;
        };
        random_a_4 = _mod(random_a_4, number_5);
        long t_6 = 1;
        while ((random_a_4 != 0)) {
            while ((_mod(random_a_4, 2) == 0)) {
                random_a_4 = _floordiv(random_a_4, 2);
                long r_7 = _mod(number_5, 8);
                if (((r_7 == 3) || (r_7 == 5))) {
                    t_6 = -t_6;
                }
            }
            long temp_8 = random_a_4;
            random_a_4 = number_5;
            number_5 = temp_8;
            if (((_mod(random_a_4, 4) == 3) && (_mod(number_5, 4) == 3))) {
                t_6 = -t_6;
            }
            random_a_4 = _mod(random_a_4, number_5);
        };
        if ((number_5 == 1)) {
            return t_6;
        };
        return 0;
    }

    public static long pow_mod(long base_9, long exp_10, long mod_11) {
        long result_12 = 1;
        long b_13 = _mod(base_9, mod_11);
        long e_14 = exp_10;
        while ((e_14 > 0)) {
            if ((_mod(e_14, 2) == 1)) {
                result_12 = _mod((result_12 * b_13), mod_11);
            }
            b_13 = _mod((b_13 * b_13), mod_11);
            e_14 = _floordiv(e_14, 2);
        };
        return result_12;
    }

    public static bool solovay_strassen(long number_15, long iterations_16) {
        if ((number_15 <= 1)) {
            return false;
        };
        if ((number_15 <= 3)) {
            return true;
        };
        long i_17 = 0;
        while ((i_17 < iterations_16)) {
            long a_18 = Program.randint(2, (number_15 - 2));
            long x_19 = Program.jacobi_symbol(a_18, number_15);
            long y_20 = Program.pow_mod(a_18, _floordiv((number_15 - 1), 2), number_15);
            long mod_x_21 = _mod(x_19, number_15);
            if ((mod_x_21 < 0)) {
                mod_x_21 = (mod_x_21 + number_15);
            }
            if (((x_19 == 0) || (y_20 != mod_x_21))) {
                return false;
            }
            i_17 = (i_17 + 1);
        };
        return true;
    }

    public static void main() {
        Program.set_seed(10);
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.solovay_strassen(13, 5))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.solovay_strassen(9, 10))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.solovay_strassen(17, 15))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
