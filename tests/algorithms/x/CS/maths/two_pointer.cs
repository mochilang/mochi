// Generated by Mochi 0.10.73 (commit 698bf55243) on 2025-08-25 22:27 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] two_pointer(BigInteger[] nums_0, BigInteger target_1) {
        BigInteger i_2 = 0;
        BigInteger j_3 = (nums_0.Length - 1);
        while ((i_2 < j_3)) {
            BigInteger s_4 = (_idx(nums_0, (long)(i_2)) + _idx(nums_0, (long)(j_3)));
            if ((s_4 == target_1)) {
                return new BigInteger[]{i_2, j_3};
            }
            if ((s_4 < target_1)) {
                i_2 = (i_2 + 1);
            } else {
                j_3 = (j_3 - 1);
            }
        };
        return new BigInteger[]{};
    }

    public static void test_two_pointer() {
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.two_pointer(new BigInteger[]{2, 7, 11, 15}, 9), new BigInteger[]{0, 1}))) {
            throw new Exception("case1");
        };
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.two_pointer(new BigInteger[]{2, 7, 11, 15}, 17), new BigInteger[]{0, 3}))) {
            throw new Exception("case2");
        };
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.two_pointer(new BigInteger[]{2, 7, 11, 15}, 18), new BigInteger[]{1, 2}))) {
            throw new Exception("case3");
        };
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.two_pointer(new BigInteger[]{2, 7, 11, 15}, 26), new BigInteger[]{2, 3}))) {
            throw new Exception("case4");
        };
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.two_pointer(new BigInteger[]{1, 3, 3}, 6), new BigInteger[]{1, 2}))) {
            throw new Exception("case5");
        };
        if ((Program.two_pointer(new BigInteger[]{2, 7, 11, 15}, 8).Length != 0)) {
            throw new Exception("case6");
        };
        if ((Program.two_pointer(new BigInteger[]{0, 3, 6, 9, 12, 15, 18, 21, 24, 27}, 19).Length != 0)) {
            throw new Exception("case7");
        };
        if ((Program.two_pointer(new BigInteger[]{1, 2, 3}, 6).Length != 0)) {
            throw new Exception("case8");
        };
    }

    public static void main() {
        Program.test_two_pointer();
        Console.WriteLine(Program._fmtTop(Program.two_pointer(new BigInteger[]{2, 7, 11, 15}, 9)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
