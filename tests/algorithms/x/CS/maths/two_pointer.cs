// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] two_pointer(long[] nums_0, long target_1) {
        long i_2 = 0;
        long j_3 = (nums_0.Length - 1);
        while ((i_2 < j_3)) {
            long s_4 = (nums_0[(int)(i_2)] + nums_0[(int)(j_3)]);
            if ((s_4 == target_1)) {
                return new long[]{i_2, j_3};
            }
            if ((s_4 < target_1)) {
                i_2 = (i_2 + 1);
            } else {
                j_3 = (j_3 - 1);
            }
        };
        return new long[]{};
    }

    public static void test_two_pointer() {
        if ((Program.two_pointer(new long[]{2, 7, 11, 15}, 9) != new long[]{0, 1})) {
            throw new Exception("case1");
        };
        if ((Program.two_pointer(new long[]{2, 7, 11, 15}, 17) != new long[]{0, 3})) {
            throw new Exception("case2");
        };
        if ((Program.two_pointer(new long[]{2, 7, 11, 15}, 18) != new long[]{1, 2})) {
            throw new Exception("case3");
        };
        if ((Program.two_pointer(new long[]{2, 7, 11, 15}, 26) != new long[]{2, 3})) {
            throw new Exception("case4");
        };
        if ((Program.two_pointer(new long[]{1, 3, 3}, 6) != new long[]{1, 2})) {
            throw new Exception("case5");
        };
        if ((Program.two_pointer(new long[]{2, 7, 11, 15}, 8).Length != 0)) {
            throw new Exception("case6");
        };
        if ((Program.two_pointer(new long[]{0, 3, 6, 9, 12, 15, 18, 21, 24, 27}, 19).Length != 0)) {
            throw new Exception("case7");
        };
        if ((Program.two_pointer(new long[]{1, 2, 3}, 6).Length != 0)) {
            throw new Exception("case8");
        };
    }

    public static void main() {
        Program.test_two_pointer();
        Console.WriteLine(Program._fmtTop(Program.two_pointer(new long[]{2, 7, 11, 15}, 9)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
