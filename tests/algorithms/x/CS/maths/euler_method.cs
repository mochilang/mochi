// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long ceil_int(double x_0) {
        long n_1 = Convert.ToInt64(x_0);
        if ((Convert.ToDouble(n_1) < x_0)) {
            n_1 = (n_1 + 1);
        };
        return n_1;
    }

    public static double[] explicit_euler(Func<double, double, double> ode_func_2, double y0_3, double x0_4, double step_size_5, double x_end_6) {
        long n_7 = Program.ceil_int(((x_end_6 - x0_4) / step_size_5));
        double[] y_8 = new double[]{};
        long i_9 = 0;
        while ((i_9 <= n_7)) {
            y_8 = (Enumerable.ToArray(Enumerable.Append<double>(y_8, 0.0)));
            i_9 = (i_9 + 1);
        };
        y_8[0] = y0_3;
        double x_10 = x0_4;
        long k_11 = 0;
        while ((k_11 < n_7)) {
            y_8[(k_11 + 1)] = (y_8[(int)(k_11)] + (((dynamic)(step_size_5)) * ((dynamic)(ode_func_2(x_10, y_8[(int)(k_11)])))));
            x_10 = (x_10 + step_size_5);
            k_11 = (k_11 + 1);
        };
        return y_8;
    }

    public static double abs_float(double a_12) {
        if ((a_12 < 0.0)) {
            return -a_12;
        };
        return a_12;
    }

    public static void test_explicit_euler() {
        Func<double, double, double> f_13 = null;
        f_13 = (double x, double y) => y;
        double[] ys_14 = Program.explicit_euler(f_13, 1.0, 0.0, 0.01, 5.0);
        double last_15 = ys_14[(int)((ys_14.Length - 1))];
        if ((Program.abs_float((last_15 - 144.77277243257308)) > 0.001)) {
            throw new Exception("explicit_euler failed");
        };
    }

    public static void main() {
        Program.test_explicit_euler();
        Func<double, double, double> f_16 = null;
        f_16 = (double x, double y) => y;
        double[] ys_17 = Program.explicit_euler(f_16, 1.0, 0.0, 0.01, 5.0);
        Console.WriteLine(Program._fmtTop(ys_17[(int)((ys_17.Length - 1))]));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
