// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Dual {
    public double real;
    public double[] duals;
    public override string ToString() => $"Dual {{real = {real.ToString("0.0")}, duals = {duals}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Dual make_dual(double real_0, long rank_1) {
        double[] ds_2 = new double[]{};
        long i_3 = 0;
        while ((i_3 < rank_1)) {
            ds_2 = (Enumerable.ToArray(Enumerable.Append<double>(ds_2, 1.0)));
            i_3 = (i_3 + 1);
        };
        return new Dual{real = real_0, duals = ds_2};
    }

    public static Dual dual_from_list(double real_4, double[] ds_5) {
        return new Dual{real = real_4, duals = ds_5};
    }

    public static Dual dual_add(Dual a_6, Dual b_7) {
        double[] s_dual_8 = new double[]{};
        long i_9 = 0;
        while ((i_9 < a_6.duals.Length)) {
            s_dual_8 = (Enumerable.ToArray(Enumerable.Append<double>(s_dual_8, a_6.duals[(int)(i_9)])));
            i_9 = (i_9 + 1);
        };
        double[] o_dual_10 = new double[]{};
        long j_11 = 0;
        while ((j_11 < b_7.duals.Length)) {
            o_dual_10 = (Enumerable.ToArray(Enumerable.Append<double>(o_dual_10, b_7.duals[(int)(j_11)])));
            j_11 = (j_11 + 1);
        };
        if ((s_dual_8.Length > o_dual_10.Length)) {
            long diff_12 = (s_dual_8.Length - o_dual_10.Length);
            long k_13 = 0;
            while ((k_13 < diff_12)) {
                o_dual_10 = (Enumerable.ToArray(Enumerable.Append<double>(o_dual_10, 1.0)));
                k_13 = (k_13 + 1);
            }
        } else if ((s_dual_8.Length < o_dual_10.Length)) {
            long diff2_14 = (o_dual_10.Length - s_dual_8.Length);
            long k2_15 = 0;
            while ((k2_15 < diff2_14)) {
                s_dual_8 = (Enumerable.ToArray(Enumerable.Append<double>(s_dual_8, 1.0)));
                k2_15 = (k2_15 + 1);
            }
        };
        double[] new_duals_16 = new double[]{};
        long idx_17 = 0;
        while ((idx_17 < s_dual_8.Length)) {
            new_duals_16 = (Enumerable.ToArray(Enumerable.Append<double>(new_duals_16, (s_dual_8[(int)(idx_17)] + o_dual_10[(int)(idx_17)]))));
            idx_17 = (idx_17 + 1);
        };
        return new Dual{real = (a_6.real + b_7.real), duals = new_duals_16};
    }

    public static Dual dual_add_real(Dual a_18, double b_19) {
        double[] ds_20 = new double[]{};
        long i_21 = 0;
        while ((i_21 < a_18.duals.Length)) {
            ds_20 = (Enumerable.ToArray(Enumerable.Append<double>(ds_20, a_18.duals[(int)(i_21)])));
            i_21 = (i_21 + 1);
        };
        return new Dual{real = (a_18.real + b_19), duals = ds_20};
    }

    public static Dual dual_mul(Dual a_22, Dual b_23) {
        long new_len_24 = ((a_22.duals.Length + b_23.duals.Length) + 1);
        double[] new_duals_25 = new double[]{};
        long idx_26 = 0;
        while ((idx_26 < new_len_24)) {
            new_duals_25 = (Enumerable.ToArray(Enumerable.Append<double>(new_duals_25, 0.0)));
            idx_26 = (idx_26 + 1);
        };
        long i_27 = 0;
        while ((i_27 < a_22.duals.Length)) {
            long j_28 = 0;
            while ((j_28 < b_23.duals.Length)) {
                long pos_29 = ((i_27 + j_28) + 1);
                double val_30 = (new_duals_25[(int)(pos_29)] + (a_22.duals[(int)(i_27)] * b_23.duals[(int)(j_28)]));
                new_duals_25[pos_29] = val_30;
                j_28 = (j_28 + 1);
            }
            i_27 = (i_27 + 1);
        };
        long k_31 = 0;
        while ((k_31 < a_22.duals.Length)) {
            double val_32 = (new_duals_25[(int)(k_31)] + (a_22.duals[(int)(k_31)] * b_23.real));
            new_duals_25[k_31] = val_32;
            k_31 = (k_31 + 1);
        };
        long l_33 = 0;
        while ((l_33 < b_23.duals.Length)) {
            double val_34 = (new_duals_25[(int)(l_33)] + (b_23.duals[(int)(l_33)] * a_22.real));
            new_duals_25[l_33] = val_34;
            l_33 = (l_33 + 1);
        };
        return new Dual{real = (a_22.real * b_23.real), duals = new_duals_25};
    }

    public static Dual dual_mul_real(Dual a_35, double b_36) {
        double[] ds_37 = new double[]{};
        long i_38 = 0;
        while ((i_38 < a_35.duals.Length)) {
            ds_37 = (Enumerable.ToArray(Enumerable.Append<double>(ds_37, (a_35.duals[(int)(i_38)] * b_36))));
            i_38 = (i_38 + 1);
        };
        return new Dual{real = (a_35.real * b_36), duals = ds_37};
    }

    public static Dual dual_pow(Dual x_39, long n_40) {
        if ((n_40 < 0)) {
            throw new Exception("power must be a positive integer");
        };
        if ((n_40 == 0)) {
            return new Dual{real = 1.0, duals = new double[]{}};
        };
        Dual res_41 = x_39;
        long i_42 = 1;
        while ((i_42 < n_40)) {
            res_41 = Program.dual_mul(res_41, x_39);
            i_42 = (i_42 + 1);
        };
        return res_41;
    }

    public static double factorial(long n_43) {
        double res_44 = 1.0;
        long i_45 = 2;
        while ((i_45 <= n_43)) {
            res_44 = (res_44 * Convert.ToDouble(i_45));
            i_45 = (i_45 + 1);
        };
        return res_44;
    }

    public static double differentiate(Func<Dual, Dual> func_46, double position_47, long order_48) {
        Dual d_49 = Program.make_dual(position_47, 1);
        var result_50 = func_46(d_49);
        if ((order_48 == 0)) {
            return ((dynamic)(result_50)).real;
        };
        return (((dynamic)(((dynamic)((dynamic)(result_50)).duals)[(order_48 - 1)])) * ((dynamic)(Program.factorial(order_48))));
    }

    public static void test_differentiate() {
        Func<Dual, Dual> f1 = null;
        f1 = (Dual x_51) => {return Program.dual_pow(x_51, 2);};
        if ((Program.differentiate(f1, 2.0, 2) != 2.0)) {
            throw new Exception("f1 failed");
        };
        Func<Dual, Dual> f2 = null;
        f2 = (Dual x_52) => {return Program.dual_mul(Program.dual_pow(x_52, 2), Program.dual_pow(x_52, 4));};
        if ((Program.differentiate(f2, 9.0, 2) != 196830.0)) {
            throw new Exception("f2 failed");
        };
        Func<Dual, Dual> f3 = null;
        f3 = (Dual y_53) => {return Program.dual_mul_real(Program.dual_pow(Program.dual_add_real(y_53, 3.0), 6), 0.5);};
        if ((Program.differentiate(f3, 3.5, 4) != 7605.0)) {
            throw new Exception("f3 failed");
        };
        Func<Dual, Dual> f4 = null;
        f4 = (Dual y_54) => {return Program.dual_pow(y_54, 2);};
        if ((Program.differentiate(f4, 4.0, 3) != 0.0)) {
            throw new Exception("f4 failed");
        };
    }

    public static void main() {
        Program.test_differentiate();
        Func<Dual, Dual> f = null;
        f = (Dual y_55) => {return Program.dual_mul(Program.dual_pow(y_55, 2), Program.dual_pow(y_55, 4));};
        double res_56 = Program.differentiate(f, 9.0, 2);
        Console.WriteLine(Program._fmtTop(res_56));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
