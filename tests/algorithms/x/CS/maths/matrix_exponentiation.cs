// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[][] identity(long n_0) {
        long i_1 = 0;
        long[][] mat_2 = new long[][]{};
        while ((i_1 < n_0)) {
            long[] row_3 = new long[]{};
            long j_4 = 0;
            while ((j_4 < n_0)) {
                if ((i_1 == j_4)) {
                    row_3 = ((Func<long[]>)(() => { var _tmp = row_3.ToList(); _tmp.Add(1); return _tmp.ToArray(); }))();
                } else {
                    row_3 = ((Func<long[]>)(() => { var _tmp = row_3.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                }
                j_4 = (j_4 + 1);
            }
            mat_2 = ((Func<long[][]>)(() => { var _tmp = mat_2.ToList(); _tmp.Add(row_3); return _tmp.ToArray(); }))();
            i_1 = (i_1 + 1);
        };
        return mat_2;
    }

    public static long[][] matrix_mul(long[][] a_5, long[][] b_6) {
        long n_7 = a_5.Length;
        long[][] result_8 = new long[][]{};
        long i_9 = 0;
        while ((i_9 < n_7)) {
            long[] row_10 = new long[]{};
            long j_11 = 0;
            while ((j_11 < n_7)) {
                long cell_12 = 0;
                long k_13 = 0;
                while ((k_13 < n_7)) {
                    cell_12 = (cell_12 + (_idx(_idx(a_5, i_9), k_13) * _idx(_idx(b_6, k_13), j_11)));
                    k_13 = (k_13 + 1);
                }
                row_10 = ((Func<long[]>)(() => { var _tmp = row_10.ToList(); _tmp.Add(cell_12); return _tmp.ToArray(); }))();
                j_11 = (j_11 + 1);
            }
            result_8 = ((Func<long[][]>)(() => { var _tmp = result_8.ToList(); _tmp.Add(row_10); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static long[][] matrix_pow(long[][] base_14, long exp_15) {
        long[][] result_16 = Program.identity(base_14.Length);
        long[][] b_17 = base_14;
        long e_18 = exp_15;
        while ((e_18 > 0)) {
            if ((_mod(e_18, 2) == 1)) {
                result_16 = Program.matrix_mul(result_16, b_17);
            }
            b_17 = Program.matrix_mul(b_17, b_17);
            e_18 = _floordiv(e_18, 2);
        };
        return result_16;
    }

    public static long fibonacci_with_matrix_exponentiation(long n_19, long f1_20, long f2_21) {
        if ((n_19 == 1)) {
            return f1_20;
        };
        if ((n_19 == 2)) {
            return f2_21;
        };
        long[][] base_22 = new long[][]{new long[]{1, 1}, new long[]{1, 0}};
        long[][] m_23 = Program.matrix_pow(base_22, (n_19 - 2));
        return ((f2_21 * _idx(_idx(m_23, 0), 0)) + (f1_20 * _idx(_idx(m_23, 0), 1)));
    }

    public static long simple_fibonacci(long n_24, long f1_25, long f2_26) {
        if ((n_24 == 1)) {
            return f1_25;
        };
        if ((n_24 == 2)) {
            return f2_26;
        };
        long a_27 = f1_25;
        long b_28 = f2_26;
        long count_29 = (n_24 - 2);
        while ((count_29 > 0)) {
            long tmp_30 = (a_27 + b_28);
            a_27 = b_28;
            b_28 = tmp_30;
            count_29 = (count_29 - 1);
        };
        return b_28;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_with_matrix_exponentiation(1, 5, 6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_with_matrix_exponentiation(2, 10, 11))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_with_matrix_exponentiation(13, 0, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_with_matrix_exponentiation(10, 5, 9))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fibonacci_with_matrix_exponentiation(9, 2, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_fibonacci(1, 5, 6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_fibonacci(2, 10, 11))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_fibonacci(13, 0, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_fibonacci(10, 5, 9))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_fibonacci(9, 2, 3))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
