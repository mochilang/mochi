// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<long, long> fib_cache_global_15 = new Dictionary<long, long>{};
    static Dictionary<long, long> fib_memo_cache_21 = new Dictionary<long, long>{{0, 0}, {1, 1}, {2, 1}};
    public static double sqrt(double x_0) {
        if ((x_0 <= 0.0)) {
            return 0.0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 10)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double powf(double x_3, long n_4) {
        double res_5 = 1.0;
        long i_6 = 0;
        while ((i_6 < n_4)) {
            res_5 = (res_5 * x_3);
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static long roundf(double x_7) {
        if ((x_7 >= 0.0)) {
            return Convert.ToInt64((x_7 + 0.5));
        };
        return Convert.ToInt64((x_7 - 0.5));
    }

    public static long[] fib_iterative(long n_8) {
        if ((n_8 < 0)) {
            throw new Exception("n is negative");
        };
        if ((n_8 == 0)) {
            return new long[]{0};
        };
        long[] fib_9 = new long[]{0, 1};
        long i_10 = 2;
        while ((i_10 <= n_8)) {
            fib_9 = (Enumerable.ToArray(Enumerable.Append<long>(fib_9, (fib_9[(int)((i_10 - 1))] + fib_9[(int)((i_10 - 2))]))));
            i_10 = (i_10 + 1);
        };
        return fib_9;
    }

    public static long fib_recursive_term(long i_11) {
        if ((i_11 < 0)) {
            throw new Exception("n is negative");
        };
        if ((i_11 < 2)) {
            return i_11;
        };
        return (Program.fib_recursive_term((i_11 - 1)) + Program.fib_recursive_term((i_11 - 2)));
    }

    public static long[] fib_recursive(long n_12) {
        if ((n_12 < 0)) {
            throw new Exception("n is negative");
        };
        long[] res_13 = new long[]{};
        long i_14 = 0;
        while ((i_14 <= n_12)) {
            res_13 = (Enumerable.ToArray(Enumerable.Append<long>(res_13, Program.fib_recursive_term(i_14))));
            i_14 = (i_14 + 1);
        };
        return res_13;
    }

    public static long fib_recursive_cached_term(long i_16) {
        if ((i_16 < 0)) {
            throw new Exception("n is negative");
        };
        if ((i_16 < 2)) {
            return i_16;
        };
        if ((fib_cache_global_15.ContainsKey(i_16))) {
            return (fib_cache_global_15.ContainsKey(i_16) ? fib_cache_global_15[i_16] : 0);
        };
        long val_17 = (Program.fib_recursive_cached_term((i_16 - 1)) + Program.fib_recursive_cached_term((i_16 - 2)));
        fib_cache_global_15[i_16] = val_17;
        return val_17;
    }

    public static long[] fib_recursive_cached(long n_18) {
        if ((n_18 < 0)) {
            throw new Exception("n is negative");
        };
        long[] res_19 = new long[]{};
        long j_20 = 0;
        while ((j_20 <= n_18)) {
            res_19 = (Enumerable.ToArray(Enumerable.Append<long>(res_19, Program.fib_recursive_cached_term(j_20))));
            j_20 = (j_20 + 1);
        };
        return res_19;
    }

    public static long fib_memoization_term(long num_22) {
        if ((fib_memo_cache_21.ContainsKey(num_22))) {
            return (fib_memo_cache_21.ContainsKey(num_22) ? fib_memo_cache_21[num_22] : 0);
        };
        long value_23 = (Program.fib_memoization_term((num_22 - 1)) + Program.fib_memoization_term((num_22 - 2)));
        fib_memo_cache_21[num_22] = value_23;
        return value_23;
    }

    public static long[] fib_memoization(long n_24) {
        if ((n_24 < 0)) {
            throw new Exception("n is negative");
        };
        long[] out_25 = new long[]{};
        long i_26 = 0;
        while ((i_26 <= n_24)) {
            out_25 = (Enumerable.ToArray(Enumerable.Append<long>(out_25, Program.fib_memoization_term(i_26))));
            i_26 = (i_26 + 1);
        };
        return out_25;
    }

    public static long[] fib_binet(long n_27) {
        if ((n_27 < 0)) {
            throw new Exception("n is negative");
        };
        if ((n_27 >= 1475)) {
            throw new Exception("n is too large");
        };
        double sqrt5_28 = Program.sqrt(5.0);
        double phi_29 = ((1.0 + sqrt5_28) / 2.0);
        long[] res_30 = new long[]{};
        long i_31 = 0;
        while ((i_31 <= n_27)) {
            long val_32 = Program.roundf((Program.powf(phi_29, i_31) / sqrt5_28));
            res_30 = (Enumerable.ToArray(Enumerable.Append<long>(res_30, val_32)));
            i_31 = (i_31 + 1);
        };
        return res_30;
    }

    public static long[][] matrix_mul(long[][] a_33, long[][] b_34) {
        long a00_35 = ((a_33[(int)(0)][(int)(0)] * b_34[(int)(0)][(int)(0)]) + (a_33[(int)(0)][(int)(1)] * b_34[(int)(1)][(int)(0)]));
        long a01_36 = ((a_33[(int)(0)][(int)(0)] * b_34[(int)(0)][(int)(1)]) + (a_33[(int)(0)][(int)(1)] * b_34[(int)(1)][(int)(1)]));
        long a10_37 = ((a_33[(int)(1)][(int)(0)] * b_34[(int)(0)][(int)(0)]) + (a_33[(int)(1)][(int)(1)] * b_34[(int)(1)][(int)(0)]));
        long a11_38 = ((a_33[(int)(1)][(int)(0)] * b_34[(int)(0)][(int)(1)]) + (a_33[(int)(1)][(int)(1)] * b_34[(int)(1)][(int)(1)]));
        return new long[][]{new long[]{a00_35, a01_36}, new long[]{a10_37, a11_38}};
    }

    public static long[][] matrix_pow(long[][] m_39, long power_40) {
        if ((power_40 < 0)) {
            throw new Exception("power is negative");
        };
        long[][] result_41 = new long[][]{new long[]{1, 0}, new long[]{0, 1}};
        long[][] base_42 = m_39;
        long p_43 = power_40;
        while ((p_43 > 0)) {
            if ((_mod(p_43, 2) == 1)) {
                result_41 = Program.matrix_mul(result_41, base_42);
            }
            base_42 = Program.matrix_mul(base_42, base_42);
            p_43 = Convert.ToInt64((p_43 / 2));
        };
        return result_41;
    }

    public static long fib_matrix(long n_44) {
        if ((n_44 < 0)) {
            throw new Exception("n is negative");
        };
        if ((n_44 == 0)) {
            return 0;
        };
        long[][] m_45 = new long[][]{new long[]{1, 1}, new long[]{1, 0}};
        long[][] res_46 = Program.matrix_pow(m_45, (n_44 - 1));
        return res_46[(int)(0)][(int)(0)];
    }

    public static long run_tests() {
        long[] expected_47 = new long[]{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55};
        long[] it_48 = Program.fib_iterative(10);
        long[] rec_49 = Program.fib_recursive(10);
        long[] cache_50 = Program.fib_recursive_cached(10);
        long[] memo_51 = Program.fib_memoization(10);
        long[] bin_52 = Program.fib_binet(10);
        long m_53 = Program.fib_matrix(10);
        if ((it_48 != expected_47)) {
            throw new Exception("iterative failed");
        };
        if ((rec_49 != expected_47)) {
            throw new Exception("recursive failed");
        };
        if ((cache_50 != expected_47)) {
            throw new Exception("cached failed");
        };
        if ((memo_51 != expected_47)) {
            throw new Exception("memoization failed");
        };
        if ((bin_52 != expected_47)) {
            throw new Exception("binet failed");
        };
        if ((m_53 != 55)) {
            throw new Exception("matrix failed");
        };
        return m_53;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.run_tests())));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
