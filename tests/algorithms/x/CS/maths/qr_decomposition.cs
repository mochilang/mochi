// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class QR {
    public double[][] q;
    public double[][] r;
    public override string ToString() => $"QR {{q = {q}, r = {r}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] A_54 = new double[][]{new double[]{12.0, -51.0, 4.0}, new double[]{6.0, 167.0, -68.0}, new double[]{-4.0, 24.0, -41.0}};
    static QR result_55 = Program.qr_decomposition(A_54);
    public static double sqrt_approx(double x_0) {
        if ((x_0 <= 0.0)) {
            return 0.0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double sign(double x_3) {
        if ((x_3 >= 0.0)) {
            return 1.0;
        } else {
            return -1.0;
        };
        return default(double);
    }

    public static double vector_norm(double[] v_4) {
        double sum_5 = 0.0;
        long i_6 = 0;
        while ((i_6 < v_4.Length)) {
            sum_5 = (sum_5 + (_idx(v_4, i_6) * _idx(v_4, i_6)));
            i_6 = (i_6 + 1);
        };
        double n_7 = Program.sqrt_approx(sum_5);
        return n_7;
    }

    public static double[][] identity_matrix(long n_8) {
        double[][] mat_9 = new double[][]{};
        long i_10 = 0;
        while ((i_10 < n_8)) {
            double[] row_11 = new double[]{};
            long j_12 = 0;
            while ((j_12 < n_8)) {
                if ((i_10 == j_12)) {
                    row_11 = ((Func<double[]>)(() => { var _tmp = row_11.Cast<double>().ToList(); _tmp.Add(1.0); return _tmp.ToArray(); }))();
                } else {
                    row_11 = ((Func<double[]>)(() => { var _tmp = row_11.Cast<double>().ToList(); _tmp.Add(0.0); return _tmp.ToArray(); }))();
                }
                j_12 = (j_12 + 1);
            }
            mat_9 = ((Func<double[][]>)(() => { var _tmp = mat_9.Cast<double[]>().ToList(); _tmp.Add(row_11); return _tmp.ToArray(); }))();
            i_10 = (i_10 + 1);
        };
        return mat_9;
    }

    public static double[][] copy_matrix(double[][] a_13) {
        double[][] mat_14 = new double[][]{};
        long i_15 = 0;
        while ((i_15 < a_13.Length)) {
            double[] row_16 = new double[]{};
            long j_17 = 0;
            while ((j_17 < _idx(a_13, i_15).Length)) {
                row_16 = ((Func<double[]>)(() => { var _tmp = row_16.Cast<double>().ToList(); _tmp.Add(_idx(_idx(a_13, i_15), j_17)); return _tmp.ToArray(); }))();
                j_17 = (j_17 + 1);
            }
            mat_14 = ((Func<double[][]>)(() => { var _tmp = mat_14.Cast<double[]>().ToList(); _tmp.Add(row_16); return _tmp.ToArray(); }))();
            i_15 = (i_15 + 1);
        };
        return mat_14;
    }

    public static double[][] matmul(double[][] a_18, double[][] b_19) {
        long m_20 = a_18.Length;
        long n_21 = _idx(a_18, 0).Length;
        long p_22 = _idx(b_19, 0).Length;
        double[][] res_23 = new double[][]{};
        long i_24 = 0;
        while ((i_24 < m_20)) {
            double[] row_25 = new double[]{};
            long j_26 = 0;
            while ((j_26 < p_22)) {
                double sum_27 = 0.0;
                long k_28 = 0;
                while ((k_28 < n_21)) {
                    sum_27 = (sum_27 + (_idx(_idx(a_18, i_24), k_28) * _idx(_idx(b_19, k_28), j_26)));
                    k_28 = (k_28 + 1);
                }
                row_25 = ((Func<double[]>)(() => { var _tmp = row_25.Cast<double>().ToList(); _tmp.Add(sum_27); return _tmp.ToArray(); }))();
                j_26 = (j_26 + 1);
            }
            res_23 = ((Func<double[][]>)(() => { var _tmp = res_23.Cast<double[]>().ToList(); _tmp.Add(row_25); return _tmp.ToArray(); }))();
            i_24 = (i_24 + 1);
        };
        return res_23;
    }

    public static QR qr_decomposition(double[][] a_29) {
        long m_30 = a_29.Length;
        long n_31 = _idx(a_29, 0).Length;
        long t_32 = ((m_30 < n_31) ? m_30 : n_31);
        double[][] q_33 = Program.identity_matrix(m_30);
        double[][] r_34 = Program.copy_matrix(a_29);
        long k_35 = 0;
        while ((k_35 < (t_32 - 1))) {
            double[] x_36 = new double[]{};
            long i_37 = k_35;
            while ((i_37 < m_30)) {
                x_36 = ((Func<double[]>)(() => { var _tmp = x_36.Cast<double>().ToList(); _tmp.Add(_idx(_idx(r_34, i_37), k_35)); return _tmp.ToArray(); }))();
                i_37 = (i_37 + 1);
            }
            double[] e1_38 = new double[]{};
            i_37 = 0;
            while ((i_37 < x_36.Length)) {
                if ((i_37 == 0)) {
                    e1_38 = ((Func<double[]>)(() => { var _tmp = e1_38.Cast<double>().ToList(); _tmp.Add(1.0); return _tmp.ToArray(); }))();
                } else {
                    e1_38 = ((Func<double[]>)(() => { var _tmp = e1_38.Cast<double>().ToList(); _tmp.Add(0.0); return _tmp.ToArray(); }))();
                }
                i_37 = (i_37 + 1);
            }
            double alpha_39 = Program.vector_norm(x_36);
            double s_40 = (Program.sign(_idx(x_36, 0)) * alpha_39);
            double[] v_41 = new double[]{};
            i_37 = 0;
            while ((i_37 < x_36.Length)) {
                v_41 = ((Func<double[]>)(() => { var _tmp = v_41.Cast<double>().ToList(); _tmp.Add((_idx(x_36, i_37) + (s_40 * _idx(e1_38, i_37)))); return _tmp.ToArray(); }))();
                i_37 = (i_37 + 1);
            }
            double vnorm_42 = Program.vector_norm(v_41);
            i_37 = 0;
            while ((i_37 < v_41.Length)) {
                v_41[(int)(i_37)] = (_idx(v_41, i_37) / vnorm_42);
                i_37 = (i_37 + 1);
            }
            long size_43 = v_41.Length;
            double[][] qk_small_44 = new double[][]{};
            i_37 = 0;
            while ((i_37 < size_43)) {
                double[] row_45 = new double[]{};
                long j_46 = 0;
                while ((j_46 < size_43)) {
                    double delta_47 = ((i_37 == j_46) ? 1.0 : 0.0);
                    row_45 = ((Func<double[]>)(() => { var _tmp = row_45.Cast<double>().ToList(); _tmp.Add((delta_47 - ((2.0 * _idx(v_41, i_37)) * _idx(v_41, j_46)))); return _tmp.ToArray(); }))();
                    j_46 = (j_46 + 1);
                }
                qk_small_44 = ((Func<double[][]>)(() => { var _tmp = qk_small_44.Cast<double[]>().ToList(); _tmp.Add(row_45); return _tmp.ToArray(); }))();
                i_37 = (i_37 + 1);
            }
            double[][] qk_48 = Program.identity_matrix(m_30);
            i_37 = 0;
            while ((i_37 < size_43)) {
                long j_49 = 0;
                while ((j_49 < size_43)) {
                    _idx(qk_48, (k_35 + i_37))[(int)((k_35 + j_49))] = _idx(_idx(qk_small_44, i_37), j_49);
                    j_49 = (j_49 + 1);
                }
                i_37 = (i_37 + 1);
            }
            q_33 = Program.matmul(q_33, qk_48);
            r_34 = Program.matmul(qk_48, r_34);
            k_35 = (k_35 + 1);
        };
        return new QR{q = q_33, r = r_34};
    }

    public static void print_matrix(double[][] mat_50) {
        long i_51 = 0;
        while ((i_51 < mat_50.Length)) {
            string line_52 = "";
            long j_53 = 0;
            while ((j_53 < _idx(mat_50, i_51).Length)) {
                line_52 = (line_52 + _fmtStr(_idx(_idx(mat_50, i_51), j_53)));
                if (((j_53 + 1) < _idx(mat_50, i_51).Length)) {
                    line_52 = (line_52 + " ");
                }
                j_53 = (j_53 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_52));
            i_51 = (i_51 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_matrix(result_55.q);
            Program.print_matrix(result_55.r);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
