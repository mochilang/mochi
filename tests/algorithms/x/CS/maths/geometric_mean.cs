// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double abs(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double pow_int(double base_1, long exp_2) {
        double result_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < exp_2)) {
            result_3 = (result_3 * base_1);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static double nth_root(double x_5, long n_6) {
        if ((x_5 == 0.0)) {
            return 0.0;
        };
        double guess_7 = x_5;
        long i_8 = 0;
        while ((i_8 < 10)) {
            double denom_9 = Program.pow_int(guess_7, (n_6 - 1));
            guess_7 = (((Convert.ToDouble((n_6 - 1)) * guess_7) + (x_5 / denom_9)) / Convert.ToDouble(n_6));
            i_8 = (i_8 + 1);
        };
        return guess_7;
    }

    public static double round_nearest(double x_10) {
        if ((x_10 >= 0.0)) {
            long n_11 = (long)((x_10 + 0.5));
            return Convert.ToDouble(n_11);
        };
        long n_12 = (long)((x_10 - 0.5));
        return Convert.ToDouble(n_12);
    }

    public static double compute_geometric_mean(double[] nums_13) {
        if ((nums_13.Length == 0)) {
            throw new Exception("no numbers");
        };
        double product_14 = 1.0;
        long i_15 = 0;
        while ((i_15 < nums_13.Length)) {
            product_14 = (product_14 * _idx(nums_13, i_15));
            i_15 = (i_15 + 1);
        };
        if (((product_14 < 0.0) && (_mod(nums_13.Length, 2) == 0))) {
            throw new Exception("Cannot Compute Geometric Mean for these numbers.");
        };
        double mean_16 = Program.nth_root(Program.abs(product_14), nums_13.Length);
        if ((product_14 < 0.0)) {
            mean_16 = -mean_16;
        };
        double possible_17 = Program.round_nearest(mean_16);
        if ((Program.pow_int(possible_17, nums_13.Length) == product_14)) {
            mean_16 = possible_17;
        };
        return mean_16;
    }

    public static void test_compute_geometric_mean() {
        double eps_18 = 0.0001;
        double m1_19 = Program.compute_geometric_mean(new double[]{2.0, 8.0});
        if ((Program.abs((m1_19 - 4.0)) > eps_18)) {
            throw new Exception("test1 failed");
        };
        double m2_20 = Program.compute_geometric_mean(new double[]{5.0, 125.0});
        if ((Program.abs((m2_20 - 25.0)) > eps_18)) {
            throw new Exception("test2 failed");
        };
        double m3_21 = Program.compute_geometric_mean(new double[]{1.0, 0.0});
        if ((Program.abs((m3_21 - 0.0)) > eps_18)) {
            throw new Exception("test3 failed");
        };
        double m4_22 = Program.compute_geometric_mean(new double[]{1.0, 5.0, 25.0, 5.0});
        if ((Program.abs((m4_22 - 5.0)) > eps_18)) {
            throw new Exception("test4 failed");
        };
        double m5_23 = Program.compute_geometric_mean(new double[]{-5.0, 25.0, 1.0});
        if ((Program.abs((m5_23 + 5.0)) > eps_18)) {
            throw new Exception("test5 failed");
        };
    }

    public static void main() {
        Program.test_compute_geometric_mean();
        Console.WriteLine(Program._fmtTop(Program.compute_geometric_mean(new double[]{-3.0, -27.0})));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
