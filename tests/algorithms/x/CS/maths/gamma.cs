// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    public static double absf(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double sqrt(double x_2) {
        if ((x_2 < 0.0)) {
            throw new Exception("sqrt domain error");
        };
        double guess_3 = (x_2 / 2.0);
        long i_4 = 0;
        while ((i_4 < 20)) {
            guess_3 = ((guess_3 + (x_2 / guess_3)) / 2.0);
            i_4 = (i_4 + 1);
        };
        return guess_3;
    }

    public static double ln(double x_5) {
        if ((x_5 <= 0.0)) {
            throw new Exception("ln domain error");
        };
        double y_6 = ((x_5 - 1.0) / (x_5 + 1.0));
        double y2_7 = (y_6 * y_6);
        double term_8 = y_6;
        double sum_9 = 0.0;
        long k_10 = 0;
        while ((k_10 < 10)) {
            double denom_11 = Convert.ToDouble(((2 * k_10) + 1));
            sum_9 = (sum_9 + (term_8 / denom_11));
            term_8 = (term_8 * y2_7);
            k_10 = (k_10 + 1);
        };
        return (2.0 * sum_9);
    }

    public static double exp_series(double x_12) {
        double term_13 = 1.0;
        double sum_14 = 1.0;
        long n_15 = 1;
        while ((n_15 < 20)) {
            term_13 = ((term_13 * x_12) / Convert.ToDouble(n_15));
            sum_14 = (sum_14 + term_13);
            n_15 = (n_15 + 1);
        };
        return sum_14;
    }

    public static double powf(double base_16, double exponent_17) {
        if ((base_16 <= 0.0)) {
            return 0.0;
        };
        return Program.exp_series((exponent_17 * Program.ln(base_16)));
    }

    public static double integrand(double x_18, double z_19) {
        return (Program.powf(x_18, (z_19 - 1.0)) * Program.exp_series(-x_18));
    }

    public static double gamma_iterative(double num_20) {
        if ((num_20 <= 0.0)) {
            throw new Exception("math domain error");
        };
        double step_21 = 0.001;
        double limit_22 = 100.0;
        double x_23 = step_21;
        double total_24 = 0.0;
        while ((x_23 < limit_22)) {
            total_24 = (total_24 + (Program.integrand(x_23, num_20) * step_21));
            x_23 = (x_23 + step_21);
        };
        return total_24;
    }

    public static double gamma_recursive(double num_25) {
        if ((num_25 <= 0.0)) {
            throw new Exception("math domain error");
        };
        if ((num_25 > 171.5)) {
            throw new Exception("math range error");
        };
        long int_part_26 = Convert.ToInt64(num_25);
        double frac_27 = (num_25 - Convert.ToDouble(int_part_26));
        if ((!((Program.absf(frac_27) < 1e-06) || (Program.absf((frac_27 - 0.5)) < 1e-06)))) {
            throw new Exception("num must be an integer or a half-integer");
        };
        if ((Program.absf((num_25 - 0.5)) < 1e-06)) {
            return Program.sqrt(PI_0);
        };
        if ((Program.absf((num_25 - 1.0)) < 1e-06)) {
            return 1.0;
        };
        return ((num_25 - 1.0) * Program.gamma_recursive((num_25 - 1.0)));
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.gamma_iterative(5.0)));
        Console.WriteLine(Program._fmtTop(Program.gamma_recursive(5.0)));
        Console.WriteLine(Program._fmtTop(Program.gamma_recursive(0.5)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
