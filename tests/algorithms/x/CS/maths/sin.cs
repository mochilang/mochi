// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.1415926535897931;
    public static double abs(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double floor(double x_2) {
        long i_3 = (long)(x_2);
        if ((Convert.ToDouble(i_3) > x_2)) {
            i_3 = (i_3 - 1);
        };
        return Convert.ToDouble(i_3);
    }

    public static double pow(double x_4, long n_5) {
        double result_6 = 1.0;
        long i_7 = 0;
        while ((i_7 < n_5)) {
            result_6 = (result_6 * x_4);
            i_7 = (i_7 + 1);
        };
        return result_6;
    }

    public static double factorial(long n_8) {
        double result_9 = 1.0;
        long i_10 = 2;
        while ((i_10 <= n_8)) {
            result_9 = (result_9 * Convert.ToDouble(i_10));
            i_10 = (i_10 + 1);
        };
        return result_9;
    }

    public static double radians(double deg_11) {
        return ((deg_11 * PI_0) / 180.0);
    }

    public static double taylor_sin(double angle_in_degrees_12, long accuracy_13, long rounded_values_count_14) {
        double k_15 = Program.floor((angle_in_degrees_12 / 360.0));
        double angle_16 = (angle_in_degrees_12 - (k_15 * 360.0));
        double angle_in_radians_17 = Program.radians(angle_16);
        double result_18 = angle_in_radians_17;
        long a_19 = 3;
        double sign_20 = -1.0;
        long i_21 = 0;
        while ((i_21 < accuracy_13)) {
            result_18 = (result_18 + ((sign_20 * Program.pow(angle_in_radians_17, a_19)) / Program.factorial(a_19)));
            sign_20 = -sign_20;
            a_19 = (a_19 + 2);
            i_21 = (i_21 + 1);
        };
        return result_18;
    }

    public static void test_sin() {
        double eps_22 = 9.9999999999999995e-08;
        if ((Program.abs((Program.taylor_sin(0.0, 18, 10) - 0.0)) > eps_22)) {
            throw new Exception("sin(0) failed");
        };
        if ((Program.abs((Program.taylor_sin(90.0, 18, 10) - 1.0)) > eps_22)) {
            throw new Exception("sin(90) failed");
        };
        if ((Program.abs((Program.taylor_sin(180.0, 18, 10) - 0.0)) > eps_22)) {
            throw new Exception("sin(180) failed");
        };
        if ((Program.abs((Program.taylor_sin(270.0, 18, 10) - -1.0)) > eps_22)) {
            throw new Exception("sin(270) failed");
        };
    }

    public static void main() {
        Program.test_sin();
        double res_23 = Program.taylor_sin(64.0, 18, 10);
        Console.WriteLine(Program._fmtTop(res_23));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
