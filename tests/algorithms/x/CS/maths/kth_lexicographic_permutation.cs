// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] remove_at(long[] xs_0, long idx_1) {
        long[] res_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < xs_0.Length)) {
            if ((i_3 != idx_1)) {
                res_2 = ((Func<long[]>)(() => { var _tmp = res_2.ToList(); _tmp.Add(_idx(xs_0, i_3)); return _tmp.ToArray(); }))();
            }
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long[] kth_permutation(long k_4, long n_5) {
        if ((n_5 <= 0)) {
            throw new Exception("n must be positive");
        };
        long[] factorials_6 = new long[]{1};
        long i_7 = 2;
        while ((i_7 < n_5)) {
            factorials_6 = ((Func<long[]>)(() => { var _tmp = factorials_6.ToList(); _tmp.Add((_idx(factorials_6, (factorials_6.Length - 1)) * i_7)); return _tmp.ToArray(); }))();
            i_7 = (i_7 + 1);
        };
        long total_8 = (_idx(factorials_6, (factorials_6.Length - 1)) * n_5);
        if (((k_4 < 0) || (k_4 >= total_8))) {
            throw new Exception("k out of bounds");
        };
        long[] elements_9 = new long[]{};
        long e_10 = 0;
        while ((e_10 < n_5)) {
            elements_9 = ((Func<long[]>)(() => { var _tmp = elements_9.ToList(); _tmp.Add(e_10); return _tmp.ToArray(); }))();
            e_10 = (e_10 + 1);
        };
        long[] permutation_11 = new long[]{};
        long idx_12 = (factorials_6.Length - 1);
        while ((idx_12 >= 0)) {
            long factorial_13 = _idx(factorials_6, idx_12);
            long number_14 = _floordiv(k_4, factorial_13);
            k_4 = _mod(k_4, factorial_13);
            permutation_11 = ((Func<long[]>)(() => { var _tmp = permutation_11.ToList(); _tmp.Add(_idx(elements_9, number_14)); return _tmp.ToArray(); }))();
            elements_9 = Program.remove_at(elements_9, number_14);
            idx_12 = (idx_12 - 1);
        };
        permutation_11 = ((Func<long[]>)(() => { var _tmp = permutation_11.ToList(); _tmp.Add(_idx(elements_9, 0)); return _tmp.ToArray(); }))();
        return permutation_11;
    }

    public static bool list_equal(long[] a_15, long[] b_16) {
        if ((a_15.Length != b_16.Length)) {
            return false;
        };
        long i_17 = 0;
        while ((i_17 < a_15.Length)) {
            if ((_idx(a_15, i_17) != _idx(b_16, i_17))) {
                return false;
            }
            i_17 = (i_17 + 1);
        };
        return true;
    }

    public static string list_to_string(long[] xs_18) {
        if ((xs_18.Length == 0)) {
            return "[]";
        };
        string s_19 = ("[" + _fmtStr(_idx(xs_18, 0)));
        long i_20 = 1;
        while ((i_20 < xs_18.Length)) {
            s_19 = ((s_19 + ", ") + _fmtStr(_idx(xs_18, i_20)));
            i_20 = (i_20 + 1);
        };
        s_19 = (s_19 + "]");
        return s_19;
    }

    public static void test_kth_permutation() {
        long[] expected1_21 = new long[]{0, 1, 2, 3, 4};
        long[] res1_22 = Program.kth_permutation(0, 5);
        if ((!Program.list_equal(res1_22, expected1_21))) {
            throw new Exception("test case 1 failed");
        };
        long[] expected2_23 = new long[]{1, 3, 0, 2};
        long[] res2_24 = Program.kth_permutation(10, 4);
        if ((!Program.list_equal(res2_24, expected2_23))) {
            throw new Exception("test case 2 failed");
        };
    }

    public static void main() {
        Program.test_kth_permutation();
        long[] res_25 = Program.kth_permutation(10, 4);
        Console.WriteLine(Program._fmtTop(Program.list_to_string(res_25)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
