// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Coeffs {
    public long x;
    public long y;
    public override string ToString() => $"Coeffs {{x = {x}, y = {y}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long abs_val(long n_0) {
        if ((n_0 < 0)) {
            return -n_0;
        };
        return n_0;
    }

    public static Coeffs extended_euclidean_algorithm(long a_1, long b_2) {
        if ((Program.abs_val(a_1) == 1)) {
            return new Coeffs{x = a_1, y = 0};
        };
        if ((Program.abs_val(b_2) == 1)) {
            return new Coeffs{x = 0, y = b_2};
        };
        long old_remainder_3 = a_1;
        long remainder_4 = b_2;
        long old_coeff_a_5 = 1;
        long coeff_a_6 = 0;
        long old_coeff_b_7 = 0;
        long coeff_b_8 = 1;
        while ((remainder_4 != 0)) {
            long quotient_9 = _floordiv(old_remainder_3, remainder_4);
            long temp_remainder_10 = (old_remainder_3 - (quotient_9 * remainder_4));
            old_remainder_3 = remainder_4;
            remainder_4 = temp_remainder_10;
            long temp_a_11 = (old_coeff_a_5 - (quotient_9 * coeff_a_6));
            old_coeff_a_5 = coeff_a_6;
            coeff_a_6 = temp_a_11;
            long temp_b_12 = (old_coeff_b_7 - (quotient_9 * coeff_b_8));
            old_coeff_b_7 = coeff_b_8;
            coeff_b_8 = temp_b_12;
        };
        if ((a_1 < 0)) {
            old_coeff_a_5 = -old_coeff_a_5;
        };
        if ((b_2 < 0)) {
            old_coeff_b_7 = -old_coeff_b_7;
        };
        return new Coeffs{x = old_coeff_a_5, y = old_coeff_b_7};
    }

    public static void test_extended_euclidean_algorithm() {
        Coeffs r1_13 = Program.extended_euclidean_algorithm(1, 24);
        if (((r1_13.x != 1) || (r1_13.y != 0))) {
            throw new Exception("test1 failed");
        };
        Coeffs r2_14 = Program.extended_euclidean_algorithm(8, 14);
        if (((r2_14.x != 2) || (r2_14.y != -1))) {
            throw new Exception("test2 failed");
        };
        Coeffs r3_15 = Program.extended_euclidean_algorithm(240, 46);
        if (((r3_15.x != -9) || (r3_15.y != 47))) {
            throw new Exception("test3 failed");
        };
        Coeffs r4_16 = Program.extended_euclidean_algorithm(1, -4);
        if (((r4_16.x != 1) || (r4_16.y != 0))) {
            throw new Exception("test4 failed");
        };
        Coeffs r5_17 = Program.extended_euclidean_algorithm(-2, -4);
        if (((r5_17.x != -1) || (r5_17.y != 0))) {
            throw new Exception("test5 failed");
        };
        Coeffs r6_18 = Program.extended_euclidean_algorithm(0, -4);
        if (((r6_18.x != 0) || (r6_18.y != -1))) {
            throw new Exception("test6 failed");
        };
        Coeffs r7_19 = Program.extended_euclidean_algorithm(2, 0);
        if (((r7_19.x != 1) || (r7_19.y != 0))) {
            throw new Exception("test7 failed");
        };
    }

    public static void main() {
        Program.test_extended_euclidean_algorithm();
        Coeffs res_20 = Program.extended_euclidean_algorithm(240, 46);
        Console.WriteLine(Program._fmtTop((((("(" + _fmtStr(res_20.x)) + ", ") + _fmtStr(res_20.y)) + ")")));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
