// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] assign_ranks(double[] data_0) {
        long[] ranks_1 = new long[]{};
        long n_2 = data_0.Length;
        long i_3 = 0;
        while ((i_3 < n_2)) {
            long rank_4 = 1;
            long j_5 = 0;
            while ((j_5 < n_2)) {
                if (((data_0[(int)(j_5)] < data_0[(int)(i_3)]) || ((data_0[(int)(j_5)] == data_0[(int)(i_3)]) && (j_5 < i_3)))) {
                    rank_4 = (rank_4 + 1);
                }
                j_5 = (j_5 + 1);
            }
            ranks_1 = (Enumerable.ToArray(Enumerable.Append<long>(ranks_1, rank_4)));
            i_3 = (i_3 + 1);
        };
        return ranks_1;
    }

    public static double calculate_spearman_rank_correlation(double[] var1_6, double[] var2_7) {
        if ((var1_6.Length != var2_7.Length)) {
            throw new Exception("Lists must have equal length");
        };
        long n_8 = var1_6.Length;
        long[] rank1_9 = Program.assign_ranks(var1_6);
        long[] rank2_10 = Program.assign_ranks(var2_7);
        long i_11 = 0;
        double d_sq_12 = 0.0;
        while ((i_11 < n_8)) {
            double diff_13 = Convert.ToDouble((rank1_9[(int)(i_11)] - rank2_10[(int)(i_11)]));
            d_sq_12 = (d_sq_12 + (diff_13 * diff_13));
            i_11 = (i_11 + 1);
        };
        double n_f_14 = Convert.ToDouble(n_8);
        return (1.0 - ((6.0 * d_sq_12) / (n_f_14 * ((n_f_14 * n_f_14) - 1.0))));
    }

    public static void test_spearman() {
        double[] x_15 = new double[]{1.0, 2.0, 3.0, 4.0, 5.0};
        double[] y_inc_16 = new double[]{2.0, 4.0, 6.0, 8.0, 10.0};
        if ((Program.calculate_spearman_rank_correlation(x_15, y_inc_16) != 1.0)) {
            throw new Exception("case1");
        };
        double[] y_dec_17 = new double[]{5.0, 4.0, 3.0, 2.0, 1.0};
        if ((Program.calculate_spearman_rank_correlation(x_15, y_dec_17) != -1.0)) {
            throw new Exception("case2");
        };
        double[] y_mix_18 = new double[]{5.0, 1.0, 2.0, 9.0, 5.0};
        if ((Program.calculate_spearman_rank_correlation(x_15, y_mix_18) != 0.6)) {
            throw new Exception("case3");
        };
    }

    public static void main() {
        Program.test_spearman();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.calculate_spearman_rank_correlation(new double[]{1.0, 2.0, 3.0, 4.0, 5.0}, new double[]{2.0, 4.0, 6.0, 8.0, 10.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.calculate_spearman_rank_correlation(new double[]{1.0, 2.0, 3.0, 4.0, 5.0}, new double[]{5.0, 4.0, 3.0, 2.0, 1.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.calculate_spearman_rank_correlation(new double[]{1.0, 2.0, 3.0, 4.0, 5.0}, new double[]{5.0, 1.0, 2.0, 9.0, 5.0}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
