// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long abs_int(long x_0) {
        if ((x_0 < 0)) {
            return -x_0;
        };
        return x_0;
    }

    public static long gcd_iter(long a_1, long b_2) {
        long x_3 = Program.abs_int(a_1);
        long y_4 = Program.abs_int(b_2);
        while ((y_4 != 0)) {
            long t_5 = y_4;
            y_4 = _mod(x_3, y_4);
            x_3 = t_5;
        };
        return x_3;
    }

    public static bool is_prime(long n_6) {
        if ((n_6 <= 1)) {
            return false;
        };
        long d_7 = 2;
        while (((d_7 * d_7) <= n_6)) {
            if ((_mod(n_6, d_7) == 0)) {
                return false;
            }
            d_7 = (d_7 + 1);
        };
        return true;
    }

    public static long[] sieve_er(long n_8) {
        long[] nums_9 = new long[]{};
        long i_10 = 2;
        while ((i_10 <= n_8)) {
            nums_9 = (Enumerable.ToArray(Enumerable.Append<long>(nums_9, i_10)));
            i_10 = (i_10 + 1);
        };
        long idx_11 = 0;
        while ((idx_11 < nums_9.Length)) {
            long j_12 = (idx_11 + 1);
            while ((j_12 < nums_9.Length)) {
                if ((nums_9[(int)(idx_11)] != 0)) {
                    if ((_mod(nums_9[(int)(j_12)], nums_9[(int)(idx_11)]) == 0)) {
                        nums_9[j_12] = 0;
                    }
                }
                j_12 = (j_12 + 1);
            }
            idx_11 = (idx_11 + 1);
        };
        long[] res_13 = new long[]{};
        long k_14 = 0;
        while ((k_14 < nums_9.Length)) {
            long v_15 = nums_9[(int)(k_14)];
            if ((v_15 != 0)) {
                res_13 = (Enumerable.ToArray(Enumerable.Append<long>(res_13, v_15)));
            }
            k_14 = (k_14 + 1);
        };
        return res_13;
    }

    public static long[] get_prime_numbers(long n_16) {
        long[] ans_17 = new long[]{};
        long num_18 = 2;
        while ((num_18 <= n_16)) {
            if (Program.is_prime(num_18)) {
                ans_17 = (Enumerable.ToArray(Enumerable.Append<long>(ans_17, num_18)));
            }
            num_18 = (num_18 + 1);
        };
        return ans_17;
    }

    public static long[] prime_factorization(long number_19) {
        if ((number_19 == 0)) {
            return new long[]{0};
        };
        if ((number_19 == 1)) {
            return new long[]{1};
        };
        long[] ans_20 = new long[]{};
        if (Program.is_prime(number_19)) {
            ans_20 = (Enumerable.ToArray(Enumerable.Append<long>(ans_20, number_19)));
            return ans_20;
        };
        long quotient_21 = number_19;
        long factor_22 = 2;
        while ((quotient_21 != 1)) {
            if ((Program.is_prime(factor_22) && (_mod(quotient_21, factor_22) == 0))) {
                ans_20 = (Enumerable.ToArray(Enumerable.Append<long>(ans_20, factor_22)));
                quotient_21 = (quotient_21 / factor_22);
            } else {
                factor_22 = (factor_22 + 1);
            }
        };
        return ans_20;
    }

    public static long greatest_prime_factor(long number_23) {
        long[] factors_24 = Program.prime_factorization(number_23);
        long m_25 = factors_24[(int)(0)];
        long i_26 = 1;
        while ((i_26 < factors_24.Length)) {
            if ((factors_24[(int)(i_26)] > m_25)) {
                m_25 = factors_24[(int)(i_26)];
            }
            i_26 = (i_26 + 1);
        };
        return m_25;
    }

    public static long smallest_prime_factor(long number_27) {
        long[] factors_28 = Program.prime_factorization(number_27);
        long m_29 = factors_28[(int)(0)];
        long i_30 = 1;
        while ((i_30 < factors_28.Length)) {
            if ((factors_28[(int)(i_30)] < m_29)) {
                m_29 = factors_28[(int)(i_30)];
            }
            i_30 = (i_30 + 1);
        };
        return m_29;
    }

    public static long kg_v(long number1_31, long number2_32) {
        if (((number1_31 < 1) || (number2_32 < 1))) {
            throw new Exception("numbers must be positive");
        };
        long g_33 = Program.gcd_iter(number1_31, number2_32);
        return ((number1_31 / g_33) * number2_32);
    }

    public static bool is_even(long number_34) {
        return (_mod(number_34, 2) == 0);
    }

    public static bool is_odd(long number_35) {
        return (_mod(number_35, 2) != 0);
    }

    public static long[] goldbach(long number_36) {
        if (((!Program.is_even(number_36)) || (number_36 <= 2))) {
            throw new Exception("number must be even and > 2");
        };
        long[] primes_37 = Program.get_prime_numbers(number_36);
        long i_38 = 0;
        while ((i_38 < primes_37.Length)) {
            long j_39 = (i_38 + 1);
            while ((j_39 < primes_37.Length)) {
                if (((primes_37[(int)(i_38)] + primes_37[(int)(j_39)]) == number_36)) {
                    return new long[]{primes_37[(int)(i_38)], primes_37[(int)(j_39)]};
                }
                j_39 = (j_39 + 1);
            }
            i_38 = (i_38 + 1);
        };
        return new long[]{};
    }

    public static long get_prime(long n_40) {
        if ((n_40 < 0)) {
            throw new Exception("n must be non-negative");
        };
        long index_41 = 0;
        long ans_42 = 2;
        while ((index_41 < n_40)) {
            index_41 = (index_41 + 1);
            ans_42 = (ans_42 + 1);
            while ((!Program.is_prime(ans_42))) {
                ans_42 = (ans_42 + 1);
            }
        };
        return ans_42;
    }

    public static long[] get_primes_between(long p1_43, long p2_44) {
        bool bad1_45 = (!Program.is_prime(p1_43));
        bool bad2_46 = (!Program.is_prime(p2_44));
        if (((bad1_45 || bad2_46) || (p1_43 >= p2_44))) {
            throw new Exception("arguments must be prime and p1 < p2");
        };
        long num_47 = (p1_43 + 1);
        while ((num_47 < p2_44)) {
            if (Program.is_prime(num_47)) {
                break;
            }
            num_47 = (num_47 + 1);
        };
        long[] ans_48 = new long[]{};
        while ((num_47 < p2_44)) {
            ans_48 = (Enumerable.ToArray(Enumerable.Append<long>(ans_48, num_47)));
            num_47 = (num_47 + 1);
            while ((num_47 < p2_44)) {
                if (Program.is_prime(num_47)) {
                    break;
                }
                num_47 = (num_47 + 1);
            }
        };
        return ans_48;
    }

    public static long[] get_divisors(long n_49) {
        if ((n_49 < 1)) {
            throw new Exception("n must be >= 1");
        };
        long[] ans_50 = new long[]{};
        long d_51 = 1;
        while ((d_51 <= n_49)) {
            if ((_mod(n_49, d_51) == 0)) {
                ans_50 = (Enumerable.ToArray(Enumerable.Append<long>(ans_50, d_51)));
            }
            d_51 = (d_51 + 1);
        };
        return ans_50;
    }

    public static bool is_perfect_number(long number_52) {
        if ((number_52 <= 1)) {
            throw new Exception("number must be > 1");
        };
        long[] divisors_53 = Program.get_divisors(number_52);
        long sum_54 = 0;
        long i_55 = 0;
        while ((i_55 < (divisors_53.Length - 1))) {
            sum_54 = (sum_54 + divisors_53[(int)(i_55)]);
            i_55 = (i_55 + 1);
        };
        return (sum_54 == number_52);
    }

    public static long[] simplify_fraction(long numerator_56, long denominator_57) {
        if ((denominator_57 == 0)) {
            throw new Exception("denominator cannot be zero");
        };
        long g_58 = Program.gcd_iter(Program.abs_int(numerator_56), Program.abs_int(denominator_57));
        return new long[]{(numerator_56 / g_58), (denominator_57 / g_58)};
    }

    public static long factorial(long n_59) {
        if ((n_59 < 0)) {
            throw new Exception("n must be >= 0");
        };
        long ans_60 = 1;
        long i_61 = 1;
        while ((i_61 <= n_59)) {
            ans_60 = (ans_60 * i_61);
            i_61 = (i_61 + 1);
        };
        return ans_60;
    }

    public static long fib(long n_62) {
        if ((n_62 < 0)) {
            throw new Exception("n must be >= 0");
        };
        if ((n_62 <= 1)) {
            return 1;
        };
        long tmp_63 = 0;
        long fib1_64 = 1;
        long ans_65 = 1;
        long i_66 = 0;
        while ((i_66 < (n_62 - 1))) {
            tmp_63 = ans_65;
            ans_65 = (ans_65 + fib1_64);
            fib1_64 = tmp_63;
            i_66 = (i_66 + 1);
        };
        return ans_65;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_prime(97))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.sieve_er(20))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_prime_numbers(20))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_factorization(287))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.greatest_prime_factor(287))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.smallest_prime_factor(287))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.kg_v(8, 10))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.goldbach(28))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_prime(8))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_primes_between(3, 20))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_divisors(28))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_perfect_number(28))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.simplify_fraction(10, 20))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.factorial(5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fib(10))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
