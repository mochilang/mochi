// Generated by Mochi 0.10.66 (commit f6dfa6fffe) on 2025-08-16 14:41 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double binary_exp_recursive(double base_0, long exponent_1) {
        if ((exponent_1 < 0)) {
            throw new Exception("exponent must be non-negative");
        };
        if ((exponent_1 == 0)) {
            return 1.0;
        };
        if ((_mod(exponent_1, 2) == 1)) {
            return (Program.binary_exp_recursive(base_0, (exponent_1 - 1)) * base_0);
        };
        double half_2 = Program.binary_exp_recursive(base_0, _floordiv(exponent_1, 2));
        return (half_2 * half_2);
    }

    public static double binary_exp_iterative(double base_3, long exponent_4) {
        if ((exponent_4 < 0)) {
            throw new Exception("exponent must be non-negative");
        };
        double result_5 = 1.0;
        double b_6 = base_3;
        long e_7 = exponent_4;
        while ((e_7 > 0)) {
            if ((_mod(e_7, 2) == 1)) {
                result_5 = (result_5 * b_6);
            }
            b_6 = (b_6 * b_6);
            e_7 = _floordiv(e_7, 2);
        };
        return result_5;
    }

    public static long binary_exp_mod_recursive(long base_8, long exponent_9, long modulus_10) {
        if ((exponent_9 < 0)) {
            throw new Exception("exponent must be non-negative");
        };
        if ((modulus_10 <= 0)) {
            throw new Exception("modulus must be positive");
        };
        if ((exponent_9 == 0)) {
            return _mod(1, modulus_10);
        };
        if ((_mod(exponent_9, 2) == 1)) {
            return _mod((Program.binary_exp_mod_recursive(base_8, (exponent_9 - 1), modulus_10) * _mod(base_8, modulus_10)), modulus_10);
        };
        long r_11 = Program.binary_exp_mod_recursive(base_8, _floordiv(exponent_9, 2), modulus_10);
        return _mod((r_11 * r_11), modulus_10);
    }

    public static long binary_exp_mod_iterative(long base_12, long exponent_13, long modulus_14) {
        if ((exponent_13 < 0)) {
            throw new Exception("exponent must be non-negative");
        };
        if ((modulus_14 <= 0)) {
            throw new Exception("modulus must be positive");
        };
        long result_15 = _mod(1, modulus_14);
        long b_16 = _mod(base_12, modulus_14);
        long e_17 = exponent_13;
        while ((e_17 > 0)) {
            if ((_mod(e_17, 2) == 1)) {
                result_15 = _mod((result_15 * b_16), modulus_14);
            }
            b_16 = _mod((b_16 * b_16), modulus_14);
            e_17 = _floordiv(e_17, 2);
        };
        return result_15;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.binary_exp_recursive(3.0, 5)));
            Console.WriteLine(Program._fmtTop(Program.binary_exp_iterative(1.5, 4)));
            Console.WriteLine(Program._fmtTop(Program.binary_exp_mod_recursive(3, 4, 5)));
            Console.WriteLine(Program._fmtTop(Program.binary_exp_mod_iterative(11, 13, 7)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
