// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Complex add(Complex a_0, Complex b_1) {
        return new Complex{re = (a_0.re + b_1.re), im = (a_0.im + b_1.im)};
    }

    public static Complex sub(Complex a_2, Complex b_3) {
        return new Complex{re = (a_2.re - b_3.re), im = (a_2.im - b_3.im)};
    }

    public static Complex div_real(Complex a_4, double r_5) {
        return new Complex{re = (a_4.re / r_5), im = (a_4.im / r_5)};
    }

    public static double sqrt_newton(double x_6) {
        if ((x_6 <= 0.0)) {
            return 0.0;
        };
        double guess_7 = (x_6 / 2.0);
        long i_8 = 0;
        while ((i_8 < 20)) {
            guess_7 = ((guess_7 + (x_6 / guess_7)) / 2.0);
            i_8 = (i_8 + 1);
        };
        return guess_7;
    }

    public static Complex sqrt_to_complex(double d_9) {
        if ((d_9 >= 0.0)) {
            return new Complex{re = Program.sqrt_newton(d_9), im = 0.0};
        };
        return new Complex{re = 0.0, im = Program.sqrt_newton(-d_9)};
    }

    public static Complex[] quadratic_roots(double a_10, double b_11, double c_12) {
        if ((a_10 == 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: coefficient 'a' must not be zero"));
            return new Complex[]{};
        };
        double delta_13 = ((b_11 * b_11) - ((4.0 * a_10) * c_12));
        Complex sqrt_d_14 = Program.sqrt_to_complex(delta_13);
        Complex minus_b_15 = new Complex{re = -b_11, im = 0.0};
        double two_a_16 = (2.0 * a_10);
        Complex root1_17 = Program.div_real(Program.add(minus_b_15, sqrt_d_14), two_a_16);
        Complex root2_18 = Program.div_real(Program.sub(minus_b_15, sqrt_d_14), two_a_16);
        return new Complex[]{root1_17, root2_18};
    }

    public static string root_str(Complex r_19) {
        if ((r_19.im == 0.0)) {
            return _fmtStr(r_19.re);
        };
        string s_20 = _fmtStr(r_19.re);
        if ((r_19.im >= 0.0)) {
            s_20 = (((s_20 + "+") + _fmtStr(r_19.im)) + "i");
        } else {
            s_20 = ((s_20 + _fmtStr(r_19.im)) + "i");
        };
        return s_20;
    }

    public static void main() {
        Complex[] roots_21 = Program.quadratic_roots(5.0, 6.0, 1.0);
        if ((roots_21.Length == 2)) {
            Console.WriteLine(Program._fmtTop(((("The solutions are: " + Program.root_str(_idx(roots_21, 0))) + " and ") + Program.root_str(_idx(roots_21, 1)))));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
