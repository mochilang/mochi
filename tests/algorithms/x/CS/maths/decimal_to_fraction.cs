// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Fraction {
    public long numerator;
    public long denominator;
    public override string ToString() => $"Fraction {{numerator = {numerator}, denominator = {denominator}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long pow10(long n_0) {
        long result_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            result_1 = (result_1 * 10);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long gcd(long a_3, long b_4) {
        long x_5 = a_3;
        long y_6 = b_4;
        if ((x_5 < 0)) {
            x_5 = -x_5;
        };
        if ((y_6 < 0)) {
            y_6 = -y_6;
        };
        while ((y_6 != 0)) {
            long r_7 = _mod(x_5, y_6);
            x_5 = y_6;
            y_6 = r_7;
        };
        return x_5;
    }

    public static Fraction parse_decimal(string s_8) {
        if ((s_8.Length == 0)) {
            throw new Exception("invalid number");
        };
        long idx_9 = 0;
        long sign_10 = 1;
        string first_11 = _substr(s_8, 0, 1);
        if ((first_11 == "-")) {
            sign_10 = -1;
            idx_9 = 1;
        } else if ((first_11 == "+")) {
            idx_9 = 1;
        };
        string int_part_12 = "";
        while ((idx_9 < s_8.Length)) {
            string c_13 = _substr(s_8, idx_9, (idx_9 + 1));
            if (((string.Compare(c_13, "0") >= 0) && (string.Compare(c_13, "9") <= 0))) {
                int_part_12 = (int_part_12 + c_13);
                idx_9 = (idx_9 + 1);
            } else {
                break;
            }
        };
        string frac_part_14 = "";
        if (((idx_9 < s_8.Length) && (_substr(s_8, idx_9, (idx_9 + 1)) == "."))) {
            idx_9 = (idx_9 + 1);
            while ((idx_9 < s_8.Length)) {
                string c_15 = _substr(s_8, idx_9, (idx_9 + 1));
                if (((string.Compare(c_15, "0") >= 0) && (string.Compare(c_15, "9") <= 0))) {
                    frac_part_14 = (frac_part_14 + c_15);
                    idx_9 = (idx_9 + 1);
                } else {
                    break;
                }
            }
        };
        long exp_16 = 0;
        if (((idx_9 < s_8.Length) && ((_substr(s_8, idx_9, (idx_9 + 1)) == "e") || (_substr(s_8, idx_9, (idx_9 + 1)) == "E")))) {
            idx_9 = (idx_9 + 1);
            long exp_sign_17 = 1;
            if (((idx_9 < s_8.Length) && (_substr(s_8, idx_9, (idx_9 + 1)) == "-"))) {
                exp_sign_17 = -1;
                idx_9 = (idx_9 + 1);
            } else if (((idx_9 < s_8.Length) && (_substr(s_8, idx_9, (idx_9 + 1)) == "+"))) {
                idx_9 = (idx_9 + 1);
            }
            string exp_str_18 = "";
            while ((idx_9 < s_8.Length)) {
                string c_19 = _substr(s_8, idx_9, (idx_9 + 1));
                if (((string.Compare(c_19, "0") >= 0) && (string.Compare(c_19, "9") <= 0))) {
                    exp_str_18 = (exp_str_18 + c_19);
                    idx_9 = (idx_9 + 1);
                } else {
                    throw new Exception("invalid number");
                }
            }
            if ((exp_str_18.Length == 0)) {
                throw new Exception("invalid number");
            }
            exp_16 = (exp_sign_17 * Convert.ToInt64(exp_str_18));
        };
        if ((idx_9 != s_8.Length)) {
            throw new Exception("invalid number");
        };
        if ((int_part_12.Length == 0)) {
            int_part_12 = "0";
        };
        string num_str_20 = (int_part_12 + frac_part_14);
        long numerator_21 = Convert.ToInt64(num_str_20);
        if ((sign_10 == (0 - 1))) {
            numerator_21 = (0 - numerator_21);
        };
        long denominator_22 = Program.pow10(frac_part_14.Length);
        if ((exp_16 > 0)) {
            numerator_21 = (numerator_21 * Program.pow10(exp_16));
        } else if ((exp_16 < 0)) {
            denominator_22 = (denominator_22 * Program.pow10(-exp_16));
        };
        return new Fraction{numerator = numerator_21, denominator = denominator_22};
    }

    public static Fraction reduce(Fraction fr_23) {
        long g_24 = Program.gcd(fr_23.numerator, fr_23.denominator);
        return new Fraction{numerator = (fr_23.numerator / g_24), denominator = (fr_23.denominator / g_24)};
    }

    public static Fraction decimal_to_fraction_str(string s_25) {
        return Program.reduce(Program.parse_decimal(s_25));
    }

    public static Fraction decimal_to_fraction(double x_26) {
        return Program.decimal_to_fraction_str(_fmtStr(x_26));
    }

    public static void assert_fraction(string name_27, Fraction fr_28, long num_29, long den_30) {
        if (((fr_28.numerator != num_29) || (fr_28.denominator != den_30))) {
            throw new Exception(name_27);
        };
    }

    public static void test_decimal_to_fraction() {
        Program.assert_fraction("case1", Program.decimal_to_fraction(2.0), 2, 1);
        Program.assert_fraction("case2", Program.decimal_to_fraction(89.0), 89, 1);
        Program.assert_fraction("case3", Program.decimal_to_fraction_str("67"), 67, 1);
        Program.assert_fraction("case4", Program.decimal_to_fraction_str("45.0"), 45, 1);
        Program.assert_fraction("case5", Program.decimal_to_fraction(1.5), 3, 2);
        Program.assert_fraction("case6", Program.decimal_to_fraction_str("6.25"), 25, 4);
        Program.assert_fraction("case7", Program.decimal_to_fraction(0.0), 0, 1);
        Program.assert_fraction("case8", Program.decimal_to_fraction(-2.5), -5, 2);
        Program.assert_fraction("case9", Program.decimal_to_fraction(0.125), 1, 8);
        Program.assert_fraction("case10", Program.decimal_to_fraction(1.00000025e+06), 4000001, 4);
        Program.assert_fraction("case11", Program.decimal_to_fraction(1.3333), 13333, 10000);
        Program.assert_fraction("case12", Program.decimal_to_fraction_str("1.23e2"), 123, 1);
        Program.assert_fraction("case13", Program.decimal_to_fraction_str("0.500"), 1, 2);
    }

    public static void main() {
        Program.test_decimal_to_fraction();
        Fraction fr_31 = Program.decimal_to_fraction(1.5);
        Console.WriteLine(Program._fmtTop(((_fmtStr(fr_31.numerator) + "/") + _fmtStr(fr_31.denominator))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
