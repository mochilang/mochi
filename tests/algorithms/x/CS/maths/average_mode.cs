// Generated by Mochi 0.10.66 (commit f6dfa6fffe) on 2025-08-16 14:41 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool contains_int(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((_idx(xs_0, i_2) == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static bool contains_string(string[] xs_3, string x_4) {
        long i_5 = 0;
        while ((i_5 < xs_3.Length)) {
            if ((_idx(xs_3, i_5) == x_4)) {
                return true;
            }
            i_5 = (i_5 + 1);
        };
        return false;
    }

    public static long count_int(long[] xs_6, long x_7) {
        long cnt_8 = 0;
        long i_9 = 0;
        while ((i_9 < xs_6.Length)) {
            if ((_idx(xs_6, i_9) == x_7)) {
                cnt_8 = (cnt_8 + 1);
            }
            i_9 = (i_9 + 1);
        };
        return cnt_8;
    }

    public static long count_string(string[] xs_10, string x_11) {
        long cnt_12 = 0;
        long i_13 = 0;
        while ((i_13 < xs_10.Length)) {
            if ((_idx(xs_10, i_13) == x_11)) {
                cnt_12 = (cnt_12 + 1);
            }
            i_13 = (i_13 + 1);
        };
        return cnt_12;
    }

    public static long[] sort_int(long[] xs_14) {
        long[] arr_15 = xs_14;
        long i_16 = 0;
        while ((i_16 < arr_15.Length)) {
            long j_17 = (i_16 + 1);
            while ((j_17 < arr_15.Length)) {
                if ((_idx(arr_15, j_17) < _idx(arr_15, i_16))) {
                    long tmp_18 = _idx(arr_15, i_16);
                    arr_15[(int)(i_16)] = _idx(arr_15, j_17);
                    arr_15[(int)(j_17)] = tmp_18;
                }
                j_17 = (j_17 + 1);
            }
            i_16 = (i_16 + 1);
        };
        return arr_15;
    }

    public static string[] sort_string(string[] xs_19) {
        string[] arr_20 = xs_19;
        long i_21 = 0;
        while ((i_21 < arr_20.Length)) {
            long j_22 = (i_21 + 1);
            while ((j_22 < arr_20.Length)) {
                if ((string.Compare(_idx(arr_20, j_22), _idx(arr_20, i_21)) < 0)) {
                    string tmp_23 = _idx(arr_20, i_21);
                    arr_20[(int)(i_21)] = _idx(arr_20, j_22);
                    arr_20[(int)(j_22)] = tmp_23;
                }
                j_22 = (j_22 + 1);
            }
            i_21 = (i_21 + 1);
        };
        return arr_20;
    }

    public static long[] mode_int(long[] lst_24) {
        if ((lst_24.Length == 0)) {
            return new long[]{};
        };
        long[] counts_25 = new long[]{};
        long i_26 = 0;
        while ((i_26 < lst_24.Length)) {
            counts_25 = ((Func<long[]>)(() => { var _tmp = counts_25.Cast<long>().ToList(); _tmp.Add(Program.count_int(lst_24, _idx(lst_24, i_26))); return _tmp.ToArray(); }))();
            i_26 = (i_26 + 1);
        };
        long max_count_27 = 0;
        i_26 = 0;
        while ((i_26 < counts_25.Length)) {
            if ((_idx(counts_25, i_26) > max_count_27)) {
                max_count_27 = _idx(counts_25, i_26);
            }
            i_26 = (i_26 + 1);
        };
        long[] modes_28 = new long[]{};
        i_26 = 0;
        while ((i_26 < lst_24.Length)) {
            if ((_idx(counts_25, i_26) == max_count_27)) {
                long v_29 = _idx(lst_24, i_26);
                if ((!Program.contains_int(modes_28, v_29))) {
                    modes_28 = ((Func<long[]>)(() => { var _tmp = modes_28.Cast<long>().ToList(); _tmp.Add(v_29); return _tmp.ToArray(); }))();
                }
            }
            i_26 = (i_26 + 1);
        };
        return Program.sort_int(modes_28);
    }

    public static string[] mode_string(string[] lst_30) {
        if ((lst_30.Length == 0)) {
            return new string[]{};
        };
        long[] counts_31 = new long[]{};
        long i_32 = 0;
        while ((i_32 < lst_30.Length)) {
            counts_31 = ((Func<long[]>)(() => { var _tmp = counts_31.Cast<long>().ToList(); _tmp.Add(Program.count_string(lst_30, _idx(lst_30, i_32))); return _tmp.ToArray(); }))();
            i_32 = (i_32 + 1);
        };
        long max_count_33 = 0;
        i_32 = 0;
        while ((i_32 < counts_31.Length)) {
            if ((_idx(counts_31, i_32) > max_count_33)) {
                max_count_33 = _idx(counts_31, i_32);
            }
            i_32 = (i_32 + 1);
        };
        string[] modes_34 = new string[]{};
        i_32 = 0;
        while ((i_32 < lst_30.Length)) {
            if ((_idx(counts_31, i_32) == max_count_33)) {
                string v_35 = _idx(lst_30, i_32);
                if ((!Program.contains_string(modes_34, v_35))) {
                    modes_34 = ((Func<string[]>)(() => { var _tmp = modes_34.Cast<string>().ToList(); _tmp.Add(v_35); return _tmp.ToArray(); }))();
                }
            }
            i_32 = (i_32 + 1);
        };
        return Program.sort_string(modes_34);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.mode_int(new long[]{2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2})));
            Console.WriteLine(Program._fmtTop(Program.mode_int(new long[]{3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2})));
            Console.WriteLine(Program._fmtTop(Program.mode_int(new long[]{3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2})));
            Console.WriteLine(Program._fmtTop(Program.mode_string(new string[]{"x", "y", "y", "z"})));
            Console.WriteLine(Program._fmtTop(Program.mode_string(new string[]{"x", "x", "y", "y", "z"})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
