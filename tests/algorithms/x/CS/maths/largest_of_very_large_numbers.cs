// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double ln(double x_0) {
        double t_1 = ((x_0 - 1.0) / (x_0 + 1.0));
        double term_2 = t_1;
        double sum_3 = 0.0;
        long k_4 = 1;
        while ((k_4 <= 99)) {
            sum_3 = (sum_3 + (term_2 / Convert.ToDouble(k_4)));
            term_2 = ((term_2 * t_1) * t_1);
            k_4 = (k_4 + 2);
        };
        return (2.0 * sum_3);
    }

    public static double log10(double x_5) {
        return (Program.ln(x_5) / Program.ln(10.0));
    }

    public static double absf(double x_6) {
        if ((x_6 < 0.0)) {
            return -x_6;
        };
        return x_6;
    }

    public static double res(long x_7, long y_8) {
        if ((x_7 == 0)) {
            return 0.0;
        };
        if ((y_8 == 0)) {
            return 1.0;
        };
        if ((x_7 < 0)) {
            throw new Exception("math domain error");
        };
        return (Convert.ToDouble(y_8) * Program.log10(Convert.ToDouble(x_7)));
    }

    public static void test_res() {
        if ((Program.absf((Program.res(5, 7) - 4.8927900303521321)) > 9.9999999999999995e-08)) {
            throw new Exception("res(5,7) failed");
        };
        if ((Program.res(0, 5) != 0.0)) {
            throw new Exception("res(0,5) failed");
        };
        if ((Program.res(3, 0) != 1.0)) {
            throw new Exception("res(3,0) failed");
        };
    }

    public static string compare(long x1_9, long y1_10, long x2_11, long y2_12) {
        double r1_13 = Program.res(x1_9, y1_10);
        double r2_14 = Program.res(x2_11, y2_12);
        if ((r1_13 > r2_14)) {
            return ((("Largest number is " + _fmtStr(x1_9)) + " ^ ") + _fmtStr(y1_10));
        };
        if ((r2_14 > r1_13)) {
            return ((("Largest number is " + _fmtStr(x2_11)) + " ^ ") + _fmtStr(y2_12));
        };
        return "Both are equal";
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.test_res();
            Console.WriteLine(Program._fmtTop(Program.compare(5, 7, 4, 8)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
