// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double sqrtApprox(double x_0) {
        double guess_1 = (x_0 / 2.0);
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double abs_val(double num_3) {
        if ((num_3 < 0.0)) {
            return -num_3;
        };
        return num_3;
    }

    public static bool approx_equal(double a_4, double b_5, double eps_6) {
        return (Program.abs_val((a_4 - b_5)) < eps_6);
    }

    public static double dodecahedron_surface_area(long edge_7) {
        if ((edge_7 <= 0)) {
            throw new Exception("Length must be a positive.");
        };
        double term_8 = Program.sqrtApprox((25.0 + (10.0 * Program.sqrtApprox(5.0))));
        double e_9 = Convert.ToDouble(edge_7);
        return (((3.0 * term_8) * e_9) * e_9);
    }

    public static double dodecahedron_volume(long edge_10) {
        if ((edge_10 <= 0)) {
            throw new Exception("Length must be a positive.");
        };
        double term_11 = ((15.0 + (7.0 * Program.sqrtApprox(5.0))) / 4.0);
        double e_12 = Convert.ToDouble(edge_10);
        return (((term_11 * e_12) * e_12) * e_12);
    }

    public static void test_dodecahedron() {
        if ((!Program.approx_equal(Program.dodecahedron_surface_area(5), 516.1432201766901, 0.0001))) {
            throw new Exception("surface area 5 failed");
        };
        if ((!Program.approx_equal(Program.dodecahedron_surface_area(10), 2064.5728807067603, 0.0001))) {
            throw new Exception("surface area 10 failed");
        };
        if ((!Program.approx_equal(Program.dodecahedron_volume(5), 957.8898700780791, 0.0001))) {
            throw new Exception("volume 5 failed");
        };
        if ((!Program.approx_equal(Program.dodecahedron_volume(10), 7663.118960624633, 0.0001))) {
            throw new Exception("volume 10 failed");
        };
    }

    public static void main() {
        Program.test_dodecahedron();
        Console.WriteLine(Program._fmtTop(Program.dodecahedron_surface_area(5)));
        Console.WriteLine(Program._fmtTop(Program.dodecahedron_volume(5)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
