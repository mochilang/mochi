// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long pow_int(long base_0, long exp_1) {
        long result_2 = 1;
        long i_3 = 0;
        while ((i_3 < exp_1)) {
            result_2 = (result_2 * base_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static long[] prime_factors(long n_4) {
        if ((n_4 <= 0)) {
            throw new Exception("Only positive integers have prime factors");
        };
        long num_5 = n_4;
        long[] pf_6 = new long[]{};
        while ((_mod(num_5, 2) == 0)) {
            pf_6 = (Enumerable.ToArray(Enumerable.Append<long>(pf_6, 2)));
            num_5 = (num_5 / 2);
        };
        long i_7 = 3;
        while (((i_7 * i_7) <= num_5)) {
            while ((_mod(num_5, i_7) == 0)) {
                pf_6 = (Enumerable.ToArray(Enumerable.Append<long>(pf_6, i_7)));
                num_5 = (num_5 / i_7);
            }
            i_7 = (i_7 + 2);
        };
        if ((num_5 > 2)) {
            pf_6 = (Enumerable.ToArray(Enumerable.Append<long>(pf_6, num_5)));
        };
        return pf_6;
    }

    public static long number_of_divisors(long n_8) {
        if ((n_8 <= 0)) {
            throw new Exception("Only positive numbers are accepted");
        };
        long num_9 = n_8;
        long div_10 = 1;
        long temp_11 = 1;
        while ((_mod(num_9, 2) == 0)) {
            temp_11 = (temp_11 + 1);
            num_9 = (num_9 / 2);
        };
        div_10 = (div_10 * temp_11);
        long i_12 = 3;
        while (((i_12 * i_12) <= num_9)) {
            temp_11 = 1;
            while ((_mod(num_9, i_12) == 0)) {
                temp_11 = (temp_11 + 1);
                num_9 = (num_9 / i_12);
            }
            div_10 = (div_10 * temp_11);
            i_12 = (i_12 + 2);
        };
        if ((num_9 > 1)) {
            div_10 = (div_10 * 2);
        };
        return div_10;
    }

    public static long sum_of_divisors(long n_13) {
        if ((n_13 <= 0)) {
            throw new Exception("Only positive numbers are accepted");
        };
        long num_14 = n_13;
        long s_15 = 1;
        long temp_16 = 1;
        while ((_mod(num_14, 2) == 0)) {
            temp_16 = (temp_16 + 1);
            num_14 = (num_14 / 2);
        };
        if ((temp_16 > 1)) {
            s_15 = (s_15 * ((Program.pow_int(2, temp_16) - 1) / (2 - 1)));
        };
        long i_17 = 3;
        while (((i_17 * i_17) <= num_14)) {
            temp_16 = 1;
            while ((_mod(num_14, i_17) == 0)) {
                temp_16 = (temp_16 + 1);
                num_14 = (num_14 / i_17);
            }
            if ((temp_16 > 1)) {
                s_15 = (s_15 * ((Program.pow_int(i_17, temp_16) - 1) / (i_17 - 1)));
            }
            i_17 = (i_17 + 2);
        };
        return s_15;
    }

    public static bool contains(long[] arr_18, long x_19) {
        long idx_20 = 0;
        while ((idx_20 < arr_18.Length)) {
            if ((arr_18[(int)(idx_20)] == x_19)) {
                return true;
            }
            idx_20 = (idx_20 + 1);
        };
        return false;
    }

    public static long[] unique(long[] arr_21) {
        long[] result_22 = new long[]{};
        long idx_23 = 0;
        while ((idx_23 < arr_21.Length)) {
            long v_24 = arr_21[(int)(idx_23)];
            if ((!Program.contains(result_22, v_24))) {
                result_22 = (Enumerable.ToArray(Enumerable.Append<long>(result_22, v_24)));
            }
            idx_23 = (idx_23 + 1);
        };
        return result_22;
    }

    public static long euler_phi(long n_25) {
        if ((n_25 <= 0)) {
            throw new Exception("Only positive numbers are accepted");
        };
        long s_26 = n_25;
        long[] factors_27 = Program.unique(Program.prime_factors(n_25));
        long idx_28 = 0;
        while ((idx_28 < factors_27.Length)) {
            long x_29 = factors_27[(int)(idx_28)];
            s_26 = ((s_26 / x_29) * (x_29 - 1));
            idx_28 = (idx_28 + 1);
        };
        return s_26;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_factors(100))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.number_of_divisors(100))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.sum_of_divisors(100))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.euler_phi(100))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
