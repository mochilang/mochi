// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long isqrt(long n_0) {
        long r_1 = 0;
        while ((((r_1 + 1) * (r_1 + 1)) <= n_0)) {
            r_1 = (r_1 + 1);
        };
        return r_1;
    }

    public static long[] prime_sieve(long num_2) {
        if ((num_2 <= 0)) {
            throw new Exception("Invalid input, please enter a positive integer.");
        };
        bool[] sieve_3 = new bool[]{};
        long i_4 = 0;
        while ((i_4 <= num_2)) {
            sieve_3 = ((Func<bool[]>)(() => { var _tmp = sieve_3.Cast<bool>().ToList(); _tmp.Add(true); return _tmp.ToArray(); }))();
            i_4 = (i_4 + 1);
        };
        long[] prime_5 = new long[]{};
        long start_6 = 2;
        long end_7 = Program.isqrt(num_2);
        while ((start_6 <= end_7)) {
            if (_idx(sieve_3, start_6)) {
                prime_5 = ((Func<long[]>)(() => { var _tmp = prime_5.Cast<long>().ToList(); _tmp.Add(start_6); return _tmp.ToArray(); }))();
                long j_8 = (start_6 * start_6);
                while ((j_8 <= num_2)) {
                    if (_idx(sieve_3, j_8)) {
                        sieve_3[(int)(j_8)] = false;
                    }
                    j_8 = (j_8 + start_6);
                }
            }
            start_6 = (start_6 + 1);
        };
        long k_9 = (end_7 + 1);
        while ((k_9 <= num_2)) {
            if (_idx(sieve_3, k_9)) {
                prime_5 = ((Func<long[]>)(() => { var _tmp = prime_5.Cast<long>().ToList(); _tmp.Add(k_9); return _tmp.ToArray(); }))();
            }
            k_9 = (k_9 + 1);
        };
        return prime_5;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve(50))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve(25))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve(10))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve(9))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve(2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve(1))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
