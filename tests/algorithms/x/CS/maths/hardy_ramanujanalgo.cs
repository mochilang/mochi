// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long exact_prime_factor_count(long n_0) {
        long count_1 = 0;
        long num_2 = n_0;
        if ((_mod(num_2, 2) == 0)) {
            count_1 = (count_1 + 1);
            while ((_mod(num_2, 2) == 0)) {
                num_2 = _floordiv(num_2, 2);
            }
        };
        long i_3 = 3;
        while (((i_3 * i_3) <= num_2)) {
            if ((_mod(num_2, i_3) == 0)) {
                count_1 = (count_1 + 1);
                while ((_mod(num_2, i_3) == 0)) {
                    num_2 = _floordiv(num_2, i_3);
                }
            }
            i_3 = (i_3 + 2);
        };
        if ((num_2 > 2)) {
            count_1 = (count_1 + 1);
        };
        return count_1;
    }

    public static double ln(double x_4) {
        double ln2_5 = 0.69314718055994529;
        double y_6 = x_4;
        double k_7 = 0.0;
        while ((y_6 > 2.0)) {
            y_6 = (y_6 / 2.0);
            k_7 = (k_7 + ln2_5);
        };
        while ((y_6 < 1.0)) {
            y_6 = (y_6 * 2.0);
            k_7 = (k_7 - ln2_5);
        };
        double t_8 = ((y_6 - 1.0) / (y_6 + 1.0));
        double term_9 = t_8;
        double sum_10 = 0.0;
        long n_11 = 1;
        while ((n_11 <= 19)) {
            sum_10 = (sum_10 + (term_9 / Convert.ToDouble(n_11)));
            term_9 = ((term_9 * t_8) * t_8);
            n_11 = (n_11 + 2);
        };
        return (k_7 + (2.0 * sum_10));
    }

    public static double floor(double x_12) {
        long i_13 = (long)(x_12);
        if ((Convert.ToDouble(i_13) > x_12)) {
            i_13 = (i_13 - 1);
        };
        return Convert.ToDouble(i_13);
    }

    public static double round4(double x_14) {
        double m_15 = 10000.0;
        return (Program.floor(((x_14 * m_15) + 0.5)) / m_15);
    }

    public static void main() {
        long n_16 = 51242183;
        long count_17 = Program.exact_prime_factor_count(n_16);
        Console.WriteLine(Program._fmtTop(("The number of distinct prime factors is/are " + _fmtStr(count_17))));
        double loglog_18 = Program.ln(Program.ln(Convert.ToDouble(n_16)));
        Console.WriteLine(Program._fmtTop(("The value of log(log(n)) is " + _fmtStr(Program.round4(loglog_18)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
