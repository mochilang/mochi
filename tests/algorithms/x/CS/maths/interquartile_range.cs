// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[] bubble_sort(double[] nums_0) {
        double[] arr_1 = new double[]{};
        long i_2 = 0;
        while ((i_2 < nums_0.Length)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append<double>(arr_1, nums_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        long n_3 = arr_1.Length;
        long a_4 = 0;
        while ((a_4 < n_3)) {
            long b_5 = 0;
            while ((b_5 < ((n_3 - a_4) - 1))) {
                if ((arr_1[(int)(b_5)] > arr_1[(int)((b_5 + 1))])) {
                    double temp_6 = arr_1[(int)(b_5)];
                    arr_1[b_5] = arr_1[(int)((b_5 + 1))];
                    arr_1[(b_5 + 1)] = temp_6;
                }
                b_5 = (b_5 + 1);
            }
            a_4 = (a_4 + 1);
        };
        return arr_1;
    }

    public static double find_median(double[] nums_7) {
        long length_8 = nums_7.Length;
        long div_9 = (length_8 / 2);
        long mod_10 = _mod(length_8, 2);
        if ((mod_10 != 0)) {
            return nums_7[(int)(div_9)];
        };
        return ((nums_7[(int)(div_9)] + nums_7[(int)((div_9 - 1))]) / 2.0);
    }

    public static double interquartile_range(double[] nums_11) {
        if ((nums_11.Length == 0)) {
            throw new Exception("The list is empty. Provide a non-empty list.");
        };
        double[] sorted_12 = Program.bubble_sort(nums_11);
        long length_13 = sorted_12.Length;
        long div_14 = (length_13 / 2);
        long mod_15 = _mod(length_13, 2);
        double[] lower_16 = new double[]{};
        long i_17 = 0;
        while ((i_17 < div_14)) {
            lower_16 = (Enumerable.ToArray(Enumerable.Append<double>(lower_16, sorted_12[(int)(i_17)])));
            i_17 = (i_17 + 1);
        };
        double[] upper_18 = new double[]{};
        long j_19 = (div_14 + mod_15);
        while ((j_19 < length_13)) {
            upper_18 = (Enumerable.ToArray(Enumerable.Append<double>(upper_18, sorted_12[(int)(j_19)])));
            j_19 = (j_19 + 1);
        };
        double q1_20 = Program.find_median(lower_16);
        double q3_21 = Program.find_median(upper_18);
        return (q3_21 - q1_20);
    }

    public static double absf(double x_22) {
        if ((x_22 < 0.0)) {
            return -x_22;
        };
        return x_22;
    }

    public static bool float_equal(double a_23, double b_24) {
        double diff_25 = Program.absf((a_23 - b_24));
        return (diff_25 < 1e-07);
    }

    public static void test_interquartile_range() {
        if ((!Program.float_equal(Program.interquartile_range(new double[]{4.0, 1.0, 2.0, 3.0, 2.0}), 2.0))) {
            throw new Exception("interquartile_range case1 failed");
        };
        if ((!Program.float_equal(Program.interquartile_range(new double[]{-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0}), 17.0))) {
            throw new Exception("interquartile_range case2 failed");
        };
        if ((!Program.float_equal(Program.interquartile_range(new double[]{-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1}), 17.2))) {
            throw new Exception("interquartile_range case3 failed");
        };
        if ((!Program.float_equal(Program.interquartile_range(new double[]{0.0, 0.0, 0.0, 0.0, 0.0}), 0.0))) {
            throw new Exception("interquartile_range case4 failed");
        };
    }

    public static void main() {
        Program.test_interquartile_range();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.interquartile_range(new double[]{4.0, 1.0, 2.0, 3.0, 2.0}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
