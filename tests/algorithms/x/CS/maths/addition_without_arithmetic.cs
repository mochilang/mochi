// Generated by Mochi 0.10.66 (commit f6dfa6fffe) on 2025-08-16 14:41 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long MAX_0 = 4294967296L;
    static long HALF_1 = 2147483648L;
    public static long to_unsigned(long n_2) {
        if ((n_2 < 0)) {
            return (MAX_0 + n_2);
        };
        return n_2;
    }

    public static long from_unsigned(long n_3) {
        if ((n_3 >= HALF_1)) {
            return (n_3 - MAX_0);
        };
        return n_3;
    }

    public static long bit_and(long a_4, long b_5) {
        long x_6 = a_4;
        long y_7 = b_5;
        long res_8 = 0;
        long bit_9 = 1;
        long i_10 = 0;
        while ((i_10 < 32)) {
            if (((_mod(x_6, 2) == 1) && (_mod(y_7, 2) == 1))) {
                res_8 = (res_8 + bit_9);
            }
            x_6 = _floordiv(x_6, 2);
            y_7 = _floordiv(y_7, 2);
            bit_9 = (bit_9 * 2);
            i_10 = (i_10 + 1);
        };
        return res_8;
    }

    public static long bit_xor(long a_11, long b_12) {
        long x_13 = a_11;
        long y_14 = b_12;
        long res_15 = 0;
        long bit_16 = 1;
        long i_17 = 0;
        while ((i_17 < 32)) {
            long abit_18 = _mod(x_13, 2);
            long bbit_19 = _mod(y_14, 2);
            if ((_mod((abit_18 + bbit_19), 2) == 1)) {
                res_15 = (res_15 + bit_16);
            }
            x_13 = _floordiv(x_13, 2);
            y_14 = _floordiv(y_14, 2);
            bit_16 = (bit_16 * 2);
            i_17 = (i_17 + 1);
        };
        return res_15;
    }

    public static long lshift1(long num_20) {
        return _mod((num_20 * 2), MAX_0);
    }

    public static long add(long a_21, long b_22) {
        long first_23 = Program.to_unsigned(a_21);
        long second_24 = Program.to_unsigned(b_22);
        while ((second_24 != 0)) {
            long carry_25 = Program.bit_and(first_23, second_24);
            first_23 = Program.bit_xor(first_23, second_24);
            second_24 = Program.lshift1(carry_25);
        };
        long result_26 = Program.from_unsigned(first_23);
        return result_26;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.add(3, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.add(13, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.add(-7, 2))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.add(0, -7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.add(-321, 0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
