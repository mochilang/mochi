// Generated by Mochi 0.10.65 (commit 2fb5ccc444) on 2025-08-14 16:18 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long ceil_float(double x_0) {
        long i_1 = (long)(x_0);
        if ((x_0 > Convert.ToDouble(i_1))) {
            return (i_1 + 1);
        };
        return i_1;
    }

    public static double exp_approx(double x_2) {
        double term_3 = 1.0;
        double sum_4 = 1.0;
        long n_5 = 1;
        while ((n_5 < 20)) {
            term_3 = ((term_3 * x_2) / Convert.ToDouble(n_5));
            sum_4 = (sum_4 + term_3);
            n_5 = (n_5 + 1);
        };
        return sum_4;
    }

    public static double[] euler_modified(Func<double, double, double> ode_func_6, double y0_7, double x0_8, double step_9, double x_end_10) {
        long n_11 = Program.ceil_float(((x_end_10 - x0_8) / step_9));
        double[] y_12 = new double[]{y0_7};
        double x_13 = x0_8;
        long k_14 = 0;
        while ((k_14 < n_11)) {
            double y_predict_15 = (_idx(y_12, k_14) + (((dynamic)(step_9)) * ((dynamic)(ode_func_6(x_13, _idx(y_12, k_14))))));
            var slope1_16 = ode_func_6(x_13, _idx(y_12, k_14));
            var slope2_17 = ode_func_6((x_13 + step_9), y_predict_15);
            double y_next_18 = (_idx(y_12, k_14) + (((dynamic)((step_9 / 2.0))) * ((dynamic)((((dynamic)(slope1_16)) + ((dynamic)(slope2_17)))))));
            y_12 = ((Func<double[]>)(() => { var _tmp = y_12.ToList(); _tmp.Add(y_next_18); return _tmp.ToArray(); }))();
            x_13 = (x_13 + step_9);
            k_14 = (k_14 + 1);
        };
        return y_12;
    }

    public static double f1(double x_19, double y_20) {
        return (((-2.0 * x_19) * y_20) * y_20);
    }

    public static double f2(double x_21, double y_22) {
        return ((-2.0 * y_22) + (((x_21 * x_21) * x_21) * Program.exp_approx((-2.0 * x_21))));
    }

    public static void main() {
        double[] y1_23 = Program.euler_modified(f1, 1.0, 0.0, 0.20000000000000001, 1.0);
        Console.WriteLine(Program._fmtTop(_idx(y1_23, (y1_23.Length - 1))));
        double[] y2_24 = Program.euler_modified(f2, 1.0, 0.0, 0.10000000000000001, 0.29999999999999999);
        Console.WriteLine(Program._fmtTop(_idx(y2_24, (y2_24.Length - 1))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
