// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double pow_float(double base_0, long exponent_1) {
        long exp_2 = exponent_1;
        double result_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < exp_2)) {
            result_3 = (result_3 * base_0);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static double evaluate_poly(double[] poly_5, double x_6) {
        double total_7 = 0.0;
        long i_8 = 0;
        while ((i_8 < poly_5.Length)) {
            total_7 = (total_7 + (poly_5[(int)(i_8)] * Program.pow_float(x_6, i_8)));
            i_8 = (i_8 + 1);
        };
        return total_7;
    }

    public static double horner(double[] poly_9, double x_10) {
        double result_11 = 0.0;
        long i_12 = (poly_9.Length - 1);
        while ((i_12 >= 0)) {
            result_11 = ((result_11 * x_10) + poly_9[(int)(i_12)]);
            i_12 = (i_12 - 1);
        };
        return result_11;
    }

    public static void test_polynomial_evaluation() {
        double[] poly_13 = new double[]{0.0, 0.0, 5.0, 9.3, 7.0};
        double x_14 = 10.0;
        if ((Program.evaluate_poly(poly_13, x_14) != 79800.0)) {
            throw new Exception("evaluate_poly failed");
        };
        if ((Program.horner(poly_13, x_14) != 79800.0)) {
            throw new Exception("horner failed");
        };
    }

    public static void main() {
        Program.test_polynomial_evaluation();
        double[] poly_15 = new double[]{0.0, 0.0, 5.0, 9.3, 7.0};
        double x_16 = 10.0;
        Console.WriteLine(Program._fmtTop(Program.evaluate_poly(poly_15, x_16)));
        Console.WriteLine(Program._fmtTop(Program.horner(poly_15, x_16)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
