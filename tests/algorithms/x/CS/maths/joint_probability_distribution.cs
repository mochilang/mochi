// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string key(long x_0, long y_1) {
        return ((_fmtStr(x_0) + ",") + _fmtStr(y_1));
    }

    public static Dictionary<string, double> joint_probability_distribution(long[] x_values_2, long[] y_values_3, double[] x_probabilities_4, double[] y_probabilities_5) {
        Dictionary<string, double> result_6 = new Dictionary<string, double>{};
        long i_7 = 0;
        while ((i_7 < x_values_2.Length)) {
            long j_8 = 0;
            while ((j_8 < y_values_3.Length)) {
                string k_9 = Program.key(_idx(x_values_2, i_7), _idx(y_values_3, j_8));
                result_6[k_9] = (_idx(x_probabilities_4, i_7) * _idx(y_probabilities_5, j_8));
                j_8 = (j_8 + 1);
            }
            i_7 = (i_7 + 1);
        };
        return result_6;
    }

    public static double expectation(long[] values_10, double[] probabilities_11) {
        double total_12 = 0.0;
        long i_13 = 0;
        while ((i_13 < values_10.Length)) {
            total_12 = (total_12 + (Convert.ToDouble(_idx(values_10, i_13)) * _idx(probabilities_11, i_13)));
            i_13 = (i_13 + 1);
        };
        return total_12;
    }

    public static double variance(long[] values_14, double[] probabilities_15) {
        double mean_16 = Program.expectation(values_14, probabilities_15);
        double total_17 = 0.0;
        long i_18 = 0;
        while ((i_18 < values_14.Length)) {
            double diff_19 = (Convert.ToDouble(_idx(values_14, i_18)) - mean_16);
            total_17 = (total_17 + ((diff_19 * diff_19) * _idx(probabilities_15, i_18)));
            i_18 = (i_18 + 1);
        };
        return total_17;
    }

    public static double covariance(long[] x_values_20, long[] y_values_21, double[] x_probabilities_22, double[] y_probabilities_23) {
        double mean_x_24 = Program.expectation(x_values_20, x_probabilities_22);
        double mean_y_25 = Program.expectation(y_values_21, y_probabilities_23);
        double total_26 = 0.0;
        long i_27 = 0;
        while ((i_27 < x_values_20.Length)) {
            long j_28 = 0;
            while ((j_28 < y_values_21.Length)) {
                double diff_x_29 = (Convert.ToDouble(_idx(x_values_20, i_27)) - mean_x_24);
                double diff_y_30 = (Convert.ToDouble(_idx(y_values_21, j_28)) - mean_y_25);
                total_26 = (total_26 + (((diff_x_29 * diff_y_30) * _idx(x_probabilities_22, i_27)) * _idx(y_probabilities_23, j_28)));
                j_28 = (j_28 + 1);
            }
            i_27 = (i_27 + 1);
        };
        return total_26;
    }

    public static double sqrtApprox(double x_31) {
        if ((x_31 <= 0.0)) {
            return 0.0;
        };
        double guess_32 = (x_31 / 2.0);
        long i_33 = 0;
        while ((i_33 < 20)) {
            guess_32 = ((guess_32 + (x_31 / guess_32)) / 2.0);
            i_33 = (i_33 + 1);
        };
        return guess_32;
    }

    public static double standard_deviation(double v_34) {
        return Program.sqrtApprox(v_34);
    }

    public static void main() {
        long[] x_values_35 = new long[]{1, 2};
        long[] y_values_36 = new long[]{-2, 5, 8};
        double[] x_probabilities_37 = new double[]{0.69999999999999996, 0.29999999999999999};
        double[] y_probabilities_38 = new double[]{0.29999999999999999, 0.5, 0.20000000000000001};
        Dictionary<string, double> jpd_39 = Program.joint_probability_distribution(x_values_35, y_values_36, x_probabilities_37, y_probabilities_38);
        long i_40 = 0;
        while ((i_40 < x_values_35.Length)) {
            long j_41 = 0;
            while ((j_41 < y_values_36.Length)) {
                string k_42 = Program.key(_idx(x_values_35, i_40), _idx(y_values_36, j_41));
                double prob_43 = (jpd_39.ContainsKey(k_42) ? jpd_39[k_42] : 0.0);
                Console.WriteLine(Program._fmtTop(((k_42 + "=") + _fmtStr(prob_43))));
                j_41 = (j_41 + 1);
            }
            i_40 = (i_40 + 1);
        };
        double ex_44 = Program.expectation(x_values_35, x_probabilities_37);
        double ey_45 = Program.expectation(y_values_36, y_probabilities_38);
        double vx_46 = Program.variance(x_values_35, x_probabilities_37);
        double vy_47 = Program.variance(y_values_36, y_probabilities_38);
        double cov_48 = Program.covariance(x_values_35, y_values_36, x_probabilities_37, y_probabilities_38);
        Console.WriteLine(Program._fmtTop(("Ex=" + _fmtStr(ex_44))));
        Console.WriteLine(Program._fmtTop(("Ey=" + _fmtStr(ey_45))));
        Console.WriteLine(Program._fmtTop(("Vx=" + _fmtStr(vx_46))));
        Console.WriteLine(Program._fmtTop(("Vy=" + _fmtStr(vy_47))));
        Console.WriteLine(Program._fmtTop(("Cov=" + _fmtStr(cov_48))));
        Console.WriteLine(Program._fmtTop(("Sx=" + _fmtStr(Program.standard_deviation(vx_46)))));
        Console.WriteLine(Program._fmtTop(("Sy=" + _fmtStr(Program.standard_deviation(vy_47)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
