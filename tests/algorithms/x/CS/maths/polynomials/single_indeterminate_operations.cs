// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Polynomial {
    public long degree;
    public double[] coefficients;
    public override string ToString() => $"Polynomial {{degree = {degree}, coefficients = {coefficients}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[] copy_list(double[] xs_0) {
        double[] res_1 = new double[]{};
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<double>(res_1, xs_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static Polynomial polynomial_new(long degree_3, double[] coeffs_4) {
        if ((coeffs_4.Length != (degree_3 + 1))) {
            throw new Exception("The number of coefficients should be equal to the degree + 1.");
        };
        return new Polynomial{degree = degree_3, coefficients = Program.copy_list(coeffs_4)};
    }

    public static Polynomial add(Polynomial p_5, Polynomial q_6) {
        if ((p_5.degree > q_6.degree)) {
            double[] coeffs_7 = Program.copy_list(p_5.coefficients);
            long i_8 = 0;
            while ((i_8 <= q_6.degree)) {
                coeffs_7[i_8] = (coeffs_7[(int)(i_8)] + q_6.coefficients[(int)(i_8)]);
                i_8 = (i_8 + 1);
            }
            return new Polynomial{degree = p_5.degree, coefficients = coeffs_7};
        } else {
            double[] coeffs_9 = Program.copy_list(q_6.coefficients);
            long i_10 = 0;
            while ((i_10 <= p_5.degree)) {
                coeffs_9[i_10] = (coeffs_9[(int)(i_10)] + p_5.coefficients[(int)(i_10)]);
                i_10 = (i_10 + 1);
            }
            return new Polynomial{degree = q_6.degree, coefficients = coeffs_9};
        };
        return default(Polynomial);
    }

    public static Polynomial neg(Polynomial p_11) {
        double[] coeffs_12 = new double[]{};
        long i_13 = 0;
        while ((i_13 <= p_11.degree)) {
            coeffs_12 = (Enumerable.ToArray(Enumerable.Append<double>(coeffs_12, -p_11.coefficients[(int)(i_13)])));
            i_13 = (i_13 + 1);
        };
        return new Polynomial{degree = p_11.degree, coefficients = coeffs_12};
    }

    public static Polynomial sub(Polynomial p_14, Polynomial q_15) {
        return Program.add(p_14, Program.neg(q_15));
    }

    public static Polynomial mul(Polynomial p_16, Polynomial q_17) {
        long size_18 = ((p_16.degree + q_17.degree) + 1);
        double[] coeffs_19 = new double[]{};
        long i_20 = 0;
        while ((i_20 < size_18)) {
            coeffs_19 = (Enumerable.ToArray(Enumerable.Append<double>(coeffs_19, 0.0)));
            i_20 = (i_20 + 1);
        };
        i_20 = 0;
        while ((i_20 <= p_16.degree)) {
            long j_21 = 0;
            while ((j_21 <= q_17.degree)) {
                coeffs_19[(i_20 + j_21)] = (coeffs_19[(int)((i_20 + j_21))] + (p_16.coefficients[(int)(i_20)] * q_17.coefficients[(int)(j_21)]));
                j_21 = (j_21 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return new Polynomial{degree = (p_16.degree + q_17.degree), coefficients = coeffs_19};
    }

    public static double power(double base_22, long exp_23) {
        double result_24 = 1.0;
        long i_25 = 0;
        while ((i_25 < exp_23)) {
            result_24 = (result_24 * base_22);
            i_25 = (i_25 + 1);
        };
        return result_24;
    }

    public static double evaluate(Polynomial p_26, double x_27) {
        double result_28 = 0.0;
        long i_29 = 0;
        while ((i_29 <= p_26.degree)) {
            result_28 = (result_28 + (p_26.coefficients[(int)(i_29)] * Program.power(x_27, i_29)));
            i_29 = (i_29 + 1);
        };
        return result_28;
    }

    public static string poly_to_string(Polynomial p_30) {
        string s_31 = "";
        long i_32 = p_30.degree;
        while ((i_32 >= 0)) {
            double coeff_33 = p_30.coefficients[(int)(i_32)];
            if ((coeff_33 != 0.0)) {
                if ((s_31.Length > 0)) {
                    if ((coeff_33 > 0.0)) {
                        s_31 = (s_31 + " + ");
                    } else {
                        s_31 = (s_31 + " - ");
                    }
                } else if ((coeff_33 < 0.0)) {
                    s_31 = (s_31 + "-");
                }
                double abs_coeff_34 = ((coeff_33 < 0.0) ? -coeff_33 : coeff_33);
                if ((i_32 == 0)) {
                    s_31 = (s_31 + _fmtStr(abs_coeff_34));
                } else if ((i_32 == 1)) {
                    s_31 = ((s_31 + _fmtStr(abs_coeff_34)) + "x");
                } else {
                    s_31 = (((s_31 + _fmtStr(abs_coeff_34)) + "x^") + _fmtStr(i_32));
                }
            }
            i_32 = (i_32 - 1);
        };
        if ((s_31 == "")) {
            s_31 = "0";
        };
        return s_31;
    }

    public static Polynomial derivative(Polynomial p_35) {
        if ((p_35.degree == 0)) {
            return new Polynomial{degree = 0, coefficients = new double[]{0.0}};
        };
        double[] coeffs_36 = new double[]{};
        long i_37 = 0;
        while ((i_37 < p_35.degree)) {
            coeffs_36 = (Enumerable.ToArray(Enumerable.Append<double>(coeffs_36, (p_35.coefficients[(int)((i_37 + 1))] * Convert.ToDouble((i_37 + 1))))));
            i_37 = (i_37 + 1);
        };
        return new Polynomial{degree = (p_35.degree - 1), coefficients = coeffs_36};
    }

    public static Polynomial integral(Polynomial p_38, double constant_39) {
        double[] coeffs_40 = new double[]{constant_39};
        long i_41 = 0;
        while ((i_41 <= p_38.degree)) {
            coeffs_40 = (Enumerable.ToArray(Enumerable.Append<double>(coeffs_40, (p_38.coefficients[(int)(i_41)] / Convert.ToDouble((i_41 + 1))))));
            i_41 = (i_41 + 1);
        };
        return new Polynomial{degree = (p_38.degree + 1), coefficients = coeffs_40};
    }

    public static bool equals(Polynomial p_42, Polynomial q_43) {
        if ((p_42.degree != q_43.degree)) {
            return false;
        };
        long i_44 = 0;
        while ((i_44 <= p_42.degree)) {
            if ((p_42.coefficients[(int)(i_44)] != q_43.coefficients[(int)(i_44)])) {
                return false;
            }
            i_44 = (i_44 + 1);
        };
        return true;
    }

    public static bool not_equals(Polynomial p_45, Polynomial q_46) {
        return (!Program.equals(p_45, q_46));
    }

    public static void test_polynomial() {
        Polynomial p_47 = Program.polynomial_new(2, new double[]{1.0, 2.0, 3.0});
        Polynomial q_48 = Program.polynomial_new(2, new double[]{1.0, 2.0, 3.0});
        if ((Program.poly_to_string(Program.add(p_47, q_48)) != "6x^2 + 4x + 2")) {
            throw new Exception("add failed");
        };
        if ((Program.poly_to_string(Program.sub(p_47, q_48)) != "0")) {
            throw new Exception("sub failed");
        };
        if ((Program.evaluate(p_47, 2.0) != 17.0)) {
            throw new Exception("evaluate failed");
        };
        if ((Program.poly_to_string(Program.derivative(p_47)) != "6x + 2")) {
            throw new Exception("derivative failed");
        };
        string integ_49 = Program.poly_to_string(Program.integral(p_47, 0.0));
        if ((integ_49 != "1x^3 + 1x^2 + 1x")) {
            throw new Exception("integral failed");
        };
        if ((!Program.equals(p_47, q_48))) {
            throw new Exception("equals failed");
        };
        if (Program.not_equals(p_47, q_48)) {
            throw new Exception("not_equals failed");
        };
    }

    public static void main() {
        Program.test_polynomial();
        Polynomial p_50 = Program.polynomial_new(2, new double[]{1.0, 2.0, 3.0});
        Polynomial d_51 = Program.derivative(p_50);
        Console.WriteLine(Program._fmtTop(Program.poly_to_string(d_51)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
