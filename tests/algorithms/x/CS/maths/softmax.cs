// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double exp_approx(double x_0) {
        double term_1 = 1.0;
        double sum_2 = 1.0;
        long i_3 = 1;
        while ((i_3 < 20)) {
            term_1 = ((term_1 * x_0) / Convert.ToDouble(i_3));
            sum_2 = (sum_2 + term_1);
            i_3 = (i_3 + 1);
        };
        return sum_2;
    }

    public static double[] softmax(double[] vec_4) {
        double[] exps_5 = new double[]{};
        long i_6 = 0;
        while ((i_6 < vec_4.Length)) {
            exps_5 = (Enumerable.ToArray(Enumerable.Append<double>(exps_5, Program.exp_approx(vec_4[(int)(i_6)]))));
            i_6 = (i_6 + 1);
        };
        double total_7 = 0.0;
        i_6 = 0;
        while ((i_6 < exps_5.Length)) {
            total_7 = (total_7 + exps_5[(int)(i_6)]);
            i_6 = (i_6 + 1);
        };
        double[] result_8 = new double[]{};
        i_6 = 0;
        while ((i_6 < exps_5.Length)) {
            result_8 = (Enumerable.ToArray(Enumerable.Append<double>(result_8, (exps_5[(int)(i_6)] / total_7))));
            i_6 = (i_6 + 1);
        };
        return result_8;
    }

    public static double abs_val(double x_9) {
        if ((x_9 < 0.0)) {
            return -x_9;
        };
        return x_9;
    }

    public static bool approx_equal(double a_10, double b_11) {
        return (Program.abs_val((a_10 - b_11)) < 0.0001);
    }

    public static void test_softmax() {
        double[] s1_12 = Program.softmax(new double[]{1.0, 2.0, 3.0, 4.0});
        double sum1_13 = 0.0;
        long i_14 = 0;
        while ((i_14 < s1_12.Length)) {
            sum1_13 = (sum1_13 + s1_12[(int)(i_14)]);
            i_14 = (i_14 + 1);
        };
        if ((!Program.approx_equal(sum1_13, 1.0))) {
            throw new Exception("sum test failed");
        };
        double[] s2_15 = Program.softmax(new double[]{5.0, 5.0});
        if ((!(Program.approx_equal(s2_15[(int)(0)], 0.5) && Program.approx_equal(s2_15[(int)(1)], 0.5)))) {
            throw new Exception("equal elements test failed");
        };
        double[] s3_16 = Program.softmax(new double[]{0.0});
        if ((!Program.approx_equal(s3_16[(int)(0)], 1.0))) {
            throw new Exception("zero vector test failed");
        };
    }

    public static void main() {
        Program.test_softmax();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.softmax(new double[]{1.0, 2.0, 3.0, 4.0}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
