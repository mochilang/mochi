// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class TextCounts {
    public Dictionary<string, long> single;
    public Dictionary<string, long> _double;
    public override string ToString() => $"TextCounts {{single = {single}, _double = {_double}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string text1_40 = (("Behind Winston's back the voice " + "from the telescreen was still ") + "babbling and the overfulfilment");
    public static double log2(double x_0) {
        double k_1 = 0.0;
        double v_2 = x_0;
        while ((v_2 >= 2.0)) {
            v_2 = (v_2 / 2.0);
            k_1 = (k_1 + 1.0);
        };
        while ((v_2 < 1.0)) {
            v_2 = (v_2 * 2.0);
            k_1 = (k_1 - 1.0);
        };
        double z_3 = ((v_2 - 1.0) / (v_2 + 1.0));
        double zpow_4 = z_3;
        double sum_5 = z_3;
        long i_6 = 3;
        while ((i_6 <= 9)) {
            zpow_4 = ((zpow_4 * z_3) * z_3);
            sum_5 = (sum_5 + (zpow_4 / Convert.ToDouble(i_6)));
            i_6 = (i_6 + 2);
        };
        double ln2_7 = 0.6931471805599453;
        return (k_1 + ((2.0 * sum_5) / ln2_7));
    }

    public static TextCounts analyze_text(string text_8) {
        Dictionary<string, long> single_9 = new Dictionary<string, long>{};
        Dictionary<string, long> double_10 = new Dictionary<string, long>{};
        long n_11 = text_8.Length;
        if ((n_11 == 0)) {
            return new TextCounts{single = single_9, _double = double_10};
        };
        string last_12 = _substr(text_8, (n_11 - 1), n_11);
        if ((single_9.ContainsKey(last_12))) {
            single_9[last_12] = ((single_9.ContainsKey(last_12) ? single_9[last_12] : 0) + 1);
        } else {
            single_9[last_12] = 1;
        };
        string first_13 = _substr(text_8, 0, 1);
        string pair0_14 = (" " + first_13);
        double_10[pair0_14] = 1;
        long i_15 = 0;
        while ((i_15 < (n_11 - 1))) {
            string ch_16 = _substr(text_8, i_15, (i_15 + 1));
            if ((single_9.ContainsKey(ch_16))) {
                single_9[ch_16] = ((single_9.ContainsKey(ch_16) ? single_9[ch_16] : 0) + 1);
            } else {
                single_9[ch_16] = 1;
            }
            string seq_17 = _substr(text_8, i_15, (i_15 + 2));
            if ((double_10.ContainsKey(seq_17))) {
                double_10[seq_17] = ((double_10.ContainsKey(seq_17) ? double_10[seq_17] : 0) + 1);
            } else {
                double_10[seq_17] = 1;
            }
            i_15 = (i_15 + 1);
        };
        return new TextCounts{single = single_9, _double = double_10};
    }

    public static long round_to_int(double x_18) {
        if ((x_18 < 0.0)) {
            return Convert.ToInt64((x_18 - 0.5));
        };
        return Convert.ToInt64((x_18 + 0.5));
    }

    public static void calculate_entropy(string text_19) {
        TextCounts counts_20 = Program.analyze_text(text_19);
        string alphas_21 = " abcdefghijklmnopqrstuvwxyz";
        long total1_22 = 0;
        foreach (string ch_23 in counts_20.single.Keys) {
            total1_22 = (total1_22 + (counts_20.single.ContainsKey(ch_23) ? counts_20.single[ch_23] : 0));
        };
        double h1_24 = 0.0;
        long i_25 = 0;
        while ((i_25 < alphas_21.Length)) {
            string ch_26 = _substr(alphas_21, i_25, (i_25 + 1));
            if ((counts_20.single.ContainsKey(ch_26))) {
                double prob_27 = (Convert.ToDouble((counts_20.single.ContainsKey(ch_26) ? counts_20.single[ch_26] : 0)) / Convert.ToDouble(total1_22));
                h1_24 = (h1_24 + (prob_27 * Program.log2(prob_27)));
            }
            i_25 = (i_25 + 1);
        };
        double first_entropy_28 = -h1_24;
        Console.WriteLine(Program._fmtTop((_fmtStr(Program.round_to_int(first_entropy_28)) + ".0")));
        long total2_29 = 0;
        foreach (string seq_30 in counts_20._double.Keys) {
            total2_29 = (total2_29 + (counts_20._double.ContainsKey(seq_30) ? counts_20._double[seq_30] : 0));
        };
        double h2_31 = 0.0;
        long a0_32 = 0;
        while ((a0_32 < alphas_21.Length)) {
            string ch0_33 = _substr(alphas_21, a0_32, (a0_32 + 1));
            long a1_34 = 0;
            while ((a1_34 < alphas_21.Length)) {
                string ch1_35 = _substr(alphas_21, a1_34, (a1_34 + 1));
                string seq_36 = (ch0_33 + ch1_35);
                if ((counts_20._double.ContainsKey(seq_36))) {
                    double prob_37 = (Convert.ToDouble((counts_20._double.ContainsKey(seq_36) ? counts_20._double[seq_36] : 0)) / Convert.ToDouble(total2_29));
                    h2_31 = (h2_31 + (prob_37 * Program.log2(prob_37)));
                }
                a1_34 = (a1_34 + 1);
            }
            a0_32 = (a0_32 + 1);
        };
        double second_entropy_38 = -h2_31;
        Console.WriteLine(Program._fmtTop((_fmtStr(Program.round_to_int(second_entropy_38)) + ".0")));
        double diff_39 = (second_entropy_38 - first_entropy_28);
        Console.WriteLine(Program._fmtTop((_fmtStr(Program.round_to_int(diff_39)) + ".0")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.calculate_entropy(text1_40);
            string text3_41 = (((((((((("Had repulsive dashwoods suspicion sincerity but advantage now him. " + "Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. ") + "You greatest jointure saw horrible. He private he on be imagine ") + "suppose. Fertile beloved evident through no service elderly is. Blind ") + "there if every no so at. Own neglected you preferred way sincerity ") + "delivered his attempted. To of message cottage windows do besides ") + "against uncivil.  Delightful unreserved impossible few estimating ") + "men favourable see entreaties. She propriety immediate was improving. ") + "He or entrance humoured likewise moderate. Much nor game son say ") + "feel. Fat make met can must form into gate. Me we offending prevailed ") + "discovery.");
            Program.calculate_entropy(text3_41);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
