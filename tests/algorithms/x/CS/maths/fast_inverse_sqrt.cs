// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long pow2_int(long n_0) {
        long result_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            result_1 = (result_1 * 2);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static double pow2_float(long n_3) {
        double result_4 = 1.0;
        if ((n_3 >= 0)) {
            long i_5 = 0;
            while ((i_5 < n_3)) {
                result_4 = (result_4 * 2.0);
                i_5 = (i_5 + 1);
            }
        } else {
            long i_6 = 0;
            long m_7 = (0 - n_3);
            while ((i_6 < m_7)) {
                result_4 = (result_4 / 2.0);
                i_6 = (i_6 + 1);
            }
        };
        return result_4;
    }

    public static long lshift(long num_8, long k_9) {
        long result_10 = num_8;
        long i_11 = 0;
        while ((i_11 < k_9)) {
            result_10 = (result_10 * 2);
            i_11 = (i_11 + 1);
        };
        return result_10;
    }

    public static long rshift(long num_12, long k_13) {
        long result_14 = num_12;
        long i_15 = 0;
        while ((i_15 < k_13)) {
            result_14 = _floordiv((result_14 - _mod(result_14, 2)), 2);
            i_15 = (i_15 + 1);
        };
        return result_14;
    }

    public static long log2_floor(double x_16) {
        double n_17 = x_16;
        long e_18 = 0;
        while ((n_17 >= 2.0)) {
            n_17 = (n_17 / 2.0);
            e_18 = (e_18 + 1);
        };
        while ((n_17 < 1.0)) {
            n_17 = (n_17 * 2.0);
            e_18 = (e_18 - 1);
        };
        return e_18;
    }

    public static long float_to_bits(double x_19) {
        double num_20 = x_19;
        long sign_21 = 0;
        if ((num_20 < 0.0)) {
            sign_21 = 1;
            num_20 = -num_20;
        };
        long exp_22 = Program.log2_floor(num_20);
        double pow_23 = Program.pow2_float(exp_22);
        double normalized_24 = (num_20 / pow_23);
        double frac_25 = (normalized_24 - 1.0);
        long mantissa_26 = (long)((frac_25 * Program.pow2_float(23)));
        long exp_bits_27 = (exp_22 + 127);
        return ((Program.lshift(sign_21, 31) + Program.lshift(exp_bits_27, 23)) + mantissa_26);
    }

    public static double bits_to_float(long bits_28) {
        long sign_bit_29 = _mod(Program.rshift(bits_28, 31), 2);
        double sign_30 = 1.0;
        if ((sign_bit_29 == 1)) {
            sign_30 = -1.0;
        };
        long exp_bits_31 = _mod(Program.rshift(bits_28, 23), 256);
        long exp_32 = (exp_bits_31 - 127);
        long mantissa_bits_33 = _mod(bits_28, Program.pow2_int(23));
        double mantissa_34 = (1.0 + (Convert.ToDouble(mantissa_bits_33) / Program.pow2_float(23)));
        return ((sign_30 * mantissa_34) * Program.pow2_float(exp_32));
    }

    public static double absf(double x_35) {
        if ((x_35 < 0.0)) {
            return -x_35;
        };
        return x_35;
    }

    public static double sqrtApprox(double x_36) {
        if ((x_36 <= 0.0)) {
            return 0.0;
        };
        double guess_37 = (x_36 / 2.0);
        long i_38 = 0;
        while ((i_38 < 20)) {
            guess_37 = ((guess_37 + (x_36 / guess_37)) / 2.0);
            i_38 = (i_38 + 1);
        };
        return guess_37;
    }

    public static bool is_close(double a_39, double b_40, double rel_tol_41) {
        return (Program.absf((a_39 - b_40)) <= (rel_tol_41 * Program.absf(b_40)));
    }

    public static double fast_inverse_sqrt(double number_42) {
        if ((number_42 <= 0.0)) {
            throw new Exception("Input must be a positive number.");
        };
        long i_43 = Program.float_to_bits(number_42);
        long magic_44 = 1597463007;
        long y_bits_45 = (magic_44 - Program.rshift(i_43, 1));
        double y_46 = Program.bits_to_float(y_bits_45);
        y_46 = (y_46 * (1.5 - (((0.5 * number_42) * y_46) * y_46)));
        return y_46;
    }

    public static void test_fast_inverse_sqrt() {
        if ((Program.absf((Program.fast_inverse_sqrt(10.0) - 0.3156857923527257)) > 0.0001)) {
            throw new Exception("fast_inverse_sqrt(10) failed");
        };
        if ((Program.absf((Program.fast_inverse_sqrt(4.0) - 0.49915357479239103)) > 0.0001)) {
            throw new Exception("fast_inverse_sqrt(4) failed");
        };
        if ((Program.absf((Program.fast_inverse_sqrt(4.0999999999999996) - 0.49328495046156512)) > 0.0001)) {
            throw new Exception("fast_inverse_sqrt(4.1) failed");
        };
        long i_47 = 50;
        while ((i_47 < 60)) {
            double y_48 = Program.fast_inverse_sqrt(Convert.ToDouble(i_47));
            double actual_49 = (1.0 / Program.sqrtApprox(Convert.ToDouble(i_47)));
            if ((!Program.is_close(y_48, actual_49, 0.00132))) {
                throw new Exception("relative error too high");
            }
            i_47 = (i_47 + 1);
        };
    }

    public static void main() {
        Program.test_fast_inverse_sqrt();
        long i_50 = 5;
        while ((i_50 <= 100)) {
            double diff_51 = ((1.0 / Program.sqrtApprox(Convert.ToDouble(i_50))) - Program.fast_inverse_sqrt(Convert.ToDouble(i_50)));
            Console.WriteLine(Program._fmtTop(((_fmtStr(i_50) + ": ") + _fmtStr(diff_51))));
            i_50 = (i_50 + 5);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
