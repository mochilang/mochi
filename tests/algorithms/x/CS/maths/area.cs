// Generated by Mochi 0.10.67 (commit c7612b9c83) on 2025-08-16 19:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.1415926535897931;
    static double TWO_PI_1 = 6.2831853071795862;
    public static double _mod(double x_2, double m_3) {
        return (x_2 - (Convert.ToDouble(_atoi((x_2 / m_3))) * m_3));
    }

    public static double sin_approx(double x_4) {
        double y_5 = (Program._mod((x_4 + PI_0), TWO_PI_1) - PI_0);
        double y2_6 = (y_5 * y_5);
        double y3_7 = (y2_6 * y_5);
        double y5_8 = (y3_7 * y2_6);
        double y7_9 = (y5_8 * y2_6);
        return (((y_5 - (y3_7 / 6.0)) + (y5_8 / 120.0)) - (y7_9 / 5040.0));
    }

    public static double cos_approx(double x_10) {
        double y_11 = (Program._mod((x_10 + PI_0), TWO_PI_1) - PI_0);
        double y2_12 = (y_11 * y_11);
        double y4_13 = (y2_12 * y2_12);
        double y6_14 = (y4_13 * y2_12);
        return (((1.0 - (y2_12 / 2.0)) + (y4_13 / 24.0)) - (y6_14 / 720.0));
    }

    public static double tan_approx(double x_15) {
        return (Program.sin_approx(x_15) / Program.cos_approx(x_15));
    }

    public static double sqrt_approx(double x_16) {
        if ((x_16 <= 0.0)) {
            return 0.0;
        };
        double guess_17 = (x_16 / 2.0);
        long i_18 = 0;
        while ((i_18 < 20)) {
            guess_17 = ((guess_17 + (x_16 / guess_17)) / 2.0);
            i_18 = (i_18 + 1);
        };
        return guess_17;
    }

    public static double surface_area_cube(double side_length_19) {
        if ((side_length_19 < 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_cube() only accepts non-negative values"));
            return 0.0;
        };
        return ((6.0 * side_length_19) * side_length_19);
    }

    public static double surface_area_cuboid(double length_20, double breadth_21, double height_22) {
        if ((((length_20 < 0.0) || (breadth_21 < 0.0)) || (height_22 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_cuboid() only accepts non-negative values"));
            return 0.0;
        };
        return (2.0 * (((length_20 * breadth_21) + (breadth_21 * height_22)) + (length_20 * height_22)));
    }

    public static double surface_area_sphere(double radius_23) {
        if ((radius_23 < 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_sphere() only accepts non-negative values"));
            return 0.0;
        };
        return (((4.0 * PI_0) * radius_23) * radius_23);
    }

    public static double surface_area_hemisphere(double radius_24) {
        if ((radius_24 < 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_hemisphere() only accepts non-negative values"));
            return 0.0;
        };
        return (((3.0 * PI_0) * radius_24) * radius_24);
    }

    public static double surface_area_cone(double radius_25, double height_26) {
        if (((radius_25 < 0.0) || (height_26 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_cone() only accepts non-negative values"));
            return 0.0;
        };
        double slant_27 = Program.sqrt_approx(((height_26 * height_26) + (radius_25 * radius_25)));
        return ((PI_0 * radius_25) * (radius_25 + slant_27));
    }

    public static double surface_area_conical_frustum(double radius1_28, double radius2_29, double height_30) {
        if ((((radius1_28 < 0.0) || (radius2_29 < 0.0)) || (height_30 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_conical_frustum() only accepts non-negative values"));
            return 0.0;
        };
        double slant_31 = Program.sqrt_approx(((height_30 * height_30) + ((radius1_28 - radius2_29) * (radius1_28 - radius2_29))));
        return (PI_0 * (((slant_31 * (radius1_28 + radius2_29)) + (radius1_28 * radius1_28)) + (radius2_29 * radius2_29)));
    }

    public static double surface_area_cylinder(double radius_32, double height_33) {
        if (((radius_32 < 0.0) || (height_33 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_cylinder() only accepts non-negative values"));
            return 0.0;
        };
        return (((2.0 * PI_0) * radius_32) * (height_33 + radius_32));
    }

    public static double surface_area_torus(double torus_radius_34, double tube_radius_35) {
        if (((torus_radius_34 < 0.0) || (tube_radius_35 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_torus() only accepts non-negative values"));
            return 0.0;
        };
        if ((torus_radius_34 < tube_radius_35)) {
            Console.WriteLine(Program._fmtTop("ValueError: surface_area_torus() does not support spindle or self intersecting tori"));
            return 0.0;
        };
        return ((((4.0 * PI_0) * PI_0) * torus_radius_34) * tube_radius_35);
    }

    public static double area_rectangle(double length_36, double width_37) {
        if (((length_36 < 0.0) || (width_37 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_rectangle() only accepts non-negative values"));
            return 0.0;
        };
        return (length_36 * width_37);
    }

    public static double area_square(double side_length_38) {
        if ((side_length_38 < 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: area_square() only accepts non-negative values"));
            return 0.0;
        };
        return (side_length_38 * side_length_38);
    }

    public static double area_triangle(double base_39, double height_40) {
        if (((base_39 < 0.0) || (height_40 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_triangle() only accepts non-negative values"));
            return 0.0;
        };
        return ((base_39 * height_40) / 2.0);
    }

    public static double area_triangle_three_sides(double side1_41, double side2_42, double side3_43) {
        if ((((side1_41 < 0.0) || (side2_42 < 0.0)) || (side3_43 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_triangle_three_sides() only accepts non-negative values"));
            return 0.0;
        };
        if (((((side1_41 + side2_42) < side3_43) || ((side1_41 + side3_43) < side2_42)) || ((side2_42 + side3_43) < side1_41))) {
            Console.WriteLine(Program._fmtTop("ValueError: Given three sides do not form a triangle"));
            return 0.0;
        };
        double s_44 = (((side1_41 + side2_42) + side3_43) / 2.0);
        double prod_45 = (((s_44 * (s_44 - side1_41)) * (s_44 - side2_42)) * (s_44 - side3_43));
        double res_46 = Program.sqrt_approx(prod_45);
        return res_46;
    }

    public static double area_parallelogram(double base_47, double height_48) {
        if (((base_47 < 0.0) || (height_48 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_parallelogram() only accepts non-negative values"));
            return 0.0;
        };
        return (base_47 * height_48);
    }

    public static double area_trapezium(double base1_49, double base2_50, double height_51) {
        if ((((base1_49 < 0.0) || (base2_50 < 0.0)) || (height_51 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_trapezium() only accepts non-negative values"));
            return 0.0;
        };
        return ((0.5 * (base1_49 + base2_50)) * height_51);
    }

    public static double area_circle(double radius_52) {
        if ((radius_52 < 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: area_circle() only accepts non-negative values"));
            return 0.0;
        };
        return ((PI_0 * radius_52) * radius_52);
    }

    public static double area_ellipse(double radius_x_53, double radius_y_54) {
        if (((radius_x_53 < 0.0) || (radius_y_54 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_ellipse() only accepts non-negative values"));
            return 0.0;
        };
        return ((PI_0 * radius_x_53) * radius_y_54);
    }

    public static double area_rhombus(double diagonal1_55, double diagonal2_56) {
        if (((diagonal1_55 < 0.0) || (diagonal2_56 < 0.0))) {
            Console.WriteLine(Program._fmtTop("ValueError: area_rhombus() only accepts non-negative values"));
            return 0.0;
        };
        return ((0.5 * diagonal1_55) * diagonal2_56);
    }

    public static double area_reg_polygon(long sides_57, double length_58) {
        if ((sides_57 < 3)) {
            Console.WriteLine(Program._fmtTop("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides"));
            return 0.0;
        };
        if ((length_58 < 0.0)) {
            Console.WriteLine(Program._fmtTop("ValueError: area_reg_polygon() only accepts non-negative values as length of a side"));
            return 0.0;
        };
        double n_59 = Convert.ToDouble(sides_57);
        return (((n_59 * length_58) * length_58) / (4.0 * Program.tan_approx((PI_0 / n_59))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("[DEMO] Areas of various geometric shapes:"));
            Console.WriteLine(Program._fmtTop(("Rectangle: " + _fmtStr(Program.area_rectangle(10.0, 20.0)))));
            Console.WriteLine(Program._fmtTop(("Square: " + _fmtStr(Program.area_square(10.0)))));
            Console.WriteLine(Program._fmtTop(("Triangle: " + _fmtStr(Program.area_triangle(10.0, 10.0)))));
            double TRI_THREE_SIDES_60 = Program.area_triangle_three_sides(5.0, 12.0, 13.0);
            Console.WriteLine(Program._fmtTop(("Triangle Three Sides: " + _fmtStr(TRI_THREE_SIDES_60))));
            Console.WriteLine(Program._fmtTop(("Parallelogram: " + _fmtStr(Program.area_parallelogram(10.0, 20.0)))));
            Console.WriteLine(Program._fmtTop(("Rhombus: " + _fmtStr(Program.area_rhombus(10.0, 20.0)))));
            Console.WriteLine(Program._fmtTop(("Trapezium: " + _fmtStr(Program.area_trapezium(10.0, 20.0, 30.0)))));
            Console.WriteLine(Program._fmtTop(("Circle: " + _fmtStr(Program.area_circle(20.0)))));
            Console.WriteLine(Program._fmtTop(("Ellipse: " + _fmtStr(Program.area_ellipse(10.0, 20.0)))));
            Console.WriteLine(Program._fmtTop(""));
            Console.WriteLine(Program._fmtTop("Surface Areas of various geometric shapes:"));
            Console.WriteLine(Program._fmtTop(("Cube: " + _fmtStr(Program.surface_area_cube(20.0)))));
            Console.WriteLine(Program._fmtTop(("Cuboid: " + _fmtStr(Program.surface_area_cuboid(10.0, 20.0, 30.0)))));
            Console.WriteLine(Program._fmtTop(("Sphere: " + _fmtStr(Program.surface_area_sphere(20.0)))));
            Console.WriteLine(Program._fmtTop(("Hemisphere: " + _fmtStr(Program.surface_area_hemisphere(20.0)))));
            Console.WriteLine(Program._fmtTop(("Cone: " + _fmtStr(Program.surface_area_cone(10.0, 20.0)))));
            Console.WriteLine(Program._fmtTop(("Conical Frustum: " + _fmtStr(Program.surface_area_conical_frustum(10.0, 20.0, 30.0)))));
            Console.WriteLine(Program._fmtTop(("Cylinder: " + _fmtStr(Program.surface_area_cylinder(10.0, 20.0)))));
            Console.WriteLine(Program._fmtTop(("Torus: " + _fmtStr(Program.surface_area_torus(20.0, 10.0)))));
            Console.WriteLine(Program._fmtTop(("Equilateral Triangle: " + _fmtStr(Program.area_reg_polygon(3, 10.0)))));
            Console.WriteLine(Program._fmtTop(("Square: " + _fmtStr(Program.area_reg_polygon(4, 10.0)))));
            Console.WriteLine(Program._fmtTop(("Regular Pentagon: " + _fmtStr(Program.area_reg_polygon(5, 10.0)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
