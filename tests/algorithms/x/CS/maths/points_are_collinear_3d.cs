// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point3d {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"Point3d {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Vector3d {
    public double x;
    public double y;
    public double z;
    public override string ToString() => $"Vector3d {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}, z = {z.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Vector3d create_vector(Point3d p1_0, Point3d p2_1) {
        double vx_2 = (p2_1.x - p1_0.x);
        double vy_3 = (p2_1.y - p1_0.y);
        double vz_4 = (p2_1.z - p1_0.z);
        return new Vector3d{x = vx_2, y = vy_3, z = vz_4};
    }

    public static Vector3d get_3d_vectors_cross(Vector3d ab_5, Vector3d ac_6) {
        double cx_7 = ((ab_5.y * ac_6.z) - (ab_5.z * ac_6.y));
        double cy_8 = ((ab_5.z * ac_6.x) - (ab_5.x * ac_6.z));
        double cz_9 = ((ab_5.x * ac_6.y) - (ab_5.y * ac_6.x));
        return new Vector3d{x = cx_7, y = cy_8, z = cz_9};
    }

    public static double pow10(long exp_10) {
        double result_11 = 1.0;
        long i_12 = 0;
        while ((i_12 < exp_10)) {
            result_11 = (result_11 * 10.0);
            i_12 = (i_12 + 1);
        };
        return result_11;
    }

    public static double round_float(double x_13, long digits_14) {
        double factor_15 = Program.pow10(digits_14);
        double v_16 = (x_13 * factor_15);
        if ((v_16 >= 0.0)) {
            v_16 = (v_16 + 0.5);
        } else {
            v_16 = (v_16 - 0.5);
        };
        long t_17 = Convert.ToInt64(v_16);
        return (Convert.ToDouble(t_17) / factor_15);
    }

    public static bool is_zero_vector(Vector3d v_18, long accuracy_19) {
        return (((Program.round_float(v_18.x, accuracy_19) == 0.0) && (Program.round_float(v_18.y, accuracy_19) == 0.0)) && (Program.round_float(v_18.z, accuracy_19) == 0.0));
    }

    public static bool are_collinear(Point3d a_20, Point3d b_21, Point3d c_22, long accuracy_23) {
        Vector3d ab_24 = Program.create_vector(a_20, b_21);
        Vector3d ac_25 = Program.create_vector(a_20, c_22);
        Vector3d cross_26 = Program.get_3d_vectors_cross(ab_24, ac_25);
        return Program.is_zero_vector(cross_26, accuracy_23);
    }

    public static void test_are_collinear() {
        Point3d p1_27 = new Point3d{x = 0.0, y = 0.0, z = 0.0};
        Point3d p2_28 = new Point3d{x = 1.0, y = 1.0, z = 1.0};
        Point3d p3_29 = new Point3d{x = 2.0, y = 2.0, z = 2.0};
        if ((!Program.are_collinear(p1_27, p2_28, p3_29, 10))) {
            throw new Exception("collinear test failed");
        };
        Point3d q3_30 = new Point3d{x = 1.0, y = 2.0, z = 3.0};
        if (Program.are_collinear(p1_27, p2_28, q3_30, 10)) {
            throw new Exception("non-collinear test failed");
        };
    }

    public static void main() {
        Program.test_are_collinear();
        Point3d a_31 = new Point3d{x = 4.802293498137402, y = 3.536233125455244, z = 0.0};
        Point3d b_32 = new Point3d{x = -2.186788107953106, y = -9.24561398001649, z = 7.141509524846482};
        Point3d c_33 = new Point3d{x = 1.530169574640268, y = -2.447927606600034, z = 3.343487096469054};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.are_collinear(a_31, b_32, c_33, 10))));
        Point3d d_34 = new Point3d{x = 2.399001826862445, y = -2.452009976680793, z = 4.464656666157666};
        Point3d e_35 = new Point3d{x = -3.682816335934376, y = 5.753788986533145, z = 9.490993909044244};
        Point3d f_36 = new Point3d{x = 1.962903518985307, y = 3.741415730125627, z = 7.0};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.are_collinear(d_34, e_35, f_36, 10))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
