// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long sock_merchant(long[] colors_0) {
        long[] arr_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < colors_0.Length)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append<long>(arr_1, colors_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        long n_3 = arr_1.Length;
        long a_4 = 0;
        while ((a_4 < n_3)) {
            long min_idx_5 = a_4;
            long b_6 = (a_4 + 1);
            while ((b_6 < n_3)) {
                if ((arr_1[(int)(b_6)] < arr_1[(int)(min_idx_5)])) {
                    min_idx_5 = b_6;
                }
                b_6 = (b_6 + 1);
            }
            long temp_7 = arr_1[(int)(a_4)];
            arr_1[a_4] = arr_1[(int)(min_idx_5)];
            arr_1[min_idx_5] = temp_7;
            a_4 = (a_4 + 1);
        };
        long pairs_8 = 0;
        i_2 = 0;
        while ((i_2 < n_3)) {
            long count_9 = 1;
            while ((((i_2 + 1) < n_3) && (arr_1[(int)(i_2)] == arr_1[(int)((i_2 + 1))]))) {
                count_9 = (count_9 + 1);
                i_2 = (i_2 + 1);
            }
            pairs_8 = (pairs_8 + (count_9 / 2));
            i_2 = (i_2 + 1);
        };
        return pairs_8;
    }

    public static void test_sock_merchant() {
        long[] example1_10 = new long[]{10, 20, 20, 10, 10, 30, 50, 10, 20};
        if ((Program.sock_merchant(example1_10) != 3)) {
            throw new Exception("example1 failed");
        };
        long[] example2_11 = new long[]{1, 1, 3, 3};
        if ((Program.sock_merchant(example2_11) != 2)) {
            throw new Exception("example2 failed");
        };
    }

    public static void main() {
        Program.test_sock_merchant();
        long[] example1_12 = new long[]{10, 20, 20, 10, 10, 30, 50, 10, 20};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.sock_merchant(example1_12))));
        long[] example2_13 = new long[]{1, 1, 3, 3};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.sock_merchant(example2_13))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
