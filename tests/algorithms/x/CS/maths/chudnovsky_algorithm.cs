// Generated by Mochi 0.10.66 (commit f6dfa6fffe) on 2025-08-16 14:41 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long n_19 = 50;
    public static double sqrtApprox(double x_0) {
        if ((x_0 <= 0.0)) {
            return 0.0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double factorial_float(long n_3) {
        double result_4 = 1.0;
        long i_5 = 2;
        while ((i_5 <= n_3)) {
            result_4 = (result_4 * Convert.ToDouble(i_5));
            i_5 = (i_5 + 1);
        };
        return result_4;
    }

    public static double pi(long n_6) {
        if ((n_6 < 1)) {
            throw new Exception("Undefined for non-natural numbers");
        };
        long iterations_7 = _floordiv((n_6 + 13), 14);
        double constant_term_8 = (426880.0 * Program.sqrtApprox(10005.0));
        double exponential_term_9 = 1.0;
        double linear_term_10 = 13591409.0;
        double partial_sum_11 = linear_term_10;
        long k_12 = 1;
        while ((k_12 < iterations_7)) {
            long k6_13 = (6 * k_12);
            long k3_14 = (3 * k_12);
            double fact6k_15 = Program.factorial_float(k6_13);
            double fact3k_16 = Program.factorial_float(k3_14);
            double factk_17 = Program.factorial_float(k_12);
            double multinomial_18 = (fact6k_15 / (((fact3k_16 * factk_17) * factk_17) * factk_17));
            linear_term_10 = (linear_term_10 + 545140134.0);
            exponential_term_9 = (exponential_term_9 * -2.62537412640768e17);
            partial_sum_11 = (partial_sum_11 + ((multinomial_18 * linear_term_10) / exponential_term_9));
            k_12 = (k_12 + 1);
        };
        return (constant_term_8 / partial_sum_11);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((("The first " + _fmtStr(n_19)) + " digits of pi is: ") + _fmtStr(Program.pi(n_19)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
