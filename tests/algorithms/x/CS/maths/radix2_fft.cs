// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_10 = 3.1415926535897931;
    static double[] A_63 = new double[]{0.0, 1.0, 0.0, 2.0};
    static double[] B_64 = new double[]{2.0, 3.0, 4.0, 0.0};
    static double[] product_65 = Program.multiply_poly(A_63, B_64);
    public static Complex c_add(Complex a_0, Complex b_1) {
        return new Complex{re = (a_0.re + b_1.re), im = (a_0.im + b_1.im)};
    }

    public static Complex c_sub(Complex a_2, Complex b_3) {
        return new Complex{re = (a_2.re - b_3.re), im = (a_2.im - b_3.im)};
    }

    public static Complex c_mul(Complex a_4, Complex b_5) {
        return new Complex{re = ((a_4.re * b_5.re) - (a_4.im * b_5.im)), im = ((a_4.re * b_5.im) + (a_4.im * b_5.re))};
    }

    public static Complex c_mul_scalar(Complex a_6, double s_7) {
        return new Complex{re = (a_6.re * s_7), im = (a_6.im * s_7)};
    }

    public static Complex c_div_scalar(Complex a_8, double s_9) {
        return new Complex{re = (a_8.re / s_9), im = (a_8.im / s_9)};
    }

    public static double sin_taylor(double x_11) {
        double term_12 = x_11;
        double sum_13 = x_11;
        long i_14 = 1;
        while ((i_14 < 10)) {
            double k1_15 = (2.0 * Convert.ToDouble(i_14));
            double k2_16 = (k1_15 + 1.0);
            term_12 = (((-term_12 * x_11) * x_11) / (k1_15 * k2_16));
            sum_13 = (sum_13 + term_12);
            i_14 = (i_14 + 1);
        };
        return sum_13;
    }

    public static double cos_taylor(double x_17) {
        double term_18 = 1.0;
        double sum_19 = 1.0;
        long i_20 = 1;
        while ((i_20 < 10)) {
            double k1_21 = ((2.0 * Convert.ToDouble(i_20)) - 1.0);
            double k2_22 = (2.0 * Convert.ToDouble(i_20));
            term_18 = (((-term_18 * x_17) * x_17) / (k1_21 * k2_22));
            sum_19 = (sum_19 + term_18);
            i_20 = (i_20 + 1);
        };
        return sum_19;
    }

    public static Complex exp_i(double theta_23) {
        return new Complex{re = Program.cos_taylor(theta_23), im = Program.sin_taylor(theta_23)};
    }

    public static Complex[] make_complex_list(long n_24, Complex value_25) {
        Complex[] arr_26 = new Complex[]{};
        long i_27 = 0;
        while ((i_27 < n_24)) {
            arr_26 = ((Func<Complex[]>)(() => { var _tmp = arr_26.Cast<Complex>().ToList(); _tmp.Add(value_25); return _tmp.ToArray(); }))();
            i_27 = (i_27 + 1);
        };
        return arr_26;
    }

    public static Complex[] fft(Complex[] a_28, bool invert_29) {
        long n_30 = a_28.Length;
        if ((n_30 == 1)) {
            return new Complex[]{_idx(a_28, 0)};
        };
        Complex[] a0_31 = new Complex[]{};
        Complex[] a1_32 = new Complex[]{};
        long i_33 = 0;
        while ((i_33 < _floordiv(n_30, 2))) {
            a0_31 = ((Func<Complex[]>)(() => { var _tmp = a0_31.Cast<Complex>().ToList(); _tmp.Add(_idx(a_28, (2 * i_33))); return _tmp.ToArray(); }))();
            a1_32 = ((Func<Complex[]>)(() => { var _tmp = a1_32.Cast<Complex>().ToList(); _tmp.Add(_idx(a_28, ((2 * i_33) + 1))); return _tmp.ToArray(); }))();
            i_33 = (i_33 + 1);
        };
        Complex[] y0_34 = Program.fft(a0_31, invert_29);
        Complex[] y1_35 = Program.fft(a1_32, invert_29);
        double angle_36 = (((2.0 * PI_10) / Convert.ToDouble(n_30)) * (invert_29 ? -1.0 : 1.0));
        Complex w_37 = new Complex{re = 1.0, im = 0.0};
        Complex wn_38 = Program.exp_i(angle_36);
        Complex[] y_39 = Program.make_complex_list(n_30, new Complex{re = 0.0, im = 0.0});
        i_33 = 0;
        while ((i_33 < _floordiv(n_30, 2))) {
            Complex t_40 = Program.c_mul(w_37, _idx(y1_35, i_33));
            Complex u_41 = _idx(y0_34, i_33);
            Complex even_42 = Program.c_add(u_41, t_40);
            Complex odd_43 = Program.c_sub(u_41, t_40);
            if (invert_29) {
                even_42 = Program.c_div_scalar(even_42, 2.0);
                odd_43 = Program.c_div_scalar(odd_43, 2.0);
            }
            y_39[(int)(i_33)] = even_42;
            y_39[(int)((i_33 + _floordiv(n_30, 2)))] = odd_43;
            w_37 = Program.c_mul(w_37, wn_38);
            i_33 = (i_33 + 1);
        };
        return y_39;
    }

    public static double floor(double x_44) {
        long i_45 = (long)(x_44);
        if ((Convert.ToDouble(i_45) > x_44)) {
            i_45 = (i_45 - 1);
        };
        return Convert.ToDouble(i_45);
    }

    public static double pow10(long n_46) {
        double p_47 = 1.0;
        long i_48 = 0;
        while ((i_48 < n_46)) {
            p_47 = (p_47 * 10.0);
            i_48 = (i_48 + 1);
        };
        return p_47;
    }

    public static double round_to(double x_49, long ndigits_50) {
        double m_51 = Program.pow10(ndigits_50);
        return (Program.floor(((x_49 * m_51) + 0.5)) / m_51);
    }

    public static string list_to_string(double[] l_52) {
        string s_53 = "[";
        long i_54 = 0;
        while ((i_54 < l_52.Length)) {
            s_53 = (s_53 + _fmtStr(_idx(l_52, i_54)));
            if (((i_54 + 1) < l_52.Length)) {
                s_53 = (s_53 + ", ");
            }
            i_54 = (i_54 + 1);
        };
        s_53 = (s_53 + "]");
        return s_53;
    }

    public static double[] multiply_poly(double[] a_55, double[] b_56) {
        long n_57 = 1;
        while ((n_57 < ((a_55.Length + b_56.Length) - 1))) {
            n_57 = (n_57 * 2);
        };
        Complex[] fa_58 = Program.make_complex_list(n_57, new Complex{re = 0.0, im = 0.0});
        Complex[] fb_59 = Program.make_complex_list(n_57, new Complex{re = 0.0, im = 0.0});
        long i_60 = 0;
        while ((i_60 < a_55.Length)) {
            fa_58[(int)(i_60)] = new Complex{re = _idx(a_55, i_60), im = 0.0};
            i_60 = (i_60 + 1);
        };
        i_60 = 0;
        while ((i_60 < b_56.Length)) {
            fb_59[(int)(i_60)] = new Complex{re = _idx(b_56, i_60), im = 0.0};
            i_60 = (i_60 + 1);
        };
        fa_58 = Program.fft(fa_58, false);
        fb_59 = Program.fft(fb_59, false);
        i_60 = 0;
        while ((i_60 < n_57)) {
            fa_58[(int)(i_60)] = Program.c_mul(_idx(fa_58, i_60), _idx(fb_59, i_60));
            i_60 = (i_60 + 1);
        };
        fa_58 = Program.fft(fa_58, true);
        double[] res_61 = new double[]{};
        i_60 = 0;
        while ((i_60 < ((a_55.Length + b_56.Length) - 1))) {
            Complex val_62 = _idx(fa_58, i_60);
            res_61 = ((Func<double[]>)(() => { var _tmp = res_61.Cast<double>().ToList(); _tmp.Add(Program.round_to(val_62.re, 8)); return _tmp.ToArray(); }))();
            i_60 = (i_60 + 1);
        };
        while (((res_61.Length > 0) && (_idx(res_61, (res_61.Length - 1)) == 0.0))) {
            res_61 = _slice<double>(res_61, 0, (res_61.Length - 1));
        };
        return res_61;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(product_65)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
