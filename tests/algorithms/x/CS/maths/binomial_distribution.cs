// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    public static double abs(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static long factorial(long n_1) {
        if ((n_1 < 0)) {
            throw new Exception("factorial is undefined for negative numbers");
        };
        long result_2 = 1;
        long i_3 = 2;
        while ((i_3 <= n_1)) {
            result_2 = (result_2 * i_3);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static double pow_float(double base_4, long exp_5) {
        double result_6 = 1.0;
        long i_7 = 0;
        while ((i_7 < exp_5)) {
            result_6 = (result_6 * base_4);
            i_7 = (i_7 + 1);
        };
        return result_6;
    }

    public static double binomial_distribution(long successes_8, long trials_9, double prob_10) {
        if ((successes_8 > trials_9)) {
            throw new Exception("successes must be lower or equal to trials");
        };
        if (((trials_9 < 0) || (successes_8 < 0))) {
            throw new Exception("the function is defined for non-negative integers");
        };
        if ((!((0.0 < prob_10) && (prob_10 < 1.0)))) {
            throw new Exception("prob has to be in range of 1 - 0");
        };
        double probability_11 = (Program.pow_float(prob_10, successes_8) * Program.pow_float((1.0 - prob_10), (trials_9 - successes_8)));
        double numerator_12 = Convert.ToDouble(Program.factorial(trials_9));
        double denominator_13 = Convert.ToDouble((Program.factorial(successes_8) * Program.factorial((trials_9 - successes_8))));
        double coefficient_14 = (numerator_12 / denominator_13);
        return (probability_11 * coefficient_14);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
