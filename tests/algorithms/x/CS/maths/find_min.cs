// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double find_min_iterative(double[] nums_0) {
        if ((nums_0.Length == 0)) {
            throw new Exception("find_min_iterative() arg is an empty sequence");
        };
        double min_num_1 = nums_0[(int)(0)];
        long i_2 = 0;
        while ((i_2 < nums_0.Length)) {
            double num_3 = nums_0[(int)(i_2)];
            if ((num_3 < min_num_1)) {
                min_num_1 = num_3;
            }
            i_2 = (i_2 + 1);
        };
        return min_num_1;
    }

    public static double find_min_recursive(double[] nums_4, long left_5, long right_6) {
        long n_7 = nums_4.Length;
        if ((n_7 == 0)) {
            throw new Exception("find_min_recursive() arg is an empty sequence");
        };
        if (((((left_5 >= n_7) || (left_5 < (0 - n_7))) || (right_6 >= n_7)) || (right_6 < (0 - n_7)))) {
            throw new Exception("list index out of range");
        };
        long l_8 = left_5;
        long r_9 = right_6;
        if ((l_8 < 0)) {
            l_8 = (n_7 + l_8);
        };
        if ((r_9 < 0)) {
            r_9 = (n_7 + r_9);
        };
        if ((l_8 == r_9)) {
            return nums_4[(int)(l_8)];
        };
        long mid_10 = ((l_8 + r_9) / 2);
        double left_min_11 = Program.find_min_recursive(nums_4, l_8, mid_10);
        double right_min_12 = Program.find_min_recursive(nums_4, (mid_10 + 1), r_9);
        if ((left_min_11 <= right_min_12)) {
            return left_min_11;
        };
        return right_min_12;
    }

    public static void test_find_min() {
        double[] a_13 = new double[]{3.0, 2.0, 1.0};
        if ((Program.find_min_iterative(a_13) != 1.0)) {
            throw new Exception("iterative test1 failed");
        };
        if ((Program.find_min_recursive(a_13, 0, (a_13.Length - 1)) != 1.0)) {
            throw new Exception("recursive test1 failed");
        };
        double[] b_14 = new double[]{-3.0, -2.0, -1.0};
        if ((Program.find_min_iterative(b_14) != -3.0)) {
            throw new Exception("iterative test2 failed");
        };
        if ((Program.find_min_recursive(b_14, 0, (b_14.Length - 1)) != -3.0)) {
            throw new Exception("recursive test2 failed");
        };
        double[] c_15 = new double[]{3.0, -3.0, 0.0};
        if ((Program.find_min_iterative(c_15) != -3.0)) {
            throw new Exception("iterative test3 failed");
        };
        if ((Program.find_min_recursive(c_15, 0, (c_15.Length - 1)) != -3.0)) {
            throw new Exception("recursive test3 failed");
        };
        double[] d_16 = new double[]{1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0};
        if ((Program.find_min_recursive(d_16, (0 - d_16.Length), (0 - 1)) != 1.0)) {
            throw new Exception("negative index test failed");
        };
    }

    public static void main() {
        Program.test_find_min();
        double[] sample_17 = new double[]{0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min_iterative(sample_17))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
