// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] slow_primes(long max_n_0) {
        long[] result_1 = new long[]{};
        long i_2 = 2;
        while ((i_2 <= max_n_0)) {
            long j_3 = 2;
            bool is_prime_4 = true;
            while ((j_3 < i_2)) {
                if ((_mod(i_2, j_3) == 0)) {
                    is_prime_4 = false;
                    break;
                }
                j_3 = (j_3 + 1);
            }
            if (is_prime_4) {
                result_1 = (Enumerable.ToArray(Enumerable.Append<long>(result_1, i_2)));
            }
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long[] primes(long max_n_5) {
        long[] result_6 = new long[]{};
        long i_7 = 2;
        while ((i_7 <= max_n_5)) {
            long j_8 = 2;
            bool is_prime_9 = true;
            while (((j_8 * j_8) <= i_7)) {
                if ((_mod(i_7, j_8) == 0)) {
                    is_prime_9 = false;
                    break;
                }
                j_8 = (j_8 + 1);
            }
            if (is_prime_9) {
                result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, i_7)));
            }
            i_7 = (i_7 + 1);
        };
        return result_6;
    }

    public static long[] fast_primes(long max_n_10) {
        long[] result_11 = new long[]{};
        if ((max_n_10 >= 2)) {
            result_11 = (Enumerable.ToArray(Enumerable.Append<long>(result_11, 2)));
        };
        long i_12 = 3;
        while ((i_12 <= max_n_10)) {
            long j_13 = 3;
            bool is_prime_14 = true;
            while (((j_13 * j_13) <= i_12)) {
                if ((_mod(i_12, j_13) == 0)) {
                    is_prime_14 = false;
                    break;
                }
                j_13 = (j_13 + 2);
            }
            if (is_prime_14) {
                result_11 = (Enumerable.ToArray(Enumerable.Append<long>(result_11, i_12)));
            }
            i_12 = (i_12 + 2);
        };
        return result_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.slow_primes(25))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.primes(25))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fast_primes(25))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
