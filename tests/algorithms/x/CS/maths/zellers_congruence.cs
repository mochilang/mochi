// Generated by Mochi 0.10.64 (commit 2e7890d333) on 2025-08-12 13:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long parse_decimal(string s_0) {
        long value_1 = 0;
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            string c_3 = s_0.Substring((int)(i_2), 1);
            if (((string.Compare(c_3, "0") < 0) || (string.Compare(c_3, "9") > 0))) {
                throw new Exception("invalid literal");
            }
            value_1 = ((value_1 * 10) + long.Parse(c_3));
            i_2 = (i_2 + 1);
        };
        return value_1;
    }

    public static string zeller_day(string date_input_4) {
        Dictionary<long, string> days_5 = new Dictionary<long, string>{{0, "Sunday"}, {1, "Monday"}, {2, "Tuesday"}, {3, "Wednesday"}, {4, "Thursday"}, {5, "Friday"}, {6, "Saturday"}};
        if ((date_input_4.Length != 10)) {
            throw new Exception("Must be 10 characters long");
        };
        long m_6 = Program.parse_decimal(_substr(date_input_4, 0, 2));
        if (((m_6 <= 0) || (m_6 >= 13))) {
            throw new Exception("Month must be between 1 - 12");
        };
        string sep1_7 = date_input_4.Substring((int)(2), 1);
        if (((sep1_7 != "-") && (sep1_7 != "/"))) {
            throw new Exception("Date separator must be '-' or '/'");
        };
        long d_8 = Program.parse_decimal(_substr(date_input_4, 3, 5));
        if (((d_8 <= 0) || (d_8 >= 32))) {
            throw new Exception("Date must be between 1 - 31");
        };
        string sep2_9 = date_input_4.Substring((int)(5), 1);
        if (((sep2_9 != "-") && (sep2_9 != "/"))) {
            throw new Exception("Date separator must be '-' or '/'");
        };
        long y_10 = Program.parse_decimal(_substr(date_input_4, 6, 10));
        if (((y_10 <= 45) || (y_10 >= 8500))) {
            throw new Exception("Year out of range. There has to be some sort of limit...right?");
        };
        long year_11 = y_10;
        long month_12 = m_6;
        if ((month_12 <= 2)) {
            year_11 = (year_11 - 1);
            month_12 = (month_12 + 12);
        };
        long c_13 = (year_11 / 100);
        long k_14 = _mod(year_11, 100);
        long t_15 = _atoi(((2.6 * Convert.ToDouble(month_12)) - 5.39));
        long u_16 = (c_13 / 4);
        long v_17 = (k_14 / 4);
        long x_18 = (d_8 + k_14);
        long z_19 = (((t_15 + u_16) + v_17) + x_18);
        long w_20 = (z_19 - (2 * c_13));
        long f_21 = _mod(w_20, 7);
        if ((f_21 < 0)) {
            f_21 = (f_21 + 7);
        };
        return (days_5.ContainsKey(f_21) ? days_5[f_21] : "");
    }

    public static string zeller(string date_input_22) {
        string day_23 = Program.zeller_day(date_input_22);
        return (((("Your date " + date_input_22) + ", is a ") + day_23) + "!");
    }

    public static void test_zeller() {
        string[] inputs_24 = new string[]{"01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"};
        string[] expected_25 = new string[]{"Sunday", "Monday", "Tuesday", "Thursday"};
        long i_26 = 0;
        while ((i_26 < inputs_24.Length)) {
            string res_27 = Program.zeller_day(_idx(inputs_24, i_26));
            if ((res_27 != _idx(expected_25, i_26))) {
                throw new Exception("zeller test failed");
            }
            i_26 = (i_26 + 1);
        };
    }

    public static void main() {
        Program.test_zeller();
        Console.WriteLine(Program._fmtTop(Program.zeller("01-31-2010")));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
