// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double floor(double x_0) {
        long i_1 = (long)(x_0);
        if ((Convert.ToDouble(i_1) > x_0)) {
            i_1 = (i_1 - 1);
        };
        return Convert.ToDouble(i_1);
    }

    public static double pow10(long n_2) {
        double p_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < n_2)) {
            p_3 = (p_3 * 10.0);
            i_4 = (i_4 + 1);
        };
        return p_3;
    }

    public static double round(double x_5, long n_6) {
        double m_7 = Program.pow10(n_6);
        return (Program.floor(((x_5 * m_7) + 0.5)) / m_7);
    }

    public static double[][] clone_matrix(double[][] mat_8) {
        double[][] new_mat_9 = new double[][]{};
        long i_10 = 0;
        while ((i_10 < mat_8.Length)) {
            double[] row_11 = new double[]{};
            long j_12 = 0;
            while ((j_12 < _idx(mat_8, i_10).Length)) {
                row_11 = ((Func<double[]>)(() => { var _tmp = row_11.Cast<double>().ToList(); _tmp.Add(_idx(_idx(mat_8, i_10), j_12)); return _tmp.ToArray(); }))();
                j_12 = (j_12 + 1);
            }
            new_mat_9 = ((Func<double[][]>)(() => { var _tmp = new_mat_9.Cast<double[]>().ToList(); _tmp.Add(row_11); return _tmp.ToArray(); }))();
            i_10 = (i_10 + 1);
        };
        return new_mat_9;
    }

    public static double[] solve_simultaneous(double[][] equations_13) {
        long n_14 = equations_13.Length;
        if ((n_14 == 0)) {
            throw new Exception("solve_simultaneous() requires n lists of length n+1");
        };
        long m_15 = (n_14 + 1);
        long i_16 = 0;
        while ((i_16 < n_14)) {
            if ((_idx(equations_13, i_16).Length != m_15)) {
                throw new Exception("solve_simultaneous() requires n lists of length n+1");
            }
            i_16 = (i_16 + 1);
        };
        double[][] a_17 = Program.clone_matrix(equations_13);
        long row_18 = 0;
        while ((row_18 < n_14)) {
            long pivot_19 = row_18;
            while (((pivot_19 < n_14) && (_idx(_idx(a_17, pivot_19), row_18) == 0.0))) {
                pivot_19 = (pivot_19 + 1);
            }
            if ((pivot_19 == n_14)) {
                throw new Exception("solve_simultaneous() requires at least 1 full equation");
            }
            if ((pivot_19 != row_18)) {
                double[] temp_20 = _idx(a_17, row_18);
                a_17[(int)(row_18)] = _idx(a_17, pivot_19);
                a_17[(int)(pivot_19)] = temp_20;
            }
            double pivot_val_21 = _idx(_idx(a_17, row_18), row_18);
            long col_22 = 0;
            while ((col_22 < m_15)) {
                _idx(a_17, row_18)[(int)(col_22)] = (_idx(_idx(a_17, row_18), col_22) / pivot_val_21);
                col_22 = (col_22 + 1);
            }
            long r_23 = 0;
            while ((r_23 < n_14)) {
                if ((r_23 != row_18)) {
                    double factor_24 = _idx(_idx(a_17, r_23), row_18);
                    long c_25 = 0;
                    while ((c_25 < m_15)) {
                        _idx(a_17, r_23)[(int)(c_25)] = (_idx(_idx(a_17, r_23), c_25) - (factor_24 * _idx(_idx(a_17, row_18), c_25)));
                        c_25 = (c_25 + 1);
                    }
                }
                r_23 = (r_23 + 1);
            }
            row_18 = (row_18 + 1);
        };
        double[] res_26 = new double[]{};
        long k_27 = 0;
        while ((k_27 < n_14)) {
            res_26 = ((Func<double[]>)(() => { var _tmp = res_26.Cast<double>().ToList(); _tmp.Add(Program.round(_idx(_idx(a_17, k_27), (m_15 - 1)), 5)); return _tmp.ToArray(); }))();
            k_27 = (k_27 + 1);
        };
        return res_26;
    }

    public static void test_solver() {
        double[][] a_28 = new double[][]{new double[]{1.0, 2.0, 3.0}, new double[]{4.0, 5.0, 6.0}};
        double[] r1_29 = Program.solve_simultaneous(a_28);
        if ((!(((r1_29.Length == 2) && (_idx(r1_29, 0) == (0.0 - 1.0))) && (_idx(r1_29, 1) == 2.0)))) {
            throw new Exception("test1 failed");
        };
        double[][] b_30 = new double[][]{new double[]{0.0, (0.0 - 3.0), 1.0, 7.0}, new double[]{3.0, 2.0, (0.0 - 1.0), 11.0}, new double[]{5.0, 1.0, (0.0 - 2.0), 12.0}};
        double[] r2_31 = Program.solve_simultaneous(b_30);
        if ((!((((r2_31.Length == 3) && (_idx(r2_31, 0) == 6.4000000000000004)) && (_idx(r2_31, 1) == 1.2)) && (_idx(r2_31, 2) == 10.6)))) {
            throw new Exception("test2 failed");
        };
    }

    public static void main() {
        Program.test_solver();
        double[][] eq_32 = new double[][]{new double[]{2.0, 1.0, 1.0, 1.0, 1.0, 4.0}, new double[]{1.0, 2.0, 1.0, 1.0, 1.0, 5.0}, new double[]{1.0, 1.0, 2.0, 1.0, 1.0, 6.0}, new double[]{1.0, 1.0, 1.0, 2.0, 1.0, 7.0}, new double[]{1.0, 1.0, 1.0, 1.0, 2.0, 8.0}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.solve_simultaneous(eq_32))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.solve_simultaneous(new double[][]{new double[]{4.0, 2.0}}))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
