// Generated by Mochi 0.10.67 (commit c7612b9c83) on 2025-08-16 19:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string digits_31 = "";
    static long i_32 = 1;
    public static long mod_pow(long base_0, long exponent_1, long modulus_2) {
        long result_3 = 1;
        long b_4 = _mod(base_0, modulus_2);
        long e_5 = exponent_1;
        while ((e_5 > 0)) {
            if ((_mod(e_5, 2) == 1)) {
                result_3 = _mod((result_3 * b_4), modulus_2);
            }
            b_4 = _mod((b_4 * b_4), modulus_2);
            e_5 = _floordiv(e_5, 2);
        };
        return result_3;
    }

    public static double pow_float(double base_6, long exponent_7) {
        long exp_8 = exponent_7;
        double result_9 = 1.0;
        if ((exp_8 < 0)) {
            exp_8 = -exp_8;
        };
        long i_10 = 0;
        while ((i_10 < exp_8)) {
            result_9 = (result_9 * base_6);
            i_10 = (i_10 + 1);
        };
        if ((exponent_7 < 0)) {
            result_9 = (1.0 / result_9);
        };
        return result_9;
    }

    public static string hex_digit(long n_11) {
        if ((n_11 < 10)) {
            return _fmtStr(n_11);
        };
        string[] letters_12 = new string[]{"a", "b", "c", "d", "e", "f"};
        return _idx(letters_12, (n_11 - 10));
    }

    public static double floor_float(double x_13) {
        long i_14 = (long)(x_13);
        if ((Convert.ToDouble(i_14) > x_13)) {
            i_14 = (i_14 - 1);
        };
        return Convert.ToDouble(i_14);
    }

    public static double subsum(long digit_pos_to_extract_15, long denominator_addend_16, long precision_17) {
        double total_18 = 0.0;
        long sum_index_19 = 0;
        while ((sum_index_19 < (digit_pos_to_extract_15 + precision_17))) {
            long denominator_20 = ((8 * sum_index_19) + denominator_addend_16);
            if ((sum_index_19 < digit_pos_to_extract_15)) {
                long exponent_21 = ((digit_pos_to_extract_15 - 1) - sum_index_19);
                long exponential_term_22 = Program.mod_pow(16, exponent_21, denominator_20);
                total_18 = (total_18 + (Convert.ToDouble(exponential_term_22) / Convert.ToDouble(denominator_20)));
            } else {
                long exponent_23 = ((digit_pos_to_extract_15 - 1) - sum_index_19);
                double exponential_term_24 = Program.pow_float(16.0, exponent_23);
                total_18 = (total_18 + (exponential_term_24 / Convert.ToDouble(denominator_20)));
            }
            sum_index_19 = (sum_index_19 + 1);
        };
        return total_18;
    }

    public static string bailey_borwein_plouffe(long digit_position_25, long precision_26) {
        if ((digit_position_25 <= 0)) {
            throw new Exception("Digit position must be a positive integer");
        };
        if ((precision_26 < 0)) {
            throw new Exception("Precision must be a nonnegative integer");
        };
        double sum_result_27 = ((((4.0 * Program.subsum(digit_position_25, 1, precision_26)) - (2.0 * Program.subsum(digit_position_25, 4, precision_26))) - (1.0 * Program.subsum(digit_position_25, 5, precision_26))) - (1.0 * Program.subsum(digit_position_25, 6, precision_26)));
        double fraction_28 = (sum_result_27 - Program.floor_float(sum_result_27));
        long digit_29 = (long)((fraction_28 * 16.0));
        string hd_30 = Program.hex_digit(digit_29);
        return hd_30;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_32 <= 10)) {
                digits_31 = (digits_31 + Program.bailey_borwein_plouffe(i_32, 1000));
                i_32 = (i_32 + 1);
            }
            Console.WriteLine(Program._fmtTop(digits_31));
            Console.WriteLine(Program._fmtTop(Program.bailey_borwein_plouffe(5, 10000)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
