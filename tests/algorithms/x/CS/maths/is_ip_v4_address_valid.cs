// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string[] split_by_dot(string s_0) {
        string[] res_1 = new string[]{};
        string current_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            string c_4 = s_0.Substring((int)(i_3), 1);
            if ((c_4 == ".")) {
                res_1 = ((Func<string[]>)(() => { var _tmp = res_1.ToList(); _tmp.Add(current_2); return _tmp.ToArray(); }))();
                current_2 = "";
            } else {
                current_2 = (current_2 + c_4);
            }
            i_3 = (i_3 + 1);
        };
        res_1 = ((Func<string[]>)(() => { var _tmp = res_1.ToList(); _tmp.Add(current_2); return _tmp.ToArray(); }))();
        return res_1;
    }

    public static bool is_digit_str(string s_5) {
        if ((s_5.Length == 0)) {
            return false;
        };
        long i_6 = 0;
        while ((i_6 < s_5.Length)) {
            string c_7 = s_5.Substring((int)(i_6), 1);
            if (((string.Compare(c_7, "0") < 0) || (string.Compare(c_7, "9") > 0))) {
                return false;
            }
            i_6 = (i_6 + 1);
        };
        return true;
    }

    public static long parse_decimal(string s_8) {
        long value_9 = 0;
        long i_10 = 0;
        while ((i_10 < s_8.Length)) {
            string c_11 = s_8.Substring((int)(i_10), 1);
            value_9 = ((value_9 * 10) + long.Parse(c_11));
            i_10 = (i_10 + 1);
        };
        return value_9;
    }

    public static bool is_ip_v4_address_valid(string ip_12) {
        string[] octets_13 = Program.split_by_dot(ip_12);
        if ((octets_13.Length != 4)) {
            return false;
        };
        long i_14 = 0;
        while ((i_14 < 4)) {
            string oct_15 = _idx(octets_13, i_14);
            if ((!Program.is_digit_str(oct_15))) {
                return false;
            }
            long number_16 = Program.parse_decimal(oct_15);
            if ((_fmtStr(number_16).Length != oct_15.Length)) {
                return false;
            }
            if (((number_16 < 0) || (number_16 > 255))) {
                return false;
            }
            i_14 = (i_14 + 1);
        };
        return true;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("192.168.0.23"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("192.256.15.8"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("172.100.0.8"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("255.256.0.256"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.33333333.4"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.-3.4"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.3"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.3.4.5"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.A.4"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("0.0.0.0"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.3."))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_ip_v4_address_valid("1.2.3.05"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
