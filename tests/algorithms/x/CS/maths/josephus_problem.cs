// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long r_13 = Program.josephus_recursive(7, 3);
    public static long josephus_recursive(long num_people_0, long step_size_1) {
        if (((num_people_0 <= 0) || (step_size_1 <= 0))) {
            throw new Exception("num_people or step_size is not a positive integer.");
        };
        if ((num_people_0 == 1)) {
            return 0;
        };
        return _mod((Program.josephus_recursive((num_people_0 - 1), step_size_1) + step_size_1), num_people_0);
    }

    public static long find_winner(long num_people_2, long step_size_3) {
        return (Program.josephus_recursive(num_people_2, step_size_3) + 1);
    }

    public static long[] remove_at(long[] xs_4, long idx_5) {
        long[] res_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < xs_4.Length)) {
            if ((i_7 != idx_5)) {
                res_6 = ((Func<long[]>)(() => { var _tmp = res_6.ToList(); _tmp.Add(_idx(xs_4, i_7)); return _tmp.ToArray(); }))();
            }
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static long josephus_iterative(long num_people_8, long step_size_9) {
        if (((num_people_8 <= 0) || (step_size_9 <= 0))) {
            throw new Exception("num_people or step_size is not a positive integer.");
        };
        long[] circle_10 = new long[]{};
        long i_11 = 1;
        while ((i_11 <= num_people_8)) {
            circle_10 = ((Func<long[]>)(() => { var _tmp = circle_10.ToList(); _tmp.Add(i_11); return _tmp.ToArray(); }))();
            i_11 = (i_11 + 1);
        };
        long current_12 = 0;
        while ((circle_10.Length > 1)) {
            current_12 = _mod(((current_12 + step_size_9) - 1), circle_10.Length);
            circle_10 = Program.remove_at(circle_10, current_12);
        };
        return _idx(circle_10, 0);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(r_13)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_winner(7, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.josephus_iterative(7, 3))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
