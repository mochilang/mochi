// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    public static double floor(double x_1) {
        long i_2 = Convert.ToInt64(x_1);
        if ((Convert.ToDouble(i_2) > x_1)) {
            i_2 = (i_2 - 1);
        };
        return Convert.ToDouble(i_2);
    }

    public static double pow(double x_3, long n_4) {
        double result_5 = 1.0;
        long i_6 = 0;
        while ((i_6 < n_4)) {
            result_5 = (result_5 * x_3);
            i_6 = (i_6 + 1);
        };
        return result_5;
    }

    public static double factorial(long n_7) {
        double result_8 = 1.0;
        long i_9 = 2;
        while ((i_9 <= n_7)) {
            result_8 = (result_8 * Convert.ToDouble(i_9));
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static double maclaurin_sin(double theta_10, long accuracy_11) {
        double t_12 = theta_10;
        double div_13 = Program.floor((t_12 / (2.0 * PI_0)));
        t_12 = (t_12 - ((2.0 * div_13) * PI_0));
        double sum_14 = 0.0;
        long r_15 = 0;
        while ((r_15 < accuracy_11)) {
            long power_16 = ((2 * r_15) + 1);
            double sign_17 = ((_mod(r_15, 2) == 0) ? 1.0 : -1.0);
            sum_14 = (sum_14 + ((sign_17 * Program.pow(t_12, power_16)) / Program.factorial(power_16)));
            r_15 = (r_15 + 1);
        };
        return sum_14;
    }

    public static double maclaurin_cos(double theta_18, long accuracy_19) {
        double t_20 = theta_18;
        double div_21 = Program.floor((t_20 / (2.0 * PI_0)));
        t_20 = (t_20 - ((2.0 * div_21) * PI_0));
        double sum_22 = 0.0;
        long r_23 = 0;
        while ((r_23 < accuracy_19)) {
            long power_24 = (2 * r_23);
            double sign_25 = ((_mod(r_23, 2) == 0) ? 1.0 : -1.0);
            sum_22 = (sum_22 + ((sign_25 * Program.pow(t_20, power_24)) / Program.factorial(power_24)));
            r_23 = (r_23 + 1);
        };
        return sum_22;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_sin(10.0, 30))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_sin(-10.0, 30))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_sin(10.0, 15))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_sin(-10.0, 15))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_cos(5.0, 30))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_cos(-5.0, 30))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_cos(10.0, 15))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.maclaurin_cos(-10.0, 15))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
