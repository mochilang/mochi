// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class EuclidResult {
    public long x;
    public long y;
    public override string ToString() => $"EuclidResult {{x = {x}, y = {y}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static EuclidResult e1_25 = Program.extended_euclid(10, 6);
    public static EuclidResult extended_euclid(long a_0, long b_1) {
        if ((b_1 == 0)) {
            return new EuclidResult{x = 1, y = 0};
        };
        EuclidResult res_2 = Program.extended_euclid(b_1, _mod(a_0, b_1));
        long k_3 = (a_0 / b_1);
        return new EuclidResult{x = res_2.y, y = (res_2.x - (k_3 * res_2.y))};
    }

    public static long chinese_remainder_theorem(long n1_4, long r1_5, long n2_6, long r2_7) {
        EuclidResult res_8 = Program.extended_euclid(n1_4, n2_6);
        long x_9 = res_8.x;
        long y_10 = res_8.y;
        long m_11 = (n1_4 * n2_6);
        long n_12 = (((r2_7 * x_9) * n1_4) + ((r1_5 * y_10) * n2_6));
        return _mod((_mod(n_12, m_11) + m_11), m_11);
    }

    public static long invert_modulo(long a_13, long n_14) {
        EuclidResult res_15 = Program.extended_euclid(a_13, n_14);
        long b_16 = res_15.x;
        if ((b_16 < 0)) {
            b_16 = _mod((_mod(b_16, n_14) + n_14), n_14);
        };
        return b_16;
    }

    public static long chinese_remainder_theorem2(long n1_17, long r1_18, long n2_19, long r2_20) {
        long x_21 = Program.invert_modulo(n1_17, n2_19);
        long y_22 = Program.invert_modulo(n2_19, n1_17);
        long m_23 = (n1_17 * n2_19);
        long n_24 = (((r2_20 * x_21) * n1_17) + ((r1_18 * y_22) * n2_19));
        return _mod((_mod(n_24, m_23) + m_23), m_23);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((_fmtStr(e1_25.x) + ",") + _fmtStr(e1_25.y))));
            EuclidResult e2_26 = Program.extended_euclid(7, 5);
            Console.WriteLine(Program._fmtTop(((_fmtStr(e2_26.x) + ",") + _fmtStr(e2_26.y))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.chinese_remainder_theorem(5, 1, 7, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.chinese_remainder_theorem(6, 1, 4, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.invert_modulo(2, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.invert_modulo(8, 7))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.chinese_remainder_theorem2(5, 1, 7, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.chinese_remainder_theorem2(6, 1, 4, 3))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
