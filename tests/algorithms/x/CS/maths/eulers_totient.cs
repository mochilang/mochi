// Generated by Mochi 0.10.66 (commit 8fdd1fe3d6) on 2025-08-15 10:15 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] totient(long n_0) {
        bool[] is_prime_1 = new bool[]{};
        long[] totients_2 = new long[]{};
        long[] primes_3 = new long[]{};
        long i_4 = 0;
        while ((i_4 <= n_0)) {
            is_prime_1 = ((Func<bool[]>)(() => { var _tmp = is_prime_1.ToList(); _tmp.Add(true); return _tmp.ToArray(); }))();
            totients_2 = ((Func<long[]>)(() => { var _tmp = totients_2.ToList(); _tmp.Add((i_4 - 1)); return _tmp.ToArray(); }))();
            i_4 = (i_4 + 1);
        };
        i_4 = 2;
        while ((i_4 <= n_0)) {
            if (_idx(is_prime_1, i_4)) {
                primes_3 = ((Func<long[]>)(() => { var _tmp = primes_3.ToList(); _tmp.Add(i_4); return _tmp.ToArray(); }))();
            }
            long j_5 = 0;
            while ((j_5 < primes_3.Length)) {
                long p_6 = _idx(primes_3, j_5);
                if (((i_4 * p_6) >= n_0)) {
                    break;
                }
                is_prime_1[(int)((i_4 * p_6))] = false;
                if ((_mod(i_4, p_6) == 0)) {
                    totients_2[(int)((i_4 * p_6))] = (_idx(totients_2, i_4) * p_6);
                    break;
                }
                totients_2[(int)((i_4 * p_6))] = (_idx(totients_2, i_4) * (p_6 - 1));
                j_5 = (j_5 + 1);
            }
            i_4 = (i_4 + 1);
        };
        return totients_2;
    }

    public static void test_totient() {
        long[] expected_7 = new long[]{-1, 0, 1, 2, 2, 4, 2, 6, 4, 6, 9};
        long[] res_8 = Program.totient(10);
        long idx_9 = 0;
        while ((idx_9 < expected_7.Length)) {
            if ((_idx(res_8, idx_9) != _idx(expected_7, idx_9))) {
                throw new Exception(("totient mismatch at " + _fmtStr(idx_9)));
            }
            idx_9 = (idx_9 + 1);
        };
    }

    public static void main() {
        Program.test_totient();
        long n_10 = 10;
        long[] res_11 = Program.totient(n_10);
        long i_12 = 1;
        while ((i_12 < n_10)) {
            Console.WriteLine(Program._fmtTop((((_fmtStr(i_12) + " has ") + _fmtStr(_idx(res_11, i_12))) + " relative primes.")));
            i_12 = (i_12 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
