// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static long rand_seed_1 = 123456789;
    public static double rand_float() {
        rand_seed_1 = _mod(((1103515245 * rand_seed_1) + 12345), 2147483648L);
        return (Convert.ToDouble(rand_seed_1) / 2.147483648e+09);
    }

    public static double rand_range(double min_val_2, double max_val_3) {
        return ((Program.rand_float() * (max_val_3 - min_val_2)) + min_val_2);
    }

    public static double abs_float(double x_4) {
        if ((x_4 < 0.0)) {
            return -x_4;
        };
        return x_4;
    }

    public static double sqrtApprox(double x_5) {
        if ((x_5 == 0.0)) {
            return 0.0;
        };
        double guess_6 = (x_5 / 2.0);
        long i_7 = 0;
        while ((i_7 < 20)) {
            guess_6 = ((guess_6 + (x_5 / guess_6)) / 2.0);
            i_7 = (i_7 + 1);
        };
        return guess_6;
    }

    public static void pi_estimator(long iterations_8) {
        double inside_9 = 0.0;
        long i_10 = 0;
        while ((i_10 < iterations_8)) {
            double x_11 = Program.rand_range(-1.0, 1.0);
            double y_12 = Program.rand_range(-1.0, 1.0);
            if ((((x_11 * x_11) + (y_12 * y_12)) <= 1.0)) {
                inside_9 = (inside_9 + 1.0);
            }
            i_10 = (i_10 + 1);
        };
        double proportion_13 = (inside_9 / Convert.ToDouble(iterations_8));
        double pi_estimate_14 = (proportion_13 * 4.0);
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("The estimated value of pi is"), Program._fmtTop(pi_estimate_14)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("The numpy value of pi is"), Program._fmtTop(PI_0)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("The total error is"), Program._fmtTop(Program.abs_float((PI_0 - pi_estimate_14)))}));
    }

    public static double area_under_curve_estimator(long iterations_15, Func<double, double> f_16, double min_value_17, double max_value_18) {
        double sum_19 = 0.0;
        long i_20 = 0;
        while ((i_20 < iterations_15)) {
            double x_21 = Program.rand_range(min_value_17, max_value_18);
            sum_19 = (((dynamic)(sum_19)) + ((dynamic)(f_16(x_21))));
            i_20 = (i_20 + 1);
        };
        double expected_22 = (sum_19 / Convert.ToDouble(iterations_15));
        return (expected_22 * (max_value_18 - min_value_17));
    }

    public static void area_under_line_estimator_check(long iterations_23, double min_value_24, double max_value_25) {
        Func<double, double> identity_function = null;
        identity_function = (double x_26) => {return x_26;};
        double estimated_value_27 = Program.area_under_curve_estimator(iterations_23, identity_function, min_value_24, max_value_25);
        double expected_value_28 = (((max_value_25 * max_value_25) - (min_value_24 * min_value_24)) / 2.0);
        Console.WriteLine(Program._fmtTop("******************"));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Estimating area under y=x where x varies from"), Program._fmtTop(min_value_24)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Estimated value is"), Program._fmtTop(estimated_value_27)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Expected value is"), Program._fmtTop(expected_value_28)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Total error is"), Program._fmtTop(Program.abs_float((estimated_value_27 - expected_value_28)))}));
        Console.WriteLine(Program._fmtTop("******************"));
    }

    public static void pi_estimator_using_area_under_curve(long iterations_29) {
        Func<double, double> semi_circle = null;
        semi_circle = (double x_30) => {double y_31 = (4.0 - (x_30 * x_30)); double s_32 = Program.sqrtApprox(y_31); return s_32;};
        double estimated_value_33 = Program.area_under_curve_estimator(iterations_29, semi_circle, 0.0, 2.0);
        Console.WriteLine(Program._fmtTop("******************"));
        Console.WriteLine(Program._fmtTop("Estimating pi using area_under_curve_estimator"));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Estimated value is"), Program._fmtTop(estimated_value_33)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Expected value is"), Program._fmtTop(PI_0)}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Total error is"), Program._fmtTop(Program.abs_float((estimated_value_33 - PI_0)))}));
        Console.WriteLine(Program._fmtTop("******************"));
    }

    public static void main() {
        Program.pi_estimator(1000);
        Program.area_under_line_estimator_check(1000, 0.0, 1.0);
        Program.pi_estimator_using_area_under_curve(1000);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
