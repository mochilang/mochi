// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool is_harmonic_series(double[] series_0) {
        if ((series_0.Length == 0)) {
            throw new Exception("Input list must be a non empty list");
        };
        if ((series_0.Length == 1)) {
            if ((_idx(series_0, 0) == 0.0)) {
                throw new Exception("Input series cannot have 0 as an element");
            }
            return true;
        };
        double[] rec_series_1 = new double[]{};
        long i_2 = 0;
        while ((i_2 < series_0.Length)) {
            double val_3 = _idx(series_0, i_2);
            if ((val_3 == 0.0)) {
                throw new Exception("Input series cannot have 0 as an element");
            }
            rec_series_1 = ((Func<double[]>)(() => { var _tmp = rec_series_1.Cast<double>().ToList(); _tmp.Add((1.0 / val_3)); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        double common_diff_4 = (_idx(rec_series_1, 1) - _idx(rec_series_1, 0));
        long idx_5 = 2;
        while ((idx_5 < rec_series_1.Length)) {
            if (((_idx(rec_series_1, idx_5) - _idx(rec_series_1, (idx_5 - 1))) != common_diff_4)) {
                return false;
            }
            idx_5 = (idx_5 + 1);
        };
        return true;
    }

    public static double harmonic_mean(double[] series_6) {
        if ((series_6.Length == 0)) {
            throw new Exception("Input list must be a non empty list");
        };
        double total_7 = 0.0;
        long i_8 = 0;
        while ((i_8 < series_6.Length)) {
            total_7 = (total_7 + (1.0 / _idx(series_6, i_8)));
            i_8 = (i_8 + 1);
        };
        return (Convert.ToDouble(series_6.Length) / total_7);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.is_harmonic_series(new double[]{1.0, (2.0 / 3.0), (1.0 / 2.0), (2.0 / 5.0), (1.0 / 3.0)})));
            Console.WriteLine(Program._fmtTop(Program.is_harmonic_series(new double[]{1.0, (2.0 / 3.0), (2.0 / 5.0), (1.0 / 3.0)})));
            Console.WriteLine(Program._fmtTop(Program.harmonic_mean(new double[]{1.0, 4.0, 4.0})));
            Console.WriteLine(Program._fmtTop(Program.harmonic_mean(new double[]{3.0, 6.0, 9.0, 12.0})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
