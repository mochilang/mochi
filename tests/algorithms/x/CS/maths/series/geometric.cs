// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_geometric_series(double[] series_0) {
        if ((series_0.Length == 0)) {
            throw new Exception("Input list must be a non empty list");
        };
        if ((series_0.Length == 1)) {
            return true;
        };
        if ((series_0[(int)(0)] == 0.0)) {
            return false;
        };
        double ratio_1 = (series_0[(int)(1)] / series_0[(int)(0)]);
        long i_2 = 0;
        while ((i_2 < (series_0.Length - 1))) {
            if ((series_0[(int)(i_2)] == 0.0)) {
                return false;
            }
            if (((series_0[(int)((i_2 + 1))] / series_0[(int)(i_2)]) != ratio_1)) {
                return false;
            }
            i_2 = (i_2 + 1);
        };
        return true;
    }

    public static double geometric_mean(double[] series_3) {
        if ((series_3.Length == 0)) {
            throw new Exception("Input list must be a non empty list");
        };
        double product_4 = 1.0;
        long i_5 = 0;
        while ((i_5 < series_3.Length)) {
            product_4 = (product_4 * series_3[(int)(i_5)]);
            i_5 = (i_5 + 1);
        };
        long n_6 = series_3.Length;
        return Program.nth_root(product_4, n_6);
    }

    public static double pow_float(double base_7, long exp_8) {
        double result_9 = 1.0;
        long i_10 = 0;
        while ((i_10 < exp_8)) {
            result_9 = (result_9 * base_7);
            i_10 = (i_10 + 1);
        };
        return result_9;
    }

    public static double nth_root(double value_11, long n_12) {
        if ((value_11 == 0.0)) {
            return 0.0;
        };
        double low_13 = 0.0;
        double high_14 = value_11;
        if ((value_11 < 1.0)) {
            high_14 = 1.0;
        };
        double mid_15 = ((low_13 + high_14) / 2.0);
        long i_16 = 0;
        while ((i_16 < 40)) {
            double mp_17 = Program.pow_float(mid_15, n_12);
            if ((mp_17 > value_11)) {
                high_14 = mid_15;
            } else {
                low_13 = mid_15;
            }
            mid_15 = ((low_13 + high_14) / 2.0);
            i_16 = (i_16 + 1);
        };
        return mid_15;
    }

    public static void test_geometric() {
        double[] a_18 = new double[]{2.0, 4.0, 8.0};
        if ((!Program.is_geometric_series(a_18))) {
            throw new Exception("expected geometric series");
        };
        double[] b_19 = new double[]{1.0, 2.0, 3.0};
        if (Program.is_geometric_series(b_19)) {
            throw new Exception("expected non geometric series");
        };
    }

    public static void main() {
        Program.test_geometric();
        Console.WriteLine(Program._fmtTop(Program.geometric_mean(new double[]{2.0, 4.0, 8.0})));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
