// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long ugly_numbers(long n_0) {
        if ((n_0 <= 0)) {
            return 1;
        };
        long[] ugly_nums_1 = new long[]{};
        ugly_nums_1 = (Enumerable.ToArray(Enumerable.Append<long>(ugly_nums_1, 1)));
        long i2_2 = 0;
        long i3_3 = 0;
        long i5_4 = 0;
        long next_2_5 = 2;
        long next_3_6 = 3;
        long next_5_7 = 5;
        long count_8 = 1;
        while ((count_8 < n_0)) {
            long next_num_9 = ((next_2_5 < next_3_6) ? ((next_2_5 < next_5_7) ? next_2_5 : next_5_7) : ((next_3_6 < next_5_7) ? next_3_6 : next_5_7));
            ugly_nums_1 = (Enumerable.ToArray(Enumerable.Append<long>(ugly_nums_1, next_num_9)));
            if ((next_num_9 == next_2_5)) {
                i2_2 = (i2_2 + 1);
                next_2_5 = (ugly_nums_1[(int)(i2_2)] * 2);
            }
            if ((next_num_9 == next_3_6)) {
                i3_3 = (i3_3 + 1);
                next_3_6 = (ugly_nums_1[(int)(i3_3)] * 3);
            }
            if ((next_num_9 == next_5_7)) {
                i5_4 = (i5_4 + 1);
                next_5_7 = (ugly_nums_1[(int)(i5_4)] * 5);
            }
            count_8 = (count_8 + 1);
        };
        return ugly_nums_1[(int)((ugly_nums_1.Length - 1))];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.ugly_numbers(100))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.ugly_numbers(0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.ugly_numbers(20))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.ugly_numbers(-5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.ugly_numbers(200))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
