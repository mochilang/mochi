// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long binomial_coefficient(long total_elements_0, long elements_to_choose_1) {
        if (((elements_to_choose_1 == 0) || (elements_to_choose_1 == total_elements_0))) {
            return 1;
        };
        long k_2 = elements_to_choose_1;
        if ((k_2 > (total_elements_0 - k_2))) {
            k_2 = (total_elements_0 - k_2);
        };
        long coefficient_3 = 1;
        long i_4 = 0;
        while ((i_4 < k_2)) {
            coefficient_3 = (coefficient_3 * (total_elements_0 - i_4));
            coefficient_3 = (coefficient_3 / (i_4 + 1));
            i_4 = (i_4 + 1);
        };
        return coefficient_3;
    }

    public static long[] bell_numbers(long max_set_length_5) {
        if ((max_set_length_5 < 0)) {
            throw new Exception("max_set_length must be non-negative");
        };
        long[] bell_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 <= max_set_length_5)) {
            bell_6 = (Enumerable.ToArray(Enumerable.Append<long>(bell_6, 0)));
            i_7 = (i_7 + 1);
        };
        bell_6[0] = 1;
        i_7 = 1;
        while ((i_7 <= max_set_length_5)) {
            long j_8 = 0;
            while ((j_8 < i_7)) {
                bell_6[i_7] = (bell_6[(int)(i_7)] + (Program.binomial_coefficient((i_7 - 1), j_8) * bell_6[(int)(j_8)]));
                j_8 = (j_8 + 1);
            }
            i_7 = (i_7 + 1);
        };
        return bell_6;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bell_numbers(5))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
