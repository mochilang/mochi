// Generated by Mochi 0.10.63 on 2025-08-09 23:14 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] bubble_sort(long[] xs_0) {
        long[] arr_1 = xs_0;
        long n_2 = arr_1.Length;
        long i_3 = 0;
        while ((i_3 < n_2)) {
            long j_4 = 0;
            while ((j_4 < ((n_2 - i_3) - 1))) {
                if ((arr_1[(int)(j_4 < 0 ? arr_1.Length + (j_4) : j_4)] > arr_1[(int)((j_4 + 1) < 0 ? arr_1.Length + ((j_4 + 1)) : (j_4 + 1))])) {
                    long tmp_5 = arr_1[(int)(j_4 < 0 ? arr_1.Length + (j_4) : j_4)];
                    arr_1[(int)(j_4)] = arr_1[(int)((j_4 + 1) < 0 ? arr_1.Length + ((j_4 + 1)) : (j_4 + 1))];
                    arr_1[(int)((j_4 + 1))] = tmp_5;
                }
                j_4 = (j_4 + 1);
            }
            i_3 = (i_3 + 1);
        };
        return arr_1;
    }

    public static long[] factors(long num_6) {
        long[] values_7 = new long[]{1};
        long i_8 = 2;
        while (((i_8 * i_8) <= num_6)) {
            if ((_mod(num_6, i_8) == 0)) {
                values_7 = (Enumerable.ToArray(Enumerable.Append<long>(values_7, i_8)));
                long d_9 = (num_6 / i_8);
                if ((d_9 != i_8)) {
                    values_7 = (Enumerable.ToArray(Enumerable.Append<long>(values_7, d_9)));
                }
            }
            i_8 = (i_8 + 1);
        };
        return Program.bubble_sort(values_7);
    }

    public static long sum_list(long[] xs_10) {
        long total_11 = 0;
        long i_12 = 0;
        while ((i_12 < xs_10.Length)) {
            total_11 = (total_11 + xs_10[(int)(i_12 < 0 ? xs_10.Length + (i_12) : i_12)]);
            i_12 = (i_12 + 1);
        };
        return total_11;
    }

    public static bool abundant(long n_13) {
        return (Program.sum_list(Program.factors(n_13)) > n_13);
    }

    public static bool semi_perfect(long number_14) {
        if ((number_14 <= 0)) {
            return true;
        };
        long[] values_15 = Program.factors(number_14);
        bool[] possible_16 = new bool[]{};
        long j_17 = 0;
        while ((j_17 <= number_14)) {
            possible_16 = (Enumerable.ToArray(Enumerable.Append<bool>(possible_16, (j_17 == 0))));
            j_17 = (j_17 + 1);
        };
        long idx_18 = 0;
        while ((idx_18 < values_15.Length)) {
            long v_19 = values_15[(int)(idx_18 < 0 ? values_15.Length + (idx_18) : idx_18)];
            long s_20 = number_14;
            while ((s_20 >= v_19)) {
                if (possible_16[(int)((s_20 - v_19) < 0 ? possible_16.Length + ((s_20 - v_19)) : (s_20 - v_19))]) {
                    possible_16[(int)(s_20)] = true;
                }
                s_20 = (s_20 - 1);
            }
            idx_18 = (idx_18 + 1);
        };
        return possible_16[(int)(number_14 < 0 ? possible_16.Length + (number_14) : number_14)];
    }

    public static bool weird(long number_21) {
        return (Program.abundant(number_21) && (Program.semi_perfect(number_21) == false));
    }

    public static void run_tests() {
        if ((!Enumerable.SequenceEqual<long>(Program.factors(12), new long[]{1, 2, 3, 4, 6}))) {
            throw new Exception("factors 12 failed");
        };
        if ((!Enumerable.SequenceEqual<long>(Program.factors(1), new long[]{1}))) {
            throw new Exception("factors 1 failed");
        };
        if ((!Enumerable.SequenceEqual<long>(Program.factors(100), new long[]{1, 2, 4, 5, 10, 20, 25, 50}))) {
            throw new Exception("factors 100 failed");
        };
        if ((Program.abundant(0) != true)) {
            throw new Exception("abundant 0 failed");
        };
        if ((Program.abundant(1) != false)) {
            throw new Exception("abundant 1 failed");
        };
        if ((Program.abundant(12) != true)) {
            throw new Exception("abundant 12 failed");
        };
        if ((Program.abundant(13) != false)) {
            throw new Exception("abundant 13 failed");
        };
        if ((Program.abundant(20) != true)) {
            throw new Exception("abundant 20 failed");
        };
        if ((Program.semi_perfect(0) != true)) {
            throw new Exception("semi_perfect 0 failed");
        };
        if ((Program.semi_perfect(1) != true)) {
            throw new Exception("semi_perfect 1 failed");
        };
        if ((Program.semi_perfect(12) != true)) {
            throw new Exception("semi_perfect 12 failed");
        };
        if ((Program.semi_perfect(13) != false)) {
            throw new Exception("semi_perfect 13 failed");
        };
        if ((Program.weird(0) != false)) {
            throw new Exception("weird 0 failed");
        };
        if ((Program.weird(70) != true)) {
            throw new Exception("weird 70 failed");
        };
        if ((Program.weird(77) != false)) {
            throw new Exception("weird 77 failed");
        };
    }

    public static void main() {
        Program.run_tests();
        long[] nums_22 = new long[]{69, 70, 71};
        long i_23 = 0;
        while ((i_23 < nums_22.Length)) {
            long n_24 = nums_22[(int)(i_23 < 0 ? nums_22.Length + (i_23) : i_23)];
            if (Program.weird(n_24)) {
                Console.WriteLine(Program._fmtTop((_fmtStr(n_24) + " is weird.")));
            } else {
                Console.WriteLine(Program._fmtTop((_fmtStr(n_24) + " is not weird.")));
            }
            i_23 = (i_23 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
