// Generated by Mochi 0.10.73 (commit 698bf55243) on 2025-08-25 22:27 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] bubble_sort(BigInteger[] xs_0) {
        BigInteger[] arr_1 = xs_0;
        long n_2 = arr_1.Length;
        BigInteger i_3 = 0;
        while ((i_3 < n_2)) {
            BigInteger j_4 = 0;
            while ((j_4 < ((n_2 - i_3) - 1))) {
                if ((_idx(arr_1, (long)(j_4)) > _idx(arr_1, (long)((j_4 + 1))))) {
                    BigInteger tmp_5 = _idx(arr_1, (long)(j_4));
                    arr_1[(int)(j_4)] = _idx(arr_1, (long)((j_4 + 1)));
                    arr_1[(int)((j_4 + 1))] = tmp_5;
                }
                j_4 = (j_4 + 1);
            }
            i_3 = (i_3 + 1);
        };
        return arr_1;
    }

    public static BigInteger[] factors(BigInteger num_6) {
        BigInteger[] values_7 = new BigInteger[]{1};
        BigInteger i_8 = 2;
        while (((i_8 * i_8) <= num_6)) {
            if ((_mod(num_6, i_8) == 0)) {
                values_7 = ((Func<BigInteger[]>)(() => { var _tmp = values_7.Cast<BigInteger>().ToList(); _tmp.Add(i_8); return _tmp.ToArray(); }))();
                BigInteger d_9 = (num_6 / i_8);
                if ((d_9 != i_8)) {
                    values_7 = ((Func<BigInteger[]>)(() => { var _tmp = values_7.Cast<BigInteger>().ToList(); _tmp.Add(d_9); return _tmp.ToArray(); }))();
                }
            }
            i_8 = (i_8 + 1);
        };
        return Program.bubble_sort(values_7);
    }

    public static BigInteger sum_list(BigInteger[] xs_10) {
        BigInteger total_11 = 0;
        BigInteger i_12 = 0;
        while ((i_12 < xs_10.Length)) {
            total_11 = (total_11 + _idx(xs_10, (long)(i_12)));
            i_12 = (i_12 + 1);
        };
        return total_11;
    }

    public static bool abundant(BigInteger n_13) {
        return (Program.sum_list(Program.factors(n_13)) > n_13);
    }

    public static bool semi_perfect(BigInteger number_14) {
        if ((number_14 <= 0)) {
            return true;
        };
        BigInteger[] values_15 = Program.factors(number_14);
        bool[] possible_16 = new bool[]{};
        BigInteger j_17 = 0;
        while ((j_17 <= number_14)) {
            possible_16 = ((Func<bool[]>)(() => { var _tmp = possible_16.Cast<bool>().ToList(); _tmp.Add((j_17 == 0)); return _tmp.ToArray(); }))();
            j_17 = (j_17 + 1);
        };
        BigInteger idx_18 = 0;
        while ((idx_18 < values_15.Length)) {
            BigInteger v_19 = _idx(values_15, (long)(idx_18));
            BigInteger s_20 = number_14;
            while ((s_20 >= v_19)) {
                if (_idx(possible_16, (long)((s_20 - v_19)))) {
                    possible_16[(int)(s_20)] = true;
                }
                s_20 = (s_20 - 1);
            }
            idx_18 = (idx_18 + 1);
        };
        return _idx(possible_16, (long)(number_14));
    }

    public static bool weird(BigInteger number_21) {
        return (Program.abundant(number_21) && (Program.semi_perfect(number_21) == false));
    }

    public static void run_tests() {
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.factors(12), new BigInteger[]{1, 2, 3, 4, 6}))) {
            throw new Exception("factors 12 failed");
        };
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.factors(1), new BigInteger[]{1}))) {
            throw new Exception("factors 1 failed");
        };
        if ((!Enumerable.SequenceEqual<BigInteger>(Program.factors(100), new BigInteger[]{1, 2, 4, 5, 10, 20, 25, 50}))) {
            throw new Exception("factors 100 failed");
        };
        if ((Program.abundant(0) != true)) {
            throw new Exception("abundant 0 failed");
        };
        if ((Program.abundant(1) != false)) {
            throw new Exception("abundant 1 failed");
        };
        if ((Program.abundant(12) != true)) {
            throw new Exception("abundant 12 failed");
        };
        if ((Program.abundant(13) != false)) {
            throw new Exception("abundant 13 failed");
        };
        if ((Program.abundant(20) != true)) {
            throw new Exception("abundant 20 failed");
        };
        if ((Program.semi_perfect(0) != true)) {
            throw new Exception("semi_perfect 0 failed");
        };
        if ((Program.semi_perfect(1) != true)) {
            throw new Exception("semi_perfect 1 failed");
        };
        if ((Program.semi_perfect(12) != true)) {
            throw new Exception("semi_perfect 12 failed");
        };
        if ((Program.semi_perfect(13) != false)) {
            throw new Exception("semi_perfect 13 failed");
        };
        if ((Program.weird(0) != false)) {
            throw new Exception("weird 0 failed");
        };
        if ((Program.weird(70) != true)) {
            throw new Exception("weird 70 failed");
        };
        if ((Program.weird(77) != false)) {
            throw new Exception("weird 77 failed");
        };
    }

    public static void main() {
        Program.run_tests();
        BigInteger[] nums_22 = new BigInteger[]{69, 70, 71};
        BigInteger i_23 = 0;
        while ((i_23 < nums_22.Length)) {
            BigInteger n_24 = _idx(nums_22, (long)(i_23));
            if (Program.weird(n_24)) {
                Console.WriteLine(Program._fmtTop((_fmtStr(n_24) + " is weird.")));
            } else {
                Console.WriteLine(Program._fmtTop((_fmtStr(n_24) + " is not weird.")));
            }
            i_23 = (i_23 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
