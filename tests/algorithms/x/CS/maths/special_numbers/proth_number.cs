// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long pow2(long exp_0) {
        long result_1 = 1;
        long i_2 = 0;
        while ((i_2 < exp_0)) {
            result_1 = (result_1 * 2);
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long proth(long number_3) {
        if ((number_3 < 1)) {
            throw new Exception("Input value must be > 0");
        };
        if ((number_3 == 1)) {
            return 3;
        };
        if ((number_3 == 2)) {
            return 5;
        };
        long temp_4 = Convert.ToInt64((number_3 / 3));
        long pow_5 = 1;
        long block_index_6 = 1;
        while ((pow_5 <= temp_4)) {
            pow_5 = (pow_5 * 2);
            block_index_6 = (block_index_6 + 1);
        };
        long[] proth_list_7 = new long[]{3, 5};
        long proth_index_8 = 2;
        long increment_9 = 3;
        long block_10 = 1;
        while ((block_10 < block_index_6)) {
            long i_11 = 0;
            while ((i_11 < increment_9)) {
                long next_val_12 = (Program.pow2((block_10 + 1)) + proth_list_7[(int)((proth_index_8 - 1))]);
                proth_list_7 = (Enumerable.ToArray(Enumerable.Append<long>(proth_list_7, next_val_12)));
                proth_index_8 = (proth_index_8 + 1);
                i_11 = (i_11 + 1);
            }
            increment_9 = (increment_9 * 2);
            block_10 = (block_10 + 1);
        };
        return proth_list_7[(int)((number_3 - 1))];
    }

    public static void main() {
        long n_13 = 1;
        while ((n_13 <= 10)) {
            long value_14 = Program.proth(n_13);
            Console.WriteLine(Program._fmtTop(((("The " + _fmtStr(n_13)) + "th Proth number: ") + _fmtStr(value_14))));
            n_13 = (n_13 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
