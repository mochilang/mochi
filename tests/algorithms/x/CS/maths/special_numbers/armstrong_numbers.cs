// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long pow_int(long base_0, long exp_1) {
        long result_2 = 1;
        long i_3 = 0;
        while ((i_3 < exp_1)) {
            result_2 = (result_2 * base_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static bool armstrong_number(long n_4) {
        if ((n_4 < 1)) {
            return false;
        };
        long digits_5 = 0;
        long temp_6 = n_4;
        while ((temp_6 > 0)) {
            temp_6 = (temp_6 / 10);
            digits_5 = (digits_5 + 1);
        };
        long total_7 = 0;
        temp_6 = n_4;
        while ((temp_6 > 0)) {
            long rem_8 = _mod(temp_6, 10);
            total_7 = (total_7 + Program.pow_int(rem_8, digits_5));
            temp_6 = (temp_6 / 10);
        };
        return (total_7 == n_4);
    }

    public static bool pluperfect_number(long n_9) {
        if ((n_9 < 1)) {
            return false;
        };
        long[] digit_histogram_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < 10)) {
            digit_histogram_10 = (Enumerable.ToArray(Enumerable.Append<long>(digit_histogram_10, 0)));
            i_11 = (i_11 + 1);
        };
        long digit_total_12 = 0;
        long temp_13 = n_9;
        while ((temp_13 > 0)) {
            long rem_14 = _mod(temp_13, 10);
            digit_histogram_10[rem_14] = (digit_histogram_10[(int)(rem_14)] + 1);
            digit_total_12 = (digit_total_12 + 1);
            temp_13 = (temp_13 / 10);
        };
        long total_15 = 0;
        i_11 = 0;
        while ((i_11 < 10)) {
            if ((digit_histogram_10[(int)(i_11)] > 0)) {
                total_15 = (total_15 + (digit_histogram_10[(int)(i_11)] * Program.pow_int(i_11, digit_total_12)));
            }
            i_11 = (i_11 + 1);
        };
        return (total_15 == n_9);
    }

    public static bool narcissistic_number(long n_16) {
        if ((n_16 < 1)) {
            return false;
        };
        long digits_17 = 0;
        long temp_18 = n_16;
        while ((temp_18 > 0)) {
            temp_18 = (temp_18 / 10);
            digits_17 = (digits_17 + 1);
        };
        temp_18 = n_16;
        long total_19 = 0;
        while ((temp_18 > 0)) {
            long rem_20 = _mod(temp_18, 10);
            total_19 = (total_19 + Program.pow_int(rem_20, digits_17));
            temp_18 = (temp_18 / 10);
        };
        return (total_19 == n_16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.armstrong_number(371)));
            Console.WriteLine(Program._fmtTop(Program.armstrong_number(200)));
            Console.WriteLine(Program._fmtTop(Program.pluperfect_number(371)));
            Console.WriteLine(Program._fmtTop(Program.pluperfect_number(200)));
            Console.WriteLine(Program._fmtTop(Program.narcissistic_number(371)));
            Console.WriteLine(Program._fmtTop(Program.narcissistic_number(200)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
