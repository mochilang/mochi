// Generated by Mochi 0.10.67 (commit 04f67932cf) on 2025-08-17 13:14 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static void panic(string msg_0) {
    }

    public static long char_to_value(string c_1) {
        string digits_2 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        long i_3 = 0;
        while ((i_3 < digits_2.Length)) {
            if ((digits_2.Substring((int)(i_3), 1) == c_1)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        Program.panic("invalid digit");
        return default(long);
    }

    public static string int_to_base(long number_4, long base_5) {
        if (((base_5 < 2) || (base_5 > 36))) {
            Program.panic("'base' must be between 2 and 36 inclusive");
        };
        if ((number_4 < 0)) {
            Program.panic("number must be a positive integer");
        };
        string digits_6 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        long n_7 = number_4;
        string result_8 = "";
        while ((n_7 > 0)) {
            long remainder_9 = _mod(n_7, base_5);
            result_8 = (digits_6.Substring((int)(remainder_9), 1) + result_8);
            n_7 = _floordiv(n_7, base_5);
        };
        if ((result_8 == "")) {
            result_8 = "0";
        };
        return result_8;
    }

    public static long base_to_int(string num_str_10, long base_11) {
        long value_12 = 0;
        long i_13 = 0;
        while ((i_13 < num_str_10.Length)) {
            string c_14 = num_str_10.Substring((int)(i_13), 1);
            value_12 = ((value_12 * base_11) + Program.char_to_value(c_14));
            i_13 = (i_13 + 1);
        };
        return value_12;
    }

    public static string sum_of_digits(long num_15, long base_16) {
        if (((base_16 < 2) || (base_16 > 36))) {
            Program.panic("'base' must be between 2 and 36 inclusive");
        };
        string num_str_17 = Program.int_to_base(num_15, base_16);
        long total_18 = 0;
        long i_19 = 0;
        while ((i_19 < num_str_17.Length)) {
            string c_20 = num_str_17.Substring((int)(i_19), 1);
            total_18 = (total_18 + Program.char_to_value(c_20));
            i_19 = (i_19 + 1);
        };
        return Program.int_to_base(total_18, base_16);
    }

    public static string[] harshad_numbers_in_base(long limit_21, long base_22) {
        if (((base_22 < 2) || (base_22 > 36))) {
            Program.panic("'base' must be between 2 and 36 inclusive");
        };
        if ((limit_21 < 0)) {
            return new string[]{};
        };
        string[] numbers_23 = new string[]{};
        long i_24 = 1;
        while ((i_24 < limit_21)) {
            string s_25 = Program.sum_of_digits(i_24, base_22);
            long divisor_26 = Program.base_to_int(s_25, base_22);
            if ((_mod(i_24, divisor_26) == 0)) {
                numbers_23 = ((Func<string[]>)(() => { var _tmp = numbers_23.Cast<string>().ToList(); _tmp.Add(Program.int_to_base(i_24, base_22)); return _tmp.ToArray(); }))();
            }
            i_24 = (i_24 + 1);
        };
        return numbers_23;
    }

    public static bool is_harshad_number_in_base(long num_27, long base_28) {
        if (((base_28 < 2) || (base_28 > 36))) {
            Program.panic("'base' must be between 2 and 36 inclusive");
        };
        if ((num_27 < 0)) {
            return false;
        };
        string n_29 = Program.int_to_base(num_27, base_28);
        string d_30 = Program.sum_of_digits(num_27, base_28);
        long n_val_31 = Program.base_to_int(n_29, base_28);
        long d_val_32 = Program.base_to_int(d_30, base_28);
        return (_mod(n_val_31, d_val_32) == 0);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.int_to_base(0, 21)));
        Console.WriteLine(Program._fmtTop(Program.int_to_base(23, 2)));
        Console.WriteLine(Program._fmtTop(Program.int_to_base(58, 5)));
        Console.WriteLine(Program._fmtTop(Program.int_to_base(167, 16)));
        Console.WriteLine(Program._fmtTop(Program.sum_of_digits(103, 12)));
        Console.WriteLine(Program._fmtTop(Program.sum_of_digits(1275, 4)));
        Console.WriteLine(Program._fmtTop(Program.sum_of_digits(6645, 2)));
        Console.WriteLine(Program._fmtTop(Program.harshad_numbers_in_base(15, 2)));
        Console.WriteLine(Program._fmtTop(Program.harshad_numbers_in_base(12, 34)));
        Console.WriteLine(Program._fmtTop(Program.harshad_numbers_in_base(12, 4)));
        Console.WriteLine(Program._fmtTop(Program.is_harshad_number_in_base(18, 10)));
        Console.WriteLine(Program._fmtTop(Program.is_harshad_number_in_base(21, 10)));
        Console.WriteLine(Program._fmtTop(Program.is_harshad_number_in_base(-21, 5)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
