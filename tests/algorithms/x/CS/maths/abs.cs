// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double abs_val(double num_0) {
        if ((num_0 < 0.0)) {
            return -num_0;
        };
        return num_0;
    }

    public static long abs_min(long[] x_1) {
        if ((x_1.Length == 0)) {
            throw new Exception("abs_min() arg is an empty sequence");
        };
        long j_2 = x_1[(int)(0)];
        long idx_3 = 0;
        while ((idx_3 < x_1.Length)) {
            long i_4 = x_1[(int)(idx_3)];
            if ((Program.abs_val(Convert.ToDouble(i_4)) < Program.abs_val(Convert.ToDouble(j_2)))) {
                j_2 = i_4;
            }
            idx_3 = (idx_3 + 1);
        };
        return j_2;
    }

    public static long abs_max(long[] x_5) {
        if ((x_5.Length == 0)) {
            throw new Exception("abs_max() arg is an empty sequence");
        };
        long j_6 = x_5[(int)(0)];
        long idx_7 = 0;
        while ((idx_7 < x_5.Length)) {
            long i_8 = x_5[(int)(idx_7)];
            if ((Program.abs_val(Convert.ToDouble(i_8)) > Program.abs_val(Convert.ToDouble(j_6)))) {
                j_6 = i_8;
            }
            idx_7 = (idx_7 + 1);
        };
        return j_6;
    }

    public static long abs_max_sort(long[] x_9) {
        if ((x_9.Length == 0)) {
            throw new Exception("abs_max_sort() arg is an empty sequence");
        };
        long[] arr_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < x_9.Length)) {
            arr_10 = (Enumerable.ToArray(Enumerable.Append<long>(arr_10, x_9[(int)(i_11)])));
            i_11 = (i_11 + 1);
        };
        long n_12 = arr_10.Length;
        long a_13 = 0;
        while ((a_13 < n_12)) {
            long b_14 = 0;
            while ((b_14 < ((n_12 - a_13) - 1))) {
                if ((Program.abs_val(Convert.ToDouble(arr_10[(int)(b_14)])) > Program.abs_val(Convert.ToDouble(arr_10[(int)((b_14 + 1))])))) {
                    long temp_15 = arr_10[(int)(b_14)];
                    arr_10[b_14] = arr_10[(int)((b_14 + 1))];
                    arr_10[(b_14 + 1)] = temp_15;
                }
                b_14 = (b_14 + 1);
            }
            a_13 = (a_13 + 1);
        };
        return arr_10[(int)((n_12 - 1))];
    }

    public static void test_abs_val() {
        if ((Program.abs_val(0.0) != 0.0)) {
            throw new Exception("abs_val(0) failed");
        };
        if ((Program.abs_val(34.0) != 34.0)) {
            throw new Exception("abs_val(34) failed");
        };
        if ((Program.abs_val(-1e+11) != 1e+11)) {
            throw new Exception("abs_val large failed");
        };
        long[] a_16 = new long[]{-3, -1, 2, -11};
        if ((Program.abs_max(a_16) != -11)) {
            throw new Exception("abs_max failed");
        };
        if ((Program.abs_max_sort(a_16) != -11)) {
            throw new Exception("abs_max_sort failed");
        };
        if ((Program.abs_min(a_16) != -1)) {
            throw new Exception("abs_min failed");
        };
    }

    public static void main() {
        Program.test_abs_val();
        Console.WriteLine(Program._fmtTop(Program.abs_val(-34.0)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
