// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] prime_sieve_eratosthenes(long num_0) {
        if ((num_0 <= 0)) {
            throw new Exception("Input must be a positive integer");
        };
        bool[] primes_1 = new bool[]{};
        long i_2 = 0;
        while ((i_2 <= num_0)) {
            primes_1 = (Enumerable.ToArray(Enumerable.Append<bool>(primes_1, true)));
            i_2 = (i_2 + 1);
        };
        long p_3 = 2;
        while (((p_3 * p_3) <= num_0)) {
            if (primes_1[(int)(p_3)]) {
                long j_4 = (p_3 * p_3);
                while ((j_4 <= num_0)) {
                    primes_1[j_4] = false;
                    j_4 = (j_4 + p_3);
                }
            }
            p_3 = (p_3 + 1);
        };
        long[] result_5 = new long[]{};
        long k_6 = 2;
        while ((k_6 <= num_0)) {
            if (primes_1[(int)(k_6)]) {
                result_5 = (Enumerable.ToArray(Enumerable.Append<long>(result_5, k_6)));
            }
            k_6 = (k_6 + 1);
        };
        return result_5;
    }

    public static bool list_eq(long[] a_7, long[] b_8) {
        if ((a_7.Length != b_8.Length)) {
            return false;
        };
        long i_9 = 0;
        while ((i_9 < a_7.Length)) {
            if ((a_7[(int)(i_9)] != b_8[(int)(i_9)])) {
                return false;
            }
            i_9 = (i_9 + 1);
        };
        return true;
    }

    public static void test_prime_sieve_eratosthenes() {
        if ((!Program.list_eq(Program.prime_sieve_eratosthenes(10), new long[]{2, 3, 5, 7}))) {
            throw new Exception("test 10 failed");
        };
        if ((!Program.list_eq(Program.prime_sieve_eratosthenes(20), new long[]{2, 3, 5, 7, 11, 13, 17, 19}))) {
            throw new Exception("test 20 failed");
        };
        if ((!Program.list_eq(Program.prime_sieve_eratosthenes(2), new long[]{2}))) {
            throw new Exception("test 2 failed");
        };
        if ((Program.prime_sieve_eratosthenes(1).Length != 0)) {
            throw new Exception("test 1 failed");
        };
    }

    public static void main() {
        Program.test_prime_sieve_eratosthenes();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.prime_sieve_eratosthenes(20))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
