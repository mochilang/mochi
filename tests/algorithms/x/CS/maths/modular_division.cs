// Generated by Mochi 0.10.59 on 2025-08-07 10:17 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long mod(long a_0, long n_1) {
        long r_2 = _mod(a_0, n_1);
        if ((r_2 < 0)) {
            return (r_2 + n_1);
        };
        return r_2;
    }

    public static long greatest_common_divisor(long a_3, long b_4) {
        long x_5 = ((a_3 < 0) ? -a_3 : a_3);
        long y_6 = ((b_4 < 0) ? -b_4 : b_4);
        while ((y_6 != 0)) {
            long t_7 = _mod(x_5, y_6);
            x_5 = y_6;
            y_6 = t_7;
        };
        return x_5;
    }

    public static long[] extended_gcd(long a_8, long b_9) {
        if ((b_9 == 0)) {
            return new long[]{a_8, 1, 0};
        };
        long[] res_10 = Program.extended_gcd(b_9, _mod(a_8, b_9));
        long d_11 = res_10[(int)(0)];
        long p_12 = res_10[(int)(1)];
        long q_13 = res_10[(int)(2)];
        long x_14 = q_13;
        long y_15 = (p_12 - (q_13 * (a_8 / b_9)));
        return new long[]{d_11, x_14, y_15};
    }

    public static long[] extended_euclid(long a_16, long b_17) {
        if ((b_17 == 0)) {
            return new long[]{1, 0};
        };
        long[] res_18 = Program.extended_euclid(b_17, _mod(a_16, b_17));
        long x_19 = res_18[(int)(1)];
        long y_20 = (res_18[(int)(0)] - ((a_16 / b_17) * res_18[(int)(1)]));
        return new long[]{x_19, y_20};
    }

    public static long invert_modulo(long a_21, long n_22) {
        long[] res_23 = Program.extended_euclid(a_21, n_22);
        long inv_24 = res_23[(int)(0)];
        return Program.mod(inv_24, n_22);
    }

    public static long modular_division(long a_25, long b_26, long n_27) {
        if ((n_27 <= 1)) {
            throw new Exception("n must be > 1");
        };
        if ((a_25 <= 0)) {
            throw new Exception("a must be > 0");
        };
        if ((Program.greatest_common_divisor(a_25, n_27) != 1)) {
            throw new Exception("gcd(a,n) != 1");
        };
        long[] eg_28 = Program.extended_gcd(n_27, a_25);
        long s_29 = eg_28[(int)(2)];
        return Program.mod((b_26 * s_29), n_27);
    }

    public static long modular_division2(long a_30, long b_31, long n_32) {
        long s_33 = Program.invert_modulo(a_30, n_32);
        return Program.mod((b_31 * s_33), n_32);
    }

    public static void tests() {
        if ((Program.modular_division(4, 8, 5) != 2)) {
            throw new Exception("md1");
        };
        if ((Program.modular_division(3, 8, 5) != 1)) {
            throw new Exception("md2");
        };
        if ((Program.modular_division(4, 11, 5) != 4)) {
            throw new Exception("md3");
        };
        if ((Program.modular_division2(4, 8, 5) != 2)) {
            throw new Exception("md21");
        };
        if ((Program.modular_division2(3, 8, 5) != 1)) {
            throw new Exception("md22");
        };
        if ((Program.modular_division2(4, 11, 5) != 4)) {
            throw new Exception("md23");
        };
        if ((Program.invert_modulo(2, 5) != 3)) {
            throw new Exception("inv");
        };
        long[] eg_34 = Program.extended_gcd(10, 6);
        if ((((eg_34[(int)(0)] != 2) || (eg_34[(int)(1)] != -1)) || (eg_34[(int)(2)] != 2))) {
            throw new Exception("eg");
        };
        long[] eu_35 = Program.extended_euclid(10, 6);
        if (((eu_35[(int)(0)] != -1) || (eu_35[(int)(1)] != 2))) {
            throw new Exception("eu");
        };
        if ((Program.greatest_common_divisor(121, 11) != 11)) {
            throw new Exception("gcd");
        };
    }

    public static void main() {
        Program.tests();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.modular_division(4, 8, 5))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
