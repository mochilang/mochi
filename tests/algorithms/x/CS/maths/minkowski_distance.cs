// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double abs_val(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double pow_float(double base_1, long exp_2) {
        double result_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < exp_2)) {
            result_3 = (result_3 * base_1);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static double nth_root(double value_5, long n_6) {
        if ((value_5 == 0.0)) {
            return 0.0;
        };
        double x_7 = (value_5 / Convert.ToDouble(n_6));
        long i_8 = 0;
        while ((i_8 < 20)) {
            double num_9 = ((Convert.ToDouble((n_6 - 1)) * x_7) + (value_5 / Program.pow_float(x_7, (n_6 - 1))));
            x_7 = (num_9 / Convert.ToDouble(n_6));
            i_8 = (i_8 + 1);
        };
        return x_7;
    }

    public static double minkowski_distance(double[] point_a_10, double[] point_b_11, long order_12) {
        if ((order_12 < 1)) {
            throw new Exception("The order must be greater than or equal to 1.");
        };
        if ((point_a_10.Length != point_b_11.Length)) {
            throw new Exception("Both points must have the same dimension.");
        };
        double total_13 = 0.0;
        long idx_14 = 0;
        while ((idx_14 < point_a_10.Length)) {
            double diff_15 = Program.abs_val((point_a_10[(int)(idx_14)] - point_b_11[(int)(idx_14)]));
            total_13 = (total_13 + Program.pow_float(diff_15, order_12));
            idx_14 = (idx_14 + 1);
        };
        return Program.nth_root(total_13, order_12);
    }

    public static void test_minkowski() {
        if ((Program.abs_val((Program.minkowski_distance(new double[]{1.0, 1.0}, new double[]{2.0, 2.0}, 1) - 2.0)) > 0.0001)) {
            throw new Exception("minkowski_distance test1 failed");
        };
        if ((Program.abs_val((Program.minkowski_distance(new double[]{1.0, 2.0, 3.0, 4.0}, new double[]{5.0, 6.0, 7.0, 8.0}, 2) - 8.0)) > 0.0001)) {
            throw new Exception("minkowski_distance test2 failed");
        };
    }

    public static void main() {
        Program.test_minkowski();
        Console.WriteLine(Program._fmtTop(Program.minkowski_distance(new double[]{5.0}, new double[]{0.0}, 3)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
