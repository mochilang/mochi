// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] calculate_waitingtime(long[] arrival_time_0, long[] burst_time_1, long no_of_processes_2) {
        long[] waiting_time_3 = new long[]{};
        long[] remaining_time_4 = new long[]{};
        long i_5 = 0;
        while ((i_5 < no_of_processes_2)) {
            waiting_time_3 = (Enumerable.ToArray(Enumerable.Append<long>(waiting_time_3, 0)));
            remaining_time_4 = (Enumerable.ToArray(Enumerable.Append<long>(remaining_time_4, burst_time_1[(int)(i_5)])));
            i_5 = (i_5 + 1);
        };
        long completed_6 = 0;
        long total_time_7 = 0;
        while ((completed_6 != no_of_processes_2)) {
            long[] ready_process_8 = new long[]{};
            long target_process_9 = -1;
            long j_10 = 0;
            while ((j_10 < no_of_processes_2)) {
                if (((arrival_time_0[(int)(j_10)] <= total_time_7) && (remaining_time_4[(int)(j_10)] > 0))) {
                    ready_process_8 = (Enumerable.ToArray(Enumerable.Append<long>(ready_process_8, j_10)));
                }
                j_10 = (j_10 + 1);
            }
            if ((ready_process_8.Length > 0)) {
                target_process_9 = ready_process_8[(int)(0)];
                long k_11 = 0;
                while ((k_11 < ready_process_8.Length)) {
                    long idx_12 = ready_process_8[(int)(k_11)];
                    if ((remaining_time_4[(int)(idx_12)] < remaining_time_4[(int)(target_process_9)])) {
                        target_process_9 = idx_12;
                    }
                    k_11 = (k_11 + 1);
                }
                total_time_7 = (total_time_7 + burst_time_1[(int)(target_process_9)]);
                completed_6 = (completed_6 + 1);
                remaining_time_4[target_process_9] = 0;
                waiting_time_3[target_process_9] = ((total_time_7 - arrival_time_0[(int)(target_process_9)]) - burst_time_1[(int)(target_process_9)]);
            } else {
                total_time_7 = (total_time_7 + 1);
            }
        };
        return waiting_time_3;
    }

    public static long[] calculate_turnaroundtime(long[] burst_time_13, long no_of_processes_14, long[] waiting_time_15) {
        long[] turn_around_time_16 = new long[]{};
        long i_17 = 0;
        while ((i_17 < no_of_processes_14)) {
            turn_around_time_16 = (Enumerable.ToArray(Enumerable.Append<long>(turn_around_time_16, (burst_time_13[(int)(i_17)] + waiting_time_15[(int)(i_17)]))));
            i_17 = (i_17 + 1);
        };
        return turn_around_time_16;
    }

    public static double average(long[] values_18) {
        long total_19 = 0;
        long i_20 = 0;
        while ((i_20 < values_18.Length)) {
            total_19 = (total_19 + values_18[(int)(i_20)]);
            i_20 = (i_20 + 1);
        };
        return (Convert.ToDouble(total_19) / Convert.ToDouble(values_18.Length));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("[TEST CASE 01]"));
            long no_of_processes_21 = 4;
            long[] burst_time_22 = new long[]{2, 5, 3, 7};
            long[] arrival_time_23 = new long[]{0, 0, 0, 0};
            long[] waiting_time_24 = Program.calculate_waitingtime(arrival_time_23, burst_time_22, no_of_processes_21);
            long[] turn_around_time_25 = Program.calculate_turnaroundtime(burst_time_22, no_of_processes_21, waiting_time_24);
            Console.WriteLine(Program._fmtTop("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time"));
            long i_26 = 0;
            while ((i_26 < no_of_processes_21)) {
                long pid_27 = (i_26 + 1);
                Console.WriteLine(Program._fmtTop(((((((((_fmtStr(pid_27) + "\t") + _fmtStr(burst_time_22[(int)(i_26)])) + "\t\t\t") + _fmtStr(arrival_time_23[(int)(i_26)])) + "\t\t\t\t") + _fmtStr(waiting_time_24[(int)(i_26)])) + "\t\t\t\t") + _fmtStr(turn_around_time_25[(int)(i_26)]))));
                i_26 = (i_26 + 1);
            }
            double avg_wait_28 = Program.average(waiting_time_24);
            double avg_turn_29 = Program.average(turn_around_time_25);
            Console.WriteLine(Program._fmtTop(("\nAverage waiting time = " + _fmtStr(avg_wait_28))));
            Console.WriteLine(Program._fmtTop(("Average turnaround time = " + _fmtStr(avg_turn_29))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
