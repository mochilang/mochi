// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Job {
    public long id;
    public long deadline;
    public long profit;
    public override string ToString() => $"Job {{id = {id}, deadline = {deadline}, profit = {profit}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Job[] jobs1_22 = new Job[]{};
    public static Job[] sort_jobs_by_profit(Job[] jobs_0) {
        Job[] js_1 = jobs_0;
        long i_2 = 0;
        while ((i_2 < js_1.Length)) {
            long j_3 = 0;
            while ((j_3 < ((js_1.Length - i_2) - 1))) {
                Job a_4 = _idx(js_1, j_3);
                Job b_5 = _idx(js_1, (j_3 + 1));
                if ((a_4.profit < b_5.profit)) {
                    js_1[(int)(j_3)] = b_5;
                    js_1[(int)((j_3 + 1))] = a_4;
                }
                j_3 = (j_3 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return js_1;
    }

    public static long max_deadline(Job[] jobs_6) {
        long max_d_7 = 0;
        long i_8 = 0;
        while ((i_8 < jobs_6.Length)) {
            Job job_9 = _idx(jobs_6, i_8);
            long d_10 = job_9.deadline;
            if ((d_10 > max_d_7)) {
                max_d_7 = d_10;
            }
            i_8 = (i_8 + 1);
        };
        return max_d_7;
    }

    public static long[] job_sequencing_with_deadlines(Job[] jobs_11) {
        Job[] js_12 = Program.sort_jobs_by_profit(jobs_11);
        long max_d_13 = Program.max_deadline(js_12);
        long[] time_slots_14 = new long[]{};
        long t_15 = 0;
        while ((t_15 < max_d_13)) {
            time_slots_14 = (Enumerable.ToArray(Enumerable.Append<long>(time_slots_14, (0 - 1))));
            t_15 = (t_15 + 1);
        };
        long count_16 = 0;
        long max_profit_17 = 0;
        long i_18 = 0;
        while ((i_18 < js_12.Length)) {
            Job job_19 = _idx(js_12, i_18);
            long j_20 = (job_19.deadline - 1);
            while ((j_20 >= 0)) {
                if ((_idx(time_slots_14, j_20) == (0 - 1))) {
                    time_slots_14[(int)(j_20)] = job_19.id;
                    count_16 = (count_16 + 1);
                    max_profit_17 = (max_profit_17 + job_19.profit);
                    break;
                }
                j_20 = (j_20 - 1);
            }
            i_18 = (i_18 + 1);
        };
        long[] result_21 = new long[]{};
        result_21 = (Enumerable.ToArray(Enumerable.Append<long>(result_21, count_16)));
        result_21 = (Enumerable.ToArray(Enumerable.Append<long>(result_21, max_profit_17)));
        return result_21;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            jobs1_22 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs1_22, new Job{id = 1, deadline = 4, profit = 20})));
            jobs1_22 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs1_22, new Job{id = 2, deadline = 1, profit = 10})));
            jobs1_22 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs1_22, new Job{id = 3, deadline = 1, profit = 40})));
            jobs1_22 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs1_22, new Job{id = 4, deadline = 1, profit = 30})));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.job_sequencing_with_deadlines(jobs1_22))));
            Job[] jobs2_23 = new Job[]{};
            jobs2_23 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs2_23, new Job{id = 1, deadline = 2, profit = 100})));
            jobs2_23 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs2_23, new Job{id = 2, deadline = 1, profit = 19})));
            jobs2_23 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs2_23, new Job{id = 3, deadline = 2, profit = 27})));
            jobs2_23 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs2_23, new Job{id = 4, deadline = 1, profit = 25})));
            jobs2_23 = (Enumerable.ToArray(Enumerable.Append<Job>(jobs2_23, new Job{id = 5, deadline = 1, profit = 15})));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.job_sequencing_with_deadlines(jobs2_23))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
