// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Process {
    public string process_name;
    public long arrival_time;
    public long stop_time;
    public long burst_time;
    public long waiting_time;
    public long turnaround_time;
    public override string ToString() => $"Process {{process_name = \"{process_name}\", arrival_time = {arrival_time}, stop_time = {stop_time}, burst_time = {burst_time}, waiting_time = {waiting_time}, turnaround_time = {turnaround_time}}}";
}
class MLFQ {
    public long number_of_queues;
    public long[] time_slices;
    public Process[] ready_queue;
    public long current_time;
    public Process[] finish_queue;
    public override string ToString() => $"MLFQ {{number_of_queues = {number_of_queues}, time_slices = {time_slices}, ready_queue = {ready_queue}, current_time = {current_time}, finish_queue = {finish_queue}}}";
}
class RRResult {
    public Process[] finished;
    public Process[] ready;
    public override string ToString() => $"RRResult {{finished = {finished}, ready = {ready}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Process P1_45 = Program.make_process("P1", 0, 53);
    static Process P2_46 = Program.make_process("P2", 0, 17);
    static Process P3_47 = Program.make_process("P3", 0, 68);
    static Process P4_48 = Program.make_process("P4", 0, 24);
    static long number_of_queues_49 = 3;
    static long[] time_slices_50 = new long[]{17, 25};
    static Process[] queue_51 = new Process[]{P1_45, P2_46, P3_47, P4_48};
    static MLFQ mlfq_52 = Program.make_mlfq(number_of_queues_49, time_slices_50, queue_51, 0);
    static Process[] finish_queue_53 = Program.multi_level_feedback_queue(mlfq_52);
    public static Process make_process(string name_0, long arrival_1, long burst_2) {
        return new Process{process_name = name_0, arrival_time = arrival_1, stop_time = arrival_1, burst_time = burst_2, waiting_time = 0, turnaround_time = 0};
    }

    public static MLFQ make_mlfq(long nqueues_3, long[] time_slices_4, Process[] queue_5, long current_time_6) {
        return new MLFQ{number_of_queues = nqueues_3, time_slices = time_slices_4, ready_queue = queue_5, current_time = current_time_6, finish_queue = new Process[]{}};
    }

    public static string[] calculate_sequence_of_finish_queue(MLFQ mlfq_7) {
        string[] seq_8 = new string[]{};
        long i_9 = 0;
        while ((i_9 < mlfq_7.finish_queue.Length)) {
            Process p_10 = _idx(mlfq_7.finish_queue, i_9);
            seq_8 = (Enumerable.ToArray(Enumerable.Append<string>(seq_8, p_10.process_name)));
            i_9 = (i_9 + 1);
        };
        return seq_8;
    }

    public static long[] calculate_waiting_time(Process[] queue_11) {
        long[] times_12 = new long[]{};
        long i_13 = 0;
        while ((i_13 < queue_11.Length)) {
            Process p_14 = _idx(queue_11, i_13);
            times_12 = (Enumerable.ToArray(Enumerable.Append<long>(times_12, p_14.waiting_time)));
            i_13 = (i_13 + 1);
        };
        return times_12;
    }

    public static long[] calculate_turnaround_time(Process[] queue_15) {
        long[] times_16 = new long[]{};
        long i_17 = 0;
        while ((i_17 < queue_15.Length)) {
            Process p_18 = _idx(queue_15, i_17);
            times_16 = (Enumerable.ToArray(Enumerable.Append<long>(times_16, p_18.turnaround_time)));
            i_17 = (i_17 + 1);
        };
        return times_16;
    }

    public static long[] calculate_completion_time(Process[] queue_19) {
        long[] times_20 = new long[]{};
        long i_21 = 0;
        while ((i_21 < queue_19.Length)) {
            Process p_22 = _idx(queue_19, i_21);
            times_20 = (Enumerable.ToArray(Enumerable.Append<long>(times_20, p_22.stop_time)));
            i_21 = (i_21 + 1);
        };
        return times_20;
    }

    public static long[] calculate_remaining_burst_time_of_processes(Process[] queue_23) {
        long[] times_24 = new long[]{};
        long i_25 = 0;
        while ((i_25 < queue_23.Length)) {
            Process p_26 = _idx(queue_23, i_25);
            times_24 = (Enumerable.ToArray(Enumerable.Append<long>(times_24, p_26.burst_time)));
            i_25 = (i_25 + 1);
        };
        return times_24;
    }

    public static long update_waiting_time(MLFQ mlfq_27, Process process_28) {
        process_28.waiting_time = (process_28.waiting_time + (mlfq_27.current_time - process_28.stop_time));
        return process_28.waiting_time;
    }

    public static Process[] first_come_first_served(MLFQ mlfq_29, Process[] ready_queue_30) {
        Process[] finished_31 = new Process[]{};
        Process[] rq_32 = ready_queue_30;
        while ((rq_32.Length != 0)) {
            Process cp_33 = _idx(rq_32, 0);
            rq_32 = _slice<Process>(rq_32, 1, rq_32.Length);
            if ((mlfq_29.current_time < cp_33.arrival_time)) {
                mlfq_29.current_time = cp_33.arrival_time;
            }
            Program.update_waiting_time(mlfq_29, cp_33);
            mlfq_29.current_time = (mlfq_29.current_time + cp_33.burst_time);
            cp_33.burst_time = 0;
            cp_33.turnaround_time = (mlfq_29.current_time - cp_33.arrival_time);
            cp_33.stop_time = mlfq_29.current_time;
            finished_31 = (Enumerable.ToArray(Enumerable.Append<Process>(finished_31, cp_33)));
        };
        mlfq_29.finish_queue = (Enumerable.ToArray(Enumerable.Concat(mlfq_29.finish_queue, finished_31)));
        return finished_31;
    }

    public static RRResult round_robin(MLFQ mlfq_34, Process[] ready_queue_35, long time_slice_36) {
        Process[] finished_37 = new Process[]{};
        Process[] rq_38 = ready_queue_35;
        long count_39 = rq_38.Length;
        long i_40 = 0;
        while ((i_40 < count_39)) {
            Process cp_41 = _idx(rq_38, 0);
            rq_38 = _slice<Process>(rq_38, 1, rq_38.Length);
            if ((mlfq_34.current_time < cp_41.arrival_time)) {
                mlfq_34.current_time = cp_41.arrival_time;
            }
            Program.update_waiting_time(mlfq_34, cp_41);
            if ((cp_41.burst_time > time_slice_36)) {
                mlfq_34.current_time = (mlfq_34.current_time + time_slice_36);
                cp_41.burst_time = (cp_41.burst_time - time_slice_36);
                cp_41.stop_time = mlfq_34.current_time;
                rq_38 = (Enumerable.ToArray(Enumerable.Append<Process>(rq_38, cp_41)));
            } else {
                mlfq_34.current_time = (mlfq_34.current_time + cp_41.burst_time);
                cp_41.burst_time = 0;
                cp_41.stop_time = mlfq_34.current_time;
                cp_41.turnaround_time = (mlfq_34.current_time - cp_41.arrival_time);
                finished_37 = (Enumerable.ToArray(Enumerable.Append<Process>(finished_37, cp_41)));
            }
            i_40 = (i_40 + 1);
        };
        mlfq_34.finish_queue = (Enumerable.ToArray(Enumerable.Concat(mlfq_34.finish_queue, finished_37)));
        return new RRResult{finished = finished_37, ready = rq_38};
    }

    public static Process[] multi_level_feedback_queue(MLFQ mlfq_42) {
        long i_43 = 0;
        while ((i_43 < (mlfq_42.number_of_queues - 1))) {
            RRResult rr_44 = Program.round_robin(mlfq_42, mlfq_42.ready_queue, _idx(mlfq_42.time_slices, i_43));
            mlfq_42.ready_queue = rr_44.ready;
            i_43 = (i_43 + 1);
        };
        Program.first_come_first_served(mlfq_42, mlfq_42.ready_queue);
        return mlfq_42.finish_queue;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("waiting time:\t\t\t" + _fmtStr(Program.calculate_waiting_time(new Process[]{P1_45, P2_46, P3_47, P4_48})))));
            Console.WriteLine(Program._fmtTop(("completion time:\t\t" + _fmtStr(Program.calculate_completion_time(new Process[]{P1_45, P2_46, P3_47, P4_48})))));
            Console.WriteLine(Program._fmtTop(("turnaround time:\t\t" + _fmtStr(Program.calculate_turnaround_time(new Process[]{P1_45, P2_46, P3_47, P4_48})))));
            Console.WriteLine(Program._fmtTop(("sequence of finished processes:\t" + _fmtStr(Program.calculate_sequence_of_finish_queue(mlfq_52)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
