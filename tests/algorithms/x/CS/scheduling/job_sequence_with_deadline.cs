// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] max_tasks(long[][] tasks_info_0) {
        long[] order_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < tasks_info_0.Length)) {
            order_1 = (Enumerable.ToArray(Enumerable.Append<long>(order_1, i_2)));
            i_2 = (i_2 + 1);
        };
        long n_3 = order_1.Length;
        i_2 = 0;
        while ((i_2 < n_3)) {
            long j_4 = (i_2 + 1);
            while ((j_4 < n_3)) {
                if ((_idx(_idx(tasks_info_0, _idx(order_1, j_4)), 1) > _idx(_idx(tasks_info_0, _idx(order_1, i_2)), 1))) {
                    long tmp_5 = _idx(order_1, i_2);
                    order_1[(int)(i_2)] = _idx(order_1, j_4);
                    order_1[(int)(j_4)] = tmp_5;
                }
                j_4 = (j_4 + 1);
            }
            i_2 = (i_2 + 1);
        };
        long[] result_6 = new long[]{};
        long pos_7 = 1;
        i_2 = 0;
        while ((i_2 < n_3)) {
            long id_8 = _idx(order_1, i_2);
            long deadline_9 = _idx(_idx(tasks_info_0, id_8), 0);
            if ((deadline_9 >= pos_7)) {
                result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, id_8)));
            }
            i_2 = (i_2 + 1);
            pos_7 = (pos_7 + 1);
        };
        return result_6;
    }

    public static void main() {
        long[][] ex1_10 = new long[][]{new long[]{4, 20}, new long[]{1, 10}, new long[]{1, 40}, new long[]{1, 30}};
        long[][] ex2_11 = new long[][]{new long[]{1, 10}, new long[]{2, 20}, new long[]{3, 30}, new long[]{2, 40}};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_tasks(ex1_10))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_tasks(ex2_11))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
