// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] calculate_waiting_times(long[] burst_times_0) {
        long quantum_1 = 2;
        long[] rem_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < burst_times_0.Length)) {
            rem_2 = (Enumerable.ToArray(Enumerable.Append<long>(rem_2, _idx(burst_times_0, i_3))));
            i_3 = (i_3 + 1);
        };
        long[] waiting_4 = new long[]{};
        i_3 = 0;
        while ((i_3 < burst_times_0.Length)) {
            waiting_4 = (Enumerable.ToArray(Enumerable.Append<long>(waiting_4, 0)));
            i_3 = (i_3 + 1);
        };
        long t_5 = 0;
        while (true) {
            bool done_6 = true;
            long j_7 = 0;
            while ((j_7 < burst_times_0.Length)) {
                if ((_idx(rem_2, j_7) > 0)) {
                    done_6 = false;
                    if ((_idx(rem_2, j_7) > quantum_1)) {
                        t_5 = (t_5 + quantum_1);
                        rem_2[(int)(j_7)] = (_idx(rem_2, j_7) - quantum_1);
                    } else {
                        t_5 = (t_5 + _idx(rem_2, j_7));
                        waiting_4[(int)(j_7)] = (t_5 - _idx(burst_times_0, j_7));
                        rem_2[(int)(j_7)] = 0;
                    }
                }
                j_7 = (j_7 + 1);
            }
            if (done_6) {
                return waiting_4;
            }
        };
        return waiting_4;
    }

    public static long[] calculate_turn_around_times(long[] burst_times_8, long[] waiting_times_9) {
        long[] result_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < burst_times_8.Length)) {
            result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, (_idx(burst_times_8, i_11) + _idx(waiting_times_9, i_11)))));
            i_11 = (i_11 + 1);
        };
        return result_10;
    }

    public static double mean(long[] values_12) {
        long total_13 = 0;
        long i_14 = 0;
        while ((i_14 < values_12.Length)) {
            total_13 = (total_13 + _idx(values_12, i_14));
            i_14 = (i_14 + 1);
        };
        return (Convert.ToDouble(total_13) / Convert.ToDouble(values_12.Length));
    }

    public static string format_float_5(double x_15) {
        long scaled_16 = _atoi(((x_15 * 100000.0) + 0.5));
        long int_part_17 = (scaled_16 / 100000);
        long frac_part_18 = _mod(scaled_16, 100000);
        string frac_str_19 = _fmtStr(frac_part_18);
        while ((frac_str_19.Length < 5)) {
            frac_str_19 = ("0" + frac_str_19);
        };
        return ((_fmtStr(int_part_17) + ".") + frac_str_19);
    }

    public static void main() {
        long[] burst_times_20 = new long[]{3, 5, 7};
        long[] waiting_times_21 = Program.calculate_waiting_times(burst_times_20);
        long[] turn_around_times_22 = Program.calculate_turn_around_times(burst_times_20, waiting_times_21);
        Console.WriteLine(Program._fmtTop("Process ID \tBurst Time \tWaiting Time \tTurnaround Time"));
        long i_23 = 0;
        while ((i_23 < burst_times_20.Length)) {
            string line_24 = ((((((("  " + _fmtStr((i_23 + 1))) + "\t\t  ") + _fmtStr(_idx(burst_times_20, i_23))) + "\t\t  ") + _fmtStr(_idx(waiting_times_21, i_23))) + "\t\t  ") + _fmtStr(_idx(turn_around_times_22, i_23)));
            Console.WriteLine(Program._fmtTop(line_24));
            i_23 = (i_23 + 1);
        };
        Console.WriteLine(Program._fmtTop(""));
        Console.WriteLine(Program._fmtTop(("Average waiting time = " + Program.format_float_5(Program.mean(waiting_times_21)))));
        Console.WriteLine(Program._fmtTop(("Average turn around time = " + Program.format_float_5(Program.mean(turn_around_times_22)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
