// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] calculate_waitingtime(long[] arrival_time_0, long[] burst_time_1, long no_of_processes_2) {
        long[] remaining_time_3 = new long[]{};
        long i_4 = 0;
        while ((i_4 < no_of_processes_2)) {
            remaining_time_3 = (Enumerable.ToArray(Enumerable.Append<long>(remaining_time_3, burst_time_1[(int)(i_4)])));
            i_4 = (i_4 + 1);
        };
        long[] waiting_time_5 = new long[]{};
        i_4 = 0;
        while ((i_4 < no_of_processes_2)) {
            waiting_time_5 = (Enumerable.ToArray(Enumerable.Append<long>(waiting_time_5, 0)));
            i_4 = (i_4 + 1);
        };
        long complete_6 = 0;
        long increment_time_7 = 0;
        long minm_8 = 1000000000;
        long short_9 = 0;
        bool check_10 = false;
        while ((complete_6 != no_of_processes_2)) {
            long j_11 = 0;
            while ((j_11 < no_of_processes_2)) {
                if ((((arrival_time_0[(int)(j_11)] <= increment_time_7) && (remaining_time_3[(int)(j_11)] > 0)) && (remaining_time_3[(int)(j_11)] < minm_8))) {
                    minm_8 = remaining_time_3[(int)(j_11)];
                    short_9 = j_11;
                    check_10 = true;
                }
                j_11 = (j_11 + 1);
            }
            if ((!check_10)) {
                increment_time_7 = (increment_time_7 + 1);
                continue;
            }
            remaining_time_3[short_9] = (remaining_time_3[(int)(short_9)] - 1);
            minm_8 = remaining_time_3[(int)(short_9)];
            if ((minm_8 == 0)) {
                minm_8 = 1000000000;
            }
            if ((remaining_time_3[(int)(short_9)] == 0)) {
                complete_6 = (complete_6 + 1);
                check_10 = false;
                long finish_time_12 = (increment_time_7 + 1);
                long finar_13 = (finish_time_12 - arrival_time_0[(int)(short_9)]);
                waiting_time_5[short_9] = (finar_13 - burst_time_1[(int)(short_9)]);
                if ((waiting_time_5[(int)(short_9)] < 0)) {
                    waiting_time_5[short_9] = 0;
                }
            }
            increment_time_7 = (increment_time_7 + 1);
        };
        return waiting_time_5;
    }

    public static long[] calculate_turnaroundtime(long[] burst_time_14, long no_of_processes_15, long[] waiting_time_16) {
        long[] turn_around_time_17 = new long[]{};
        long i_18 = 0;
        while ((i_18 < no_of_processes_15)) {
            turn_around_time_17 = (Enumerable.ToArray(Enumerable.Append<long>(turn_around_time_17, (burst_time_14[(int)(i_18)] + waiting_time_16[(int)(i_18)]))));
            i_18 = (i_18 + 1);
        };
        return turn_around_time_17;
    }

    public static double to_float(long x_19) {
        return (x_19 * 1.0);
    }

    public static void calculate_average_times(long[] waiting_time_20, long[] turn_around_time_21, long no_of_processes_22) {
        long total_waiting_time_23 = 0;
        long total_turn_around_time_24 = 0;
        long i_25 = 0;
        while ((i_25 < no_of_processes_22)) {
            total_waiting_time_23 = (total_waiting_time_23 + waiting_time_20[(int)(i_25)]);
            total_turn_around_time_24 = (total_turn_around_time_24 + turn_around_time_21[(int)(i_25)]);
            i_25 = (i_25 + 1);
        };
        double avg_wait_26 = (Program.to_float(total_waiting_time_23) / Program.to_float(no_of_processes_22));
        double avg_turn_27 = (Program.to_float(total_turn_around_time_24) / Program.to_float(no_of_processes_22));
        Console.WriteLine(Program._fmtTop(("Average waiting time = " + _fmtStr(avg_wait_26))));
        Console.WriteLine(Program._fmtTop(("Average turn around time = " + _fmtStr(avg_turn_27))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.calculate_waitingtime(new long[]{1, 2, 3, 4}, new long[]{3, 3, 5, 1}, 4)));
            Console.WriteLine(Program._fmtTop(Program.calculate_waitingtime(new long[]{1, 2, 3}, new long[]{2, 5, 1}, 3)));
            Console.WriteLine(Program._fmtTop(Program.calculate_waitingtime(new long[]{2, 3}, new long[]{5, 1}, 2)));
            Console.WriteLine(Program._fmtTop(Program.calculate_turnaroundtime(new long[]{3, 3, 5, 1}, 4, new long[]{0, 3, 5, 0})));
            Console.WriteLine(Program._fmtTop(Program.calculate_turnaroundtime(new long[]{3, 3}, 2, new long[]{0, 3})));
            Console.WriteLine(Program._fmtTop(Program.calculate_turnaroundtime(new long[]{8, 10, 1}, 3, new long[]{1, 0, 3})));
            Program.calculate_average_times(new long[]{0, 3, 5, 0}, new long[]{3, 6, 10, 1}, 4);
            Program.calculate_average_times(new long[]{2, 3}, new long[]{3, 6}, 2);
            Program.calculate_average_times(new long[]{10, 4, 3}, new long[]{2, 7, 6}, 3);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
