// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Vec {
    public double x;
    public double y;
    public override string ToString() => $"Vec {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static Vec VECTOR_1_39 = new Vec{x = 0.0, y = 0.0};
    static Vec VECTOR_2_40 = new Vec{x = 0.5, y = 0.8660254};
    static Vec VECTOR_3_41 = new Vec{x = 1.0, y = 0.0};
    static Vec[] INITIAL_VECTORS_42 = new Vec[]{VECTOR_1_39, VECTOR_2_40, VECTOR_3_41, VECTOR_1_39};
    static Vec[] example_43 = Program.iterate(new Vec[]{VECTOR_1_39, VECTOR_3_41}, 1);
    public static double _mod(double x_2, double m_3) {
        return (x_2 - (Convert.ToDouble(Convert.ToInt64((x_2 / m_3))) * m_3));
    }

    public static double sin(double x_4) {
        double y_5 = (Program._mod((x_4 + PI_0), TWO_PI_1) - PI_0);
        double y2_6 = (y_5 * y_5);
        double y3_7 = (y2_6 * y_5);
        double y5_8 = (y3_7 * y2_6);
        double y7_9 = (y5_8 * y2_6);
        return (((y_5 - (y3_7 / 6.0)) + (y5_8 / 120.0)) - (y7_9 / 5040.0));
    }

    public static double cos(double x_10) {
        double y_11 = (Program._mod((x_10 + PI_0), TWO_PI_1) - PI_0);
        double y2_12 = (y_11 * y_11);
        double y4_13 = (y2_12 * y2_12);
        double y6_14 = (y4_13 * y2_12);
        return (((1.0 - (y2_12 / 2.0)) + (y4_13 / 24.0)) - (y6_14 / 720.0));
    }

    public static Vec rotate(Vec v_15, double angle_deg_16) {
        double theta_17 = ((angle_deg_16 * PI_0) / 180.0);
        double c_18 = Program.cos(theta_17);
        double s_19 = Program.sin(theta_17);
        return new Vec{x = ((v_15.x * c_18) - (v_15.y * s_19)), y = ((v_15.x * s_19) + (v_15.y * c_18))};
    }

    public static Vec[] iteration_step(Vec[] vectors_20) {
        Vec[] new_vectors_21 = new Vec[]{};
        long i_22 = 0;
        while ((i_22 < (vectors_20.Length - 1))) {
            Vec start_23 = vectors_20[(int)(i_22)];
            Vec end_24 = vectors_20[(int)((i_22 + 1))];
            new_vectors_21 = (Enumerable.ToArray(Enumerable.Append<Vec>(new_vectors_21, start_23)));
            double dx_25 = (end_24.x - start_23.x);
            double dy_26 = (end_24.y - start_23.y);
            Vec one_third_27 = new Vec{x = (start_23.x + (dx_25 / 3.0)), y = (start_23.y + (dy_26 / 3.0))};
            Vec mid_28 = Program.rotate(new Vec{x = (dx_25 / 3.0), y = (dy_26 / 3.0)}, 60.0);
            Vec peak_29 = new Vec{x = (one_third_27.x + mid_28.x), y = (one_third_27.y + mid_28.y)};
            Vec two_third_30 = new Vec{x = (start_23.x + ((dx_25 * 2.0) / 3.0)), y = (start_23.y + ((dy_26 * 2.0) / 3.0))};
            new_vectors_21 = (Enumerable.ToArray(Enumerable.Append<Vec>(new_vectors_21, one_third_27)));
            new_vectors_21 = (Enumerable.ToArray(Enumerable.Append<Vec>(new_vectors_21, peak_29)));
            new_vectors_21 = (Enumerable.ToArray(Enumerable.Append<Vec>(new_vectors_21, two_third_30)));
            i_22 = (i_22 + 1);
        };
        new_vectors_21 = (Enumerable.ToArray(Enumerable.Append<Vec>(new_vectors_21, vectors_20[(int)((vectors_20.Length - 1))])));
        return new_vectors_21;
    }

    public static Vec[] iterate(Vec[] initial_31, long steps_32) {
        Vec[] vectors_33 = initial_31;
        long i_34 = 0;
        while ((i_34 < steps_32)) {
            vectors_33 = Program.iteration_step(vectors_33);
            i_34 = (i_34 + 1);
        };
        return vectors_33;
    }

    public static string vec_to_string(Vec v_35) {
        return (((("(" + _fmtStr(v_35.x)) + ", ") + _fmtStr(v_35.y)) + ")");
    }

    public static string vec_list_to_string(Vec[] lst_36) {
        string res_37 = "[";
        long i_38 = 0;
        while ((i_38 < lst_36.Length)) {
            res_37 = (res_37 + Program.vec_to_string(lst_36[(int)(i_38)]));
            if ((i_38 < (lst_36.Length - 1))) {
                res_37 = (res_37 + ", ");
            }
            i_38 = (i_38 + 1);
        };
        res_37 = (res_37 + "]");
        return res_37;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.vec_list_to_string(example_43)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
