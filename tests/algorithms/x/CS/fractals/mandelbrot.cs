// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class RGB {
    public long r;
    public long g;
    public long b;
    public override string ToString() => $"RGB {{r = {r}, g = {g}, b = {b}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static RGB[][] img1_39 = Program.get_image(10, 10, -0.59999999999999998, 0.0, 3.2000000000000002, 50, true);
    public static long round_int(double x_0) {
        return (long)((x_0 + 0.5));
    }

    public static RGB hsv_to_rgb(double h_1, double s_2, double v_3) {
        long i_4 = (long)((h_1 * 6.0));
        double f_5 = ((h_1 * 6.0) - Convert.ToDouble(i_4));
        double p_6 = (v_3 * (1.0 - s_2));
        double q_7 = (v_3 * (1.0 - (f_5 * s_2)));
        double t_8 = (v_3 * (1.0 - ((1.0 - f_5) * s_2)));
        long mod_9 = _mod(i_4, 6);
        double r_10 = 0.0;
        double g_11 = 0.0;
        double b_12 = 0.0;
        if ((mod_9 == 0)) {
            r_10 = v_3;
            g_11 = t_8;
            b_12 = p_6;
        } else if ((mod_9 == 1)) {
            r_10 = q_7;
            g_11 = v_3;
            b_12 = p_6;
        } else if ((mod_9 == 2)) {
            r_10 = p_6;
            g_11 = v_3;
            b_12 = t_8;
        } else if ((mod_9 == 3)) {
            r_10 = p_6;
            g_11 = q_7;
            b_12 = v_3;
        } else if ((mod_9 == 4)) {
            r_10 = t_8;
            g_11 = p_6;
            b_12 = v_3;
        } else {
            r_10 = v_3;
            g_11 = p_6;
            b_12 = q_7;
        };
        return new RGB{r = Program.round_int((r_10 * 255.0)), g = Program.round_int((g_11 * 255.0)), b = Program.round_int((b_12 * 255.0))};
    }

    public static double get_distance(double x_13, double y_14, long max_step_15) {
        double a_16 = x_13;
        double b_17 = y_14;
        long step_18 = -1;
        while ((step_18 < (max_step_15 - 1))) {
            step_18 = (step_18 + 1);
            double a_new_19 = (((a_16 * a_16) - (b_17 * b_17)) + x_13);
            b_17 = (((2.0 * a_16) * b_17) + y_14);
            a_16 = a_new_19;
            if ((((a_16 * a_16) + (b_17 * b_17)) > 4.0)) {
                break;
            }
        };
        return (Convert.ToDouble(step_18) / Convert.ToDouble((max_step_15 - 1)));
    }

    public static RGB get_black_and_white_rgb(double distance_20) {
        if ((distance_20 == 1.0)) {
            return new RGB{r = 0, g = 0, b = 0};
        } else {
            return new RGB{r = 255, g = 255, b = 255};
        };
        return default(RGB);
    }

    public static RGB get_color_coded_rgb(double distance_21) {
        if ((distance_21 == 1.0)) {
            return new RGB{r = 0, g = 0, b = 0};
        } else {
            return Program.hsv_to_rgb(distance_21, 1.0, 1.0);
        };
        return default(RGB);
    }

    public static RGB[][] get_image(long image_width_22, long image_height_23, double figure_center_x_24, double figure_center_y_25, double figure_width_26, long max_step_27, bool use_distance_color_coding_28) {
        RGB[][] img_29 = new RGB[][]{};
        double figure_height_30 = ((figure_width_26 / Convert.ToDouble(image_width_22)) * Convert.ToDouble(image_height_23));
        long image_y_31 = 0;
        while ((image_y_31 < image_height_23)) {
            RGB[] row_32 = new RGB[]{};
            long image_x_33 = 0;
            while ((image_x_33 < image_width_22)) {
                double fx_34 = (figure_center_x_24 + (((Convert.ToDouble(image_x_33) / Convert.ToDouble(image_width_22)) - 0.5) * figure_width_26));
                double fy_35 = (figure_center_y_25 + (((Convert.ToDouble(image_y_31) / Convert.ToDouble(image_height_23)) - 0.5) * figure_height_30));
                double distance_36 = Program.get_distance(fx_34, fy_35, max_step_27);
                RGB rgb_37 = new RGB();
                if (use_distance_color_coding_28) {
                    rgb_37 = Program.get_color_coded_rgb(distance_36);
                } else {
                    rgb_37 = Program.get_black_and_white_rgb(distance_36);
                }
                row_32 = ((Func<RGB[]>)(() => { var _tmp = row_32.ToList(); _tmp.Add(rgb_37); return _tmp.ToArray(); }))();
                image_x_33 = (image_x_33 + 1);
            }
            img_29 = ((Func<RGB[][]>)(() => { var _tmp = img_29.ToList(); _tmp.Add(row_32); return _tmp.ToArray(); }))();
            image_y_31 = (image_y_31 + 1);
        };
        return img_29;
    }

    public static string rgb_to_string(RGB c_38) {
        return (((((("(" + _fmtStr(c_38.r)) + ", ") + _fmtStr(c_38.g)) + ", ") + _fmtStr(c_38.b)) + ")");
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.rgb_to_string(_idx(_idx(img1_39, 0), 0))));
            RGB[][] img2_40 = Program.get_image(10, 10, -0.59999999999999998, 0.0, 3.2000000000000002, 50, false);
            Console.WriteLine(Program._fmtTop(Program.rgb_to_string(_idx(_idx(img2_40, 0), 0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
