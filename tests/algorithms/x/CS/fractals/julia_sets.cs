// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Complex complex_add(Complex a_0, Complex b_1) {
        return new Complex{re = (a_0.re + b_1.re), im = (a_0.im + b_1.im)};
    }

    public static Complex complex_mul(Complex a_2, Complex b_3) {
        double real_4 = ((a_2.re * b_3.re) - (a_2.im * b_3.im));
        double imag_5 = ((a_2.re * b_3.im) + (a_2.im * b_3.re));
        return new Complex{re = real_4, im = imag_5};
    }

    public static double sqrtApprox(double x_6) {
        double guess_7 = (x_6 / 2.0);
        long i_8 = 0;
        while ((i_8 < 20)) {
            guess_7 = ((guess_7 + (x_6 / guess_7)) / 2.0);
            i_8 = (i_8 + 1);
        };
        return guess_7;
    }

    public static double complex_abs(Complex a_9) {
        return Program.sqrtApprox(((a_9.re * a_9.re) + (a_9.im * a_9.im)));
    }

    public static double sin_taylor(double x_10) {
        double term_11 = x_10;
        double sum_12 = x_10;
        long i_13 = 1;
        while ((i_13 < 10)) {
            double k1_14 = (2.0 * Convert.ToDouble(i_13));
            double k2_15 = ((2.0 * Convert.ToDouble(i_13)) + 1.0);
            term_11 = (((-term_11 * x_10) * x_10) / (k1_14 * k2_15));
            sum_12 = (sum_12 + term_11);
            i_13 = (i_13 + 1);
        };
        return sum_12;
    }

    public static double cos_taylor(double x_16) {
        double term_17 = 1.0;
        double sum_18 = 1.0;
        long i_19 = 1;
        while ((i_19 < 10)) {
            double k1_20 = ((2.0 * Convert.ToDouble(i_19)) - 1.0);
            double k2_21 = (2.0 * Convert.ToDouble(i_19));
            term_17 = (((-term_17 * x_16) * x_16) / (k1_20 * k2_21));
            sum_18 = (sum_18 + term_17);
            i_19 = (i_19 + 1);
        };
        return sum_18;
    }

    public static double exp_taylor(double x_22) {
        double term_23 = 1.0;
        double sum_24 = 1.0;
        double i_25 = 1.0;
        while ((i_25 < 20.0)) {
            term_23 = ((term_23 * x_22) / i_25);
            sum_24 = (sum_24 + term_23);
            i_25 = (i_25 + 1.0);
        };
        return sum_24;
    }

    public static Complex complex_exp(Complex z_26) {
        double e_27 = Program.exp_taylor(z_26.re);
        return new Complex{re = (e_27 * Program.cos_taylor(z_26.im)), im = (e_27 * Program.sin_taylor(z_26.im))};
    }

    public static Complex eval_quadratic(Complex c_28, Complex z_29) {
        return Program.complex_add(Program.complex_mul(z_29, z_29), c_28);
    }

    public static Complex eval_exponential(Complex c_30, Complex z_31) {
        return Program.complex_add(Program.complex_exp(z_31), c_30);
    }

    public static Complex iterate_function(Func<Complex, Complex, Complex> eval_function_32, Complex c_33, long nb_iterations_34, Complex z0_35, double infinity_36) {
        Complex z_n_37 = z0_35;
        long i_38 = 0;
        while ((i_38 < nb_iterations_34)) {
            z_n_37 = eval_function_32(c_33, z_n_37);
            if ((Program.complex_abs(z_n_37) > infinity_36)) {
                return z_n_37;
            }
            i_38 = (i_38 + 1);
        };
        return z_n_37;
    }

    public static Complex[][] prepare_grid(double window_size_39, long nb_pixels_40) {
        Complex[][] grid_41 = new Complex[][]{};
        long i_42 = 0;
        while ((i_42 < nb_pixels_40)) {
            Complex[] row_43 = new Complex[]{};
            long j_44 = 0;
            while ((j_44 < nb_pixels_40)) {
                double real_45 = (-window_size_39 + (((2.0 * window_size_39) * Convert.ToDouble(i_42)) / Convert.ToDouble((nb_pixels_40 - 1))));
                double imag_46 = (-window_size_39 + (((2.0 * window_size_39) * Convert.ToDouble(j_44)) / Convert.ToDouble((nb_pixels_40 - 1))));
                row_43 = (Enumerable.ToArray(Enumerable.Append<Complex>(row_43, new Complex{re = real_45, im = imag_46})));
                j_44 = (j_44 + 1);
            }
            grid_41 = (Enumerable.ToArray(Enumerable.Append<Complex[]>(grid_41, row_43)));
            i_42 = (i_42 + 1);
        };
        return grid_41;
    }

    public static void julia_demo() {
        Complex[][] grid_47 = Program.prepare_grid(1.0, 5);
        Complex c_poly_48 = new Complex{re = -0.4, im = 0.6};
        Complex c_exp_49 = new Complex{re = -2.0, im = 0.0};
        long[][] poly_result_50 = new long[][]{};
        long[][] exp_result_51 = new long[][]{};
        long y_52 = 0;
        while ((y_52 < grid_47.Length)) {
            long[] row_poly_53 = new long[]{};
            long[] row_exp_54 = new long[]{};
            long x_55 = 0;
            while ((x_55 < grid_47[(int)(y_52)].Length)) {
                Complex z0_56 = grid_47[(int)(y_52)][(int)(x_55)];
                Complex z_poly_57 = Program.iterate_function(eval_quadratic, c_poly_48, 20, z0_56, 4.0);
                Complex z_exp_58 = Program.iterate_function(eval_exponential, c_exp_49, 10, z0_56, 1e+10);
                row_poly_53 = (Enumerable.ToArray(Enumerable.Append<long>(row_poly_53, ((Program.complex_abs(z_poly_57) < 2.0) ? 1 : 0))));
                row_exp_54 = (Enumerable.ToArray(Enumerable.Append<long>(row_exp_54, ((Program.complex_abs(z_exp_58) < 10000.0) ? 1 : 0))));
                x_55 = (x_55 + 1);
            }
            poly_result_50 = (Enumerable.ToArray(Enumerable.Append<long[]>(poly_result_50, row_poly_53)));
            exp_result_51 = (Enumerable.ToArray(Enumerable.Append<long[]>(exp_result_51, row_exp_54)));
            y_52 = (y_52 + 1);
        };
        Console.WriteLine(Program._fmtTop(poly_result_50));
        Console.WriteLine(Program._fmtTop(exp_result_51));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.julia_demo();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
