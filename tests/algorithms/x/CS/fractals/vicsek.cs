// Generated by Mochi 0.10.64 (commit 1f50014211) on 2025-08-13 15:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string repeat_char(string c_0, long count_1) {
        string s_2 = "";
        long i_3 = 0;
        while ((i_3 < count_1)) {
            s_2 = (s_2 + c_0);
            i_3 = (i_3 + 1);
        };
        return s_2;
    }

    public static string[] vicsek(long order_4) {
        if ((order_4 == 0)) {
            return new string[]{"#"};
        };
        string[] prev_5 = Program.vicsek((order_4 - 1));
        long size_6 = prev_5.Length;
        string blank_7 = Program.repeat_char(" ", size_6);
        string[] result_8 = new string[]{};
        long i_9 = 0;
        while ((i_9 < size_6)) {
            result_8 = ((Func<string[]>)(() => { var _tmp = result_8.ToList(); _tmp.Add(((blank_7 + _idx(prev_5, i_9)) + blank_7)); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        i_9 = 0;
        while ((i_9 < size_6)) {
            result_8 = ((Func<string[]>)(() => { var _tmp = result_8.ToList(); _tmp.Add(((_idx(prev_5, i_9) + _idx(prev_5, i_9)) + _idx(prev_5, i_9))); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        i_9 = 0;
        while ((i_9 < size_6)) {
            result_8 = ((Func<string[]>)(() => { var _tmp = result_8.ToList(); _tmp.Add(((blank_7 + _idx(prev_5, i_9)) + blank_7)); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static void print_pattern(string[] pattern_10) {
        long i_11 = 0;
        while ((i_11 < pattern_10.Length)) {
            Console.WriteLine(Program._fmtTop(_idx(pattern_10, i_11)));
            i_11 = (i_11 + 1);
        };
    }

    public static void main() {
        long depth_12 = 3;
        string[] pattern_13 = Program.vicsek(depth_12);
        Program.print_pattern(pattern_13);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
