// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string repeat_char(string c_0, long count_1) {
        string s_2 = "";
        long i_3 = 0;
        while ((i_3 < count_1)) {
            s_2 = (s_2 + c_0);
            i_3 = (i_3 + 1);
        };
        return s_2;
    }

    public static string[] vicsek(long order_4) {
        if ((order_4 == 0)) {
            return new string[]{"#"};
        };
        string[] prev_5 = Program.vicsek((order_4 - 1));
        long size_6 = prev_5.Length;
        string blank_7 = Program.repeat_char(" ", size_6);
        string[] result_8 = new string[]{};
        long i_9 = 0;
        while ((i_9 < size_6)) {
            result_8 = (Enumerable.ToArray(Enumerable.Append<string>(result_8, ((blank_7 + prev_5[(int)(i_9)]) + blank_7))));
            i_9 = (i_9 + 1);
        };
        i_9 = 0;
        while ((i_9 < size_6)) {
            result_8 = (Enumerable.ToArray(Enumerable.Append<string>(result_8, ((prev_5[(int)(i_9)] + prev_5[(int)(i_9)]) + prev_5[(int)(i_9)]))));
            i_9 = (i_9 + 1);
        };
        i_9 = 0;
        while ((i_9 < size_6)) {
            result_8 = (Enumerable.ToArray(Enumerable.Append<string>(result_8, ((blank_7 + prev_5[(int)(i_9)]) + blank_7))));
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static void print_pattern(string[] pattern_10) {
        long i_11 = 0;
        while ((i_11 < pattern_10.Length)) {
            Console.WriteLine(Program._fmtTop(pattern_10[(int)(i_11)]));
            i_11 = (i_11 + 1);
        };
    }

    public static void main() {
        long depth_12 = 3;
        string[] pattern_13 = Program.vicsek(depth_12);
        Program.print_pattern(pattern_13);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
