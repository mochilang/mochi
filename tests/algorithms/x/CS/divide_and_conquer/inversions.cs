// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class InvResult {
    public long[] arr;
    public long inv;
    public override string ToString() => $"InvResult {{arr = {arr}, inv = {inv}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static object[] arr_1_24 = new long[]{10, 2, 1, 5, 5, 2, 11};
    static long nbf_25 = Program.count_inversions_bf(arr_1_24);
    static long nrec_26 = Program.count_inversions_recursive(arr_1_24).inv;
    public static long[] slice_list(long[] arr_0, long start_1, long end_2) {
        long[] res_3 = new long[]{};
        long k_4 = start_1;
        while ((k_4 < end_2)) {
            res_3 = (Enumerable.ToArray(Enumerable.Append<long>(res_3, arr_0[(int)(k_4)])));
            k_4 = (k_4 + 1);
        };
        return res_3;
    }

    public static long count_inversions_bf(long[] arr_5) {
        long n_6 = arr_5.Length;
        long inv_7 = 0;
        long i_8 = 0;
        while ((i_8 < (n_6 - 1))) {
            long j_9 = (i_8 + 1);
            while ((j_9 < n_6)) {
                if ((arr_5[(int)(i_8)] > arr_5[(int)(j_9)])) {
                    inv_7 = (inv_7 + 1);
                }
                j_9 = (j_9 + 1);
            }
            i_8 = (i_8 + 1);
        };
        return inv_7;
    }

    public static InvResult count_cross_inversions(long[] p_10, long[] q_11) {
        long[] r_12 = new long[]{};
        long i_13 = 0;
        long j_14 = 0;
        long inv_15 = 0;
        while (((i_13 < p_10.Length) && (j_14 < q_11.Length))) {
            if ((p_10[(int)(i_13)] > q_11[(int)(j_14)])) {
                inv_15 = (inv_15 + (p_10.Length - i_13));
                r_12 = (Enumerable.ToArray(Enumerable.Append<long>(r_12, q_11[(int)(j_14)])));
                j_14 = (j_14 + 1);
            } else {
                r_12 = (Enumerable.ToArray(Enumerable.Append<long>(r_12, p_10[(int)(i_13)])));
                i_13 = (i_13 + 1);
            }
        };
        if ((i_13 < p_10.Length)) {
            r_12 = (Enumerable.ToArray(Enumerable.Concat(r_12, Program.slice_list(p_10, i_13, p_10.Length))));
        } else {
            r_12 = (Enumerable.ToArray(Enumerable.Concat(r_12, Program.slice_list(q_11, j_14, q_11.Length))));
        };
        return new InvResult{arr = r_12, inv = inv_15};
    }

    public static InvResult count_inversions_recursive(long[] arr_16) {
        if ((arr_16.Length <= 1)) {
            return new InvResult{arr = arr_16, inv = 0};
        };
        long mid_17 = (arr_16.Length / 2);
        long[] p_18 = Program.slice_list(arr_16, 0, mid_17);
        long[] q_19 = Program.slice_list(arr_16, mid_17, arr_16.Length);
        InvResult res_p_20 = Program.count_inversions_recursive(p_18);
        InvResult res_q_21 = Program.count_inversions_recursive(q_19);
        InvResult res_cross_22 = Program.count_cross_inversions(res_p_20.arr, res_q_21.arr);
        long total_23 = ((res_p_20.inv + res_q_21.inv) + res_cross_22.inv);
        return new InvResult{arr = res_cross_22.arr, inv = total_23};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("number of inversions = "), Program._fmtTop(nbf_25)}));
            arr_1_24 = new long[]{1, 2, 2, 5, 5, 10, 11};
            long nbf2_27 = Program.count_inversions_bf(arr_1_24);
            long nrec2_28 = Program.count_inversions_recursive(arr_1_24).inv;
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("number of inversions = "), Program._fmtTop(nbf2_27)}));
            arr_1_24 = new object[]{};
            long nbf3_29 = Program.count_inversions_bf(Enumerable.ToArray(arr_1_24.Select(x => Convert.ToInt64(x))));
            long nrec3_30 = Program.count_inversions_recursive(Enumerable.ToArray(arr_1_24.Select(x => Convert.ToInt64(x)))).inv;
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("number of inversions = "), Program._fmtTop(nbf3_29)}));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
