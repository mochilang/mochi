// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Point {
    public long x;
    public long y;
    public override string ToString() => $"Point {{x = {x}, y = {y}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static long cross(Point o_0, Point a_1, Point b_2) {
        return (((a_1.x - o_0.x) * (b_2.y - o_0.y)) - ((a_1.y - o_0.y) * (b_2.x - o_0.x)));
    }

    public static Point[] sortPoints(Point[] ps_3) {
        Point[] arr_4 = ps_3;
        long n_5 = arr_4.Length;
        long i_6 = 0;
        while ((i_6 < n_5)) {
            long j_7 = 0;
            while ((j_7 < (n_5 - 1))) {
                Point p_8 = arr_4[(int)(j_7)];
                Point q_9 = arr_4[(int)((j_7 + 1))];
                if (((p_8.x > q_9.x) || ((p_8.x == q_9.x) && (p_8.y > q_9.y)))) {
                    arr_4[j_7] = q_9;
                    arr_4[(j_7 + 1)] = p_8;
                }
                j_7 = (j_7 + 1);
            }
            i_6 = (i_6 + 1);
        };
        return arr_4;
    }

    public static Point[] convex_hull(Point[] ps_10) {
        ps_10 = Program.sortPoints(ps_10);
        Point[] lower_11 = new Point[]{};
        foreach (Point p_12 in ps_10) {
            while (((lower_11.Length >= 2) && (Program.cross(lower_11[(int)((lower_11.Length - 2))], lower_11[(int)((lower_11.Length - 1))], p_12) <= 0))) {
                lower_11 = lower_11.Skip((int)(0)).Take((int)(((lower_11.Length - 1) - 0))).ToArray();
            }
            lower_11 = (Enumerable.ToArray(Enumerable.Append<Point>(lower_11, p_12)));
        };
        Point[] upper_13 = new Point[]{};
        long i_14 = (ps_10.Length - 1);
        while ((i_14 >= 0)) {
            Point p_15 = ps_10[(int)(i_14)];
            while (((upper_13.Length >= 2) && (Program.cross(upper_13[(int)((upper_13.Length - 2))], upper_13[(int)((upper_13.Length - 1))], p_15) <= 0))) {
                upper_13 = upper_13.Skip((int)(0)).Take((int)(((upper_13.Length - 1) - 0))).ToArray();
            }
            upper_13 = (Enumerable.ToArray(Enumerable.Append<Point>(upper_13, p_15)));
            i_14 = (i_14 - 1);
        };
        Point[] hull_16 = lower_11.Skip((int)(0)).Take((int)(((lower_11.Length - 1) - 0))).ToArray();
        long j_17 = 0;
        while ((j_17 < (upper_13.Length - 1))) {
            hull_16 = (Enumerable.ToArray(Enumerable.Append<Point>(hull_16, upper_13[(int)(j_17)])));
            j_17 = (j_17 + 1);
        };
        return hull_16;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
