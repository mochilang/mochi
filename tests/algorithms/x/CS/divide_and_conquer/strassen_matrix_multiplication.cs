// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] default_matrix_multiplication(long[][] a_0, long[][] b_1) {
        return new long[][]{new long[]{((a_0[(int)(0)][(int)(0)] * b_1[(int)(0)][(int)(0)]) + (a_0[(int)(0)][(int)(1)] * b_1[(int)(1)][(int)(0)])), ((a_0[(int)(0)][(int)(0)] * b_1[(int)(0)][(int)(1)]) + (a_0[(int)(0)][(int)(1)] * b_1[(int)(1)][(int)(1)]))}, new long[]{((a_0[(int)(1)][(int)(0)] * b_1[(int)(0)][(int)(0)]) + (a_0[(int)(1)][(int)(1)] * b_1[(int)(1)][(int)(0)])), ((a_0[(int)(1)][(int)(0)] * b_1[(int)(0)][(int)(1)]) + (a_0[(int)(1)][(int)(1)] * b_1[(int)(1)][(int)(1)]))}};
    }

    public static long[][] matrix_addition(long[][] matrix_a_2, long[][] matrix_b_3) {
        long[][] result_4 = new long[][]{};
        long i_5 = 0;
        while ((i_5 < matrix_a_2.Length)) {
            long[] row_6 = new long[]{};
            long j_7 = 0;
            while ((j_7 < matrix_a_2[(int)(i_5)].Length)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<long>(row_6, (matrix_a_2[(int)(i_5)][(int)(j_7)] + matrix_b_3[(int)(i_5)][(int)(j_7)]))));
                j_7 = (j_7 + 1);
            }
            result_4 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_4, row_6)));
            i_5 = (i_5 + 1);
        };
        return result_4;
    }

    public static long[][] matrix_subtraction(long[][] matrix_a_8, long[][] matrix_b_9) {
        long[][] result_10 = new long[][]{};
        long i_11 = 0;
        while ((i_11 < matrix_a_8.Length)) {
            long[] row_12 = new long[]{};
            long j_13 = 0;
            while ((j_13 < matrix_a_8[(int)(i_11)].Length)) {
                row_12 = (Enumerable.ToArray(Enumerable.Append<long>(row_12, (matrix_a_8[(int)(i_11)][(int)(j_13)] - matrix_b_9[(int)(i_11)][(int)(j_13)]))));
                j_13 = (j_13 + 1);
            }
            result_10 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_10, row_12)));
            i_11 = (i_11 + 1);
        };
        return result_10;
    }

    public static long[][][] split_matrix(long[][] a_14) {
        long n_15 = a_14.Length;
        long mid_16 = (n_15 / 2);
        long[][] top_left_17 = new long[][]{};
        long[][] top_right_18 = new long[][]{};
        long[][] bot_left_19 = new long[][]{};
        long[][] bot_right_20 = new long[][]{};
        long i_21 = 0;
        while ((i_21 < mid_16)) {
            long[] left_row_22 = new long[]{};
            long[] right_row_23 = new long[]{};
            long j_24 = 0;
            while ((j_24 < mid_16)) {
                left_row_22 = (Enumerable.ToArray(Enumerable.Append<long>(left_row_22, a_14[(int)(i_21)][(int)(j_24)])));
                right_row_23 = (Enumerable.ToArray(Enumerable.Append<long>(right_row_23, a_14[(int)(i_21)][(int)((j_24 + mid_16))])));
                j_24 = (j_24 + 1);
            }
            top_left_17 = (Enumerable.ToArray(Enumerable.Append<long[]>(top_left_17, left_row_22)));
            top_right_18 = (Enumerable.ToArray(Enumerable.Append<long[]>(top_right_18, right_row_23)));
            i_21 = (i_21 + 1);
        };
        i_21 = mid_16;
        while ((i_21 < n_15)) {
            long[] left_row_25 = new long[]{};
            long[] right_row_26 = new long[]{};
            long j_27 = 0;
            while ((j_27 < mid_16)) {
                left_row_25 = (Enumerable.ToArray(Enumerable.Append<long>(left_row_25, a_14[(int)(i_21)][(int)(j_27)])));
                right_row_26 = (Enumerable.ToArray(Enumerable.Append<long>(right_row_26, a_14[(int)(i_21)][(int)((j_27 + mid_16))])));
                j_27 = (j_27 + 1);
            }
            bot_left_19 = (Enumerable.ToArray(Enumerable.Append<long[]>(bot_left_19, left_row_25)));
            bot_right_20 = (Enumerable.ToArray(Enumerable.Append<long[]>(bot_right_20, right_row_26)));
            i_21 = (i_21 + 1);
        };
        return new long[][][]{top_left_17, top_right_18, bot_left_19, bot_right_20};
    }

    public static long[] matrix_dimensions(long[][] matrix_28) {
        return new long[]{matrix_28.Length, matrix_28[(int)(0)].Length};
    }

    public static long next_power_of_two(long n_29) {
        long p_30 = 1;
        while ((p_30 < n_29)) {
            p_30 = (p_30 * 2);
        };
        return p_30;
    }

    public static long[][] pad_matrix(long[][] mat_31, long rows_32, long cols_33) {
        long[][] res_34 = new long[][]{};
        long i_35 = 0;
        while ((i_35 < rows_32)) {
            long[] row_36 = new long[]{};
            long j_37 = 0;
            while ((j_37 < cols_33)) {
                long v_38 = 0;
                if (((i_35 < mat_31.Length) && (j_37 < mat_31[(int)(0)].Length))) {
                    v_38 = mat_31[(int)(i_35)][(int)(j_37)];
                }
                row_36 = (Enumerable.ToArray(Enumerable.Append<long>(row_36, v_38)));
                j_37 = (j_37 + 1);
            }
            res_34 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_34, row_36)));
            i_35 = (i_35 + 1);
        };
        return res_34;
    }

    public static long[][] actual_strassen(long[][] matrix_a_39, long[][] matrix_b_40) {
        if ((Program.matrix_dimensions(matrix_a_39)[(int)(0)] == 2)) {
            return Program.default_matrix_multiplication(matrix_a_39, matrix_b_40);
        };
        long[][][] parts_a_41 = Program.split_matrix(matrix_a_39);
        long[][] a_42 = parts_a_41[(int)(0)];
        long[][] b_43 = parts_a_41[(int)(1)];
        long[][] c_44 = parts_a_41[(int)(2)];
        long[][] d_45 = parts_a_41[(int)(3)];
        long[][][] parts_b_46 = Program.split_matrix(matrix_b_40);
        long[][] e_47 = parts_b_46[(int)(0)];
        long[][] f_48 = parts_b_46[(int)(1)];
        long[][] g_49 = parts_b_46[(int)(2)];
        long[][] h_50 = parts_b_46[(int)(3)];
        long[][] t1_51 = Program.actual_strassen(a_42, Program.matrix_subtraction(f_48, h_50));
        long[][] t2_52 = Program.actual_strassen(Program.matrix_addition(a_42, b_43), h_50);
        long[][] t3_53 = Program.actual_strassen(Program.matrix_addition(c_44, d_45), e_47);
        long[][] t4_54 = Program.actual_strassen(d_45, Program.matrix_subtraction(g_49, e_47));
        long[][] t5_55 = Program.actual_strassen(Program.matrix_addition(a_42, d_45), Program.matrix_addition(e_47, h_50));
        long[][] t6_56 = Program.actual_strassen(Program.matrix_subtraction(b_43, d_45), Program.matrix_addition(g_49, h_50));
        long[][] t7_57 = Program.actual_strassen(Program.matrix_subtraction(a_42, c_44), Program.matrix_addition(e_47, f_48));
        long[][] top_left_58 = Program.matrix_addition(Program.matrix_subtraction(Program.matrix_addition(t5_55, t4_54), t2_52), t6_56);
        long[][] top_right_59 = Program.matrix_addition(t1_51, t2_52);
        long[][] bot_left_60 = Program.matrix_addition(t3_53, t4_54);
        long[][] bot_right_61 = Program.matrix_subtraction(Program.matrix_subtraction(Program.matrix_addition(t1_51, t5_55), t3_53), t7_57);
        long[][] new_matrix_62 = new long[][]{};
        long i_63 = 0;
        while ((i_63 < top_right_59.Length)) {
            new_matrix_62 = (Enumerable.ToArray(Enumerable.Append<long[]>(new_matrix_62, (Enumerable.ToArray(Enumerable.Concat(top_left_58[(int)(i_63)], top_right_59[(int)(i_63)]))))));
            i_63 = (i_63 + 1);
        };
        i_63 = 0;
        while ((i_63 < bot_right_61.Length)) {
            new_matrix_62 = (Enumerable.ToArray(Enumerable.Append<long[]>(new_matrix_62, (Enumerable.ToArray(Enumerable.Concat(bot_left_60[(int)(i_63)], bot_right_61[(int)(i_63)]))))));
            i_63 = (i_63 + 1);
        };
        return new_matrix_62;
    }

    public static long[][] strassen(long[][] matrix1_64, long[][] matrix2_65) {
        long[] dims1_66 = Program.matrix_dimensions(matrix1_64);
        long[] dims2_67 = Program.matrix_dimensions(matrix2_65);
        if ((dims1_66[(int)(1)] != dims2_67[(int)(0)])) {
            return new long[][]{};
        };
        long maximum_68 = Convert.ToInt64((new long[]{dims1_66[(int)(0)], dims1_66[(int)(1)], dims2_67[(int)(0)], dims2_67[(int)(1)]}.Max()));
        long size_69 = Program.next_power_of_two(maximum_68);
        long[][] new_matrix1_70 = Program.pad_matrix(matrix1_64, size_69, size_69);
        long[][] new_matrix2_71 = Program.pad_matrix(matrix2_65, size_69, size_69);
        long[][] result_padded_72 = Program.actual_strassen(new_matrix1_70, new_matrix2_71);
        long[][] final_matrix_73 = new long[][]{};
        long i_74 = 0;
        while ((i_74 < dims1_66[(int)(0)])) {
            long[] row_75 = new long[]{};
            long j_76 = 0;
            while ((j_76 < dims2_67[(int)(1)])) {
                row_75 = (Enumerable.ToArray(Enumerable.Append<long>(row_75, result_padded_72[(int)(i_74)][(int)(j_76)])));
                j_76 = (j_76 + 1);
            }
            final_matrix_73 = (Enumerable.ToArray(Enumerable.Append<long[]>(final_matrix_73, row_75)));
            i_74 = (i_74 + 1);
        };
        return final_matrix_73;
    }

    public static void main() {
        long[][] matrix1_77 = new long[][]{new long[]{2, 3, 4, 5}, new long[]{6, 4, 3, 1}, new long[]{2, 3, 6, 7}, new long[]{3, 1, 2, 4}, new long[]{2, 3, 4, 5}, new long[]{6, 4, 3, 1}, new long[]{2, 3, 6, 7}, new long[]{3, 1, 2, 4}, new long[]{2, 3, 4, 5}, new long[]{6, 2, 3, 1}};
        long[][] matrix2_78 = new long[][]{new long[]{0, 2, 1, 1}, new long[]{16, 2, 3, 3}, new long[]{2, 2, 7, 7}, new long[]{13, 11, 22, 4}};
        long[][] res_79 = Program.strassen(matrix1_77, matrix2_78);
        Console.WriteLine(Program._fmtTop(res_79));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
