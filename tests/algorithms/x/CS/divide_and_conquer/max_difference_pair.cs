// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long min_slice(long[] a_0, long start_1, long end_2) {
        long m_3 = a_0[(int)(start_1)];
        long i_4 = (start_1 + 1);
        while ((i_4 < end_2)) {
            if ((a_0[(int)(i_4)] < m_3)) {
                m_3 = a_0[(int)(i_4)];
            }
            i_4 = (i_4 + 1);
        };
        return m_3;
    }

    public static long max_slice(long[] a_5, long start_6, long end_7) {
        long m_8 = a_5[(int)(start_6)];
        long i_9 = (start_6 + 1);
        while ((i_9 < end_7)) {
            if ((a_5[(int)(i_9)] > m_8)) {
                m_8 = a_5[(int)(i_9)];
            }
            i_9 = (i_9 + 1);
        };
        return m_8;
    }

    public static long[] max_diff_range(long[] a_10, long start_11, long end_12) {
        if (((end_12 - start_11) == 1)) {
            long v_13 = a_10[(int)(start_11)];
            return new long[]{v_13, v_13};
        };
        long mid_14 = ((start_11 + end_12) / 2);
        long[] left_15 = Program.max_diff_range(a_10, start_11, mid_14);
        long[] right_16 = Program.max_diff_range(a_10, mid_14, end_12);
        long small1_17 = left_15[(int)(0)];
        long big1_18 = left_15[(int)(1)];
        long small2_19 = right_16[(int)(0)];
        long big2_20 = right_16[(int)(1)];
        long min_left_21 = Program.min_slice(a_10, start_11, mid_14);
        long max_right_22 = Program.max_slice(a_10, mid_14, end_12);
        long cross_diff_23 = (max_right_22 - min_left_21);
        long left_diff_24 = (big1_18 - small1_17);
        long right_diff_25 = (big2_20 - small2_19);
        if (((right_diff_25 > cross_diff_23) && (right_diff_25 > left_diff_24))) {
            return new long[]{small2_19, big2_20};
        } else if ((left_diff_24 > cross_diff_23)) {
            return new long[]{small1_17, big1_18};
        } else {
            return new long[]{min_left_21, max_right_22};
        };
        return default(long[]);
    }

    public static long[] max_difference(long[] a_26) {
        return Program.max_diff_range(a_26, 0, a_26.Length);
    }

    public static void main() {
        long[] result_27 = Program.max_difference(new long[]{5, 11, 2, 1, 7, 9, 0, 7});
        Console.WriteLine(Program._fmtTop(_fmtStr(result_27)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
