// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Result {
    public long start;
    public long end;
    public double sum;
    public override string ToString() => $"Result {{start = {start}, end = {end}, sum = {sum.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Result max_cross_sum(double[] arr_0, long low_1, long mid_2, long high_3) {
        double left_sum_4 = -1e18;
        long max_left_5 = -1;
        double sum_6 = 0.0;
        long i_7 = mid_2;
        while ((i_7 >= low_1)) {
            sum_6 = (sum_6 + arr_0[(int)(i_7)]);
            if ((sum_6 > left_sum_4)) {
                left_sum_4 = sum_6;
                max_left_5 = i_7;
            }
            i_7 = (i_7 - 1);
        };
        double right_sum_8 = -1e18;
        long max_right_9 = -1;
        sum_6 = 0.0;
        i_7 = (mid_2 + 1);
        while ((i_7 <= high_3)) {
            sum_6 = (sum_6 + arr_0[(int)(i_7)]);
            if ((sum_6 > right_sum_8)) {
                right_sum_8 = sum_6;
                max_right_9 = i_7;
            }
            i_7 = (i_7 + 1);
        };
        return new Result{start = max_left_5, end = max_right_9, sum = (left_sum_4 + right_sum_8)};
    }

    public static Result max_subarray(double[] arr_10, long low_11, long high_12) {
        if ((arr_10.Length == 0)) {
            return new Result{start = -1, end = -1, sum = 0.0};
        };
        if ((low_11 == high_12)) {
            return new Result{start = low_11, end = high_12, sum = arr_10[(int)(low_11)]};
        };
        long mid_13 = ((low_11 + high_12) / 2);
        Result left_14 = Program.max_subarray(arr_10, low_11, mid_13);
        Result right_15 = Program.max_subarray(arr_10, (mid_13 + 1), high_12);
        Result cross_16 = Program.max_cross_sum(arr_10, low_11, mid_13, high_12);
        if (((left_14.sum >= right_15.sum) && (left_14.sum >= cross_16.sum))) {
            return left_14;
        };
        if (((right_15.sum >= left_14.sum) && (right_15.sum >= cross_16.sum))) {
            return right_15;
        };
        return cross_16;
    }

    public static void show(Result res_17) {
        Console.WriteLine(Program._fmtTop((((((("[" + _fmtStr(res_17.start)) + ", ") + _fmtStr(res_17.end)) + ", ") + _fmtStr(res_17.sum)) + "]")));
    }

    public static void main() {
        double[] nums1_18 = new double[]{-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0};
        Result res1_19 = Program.max_subarray(nums1_18, 0, (nums1_18.Length - 1));
        Program.show(res1_19);
        double[] nums2_20 = new double[]{2.0, 8.0, 9.0};
        Result res2_21 = Program.max_subarray(nums2_20, 0, (nums2_20.Length - 1));
        Program.show(res2_21);
        double[] nums3_22 = new double[]{0.0, 0.0};
        Result res3_23 = Program.max_subarray(nums3_22, 0, (nums3_22.Length - 1));
        Program.show(res3_23);
        double[] nums4_24 = new double[]{-1.0, 0.0, 1.0};
        Result res4_25 = Program.max_subarray(nums4_24, 0, (nums4_24.Length - 1));
        Program.show(res4_25);
        double[] nums5_26 = new double[]{-2.0, -3.0, -1.0, -4.0, -6.0};
        Result res5_27 = Program.max_subarray(nums5_26, 0, (nums5_26.Length - 1));
        Program.show(res5_27);
        double[] nums6_28 = new double[]{};
        Result res6_29 = Program.max_subarray(nums6_28, 0, 0);
        Program.show(res6_29);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
