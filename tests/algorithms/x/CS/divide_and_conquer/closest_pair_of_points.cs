// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] points_43 = new double[][]{new double[]{2.0, 3.0}, new double[]{12.0, 30.0}, new double[]{40.0, 50.0}, new double[]{5.0, 1.0}, new double[]{12.0, 10.0}, new double[]{3.0, 4.0}};
    public static double abs(double x_0) {
        if ((x_0 < 0.0)) {
            return (0.0 - x_0);
        };
        return x_0;
    }

    public static double sqrtApprox(double x_1) {
        double guess_2 = x_1;
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double euclidean_distance_sqr(double[] p1_4, double[] p2_5) {
        double dx_6 = (p1_4[(int)(0)] - p2_5[(int)(0)]);
        double dy_7 = (p1_4[(int)(1)] - p2_5[(int)(1)]);
        return ((dx_6 * dx_6) + (dy_7 * dy_7));
    }

    public static double[][] column_based_sort(double[][] arr_8, long column_9) {
        double[][] points_10 = arr_8;
        long i_11 = 0;
        while ((i_11 < points_10.Length)) {
            long j_12 = 0;
            while ((j_12 < (points_10.Length - 1))) {
                if ((points_10[(int)(j_12)][(int)(column_9)] > points_10[(int)((j_12 + 1))][(int)(column_9)])) {
                    double[] tmp_13 = points_10[(int)(j_12)];
                    points_10[j_12] = points_10[(int)((j_12 + 1))];
                    points_10[(j_12 + 1)] = tmp_13;
                }
                j_12 = (j_12 + 1);
            }
            i_11 = (i_11 + 1);
        };
        return points_10;
    }

    public static double dis_between_closest_pair(double[][] points_14, long count_15, double min_dis_16) {
        long i_17 = 0;
        while ((i_17 < (count_15 - 1))) {
            long j_18 = (i_17 + 1);
            while ((j_18 < count_15)) {
                double current_19 = Program.euclidean_distance_sqr(points_14[(int)(i_17)], points_14[(int)(j_18)]);
                if ((current_19 < min_dis_16)) {
                    min_dis_16 = current_19;
                }
                j_18 = (j_18 + 1);
            }
            i_17 = (i_17 + 1);
        };
        return min_dis_16;
    }

    public static double dis_between_closest_in_strip(double[][] points_20, long count_21, double min_dis_22) {
        long i_start_23 = 0;
        if ((6 < (count_21 - 1))) {
            i_start_23 = 6;
        } else {
            i_start_23 = (count_21 - 1);
        };
        long i_24 = i_start_23;
        while ((i_24 < count_21)) {
            long j_start_25 = 0;
            if (((i_24 - 6) > 0)) {
                j_start_25 = (i_24 - 6);
            }
            long j_26 = j_start_25;
            while ((j_26 < i_24)) {
                double current_27 = Program.euclidean_distance_sqr(points_20[(int)(i_24)], points_20[(int)(j_26)]);
                if ((current_27 < min_dis_22)) {
                    min_dis_22 = current_27;
                }
                j_26 = (j_26 + 1);
            }
            i_24 = (i_24 + 1);
        };
        return min_dis_22;
    }

    public static double closest_pair_of_points_sqr(double[][] px_28, double[][] py_29, long count_30) {
        if ((count_30 <= 3)) {
            return Program.dis_between_closest_pair(px_28, count_30, 1e18);
        };
        long mid_31 = (count_30 / 2);
        double left_32 = Program.closest_pair_of_points_sqr(px_28, _slice<double[]>(py_29, 0, mid_31), mid_31);
        double right_33 = Program.closest_pair_of_points_sqr(py_29, _slice<double[]>(py_29, mid_31, count_30), (count_30 - mid_31));
        double best_34 = left_32;
        if ((right_33 < best_34)) {
            best_34 = right_33;
        };
        double[][] strip_35 = new double[][]{};
        long i_36 = 0;
        while ((i_36 < px_28.Length)) {
            if ((Program.abs((px_28[(int)(i_36)][(int)(0)] - px_28[(int)(mid_31)][(int)(0)])) < best_34)) {
                strip_35 = (Enumerable.ToArray(Enumerable.Append<double[]>(strip_35, px_28[(int)(i_36)])));
            }
            i_36 = (i_36 + 1);
        };
        double strip_best_37 = Program.dis_between_closest_in_strip(strip_35, strip_35.Length, best_34);
        if ((strip_best_37 < best_34)) {
            best_34 = strip_best_37;
        };
        return best_34;
    }

    public static double closest_pair_of_points(double[][] points_38, long count_39) {
        double[][] points_sorted_on_x_40 = Program.column_based_sort(points_38, 0);
        double[][] points_sorted_on_y_41 = Program.column_based_sort(points_38, 1);
        double dist_sqr_42 = Program.closest_pair_of_points_sqr(points_sorted_on_x_40, points_sorted_on_y_41, count_39);
        return Program.sqrtApprox(dist_sqr_42);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Distance: " + _fmtStr(Program.closest_pair_of_points(points_43, points_43.Length)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
