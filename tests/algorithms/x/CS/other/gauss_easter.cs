// Generated by Mochi 0.10.59 on 2025-08-07 10:34 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class EasterDate {
    public long month;
    public long day;
    public override string ToString() => $"EasterDate {{month = {month}, day = {day}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] years_17 = new long[]{1994, 2000, 2010, 2021, 2023, 2032, 2100};
    static long i_18 = 0;
    public static EasterDate gauss_easter(long year_0) {
        long metonic_cycle_1 = _mod(year_0, 19);
        long julian_leap_year_2 = _mod(year_0, 4);
        long non_leap_year_3 = _mod(year_0, 7);
        long leap_day_inhibits_4 = (year_0 / 100);
        long lunar_orbit_correction_5 = ((13 + (8 * leap_day_inhibits_4)) / 25);
        double leap_day_reinstall_number_6 = (Convert.ToDouble(leap_day_inhibits_4) / 4.0);
        double secular_moon_shift_7 = ((((15.0 - Convert.ToDouble(lunar_orbit_correction_5)) + Convert.ToDouble(leap_day_inhibits_4)) - leap_day_reinstall_number_6) % 30.0);
        double century_starting_point_8 = (((4.0 + Convert.ToDouble(leap_day_inhibits_4)) - leap_day_reinstall_number_6) % 7.0);
        double days_to_add_9 = (((19.0 * Convert.ToDouble(metonic_cycle_1)) + secular_moon_shift_7) % 30.0);
        double days_from_phm_to_sunday_10 = (((((2.0 * Convert.ToDouble(julian_leap_year_2)) + (4.0 * Convert.ToDouble(non_leap_year_3))) + (6.0 * days_to_add_9)) + century_starting_point_8) % 7.0);
        if (((days_to_add_9 == 29.0) && (days_from_phm_to_sunday_10 == 6.0))) {
            return new EasterDate{month = 4, day = 19};
        };
        if (((days_to_add_9 == 28.0) && (days_from_phm_to_sunday_10 == 6.0))) {
            return new EasterDate{month = 4, day = 18};
        };
        long offset_11 = (long)((days_to_add_9 + days_from_phm_to_sunday_10));
        long total_12 = (22 + offset_11);
        if ((total_12 > 31)) {
            return new EasterDate{month = 4, day = (total_12 - 31)};
        };
        return new EasterDate{month = 3, day = total_12};
    }

    public static string format_date(long year_13, EasterDate d_14) {
        string month_15 = ((d_14.month < 10) ? ("0" + _fmtStr(d_14.month)) : _fmtStr(d_14.month));
        string day_16 = ((d_14.day < 10) ? ("0" + _fmtStr(d_14.day)) : _fmtStr(d_14.day));
        return ((((_fmtStr(year_13) + "-") + month_15) + "-") + day_16);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_18 < years_17.Length)) {
                long y_19 = years_17[(int)(i_18)];
                EasterDate e_20 = Program.gauss_easter(y_19);
                Console.WriteLine(Program._fmtTop(((("Easter in " + _fmtStr(y_19)) + " is ") + Program.format_date(y_19, e_20))));
                i_18 = (i_18 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
