// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Clause {
    public Dictionary<string, long> literals;
    public string[] names;
    public override string ToString() => $"Clause {{literals = {literals}, names = {names}}}";
}
class EvalResult {
    public long value;
    public Clause clause;
    public override string ToString() => $"EvalResult {{value = {value}, clause = {clause}}}";
}
class Formula {
    public Clause[] clauses;
    public override string ToString() => $"Formula {{clauses = {clauses}}}";
}
class DPLLResult {
    public bool sat;
    public Dictionary<string, long> model;
    public override string ToString() => $"DPLLResult {{sat = {sat}, model = {model}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Clause clause1_45 = Program.new_clause(new string[]{"A4", "A3", "A5'", "A1", "A3'"});
    static Clause clause2_46 = Program.new_clause(new string[]{"A4"});
    static Formula formula_47 = Program.new_formula(new Clause[]{clause1_45, clause2_46});
    static string formula_str_48 = Program.str_formula(formula_47);
    static Clause[] clauses_49 = new Clause[]{clause1_45, clause2_46};
    static string[] symbols_50 = new string[]{"A4", "A3", "A5", "A1"};
    static Dictionary<string, long> model_51 = new Dictionary<string, long>{};
    static DPLLResult result_52 = Program.dpll_algorithm(clauses_49, symbols_50, model_51);
    public static Clause new_clause(string[] lits_0) {
        Dictionary<string, long> m_1 = new Dictionary<string, long>{};
        string[] names_2 = new string[]{};
        long i_3 = 0;
        while ((i_3 < lits_0.Length)) {
            string lit_4 = lits_0[(int)(i_3)];
            m_1[lit_4] = (0 - 1);
            names_2 = (Enumerable.ToArray(Enumerable.Append<string>(names_2, lit_4)));
            i_3 = (i_3 + 1);
        };
        return new Clause{literals = m_1, names = names_2};
    }

    public static Clause assign_clause(Clause c_5, Dictionary<string, long> model_6) {
        Dictionary<string, long> lits_7 = c_5.literals;
        long i_8 = 0;
        while ((i_8 < c_5.names.Length)) {
            string lit_9 = c_5.names[(int)(i_8)];
            string symbol_10 = _substr(lit_9, 0, 2);
            if ((model_6.ContainsKey(symbol_10))) {
                long value_11 = (model_6.ContainsKey(symbol_10) ? model_6[symbol_10] : 0);
                if (((_substr(lit_9, (lit_9.Length - 1), lit_9.Length) == "'") && (value_11 != (0 - 1)))) {
                    value_11 = (1 - value_11);
                }
                lits_7[lit_9] = value_11;
            }
            i_8 = (i_8 + 1);
        };
        c_5.literals = lits_7;
        return c_5;
    }

    public static EvalResult evaluate_clause(Clause c_12, Dictionary<string, long> model_13) {
        long i_14 = 0;
        while ((i_14 < c_12.names.Length)) {
            string lit_15 = c_12.names[(int)(i_14)];
            string sym_16 = ((_substr(lit_15, (lit_15.Length - 1), lit_15.Length) == "'") ? _substr(lit_15, 0, 2) : (lit_15 + "'"));
            if ((c_12.literals.ContainsKey(sym_16))) {
                return new EvalResult{value = 1, clause = c_12};
            }
            i_14 = (i_14 + 1);
        };
        c_12 = Program.assign_clause(c_12, model_13);
        i_14 = 0;
        while ((i_14 < c_12.names.Length)) {
            string lit_17 = c_12.names[(int)(i_14)];
            long value_18 = (c_12.literals.ContainsKey(lit_17) ? c_12.literals[lit_17] : 0);
            if ((value_18 == 1)) {
                return new EvalResult{value = 1, clause = c_12};
            }
            if ((value_18 == (0 - 1))) {
                return new EvalResult{value = (0 - 1), clause = c_12};
            }
            i_14 = (i_14 + 1);
        };
        long any_true_19 = 0;
        i_14 = 0;
        while ((i_14 < c_12.names.Length)) {
            string lit_20 = c_12.names[(int)(i_14)];
            if (((c_12.literals.ContainsKey(lit_20) ? c_12.literals[lit_20] : 0) == 1)) {
                any_true_19 = 1;
            }
            i_14 = (i_14 + 1);
        };
        return new EvalResult{value = any_true_19, clause = c_12};
    }

    public static Formula new_formula(Clause[] cs_21) {
        return new Formula{clauses = cs_21};
    }

    public static string[] remove_symbol(string[] symbols_22, string s_23) {
        string[] res_24 = new string[]{};
        long i_25 = 0;
        while ((i_25 < symbols_22.Length)) {
            if ((symbols_22[(int)(i_25)] != s_23)) {
                res_24 = (Enumerable.ToArray(Enumerable.Append<string>(res_24, symbols_22[(int)(i_25)])));
            }
            i_25 = (i_25 + 1);
        };
        return res_24;
    }

    public static DPLLResult dpll_algorithm(Clause[] clauses_26, string[] symbols_27, Dictionary<string, long> model_28) {
        bool all_true_29 = true;
        long i_30 = 0;
        while ((i_30 < clauses_26.Length)) {
            EvalResult ev_31 = Program.evaluate_clause(clauses_26[(int)(i_30)], model_28);
            clauses_26[i_30] = ev_31.clause;
            if ((ev_31.value == 0)) {
                return new DPLLResult{sat = false, model = new Dictionary<string, long>{}};
            } else if ((ev_31.value == (0 - 1))) {
                all_true_29 = false;
            }
            i_30 = (i_30 + 1);
        };
        if (all_true_29) {
            return new DPLLResult{sat = true, model = model_28};
        };
        string p_32 = symbols_27[(int)(0)];
        string[] rest_33 = Program.remove_symbol(symbols_27, p_32);
        Dictionary<string, long> tmp1_34 = model_28;
        Dictionary<string, long> tmp2_35 = model_28;
        tmp1_34[p_32] = 1;
        tmp2_35[p_32] = 0;
        DPLLResult res1_36 = Program.dpll_algorithm(clauses_26, rest_33, tmp1_34);
        if (res1_36.sat) {
            return res1_36;
        };
        return Program.dpll_algorithm(clauses_26, rest_33, tmp2_35);
    }

    public static string str_clause(Clause c_37) {
        string line_38 = "{";
        bool first_39 = true;
        long i_40 = 0;
        while ((i_40 < c_37.names.Length)) {
            string lit_41 = c_37.names[(int)(i_40)];
            if (first_39) {
                first_39 = false;
            } else {
                line_38 = (line_38 + " , ");
            }
            line_38 = (line_38 + lit_41);
            i_40 = (i_40 + 1);
        };
        line_38 = (line_38 + "}");
        return line_38;
    }

    public static string str_formula(Formula f_42) {
        string line_43 = "{";
        long i_44 = 0;
        while ((i_44 < f_42.clauses.Length)) {
            line_43 = (line_43 + Program.str_clause(f_42.clauses[(int)(i_44)]));
            if ((i_44 < (f_42.clauses.Length - 1))) {
                line_43 = (line_43 + " , ");
            }
            i_44 = (i_44 + 1);
        };
        line_43 = (line_43 + "}");
        return line_43;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if (result_52.sat) {
                Console.WriteLine(Program._fmtTop((("The formula " + formula_str_48) + " is satisfiable.")));
            } else {
                Console.WriteLine(Program._fmtTop((("The formula " + formula_str_48) + " is not satisfiable.")));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
