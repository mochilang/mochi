// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class State {
    public long[] claim;
    public long[][] alloc;
    public long[][] max;
    public override string ToString() => $"State {{claim = {claim}, alloc = {alloc}, max = {max}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] claim_vector_44 = new long[]{8, 5, 9, 7};
    static long[][] allocated_resources_table_45 = new long[][]{new long[]{2, 0, 1, 1}, new long[]{0, 1, 2, 1}, new long[]{4, 0, 0, 3}, new long[]{0, 2, 1, 0}, new long[]{1, 0, 3, 0}};
    static long[][] maximum_claim_table_46 = new long[][]{new long[]{3, 2, 1, 4}, new long[]{0, 2, 5, 2}, new long[]{5, 1, 0, 5}, new long[]{1, 5, 3, 0}, new long[]{3, 0, 3, 3}};
    public static long[] processes_resource_summation(long[][] alloc_0) {
        long resources_1 = alloc_0[(int)(0)].Length;
        long[] sums_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < resources_1)) {
            long total_4 = 0;
            long j_5 = 0;
            while ((j_5 < alloc_0.Length)) {
                total_4 = (total_4 + alloc_0[(int)(j_5)][(int)(i_3)]);
                j_5 = (j_5 + 1);
            }
            sums_2 = (Enumerable.ToArray(Enumerable.Append<long>(sums_2, total_4)));
            i_3 = (i_3 + 1);
        };
        return sums_2;
    }

    public static long[] available_resources(long[] claim_6, long[] alloc_sum_7) {
        long[] avail_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < claim_6.Length)) {
            avail_8 = (Enumerable.ToArray(Enumerable.Append<long>(avail_8, (claim_6[(int)(i_9)] - alloc_sum_7[(int)(i_9)]))));
            i_9 = (i_9 + 1);
        };
        return avail_8;
    }

    public static long[][] need(long[][] max_10, long[][] alloc_11) {
        long[][] needs_12 = new long[][]{};
        long i_13 = 0;
        while ((i_13 < max_10.Length)) {
            long[] row_14 = new long[]{};
            long j_15 = 0;
            while ((j_15 < max_10[(int)(0)].Length)) {
                row_14 = (Enumerable.ToArray(Enumerable.Append<long>(row_14, (max_10[(int)(i_13)][(int)(j_15)] - alloc_11[(int)(i_13)][(int)(j_15)]))));
                j_15 = (j_15 + 1);
            }
            needs_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(needs_12, row_14)));
            i_13 = (i_13 + 1);
        };
        return needs_12;
    }

    public static void pretty_print(long[] claim_16, long[][] alloc_17, long[][] max_18) {
        Console.WriteLine(Program._fmtTop("         Allocated Resource Table"));
        long i_19 = 0;
        while ((i_19 < alloc_17.Length)) {
            long[] row_20 = alloc_17[(int)(i_19)];
            string line_21 = (("P" + _fmtStr((i_19 + 1))) + "       ");
            long j_22 = 0;
            while ((j_22 < row_20.Length)) {
                line_21 = (line_21 + _fmtStr(row_20[(int)(j_22)]));
                if ((j_22 < (row_20.Length - 1))) {
                    line_21 = (line_21 + "        ");
                }
                j_22 = (j_22 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_21));
            Console.WriteLine(Program._fmtTop(""));
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(Program._fmtTop("         System Resource Table"));
        i_19 = 0;
        while ((i_19 < max_18.Length)) {
            long[] row_23 = max_18[(int)(i_19)];
            string line_24 = (("P" + _fmtStr((i_19 + 1))) + "       ");
            long j_25 = 0;
            while ((j_25 < row_23.Length)) {
                line_24 = (line_24 + _fmtStr(row_23[(int)(j_25)]));
                if ((j_25 < (row_23.Length - 1))) {
                    line_24 = (line_24 + "        ");
                }
                j_25 = (j_25 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_24));
            Console.WriteLine(Program._fmtTop(""));
            i_19 = (i_19 + 1);
        };
        string usage_26 = "";
        i_19 = 0;
        while ((i_19 < claim_16.Length)) {
            if ((i_19 > 0)) {
                usage_26 = (usage_26 + " ");
            }
            usage_26 = (usage_26 + _fmtStr(claim_16[(int)(i_19)]));
            i_19 = (i_19 + 1);
        };
        long[] alloc_sum_27 = Program.processes_resource_summation(alloc_17);
        long[] avail_28 = Program.available_resources(claim_16, alloc_sum_27);
        string avail_str_29 = "";
        i_19 = 0;
        while ((i_19 < avail_28.Length)) {
            if ((i_19 > 0)) {
                avail_str_29 = (avail_str_29 + " ");
            }
            avail_str_29 = (avail_str_29 + _fmtStr(avail_28[(int)(i_19)]));
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(Program._fmtTop(("Current Usage by Active Processes: " + usage_26)));
        Console.WriteLine(Program._fmtTop(("Initial Available Resources:       " + avail_str_29)));
    }

    public static void bankers_algorithm(long[] claim_30, long[][] alloc_31, long[][] max_32) {
        long[][] need_list_33 = Program.need(max_32, alloc_31);
        long[] alloc_sum_34 = Program.processes_resource_summation(alloc_31);
        long[] avail_35 = Program.available_resources(claim_30, alloc_sum_34);
        Console.WriteLine(Program._fmtTop("__________________________________________________"));
        Console.WriteLine(Program._fmtTop(""));
        bool[] finished_36 = new bool[]{};
        long i_37 = 0;
        while ((i_37 < need_list_33.Length)) {
            finished_36 = (Enumerable.ToArray(Enumerable.Append<bool>(finished_36, false)));
            i_37 = (i_37 + 1);
        };
        long remaining_38 = need_list_33.Length;
        while ((remaining_38 > 0)) {
            bool safe_39 = false;
            long p_40 = 0;
            while ((p_40 < need_list_33.Length)) {
                if ((!finished_36[(int)(p_40)])) {
                    bool exec_41 = true;
                    long r_42 = 0;
                    while ((r_42 < avail_35.Length)) {
                        if ((need_list_33[(int)(p_40)][(int)(r_42)] > avail_35[(int)(r_42)])) {
                            exec_41 = false;
                            break;
                        }
                        r_42 = (r_42 + 1);
                    }
                    if (exec_41) {
                        safe_39 = true;
                        Console.WriteLine(Program._fmtTop((("Process " + _fmtStr((p_40 + 1))) + " is executing.")));
                        r_42 = 0;
                        while ((r_42 < avail_35.Length)) {
                            avail_35[r_42] = (avail_35[(int)(r_42)] + alloc_31[(int)(p_40)][(int)(r_42)]);
                            r_42 = (r_42 + 1);
                        }
                        string avail_str_43 = "";
                        r_42 = 0;
                        while ((r_42 < avail_35.Length)) {
                            if ((r_42 > 0)) {
                                avail_str_43 = (avail_str_43 + " ");
                            }
                            avail_str_43 = (avail_str_43 + _fmtStr(avail_35[(int)(r_42)]));
                            r_42 = (r_42 + 1);
                        }
                        Console.WriteLine(Program._fmtTop(("Updated available resource stack for processes: " + avail_str_43)));
                        Console.WriteLine(Program._fmtTop("The process is in a safe state."));
                        Console.WriteLine(Program._fmtTop(""));
                        finished_36[p_40] = true;
                        remaining_38 = (remaining_38 - 1);
                    }
                }
                p_40 = (p_40 + 1);
            }
            if ((!safe_39)) {
                Console.WriteLine(Program._fmtTop("System in unsafe state. Aborting..."));
                Console.WriteLine(Program._fmtTop(""));
                break;
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.pretty_print(claim_vector_44, allocated_resources_table_45, maximum_claim_table_46);
            Program.bankers_algorithm(claim_vector_44, allocated_resources_table_45, maximum_claim_table_46);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
