// Generated by Mochi 0.10.73 (commit 9a917aab9f) on 2025-08-25 23:45 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] vehicles_31 = new double[][]{};
    static BigInteger[] weights_32 = new BigInteger[]{0, 0, 1};
    public static double[][] get_data(double[][] source_data_0) {
        double[][] data_lists_1 = new double[][]{};
        BigInteger i_2 = 0;
        while ((i_2 < source_data_0.Length)) {
            double[] row_3 = _idx(source_data_0, (long)(i_2));
            BigInteger j_4 = 0;
            while ((j_4 < row_3.Length)) {
                if ((data_lists_1.Length < (j_4 + 1))) {
                    double[] empty_5 = new double[]{};
                    data_lists_1 = Enumerable.ToArray(data_lists_1.Append(empty_5));
                }
                data_lists_1[(int)(j_4)] = Enumerable.ToArray(_idx(data_lists_1, (long)(j_4)).Append(_idx(row_3, (long)(j_4))));
                j_4 = (j_4 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return data_lists_1;
    }

    public static double[][] calculate_each_score(double[][] data_lists_6, BigInteger[] weights_7) {
        double[][] score_lists_8 = new double[][]{};
        BigInteger i_9 = 0;
        while ((i_9 < data_lists_6.Length)) {
            double[] dlist_10 = _idx(data_lists_6, (long)(i_9));
            BigInteger weight_11 = _idx(weights_7, (long)(i_9));
            double mind_12 = _idx(dlist_10, (long)(0));
            double maxd_13 = _idx(dlist_10, (long)(0));
            BigInteger j_14 = 1;
            while ((j_14 < dlist_10.Length)) {
                double val_15 = _idx(dlist_10, (long)(j_14));
                if ((val_15 < mind_12)) {
                    mind_12 = val_15;
                }
                if ((val_15 > maxd_13)) {
                    maxd_13 = val_15;
                }
                j_14 = (j_14 + 1);
            }
            double[] score_16 = new double[]{};
            j_14 = 0;
            if ((weight_11 == 0)) {
                while ((j_14 < dlist_10.Length)) {
                    double item_17 = _idx(dlist_10, (long)(j_14));
                    if (((maxd_13 - mind_12) == 0.0)) {
                        score_16 = Enumerable.ToArray(score_16.Append(1.0));
                    } else {
                        score_16 = Enumerable.ToArray(score_16.Append((1.0 - ((item_17 - mind_12) / (maxd_13 - mind_12)))));
                    }
                    j_14 = (j_14 + 1);
                }
            } else {
                while ((j_14 < dlist_10.Length)) {
                    double item_18 = _idx(dlist_10, (long)(j_14));
                    if (((maxd_13 - mind_12) == 0.0)) {
                        score_16 = Enumerable.ToArray(score_16.Append(0.0));
                    } else {
                        score_16 = Enumerable.ToArray(score_16.Append(((item_18 - mind_12) / (maxd_13 - mind_12))));
                    }
                    j_14 = (j_14 + 1);
                }
            }
            score_lists_8 = Enumerable.ToArray(score_lists_8.Append(score_16));
            i_9 = (i_9 + 1);
        };
        return score_lists_8;
    }

    public static double[] generate_final_scores(double[][] score_lists_19) {
        long count_20 = _idx(score_lists_19, (long)(0)).Length;
        double[] final_scores_21 = new double[]{};
        BigInteger i_22 = 0;
        while ((i_22 < count_20)) {
            final_scores_21 = Enumerable.ToArray(final_scores_21.Append(0.0));
            i_22 = (i_22 + 1);
        };
        i_22 = 0;
        while ((i_22 < score_lists_19.Length)) {
            double[] slist_23 = _idx(score_lists_19, (long)(i_22));
            BigInteger j_24 = 0;
            while ((j_24 < slist_23.Length)) {
                final_scores_21[(int)(j_24)] = (_idx(final_scores_21, (long)(j_24)) + _idx(slist_23, (long)(j_24)));
                j_24 = (j_24 + 1);
            }
            i_22 = (i_22 + 1);
        };
        return final_scores_21;
    }

    public static double[][] procentual_proximity(double[][] source_data_25, BigInteger[] weights_26) {
        double[][] data_lists_27 = Program.get_data(source_data_25);
        double[][] score_lists_28 = Program.calculate_each_score(data_lists_27, weights_26);
        double[] final_scores_29 = Program.generate_final_scores(score_lists_28);
        BigInteger i_30 = 0;
        while ((i_30 < final_scores_29.Length)) {
            source_data_25[(int)(i_30)] = Enumerable.ToArray(_idx(source_data_25, (long)(i_30)).Append(_idx(final_scores_29, (long)(i_30))));
            i_30 = (i_30 + 1);
        };
        return source_data_25;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            vehicles_31 = Enumerable.ToArray(vehicles_31.Append(new double[]{20.0, 60.0, 2012.0}));
            vehicles_31 = Enumerable.ToArray(vehicles_31.Append(new double[]{23.0, 90.0, 2015.0}));
            vehicles_31 = Enumerable.ToArray(vehicles_31.Append(new double[]{22.0, 50.0, 2011.0}));
            double[][] result_33 = Program.procentual_proximity(vehicles_31, weights_32);
            Console.WriteLine(Program._fmtTop(_fmtStr(result_33)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
