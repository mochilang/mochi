// Generated by Mochi 0.10.66 (commit 62d16cb7a4) on 2025-08-16 09:24 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Int {
    public long value;
    public override string ToString() => $"Int {{value = {value}}}";
}
class Str {
    public string value;
    public override string ToString() => $"Str {{value = \"{value}\"}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static object[] example1_13 = Program.alternative_list_arrange(new object[]{Program.from_int(1), Program.from_int(2), Program.from_int(3), Program.from_int(4), Program.from_int(5)}, new object[]{Program.from_string("A"), Program.from_string("B"), Program.from_string("C")});
    public static object from_int(long x_0) {
        return (object)new Int{value = x_0};
    }

    public static object from_string(string s_1) {
        return (object)new Str{value = s_1};
    }

    public static string item_to_string(object it_2) {
        return ((Func<string>)(() => { var __t = it_2; if (__t is Int _p0) { var v = _p0.value; return _fmtStr(v); } else if (__t is Str _p1) { var s = _p1.value; return s; } return default(string); }))();
    }

    public static object[] alternative_list_arrange(object[] first_3, object[] second_4) {
        long len1_5 = first_3.Length;
        long len2_6 = second_4.Length;
        long abs_len_7 = ((len1_5 > len2_6) ? len1_5 : len2_6);
        object[] result_8 = new object[]{};
        long i_9 = 0;
        while ((i_9 < abs_len_7)) {
            if ((i_9 < len1_5)) {
                result_8 = ((Func<object[]>)(() => { var _tmp = result_8.ToList(); _tmp.Add((object)((dynamic)first_3)[i_9]); return _tmp.ToArray(); }))();
            }
            if ((i_9 < len2_6)) {
                result_8 = ((Func<object[]>)(() => { var _tmp = result_8.ToList(); _tmp.Add((object)((dynamic)second_4)[i_9]); return _tmp.ToArray(); }))();
            }
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static string list_to_string(object[] xs_10) {
        string s_11 = "[";
        long i_12 = 0;
        while ((i_12 < xs_10.Length)) {
            s_11 = (s_11 + Program.item_to_string((object)((dynamic)xs_10)[i_12]));
            if ((i_12 < (xs_10.Length - 1))) {
                s_11 = (s_11 + ", ");
            }
            i_12 = (i_12 + 1);
        };
        s_11 = (s_11 + "]");
        return s_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(example1_13)));
            object[] example2_14 = Program.alternative_list_arrange(new object[]{Program.from_string("A"), Program.from_string("B"), Program.from_string("C")}, new object[]{Program.from_int(1), Program.from_int(2), Program.from_int(3), Program.from_int(4), Program.from_int(5)});
            Console.WriteLine(Program._fmtTop(Program.list_to_string(example2_14)));
            object[] example3_15 = Program.alternative_list_arrange(new object[]{Program.from_string("X"), Program.from_string("Y"), Program.from_string("Z")}, new object[]{Program.from_int(9), Program.from_int(8), Program.from_int(7), Program.from_int(6)});
            Console.WriteLine(Program._fmtTop(Program.list_to_string(example3_15)));
            object[] example4_16 = Program.alternative_list_arrange(new object[]{Program.from_int(1), Program.from_int(2), Program.from_int(3), Program.from_int(4), Program.from_int(5)}, new object[]{});
            Console.WriteLine(Program._fmtTop(Program.list_to_string(example4_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
