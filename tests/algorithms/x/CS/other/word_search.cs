// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class WordSearch {
    public string[] words;
    public long width;
    public long height;
    public string[][] board;
    public override string ToString() => $"WordSearch {{words = {words}, width = {width}, height = {height}, board = {board}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 123456789;
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return seed_0;
    }

    public static long rand_range(long max_1) {
        return _mod(Program.rand(), max_1);
    }

    public static long[] shuffle(long[] list_int_2) {
        long i_3 = (list_int_2.Length - 1);
        while ((i_3 > 0)) {
            long j_4 = Program.rand_range((i_3 + 1));
            long tmp_5 = list_int_2[(int)(i_3)];
            list_int_2[i_3] = list_int_2[(int)(j_4)];
            list_int_2[j_4] = tmp_5;
            i_3 = (i_3 - 1);
        };
        return list_int_2;
    }

    public static string rand_letter() {
        string letters_6 = "abcdefghijklmnopqrstuvwxyz";
        long i_7 = Program.rand_range(26);
        return _substr(letters_6, i_7, (i_7 + 1));
    }

    public static WordSearch make_word_search(string[] words_8, long width_9, long height_10) {
        string[][] board_11 = new string[][]{};
        long r_12 = 0;
        while ((r_12 < height_10)) {
            string[] row_13 = new string[]{};
            long c_14 = 0;
            while ((c_14 < width_9)) {
                row_13 = (Enumerable.ToArray(Enumerable.Append<string>(row_13, "")));
                c_14 = (c_14 + 1);
            }
            board_11 = (Enumerable.ToArray(Enumerable.Append<string[]>(board_11, row_13)));
            r_12 = (r_12 + 1);
        };
        return new WordSearch{words = words_8, width = width_9, height = height_10, board = board_11};
    }

    public static bool insert_dir(WordSearch ws_15, string word_16, long dr_17, long dc_18, long[] rows_19, long[] cols_20) {
        long word_len_21 = word_16.Length;
        long ri_22 = 0;
        while ((ri_22 < rows_19.Length)) {
            long row_23 = rows_19[(int)(ri_22)];
            long ci_24 = 0;
            while ((ci_24 < cols_20.Length)) {
                long col_25 = cols_20[(int)(ci_24)];
                long end_r_26 = (row_23 + (dr_17 * (word_len_21 - 1)));
                long end_c_27 = (col_25 + (dc_18 * (word_len_21 - 1)));
                if (((((end_r_26 < 0) || (end_r_26 >= ws_15.height)) || (end_c_27 < 0)) || (end_c_27 >= ws_15.width))) {
                    ci_24 = (ci_24 + 1);
                    continue;
                }
                long k_28 = 0;
                bool ok_29 = true;
                while ((k_28 < word_len_21)) {
                    long rr_30 = (row_23 + (dr_17 * k_28));
                    long cc_31 = (col_25 + (dc_18 * k_28));
                    if ((ws_15.board[(int)(rr_30)][(int)(cc_31)] != "")) {
                        ok_29 = false;
                        break;
                    }
                    k_28 = (k_28 + 1);
                }
                if (ok_29) {
                    k_28 = 0;
                    while ((k_28 < word_len_21)) {
                        long rr2_32 = (row_23 + (dr_17 * k_28));
                        long cc2_33 = (col_25 + (dc_18 * k_28));
                        string[] row_list_34 = ws_15.board[(int)(rr2_32)];
                        row_list_34[cc2_33] = _substr(word_16, k_28, (k_28 + 1));
                        k_28 = (k_28 + 1);
                    }
                    return true;
                }
                ci_24 = (ci_24 + 1);
            }
            ri_22 = (ri_22 + 1);
        };
        return false;
    }

    public static void generate_board(WordSearch ws_35) {
        long[] dirs_r_36 = new long[]{-1, -1, 0, 1, 1, 1, 0, -1};
        long[] dirs_c_37 = new long[]{0, 1, 1, 1, 0, -1, -1, -1};
        long i_38 = 0;
        while ((i_38 < ws_35.words.Length)) {
            string word_39 = ws_35.words[(int)(i_38)];
            long[] rows_40 = new long[]{};
            long r_41 = 0;
            while ((r_41 < ws_35.height)) {
                rows_40 = (Enumerable.ToArray(Enumerable.Append<long>(rows_40, r_41)));
                r_41 = (r_41 + 1);
            }
            long[] cols_42 = new long[]{};
            long c_43 = 0;
            while ((c_43 < ws_35.width)) {
                cols_42 = (Enumerable.ToArray(Enumerable.Append<long>(cols_42, c_43)));
                c_43 = (c_43 + 1);
            }
            rows_40 = Program.shuffle(rows_40);
            cols_42 = Program.shuffle(cols_42);
            long d_44 = Program.rand_range(8);
            Program.insert_dir(ws_35, word_39, dirs_r_36[(int)(d_44)], dirs_c_37[(int)(d_44)], rows_40, cols_42);
            i_38 = (i_38 + 1);
        };
    }

    public static string visualise(WordSearch ws_45, bool add_fake_chars_46) {
        string result_47 = "";
        long r_48 = 0;
        while ((r_48 < ws_45.height)) {
            long c_49 = 0;
            while ((c_49 < ws_45.width)) {
                string ch_50 = ws_45.board[(int)(r_48)][(int)(c_49)];
                if ((ch_50 == "")) {
                    if (add_fake_chars_46) {
                        ch_50 = Program.rand_letter();
                    } else {
                        ch_50 = "#";
                    }
                }
                result_47 = ((result_47 + ch_50) + " ");
                c_49 = (c_49 + 1);
            }
            result_47 = (result_47 + "\n");
            r_48 = (r_48 + 1);
        };
        return result_47;
    }

    public static void main() {
        string[] words_51 = new string[]{"cat", "dog", "snake", "fish"};
        WordSearch ws_52 = Program.make_word_search(words_51, 10, 10);
        Program.generate_board(ws_52);
        Console.WriteLine(Program._fmtTop(Program.visualise(ws_52, true)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
