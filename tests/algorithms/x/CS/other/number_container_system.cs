// Generated by Mochi 0.10.73 (commit 9a917aab9f) on 2025-08-25 23:45 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class NumberContainer {
    public Dictionary<BigInteger, BigInteger[]> numbermap;
    public Dictionary<BigInteger, BigInteger> indexmap;
    public override string ToString() => $"NumberContainer {{numbermap = {numbermap}, indexmap = {indexmap}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<BigInteger, BigInteger[]> nm_32 = new Dictionary<BigInteger, BigInteger[]>{};
    static Dictionary<BigInteger, BigInteger> im_33 = new Dictionary<BigInteger, BigInteger>{};
    static NumberContainer cont_34 = new NumberContainer{numbermap = nm_32, indexmap = im_33};
    public static BigInteger[] remove_at(BigInteger[] xs_0, BigInteger idx_1) {
        BigInteger[] res_2 = new BigInteger[]{};
        BigInteger i_3 = 0;
        while ((i_3 < xs_0.Length)) {
            if ((i_3 != idx_1)) {
                res_2 = Enumerable.ToArray(res_2.Append(_idx(xs_0, (long)(i_3))));
            }
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static BigInteger[] insert_at(BigInteger[] xs_4, BigInteger idx_5, BigInteger val_6) {
        BigInteger[] res_7 = new BigInteger[]{};
        BigInteger i_8 = 0;
        while ((i_8 < xs_4.Length)) {
            if ((i_8 == idx_5)) {
                res_7 = Enumerable.ToArray(res_7.Append(val_6));
            }
            res_7 = Enumerable.ToArray(res_7.Append(_idx(xs_4, (long)(i_8))));
            i_8 = (i_8 + 1);
        };
        if ((idx_5 == xs_4.Length)) {
            res_7 = Enumerable.ToArray(res_7.Append(val_6));
        };
        return res_7;
    }

    public static BigInteger[] binary_search_delete(BigInteger[] array_9, BigInteger item_10) {
        BigInteger low_11 = 0;
        BigInteger high_12 = (array_9.Length - 1);
        BigInteger[] arr_13 = array_9;
        while ((low_11 <= high_12)) {
            BigInteger mid_14 = ((low_11 + high_12) / 2);
            if ((_idx(arr_13, (long)(mid_14)) == item_10)) {
                arr_13 = Program.remove_at(arr_13, mid_14);
                return arr_13;
            } else if ((_idx(arr_13, (long)(mid_14)) < item_10)) {
                low_11 = (mid_14 + 1);
            } else {
                high_12 = (mid_14 - 1);
            }
        };
        Console.WriteLine(Program._fmtTop("ValueError: Either the item is not in the array or the array was unsorted"));
        return arr_13;
    }

    public static BigInteger[] binary_search_insert(BigInteger[] array_15, BigInteger index_16) {
        BigInteger low_17 = 0;
        BigInteger high_18 = (array_15.Length - 1);
        BigInteger[] arr_19 = array_15;
        while ((low_17 <= high_18)) {
            BigInteger mid_20 = ((low_17 + high_18) / 2);
            if ((_idx(arr_19, (long)(mid_20)) == index_16)) {
                arr_19 = Program.insert_at(arr_19, (mid_20 + 1), index_16);
                return arr_19;
            } else if ((_idx(arr_19, (long)(mid_20)) < index_16)) {
                low_17 = (mid_20 + 1);
            } else {
                high_18 = (mid_20 - 1);
            }
        };
        arr_19 = Program.insert_at(arr_19, low_17, index_16);
        return arr_19;
    }

    public static NumberContainer change(NumberContainer cont_21, BigInteger idx_22, BigInteger num_23) {
        Dictionary<BigInteger, BigInteger[]> numbermap_24 = cont_21.numbermap;
        Dictionary<BigInteger, BigInteger> indexmap_25 = cont_21.indexmap;
        if ((indexmap_25.ContainsKey(idx_22))) {
            BigInteger old_26 = (indexmap_25.ContainsKey(idx_22) ? indexmap_25[idx_22] : BigInteger.Zero);
            BigInteger[] indexes_27 = (numbermap_24.ContainsKey(old_26) ? numbermap_24[old_26] : null);
            if ((indexes_27.Length == 1)) {
                numbermap_24[old_26] = new BigInteger[]{};
            } else {
                numbermap_24[old_26] = Program.binary_search_delete(indexes_27, idx_22);
            }
        };
        indexmap_25[idx_22] = num_23;
        if ((numbermap_24.ContainsKey(num_23))) {
            numbermap_24[num_23] = Program.binary_search_insert((numbermap_24.ContainsKey(num_23) ? numbermap_24[num_23] : null), idx_22);
        } else {
            numbermap_24[num_23] = new BigInteger[]{idx_22};
        };
        return new NumberContainer{numbermap = numbermap_24, indexmap = indexmap_25};
    }

    public static BigInteger find(NumberContainer cont_28, BigInteger num_29) {
        Dictionary<BigInteger, BigInteger[]> numbermap_30 = cont_28.numbermap;
        if ((numbermap_30.ContainsKey(num_29))) {
            BigInteger[] arr_31 = (numbermap_30.ContainsKey(num_29) ? numbermap_30[num_29] : null);
            if ((arr_31.Length > 0)) {
                return _idx(arr_31, (long)(0));
            }
        };
        return -1;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 10)));
            cont_34 = Program.change(cont_34, 0, 10);
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 10)));
            cont_34 = Program.change(cont_34, 0, 20);
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 10)));
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 20)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
