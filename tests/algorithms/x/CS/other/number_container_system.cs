// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class NumberContainer {
    public Dictionary<long, long[]> numbermap;
    public Dictionary<long, long> indexmap;
    public override string ToString() => $"NumberContainer {{numbermap = {numbermap}, indexmap = {indexmap}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<long, long[]> nm_32 = new Dictionary<long, long[]>{};
    static Dictionary<long, long> im_33 = new Dictionary<long, long>{};
    static NumberContainer cont_34 = new NumberContainer{numbermap = nm_32, indexmap = im_33};
    public static long[] remove_at(long[] xs_0, long idx_1) {
        long[] res_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < xs_0.Length)) {
            if ((i_3 != idx_1)) {
                res_2 = (Enumerable.ToArray(Enumerable.Append<long>(res_2, xs_0[(int)(i_3)])));
            }
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long[] insert_at(long[] xs_4, long idx_5, long val_6) {
        long[] res_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 < xs_4.Length)) {
            if ((i_8 == idx_5)) {
                res_7 = (Enumerable.ToArray(Enumerable.Append<long>(res_7, val_6)));
            }
            res_7 = (Enumerable.ToArray(Enumerable.Append<long>(res_7, xs_4[(int)(i_8)])));
            i_8 = (i_8 + 1);
        };
        if ((idx_5 == xs_4.Length)) {
            res_7 = (Enumerable.ToArray(Enumerable.Append<long>(res_7, val_6)));
        };
        return res_7;
    }

    public static long[] binary_search_delete(long[] array_9, long item_10) {
        long low_11 = 0;
        long high_12 = (array_9.Length - 1);
        long[] arr_13 = array_9;
        while ((low_11 <= high_12)) {
            long mid_14 = ((low_11 + high_12) / 2);
            if ((arr_13[(int)(mid_14)] == item_10)) {
                arr_13 = Program.remove_at(arr_13, mid_14);
                return arr_13;
            } else if ((arr_13[(int)(mid_14)] < item_10)) {
                low_11 = (mid_14 + 1);
            } else {
                high_12 = (mid_14 - 1);
            }
        };
        Console.WriteLine(Program._fmtTop("ValueError: Either the item is not in the array or the array was unsorted"));
        return arr_13;
    }

    public static long[] binary_search_insert(long[] array_15, long index_16) {
        long low_17 = 0;
        long high_18 = (array_15.Length - 1);
        long[] arr_19 = array_15;
        while ((low_17 <= high_18)) {
            long mid_20 = ((low_17 + high_18) / 2);
            if ((arr_19[(int)(mid_20)] == index_16)) {
                arr_19 = Program.insert_at(arr_19, (mid_20 + 1), index_16);
                return arr_19;
            } else if ((arr_19[(int)(mid_20)] < index_16)) {
                low_17 = (mid_20 + 1);
            } else {
                high_18 = (mid_20 - 1);
            }
        };
        arr_19 = Program.insert_at(arr_19, low_17, index_16);
        return arr_19;
    }

    public static NumberContainer change(NumberContainer cont_21, long idx_22, long num_23) {
        Dictionary<long, long[]> numbermap_24 = cont_21.numbermap;
        Dictionary<long, long> indexmap_25 = cont_21.indexmap;
        if ((indexmap_25.ContainsKey(idx_22))) {
            long old_26 = (indexmap_25.ContainsKey(idx_22) ? indexmap_25[idx_22] : 0);
            long[] indexes_27 = (numbermap_24.ContainsKey(old_26) ? numbermap_24[old_26] : null);
            if ((indexes_27.Length == 1)) {
                numbermap_24[old_26] = new long[]{};
            } else {
                numbermap_24[old_26] = Program.binary_search_delete(indexes_27, idx_22);
            }
        };
        indexmap_25[idx_22] = num_23;
        if ((numbermap_24.ContainsKey(num_23))) {
            numbermap_24[num_23] = Program.binary_search_insert((numbermap_24.ContainsKey(num_23) ? numbermap_24[num_23] : null), idx_22);
        } else {
            numbermap_24[num_23] = new long[]{idx_22};
        };
        return new NumberContainer{numbermap = numbermap_24, indexmap = indexmap_25};
    }

    public static long find(NumberContainer cont_28, long num_29) {
        Dictionary<long, long[]> numbermap_30 = cont_28.numbermap;
        if ((numbermap_30.ContainsKey(num_29))) {
            long[] arr_31 = (numbermap_30.ContainsKey(num_29) ? numbermap_30[num_29] : null);
            if ((arr_31.Length > 0)) {
                return arr_31[(int)(0)];
            }
        };
        return -1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 10)));
            cont_34 = Program.change(cont_34, 0, 10);
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 10)));
            cont_34 = Program.change(cont_34, 0, 20);
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 10)));
            Console.WriteLine(Program._fmtTop(Program.find(cont_34, 20)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
