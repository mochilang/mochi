// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] subarray(long[] xs_0, long start_1, long end_2) {
        long[] result_3 = new long[]{};
        long k_4 = start_1;
        while ((k_4 < end_2)) {
            result_3 = ((Func<long[]>)(() => { var _tmp = result_3.ToList(); _tmp.Add(_idx(xs_0, k_4)); return _tmp.ToArray(); }))();
            k_4 = (k_4 + 1);
        };
        return result_3;
    }

    public static long[] merge(long[] left_half_5, long[] right_half_6) {
        long[] result_7 = new long[]{};
        long i_8 = 0;
        long j_9 = 0;
        while (((i_8 < left_half_5.Length) && (j_9 < right_half_6.Length))) {
            if ((_idx(left_half_5, i_8) < _idx(right_half_6, j_9))) {
                result_7 = ((Func<long[]>)(() => { var _tmp = result_7.ToList(); _tmp.Add(_idx(left_half_5, i_8)); return _tmp.ToArray(); }))();
                i_8 = (i_8 + 1);
            } else {
                result_7 = ((Func<long[]>)(() => { var _tmp = result_7.ToList(); _tmp.Add(_idx(right_half_6, j_9)); return _tmp.ToArray(); }))();
                j_9 = (j_9 + 1);
            }
        };
        while ((i_8 < left_half_5.Length)) {
            result_7 = ((Func<long[]>)(() => { var _tmp = result_7.ToList(); _tmp.Add(_idx(left_half_5, i_8)); return _tmp.ToArray(); }))();
            i_8 = (i_8 + 1);
        };
        while ((j_9 < right_half_6.Length)) {
            result_7 = ((Func<long[]>)(() => { var _tmp = result_7.ToList(); _tmp.Add(_idx(right_half_6, j_9)); return _tmp.ToArray(); }))();
            j_9 = (j_9 + 1);
        };
        return result_7;
    }

    public static long[] merge_sort(long[] array_10) {
        if ((array_10.Length <= 1)) {
            return array_10;
        };
        long middle_11 = (array_10.Length / 2);
        long[] left_half_12 = Program.subarray(array_10, 0, middle_11);
        long[] right_half_13 = Program.subarray(array_10, middle_11, array_10.Length);
        long[] sorted_left_14 = Program.merge_sort(left_half_12);
        long[] sorted_right_15 = Program.merge_sort(right_half_13);
        return Program.merge(sorted_left_14, sorted_right_15);
    }

    public static long h_index(long[] citations_16) {
        long idx_17 = 0;
        while ((idx_17 < citations_16.Length)) {
            if ((_idx(citations_16, idx_17) < 0)) {
                throw new Exception("The citations should be a list of non negative integers.");
            }
            idx_17 = (idx_17 + 1);
        };
        long[] sorted_18 = Program.merge_sort(citations_16);
        long n_19 = sorted_18.Length;
        long i_20 = 0;
        while ((i_20 < n_19)) {
            if ((_idx(sorted_18, ((n_19 - 1) - i_20)) <= i_20)) {
                return i_20;
            }
            i_20 = (i_20 + 1);
        };
        return n_19;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.h_index(new long[]{3, 0, 6, 1, 5}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.h_index(new long[]{1, 3, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.h_index(new long[]{1, 2, 3}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
