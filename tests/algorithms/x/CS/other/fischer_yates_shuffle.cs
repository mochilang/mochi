// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long seed_0 = 1;
    static long[] integers_16 = new long[]{0, 1, 2, 3, 4, 5, 6, 7};
    static string[] strings_17 = new string[]{"python", "says", "hello", "!"};
    public static long rand() {
        seed_0 = _mod(((seed_0 * 1103515245) + 12345), 2147483648L);
        return (seed_0 / 65536);
    }

    public static long randint(long a_1, long b_2) {
        long r_3 = Program.rand();
        return (a_1 + _mod(r_3, ((b_2 - a_1) + 1)));
    }

    public static long[] fisher_yates_shuffle_int(long[] data_4) {
        long[] res_5 = data_4;
        long i_6 = 0;
        while ((i_6 < res_5.Length)) {
            long a_7 = Program.randint(0, (res_5.Length - 1));
            long b_8 = Program.randint(0, (res_5.Length - 1));
            long temp_9 = _idx(res_5, a_7);
            res_5[(int)(a_7)] = _idx(res_5, b_8);
            res_5[(int)(b_8)] = temp_9;
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static string[] fisher_yates_shuffle_str(string[] data_10) {
        string[] res_11 = data_10;
        long i_12 = 0;
        while ((i_12 < res_11.Length)) {
            long a_13 = Program.randint(0, (res_11.Length - 1));
            long b_14 = Program.randint(0, (res_11.Length - 1));
            string temp_15 = _idx(res_11, a_13);
            res_11[(int)(a_13)] = _idx(res_11, b_14);
            res_11[(int)(b_14)] = temp_15;
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Fisher-Yates Shuffle:"));
            Console.WriteLine(Program._fmtTop(((("List " + _fmtStr(integers_16)) + " ") + _fmtStr(strings_17))));
            Console.WriteLine(Program._fmtTop(((("FY Shuffle " + _fmtStr(Program.fisher_yates_shuffle_int(integers_16))) + " ") + _fmtStr(Program.fisher_yates_shuffle_str(strings_17)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
