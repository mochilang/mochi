// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] DOOMSDAY_LEAP_0 = new long[]{4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5};
    static long[] DOOMSDAY_NOT_LEAP_1 = new long[]{3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5};
    static Dictionary<long, string> WEEK_DAY_NAMES_2 = new Dictionary<long, string>{{0, "Sunday"}, {1, "Monday"}, {2, "Tuesday"}, {3, "Wednesday"}, {4, "Thursday"}, {5, "Friday"}, {6, "Saturday"}};
    public static string get_week_day(long year_3, long month_4, long day_5) {
        if ((year_3 < 100)) {
            throw new Exception("year should be in YYYY format");
        };
        if (((month_4 < 1) || (month_4 > 12))) {
            throw new Exception("month should be between 1 to 12");
        };
        if (((day_5 < 1) || (day_5 > 31))) {
            throw new Exception("day should be between 1 to 31");
        };
        long century_6 = (year_3 / 100);
        long century_anchor_7 = _mod(((5 * _mod(century_6, 4)) + 2), 7);
        long centurian_8 = _mod(year_3, 100);
        long centurian_m_9 = _mod(centurian_8, 12);
        long dooms_day_10 = _mod(((((centurian_8 / 12) + centurian_m_9) + (centurian_m_9 / 4)) + century_anchor_7), 7);
        long day_anchor_11 = (((_mod(year_3, 4) != 0) || ((centurian_8 == 0) && (_mod(year_3, 400) != 0))) ? DOOMSDAY_NOT_LEAP_1[(int)((month_4 - 1))] : DOOMSDAY_LEAP_0[(int)((month_4 - 1))]);
        long week_day_12 = _mod(((dooms_day_10 + day_5) - day_anchor_11), 7);
        if ((week_day_12 < 0)) {
            week_day_12 = (week_day_12 + 7);
        };
        return (WEEK_DAY_NAMES_2.ContainsKey(week_day_12) ? WEEK_DAY_NAMES_2[week_day_12] : "");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.get_week_day(2020, 10, 24)));
            Console.WriteLine(Program._fmtTop(Program.get_week_day(2017, 10, 24)));
            Console.WriteLine(Program._fmtTop(Program.get_week_day(2019, 5, 3)));
            Console.WriteLine(Program._fmtTop(Program.get_week_day(1970, 9, 16)));
            Console.WriteLine(Program._fmtTop(Program.get_week_day(1870, 8, 13)));
            Console.WriteLine(Program._fmtTop(Program.get_week_day(2040, 3, 14)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
