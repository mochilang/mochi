// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[] p4_table_28 = new long[]{2, 4, 3, 1};
    static string key_39 = "1010000010";
    static string message_40 = "11010111";
    static long[] p8_table_41 = new long[]{6, 3, 7, 4, 8, 5, 10, 9};
    static long[] p10_table_42 = new long[]{3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
    static long[] IP_43 = new long[]{2, 6, 3, 1, 4, 8, 5, 7};
    static long[] IP_inv_44 = new long[]{4, 1, 3, 5, 7, 2, 8, 6};
    static long[] expansion_45 = new long[]{4, 1, 2, 3, 2, 3, 4, 1};
    static long[][] s0_46 = new long[][]{new long[]{1, 0, 3, 2}, new long[]{3, 2, 1, 0}, new long[]{0, 2, 1, 3}, new long[]{3, 1, 3, 2}};
    static long[][] s1_47 = new long[][]{new long[]{0, 1, 2, 3}, new long[]{2, 0, 1, 3}, new long[]{3, 0, 1, 0}, new long[]{2, 1, 0, 3}};
    static string temp_48 = Program.apply_table(key_39, p10_table_42);
    static string left_49 = _substr(temp_48, 0, 5);
    static string right_50 = _substr(temp_48, 5, 10);
    public static string apply_table(string inp_0, long[] table_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < table_1.Length)) {
            long idx_4 = (_idx(table_1, i_3) - 1);
            if ((idx_4 < 0)) {
                idx_4 = (inp_0.Length - 1);
            }
            res_2 = (res_2 + _substr(inp_0, idx_4, (idx_4 + 1)));
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string left_shift(string data_5) {
        return (_substr(data_5, 1, data_5.Length) + _substr(data_5, 0, 1));
    }

    public static string xor(string a_6, string b_7) {
        string res_8 = "";
        long i_9 = 0;
        while (((i_9 < a_6.Length) && (i_9 < b_7.Length))) {
            if ((_substr(a_6, i_9, (i_9 + 1)) == _substr(b_7, i_9, (i_9 + 1)))) {
                res_8 = (res_8 + "0");
            } else {
                res_8 = (res_8 + "1");
            }
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static string int_to_binary(long n_10) {
        if ((n_10 == 0)) {
            return "0";
        };
        string res_11 = "";
        long num_12 = n_10;
        while ((num_12 > 0)) {
            res_11 = (_fmtStr(_mod(num_12, 2)) + res_11);
            num_12 = _floordiv(num_12, 2);
        };
        return res_11;
    }

    public static string pad_left(string s_13, long width_14) {
        string res_15 = s_13;
        while ((res_15.Length < width_14)) {
            res_15 = ("0" + res_15);
        };
        return res_15;
    }

    public static long bin_to_int(string s_16) {
        long result_17 = 0;
        long i_18 = 0;
        while ((i_18 < s_16.Length)) {
            long digit_19 = long.Parse(_substr(s_16, i_18, (i_18 + 1)));
            result_17 = ((result_17 * 2) + digit_19);
            i_18 = (i_18 + 1);
        };
        return result_17;
    }

    public static string apply_sbox(long[][] s_20, string data_21) {
        string row_bits_22 = (_substr(data_21, 0, 1) + _substr(data_21, (data_21.Length - 1), data_21.Length));
        string col_bits_23 = _substr(data_21, 1, 3);
        long row_24 = Program.bin_to_int(row_bits_22);
        long col_25 = Program.bin_to_int(col_bits_23);
        long val_26 = _idx(_idx(s_20, row_24), col_25);
        string out_27 = Program.int_to_binary(val_26);
        return out_27;
    }

    public static string f(long[] expansion_29, long[][] s0_30, long[][] s1_31, string key_32, string message_33) {
        string left_34 = _substr(message_33, 0, 4);
        string right_35 = _substr(message_33, 4, 8);
        string temp_36 = Program.apply_table(right_35, expansion_29);
        temp_36 = Program.xor(temp_36, key_32);
        string left_bin_str_37 = Program.apply_sbox(s0_30, _substr(temp_36, 0, 4));
        string right_bin_str_38 = Program.apply_sbox(s1_31, _substr(temp_36, 4, 8));
        left_bin_str_37 = Program.pad_left(left_bin_str_37, 2);
        right_bin_str_38 = Program.pad_left(right_bin_str_38, 2);
        temp_36 = Program.apply_table((left_bin_str_37 + right_bin_str_38), p4_table_28);
        temp_36 = Program.xor(left_34, temp_36);
        return (temp_36 + right_35);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            left_49 = Program.left_shift(left_49);
            right_50 = Program.left_shift(right_50);
            string key1_51 = Program.apply_table((left_49 + right_50), p8_table_41);
            left_49 = Program.left_shift(left_49);
            right_50 = Program.left_shift(right_50);
            left_49 = Program.left_shift(left_49);
            right_50 = Program.left_shift(right_50);
            string key2_52 = Program.apply_table((left_49 + right_50), p8_table_41);
            temp_48 = Program.apply_table(message_40, IP_43);
            temp_48 = Program.f(expansion_45, s0_46, s1_47, key1_51, temp_48);
            temp_48 = (_substr(temp_48, 4, 8) + _substr(temp_48, 0, 4));
            temp_48 = Program.f(expansion_45, s0_46, s1_47, key2_52, temp_48);
            string CT_53 = Program.apply_table(temp_48, IP_inv_44);
            Console.WriteLine(Program._fmtTop(("Cipher text is: " + CT_53)));
            temp_48 = Program.apply_table(CT_53, IP_43);
            temp_48 = Program.f(expansion_45, s0_46, s1_47, key2_52, temp_48);
            temp_48 = (_substr(temp_48, 4, 8) + _substr(temp_48, 0, 4));
            temp_48 = Program.f(expansion_45, s0_46, s1_47, key1_51, temp_48);
            string PT_54 = Program.apply_table(temp_48, IP_inv_44);
            Console.WriteLine(Program._fmtTop(("Plain text after decypting is: " + PT_54)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
