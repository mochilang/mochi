// Generated by Mochi 0.10.64 (commit 0529231fcf) on 2025-08-12 11:18 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Entry {
    public long key;
    public long val;
    public long freq;
    public long order;
    public override string ToString() => $"Entry {{key = {key}, val = {val}, freq = {freq}, order = {order}}}";
}
class LFUCache {
    public Entry[] entries;
    public long capacity;
    public long hits;
    public long miss;
    public long tick;
    public override string ToString() => $"LFUCache {{entries = {entries}, capacity = {capacity}, hits = {hits}, miss = {miss}, tick = {tick}}}";
}
class GetResult {
    public LFUCache cache;
    public long value;
    public bool ok;
    public override string ToString() => $"GetResult {{cache = {cache}, value = {value}, ok = {ok}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            var v = nowSeed;
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return v;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static LFUCache lfu_new(long cap_0) {
        return new LFUCache{entries = new Entry[]{}, capacity = cap_0, hits = 0, miss = 0, tick = 0};
    }

    public static long find_entry(Entry[] entries_1, long key_2) {
        long i_3 = 0;
        while ((i_3 < entries_1.Length)) {
            Entry e_4 = _idx(entries_1, i_3);
            if ((e_4.key == key_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return (0 - 1);
    }

    public static GetResult lfu_get(LFUCache cache_5, long key_6) {
        long idx_7 = Program.find_entry(cache_5.entries, key_6);
        if ((idx_7 == (0 - 1))) {
            LFUCache new_cache_8 = new LFUCache{entries = cache_5.entries, capacity = cache_5.capacity, hits = cache_5.hits, miss = (cache_5.miss + 1), tick = cache_5.tick};
            return new GetResult{cache = new_cache_8, value = 0, ok = false};
        };
        Entry[] entries_9 = cache_5.entries;
        Entry e_10 = _idx(entries_9, idx_7);
        e_10.freq = (e_10.freq + 1);
        long new_tick_11 = (cache_5.tick + 1);
        e_10.order = new_tick_11;
        entries_9[(int)(idx_7)] = e_10;
        LFUCache new_cache_12 = new LFUCache{entries = entries_9, capacity = cache_5.capacity, hits = (cache_5.hits + 1), miss = cache_5.miss, tick = new_tick_11};
        return new GetResult{cache = new_cache_12, value = e_10.val, ok = true};
    }

    public static Entry[] remove_lfu(Entry[] entries_13) {
        if ((entries_13.Length == 0)) {
            return entries_13;
        };
        long min_idx_14 = 0;
        long i_15 = 1;
        while ((i_15 < entries_13.Length)) {
            Entry e_16 = _idx(entries_13, i_15);
            Entry m_17 = _idx(entries_13, min_idx_14);
            if (((e_16.freq < m_17.freq) || ((e_16.freq == m_17.freq) && (e_16.order < m_17.order)))) {
                min_idx_14 = i_15;
            }
            i_15 = (i_15 + 1);
        };
        Entry[] res_18 = new Entry[]{};
        long j_19 = 0;
        while ((j_19 < entries_13.Length)) {
            if ((j_19 != min_idx_14)) {
                res_18 = (Enumerable.ToArray(Enumerable.Append<Entry>(res_18, _idx(entries_13, j_19))));
            }
            j_19 = (j_19 + 1);
        };
        return res_18;
    }

    public static LFUCache lfu_put(LFUCache cache_20, long key_21, long value_22) {
        Entry[] entries_23 = cache_20.entries;
        long idx_24 = Program.find_entry(entries_23, key_21);
        if ((idx_24 != (0 - 1))) {
            Entry e_25 = _idx(entries_23, idx_24);
            e_25.val = value_22;
            e_25.freq = (e_25.freq + 1);
            long new_tick_26 = (cache_20.tick + 1);
            e_25.order = new_tick_26;
            entries_23[(int)(idx_24)] = e_25;
            return new LFUCache{entries = entries_23, capacity = cache_20.capacity, hits = cache_20.hits, miss = cache_20.miss, tick = new_tick_26};
        };
        if ((entries_23.Length >= cache_20.capacity)) {
            entries_23 = Program.remove_lfu(entries_23);
        };
        long new_tick_27 = (cache_20.tick + 1);
        Entry new_entry_28 = new Entry{key = key_21, val = value_22, freq = 1, order = new_tick_27};
        entries_23 = (Enumerable.ToArray(Enumerable.Append<Entry>(entries_23, new_entry_28)));
        return new LFUCache{entries = entries_23, capacity = cache_20.capacity, hits = cache_20.hits, miss = cache_20.miss, tick = new_tick_27};
    }

    public static string cache_info(LFUCache cache_29) {
        return (((((((("CacheInfo(hits=" + _fmtStr(cache_29.hits)) + ", misses=") + _fmtStr(cache_29.miss)) + ", capacity=") + _fmtStr(cache_29.capacity)) + ", current_size=") + _fmtStr(cache_29.entries.Length)) + ")");
    }

    public static void main() {
        LFUCache cache_30 = Program.lfu_new(2);
        cache_30 = Program.lfu_put(cache_30, 1, 1);
        cache_30 = Program.lfu_put(cache_30, 2, 2);
        GetResult r_31 = Program.lfu_get(cache_30, 1);
        cache_30 = r_31.cache;
        if (r_31.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(r_31.value)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
        cache_30 = Program.lfu_put(cache_30, 3, 3);
        r_31 = Program.lfu_get(cache_30, 2);
        cache_30 = r_31.cache;
        if (r_31.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(r_31.value)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
        cache_30 = Program.lfu_put(cache_30, 4, 4);
        r_31 = Program.lfu_get(cache_30, 1);
        cache_30 = r_31.cache;
        if (r_31.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(r_31.value)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
        r_31 = Program.lfu_get(cache_30, 3);
        cache_30 = r_31.cache;
        if (r_31.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(r_31.value)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
        r_31 = Program.lfu_get(cache_30, 4);
        cache_30 = r_31.cache;
        if (r_31.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(r_31.value)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
        Console.WriteLine(Program._fmtTop(Program.cache_info(cache_30)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
