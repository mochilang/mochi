// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Thing {
    public string name;
    public double value;
    public double weight;
    public override string ToString() => $"Thing {{name = \"{name}\", value = {value.ToString("0.0")}, weight = {weight.ToString("0.0")}}}";
}
class GreedyResult {
    public Thing[] items;
    public double total_value;
    public override string ToString() => $"GreedyResult {{items = {items}, total_value = {total_value.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string[] food_31 = new string[]{"Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"};
    static double[] value_32 = new double[]{80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0};
    static double[] weight_33 = new double[]{40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0};
    static Thing[] foods_34 = Program.build_menu(food_31, value_32, weight_33);
    public static double get_value(Thing t_0) {
        return t_0.value;
    }

    public static double get_weight(Thing t_1) {
        return t_1.weight;
    }

    public static string get_name(Thing t_2) {
        return t_2.name;
    }

    public static double value_weight(Thing t_3) {
        return (t_3.value / t_3.weight);
    }

    public static Thing[] build_menu(string[] names_4, double[] values_5, double[] weights_6) {
        Thing[] menu_7 = new Thing[]{};
        long i_8 = 0;
        while ((((i_8 < values_5.Length) && (i_8 < names_4.Length)) && (i_8 < weights_6.Length))) {
            menu_7 = ((Func<Thing[]>)(() => { var _tmp = menu_7.Cast<Thing>().ToList(); _tmp.Add(new Thing{name = _idx(names_4, i_8), value = _idx(values_5, i_8), weight = _idx(weights_6, i_8)}); return _tmp.ToArray(); }))();
            i_8 = (i_8 + 1);
        };
        return menu_7;
    }

    public static Thing[] sort_desc(Thing[] items_9, Func<Thing, double> key_func_10) {
        Thing[] arr_11 = new Thing[]{};
        long i_12 = 0;
        while ((i_12 < items_9.Length)) {
            arr_11 = ((Func<Thing[]>)(() => { var _tmp = arr_11.Cast<Thing>().ToList(); _tmp.Add(_idx(items_9, i_12)); return _tmp.ToArray(); }))();
            i_12 = (i_12 + 1);
        };
        long j_13 = 1;
        while ((j_13 < arr_11.Length)) {
            Thing key_item_14 = _idx(arr_11, j_13);
            var key_val_15 = key_func_10(key_item_14);
            long k_16 = (j_13 - 1);
            while (((k_16 >= 0) && (Convert.ToDouble(key_func_10(_idx(arr_11, k_16))) < Convert.ToDouble(key_val_15)))) {
                arr_11[(int)((k_16 + 1))] = _idx(arr_11, k_16);
                k_16 = (k_16 - 1);
            }
            arr_11[(int)((k_16 + 1))] = key_item_14;
            j_13 = (j_13 + 1);
        };
        return arr_11;
    }

    public static GreedyResult greedy(Thing[] items_17, double max_cost_18, Func<Thing, double> key_func_19) {
        Thing[] items_copy_20 = Program.sort_desc(items_17, key_func_19);
        Thing[] result_21 = new Thing[]{};
        double total_value_22 = 0.0;
        double total_cost_23 = 0.0;
        long i_24 = 0;
        while ((i_24 < items_copy_20.Length)) {
            Thing it_25 = _idx(items_copy_20, i_24);
            double w_26 = Program.get_weight(it_25);
            if (((total_cost_23 + w_26) <= max_cost_18)) {
                result_21 = ((Func<Thing[]>)(() => { var _tmp = result_21.Cast<Thing>().ToList(); _tmp.Add(it_25); return _tmp.ToArray(); }))();
                total_cost_23 = (total_cost_23 + w_26);
                total_value_22 = (total_value_22 + Program.get_value(it_25));
            }
            i_24 = (i_24 + 1);
        };
        return new GreedyResult{items = result_21, total_value = total_value_22};
    }

    public static string thing_to_string(Thing t_27) {
        return (((((("Thing(" + t_27.name) + ", ") + _fmtStr(t_27.value)) + ", ") + _fmtStr(t_27.weight)) + ")");
    }

    public static string list_to_string(Thing[] ts_28) {
        string s_29 = "[";
        long i_30 = 0;
        while ((i_30 < ts_28.Length)) {
            s_29 = (s_29 + Program.thing_to_string(_idx(ts_28, i_30)));
            if ((i_30 < (ts_28.Length - 1))) {
                s_29 = (s_29 + ", ");
            }
            i_30 = (i_30 + 1);
        };
        s_29 = (s_29 + "]");
        return s_29;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(foods_34)));
            GreedyResult res_35 = Program.greedy(foods_34, 500.0, get_value);
            Console.WriteLine(Program._fmtTop(Program.list_to_string(res_35.items)));
            Console.WriteLine(Program._fmtTop(_fmtStr(res_35.total_value)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
