// Generated by Mochi 0.10.64 (commit b11da3e151) on 2025-08-12 09:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class LRUCache {
    public long max_capacity;
    public string[] store;
    public override string ToString() => $"LRUCache {{max_capacity = {max_capacity}, store = {store}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static LRUCache lru_24 = Program.new_cache(4);
    public static LRUCache new_cache(long n_0) {
        if ((n_0 < 0)) {
            throw new Exception("n should be an integer greater than 0.");
        };
        long cap_1 = ((n_0 == 0) ? 2147483647 : n_0);
        return new LRUCache{max_capacity = cap_1, store = new string[]{}};
    }

    public static string[] remove_element(string[] xs_2, string x_3) {
        string[] res_4 = new string[]{};
        bool removed_5 = false;
        long i_6 = 0;
        while ((i_6 < xs_2.Length)) {
            string v_7 = _idx(xs_2, i_6);
            if (((removed_5 == false) && (v_7 == x_3))) {
                removed_5 = true;
            } else {
                res_4 = (res_4.Concat(new string[]{v_7}).ToArray());
            }
            i_6 = (i_6 + 1);
        };
        return res_4;
    }

    public static LRUCache refer(LRUCache cache_8, string x_9) {
        string[] store_10 = cache_8.store;
        bool exists_11 = false;
        long i_12 = 0;
        while ((i_12 < store_10.Length)) {
            if ((_idx(store_10, i_12) == x_9)) {
                exists_11 = true;
            }
            i_12 = (i_12 + 1);
        };
        if (exists_11) {
            store_10 = Program.remove_element(store_10, x_9);
        } else if ((store_10.Length == cache_8.max_capacity)) {
            string[] new_store_13 = new string[]{};
            long j_14 = 0;
            while ((j_14 < (store_10.Length - 1))) {
                new_store_13 = (new_store_13.Concat(new string[]{_idx(store_10, j_14)}).ToArray());
                j_14 = (j_14 + 1);
            }
            store_10 = new_store_13;
        };
        store_10 = (new string[]{x_9}.Concat(store_10).ToArray());
        return new LRUCache{max_capacity = cache_8.max_capacity, store = store_10};
    }

    public static void display(LRUCache cache_15) {
        long i_16 = 0;
        while ((i_16 < cache_15.store.Length)) {
            Console.WriteLine(Program._fmtTop(_idx(cache_15.store, i_16)));
            i_16 = (i_16 + 1);
        };
    }

    public static string repr_item(string s_17) {
        bool all_digits_18 = true;
        long i_19 = 0;
        while ((i_19 < s_17.Length)) {
            string ch_20 = s_17.Substring((int)(i_19), 1);
            if (((string.Compare(ch_20, "0") < 0) || (string.Compare(ch_20, "9") > 0))) {
                all_digits_18 = false;
            }
            i_19 = (i_19 + 1);
        };
        if (all_digits_18) {
            return s_17;
        };
        return (("'" + s_17) + "'");
    }

    public static string cache_repr(LRUCache cache_21) {
        string res_22 = (("LRUCache(" + _fmtStr(cache_21.max_capacity)) + ") => [");
        long i_23 = 0;
        while ((i_23 < cache_21.store.Length)) {
            res_22 = (res_22 + Program.repr_item(_idx(cache_21.store, i_23)));
            if ((i_23 < (cache_21.store.Length - 1))) {
                res_22 = (res_22 + ", ");
            }
            i_23 = (i_23 + 1);
        };
        res_22 = (res_22 + "]");
        return res_22;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            lru_24 = Program.refer(lru_24, "A");
            lru_24 = Program.refer(lru_24, "2");
            lru_24 = Program.refer(lru_24, "3");
            lru_24 = Program.refer(lru_24, "A");
            lru_24 = Program.refer(lru_24, "4");
            lru_24 = Program.refer(lru_24, "5");
            string r_25 = Program.cache_repr(lru_24);
            Console.WriteLine(Program._fmtTop(r_25));
            if ((r_25 != "LRUCache(4) => [5, 4, 'A', 3]")) {
                throw new Exception("Assertion error");
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
