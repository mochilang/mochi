// Generated by Mochi 0.10.68 (commit 63597cd0ed) on 2025-08-17 20:29 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Node {
    public long key;
    public long value;
    public long prev;
    public long next;
    public override string ToString() => $"Node {{key = {key}, value = {value}, prev = {prev}, next = {next}}}";
}
class DoubleLinkedList {
    public Node[] nodes;
    public long head;
    public long tail;
    public override string ToString() => $"DoubleLinkedList {{nodes = {nodes}, head = {head}, tail = {tail}}}";
}
class LRUCache {
    public DoubleLinkedList list;
    public long capacity;
    public long num_keys;
    public long hits;
    public long misses;
    public Dictionary<string, long> cache;
    public override string ToString() => $"LRUCache {{list = {list}, capacity = {capacity}, num_keys = {num_keys}, hits = {hits}, misses = {misses}, cache = {cache}}}";
}
class GetResult {
    public LRUCache cache;
    public long value;
    public bool ok;
    public override string ToString() => $"GetResult {{cache = {cache}, value = {value}, ok = {ok}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static DoubleLinkedList new_list() {
        Node[] nodes_0 = new Node[]{};
        Node head_1 = new Node{key = 0, value = 0, prev = (0 - 1), next = 1};
        Node tail_2 = new Node{key = 0, value = 0, prev = 0, next = (0 - 1)};
        nodes_0 = ((Func<Node[]>)(() => { var _tmp = nodes_0.Cast<Node>().ToList(); _tmp.Add(head_1); return _tmp.ToArray(); }))();
        nodes_0 = ((Func<Node[]>)(() => { var _tmp = nodes_0.Cast<Node>().ToList(); _tmp.Add(tail_2); return _tmp.ToArray(); }))();
        return new DoubleLinkedList{nodes = nodes_0, head = 0, tail = 1};
    }

    public static DoubleLinkedList dll_add(DoubleLinkedList lst_3, long idx_4) {
        Node[] nodes_5 = lst_3.nodes;
        long tail_idx_6 = lst_3.tail;
        Node tail_node_7 = _idx(nodes_5, tail_idx_6);
        long prev_idx_8 = tail_node_7.prev;
        Node node_9 = _idx(nodes_5, idx_4);
        node_9.prev = prev_idx_8;
        node_9.next = tail_idx_6;
        nodes_5[(int)(idx_4)] = node_9;
        Node prev_node_10 = _idx(nodes_5, prev_idx_8);
        prev_node_10.next = idx_4;
        nodes_5[(int)(prev_idx_8)] = prev_node_10;
        tail_node_7.prev = idx_4;
        nodes_5[(int)(tail_idx_6)] = tail_node_7;
        lst_3.nodes = nodes_5;
        return lst_3;
    }

    public static DoubleLinkedList dll_remove(DoubleLinkedList lst_11, long idx_12) {
        Node[] nodes_13 = lst_11.nodes;
        Node node_14 = _idx(nodes_13, idx_12);
        long prev_idx_15 = node_14.prev;
        long next_idx_16 = node_14.next;
        if (((prev_idx_15 == (0 - 1)) || (next_idx_16 == (0 - 1)))) {
            return lst_11;
        };
        Node prev_node_17 = _idx(nodes_13, prev_idx_15);
        prev_node_17.next = next_idx_16;
        nodes_13[(int)(prev_idx_15)] = prev_node_17;
        Node next_node_18 = _idx(nodes_13, next_idx_16);
        next_node_18.prev = prev_idx_15;
        nodes_13[(int)(next_idx_16)] = next_node_18;
        node_14.prev = (0 - 1);
        node_14.next = (0 - 1);
        nodes_13[(int)(idx_12)] = node_14;
        lst_11.nodes = nodes_13;
        return lst_11;
    }

    public static LRUCache new_cache(long cap_19) {
        Dictionary<string, long> empty_map_20 = new Dictionary<string, long>{};
        return new LRUCache{list = Program.new_list(), capacity = cap_19, num_keys = 0, hits = 0, misses = 0, cache = empty_map_20};
    }

    public static GetResult lru_get(LRUCache c_21, long key_22) {
        LRUCache cache_23 = c_21;
        string key_str_24 = _fmtStr(key_22);
        if ((cache_23.cache.ContainsKey(key_str_24))) {
            long idx_25 = (cache_23.cache.ContainsKey(key_str_24) ? cache_23.cache[key_str_24] : 0);
            if ((idx_25 != (0 - 1))) {
                cache_23.hits = (cache_23.hits + 1);
                Node node_26 = _idx(cache_23.list.nodes, idx_25);
                long value_27 = node_26.value;
                cache_23.list = Program.dll_remove(cache_23.list, idx_25);
                cache_23.list = Program.dll_add(cache_23.list, idx_25);
                return new GetResult{cache = cache_23, value = value_27, ok = true};
            }
        };
        cache_23.misses = (cache_23.misses + 1);
        return new GetResult{cache = cache_23, value = 0, ok = false};
    }

    public static LRUCache lru_put(LRUCache c_28, long key_29, long value_30) {
        LRUCache cache_31 = c_28;
        string key_str_32 = _fmtStr(key_29);
        if ((!(cache_31.cache.ContainsKey(key_str_32)))) {
            if ((cache_31.num_keys >= cache_31.capacity)) {
                Node head_node_33 = _idx(cache_31.list.nodes, cache_31.list.head);
                long first_idx_34 = head_node_33.next;
                Node first_node_35 = _idx(cache_31.list.nodes, first_idx_34);
                long old_key_36 = first_node_35.key;
                cache_31.list = Program.dll_remove(cache_31.list, first_idx_34);
                Dictionary<string, long> mdel_37 = cache_31.cache;
                mdel_37[_fmtStr(old_key_36)] = (0 - 1);
                cache_31.cache = mdel_37;
                cache_31.num_keys = (cache_31.num_keys - 1);
            }
            Node[] nodes_38 = cache_31.list.nodes;
            Node new_node_39 = new Node{key = key_29, value = value_30, prev = (0 - 1), next = (0 - 1)};
            nodes_38 = ((Func<Node[]>)(() => { var _tmp = nodes_38.Cast<Node>().ToList(); _tmp.Add(new_node_39); return _tmp.ToArray(); }))();
            long idx_40 = (nodes_38.Length - 1);
            cache_31.list.nodes = nodes_38;
            cache_31.list = Program.dll_add(cache_31.list, idx_40);
            Dictionary<string, long> m_41 = cache_31.cache;
            m_41[key_str_32] = idx_40;
            cache_31.cache = m_41;
            cache_31.num_keys = (cache_31.num_keys + 1);
        } else {
            Dictionary<string, long> m_42 = cache_31.cache;
            long idx_43 = (m_42.ContainsKey(key_str_32) ? m_42[key_str_32] : 0);
            Node[] nodes_44 = cache_31.list.nodes;
            Node node_45 = _idx(nodes_44, idx_43);
            node_45.value = value_30;
            nodes_44[(int)(idx_43)] = node_45;
            cache_31.list.nodes = nodes_44;
            cache_31.list = Program.dll_remove(cache_31.list, idx_43);
            cache_31.list = Program.dll_add(cache_31.list, idx_43);
            cache_31.cache = m_42;
        };
        return cache_31;
    }

    public static string cache_info(LRUCache cache_46) {
        return (((((((("CacheInfo(hits=" + _fmtStr(cache_46.hits)) + ", misses=") + _fmtStr(cache_46.misses)) + ", capacity=") + _fmtStr(cache_46.capacity)) + ", current size=") + _fmtStr(cache_46.num_keys)) + ")");
    }

    public static void print_result(GetResult res_47) {
        if (res_47.ok) {
            Console.WriteLine(Program._fmtTop(_fmtStr(res_47.value)));
        } else {
            Console.WriteLine(Program._fmtTop("None"));
        };
    }

    public static void main() {
        LRUCache cache_48 = Program.new_cache(2);
        cache_48 = Program.lru_put(cache_48, 1, 1);
        cache_48 = Program.lru_put(cache_48, 2, 2);
        GetResult r1_49 = Program.lru_get(cache_48, 1);
        cache_48 = r1_49.cache;
        Program.print_result(r1_49);
        cache_48 = Program.lru_put(cache_48, 3, 3);
        GetResult r2_50 = Program.lru_get(cache_48, 2);
        cache_48 = r2_50.cache;
        Program.print_result(r2_50);
        cache_48 = Program.lru_put(cache_48, 4, 4);
        GetResult r3_51 = Program.lru_get(cache_48, 1);
        cache_48 = r3_51.cache;
        Program.print_result(r3_51);
        GetResult r4_52 = Program.lru_get(cache_48, 3);
        cache_48 = r4_52.cache;
        Program.print_result(r4_52);
        GetResult r5_53 = Program.lru_get(cache_48, 4);
        cache_48 = r5_53.cache;
        Program.print_result(r5_53);
        Console.WriteLine(Program._fmtTop(Program.cache_info(cache_48)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
