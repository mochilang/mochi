// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, string> OPEN_TO_CLOSED_0 = new Dictionary<string, string>{{"(", ")"}, {"[", "]"}, {"{", "}"}};
    public static string[] slice_without_last(string[] xs_1) {
        string[] res_2 = new string[]{};
        long i_3 = 0;
        while ((i_3 < (xs_1.Length - 1))) {
            res_2 = ((Func<string[]>)(() => { var _tmp = res_2.ToList(); _tmp.Add(_idx(xs_1, i_3)); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static bool is_balanced(string s_4) {
        string[] stack_5 = new string[]{};
        long i_6 = 0;
        while ((i_6 < s_4.Length)) {
            string symbol_7 = _substr(s_4, i_6, (i_6 + 1));
            if ((OPEN_TO_CLOSED_0.ContainsKey(symbol_7))) {
                stack_5 = ((Func<string[]>)(() => { var _tmp = stack_5.ToList(); _tmp.Add(symbol_7); return _tmp.ToArray(); }))();
            } else if ((((symbol_7 == ")") || (symbol_7 == "]")) || (symbol_7 == "}"))) {
                if ((stack_5.Length == 0)) {
                    return false;
                }
                string top_8 = _idx(stack_5, (stack_5.Length - 1));
                if (((OPEN_TO_CLOSED_0.ContainsKey(top_8) ? OPEN_TO_CLOSED_0[top_8] : "") != symbol_7)) {
                    return false;
                }
                stack_5 = Program.slice_without_last(stack_5);
            }
            i_6 = (i_6 + 1);
        };
        return (stack_5.Length == 0);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.is_balanced("")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("()")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("[]")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("{}")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("()[]{}")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("(())")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("[[")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("([{}])")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("(()[)]")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("([)]")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("[[()]]")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("(()(()))")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("]")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("Life is a bowl of cherries.")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("Life is a bowl of che{}ies.")));
        Console.WriteLine(Program._fmtTop(Program.is_balanced("Life is a bowl of che}{ies.")));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
