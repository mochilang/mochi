// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long get_avg(long number_1_0, long number_2_1) {
        return ((number_1_0 + number_2_1) / 2);
    }

    public static long[] guess_the_number(long lower_2, long higher_3, long to_guess_4) {
        if ((lower_2 > higher_3)) {
            throw new Exception("argument value for lower and higher must be(lower > higher)");
        };
        if ((!((lower_2 < to_guess_4) && (to_guess_4 < higher_3)))) {
            throw new Exception("guess value must be within the range of lower and higher value");
        };
        Func<long, string> answer = null;
        answer = (long number_5) => {if ((number_5 > to_guess_4)) {
            return "high";
        } else if ((number_5 < to_guess_4)) {
            return "low";
        } else {
            return "same";
        };};
        Console.WriteLine(Program._fmtTop("started..."));
        long last_lowest_6 = lower_2;
        long last_highest_7 = higher_3;
        long[] last_numbers_8 = new long[]{};
        while (true) {
            long number_9 = Program.get_avg(last_lowest_6, last_highest_7);
            last_numbers_8 = (Enumerable.ToArray(Enumerable.Append<long>(last_numbers_8, number_9)));
            string resp_10 = answer(number_9);
            if ((resp_10 == "low")) {
                last_lowest_6 = number_9;
            } else if ((resp_10 == "high")) {
                last_highest_7 = number_9;
            } else {
                break;
            }
        };
        Console.WriteLine(Program._fmtTop(("guess the number : " + _fmtStr(last_numbers_8[(int)((last_numbers_8.Length - 1))]))));
        Console.WriteLine(Program._fmtTop(("details : " + _fmtStr(last_numbers_8))));
        return last_numbers_8;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.guess_the_number(10, 1000, 17);
            Program.guess_the_number(-10000, 10000, 7);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
