// Generated by Mochi 0.10.64 (commit aef2259d35) on 2025-08-12 14:02 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long index_of(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((_idx(xs_0, i_2) == x_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return (0 - 1);
    }

    public static long[] majority_vote(long[] votes_3, long votes_needed_to_win_4) {
        if ((votes_needed_to_win_4 < 2)) {
            return new long[]{};
        };
        long[] candidates_5 = new long[]{};
        long[] counts_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < votes_3.Length)) {
            long v_8 = _idx(votes_3, i_7);
            long idx_9 = Program.index_of(candidates_5, v_8);
            if ((idx_9 != (0 - 1))) {
                counts_6[(int)(idx_9)] = (_idx(counts_6, idx_9) + 1);
            } else if ((candidates_5.Length < (votes_needed_to_win_4 - 1))) {
                candidates_5 = ((Func<long[]>)(() => { var _tmp = candidates_5.ToList(); _tmp.Add(v_8); return _tmp.ToArray(); }))();
                counts_6 = ((Func<long[]>)(() => { var _tmp = counts_6.ToList(); _tmp.Add(1); return _tmp.ToArray(); }))();
            } else {
                long j_10 = 0;
                while ((j_10 < counts_6.Length)) {
                    counts_6[(int)(j_10)] = (_idx(counts_6, j_10) - 1);
                    j_10 = (j_10 + 1);
                }
                long[] new_candidates_11 = new long[]{};
                long[] new_counts_12 = new long[]{};
                j_10 = 0;
                while ((j_10 < candidates_5.Length)) {
                    if ((_idx(counts_6, j_10) > 0)) {
                        new_candidates_11 = ((Func<long[]>)(() => { var _tmp = new_candidates_11.ToList(); _tmp.Add(_idx(candidates_5, j_10)); return _tmp.ToArray(); }))();
                        new_counts_12 = ((Func<long[]>)(() => { var _tmp = new_counts_12.ToList(); _tmp.Add(_idx(counts_6, j_10)); return _tmp.ToArray(); }))();
                    }
                    j_10 = (j_10 + 1);
                }
                candidates_5 = new_candidates_11;
                counts_6 = new_counts_12;
            }
            i_7 = (i_7 + 1);
        };
        long[] final_counts_13 = new long[]{};
        long j_14 = 0;
        while ((j_14 < candidates_5.Length)) {
            final_counts_13 = ((Func<long[]>)(() => { var _tmp = final_counts_13.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            j_14 = (j_14 + 1);
        };
        i_7 = 0;
        while ((i_7 < votes_3.Length)) {
            long v_15 = _idx(votes_3, i_7);
            long idx_16 = Program.index_of(candidates_5, v_15);
            if ((idx_16 != (0 - 1))) {
                final_counts_13[(int)(idx_16)] = (_idx(final_counts_13, idx_16) + 1);
            }
            i_7 = (i_7 + 1);
        };
        long[] result_17 = new long[]{};
        j_14 = 0;
        while ((j_14 < candidates_5.Length)) {
            if (((_idx(final_counts_13, j_14) * votes_needed_to_win_4) > votes_3.Length)) {
                result_17 = ((Func<long[]>)(() => { var _tmp = result_17.ToList(); _tmp.Add(_idx(candidates_5, j_14)); return _tmp.ToArray(); }))();
            }
            j_14 = (j_14 + 1);
        };
        return result_17;
    }

    public static void main() {
        long[] votes_18 = new long[]{1, 2, 2, 3, 1, 3, 2};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.majority_vote(votes_18, 3))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.majority_vote(votes_18, 2))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.majority_vote(votes_18, 4))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
