// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long index_of(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return (0 - 1);
    }

    public static long[] majority_vote(long[] votes_3, long votes_needed_to_win_4) {
        if ((votes_needed_to_win_4 < 2)) {
            return new long[]{};
        };
        long[] candidates_5 = new long[]{};
        long[] counts_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < votes_3.Length)) {
            long v_8 = votes_3[(int)(i_7)];
            long idx_9 = Program.index_of(candidates_5, v_8);
            if ((idx_9 != (0 - 1))) {
                counts_6[idx_9] = (counts_6[(int)(idx_9)] + 1);
            } else if ((candidates_5.Length < (votes_needed_to_win_4 - 1))) {
                candidates_5 = (Enumerable.ToArray(Enumerable.Append<long>(candidates_5, v_8)));
                counts_6 = (Enumerable.ToArray(Enumerable.Append<long>(counts_6, 1)));
            } else {
                long j_10 = 0;
                while ((j_10 < counts_6.Length)) {
                    counts_6[j_10] = (counts_6[(int)(j_10)] - 1);
                    j_10 = (j_10 + 1);
                }
                long[] new_candidates_11 = new long[]{};
                long[] new_counts_12 = new long[]{};
                j_10 = 0;
                while ((j_10 < candidates_5.Length)) {
                    if ((counts_6[(int)(j_10)] > 0)) {
                        new_candidates_11 = (Enumerable.ToArray(Enumerable.Append<long>(new_candidates_11, candidates_5[(int)(j_10)])));
                        new_counts_12 = (Enumerable.ToArray(Enumerable.Append<long>(new_counts_12, counts_6[(int)(j_10)])));
                    }
                    j_10 = (j_10 + 1);
                }
                candidates_5 = new_candidates_11;
                counts_6 = new_counts_12;
            }
            i_7 = (i_7 + 1);
        };
        long[] final_counts_13 = new long[]{};
        long j_14 = 0;
        while ((j_14 < candidates_5.Length)) {
            final_counts_13 = (Enumerable.ToArray(Enumerable.Append<long>(final_counts_13, 0)));
            j_14 = (j_14 + 1);
        };
        i_7 = 0;
        while ((i_7 < votes_3.Length)) {
            long v_15 = votes_3[(int)(i_7)];
            long idx_16 = Program.index_of(candidates_5, v_15);
            if ((idx_16 != (0 - 1))) {
                final_counts_13[idx_16] = (final_counts_13[(int)(idx_16)] + 1);
            }
            i_7 = (i_7 + 1);
        };
        long[] result_17 = new long[]{};
        j_14 = 0;
        while ((j_14 < candidates_5.Length)) {
            if (((final_counts_13[(int)(j_14)] * votes_needed_to_win_4) > votes_3.Length)) {
                result_17 = (Enumerable.ToArray(Enumerable.Append<long>(result_17, candidates_5[(int)(j_14)])));
            }
            j_14 = (j_14 + 1);
        };
        return result_17;
    }

    public static void main() {
        long[] votes_18 = new long[]{1, 2, 2, 3, 1, 3, 2};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.majority_vote(votes_18, 3))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.majority_vote(votes_18, 2))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.majority_vote(votes_18, 4))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
