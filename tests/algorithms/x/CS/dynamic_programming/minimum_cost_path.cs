// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] m1_13 = new long[][]{new long[]{2, 1}, new long[]{3, 1}, new long[]{4, 2}};
    static long[][] m2_14 = new long[][]{new long[]{2, 1, 4}, new long[]{2, 1, 3}, new long[]{3, 2, 1}};
    public static long min_int(long a_0, long b_1) {
        if ((a_0 < b_1)) {
            return a_0;
        };
        return b_1;
    }

    public static long minimum_cost_path(long[][] matrix_2) {
        long rows_3 = matrix_2.Length;
        long cols_4 = matrix_2[(int)(0)].Length;
        long j_5 = 1;
        while ((j_5 < cols_4)) {
            long[] row0_6 = matrix_2[(int)(0)];
            row0_6[j_5] = (row0_6[(int)(j_5)] + row0_6[(int)((j_5 - 1))]);
            matrix_2[0] = row0_6;
            j_5 = (j_5 + 1);
        };
        long i_7 = 1;
        while ((i_7 < rows_3)) {
            long[] row_8 = matrix_2[(int)(i_7)];
            row_8[0] = (row_8[(int)(0)] + matrix_2[(int)((i_7 - 1))][(int)(0)]);
            matrix_2[i_7] = row_8;
            i_7 = (i_7 + 1);
        };
        i_7 = 1;
        while ((i_7 < rows_3)) {
            long[] row_9 = matrix_2[(int)(i_7)];
            j_5 = 1;
            while ((j_5 < cols_4)) {
                long up_10 = matrix_2[(int)((i_7 - 1))][(int)(j_5)];
                long left_11 = row_9[(int)((j_5 - 1))];
                long best_12 = Program.min_int(up_10, left_11);
                row_9[j_5] = (row_9[(int)(j_5)] + best_12);
                j_5 = (j_5 + 1);
            }
            matrix_2[i_7] = row_9;
            i_7 = (i_7 + 1);
        };
        return matrix_2[(int)((rows_3 - 1))][(int)((cols_4 - 1))];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_cost_path(m1_13))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_cost_path(m2_14))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
