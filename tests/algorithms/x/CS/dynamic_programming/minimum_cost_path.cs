// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[][] m1_13 = new BigInteger[][]{new BigInteger[]{2, 1}, new BigInteger[]{3, 1}, new BigInteger[]{4, 2}};
    static BigInteger[][] m2_14 = new BigInteger[][]{new BigInteger[]{2, 1, 4}, new BigInteger[]{2, 1, 3}, new BigInteger[]{3, 2, 1}};
    public static BigInteger min_int(BigInteger a_0, BigInteger b_1) {
        if ((a_0 < b_1)) {
            return a_0;
        };
        return b_1;
    }

    public static BigInteger minimum_cost_path(BigInteger[][] matrix_2) {
        long rows_3 = matrix_2.Length;
        long cols_4 = _idx(matrix_2, (long)(0)).Length;
        BigInteger j_5 = 1;
        while ((j_5 < cols_4)) {
            BigInteger[] row0_6 = _idx(matrix_2, (long)(0));
            row0_6[(int)(j_5)] = (_idx(row0_6, (long)(j_5)) + _idx(row0_6, (long)((j_5 - 1))));
            matrix_2[(int)(0)] = row0_6;
            j_5 = (j_5 + 1);
        };
        BigInteger i_7 = 1;
        while ((i_7 < rows_3)) {
            BigInteger[] row_8 = _idx(matrix_2, (long)(i_7));
            row_8[(int)(0)] = (_idx(row_8, (long)(0)) + _idx(_idx(matrix_2, (long)((i_7 - 1))), (long)(0)));
            matrix_2[(int)(i_7)] = row_8;
            i_7 = (i_7 + 1);
        };
        i_7 = 1;
        while ((i_7 < rows_3)) {
            BigInteger[] row_9 = _idx(matrix_2, (long)(i_7));
            j_5 = 1;
            while ((j_5 < cols_4)) {
                BigInteger up_10 = _idx(_idx(matrix_2, (long)((i_7 - 1))), (long)(j_5));
                BigInteger left_11 = _idx(row_9, (long)((j_5 - 1)));
                BigInteger best_12 = Program.min_int(up_10, left_11);
                row_9[(int)(j_5)] = (_idx(row_9, (long)(j_5)) + best_12);
                j_5 = (j_5 + 1);
            }
            matrix_2[(int)(i_7)] = row_9;
            i_7 = (i_7 + 1);
        };
        return _idx(_idx(matrix_2, (long)((rows_3 - 1))), (long)((cols_4 - 1)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_cost_path(m1_13))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_cost_path(m2_14))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
