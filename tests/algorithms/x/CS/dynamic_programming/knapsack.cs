// Generated by Mochi 0.10.64 (commit 14c048744e) on 2025-08-13 07:12 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class KnapsackResult {
    public long value;
    public long[] subset;
    public override string ToString() => $"KnapsackResult {{value = {value}, subset = {subset}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] f_0 = new long[][]{};
    static long[] val_list_46 = new long[]{3, 2, 4, 4};
    static long[] wt_list_47 = new long[]{4, 3, 2, 3};
    static long n_48 = 4;
    static long w_cap_49 = 6;
    public static long max_int(long a_1, long b_2) {
        if ((a_1 > b_2)) {
            return a_1;
        } else {
            return b_2;
        };
        return default(long);
    }

    public static long[][] init_f(long n_3, long w_4) {
        long[][] table_5 = new long[][]{};
        long i_6 = 0;
        while ((i_6 <= n_3)) {
            long[] row_7 = new long[]{};
            long j_8 = 0;
            while ((j_8 <= w_4)) {
                if (((i_6 == 0) || (j_8 == 0))) {
                    row_7 = ((Func<long[]>)(() => { var _tmp = row_7.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                } else {
                    row_7 = ((Func<long[]>)(() => { var _tmp = row_7.ToList(); _tmp.Add(-1); return _tmp.ToArray(); }))();
                }
                j_8 = (j_8 + 1);
            }
            table_5 = ((Func<long[][]>)(() => { var _tmp = table_5.ToList(); _tmp.Add(row_7); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        return table_5;
    }

    public static long mf_knapsack(long i_9, long[] wt_10, long[] val_11, long j_12) {
        if ((_idx(_idx(f_0, i_9), j_12) < 0)) {
            if ((j_12 < _idx(wt_10, (i_9 - 1)))) {
                _idx(f_0, i_9)[(int)(j_12)] = Program.mf_knapsack((i_9 - 1), wt_10, val_11, j_12);
            } else {
                long without_item_13 = Program.mf_knapsack((i_9 - 1), wt_10, val_11, j_12);
                long with_item_14 = (Program.mf_knapsack((i_9 - 1), wt_10, val_11, (j_12 - _idx(wt_10, (i_9 - 1)))) + _idx(val_11, (i_9 - 1)));
                _idx(f_0, i_9)[(int)(j_12)] = Program.max_int(without_item_13, with_item_14);
            }
        };
        return _idx(_idx(f_0, i_9), j_12);
    }

    public static long[][] create_matrix(long rows_15, long cols_16) {
        long[][] matrix_17 = new long[][]{};
        long i_18 = 0;
        while ((i_18 <= rows_15)) {
            long[] row_19 = new long[]{};
            long j_20 = 0;
            while ((j_20 <= cols_16)) {
                row_19 = ((Func<long[]>)(() => { var _tmp = row_19.ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_20 = (j_20 + 1);
            }
            matrix_17 = ((Func<long[][]>)(() => { var _tmp = matrix_17.ToList(); _tmp.Add(row_19); return _tmp.ToArray(); }))();
            i_18 = (i_18 + 1);
        };
        return matrix_17;
    }

    public static long[][] knapsack(long w_21, long[] wt_22, long[] val_23, long n_24) {
        long[][] dp_25 = Program.create_matrix(n_24, w_21);
        long i_26 = 1;
        while ((i_26 <= n_24)) {
            long w__27 = 1;
            while ((w__27 <= w_21)) {
                if ((_idx(wt_22, (i_26 - 1)) <= w__27)) {
                    long include_28 = (_idx(val_23, (i_26 - 1)) + _idx(_idx(dp_25, (i_26 - 1)), (w__27 - _idx(wt_22, (i_26 - 1)))));
                    long exclude_29 = _idx(_idx(dp_25, (i_26 - 1)), w__27);
                    _idx(dp_25, i_26)[(int)(w__27)] = Program.max_int(include_28, exclude_29);
                } else {
                    _idx(dp_25, i_26)[(int)(w__27)] = _idx(_idx(dp_25, (i_26 - 1)), w__27);
                }
                w__27 = (w__27 + 1);
            }
            i_26 = (i_26 + 1);
        };
        return dp_25;
    }

    public static long[] construct_solution(long[][] dp_30, long[] wt_31, long i_32, long j_33, long[] optimal_set_34) {
        if (((i_32 > 0) && (j_33 > 0))) {
            if ((_idx(_idx(dp_30, (i_32 - 1)), j_33) == _idx(_idx(dp_30, i_32), j_33))) {
                return Program.construct_solution(dp_30, wt_31, (i_32 - 1), j_33, optimal_set_34);
            } else {
                long[] with_prev_35 = Program.construct_solution(dp_30, wt_31, (i_32 - 1), (j_33 - _idx(wt_31, (i_32 - 1))), optimal_set_34);
                return ((Func<long[]>)(() => { var _tmp = with_prev_35.ToList(); _tmp.Add(i_32); return _tmp.ToArray(); }))();
            }
        };
        return optimal_set_34;
    }

    public static KnapsackResult knapsack_with_example_solution(long w_36, long[] wt_37, long[] val_38) {
        long num_items_39 = wt_37.Length;
        long[][] dp_table_40 = Program.knapsack(w_36, wt_37, val_38, num_items_39);
        long optimal_val_41 = _idx(_idx(dp_table_40, num_items_39), w_36);
        long[] subset_42 = Program.construct_solution(dp_table_40, wt_37, num_items_39, w_36, new long[]{});
        return new KnapsackResult{value = optimal_val_41, subset = subset_42};
    }

    public static string format_set(long[] xs_43) {
        string res_44 = "{";
        long i_45 = 0;
        while ((i_45 < xs_43.Length)) {
            res_44 = (res_44 + _fmtStr(_idx(xs_43, i_45)));
            if (((i_45 + 1) < xs_43.Length)) {
                res_44 = (res_44 + ", ");
            }
            i_45 = (i_45 + 1);
        };
        res_44 = (res_44 + "}");
        return res_44;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            f_0 = Program.init_f(n_48, w_cap_49);
            long[][] dp_table_50 = Program.knapsack(w_cap_49, wt_list_47, val_list_46, n_48);
            long optimal_solution_51 = _idx(_idx(dp_table_50, n_48), w_cap_49);
            Console.WriteLine(Program._fmtTop(optimal_solution_51));
            Console.WriteLine(Program._fmtTop(Program.mf_knapsack(n_48, wt_list_47, val_list_46, w_cap_49)));
            KnapsackResult example_52 = Program.knapsack_with_example_solution(w_cap_49, wt_list_47, val_list_46);
            Console.WriteLine(Program._fmtTop(("optimal_value = " + _fmtStr(example_52.value))));
            Console.WriteLine(Program._fmtTop(("An optimal subset corresponding to the optimal value " + Program.format_set(example_52.subset))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
