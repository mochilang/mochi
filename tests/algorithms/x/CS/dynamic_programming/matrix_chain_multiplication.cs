// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static long INF_0 = 1000000000;
    public static long matrix_chain_multiply(long[] arr_1) {
        if ((arr_1.Length < 2)) {
            return 0;
        };
        long n_2 = arr_1.Length;
        long[][] dp_3 = new long[][]{};
        long i_4 = 0;
        while ((i_4 < n_2)) {
            long[] row_5 = new long[]{};
            long j_6 = 0;
            while ((j_6 < n_2)) {
                row_5 = (Enumerable.ToArray(Enumerable.Append<long>(row_5, INF_0)));
                j_6 = (j_6 + 1);
            }
            dp_3 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_3, row_5)));
            i_4 = (i_4 + 1);
        };
        i_4 = (n_2 - 1);
        while ((i_4 > 0)) {
            long j_7 = i_4;
            while ((j_7 < n_2)) {
                if ((i_4 == j_7)) {
                    dp_3[(int)(i_4)][j_7] = 0;
                } else {
                    long k_8 = i_4;
                    while ((k_8 < j_7)) {
                        long cost_9 = ((dp_3[(int)(i_4)][(int)(k_8)] + dp_3[(int)((k_8 + 1))][(int)(j_7)]) + ((arr_1[(int)((i_4 - 1))] * arr_1[(int)(k_8)]) * arr_1[(int)(j_7)]));
                        if ((cost_9 < dp_3[(int)(i_4)][(int)(j_7)])) {
                            dp_3[(int)(i_4)][j_7] = cost_9;
                        }
                        k_8 = (k_8 + 1);
                    }
                }
                j_7 = (j_7 + 1);
            }
            i_4 = (i_4 - 1);
        };
        return dp_3[(int)(1)][(int)((n_2 - 1))];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
