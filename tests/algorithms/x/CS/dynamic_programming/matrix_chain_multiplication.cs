// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    static BigInteger INF_0 = 1000000000;
    public static BigInteger matrix_chain_multiply(BigInteger[] arr_1) {
        if ((arr_1.Length < 2)) {
            return 0;
        };
        long n_2 = arr_1.Length;
        BigInteger[][] dp_3 = new BigInteger[][]{};
        BigInteger i_4 = 0;
        while ((i_4 < n_2)) {
            BigInteger[] row_5 = new BigInteger[]{};
            BigInteger j_6 = 0;
            while ((j_6 < n_2)) {
                row_5 = ((Func<BigInteger[]>)(() => { var _tmp = row_5.Cast<BigInteger>().ToList(); _tmp.Add(INF_0); return _tmp.ToArray(); }))();
                j_6 = (j_6 + 1);
            }
            dp_3 = ((Func<BigInteger[][]>)(() => { var _tmp = dp_3.Cast<BigInteger[]>().ToList(); _tmp.Add(row_5); return _tmp.ToArray(); }))();
            i_4 = (i_4 + 1);
        };
        i_4 = (n_2 - 1);
        while ((i_4 > 0)) {
            BigInteger j_7 = i_4;
            while ((j_7 < n_2)) {
                if ((i_4 == j_7)) {
                    _idx(dp_3, (long)(i_4))[(int)(j_7)] = 0;
                } else {
                    BigInteger k_8 = i_4;
                    while ((k_8 < j_7)) {
                        BigInteger cost_9 = ((_idx(_idx(dp_3, (long)(i_4)), (long)(k_8)) + _idx(_idx(dp_3, (long)((k_8 + 1))), (long)(j_7))) + ((_idx(arr_1, (long)((i_4 - 1))) * _idx(arr_1, (long)(k_8))) * _idx(arr_1, (long)(j_7))));
                        if ((cost_9 < _idx(_idx(dp_3, (long)(i_4)), (long)(j_7)))) {
                            _idx(dp_3, (long)(i_4))[(int)(j_7)] = cost_9;
                        }
                        k_8 = (k_8 + 1);
                    }
                }
                j_7 = (j_7 + 1);
            }
            i_4 = (i_4 - 1);
        };
        return _idx(_idx(dp_3, (long)(1)), (long)((n_2 - 1)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
