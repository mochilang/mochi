// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool recursive_match(string text_0, string pattern_1) {
        if ((pattern_1.Length == 0)) {
            return (text_0.Length == 0);
        };
        if ((text_0.Length == 0)) {
            if (((pattern_1.Length >= 2) && (_substr(pattern_1, (long)((pattern_1.Length - 1)), pattern_1.Length) == "*"))) {
                return Program.recursive_match(text_0, _substr(pattern_1, (long)(0), (long)((pattern_1.Length - 2))));
            }
            return false;
        };
        string last_text_2 = _substr(text_0, (long)((text_0.Length - 1)), text_0.Length);
        string last_pattern_3 = _substr(pattern_1, (long)((pattern_1.Length - 1)), pattern_1.Length);
        if (((last_text_2 == last_pattern_3) || (last_pattern_3 == "."))) {
            return Program.recursive_match(_substr(text_0, (long)(0), (long)((text_0.Length - 1))), _substr(pattern_1, (long)(0), (long)((pattern_1.Length - 1))));
        };
        if ((last_pattern_3 == "*")) {
            if (Program.recursive_match(_substr(text_0, (long)(0), (long)((text_0.Length - 1))), pattern_1)) {
                return true;
            }
            return Program.recursive_match(text_0, _substr(pattern_1, (long)(0), (long)((pattern_1.Length - 2))));
        };
        return false;
    }

    public static bool dp_match(string text_4, string pattern_5) {
        long m_6 = text_4.Length;
        long n_7 = pattern_5.Length;
        bool[][] dp_8 = new bool[][]{};
        BigInteger i_9 = 0;
        while ((i_9 <= m_6)) {
            bool[] row_10 = new bool[]{};
            BigInteger j_11 = 0;
            while ((j_11 <= n_7)) {
                row_10 = ((Func<bool[]>)(() => { var _tmp = row_10.Cast<bool>().ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
                j_11 = (j_11 + 1);
            }
            dp_8 = ((Func<bool[][]>)(() => { var _tmp = dp_8.Cast<bool[]>().ToList(); _tmp.Add(row_10); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        _idx(dp_8, (long)(0))[(int)(0)] = true;
        BigInteger j_12 = 1;
        while ((j_12 <= n_7)) {
            if (((_substr(pattern_5, (long)((j_12 - 1)), (long)(j_12)) == "*") && (j_12 >= 2))) {
                if (_idx(_idx(dp_8, (long)(0)), (long)((j_12 - 2)))) {
                    _idx(dp_8, (long)(0))[(int)(j_12)] = true;
                }
            }
            j_12 = (j_12 + 1);
        };
        i_9 = 1;
        while ((i_9 <= m_6)) {
            j_12 = 1;
            while ((j_12 <= n_7)) {
                string p_char_13 = _substr(pattern_5, (long)((j_12 - 1)), (long)(j_12));
                string t_char_14 = _substr(text_4, (long)((i_9 - 1)), (long)(i_9));
                if (((p_char_13 == ".") || (p_char_13 == t_char_14))) {
                    if (_idx(_idx(dp_8, (long)((i_9 - 1))), (long)((j_12 - 1)))) {
                        _idx(dp_8, (long)(i_9))[(int)(j_12)] = true;
                    }
                } else if ((p_char_13 == "*")) {
                    if ((j_12 >= 2)) {
                        if (_idx(_idx(dp_8, (long)(i_9)), (long)((j_12 - 2)))) {
                            _idx(dp_8, (long)(i_9))[(int)(j_12)] = true;
                        }
                        string prev_p_15 = _substr(pattern_5, (long)((j_12 - 2)), (long)((j_12 - 1)));
                        if (((prev_p_15 == ".") || (prev_p_15 == t_char_14))) {
                            if (_idx(_idx(dp_8, (long)((i_9 - 1))), (long)(j_12))) {
                                _idx(dp_8, (long)(i_9))[(int)(j_12)] = true;
                            }
                        }
                    }
                } else {
                    _idx(dp_8, (long)(i_9))[(int)(j_12)] = false;
                }
                j_12 = (j_12 + 1);
            }
            i_9 = (i_9 + 1);
        };
        return _idx(_idx(dp_8, m_6), n_7);
    }

    public static void print_bool(bool b_16) {
        if (b_16) {
            Console.WriteLine(Program._fmtTop(true));
        } else {
            Console.WriteLine(Program._fmtTop(false));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_bool(Program.recursive_match("abc", "a.c"));
            Program.print_bool(Program.recursive_match("abc", "af*.c"));
            Program.print_bool(Program.recursive_match("abc", "a.c*"));
            Program.print_bool(Program.recursive_match("abc", "a.c*d"));
            Program.print_bool(Program.recursive_match("aa", ".*"));
            Program.print_bool(Program.dp_match("abc", "a.c"));
            Program.print_bool(Program.dp_match("abc", "af*.c"));
            Program.print_bool(Program.dp_match("abc", "a.c*"));
            Program.print_bool(Program.dp_match("abc", "a.c*d"));
            Program.print_bool(Program.dp_match("aa", ".*"));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
