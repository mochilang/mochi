// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] observations_38 = new string[]{"normal", "cold", "dizzy"};
    static string[] states_39 = new string[]{"Healthy", "Fever"};
    static Dictionary<string, double> start_p_40 = new Dictionary<string, double>{{"Healthy", 0.6}, {"Fever", 0.4}};
    static Dictionary<string, Dictionary<string, double>> trans_p_41 = new Dictionary<string, Dictionary<string, double>>{{"Healthy", new Dictionary<string, double>{{"Healthy", 0.7}, {"Fever", 0.3}}}, {"Fever", new Dictionary<string, double>{{"Healthy", 0.4}, {"Fever", 0.6}}}};
    static Dictionary<string, Dictionary<string, double>> emit_p_42 = new Dictionary<string, Dictionary<string, double>>{{"Healthy", new Dictionary<string, double>{{"normal", 0.5}, {"cold", 0.4}, {"dizzy", 0.1}}}, {"Fever", new Dictionary<string, double>{{"normal", 0.1}, {"cold", 0.3}, {"dizzy", 0.6}}}};
    static string[] result_43 = Program.viterbi(observations_38, states_39, start_p_40, trans_p_41, emit_p_42);
    public static string key(string state_0, string obs_1) {
        return ((state_0 + "|") + obs_1);
    }

    public static string[] viterbi(string[] observations_2, string[] states_3, Dictionary<string, double> start_p_4, Dictionary<string, Dictionary<string, double>> trans_p_5, Dictionary<string, Dictionary<string, double>> emit_p_6) {
        if (((observations_2.Length == 0) || (states_3.Length == 0))) {
            throw new Exception("empty parameters");
        };
        Dictionary<string, double> probs_7 = new Dictionary<string, double>{};
        Dictionary<string, string> ptrs_8 = new Dictionary<string, string>{};
        string first_obs_9 = observations_2[(int)(0)];
        long i_10 = 0;
        while ((i_10 < states_3.Length)) {
            string state_11 = states_3[(int)(i_10)];
            probs_7[Program.key(state_11, first_obs_9)] = ((start_p_4.ContainsKey(state_11) ? start_p_4[state_11] : 0.0) * ((emit_p_6.ContainsKey(state_11) ? emit_p_6[state_11] : null).ContainsKey(first_obs_9) ? (emit_p_6.ContainsKey(state_11) ? emit_p_6[state_11] : null)[first_obs_9] : 0.0));
            ptrs_8[Program.key(state_11, first_obs_9)] = "";
            i_10 = (i_10 + 1);
        };
        long t_12 = 1;
        while ((t_12 < observations_2.Length)) {
            string obs_13 = observations_2[(int)(t_12)];
            long j_14 = 0;
            while ((j_14 < states_3.Length)) {
                string state_15 = states_3[(int)(j_14)];
                double max_prob_16 = -1.0;
                string prev_state_17 = "";
                long k_18 = 0;
                while ((k_18 < states_3.Length)) {
                    string state0_19 = states_3[(int)(k_18)];
                    string obs0_20 = observations_2[(int)((t_12 - 1))];
                    double prob_prev_21 = (probs_7.ContainsKey(Program.key(state0_19, obs0_20)) ? probs_7[Program.key(state0_19, obs0_20)] : 0.0);
                    double prob_22 = ((prob_prev_21 * ((trans_p_5.ContainsKey(state0_19) ? trans_p_5[state0_19] : null).ContainsKey(state_15) ? (trans_p_5.ContainsKey(state0_19) ? trans_p_5[state0_19] : null)[state_15] : 0.0)) * ((emit_p_6.ContainsKey(state_15) ? emit_p_6[state_15] : null).ContainsKey(obs_13) ? (emit_p_6.ContainsKey(state_15) ? emit_p_6[state_15] : null)[obs_13] : 0.0));
                    if ((prob_22 > max_prob_16)) {
                        max_prob_16 = prob_22;
                        prev_state_17 = state0_19;
                    }
                    k_18 = (k_18 + 1);
                }
                probs_7[Program.key(state_15, obs_13)] = max_prob_16;
                ptrs_8[Program.key(state_15, obs_13)] = prev_state_17;
                j_14 = (j_14 + 1);
            }
            t_12 = (t_12 + 1);
        };
        string[] path_23 = new string[]{};
        long n_24 = 0;
        while ((n_24 < observations_2.Length)) {
            path_23 = (Enumerable.ToArray(Enumerable.Append<string>(path_23, "")));
            n_24 = (n_24 + 1);
        };
        string last_obs_25 = observations_2[(int)((observations_2.Length - 1))];
        double max_final_26 = -1.0;
        string last_state_27 = "";
        long m_28 = 0;
        while ((m_28 < states_3.Length)) {
            string state_29 = states_3[(int)(m_28)];
            double prob_30 = (probs_7.ContainsKey(Program.key(state_29, last_obs_25)) ? probs_7[Program.key(state_29, last_obs_25)] : 0.0);
            if ((prob_30 > max_final_26)) {
                max_final_26 = prob_30;
                last_state_27 = state_29;
            }
            m_28 = (m_28 + 1);
        };
        long last_index_31 = (observations_2.Length - 1);
        path_23[last_index_31] = last_state_27;
        long idx_32 = last_index_31;
        while ((idx_32 > 0)) {
            string obs_33 = observations_2[(int)(idx_32)];
            string prev_34 = (ptrs_8.ContainsKey(Program.key(path_23[(int)(idx_32)], obs_33)) ? ptrs_8[Program.key(path_23[(int)(idx_32)], obs_33)] : "");
            path_23[(idx_32 - 1)] = prev_34;
            idx_32 = (idx_32 - 1);
        };
        return path_23;
    }

    public static string join_words(string[] words_35) {
        string res_36 = "";
        long i_37 = 0;
        while ((i_37 < words_35.Length)) {
            if ((i_37 > 0)) {
                res_36 = (res_36 + " ");
            }
            res_36 = (res_36 + words_35[(int)(i_37)]);
            i_37 = (i_37 + 1);
        };
        return res_36;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.join_words(result_43)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
