// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Query {
    public long left;
    public long right;
    public override string ToString() => $"Query {{left = {left}, right = {right}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] arr1_8 = new long[]{1, 4, 6, 2, 61, 12};
    static Query[] queries1_9 = new Query[]{new Query{left = 2, right = 5}, new Query{left = 1, right = 5}, new Query{left = 3, right = 4}};
    public static long[] prefix_sum(long[] arr_0, Query[] queries_1) {
        long[] dp_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < arr_0.Length)) {
            if ((i_3 == 0)) {
                dp_2 = (Enumerable.ToArray(Enumerable.Append<long>(dp_2, arr_0[(int)(0)])));
            } else {
                dp_2 = (Enumerable.ToArray(Enumerable.Append<long>(dp_2, (dp_2[(int)((i_3 - 1))] + arr_0[(int)(i_3)]))));
            }
            i_3 = (i_3 + 1);
        };
        long[] result_4 = new long[]{};
        long j_5 = 0;
        while ((j_5 < queries_1.Length)) {
            Query q_6 = queries_1[(int)(j_5)];
            long sum_7 = dp_2[(int)(q_6.right)];
            if ((q_6.left > 0)) {
                sum_7 = (sum_7 - dp_2[(int)((q_6.left - 1))]);
            }
            result_4 = (Enumerable.ToArray(Enumerable.Append<long>(result_4, sum_7)));
            j_5 = (j_5 + 1);
        };
        return result_4;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prefix_sum(arr1_8, queries1_9))));
            long[] arr2_10 = new long[]{4, 2, 1, 6, 3};
            Query[] queries2_11 = new Query[]{new Query{left = 3, right = 4}, new Query{left = 1, right = 3}, new Query{left = 0, right = 2}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.prefix_sum(arr2_10, queries2_11))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
