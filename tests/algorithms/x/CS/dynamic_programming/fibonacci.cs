// Generated by Mochi 0.10.62 on 2025-08-09 15:58 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Fibonacci {
    public long[] sequence;
    public override string ToString() => $"Fibonacci {{sequence = {sequence}}}";
}
class FibGetResult {
    public Fibonacci fib;
    public long[] values;
    public override string ToString() => $"FibGetResult {{fib = {fib}, values = {values}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Fibonacci create_fibonacci() {
        return new Fibonacci{sequence = new long[]{0, 1}};
    }

    public static FibGetResult fib_get(Fibonacci f_0, long index_1) {
        long[] seq_2 = f_0.sequence;
        while ((seq_2.Length < index_1)) {
            long next_3 = (seq_2[(int)((seq_2.Length - 1) < 0 ? seq_2.Length + ((seq_2.Length - 1)) : (seq_2.Length - 1))] + seq_2[(int)((seq_2.Length - 2) < 0 ? seq_2.Length + ((seq_2.Length - 2)) : (seq_2.Length - 2))]);
            seq_2 = (Enumerable.ToArray(Enumerable.Append<long>(seq_2, next_3)));
        };
        f_0.sequence = seq_2;
        long[] result_4 = new long[]{};
        long i_5 = 0;
        while ((i_5 < index_1)) {
            result_4 = (Enumerable.ToArray(Enumerable.Append<long>(result_4, seq_2[(int)(i_5 < 0 ? seq_2.Length + (i_5) : i_5)])));
            i_5 = (i_5 + 1);
        };
        return new FibGetResult{fib = f_0, values = result_4};
    }

    public static void main() {
        Fibonacci fib_6 = Program.create_fibonacci();
        FibGetResult res_7 = Program.fib_get(fib_6, 10);
        fib_6 = res_7.fib;
        Console.WriteLine(Program._fmtTop(_fmtStr(res_7.values)));
        res_7 = Program.fib_get(fib_6, 5);
        fib_6 = res_7.fib;
        Console.WriteLine(Program._fmtTop(_fmtStr(res_7.values)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
