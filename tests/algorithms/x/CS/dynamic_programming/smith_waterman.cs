// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string query_46 = "HEAGAWGHEE";
    static string subject_47 = "PAWHEAE";
    static BigInteger[][] score_48 = Program.smith_waterman(query_46, subject_47, 1, -1, -2);
    public static BigInteger score_function(string source_char_0, string target_char_1, BigInteger match_score_2, BigInteger mismatch_score_3, BigInteger gap_score_4) {
        if (((source_char_0 == "-") || (target_char_1 == "-"))) {
            return gap_score_4;
        };
        if ((source_char_0 == target_char_1)) {
            return match_score_2;
        };
        return mismatch_score_3;
    }

    public static BigInteger[][] smith_waterman(string query_5, string subject_6, BigInteger match_score_7, BigInteger mismatch_score_8, BigInteger gap_score_9) {
        string q_10 = query_5.ToUpper();
        string s_11 = subject_6.ToUpper();
        long m_12 = q_10.Length;
        long n_13 = s_11.Length;
        BigInteger[][] score_14 = new BigInteger[][]{};
        for (var __15 = 0; __15 < (m_12 + 1); __15++) {
            BigInteger[] row_16 = new BigInteger[]{};
            for (var _2_17 = 0; _2_17 < (n_13 + 1); _2_17++) {
                row_16 = ((Func<BigInteger[]>)(() => { var _tmp = row_16.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            }
            score_14 = ((Func<BigInteger[][]>)(() => { var _tmp = score_14.Cast<BigInteger[]>().ToList(); _tmp.Add(row_16); return _tmp.ToArray(); }))();
        };
        for (var i_18 = 1; i_18 < (m_12 + 1); i_18++) {
            for (var j_19 = 1; j_19 < (n_13 + 1); j_19++) {
                string qc_20 = _substr(q_10, (long)((i_18 - 1)), i_18);
                string sc_21 = _substr(s_11, (long)((j_19 - 1)), j_19);
                BigInteger diag_22 = (_idx(_idx(score_14, (long)((i_18 - 1))), (long)((j_19 - 1))) + Program.score_function(qc_20, sc_21, match_score_7, mismatch_score_8, gap_score_9));
                BigInteger delete_23 = (_idx(_idx(score_14, (long)((i_18 - 1))), j_19) + gap_score_9);
                BigInteger insert_24 = (_idx(_idx(score_14, i_18), (long)((j_19 - 1))) + gap_score_9);
                BigInteger max_val_25 = 0;
                if ((diag_22 > max_val_25)) {
                    max_val_25 = diag_22;
                }
                if ((delete_23 > max_val_25)) {
                    max_val_25 = delete_23;
                }
                if ((insert_24 > max_val_25)) {
                    max_val_25 = insert_24;
                }
                _idx(score_14, i_18)[(int)(j_19)] = max_val_25;
            }
        };
        return score_14;
    }

    public static string traceback(BigInteger[][] score_26, string query_27, string subject_28, BigInteger match_score_29, BigInteger mismatch_score_30, BigInteger gap_score_31) {
        string q_32 = query_27.ToUpper();
        string s_33 = subject_28.ToUpper();
        BigInteger max_value_34 = 0;
        BigInteger i_max_35 = 0;
        BigInteger j_max_36 = 0;
        for (var i_37 = 0; i_37 < score_26.Length; i_37++) {
            for (var j_38 = 0; j_38 < _idx(score_26, i_37).Length; j_38++) {
                if ((_idx(_idx(score_26, i_37), j_38) > max_value_34)) {
                    max_value_34 = _idx(_idx(score_26, i_37), j_38);
                    i_max_35 = i_37;
                    j_max_36 = j_38;
                }
            }
        };
        BigInteger i_39 = i_max_35;
        BigInteger j_40 = j_max_36;
        string align1_41 = "";
        string align2_42 = "";
        BigInteger gap_penalty_43 = Program.score_function("-", "-", match_score_29, mismatch_score_30, gap_score_31);
        if (((i_39 == 0) || (j_40 == 0))) {
            return "";
        };
        while (((i_39 > 0) && (j_40 > 0))) {
            string qc_44 = _substr(q_32, (long)((i_39 - 1)), (long)(i_39));
            string sc_45 = _substr(s_33, (long)((j_40 - 1)), (long)(j_40));
            if ((_idx(_idx(score_26, (long)(i_39)), (long)(j_40)) == (_idx(_idx(score_26, (long)((i_39 - 1))), (long)((j_40 - 1))) + Program.score_function(qc_44, sc_45, match_score_29, mismatch_score_30, gap_score_31)))) {
                align1_41 = (qc_44 + align1_41);
                align2_42 = (sc_45 + align2_42);
                i_39 = (i_39 - 1);
                j_40 = (j_40 - 1);
            } else if ((_idx(_idx(score_26, (long)(i_39)), (long)(j_40)) == (_idx(_idx(score_26, (long)((i_39 - 1))), (long)(j_40)) + gap_penalty_43))) {
                align1_41 = (qc_44 + align1_41);
                align2_42 = ("-" + align2_42);
                i_39 = (i_39 - 1);
            } else {
                align1_41 = ("-" + align1_41);
                align2_42 = (sc_45 + align2_42);
                j_40 = (j_40 - 1);
            }
        };
        return ((align1_41 + "\n") + align2_42);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.traceback(score_48, query_46, subject_47, 1, -1, -2)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
