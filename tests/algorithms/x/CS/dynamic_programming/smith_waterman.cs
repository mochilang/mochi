// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string query_46 = "HEAGAWGHEE";
    static string subject_47 = "PAWHEAE";
    static long[][] score_48 = Program.smith_waterman(query_46, subject_47, 1, -1, -2);
    public static long score_function(string source_char_0, string target_char_1, long match_score_2, long mismatch_score_3, long gap_score_4) {
        if (((source_char_0 == "-") || (target_char_1 == "-"))) {
            return gap_score_4;
        };
        if ((source_char_0 == target_char_1)) {
            return match_score_2;
        };
        return mismatch_score_3;
    }

    public static long[][] smith_waterman(string query_5, string subject_6, long match_score_7, long mismatch_score_8, long gap_score_9) {
        string q_10 = query_5.ToUpper();
        string s_11 = subject_6.ToUpper();
        long m_12 = q_10.Length;
        long n_13 = s_11.Length;
        long[][] score_14 = new long[][]{};
        for (var __15 = 0; __15 < (m_12 + 1); __15++) {
            long[] row_16 = new long[]{};
            for (var _2_17 = 0; _2_17 < (n_13 + 1); _2_17++) {
                row_16 = (Enumerable.ToArray(Enumerable.Append<long>(row_16, 0)));
            }
            score_14 = (Enumerable.ToArray(Enumerable.Append<long[]>(score_14, row_16)));
        };
        for (var i_18 = 1; i_18 < (m_12 + 1); i_18++) {
            for (var j_19 = 1; j_19 < (n_13 + 1); j_19++) {
                string qc_20 = _substr(q_10, (i_18 - 1), i_18);
                string sc_21 = _substr(s_11, (j_19 - 1), j_19);
                long diag_22 = (score_14[(int)((i_18 - 1))][(int)((j_19 - 1))] + Program.score_function(qc_20, sc_21, match_score_7, mismatch_score_8, gap_score_9));
                long delete_23 = (score_14[(int)((i_18 - 1))][(int)(j_19)] + gap_score_9);
                long insert_24 = (score_14[(int)(i_18)][(int)((j_19 - 1))] + gap_score_9);
                long max_val_25 = 0;
                if ((diag_22 > max_val_25)) {
                    max_val_25 = diag_22;
                }
                if ((delete_23 > max_val_25)) {
                    max_val_25 = delete_23;
                }
                if ((insert_24 > max_val_25)) {
                    max_val_25 = insert_24;
                }
                score_14[(int)(i_18)][j_19] = max_val_25;
            }
        };
        return score_14;
    }

    public static string traceback(long[][] score_26, string query_27, string subject_28, long match_score_29, long mismatch_score_30, long gap_score_31) {
        string q_32 = query_27.ToUpper();
        string s_33 = subject_28.ToUpper();
        long max_value_34 = 0;
        long i_max_35 = 0;
        long j_max_36 = 0;
        for (var i_37 = 0; i_37 < score_26.Length; i_37++) {
            for (var j_38 = 0; j_38 < score_26[(int)(i_37)].Length; j_38++) {
                if ((score_26[(int)(i_37)][(int)(j_38)] > max_value_34)) {
                    max_value_34 = score_26[(int)(i_37)][(int)(j_38)];
                    i_max_35 = i_37;
                    j_max_36 = j_38;
                }
            }
        };
        long i_39 = i_max_35;
        long j_40 = j_max_36;
        string align1_41 = "";
        string align2_42 = "";
        long gap_penalty_43 = Program.score_function("-", "-", match_score_29, mismatch_score_30, gap_score_31);
        if (((i_39 == 0) || (j_40 == 0))) {
            return "";
        };
        while (((i_39 > 0) && (j_40 > 0))) {
            string qc_44 = _substr(q_32, (i_39 - 1), i_39);
            string sc_45 = _substr(s_33, (j_40 - 1), j_40);
            if ((score_26[(int)(i_39)][(int)(j_40)] == (score_26[(int)((i_39 - 1))][(int)((j_40 - 1))] + Program.score_function(qc_44, sc_45, match_score_29, mismatch_score_30, gap_score_31)))) {
                align1_41 = (qc_44 + align1_41);
                align2_42 = (sc_45 + align2_42);
                i_39 = (i_39 - 1);
                j_40 = (j_40 - 1);
            } else if ((score_26[(int)(i_39)][(int)(j_40)] == (score_26[(int)((i_39 - 1))][(int)(j_40)] + gap_penalty_43))) {
                align1_41 = (qc_44 + align1_41);
                align2_42 = ("-" + align2_42);
                i_39 = (i_39 - 1);
            } else {
                align1_41 = ("-" + align1_41);
                align2_42 = (sc_45 + align2_42);
                j_40 = (j_40 - 1);
            }
        };
        return ((align1_41 + "\n") + align2_42);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.traceback(score_48, query_46, subject_47, 1, -1, -2)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
