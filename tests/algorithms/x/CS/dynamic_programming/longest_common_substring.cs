// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string longest_common_substring(string text1_0, string text2_1) {
        if (((text1_0.Length == 0) || (text2_1.Length == 0))) {
            return "";
        };
        long m_2 = text1_0.Length;
        long n_3 = text2_1.Length;
        long[][] dp_4 = new long[][]{};
        long i_5 = 0;
        while ((i_5 < (m_2 + 1))) {
            long[] row_6 = new long[]{};
            long j_7 = 0;
            while ((j_7 < (n_3 + 1))) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<long>(row_6, 0)));
                j_7 = (j_7 + 1);
            }
            dp_4 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_4, row_6)));
            i_5 = (i_5 + 1);
        };
        long end_pos_8 = 0;
        long max_len_9 = 0;
        long ii_10 = 1;
        while ((ii_10 <= m_2)) {
            long jj_11 = 1;
            while ((jj_11 <= n_3)) {
                if ((_substr(text1_0, (ii_10 - 1), ii_10) == _substr(text2_1, (jj_11 - 1), jj_11))) {
                    dp_4[(int)(ii_10)][jj_11] = (1 + dp_4[(int)((ii_10 - 1))][(int)((jj_11 - 1))]);
                    if ((dp_4[(int)(ii_10)][(int)(jj_11)] > max_len_9)) {
                        max_len_9 = dp_4[(int)(ii_10)][(int)(jj_11)];
                        end_pos_8 = ii_10;
                    }
                }
                jj_11 = (jj_11 + 1);
            }
            ii_10 = (ii_10 + 1);
        };
        return _substr(text1_0, (end_pos_8 - max_len_9), end_pos_8);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.longest_common_substring("abcdef", "xabded")));
            Console.WriteLine(Program._fmtTop("\n"));
            Console.WriteLine(Program._fmtTop(Program.longest_common_substring("zxabcdezy", "yzabcdezx")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
