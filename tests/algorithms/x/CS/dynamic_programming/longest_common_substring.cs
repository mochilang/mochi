// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static string longest_common_substring(string text1_0, string text2_1) {
        if (((text1_0.Length == 0) || (text2_1.Length == 0))) {
            return "";
        };
        long m_2 = text1_0.Length;
        long n_3 = text2_1.Length;
        BigInteger[][] dp_4 = new BigInteger[][]{};
        BigInteger i_5 = 0;
        while ((i_5 < (m_2 + 1))) {
            BigInteger[] row_6 = new BigInteger[]{};
            BigInteger j_7 = 0;
            while ((j_7 < (n_3 + 1))) {
                row_6 = ((Func<BigInteger[]>)(() => { var _tmp = row_6.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_7 = (j_7 + 1);
            }
            dp_4 = ((Func<BigInteger[][]>)(() => { var _tmp = dp_4.Cast<BigInteger[]>().ToList(); _tmp.Add(row_6); return _tmp.ToArray(); }))();
            i_5 = (i_5 + 1);
        };
        BigInteger end_pos_8 = 0;
        BigInteger max_len_9 = 0;
        BigInteger ii_10 = 1;
        while ((ii_10 <= m_2)) {
            BigInteger jj_11 = 1;
            while ((jj_11 <= n_3)) {
                if ((_substr(text1_0, (long)((ii_10 - 1)), (long)(ii_10)) == _substr(text2_1, (long)((jj_11 - 1)), (long)(jj_11)))) {
                    _idx(dp_4, (long)(ii_10))[(int)(jj_11)] = (1 + _idx(_idx(dp_4, (long)((ii_10 - 1))), (long)((jj_11 - 1))));
                    if ((_idx(_idx(dp_4, (long)(ii_10)), (long)(jj_11)) > max_len_9)) {
                        max_len_9 = _idx(_idx(dp_4, (long)(ii_10)), (long)(jj_11));
                        end_pos_8 = ii_10;
                    }
                }
                jj_11 = (jj_11 + 1);
            }
            ii_10 = (ii_10 + 1);
        };
        return _substr(text1_0, (long)((end_pos_8 - max_len_9)), (long)(end_pos_8));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.longest_common_substring("abcdef", "xabded")));
            Console.WriteLine(Program._fmtTop("\n"));
            Console.WriteLine(Program._fmtTop(Program.longest_common_substring("zxabcdezy", "yzabcdezx")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
