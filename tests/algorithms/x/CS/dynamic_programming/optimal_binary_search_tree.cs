// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Node {
    public BigInteger key;
    public BigInteger freq;
    public override string ToString() => $"Node {{key = {key}, freq = {freq}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Node[] sort_nodes(Node[] nodes_0) {
        Node[] arr_1 = nodes_0;
        BigInteger i_2 = 1;
        while ((i_2 < arr_1.Length)) {
            Node key_node_3 = _idx(arr_1, (long)(i_2));
            BigInteger j_4 = (i_2 - 1);
            while ((j_4 >= 0)) {
                Node temp_5 = _idx(arr_1, (long)(j_4));
                if ((temp_5.key > key_node_3.key)) {
                    arr_1[(int)((j_4 + 1))] = temp_5;
                    j_4 = (j_4 - 1);
                } else {
                    break;
                }
            }
            arr_1[(int)((j_4 + 1))] = key_node_3;
            i_2 = (i_2 + 1);
        };
        return arr_1;
    }

    public static void print_node(Node n_6) {
        Console.WriteLine(Program._fmtTop((((("Node(key=" + _fmtStr(n_6.key)) + ", freq=") + _fmtStr(n_6.freq)) + ")")));
    }

    public static void print_binary_search_tree(BigInteger[][] root_7, BigInteger[] keys_8, BigInteger i_9, BigInteger j_10, BigInteger parent_11, bool is_left_12) {
        if ((((i_9 > j_10) || (i_9 < 0)) || (j_10 > (root_7.Length - 1)))) {
            return;
        };
        BigInteger node_13 = _idx(_idx(root_7, (long)(i_9)), (long)(j_10));
        if ((parent_11 == -1)) {
            Console.WriteLine(Program._fmtTop((_fmtStr(_idx(keys_8, (long)(node_13))) + " is the root of the binary search tree.")));
        } else if (is_left_12) {
            Console.WriteLine(Program._fmtTop((((_fmtStr(_idx(keys_8, (long)(node_13))) + " is the left child of key ") + _fmtStr(parent_11)) + ".")));
        } else {
            Console.WriteLine(Program._fmtTop((((_fmtStr(_idx(keys_8, (long)(node_13))) + " is the right child of key ") + _fmtStr(parent_11)) + ".")));
        };
        Program.print_binary_search_tree(root_7, keys_8, i_9, (node_13 - 1), _idx(keys_8, (long)(node_13)), true);
        Program.print_binary_search_tree(root_7, keys_8, (node_13 + 1), j_10, _idx(keys_8, (long)(node_13)), false);
    }

    public static void find_optimal_binary_search_tree(Node[] original_nodes_14) {
        Node[] nodes_15 = Program.sort_nodes(original_nodes_14);
        long n_16 = nodes_15.Length;
        BigInteger[] keys_17 = new BigInteger[]{};
        BigInteger[] freqs_18 = new BigInteger[]{};
        BigInteger i_19 = 0;
        while ((i_19 < n_16)) {
            Node node_20 = _idx(nodes_15, (long)(i_19));
            keys_17 = ((Func<BigInteger[]>)(() => { var _tmp = keys_17.Cast<BigInteger>().ToList(); _tmp.Add(node_20.key); return _tmp.ToArray(); }))();
            freqs_18 = ((Func<BigInteger[]>)(() => { var _tmp = freqs_18.Cast<BigInteger>().ToList(); _tmp.Add(node_20.freq); return _tmp.ToArray(); }))();
            i_19 = (i_19 + 1);
        };
        BigInteger[][] dp_21 = new BigInteger[][]{};
        BigInteger[][] total_22 = new BigInteger[][]{};
        BigInteger[][] root_23 = new BigInteger[][]{};
        i_19 = 0;
        while ((i_19 < n_16)) {
            BigInteger[] dp_row_24 = new BigInteger[]{};
            BigInteger[] total_row_25 = new BigInteger[]{};
            BigInteger[] root_row_26 = new BigInteger[]{};
            BigInteger j_27 = 0;
            while ((j_27 < n_16)) {
                if ((i_19 == j_27)) {
                    dp_row_24 = ((Func<BigInteger[]>)(() => { var _tmp = dp_row_24.Cast<BigInteger>().ToList(); _tmp.Add(_idx(freqs_18, (long)(i_19))); return _tmp.ToArray(); }))();
                    total_row_25 = ((Func<BigInteger[]>)(() => { var _tmp = total_row_25.Cast<BigInteger>().ToList(); _tmp.Add(_idx(freqs_18, (long)(i_19))); return _tmp.ToArray(); }))();
                    root_row_26 = ((Func<BigInteger[]>)(() => { var _tmp = root_row_26.Cast<BigInteger>().ToList(); _tmp.Add(i_19); return _tmp.ToArray(); }))();
                } else {
                    dp_row_24 = ((Func<BigInteger[]>)(() => { var _tmp = dp_row_24.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                    total_row_25 = ((Func<BigInteger[]>)(() => { var _tmp = total_row_25.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                    root_row_26 = ((Func<BigInteger[]>)(() => { var _tmp = root_row_26.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                }
                j_27 = (j_27 + 1);
            }
            dp_21 = ((Func<BigInteger[][]>)(() => { var _tmp = dp_21.Cast<BigInteger[]>().ToList(); _tmp.Add(dp_row_24); return _tmp.ToArray(); }))();
            total_22 = ((Func<BigInteger[][]>)(() => { var _tmp = total_22.Cast<BigInteger[]>().ToList(); _tmp.Add(total_row_25); return _tmp.ToArray(); }))();
            root_23 = ((Func<BigInteger[][]>)(() => { var _tmp = root_23.Cast<BigInteger[]>().ToList(); _tmp.Add(root_row_26); return _tmp.ToArray(); }))();
            i_19 = (i_19 + 1);
        };
        BigInteger interval_length_28 = 2;
        BigInteger INF_29 = 2147483647;
        while ((interval_length_28 <= n_16)) {
            i_19 = 0;
            while ((i_19 < ((n_16 - interval_length_28) + 1))) {
                BigInteger j_30 = ((i_19 + interval_length_28) - 1);
                _idx(dp_21, (long)(i_19))[(int)(j_30)] = INF_29;
                _idx(total_22, (long)(i_19))[(int)(j_30)] = (_idx(_idx(total_22, (long)(i_19)), (long)((j_30 - 1))) + _idx(freqs_18, (long)(j_30)));
                BigInteger r_31 = _idx(_idx(root_23, (long)(i_19)), (long)((j_30 - 1)));
                while ((r_31 <= _idx(_idx(root_23, (long)((i_19 + 1))), (long)(j_30)))) {
                    BigInteger left_32 = ((r_31 != i_19) ? _idx(_idx(dp_21, (long)(i_19)), (long)((r_31 - 1))) : 0);
                    BigInteger right_33 = ((r_31 != j_30) ? _idx(_idx(dp_21, (long)((r_31 + 1))), (long)(j_30)) : 0);
                    BigInteger cost_34 = ((left_32 + _idx(_idx(total_22, (long)(i_19)), (long)(j_30))) + right_33);
                    if ((_idx(_idx(dp_21, (long)(i_19)), (long)(j_30)) > cost_34)) {
                        _idx(dp_21, (long)(i_19))[(int)(j_30)] = cost_34;
                        _idx(root_23, (long)(i_19))[(int)(j_30)] = r_31;
                    }
                    r_31 = (r_31 + 1);
                }
                i_19 = (i_19 + 1);
            }
            interval_length_28 = (interval_length_28 + 1);
        };
        Console.WriteLine(Program._fmtTop("Binary search tree nodes:"));
        i_19 = 0;
        while ((i_19 < n_16)) {
            Program.print_node(_idx(nodes_15, (long)(i_19)));
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(Program._fmtTop((("\nThe cost of optimal BST for given tree nodes is " + _fmtStr(_idx(_idx(dp_21, (long)(0)), (long)((n_16 - 1))))) + ".")));
        Program.print_binary_search_tree(root_23, keys_17, 0, (n_16 - 1), -1, false);
    }

    public static void main() {
        Node[] nodes_35 = new Node[]{new Node{key = 12, freq = 8}, new Node{key = 10, freq = 34}, new Node{key = 20, freq = 50}, new Node{key = 42, freq = 3}, new Node{key = 25, freq = 40}, new Node{key = 37, freq = 30}};
        Program.find_optimal_binary_search_tree(nodes_35);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
