// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long key;
    public long freq;
    public override string ToString() => $"Node {{key = {key}, freq = {freq}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Node[] sort_nodes(Node[] nodes_0) {
        Node[] arr_1 = nodes_0;
        long i_2 = 1;
        while ((i_2 < arr_1.Length)) {
            Node key_node_3 = arr_1[(int)(i_2)];
            long j_4 = (i_2 - 1);
            while ((j_4 >= 0)) {
                Node temp_5 = arr_1[(int)(j_4)];
                if ((temp_5.key > key_node_3.key)) {
                    arr_1[(j_4 + 1)] = temp_5;
                    j_4 = (j_4 - 1);
                } else {
                    break;
                }
            }
            arr_1[(j_4 + 1)] = key_node_3;
            i_2 = (i_2 + 1);
        };
        return arr_1;
    }

    public static void print_node(Node n_6) {
        Console.WriteLine(Program._fmtTop((((("Node(key=" + _fmtStr(n_6.key)) + ", freq=") + _fmtStr(n_6.freq)) + ")")));
    }

    public static void print_binary_search_tree(long[][] root_7, long[] keys_8, long i_9, long j_10, long parent_11, bool is_left_12) {
        if ((((i_9 > j_10) || (i_9 < 0)) || (j_10 > (root_7.Length - 1)))) {
            return;
        };
        long node_13 = root_7[(int)(i_9)][(int)(j_10)];
        if ((parent_11 == -1)) {
            Console.WriteLine(Program._fmtTop((_fmtStr(keys_8[(int)(node_13)]) + " is the root of the binary search tree.")));
        } else if (is_left_12) {
            Console.WriteLine(Program._fmtTop((((_fmtStr(keys_8[(int)(node_13)]) + " is the left child of key ") + _fmtStr(parent_11)) + ".")));
        } else {
            Console.WriteLine(Program._fmtTop((((_fmtStr(keys_8[(int)(node_13)]) + " is the right child of key ") + _fmtStr(parent_11)) + ".")));
        };
        Program.print_binary_search_tree(root_7, keys_8, i_9, (node_13 - 1), keys_8[(int)(node_13)], true);
        Program.print_binary_search_tree(root_7, keys_8, (node_13 + 1), j_10, keys_8[(int)(node_13)], false);
    }

    public static void find_optimal_binary_search_tree(Node[] original_nodes_14) {
        Node[] nodes_15 = Program.sort_nodes(original_nodes_14);
        long n_16 = nodes_15.Length;
        long[] keys_17 = new long[]{};
        long[] freqs_18 = new long[]{};
        long i_19 = 0;
        while ((i_19 < n_16)) {
            Node node_20 = nodes_15[(int)(i_19)];
            keys_17 = (Enumerable.ToArray(Enumerable.Append<long>(keys_17, node_20.key)));
            freqs_18 = (Enumerable.ToArray(Enumerable.Append<long>(freqs_18, node_20.freq)));
            i_19 = (i_19 + 1);
        };
        long[][] dp_21 = new long[][]{};
        long[][] total_22 = new long[][]{};
        long[][] root_23 = new long[][]{};
        i_19 = 0;
        while ((i_19 < n_16)) {
            long[] dp_row_24 = new long[]{};
            long[] total_row_25 = new long[]{};
            long[] root_row_26 = new long[]{};
            long j_27 = 0;
            while ((j_27 < n_16)) {
                if ((i_19 == j_27)) {
                    dp_row_24 = (Enumerable.ToArray(Enumerable.Append<long>(dp_row_24, freqs_18[(int)(i_19)])));
                    total_row_25 = (Enumerable.ToArray(Enumerable.Append<long>(total_row_25, freqs_18[(int)(i_19)])));
                    root_row_26 = (Enumerable.ToArray(Enumerable.Append<long>(root_row_26, i_19)));
                } else {
                    dp_row_24 = (Enumerable.ToArray(Enumerable.Append<long>(dp_row_24, 0)));
                    total_row_25 = (Enumerable.ToArray(Enumerable.Append<long>(total_row_25, 0)));
                    root_row_26 = (Enumerable.ToArray(Enumerable.Append<long>(root_row_26, 0)));
                }
                j_27 = (j_27 + 1);
            }
            dp_21 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_21, dp_row_24)));
            total_22 = (Enumerable.ToArray(Enumerable.Append<long[]>(total_22, total_row_25)));
            root_23 = (Enumerable.ToArray(Enumerable.Append<long[]>(root_23, root_row_26)));
            i_19 = (i_19 + 1);
        };
        long interval_length_28 = 2;
        long INF_29 = 2147483647;
        while ((interval_length_28 <= n_16)) {
            i_19 = 0;
            while ((i_19 < ((n_16 - interval_length_28) + 1))) {
                long j_30 = ((i_19 + interval_length_28) - 1);
                dp_21[(int)(i_19)][j_30] = INF_29;
                total_22[(int)(i_19)][j_30] = (total_22[(int)(i_19)][(int)((j_30 - 1))] + freqs_18[(int)(j_30)]);
                long r_31 = root_23[(int)(i_19)][(int)((j_30 - 1))];
                while ((r_31 <= root_23[(int)((i_19 + 1))][(int)(j_30)])) {
                    long left_32 = ((r_31 != i_19) ? dp_21[(int)(i_19)][(int)((r_31 - 1))] : 0);
                    long right_33 = ((r_31 != j_30) ? dp_21[(int)((r_31 + 1))][(int)(j_30)] : 0);
                    long cost_34 = ((left_32 + total_22[(int)(i_19)][(int)(j_30)]) + right_33);
                    if ((dp_21[(int)(i_19)][(int)(j_30)] > cost_34)) {
                        dp_21[(int)(i_19)][j_30] = cost_34;
                        root_23[(int)(i_19)][j_30] = r_31;
                    }
                    r_31 = (r_31 + 1);
                }
                i_19 = (i_19 + 1);
            }
            interval_length_28 = (interval_length_28 + 1);
        };
        Console.WriteLine(Program._fmtTop("Binary search tree nodes:"));
        i_19 = 0;
        while ((i_19 < n_16)) {
            Program.print_node(nodes_15[(int)(i_19)]);
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(Program._fmtTop((("\nThe cost of optimal BST for given tree nodes is " + _fmtStr(dp_21[(int)(0)][(int)((n_16 - 1))])) + ".")));
        Program.print_binary_search_tree(root_23, keys_17, 0, (n_16 - 1), -1, false);
    }

    public static void main() {
        Node[] nodes_35 = new Node[]{new Node{key = 12, freq = 8}, new Node{key = 10, freq = 34}, new Node{key = 20, freq = 50}, new Node{key = 42, freq = 3}, new Node{key = 25, freq = 40}, new Node{key = 37, freq = 30}};
        Program.find_optimal_binary_search_tree(nodes_35);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
