// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] copy_list(long[] src_0) {
        long[] result_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < src_0.Length)) {
            result_1 = (Enumerable.ToArray(Enumerable.Append<long>(result_1, src_0[(int)(i_2)])));
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long[][] subset_combinations(long[] elements_3, long n_4) {
        long r_5 = elements_3.Length;
        if ((n_4 > r_5)) {
            return new long[][]{};
        };
        long[][][] dp_6 = new long[][][]{};
        long i_7 = 0;
        while ((i_7 <= r_5)) {
            dp_6 = (Enumerable.ToArray(Enumerable.Append<long[][]>(dp_6, new long[][]{})));
            i_7 = (i_7 + 1);
        };
        dp_6[0] = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_6[(int)(0)], new long[]{})));
        i_7 = 1;
        while ((i_7 <= r_5)) {
            long j_8 = i_7;
            while ((j_8 > 0)) {
                long[][] prevs_9 = dp_6[(int)((j_8 - 1))];
                long k_10 = 0;
                while ((k_10 < prevs_9.Length)) {
                    long[] prev_11 = prevs_9[(int)(k_10)];
                    long[] comb_12 = Program.copy_list(prev_11);
                    comb_12 = (Enumerable.ToArray(Enumerable.Append<long>(comb_12, elements_3[(int)((i_7 - 1))])));
                    dp_6[j_8] = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_6[(int)(j_8)], comb_12)));
                    k_10 = (k_10 + 1);
                }
                j_8 = (j_8 - 1);
            }
            i_7 = (i_7 + 1);
        };
        return dp_6[(int)(n_4)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.subset_combinations(new long[]{10, 20, 30, 40}, 2))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
