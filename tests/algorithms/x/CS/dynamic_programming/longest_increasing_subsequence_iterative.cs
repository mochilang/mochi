// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] copy_list(BigInteger[] xs_0) {
        BigInteger[] res_1 = new BigInteger[]{};
        BigInteger i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            res_1 = ((Func<BigInteger[]>)(() => { var _tmp = res_1.Cast<BigInteger>().ToList(); _tmp.Add(_idx(xs_0, (long)(i_2))); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static BigInteger[] longest_subsequence(BigInteger[] arr_3) {
        long n_4 = arr_3.Length;
        BigInteger[][] lis_5 = new BigInteger[][]{};
        BigInteger i_6 = 0;
        while ((i_6 < n_4)) {
            BigInteger[] single_7 = new BigInteger[]{};
            single_7 = ((Func<BigInteger[]>)(() => { var _tmp = single_7.Cast<BigInteger>().ToList(); _tmp.Add(_idx(arr_3, (long)(i_6))); return _tmp.ToArray(); }))();
            lis_5 = ((Func<BigInteger[][]>)(() => { var _tmp = lis_5.Cast<BigInteger[]>().ToList(); _tmp.Add(single_7); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        i_6 = 1;
        while ((i_6 < n_4)) {
            BigInteger prev_8 = 0;
            while ((prev_8 < i_6)) {
                if (((_idx(arr_3, (long)(prev_8)) <= _idx(arr_3, (long)(i_6))) && ((_idx(lis_5, (long)(prev_8)).Length + 1) > _idx(lis_5, (long)(i_6)).Length))) {
                    BigInteger[] temp_9 = Program.copy_list(_idx(lis_5, (long)(prev_8)));
                    BigInteger[] temp2_10 = ((Func<BigInteger[]>)(() => { var _tmp = temp_9.Cast<BigInteger>().ToList(); _tmp.Add(_idx(arr_3, (long)(i_6))); return _tmp.ToArray(); }))();
                    lis_5[(int)(i_6)] = temp2_10;
                }
                prev_8 = (prev_8 + 1);
            }
            i_6 = (i_6 + 1);
        };
        BigInteger[] result_11 = new BigInteger[]{};
        i_6 = 0;
        while ((i_6 < n_4)) {
            if ((_idx(lis_5, (long)(i_6)).Length > result_11.Length)) {
                result_11 = _idx(lis_5, (long)(i_6));
            }
            i_6 = (i_6 + 1);
        };
        return result_11;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_subsequence(new BigInteger[]{10, 22, 9, 33, 21, 50, 41, 60, 80}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_subsequence(new BigInteger[]{4, 8, 7, 5, 1, 12, 2, 3, 9}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_subsequence(new BigInteger[]{9, 8, 7, 6, 5, 7}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_subsequence(new BigInteger[]{28, 26, 12, 23, 35, 39}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_subsequence(new BigInteger[]{1, 1, 1}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_subsequence(new BigInteger[]{}))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
