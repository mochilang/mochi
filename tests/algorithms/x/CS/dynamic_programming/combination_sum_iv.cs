// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] make_list(long len_0, long value_1) {
        long[] arr_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < len_0)) {
            arr_2 = (Enumerable.ToArray(Enumerable.Append<long>(arr_2, value_1)));
            i_3 = (i_3 + 1);
        };
        return arr_2;
    }

    public static long count_recursive(long[] array_4, long target_5) {
        if ((target_5 < 0)) {
            return 0;
        };
        if ((target_5 == 0)) {
            return 1;
        };
        long total_6 = 0;
        long i_7 = 0;
        while ((i_7 < array_4.Length)) {
            total_6 = (total_6 + Program.count_recursive(array_4, (target_5 - array_4[(int)(i_7)])));
            i_7 = (i_7 + 1);
        };
        return total_6;
    }

    public static long combination_sum_iv(long[] array_8, long target_9) {
        return Program.count_recursive(array_8, target_9);
    }

    public static long count_dp(long[] array_10, long target_11, long[] dp_12) {
        if ((target_11 < 0)) {
            return 0;
        };
        if ((target_11 == 0)) {
            return 1;
        };
        if ((dp_12[(int)(target_11)] > (0 - 1))) {
            return dp_12[(int)(target_11)];
        };
        long total_13 = 0;
        long i_14 = 0;
        while ((i_14 < array_10.Length)) {
            total_13 = (total_13 + Program.count_dp(array_10, (target_11 - array_10[(int)(i_14)]), dp_12));
            i_14 = (i_14 + 1);
        };
        dp_12[target_11] = total_13;
        return total_13;
    }

    public static long combination_sum_iv_dp_array(long[] array_15, long target_16) {
        long[] dp_17 = Program.make_list((target_16 + 1), -1);
        return Program.count_dp(array_15, target_16, dp_17);
    }

    public static long combination_sum_iv_bottom_up(long n_18, long[] array_19, long target_20) {
        long[] dp_21 = Program.make_list((target_20 + 1), 0);
        dp_21[0] = 1;
        long i_22 = 1;
        while ((i_22 <= target_20)) {
            long j_23 = 0;
            while ((j_23 < n_18)) {
                if (((i_22 - array_19[(int)(j_23)]) >= 0)) {
                    dp_21[i_22] = (dp_21[(int)(i_22)] + dp_21[(int)((i_22 - array_19[(int)(j_23)]))]);
                }
                j_23 = (j_23 + 1);
            }
            i_22 = (i_22 + 1);
        };
        return dp_21[(int)(target_20)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.combination_sum_iv(new long[]{1, 2, 5}, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.combination_sum_iv_dp_array(new long[]{1, 2, 5}, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.combination_sum_iv_bottom_up(3, new long[]{1, 2, 5}, 5))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
