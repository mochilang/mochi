// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] make_list(BigInteger len_0, BigInteger value_1) {
        BigInteger[] arr_2 = new BigInteger[]{};
        BigInteger i_3 = 0;
        while ((i_3 < len_0)) {
            arr_2 = ((Func<BigInteger[]>)(() => { var _tmp = arr_2.Cast<BigInteger>().ToList(); _tmp.Add(value_1); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return arr_2;
    }

    public static BigInteger max_int(BigInteger a_4, BigInteger b_5) {
        if ((a_4 > b_5)) {
            return a_4;
        } else {
            return b_5;
        };
        return default(BigInteger);
    }

    public static BigInteger min_int(BigInteger a_6, BigInteger b_7) {
        if ((a_6 < b_7)) {
            return a_6;
        } else {
            return b_7;
        };
        return default(BigInteger);
    }

    public static BigInteger min3(BigInteger a_8, BigInteger b_9, BigInteger c_10) {
        return Program.min_int(Program.min_int(a_8, b_9), c_10);
    }

    public static BigInteger minimum_tickets_cost(BigInteger[] days_11, BigInteger[] costs_12) {
        if ((days_11.Length == 0)) {
            return 0;
        };
        BigInteger last_day_13 = _idx(days_11, (long)((days_11.Length - 1)));
        BigInteger[] dp_14 = Program.make_list((last_day_13 + 1), 0);
        BigInteger day_index_15 = 0;
        BigInteger d_16 = 1;
        while ((d_16 <= last_day_13)) {
            if (((day_index_15 < days_11.Length) && (d_16 == _idx(days_11, (long)(day_index_15))))) {
                BigInteger cost1_17 = (_idx(dp_14, (long)((d_16 - 1))) + _idx(costs_12, (long)(0)));
                BigInteger cost7_18 = (_idx(dp_14, (long)(Program.max_int(0, (d_16 - 7)))) + _idx(costs_12, (long)(1)));
                BigInteger cost30_19 = (_idx(dp_14, (long)(Program.max_int(0, (d_16 - 30)))) + _idx(costs_12, (long)(2)));
                dp_14[(int)(d_16)] = Program.min3(cost1_17, cost7_18, cost30_19);
                day_index_15 = (day_index_15 + 1);
            } else {
                dp_14[(int)(d_16)] = _idx(dp_14, (long)((d_16 - 1)));
            }
            d_16 = (d_16 + 1);
        };
        return _idx(dp_14, (long)(last_day_13));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_tickets_cost(new BigInteger[]{1, 4, 6, 7, 8, 20}, new BigInteger[]{2, 7, 15}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_tickets_cost(new BigInteger[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, new BigInteger[]{2, 7, 15}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.minimum_tickets_cost(new BigInteger[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, new BigInteger[]{2, 90, 150}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
