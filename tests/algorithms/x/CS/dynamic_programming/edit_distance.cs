// Generated by Mochi 0.10.62 on 2025-08-09 15:58 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long min3(long a_0, long b_1, long c_2) {
        long m_3 = a_0;
        if ((b_1 < m_3)) {
            m_3 = b_1;
        };
        if ((c_2 < m_3)) {
            m_3 = c_2;
        };
        return m_3;
    }

    public static long helper_top_down(string word1_4, string word2_5, long[][] dp_6, long i_7, long j_8) {
        if ((i_7 < 0)) {
            return (j_8 + 1);
        };
        if ((j_8 < 0)) {
            return (i_7 + 1);
        };
        if ((dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)][(int)(j_8 < 0 ? dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)].Length + (j_8) : j_8)] != (0 - 1))) {
            return dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)][(int)(j_8 < 0 ? dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)].Length + (j_8) : j_8)];
        };
        if ((_substr(word1_4, i_7, (i_7 + 1)) == _substr(word2_5, j_8, (j_8 + 1)))) {
            dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)][(int)(j_8)] = Program.helper_top_down(word1_4, word2_5, dp_6, (i_7 - 1), (j_8 - 1));
        } else {
            long insert_9 = Program.helper_top_down(word1_4, word2_5, dp_6, i_7, (j_8 - 1));
            long delete_10 = Program.helper_top_down(word1_4, word2_5, dp_6, (i_7 - 1), j_8);
            long replace_11 = Program.helper_top_down(word1_4, word2_5, dp_6, (i_7 - 1), (j_8 - 1));
            dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)][(int)(j_8)] = (1 + Program.min3(insert_9, delete_10, replace_11));
        };
        return dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)][(int)(j_8 < 0 ? dp_6[(int)(i_7 < 0 ? dp_6.Length + (i_7) : i_7)].Length + (j_8) : j_8)];
    }

    public static long min_dist_top_down(string word1_12, string word2_13) {
        long m_14 = word1_12.Length;
        long n_15 = word2_13.Length;
        long[][] dp_16 = new long[][]{};
        for (var __17 = 0; __17 < m_14; __17++) {
            long[] row_18 = new long[]{};
            for (var _2_19 = 0; _2_19 < n_15; _2_19++) {
                row_18 = (Enumerable.ToArray(Enumerable.Append<long>(row_18, (0 - 1))));
            }
            dp_16 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_16, row_18)));
        };
        return Program.helper_top_down(word1_12, word2_13, dp_16, (m_14 - 1), (n_15 - 1));
    }

    public static long min_dist_bottom_up(string word1_20, string word2_21) {
        long m_22 = word1_20.Length;
        long n_23 = word2_21.Length;
        long[][] dp_24 = new long[][]{};
        for (var __25 = 0; __25 < (m_22 + 1); __25++) {
            long[] row_26 = new long[]{};
            for (var _2_27 = 0; _2_27 < (n_23 + 1); _2_27++) {
                row_26 = (Enumerable.ToArray(Enumerable.Append<long>(row_26, 0)));
            }
            dp_24 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_24, row_26)));
        };
        for (var i_28 = 0; i_28 < (m_22 + 1); i_28++) {
            for (var j_29 = 0; j_29 < (n_23 + 1); j_29++) {
                if ((i_28 == 0)) {
                    dp_24[(int)(i_28 < 0 ? dp_24.Length + (i_28) : i_28)][(int)(j_29)] = j_29;
                } else if ((j_29 == 0)) {
                    dp_24[(int)(i_28 < 0 ? dp_24.Length + (i_28) : i_28)][(int)(j_29)] = i_28;
                } else if ((_substr(word1_20, (i_28 - 1), i_28) == _substr(word2_21, (j_29 - 1), j_29))) {
                    dp_24[(int)(i_28 < 0 ? dp_24.Length + (i_28) : i_28)][(int)(j_29)] = dp_24[(int)((i_28 - 1) < 0 ? dp_24.Length + ((i_28 - 1)) : (i_28 - 1))][(int)((j_29 - 1) < 0 ? dp_24[(int)((i_28 - 1) < 0 ? dp_24.Length + ((i_28 - 1)) : (i_28 - 1))].Length + ((j_29 - 1)) : (j_29 - 1))];
                } else {
                    long insert_30 = dp_24[(int)(i_28 < 0 ? dp_24.Length + (i_28) : i_28)][(int)((j_29 - 1) < 0 ? dp_24[(int)(i_28 < 0 ? dp_24.Length + (i_28) : i_28)].Length + ((j_29 - 1)) : (j_29 - 1))];
                    long delete_31 = dp_24[(int)((i_28 - 1) < 0 ? dp_24.Length + ((i_28 - 1)) : (i_28 - 1))][(int)(j_29 < 0 ? dp_24[(int)((i_28 - 1) < 0 ? dp_24.Length + ((i_28 - 1)) : (i_28 - 1))].Length + (j_29) : j_29)];
                    long replace_32 = dp_24[(int)((i_28 - 1) < 0 ? dp_24.Length + ((i_28 - 1)) : (i_28 - 1))][(int)((j_29 - 1) < 0 ? dp_24[(int)((i_28 - 1) < 0 ? dp_24.Length + ((i_28 - 1)) : (i_28 - 1))].Length + ((j_29 - 1)) : (j_29 - 1))];
                    dp_24[(int)(i_28 < 0 ? dp_24.Length + (i_28) : i_28)][(int)(j_29)] = (1 + Program.min3(insert_30, delete_31, replace_32));
                }
            }
        };
        return dp_24[(int)(m_22 < 0 ? dp_24.Length + (m_22) : m_22)][(int)(n_23 < 0 ? dp_24[(int)(m_22 < 0 ? dp_24.Length + (m_22) : m_22)].Length + (n_23) : n_23)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_dist_top_down("intention", "execution"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_dist_top_down("intention", ""))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_dist_top_down("", ""))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_dist_bottom_up("intention", "execution"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_dist_bottom_up("intention", ""))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_dist_bottom_up("", ""))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
