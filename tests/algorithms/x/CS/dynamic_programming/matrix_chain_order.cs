// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class MatrixChainResult {
    public BigInteger[][] matrix;
    public BigInteger[][] solution;
    public override string ToString() => $"MatrixChainResult {{matrix = {matrix}, solution = {solution}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[][] make_2d(BigInteger n_0) {
        BigInteger[][] res_1 = new BigInteger[][]{};
        BigInteger i_2 = 0;
        while ((i_2 < n_0)) {
            BigInteger[] row_3 = new BigInteger[]{};
            BigInteger j_4 = 0;
            while ((j_4 < n_0)) {
                row_3 = ((Func<BigInteger[]>)(() => { var _tmp = row_3.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_4 = (j_4 + 1);
            }
            res_1 = ((Func<BigInteger[][]>)(() => { var _tmp = res_1.Cast<BigInteger[]>().ToList(); _tmp.Add(row_3); return _tmp.ToArray(); }))();
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static MatrixChainResult matrix_chain_order(BigInteger[] arr_5) {
        long n_6 = arr_5.Length;
        BigInteger[][] m_7 = Program.make_2d(n_6);
        BigInteger[][] s_8 = Program.make_2d(n_6);
        BigInteger chain_length_9 = 2;
        while ((chain_length_9 < n_6)) {
            BigInteger a_10 = 1;
            while ((a_10 < ((n_6 - chain_length_9) + 1))) {
                BigInteger b_11 = ((a_10 + chain_length_9) - 1);
                _idx(m_7, (long)(a_10))[(int)(b_11)] = 1000000000;
                BigInteger c_12 = a_10;
                while ((c_12 < b_11)) {
                    BigInteger cost_13 = ((_idx(_idx(m_7, (long)(a_10)), (long)(c_12)) + _idx(_idx(m_7, (long)((c_12 + 1))), (long)(b_11))) + ((_idx(arr_5, (long)((a_10 - 1))) * _idx(arr_5, (long)(c_12))) * _idx(arr_5, (long)(b_11))));
                    if ((cost_13 < _idx(_idx(m_7, (long)(a_10)), (long)(b_11)))) {
                        _idx(m_7, (long)(a_10))[(int)(b_11)] = cost_13;
                        _idx(s_8, (long)(a_10))[(int)(b_11)] = c_12;
                    }
                    c_12 = (c_12 + 1);
                }
                a_10 = (a_10 + 1);
            }
            chain_length_9 = (chain_length_9 + 1);
        };
        return new MatrixChainResult{matrix = m_7, solution = s_8};
    }

    public static string optimal_parenthesization(BigInteger[][] s_14, BigInteger i_15, BigInteger j_16) {
        if ((i_15 == j_16)) {
            return ("A" + _fmtStr(i_15));
        } else {
            string left_17 = Program.optimal_parenthesization(s_14, i_15, _idx(_idx(s_14, (long)(i_15)), (long)(j_16)));
            string right_18 = Program.optimal_parenthesization(s_14, (_idx(_idx(s_14, (long)(i_15)), (long)(j_16)) + 1), j_16);
            return (((("( " + left_17) + " ") + right_18) + " )");
        };
        return default(string);
    }

    public static void main() {
        BigInteger[] arr_19 = new BigInteger[]{30, 35, 15, 5, 10, 20, 25};
        long n_20 = arr_19.Length;
        MatrixChainResult res_21 = Program.matrix_chain_order(arr_19);
        BigInteger[][] m_22 = res_21.matrix;
        BigInteger[][] s_23 = res_21.solution;
        Console.WriteLine(Program._fmtTop(("No. of Operation required: " + _fmtStr(_idx(_idx(m_22, (long)(1)), (long)((n_20 - 1)))))));
        string seq_24 = Program.optimal_parenthesization(s_23, 1, (n_20 - 1));
        Console.WriteLine(Program._fmtTop(seq_24));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
