// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class MatrixChainResult {
    public long[][] matrix;
    public long[][] solution;
    public override string ToString() => $"MatrixChainResult {{matrix = {matrix}, solution = {solution}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][] make_2d(long n_0) {
        long[][] res_1 = new long[][]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            long[] row_3 = new long[]{};
            long j_4 = 0;
            while ((j_4 < n_0)) {
                row_3 = (Enumerable.ToArray(Enumerable.Append<long>(row_3, 0)));
                j_4 = (j_4 + 1);
            }
            res_1 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static MatrixChainResult matrix_chain_order(long[] arr_5) {
        long n_6 = arr_5.Length;
        long[][] m_7 = Program.make_2d(n_6);
        long[][] s_8 = Program.make_2d(n_6);
        long chain_length_9 = 2;
        while ((chain_length_9 < n_6)) {
            long a_10 = 1;
            while ((a_10 < ((n_6 - chain_length_9) + 1))) {
                long b_11 = ((a_10 + chain_length_9) - 1);
                m_7[(int)(a_10)][b_11] = 1000000000;
                long c_12 = a_10;
                while ((c_12 < b_11)) {
                    long cost_13 = ((m_7[(int)(a_10)][(int)(c_12)] + m_7[(int)((c_12 + 1))][(int)(b_11)]) + ((arr_5[(int)((a_10 - 1))] * arr_5[(int)(c_12)]) * arr_5[(int)(b_11)]));
                    if ((cost_13 < m_7[(int)(a_10)][(int)(b_11)])) {
                        m_7[(int)(a_10)][b_11] = cost_13;
                        s_8[(int)(a_10)][b_11] = c_12;
                    }
                    c_12 = (c_12 + 1);
                }
                a_10 = (a_10 + 1);
            }
            chain_length_9 = (chain_length_9 + 1);
        };
        return new MatrixChainResult{matrix = m_7, solution = s_8};
    }

    public static string optimal_parenthesization(long[][] s_14, long i_15, long j_16) {
        if ((i_15 == j_16)) {
            return ("A" + _fmtStr(i_15));
        } else {
            string left_17 = Program.optimal_parenthesization(s_14, i_15, s_14[(int)(i_15)][(int)(j_16)]);
            string right_18 = Program.optimal_parenthesization(s_14, (s_14[(int)(i_15)][(int)(j_16)] + 1), j_16);
            return (((("( " + left_17) + " ") + right_18) + " )");
        };
        return default(string);
    }

    public static void main() {
        long[] arr_19 = new long[]{30, 35, 15, 5, 10, 20, 25};
        long n_20 = arr_19.Length;
        MatrixChainResult res_21 = Program.matrix_chain_order(arr_19);
        long[][] m_22 = res_21.matrix;
        long[][] s_23 = res_21.solution;
        Console.WriteLine(Program._fmtTop(("No. of Operation required: " + _fmtStr(m_22[(int)(1)][(int)((n_20 - 1))]))));
        string seq_24 = Program.optimal_parenthesization(s_23, 1, (n_20 - 1));
        Console.WriteLine(Program._fmtTop(seq_24));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
