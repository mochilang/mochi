// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger min_partitions(string s_0) {
        long n_1 = s_0.Length;
        BigInteger[] cut_2 = new BigInteger[]{};
        BigInteger i_3 = 0;
        while ((i_3 < n_1)) {
            cut_2 = ((Func<BigInteger[]>)(() => { var _tmp = cut_2.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        bool[][] pal_4 = new bool[][]{};
        i_3 = 0;
        while ((i_3 < n_1)) {
            bool[] row_5 = new bool[]{};
            BigInteger j_6 = 0;
            while ((j_6 < n_1)) {
                row_5 = ((Func<bool[]>)(() => { var _tmp = row_5.Cast<bool>().ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
                j_6 = (j_6 + 1);
            }
            pal_4 = ((Func<bool[][]>)(() => { var _tmp = pal_4.Cast<bool[]>().ToList(); _tmp.Add(row_5); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        i_3 = 0;
        while ((i_3 < n_1)) {
            BigInteger mincut_7 = i_3;
            BigInteger j_8 = 0;
            while ((j_8 <= i_3)) {
                if (((s_0.Substring((int)(i_3), 1) == s_0.Substring((int)(j_8), 1)) && (((i_3 - j_8) < 2) || _idx(_idx(pal_4, (long)((j_8 + 1))), (long)((i_3 - 1)))))) {
                    _idx(pal_4, (long)(j_8))[(int)(i_3)] = true;
                    if ((j_8 == 0)) {
                        mincut_7 = 0;
                    } else {
                        BigInteger candidate_9 = (_idx(cut_2, (long)((j_8 - 1))) + 1);
                        if ((candidate_9 < mincut_7)) {
                            mincut_7 = candidate_9;
                        }
                    }
                }
                j_8 = (j_8 + 1);
            }
            cut_2[(int)(i_3)] = mincut_7;
            i_3 = (i_3 + 1);
        };
        return _idx(cut_2, (long)((n_1 - 1)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.min_partitions("aab")));
            Console.WriteLine(Program._fmtTop(Program.min_partitions("aaa")));
            Console.WriteLine(Program._fmtTop(Program.min_partitions("ababbbabbababa")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
