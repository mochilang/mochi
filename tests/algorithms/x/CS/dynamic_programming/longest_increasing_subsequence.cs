// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static long[] longest_subsequence(long[] xs_0) {
        long n_1 = xs_0.Length;
        if ((n_1 <= 1)) {
            return xs_0;
        };
        long pivot_2 = xs_0[(int)(0)];
        bool is_found_3 = false;
        long i_4 = 1;
        long[] longest_subseq_5 = new long[]{};
        while (((!is_found_3) && (i_4 < n_1))) {
            if ((xs_0[(int)(i_4)] < pivot_2)) {
                is_found_3 = true;
                long[] temp_array_6 = xs_0.Skip((int)(i_4)).Take((int)((n_1 - i_4))).ToArray();
                temp_array_6 = Program.longest_subsequence(temp_array_6);
                if ((temp_array_6.Length > longest_subseq_5.Length)) {
                    longest_subseq_5 = temp_array_6;
                }
            } else {
                i_4 = (i_4 + 1);
            }
        };
        long[] filtered_7 = new long[]{};
        long j_8 = 1;
        while ((j_8 < n_1)) {
            if ((xs_0[(int)(j_8)] >= pivot_2)) {
                filtered_7 = (Enumerable.ToArray(Enumerable.Append<long>(filtered_7, xs_0[(int)(j_8)])));
            }
            j_8 = (j_8 + 1);
        };
        long[] candidate_9 = new long[]{};
        candidate_9 = (Enumerable.ToArray(Enumerable.Append<long>(candidate_9, pivot_2)));
        candidate_9 = (Enumerable.ToArray(Enumerable.Concat(candidate_9, Program.longest_subsequence(filtered_7))));
        if ((candidate_9.Length > longest_subseq_5.Length)) {
            return candidate_9;
        } else {
            return longest_subseq_5;
        };
        return default(long[]);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
