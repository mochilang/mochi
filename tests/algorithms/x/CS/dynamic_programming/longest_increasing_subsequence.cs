// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    public static BigInteger[] longest_subsequence(BigInteger[] xs_0) {
        long n_1 = xs_0.Length;
        if ((n_1 <= 1)) {
            return xs_0;
        };
        BigInteger pivot_2 = _idx(xs_0, (long)(0));
        bool is_found_3 = false;
        BigInteger i_4 = 1;
        BigInteger[] longest_subseq_5 = new BigInteger[]{};
        while (((!is_found_3) && (i_4 < n_1))) {
            if ((_idx(xs_0, (long)(i_4)) < pivot_2)) {
                is_found_3 = true;
                BigInteger[] temp_array_6 = _slice<BigInteger>(xs_0, (long)(i_4), n_1);
                temp_array_6 = Program.longest_subsequence(temp_array_6);
                if ((temp_array_6.Length > longest_subseq_5.Length)) {
                    longest_subseq_5 = temp_array_6;
                }
            } else {
                i_4 = (i_4 + 1);
            }
        };
        BigInteger[] filtered_7 = new BigInteger[]{};
        BigInteger j_8 = 1;
        while ((j_8 < n_1)) {
            if ((_idx(xs_0, (long)(j_8)) >= pivot_2)) {
                filtered_7 = ((Func<BigInteger[]>)(() => { var _tmp = filtered_7.Cast<BigInteger>().ToList(); _tmp.Add(_idx(xs_0, (long)(j_8))); return _tmp.ToArray(); }))();
            }
            j_8 = (j_8 + 1);
        };
        BigInteger[] candidate_9 = new BigInteger[]{};
        candidate_9 = ((Func<BigInteger[]>)(() => { var _tmp = candidate_9.Cast<BigInteger>().ToList(); _tmp.Add(pivot_2); return _tmp.ToArray(); }))();
        candidate_9 = (Enumerable.ToArray(Enumerable.Concat(candidate_9, Program.longest_subsequence(filtered_7))));
        if ((candidate_9.Length > longest_subseq_5.Length)) {
            return candidate_9;
        } else {
            return longest_subseq_5;
        };
        return default(BigInteger[]);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
