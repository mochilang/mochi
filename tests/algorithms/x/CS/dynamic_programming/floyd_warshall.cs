// Generated by Mochi 0.10.62 on 2025-08-09 15:58 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Graph {
    public long n;
    public long[][] dp;
    public override string ToString() => $"Graph {{n = {n}, dp = {dp}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long INF_0 = 1000000000;
    static Graph graph_22 = Program.new_graph(5);
    public static Graph new_graph(long n_1) {
        long[][] dp_2 = new long[][]{};
        long i_3 = 0;
        while ((i_3 < n_1)) {
            long[] row_4 = new long[]{};
            long j_5 = 0;
            while ((j_5 < n_1)) {
                if ((i_3 == j_5)) {
                    row_4 = (Enumerable.ToArray(Enumerable.Append<long>(row_4, 0)));
                } else {
                    row_4 = (Enumerable.ToArray(Enumerable.Append<long>(row_4, INF_0)));
                }
                j_5 = (j_5 + 1);
            }
            dp_2 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_2, row_4)));
            i_3 = (i_3 + 1);
        };
        return new Graph{n = n_1, dp = dp_2};
    }

    public static void add_edge(Graph g_6, long u_7, long v_8, long w_9) {
        long[][] dp_10 = g_6.dp;
        long[] row_11 = dp_10[(int)(u_7 < 0 ? dp_10.Length + (u_7) : u_7)];
        row_11[(int)(v_8)] = w_9;
        dp_10[(int)(u_7)] = row_11;
        g_6.dp = dp_10;
    }

    public static void floyd_warshall(Graph g_12) {
        long[][] dp_13 = g_12.dp;
        long k_14 = 0;
        while ((k_14 < g_12.n)) {
            long i_15 = 0;
            while ((i_15 < g_12.n)) {
                long j_16 = 0;
                while ((j_16 < g_12.n)) {
                    long alt_17 = (dp_13[(int)(i_15 < 0 ? dp_13.Length + (i_15) : i_15)][(int)(k_14 < 0 ? dp_13[(int)(i_15 < 0 ? dp_13.Length + (i_15) : i_15)].Length + (k_14) : k_14)] + dp_13[(int)(k_14 < 0 ? dp_13.Length + (k_14) : k_14)][(int)(j_16 < 0 ? dp_13[(int)(k_14 < 0 ? dp_13.Length + (k_14) : k_14)].Length + (j_16) : j_16)]);
                    long[] row_18 = dp_13[(int)(i_15 < 0 ? dp_13.Length + (i_15) : i_15)];
                    if ((alt_17 < row_18[(int)(j_16 < 0 ? row_18.Length + (j_16) : j_16)])) {
                        row_18[(int)(j_16)] = alt_17;
                        dp_13[(int)(i_15)] = row_18;
                    }
                    j_16 = (j_16 + 1);
                }
                i_15 = (i_15 + 1);
            }
            k_14 = (k_14 + 1);
        };
        g_12.dp = dp_13;
    }

    public static long show_min(Graph g_19, long u_20, long v_21) {
        return g_19.dp[(int)(u_20 < 0 ? g_19.dp.Length + (u_20) : u_20)][(int)(v_21 < 0 ? g_19.dp[(int)(u_20 < 0 ? g_19.dp.Length + (u_20) : u_20)].Length + (v_21) : v_21)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.add_edge(graph_22, 0, 2, 9);
            Program.add_edge(graph_22, 0, 4, 10);
            Program.add_edge(graph_22, 1, 3, 5);
            Program.add_edge(graph_22, 2, 3, 7);
            Program.add_edge(graph_22, 3, 0, 10);
            Program.add_edge(graph_22, 3, 1, 2);
            Program.add_edge(graph_22, 3, 2, 1);
            Program.add_edge(graph_22, 3, 4, 6);
            Program.add_edge(graph_22, 4, 1, 3);
            Program.add_edge(graph_22, 4, 2, 4);
            Program.add_edge(graph_22, 4, 3, 9);
            Program.floyd_warshall(graph_22);
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.show_min(graph_22, 1, 4))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.show_min(graph_22, 0, 3))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
