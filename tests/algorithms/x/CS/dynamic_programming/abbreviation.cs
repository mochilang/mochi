// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long index_of(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), 1) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static long ord(string ch_3) {
        string upper_4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_5 = "abcdefghijklmnopqrstuvwxyz";
        long idx_6 = Program.index_of(upper_4, ch_3);
        if ((idx_6 >= 0)) {
            return (65 + idx_6);
        };
        idx_6 = Program.index_of(lower_5, ch_3);
        if ((idx_6 >= 0)) {
            return (97 + idx_6);
        };
        return 0;
    }

    public static string chr(long n_7) {
        string upper_8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_9 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_7 >= 65) && (n_7 < 91))) {
            return _substr(upper_8, (n_7 - 65), (n_7 - 64));
        };
        if (((n_7 >= 97) && (n_7 < 123))) {
            return _substr(lower_9, (n_7 - 97), (n_7 - 96));
        };
        return "?";
    }

    public static string to_upper_char(string c_10) {
        long code_11 = Program.ord(c_10);
        if (((code_11 >= 97) && (code_11 <= 122))) {
            return Program.chr((code_11 - 32));
        };
        return c_10;
    }

    public static bool is_lower(string c_12) {
        long code_13 = Program.ord(c_12);
        return ((code_13 >= 97) && (code_13 <= 122));
    }

    public static bool abbr(string a_14, string b_15) {
        long n_16 = a_14.Length;
        long m_17 = b_15.Length;
        bool[][] dp_18 = new bool[][]{};
        long i_19 = 0;
        while ((i_19 <= n_16)) {
            bool[] row_20 = new bool[]{};
            long j_21 = 0;
            while ((j_21 <= m_17)) {
                row_20 = (Enumerable.ToArray(Enumerable.Append<bool>(row_20, false)));
                j_21 = (j_21 + 1);
            }
            dp_18 = (Enumerable.ToArray(Enumerable.Append<bool[]>(dp_18, row_20)));
            i_19 = (i_19 + 1);
        };
        dp_18[(int)(0)][0] = true;
        i_19 = 0;
        while ((i_19 < n_16)) {
            long j_22 = 0;
            while ((j_22 <= m_17)) {
                if (dp_18[(int)(i_19)][(int)(j_22)]) {
                    if (((j_22 < m_17) && (Program.to_upper_char(a_14.Substring((int)(i_19), 1)) == b_15.Substring((int)(j_22), 1)))) {
                        dp_18[(int)((i_19 + 1))][(j_22 + 1)] = true;
                    }
                    if (Program.is_lower(a_14.Substring((int)(i_19), 1))) {
                        dp_18[(int)((i_19 + 1))][j_22] = true;
                    }
                }
                j_22 = (j_22 + 1);
            }
            i_19 = (i_19 + 1);
        };
        return dp_18[(int)(n_16)][(int)(m_17)];
    }

    public static void print_bool(bool b_23) {
        if (b_23) {
            Console.WriteLine(Program._fmtTop(true));
        } else {
            Console.WriteLine(Program._fmtTop(false));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_bool(Program.abbr("daBcd", "ABC"));
            Program.print_bool(Program.abbr("dBcd", "ABC"));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
