// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] make_list(long len_0, long value_1) {
        long[] arr_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < len_0)) {
            arr_2 = (Enumerable.ToArray(Enumerable.Append<long>(arr_2, value_1)));
            i_3 = (i_3 + 1);
        };
        return arr_2;
    }

    public static long trapped_rainwater(long[] heights_4) {
        if ((heights_4.Length == 0)) {
            return 0;
        };
        long i_5 = 0;
        while ((i_5 < heights_4.Length)) {
            if ((heights_4[(int)(i_5)] < 0)) {
                throw new Exception("No height can be negative");
            }
            i_5 = (i_5 + 1);
        };
        long length_6 = heights_4.Length;
        long[] left_max_7 = Program.make_list(length_6, 0);
        left_max_7[0] = heights_4[(int)(0)];
        i_5 = 1;
        while ((i_5 < length_6)) {
            if ((heights_4[(int)(i_5)] > left_max_7[(int)((i_5 - 1))])) {
                left_max_7[i_5] = heights_4[(int)(i_5)];
            } else {
                left_max_7[i_5] = left_max_7[(int)((i_5 - 1))];
            }
            i_5 = (i_5 + 1);
        };
        long[] right_max_8 = Program.make_list(length_6, 0);
        long last_9 = (length_6 - 1);
        right_max_8[last_9] = heights_4[(int)(last_9)];
        i_5 = (last_9 - 1);
        while ((i_5 >= 0)) {
            if ((heights_4[(int)(i_5)] > right_max_8[(int)((i_5 + 1))])) {
                right_max_8[i_5] = heights_4[(int)(i_5)];
            } else {
                right_max_8[i_5] = right_max_8[(int)((i_5 + 1))];
            }
            i_5 = (i_5 - 1);
        };
        long total_10 = 0;
        i_5 = 0;
        while ((i_5 < length_6)) {
            long left_11 = left_max_7[(int)(i_5)];
            long right_12 = right_max_8[(int)(i_5)];
            long smaller_13 = ((left_11 < right_12) ? left_11 : right_12);
            total_10 = (total_10 + (smaller_13 - heights_4[(int)(i_5)]));
            i_5 = (i_5 + 1);
        };
        return total_10;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.trapped_rainwater(new long[]{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.trapped_rainwater(new long[]{7, 1, 5, 3, 6, 4}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
