// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long min3(long a_0, long b_1, long c_2) {
        long m_3 = a_0;
        if ((b_1 < m_3)) {
            m_3 = b_1;
        };
        if ((c_2 < m_3)) {
            m_3 = c_2;
        };
        return m_3;
    }

    public static long helper(string word1_4, string word2_5, long[][] cache_6, long i_7, long j_8, long len1_9, long len2_10) {
        if ((i_7 >= len1_9)) {
            return (len2_10 - j_8);
        };
        if ((j_8 >= len2_10)) {
            return (len1_9 - i_7);
        };
        if ((cache_6[(int)(i_7)][(int)(j_8)] != (0 - 1))) {
            return cache_6[(int)(i_7)][(int)(j_8)];
        };
        long diff_11 = 0;
        if ((_substr(word1_4, i_7, (i_7 + 1)) != _substr(word2_5, j_8, (j_8 + 1)))) {
            diff_11 = 1;
        };
        long delete_cost_12 = (1 + Program.helper(word1_4, word2_5, cache_6, (i_7 + 1), j_8, len1_9, len2_10));
        long insert_cost_13 = (1 + Program.helper(word1_4, word2_5, cache_6, i_7, (j_8 + 1), len1_9, len2_10));
        long replace_cost_14 = (diff_11 + Program.helper(word1_4, word2_5, cache_6, (i_7 + 1), (j_8 + 1), len1_9, len2_10));
        cache_6[(int)(i_7)][j_8] = Program.min3(delete_cost_12, insert_cost_13, replace_cost_14);
        return cache_6[(int)(i_7)][(int)(j_8)];
    }

    public static long min_distance_up_bottom(string word1_15, string word2_16) {
        long len1_17 = word1_15.Length;
        long len2_18 = word2_16.Length;
        long[][] cache_19 = new long[][]{};
        for (var __20 = 0; __20 < len1_17; __20++) {
            long[] row_21 = new long[]{};
            for (var _2_22 = 0; _2_22 < len2_18; _2_22++) {
                row_21 = (Enumerable.ToArray(Enumerable.Append<long>(row_21, (0 - 1))));
            }
            cache_19 = (Enumerable.ToArray(Enumerable.Append<long[]>(cache_19, row_21)));
        };
        return Program.helper(word1_15, word2_16, cache_19, 0, 0, len1_17, len2_18);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_distance_up_bottom("intention", "execution"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_distance_up_bottom("intention", ""))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_distance_up_bottom("", ""))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.min_distance_up_bottom("zooicoarchaeologist", "zoologist"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
