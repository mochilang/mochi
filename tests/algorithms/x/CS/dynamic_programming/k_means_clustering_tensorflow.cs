// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class KMeansResult {
    public double[][] centroids;
    public long[] assignments;
    public override string ToString() => $"KMeansResult {{centroids = {centroids}, assignments = {assignments}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double distance_sq(double[] a_0, double[] b_1) {
        double sum_2 = 0.0;
        long i_3 = 0;
        while ((i_3 < a_0.Length)) {
            double diff_4 = (a_0[(int)(i_3)] - b_1[(int)(i_3)]);
            sum_2 = (sum_2 + (diff_4 * diff_4));
            i_3 = (i_3 + 1);
        };
        return sum_2;
    }

    public static double[] mean(double[][] vectors_5) {
        long dim_6 = vectors_5[(int)(0)].Length;
        double[] res_7 = new double[]{};
        long i_8 = 0;
        while ((i_8 < dim_6)) {
            double total_9 = 0.0;
            long j_10 = 0;
            while ((j_10 < vectors_5.Length)) {
                total_9 = (total_9 + vectors_5[(int)(j_10)][(int)(i_8)]);
                j_10 = (j_10 + 1);
            }
            res_7 = (Enumerable.ToArray(Enumerable.Append<double>(res_7, (total_9 / vectors_5.Length))));
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    public static KMeansResult k_means(double[][] vectors_11, long k_12, long iterations_13) {
        double[][] centroids_14 = new double[][]{};
        long i_15 = 0;
        while ((i_15 < k_12)) {
            centroids_14 = (Enumerable.ToArray(Enumerable.Append<double[]>(centroids_14, vectors_11[(int)(i_15)])));
            i_15 = (i_15 + 1);
        };
        long[] assignments_16 = new long[]{};
        long n_17 = vectors_11.Length;
        i_15 = 0;
        while ((i_15 < n_17)) {
            assignments_16 = (Enumerable.ToArray(Enumerable.Append<long>(assignments_16, 0)));
            i_15 = (i_15 + 1);
        };
        long it_18 = 0;
        while ((it_18 < iterations_13)) {
            long v_19 = 0;
            while ((v_19 < n_17)) {
                long best_20 = 0;
                double bestDist_21 = Program.distance_sq(vectors_11[(int)(v_19)], centroids_14[(int)(0)]);
                long c_22 = 1;
                while ((c_22 < k_12)) {
                    double d_23 = Program.distance_sq(vectors_11[(int)(v_19)], centroids_14[(int)(c_22)]);
                    if ((d_23 < bestDist_21)) {
                        bestDist_21 = d_23;
                        best_20 = c_22;
                    }
                    c_22 = (c_22 + 1);
                }
                assignments_16[v_19] = best_20;
                v_19 = (v_19 + 1);
            }
            long cIdx_24 = 0;
            while ((cIdx_24 < k_12)) {
                double[][] cluster_25 = new double[][]{};
                long v2_26 = 0;
                while ((v2_26 < n_17)) {
                    if ((assignments_16[(int)(v2_26)] == cIdx_24)) {
                        cluster_25 = (Enumerable.ToArray(Enumerable.Append<double[]>(cluster_25, vectors_11[(int)(v2_26)])));
                    }
                    v2_26 = (v2_26 + 1);
                }
                if ((cluster_25.Length > 0)) {
                    centroids_14[cIdx_24] = Program.mean(cluster_25);
                }
                cIdx_24 = (cIdx_24 + 1);
            }
            it_18 = (it_18 + 1);
        };
        return new KMeansResult{centroids = centroids_14, assignments = assignments_16};
    }

    public static void main() {
        double[][] vectors_27 = new double[][]{new double[]{1.0, 2.0}, new double[]{1.5, 1.8}, new double[]{5.0, 8.0}, new double[]{8.0, 8.0}, new double[]{1.0, 0.6}, new double[]{9.0, 11.0}};
        KMeansResult result_28 = Program.k_means(vectors_27, 2, 5);
        Console.WriteLine(Program._fmtTop(_fmtStr(result_28.centroids)));
        Console.WriteLine(Program._fmtTop(_fmtStr(result_28.assignments)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
