// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long find_min(long[] numbers_0) {
        long n_1 = numbers_0.Length;
        long s_2 = 0;
        long idx_3 = 0;
        while ((idx_3 < n_1)) {
            s_2 = (s_2 + numbers_0[(int)(idx_3)]);
            idx_3 = (idx_3 + 1);
        };
        bool[][] dp_4 = new bool[][]{};
        long i_5 = 0;
        while ((i_5 <= n_1)) {
            bool[] row_6 = new bool[]{};
            long j_7 = 0;
            while ((j_7 <= s_2)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<bool>(row_6, false)));
                j_7 = (j_7 + 1);
            }
            dp_4 = (Enumerable.ToArray(Enumerable.Append<bool[]>(dp_4, row_6)));
            i_5 = (i_5 + 1);
        };
        i_5 = 0;
        while ((i_5 <= n_1)) {
            dp_4[(int)(i_5)][0] = true;
            i_5 = (i_5 + 1);
        };
        long j_8 = 1;
        while ((j_8 <= s_2)) {
            dp_4[(int)(0)][j_8] = false;
            j_8 = (j_8 + 1);
        };
        i_5 = 1;
        while ((i_5 <= n_1)) {
            j_8 = 1;
            while ((j_8 <= s_2)) {
                dp_4[(int)(i_5)][j_8] = dp_4[(int)((i_5 - 1))][(int)(j_8)];
                if ((numbers_0[(int)((i_5 - 1))] <= j_8)) {
                    if (dp_4[(int)((i_5 - 1))][(int)((j_8 - numbers_0[(int)((i_5 - 1))]))]) {
                        dp_4[(int)(i_5)][j_8] = true;
                    }
                }
                j_8 = (j_8 + 1);
            }
            i_5 = (i_5 + 1);
        };
        long diff_9 = 0;
        j_8 = (s_2 / 2);
        while ((j_8 >= 0)) {
            if (dp_4[(int)(n_1)][(int)(j_8)]) {
                diff_9 = (s_2 - (2 * j_8));
                break;
            }
            j_8 = (j_8 - 1);
        };
        return diff_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{1, 2, 3, 4, 5}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{5, 5, 5, 5, 5}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{5, 5, 5, 5}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{3}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{1, 2, 3, 4}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{0, 0, 0, 0}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{-1, -5, 5, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{9, 9, 9, 9, 9}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{1, 5, 10, 3}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{-1, 0, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_min(new long[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
