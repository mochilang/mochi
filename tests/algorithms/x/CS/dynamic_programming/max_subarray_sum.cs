// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double max_subarray_sum(double[] nums_0, bool allow_empty_1) {
        if ((nums_0.Length == 0)) {
            return 0.0;
        };
        double max_sum_2 = 0.0;
        double curr_sum_3 = 0.0;
        if (allow_empty_1) {
            max_sum_2 = 0.0;
            curr_sum_3 = 0.0;
            long i_4 = 0;
            while ((i_4 < nums_0.Length)) {
                double num_5 = nums_0[(int)(i_4)];
                double temp_6 = (curr_sum_3 + num_5);
                curr_sum_3 = ((temp_6 > 0.0) ? temp_6 : 0.0);
                if ((curr_sum_3 > max_sum_2)) {
                    max_sum_2 = curr_sum_3;
                }
                i_4 = (i_4 + 1);
            }
        } else {
            max_sum_2 = nums_0[(int)(0)];
            curr_sum_3 = nums_0[(int)(0)];
            long i_7 = 1;
            while ((i_7 < nums_0.Length)) {
                double num_8 = nums_0[(int)(i_7)];
                double temp_9 = (curr_sum_3 + num_8);
                curr_sum_3 = ((temp_9 > num_8) ? temp_9 : num_8);
                if ((curr_sum_3 > max_sum_2)) {
                    max_sum_2 = curr_sum_3;
                }
                i_7 = (i_7 + 1);
            }
        };
        return max_sum_2;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{2.0, 8.0, 9.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{0.0, 0.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{-1.0, 0.0, 1.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{1.0, 2.0, 3.0, 4.0, -2.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{2.0, 3.0, -9.0, 8.0, -2.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{-2.0, -3.0, -1.0, -4.0, -6.0}, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(new double[]{-2.0, -3.0, -1.0, -4.0, -6.0}, true))));
            double[] empty_10 = new double[]{};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.max_subarray_sum(empty_10, false))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
