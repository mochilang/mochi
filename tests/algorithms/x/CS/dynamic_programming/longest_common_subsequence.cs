// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class LcsResult {
    public long length;
    public string sequence;
    public override string ToString() => $"LcsResult {{length = {length}, sequence = \"{sequence}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string a_16 = "AGGTAB";
    static string b_17 = "GXTXAYB";
    static LcsResult res_18 = Program.longest_common_subsequence(a_16, b_17);
    public static long[][] zeros_matrix(long rows_0, long cols_1) {
        long[][] matrix_2 = new long[][]{};
        long i_3 = 0;
        while ((i_3 <= rows_0)) {
            long[] row_4 = new long[]{};
            long j_5 = 0;
            while ((j_5 <= cols_1)) {
                row_4 = (Enumerable.ToArray(Enumerable.Append<long>(row_4, 0)));
                j_5 = (j_5 + 1);
            }
            matrix_2 = (Enumerable.ToArray(Enumerable.Append<long[]>(matrix_2, row_4)));
            i_3 = (i_3 + 1);
        };
        return matrix_2;
    }

    public static LcsResult longest_common_subsequence(string x_6, string y_7) {
        long m_8 = x_6.Length;
        long n_9 = y_7.Length;
        long[][] dp_10 = Program.zeros_matrix(m_8, n_9);
        long i_11 = 1;
        while ((i_11 <= m_8)) {
            long j_12 = 1;
            while ((j_12 <= n_9)) {
                if ((x_6.Substring((int)((i_11 - 1)), 1) == y_7.Substring((int)((j_12 - 1)), 1))) {
                    dp_10[(int)(i_11)][j_12] = (dp_10[(int)((i_11 - 1))][(int)((j_12 - 1))] + 1);
                } else if ((dp_10[(int)((i_11 - 1))][(int)(j_12)] > dp_10[(int)(i_11)][(int)((j_12 - 1))])) {
                    dp_10[(int)(i_11)][j_12] = dp_10[(int)((i_11 - 1))][(int)(j_12)];
                } else {
                    dp_10[(int)(i_11)][j_12] = dp_10[(int)(i_11)][(int)((j_12 - 1))];
                }
                j_12 = (j_12 + 1);
            }
            i_11 = (i_11 + 1);
        };
        string seq_13 = "";
        long i2_14 = m_8;
        long j2_15 = n_9;
        while (((i2_14 > 0) && (j2_15 > 0))) {
            if ((x_6.Substring((int)((i2_14 - 1)), 1) == y_7.Substring((int)((j2_15 - 1)), 1))) {
                seq_13 = (x_6.Substring((int)((i2_14 - 1)), 1) + seq_13);
                i2_14 = (i2_14 - 1);
                j2_15 = (j2_15 - 1);
            } else if ((dp_10[(int)((i2_14 - 1))][(int)(j2_15)] >= dp_10[(int)(i2_14)][(int)((j2_15 - 1))])) {
                i2_14 = (i2_14 - 1);
            } else {
                j2_15 = (j2_15 - 1);
            }
        };
        return new LcsResult{length = dp_10[(int)(m_8)][(int)(n_9)], sequence = seq_13};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((("len = " + _fmtStr(res_18.length)) + ", sub-sequence = ") + res_18.sequence)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
