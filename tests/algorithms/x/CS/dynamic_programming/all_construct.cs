// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[][] allConstruct(string target_0, string[] wordBank_1) {
        long tableSize_2 = (target_0.Length + 1);
        string[][][] table_3 = new string[][][]{};
        long idx_4 = 0;
        while ((idx_4 < tableSize_2)) {
            string[][] empty_5 = new string[][]{};
            table_3 = (Enumerable.ToArray(Enumerable.Append<string[][]>(table_3, empty_5)));
            idx_4 = (idx_4 + 1);
        };
        string[] base_6 = new string[]{};
        table_3[0] = new string[][]{base_6};
        long i_7 = 0;
        while ((i_7 < tableSize_2)) {
            if ((table_3[(int)(i_7)].Length != 0)) {
                long w_8 = 0;
                while ((w_8 < wordBank_1.Length)) {
                    string word_9 = wordBank_1[(int)(w_8)];
                    long wordLen_10 = word_9.Length;
                    if ((_substr(target_0, i_7, (i_7 + wordLen_10)) == word_9)) {
                        long k_11 = 0;
                        while ((k_11 < table_3[(int)(i_7)].Length)) {
                            string[] way_12 = table_3[(int)(i_7)][(int)(k_11)];
                            string[] combination_13 = new string[]{};
                            long m_14 = 0;
                            while ((m_14 < way_12.Length)) {
                                combination_13 = (Enumerable.ToArray(Enumerable.Append<string>(combination_13, way_12[(int)(m_14)])));
                                m_14 = (m_14 + 1);
                            }
                            combination_13 = (Enumerable.ToArray(Enumerable.Append<string>(combination_13, word_9)));
                            long nextIndex_15 = (i_7 + wordLen_10);
                            table_3[nextIndex_15] = (Enumerable.ToArray(Enumerable.Append<string[]>(table_3[(int)(nextIndex_15)], combination_13)));
                            k_11 = (k_11 + 1);
                        }
                    }
                    w_8 = (w_8 + 1);
                }
            }
            i_7 = (i_7 + 1);
        };
        return table_3[(int)(target_0.Length)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.allConstruct("jwajalapa", new string[]{"jwa", "j", "w", "a", "la", "lapa"}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.allConstruct("rajamati", new string[]{"s", "raj", "amat", "raja", "ma", "i", "t"}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.allConstruct("hexagonosaurus", new string[]{"h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
