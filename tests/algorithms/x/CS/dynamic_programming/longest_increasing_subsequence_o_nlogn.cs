// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long ceil_index(long[] v_0, long left_1, long right_2, long key_3) {
        long l_4 = left_1;
        long r_5 = right_2;
        while (((r_5 - l_4) > 1)) {
            long middle_6 = ((l_4 + r_5) / 2);
            if ((v_0[(int)(middle_6)] >= key_3)) {
                r_5 = middle_6;
            } else {
                l_4 = middle_6;
            }
        };
        return r_5;
    }

    public static long longest_increasing_subsequence_length(long[] v_7) {
        if ((v_7.Length == 0)) {
            return 0;
        };
        long[] tail_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < v_7.Length)) {
            tail_8 = (Enumerable.ToArray(Enumerable.Append<long>(tail_8, 0)));
            i_9 = (i_9 + 1);
        };
        long length_10 = 1;
        tail_8[0] = v_7[(int)(0)];
        long j_11 = 1;
        while ((j_11 < v_7.Length)) {
            if ((v_7[(int)(j_11)] < tail_8[(int)(0)])) {
                tail_8[0] = v_7[(int)(j_11)];
            } else if ((v_7[(int)(j_11)] > tail_8[(int)((length_10 - 1))])) {
                tail_8[length_10] = v_7[(int)(j_11)];
                length_10 = (length_10 + 1);
            } else {
                long idx_12 = Program.ceil_index(tail_8, -1, (length_10 - 1), v_7[(int)(j_11)]);
                tail_8[idx_12] = v_7[(int)(j_11)];
            }
            j_11 = (j_11 + 1);
        };
        return length_10;
    }

    public static void main() {
        long[] example1_13 = new long[]{2, 5, 3, 7, 11, 8, 10, 13, 6};
        long[] example2_14 = new long[]{};
        long[] example3_15 = new long[]{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};
        long[] example4_16 = new long[]{5, 4, 3, 2, 1};
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example1_13)));
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example2_14)));
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example3_15)));
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example4_16)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
