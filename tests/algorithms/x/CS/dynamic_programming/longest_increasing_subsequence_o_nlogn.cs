// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649, 0162
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger ceil_index(BigInteger[] v_0, BigInteger left_1, BigInteger right_2, BigInteger key_3) {
        BigInteger l_4 = left_1;
        BigInteger r_5 = right_2;
        while (((r_5 - l_4) > 1)) {
            BigInteger middle_6 = ((l_4 + r_5) / 2);
            if ((_idx(v_0, (long)(middle_6)) >= key_3)) {
                r_5 = middle_6;
            } else {
                l_4 = middle_6;
            }
        };
        return r_5;
    }

    public static BigInteger longest_increasing_subsequence_length(BigInteger[] v_7) {
        if ((v_7.Length == 0)) {
            return 0;
        };
        BigInteger[] tail_8 = new BigInteger[]{};
        BigInteger i_9 = 0;
        while ((i_9 < v_7.Length)) {
            tail_8 = ((Func<BigInteger[]>)(() => { var _tmp = tail_8.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        BigInteger length_10 = 1;
        tail_8[(int)(0)] = _idx(v_7, (long)(0));
        BigInteger j_11 = 1;
        while ((j_11 < v_7.Length)) {
            if ((_idx(v_7, (long)(j_11)) < _idx(tail_8, (long)(0)))) {
                tail_8[(int)(0)] = _idx(v_7, (long)(j_11));
            } else if ((_idx(v_7, (long)(j_11)) > _idx(tail_8, (long)((length_10 - 1))))) {
                tail_8[(int)(length_10)] = _idx(v_7, (long)(j_11));
                length_10 = (length_10 + 1);
            } else {
                BigInteger idx_12 = Program.ceil_index(tail_8, -1, (length_10 - 1), _idx(v_7, (long)(j_11)));
                tail_8[(int)(idx_12)] = _idx(v_7, (long)(j_11));
            }
            j_11 = (j_11 + 1);
        };
        return length_10;
    }

    public static void main() {
        BigInteger[] example1_13 = new BigInteger[]{2, 5, 3, 7, 11, 8, 10, 13, 6};
        BigInteger[] example2_14 = new BigInteger[]{};
        BigInteger[] example3_15 = new BigInteger[]{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};
        BigInteger[] example4_16 = new BigInteger[]{5, 4, 3, 2, 1};
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example1_13)));
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example2_14)));
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example3_15)));
        Console.WriteLine(Program._fmtTop(Program.longest_increasing_subsequence_length(example4_16)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
