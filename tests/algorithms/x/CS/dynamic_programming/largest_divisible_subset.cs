// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] sort_list(long[] nums_0) {
        long[] arr_1 = nums_0;
        long i_2 = 1;
        while ((i_2 < arr_1.Length)) {
            long key_3 = arr_1[(int)(i_2)];
            long j_4 = (i_2 - 1);
            while (((j_4 >= 0) && (arr_1[(int)(j_4)] > key_3))) {
                arr_1[(j_4 + 1)] = arr_1[(int)(j_4)];
                j_4 = (j_4 - 1);
            }
            arr_1[(j_4 + 1)] = key_3;
            i_2 = (i_2 + 1);
        };
        return arr_1;
    }

    public static long[] largest_divisible_subset(long[] items_5) {
        if ((items_5.Length == 0)) {
            return new long[]{};
        };
        long[] nums_6 = Program.sort_list(items_5);
        long n_7 = nums_6.Length;
        long[] memo_8 = new long[]{};
        long[] prev_9 = new long[]{};
        long i_10 = 0;
        while ((i_10 < n_7)) {
            memo_8 = (Enumerable.ToArray(Enumerable.Append<long>(memo_8, 1)));
            prev_9 = (Enumerable.ToArray(Enumerable.Append<long>(prev_9, i_10)));
            i_10 = (i_10 + 1);
        };
        i_10 = 0;
        while ((i_10 < n_7)) {
            long j_11 = 0;
            while ((j_11 < i_10)) {
                if ((((nums_6[(int)(j_11)] == 0) || (_mod(nums_6[(int)(i_10)], nums_6[(int)(j_11)]) == 0)) && ((memo_8[(int)(j_11)] + 1) > memo_8[(int)(i_10)]))) {
                    memo_8[i_10] = (memo_8[(int)(j_11)] + 1);
                    prev_9[i_10] = j_11;
                }
                j_11 = (j_11 + 1);
            }
            i_10 = (i_10 + 1);
        };
        long ans_12 = (0 - 1);
        long last_index_13 = (0 - 1);
        i_10 = 0;
        while ((i_10 < n_7)) {
            if ((memo_8[(int)(i_10)] > ans_12)) {
                ans_12 = memo_8[(int)(i_10)];
                last_index_13 = i_10;
            }
            i_10 = (i_10 + 1);
        };
        if ((last_index_13 == (0 - 1))) {
            return new long[]{};
        };
        long[] result_14 = new long[]{nums_6[(int)(last_index_13)]};
        while ((prev_9[(int)(last_index_13)] != last_index_13)) {
            last_index_13 = prev_9[(int)(last_index_13)];
            result_14 = (Enumerable.ToArray(Enumerable.Append<long>(result_14, nums_6[(int)(last_index_13)])));
        };
        return result_14;
    }

    public static void main() {
        long[] items_15 = new long[]{1, 16, 7, 8, 4};
        long[] subset_16 = Program.largest_divisible_subset(items_15);
        Console.WriteLine(Program._fmtTop((((("The longest divisible subset of " + _fmtStr(items_15)) + " is ") + _fmtStr(subset_16)) + ".")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
