// Generated by Mochi 0.10.72 (commit ae593555b9) on 2025-08-25 08:33 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static BigInteger _mod(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] sort_list(BigInteger[] nums_0) {
        BigInteger[] arr_1 = nums_0;
        BigInteger i_2 = 1;
        while ((i_2 < arr_1.Length)) {
            BigInteger key_3 = _idx(arr_1, (long)(i_2));
            BigInteger j_4 = (i_2 - 1);
            while (((j_4 >= 0) && (_idx(arr_1, (long)(j_4)) > key_3))) {
                arr_1[(int)((j_4 + 1))] = _idx(arr_1, (long)(j_4));
                j_4 = (j_4 - 1);
            }
            arr_1[(int)((j_4 + 1))] = key_3;
            i_2 = (i_2 + 1);
        };
        return arr_1;
    }

    public static BigInteger[] largest_divisible_subset(BigInteger[] items_5) {
        if ((items_5.Length == 0)) {
            return new BigInteger[]{};
        };
        BigInteger[] nums_6 = Program.sort_list(items_5);
        long n_7 = nums_6.Length;
        BigInteger[] memo_8 = new BigInteger[]{};
        BigInteger[] prev_9 = new BigInteger[]{};
        BigInteger i_10 = 0;
        while ((i_10 < n_7)) {
            memo_8 = ((Func<BigInteger[]>)(() => { var _tmp = memo_8.Cast<BigInteger>().ToList(); _tmp.Add(1); return _tmp.ToArray(); }))();
            prev_9 = ((Func<BigInteger[]>)(() => { var _tmp = prev_9.Cast<BigInteger>().ToList(); _tmp.Add(i_10); return _tmp.ToArray(); }))();
            i_10 = (i_10 + 1);
        };
        i_10 = 0;
        while ((i_10 < n_7)) {
            BigInteger j_11 = 0;
            while ((j_11 < i_10)) {
                if ((((_idx(nums_6, (long)(j_11)) == 0) || (_mod(_idx(nums_6, (long)(i_10)), _idx(nums_6, (long)(j_11))) == 0)) && ((_idx(memo_8, (long)(j_11)) + 1) > _idx(memo_8, (long)(i_10))))) {
                    memo_8[(int)(i_10)] = (_idx(memo_8, (long)(j_11)) + 1);
                    prev_9[(int)(i_10)] = j_11;
                }
                j_11 = (j_11 + 1);
            }
            i_10 = (i_10 + 1);
        };
        BigInteger ans_12 = -1;
        BigInteger last_index_13 = -1;
        i_10 = 0;
        while ((i_10 < n_7)) {
            if ((_idx(memo_8, (long)(i_10)) > ans_12)) {
                ans_12 = _idx(memo_8, (long)(i_10));
                last_index_13 = i_10;
            }
            i_10 = (i_10 + 1);
        };
        if ((last_index_13 == -1)) {
            return new BigInteger[]{};
        };
        BigInteger[] result_14 = new BigInteger[]{_idx(nums_6, (long)(last_index_13))};
        while ((_idx(prev_9, (long)(last_index_13)) != last_index_13)) {
            last_index_13 = _idx(prev_9, (long)(last_index_13));
            result_14 = ((Func<BigInteger[]>)(() => { var _tmp = result_14.Cast<BigInteger>().ToList(); _tmp.Add(_idx(nums_6, (long)(last_index_13))); return _tmp.ToArray(); }))();
        };
        return result_14;
    }

    public static void main() {
        BigInteger[] items_15 = new BigInteger[]{1, 16, 7, 8, 4};
        BigInteger[] subset_16 = Program.largest_divisible_subset(items_15);
        Console.WriteLine(Program._fmtTop((((("The longest divisible subset of " + _fmtStr(items_15)) + " is ") + _fmtStr(subset_16)) + ".")));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
