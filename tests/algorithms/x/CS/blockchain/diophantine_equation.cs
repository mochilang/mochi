// Generated by Mochi 0.10.59 on 2025-08-06 21:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] s1_35 = Program.diophantine(10, 6, 14);
    public static long gcd(long a_0, long b_1) {
        long x_2 = ((a_0 < 0) ? -a_0 : a_0);
        long y_3 = ((b_1 < 0) ? -b_1 : b_1);
        while ((y_3 != 0)) {
            long t_4 = (x_2 % y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        return x_2;
    }

    public static long[] extended_gcd(long a_5, long b_6) {
        if ((b_6 == 0)) {
            return new long[]{a_5, 1, 0};
        };
        long[] res_7 = Program.extended_gcd(b_6, (a_5 % b_6));
        long d_8 = res_7[(int)(0)];
        long p_9 = res_7[(int)(1)];
        long q_10 = res_7[(int)(2)];
        long x_11 = q_10;
        long y_12 = (p_9 - (q_10 * (a_5 / b_6)));
        return new long[]{d_8, x_11, y_12};
    }

    public static long[] diophantine(long a_13, long b_14, long c_15) {
        long d_16 = Program.gcd(a_13, b_14);
        if (((c_15 % d_16) != 0)) {
            throw new Exception("No solution");
        };
        long[] eg_17 = Program.extended_gcd(a_13, b_14);
        long r_18 = (c_15 / d_16);
        long x_19 = (eg_17[(int)(1)] * r_18);
        long y_20 = (eg_17[(int)(2)] * r_18);
        return new long[]{x_19, y_20};
    }

    public static long[][] diophantine_all_soln(long a_21, long b_22, long c_23, long n_24) {
        long[] base_25 = Program.diophantine(a_21, b_22, c_23);
        long x0_26 = base_25[(int)(0)];
        long y0_27 = base_25[(int)(1)];
        long d_28 = Program.gcd(a_21, b_22);
        long p_29 = (a_21 / d_28);
        long q_30 = (b_22 / d_28);
        long[][] sols_31 = new long[][]{};
        long i_32 = 0;
        while ((i_32 < n_24)) {
            long x_33 = (x0_26 + (i_32 * q_30));
            long y_34 = (y0_27 - (i_32 * p_29));
            sols_31 = (Enumerable.ToArray(Enumerable.Append(sols_31, new long[]{x_33, y_34})));
            i_32 = (i_32 + 1);
        };
        return sols_31;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(s1_35)));
            long[][] sols_36 = Program.diophantine_all_soln(10, 6, 14, 4);
            long j_37 = 0;
            while ((j_37 < sols_36.Length)) {
                Console.WriteLine(Program._fmtTop(_fmtStr(sols_36[(int)(j_37)])));
                j_37 = (j_37 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.diophantine(391, 299, -69))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extended_gcd(10, 6))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.extended_gcd(7, 5))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
