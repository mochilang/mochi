// Generated by Mochi 0.10.66 (commit 62d16cb7a4) on 2025-08-16 09:24 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long INF_0 = 1000000000;
    static long[][] graph_26 = new long[][]{new long[]{0, 16, 13, 0, 0, 0}, new long[]{0, 0, 10, 12, 0, 0}, new long[]{0, 4, 0, 0, 14, 0}, new long[]{0, 0, 9, 0, 0, 20}, new long[]{0, 0, 0, 7, 0, 4}, new long[]{0, 0, 0, 0, 0, 0}};
    public static bool breadth_first_search(long[][] graph_1, long source_2, long sink_3, long[] parent_4) {
        bool[] visited_5 = new bool[]{};
        long i_6 = 0;
        while ((i_6 < graph_1.Length)) {
            visited_5 = ((Func<bool[]>)(() => { var _tmp = visited_5.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            i_6 = (i_6 + 1);
        };
        long[] queue_7 = new long[]{};
        queue_7 = ((Func<long[]>)(() => { var _tmp = queue_7.ToList(); _tmp.Add(source_2); return _tmp.ToArray(); }))();
        visited_5[(int)(source_2)] = true;
        long head_8 = 0;
        while ((head_8 < queue_7.Length)) {
            long u_9 = _idx(queue_7, head_8);
            head_8 = (head_8 + 1);
            long[] row_10 = _idx(graph_1, u_9);
            long ind_11 = 0;
            while ((ind_11 < row_10.Length)) {
                long capacity_12 = _idx(row_10, ind_11);
                if (((_idx(visited_5, ind_11) == false) && (capacity_12 > 0))) {
                    queue_7 = ((Func<long[]>)(() => { var _tmp = queue_7.ToList(); _tmp.Add(ind_11); return _tmp.ToArray(); }))();
                    visited_5[(int)(ind_11)] = true;
                    parent_4[(int)(ind_11)] = u_9;
                }
                ind_11 = (ind_11 + 1);
            }
        };
        return _idx(visited_5, sink_3);
    }

    public static long ford_fulkerson(long[][] graph_13, long source_14, long sink_15) {
        long[] parent_16 = new long[]{};
        long i_17 = 0;
        while ((i_17 < graph_13.Length)) {
            parent_16 = ((Func<long[]>)(() => { var _tmp = parent_16.ToList(); _tmp.Add(-1); return _tmp.ToArray(); }))();
            i_17 = (i_17 + 1);
        };
        long max_flow_18 = 0;
        while (Program.breadth_first_search(graph_13, source_14, sink_15, parent_16)) {
            long path_flow_19 = INF_0;
            long s_20 = sink_15;
            while ((s_20 != source_14)) {
                long prev_21 = _idx(parent_16, s_20);
                long cap_22 = _idx(_idx(graph_13, prev_21), s_20);
                if ((cap_22 < path_flow_19)) {
                    path_flow_19 = cap_22;
                }
                s_20 = prev_21;
            }
            max_flow_18 = (max_flow_18 + path_flow_19);
            long v_23 = sink_15;
            while ((v_23 != source_14)) {
                long u_24 = _idx(parent_16, v_23);
                _idx(graph_13, u_24)[(int)(v_23)] = (_idx(_idx(graph_13, u_24), v_23) - path_flow_19);
                _idx(graph_13, v_23)[(int)(u_24)] = (_idx(_idx(graph_13, v_23), u_24) + path_flow_19);
                v_23 = u_24;
            }
            long j_25 = 0;
            while ((j_25 < parent_16.Length)) {
                parent_16[(int)(j_25)] = -1;
                j_25 = (j_25 + 1);
            }
        };
        return max_flow_18;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.ford_fulkerson(graph_26, 0, 5))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
