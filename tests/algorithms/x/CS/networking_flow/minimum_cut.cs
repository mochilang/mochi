// Generated by Mochi 0.10.66 (commit 62d16cb7a4) on 2025-08-16 09:24 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[][] test_graph_27 = new long[][]{new long[]{0, 16, 13, 0, 0, 0}, new long[]{0, 0, 10, 12, 0, 0}, new long[]{0, 4, 0, 0, 14, 0}, new long[]{0, 0, 9, 0, 0, 20}, new long[]{0, 0, 0, 7, 0, 4}, new long[]{0, 0, 0, 0, 0, 0}};
    static long[][] result_28 = Program.mincut(test_graph_27, 0, 5);
    public static bool bfs(long[][] graph_0, long s_1, long t_2, long[] parent_3) {
        bool[] visited_4 = new bool[]{};
        long i_5 = 0;
        while ((i_5 < graph_0.Length)) {
            visited_4 = ((Func<bool[]>)(() => { var _tmp = visited_4.ToList(); _tmp.Add(false); return _tmp.ToArray(); }))();
            i_5 = (i_5 + 1);
        };
        long[] queue_6 = new long[]{s_1};
        long head_7 = 0;
        visited_4[(int)(s_1)] = true;
        while ((head_7 < queue_6.Length)) {
            long u_8 = _idx(queue_6, head_7);
            head_7 = (head_7 + 1);
            long ind_9 = 0;
            while ((ind_9 < _idx(graph_0, u_8).Length)) {
                if (((_idx(visited_4, ind_9) == false) && (_idx(_idx(graph_0, u_8), ind_9) > 0))) {
                    queue_6 = ((Func<long[]>)(() => { var _tmp = queue_6.ToList(); _tmp.Add(ind_9); return _tmp.ToArray(); }))();
                    visited_4[(int)(ind_9)] = true;
                    parent_3[(int)(ind_9)] = u_8;
                }
                ind_9 = (ind_9 + 1);
            }
        };
        return _idx(visited_4, t_2);
    }

    public static long[][] mincut(long[][] graph_10, long source_11, long sink_12) {
        long[][] g_13 = graph_10;
        long[] parent_14 = new long[]{};
        long i_15 = 0;
        while ((i_15 < g_13.Length)) {
            parent_14 = ((Func<long[]>)(() => { var _tmp = parent_14.ToList(); _tmp.Add(-1); return _tmp.ToArray(); }))();
            i_15 = (i_15 + 1);
        };
        long[][] temp_16 = new long[][]{};
        i_15 = 0;
        while ((i_15 < g_13.Length)) {
            long[] row_17 = new long[]{};
            long j_18 = 0;
            while ((j_18 < _idx(g_13, i_15).Length)) {
                row_17 = ((Func<long[]>)(() => { var _tmp = row_17.ToList(); _tmp.Add(_idx(_idx(g_13, i_15), j_18)); return _tmp.ToArray(); }))();
                j_18 = (j_18 + 1);
            }
            temp_16 = ((Func<long[][]>)(() => { var _tmp = temp_16.ToList(); _tmp.Add(row_17); return _tmp.ToArray(); }))();
            i_15 = (i_15 + 1);
        };
        while (Program.bfs(g_13, source_11, sink_12, parent_14)) {
            long path_flow_19 = 1000000000;
            long s_20 = sink_12;
            while ((s_20 != source_11)) {
                long p_21 = _idx(parent_14, s_20);
                long cap_22 = _idx(_idx(g_13, p_21), s_20);
                if ((cap_22 < path_flow_19)) {
                    path_flow_19 = cap_22;
                }
                s_20 = p_21;
            }
            long v_23 = sink_12;
            while ((v_23 != source_11)) {
                long u_24 = _idx(parent_14, v_23);
                _idx(g_13, u_24)[(int)(v_23)] = (_idx(_idx(g_13, u_24), v_23) - path_flow_19);
                _idx(g_13, v_23)[(int)(u_24)] = (_idx(_idx(g_13, v_23), u_24) + path_flow_19);
                v_23 = u_24;
            }
        };
        long[][] res_25 = new long[][]{};
        i_15 = 0;
        while ((i_15 < g_13.Length)) {
            long j_26 = 0;
            while ((j_26 < _idx(g_13, 0).Length)) {
                if (((_idx(_idx(g_13, i_15), j_26) == 0) && (_idx(_idx(temp_16, i_15), j_26) > 0))) {
                    res_25 = ((Func<long[][]>)(() => { var _tmp = res_25.ToList(); _tmp.Add(new long[]{i_15, j_26}); return _tmp.ToArray(); }))();
                }
                j_26 = (j_26 + 1);
            }
            i_15 = (i_15 + 1);
        };
        return res_25;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(result_28)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
