// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] test_graph_27 = new long[][]{new long[]{0, 16, 13, 0, 0, 0}, new long[]{0, 0, 10, 12, 0, 0}, new long[]{0, 4, 0, 0, 14, 0}, new long[]{0, 0, 9, 0, 0, 20}, new long[]{0, 0, 0, 7, 0, 4}, new long[]{0, 0, 0, 0, 0, 0}};
    static long[][] result_28 = Program.mincut(test_graph_27, 0, 5);
    public static bool bfs(long[][] graph_0, long s_1, long t_2, long[] parent_3) {
        bool[] visited_4 = new bool[]{};
        long i_5 = 0;
        while ((i_5 < graph_0.Length)) {
            visited_4 = (Enumerable.ToArray(Enumerable.Append<bool>(visited_4, false)));
            i_5 = (i_5 + 1);
        };
        long[] queue_6 = new long[]{s_1};
        long head_7 = 0;
        visited_4[s_1] = true;
        while ((head_7 < queue_6.Length)) {
            long u_8 = queue_6[(int)(head_7)];
            head_7 = (head_7 + 1);
            long ind_9 = 0;
            while ((ind_9 < graph_0[(int)(u_8)].Length)) {
                if (((visited_4[(int)(ind_9)] == false) && (graph_0[(int)(u_8)][(int)(ind_9)] > 0))) {
                    queue_6 = (Enumerable.ToArray(Enumerable.Append<long>(queue_6, ind_9)));
                    visited_4[ind_9] = true;
                    parent_3[ind_9] = u_8;
                }
                ind_9 = (ind_9 + 1);
            }
        };
        return visited_4[(int)(t_2)];
    }

    public static long[][] mincut(long[][] graph_10, long source_11, long sink_12) {
        long[][] g_13 = graph_10;
        long[] parent_14 = new long[]{};
        long i_15 = 0;
        while ((i_15 < g_13.Length)) {
            parent_14 = (Enumerable.ToArray(Enumerable.Append<long>(parent_14, -1)));
            i_15 = (i_15 + 1);
        };
        long[][] temp_16 = new long[][]{};
        i_15 = 0;
        while ((i_15 < g_13.Length)) {
            long[] row_17 = new long[]{};
            long j_18 = 0;
            while ((j_18 < g_13[(int)(i_15)].Length)) {
                row_17 = (Enumerable.ToArray(Enumerable.Append<long>(row_17, g_13[(int)(i_15)][(int)(j_18)])));
                j_18 = (j_18 + 1);
            }
            temp_16 = (Enumerable.ToArray(Enumerable.Append<long[]>(temp_16, row_17)));
            i_15 = (i_15 + 1);
        };
        while (Program.bfs(g_13, source_11, sink_12, parent_14)) {
            long path_flow_19 = 1000000000;
            long s_20 = sink_12;
            while ((s_20 != source_11)) {
                long p_21 = parent_14[(int)(s_20)];
                long cap_22 = g_13[(int)(p_21)][(int)(s_20)];
                if ((cap_22 < path_flow_19)) {
                    path_flow_19 = cap_22;
                }
                s_20 = p_21;
            }
            long v_23 = sink_12;
            while ((v_23 != source_11)) {
                long u_24 = parent_14[(int)(v_23)];
                g_13[(int)(u_24)][v_23] = (g_13[(int)(u_24)][(int)(v_23)] - path_flow_19);
                g_13[(int)(v_23)][u_24] = (g_13[(int)(v_23)][(int)(u_24)] + path_flow_19);
                v_23 = u_24;
            }
        };
        long[][] res_25 = new long[][]{};
        i_15 = 0;
        while ((i_15 < g_13.Length)) {
            long j_26 = 0;
            while ((j_26 < g_13[(int)(0)].Length)) {
                if (((g_13[(int)(i_15)][(int)(j_26)] == 0) && (temp_16[(int)(i_15)][(int)(j_26)] > 0))) {
                    res_25 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_25, new long[]{i_15, j_26})));
                }
                j_26 = (j_26 + 1);
            }
            i_15 = (i_15 + 1);
        };
        return res_25;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(result_28)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
