// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[][] retroactive_resolution(double[][] coefficients_0, double[][] vector_1) {
        long rows_2 = coefficients_0.Length;
        double[][] x_3 = new double[][]{};
        long i_4 = 0;
        while ((i_4 < rows_2)) {
            double[] inner_5 = new double[]{};
            inner_5 = (Enumerable.ToArray(Enumerable.Append<double>(inner_5, 0.0)));
            x_3 = (Enumerable.ToArray(Enumerable.Append<double[]>(x_3, inner_5)));
            i_4 = (i_4 + 1);
        };
        long r_6 = (rows_2 - 1);
        while ((r_6 >= 0)) {
            double total_7 = 0.0;
            long c_8 = (r_6 + 1);
            while ((c_8 < rows_2)) {
                total_7 = (total_7 + (coefficients_0[(int)(r_6)][(int)(c_8)] * x_3[(int)(c_8)][(int)(0)]));
                c_8 = (c_8 + 1);
            }
            x_3[(int)(r_6)][0] = ((vector_1[(int)(r_6)][(int)(0)] - total_7) / coefficients_0[(int)(r_6)][(int)(r_6)]);
            r_6 = (r_6 - 1);
        };
        return x_3;
    }

    public static double[][] gaussian_elimination(double[][] coefficients_9, double[][] vector_10) {
        long rows_11 = coefficients_9.Length;
        long columns_12 = coefficients_9[(int)(0)].Length;
        if ((rows_11 != columns_12)) {
            return new double[][]{};
        };
        double[][] augmented_13 = new double[][]{};
        long i_14 = 0;
        while ((i_14 < rows_11)) {
            double[] row_15 = new double[]{};
            long j_16 = 0;
            while ((j_16 < columns_12)) {
                row_15 = (Enumerable.ToArray(Enumerable.Append<double>(row_15, coefficients_9[(int)(i_14)][(int)(j_16)])));
                j_16 = (j_16 + 1);
            }
            row_15 = (Enumerable.ToArray(Enumerable.Append<double>(row_15, vector_10[(int)(i_14)][(int)(0)])));
            augmented_13 = (Enumerable.ToArray(Enumerable.Append<double[]>(augmented_13, row_15)));
            i_14 = (i_14 + 1);
        };
        long row_idx_17 = 0;
        while ((row_idx_17 < (rows_11 - 1))) {
            double pivot_18 = augmented_13[(int)(row_idx_17)][(int)(row_idx_17)];
            long col_19 = (row_idx_17 + 1);
            while ((col_19 < rows_11)) {
                double factor_20 = (augmented_13[(int)(col_19)][(int)(row_idx_17)] / pivot_18);
                long k_21 = row_idx_17;
                while ((k_21 < (columns_12 + 1))) {
                    augmented_13[(int)(col_19)][k_21] = (augmented_13[(int)(col_19)][(int)(k_21)] - (factor_20 * augmented_13[(int)(row_idx_17)][(int)(k_21)]));
                    k_21 = (k_21 + 1);
                }
                col_19 = (col_19 + 1);
            }
            row_idx_17 = (row_idx_17 + 1);
        };
        double[][] coeffs_22 = new double[][]{};
        double[][] vec_23 = new double[][]{};
        long r_24 = 0;
        while ((r_24 < rows_11)) {
            double[] row_25 = new double[]{};
            long c_26 = 0;
            while ((c_26 < columns_12)) {
                row_25 = (Enumerable.ToArray(Enumerable.Append<double>(row_25, augmented_13[(int)(r_24)][(int)(c_26)])));
                c_26 = (c_26 + 1);
            }
            coeffs_22 = (Enumerable.ToArray(Enumerable.Append<double[]>(coeffs_22, row_25)));
            vec_23 = (Enumerable.ToArray(Enumerable.Append<double[]>(vec_23, new double[]{augmented_13[(int)(r_24)][(int)(columns_12)]})));
            r_24 = (r_24 + 1);
        };
        double[][] x_27 = Program.retroactive_resolution(coeffs_22, vec_23);
        return x_27;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.gaussian_elimination(new double[][]{new double[]{1.0, -4.0, -2.0}, new double[]{5.0, 2.0, -2.0}, new double[]{1.0, -1.0, 0.0}}, new double[][]{new double[]{-2.0}, new double[]{-3.0}, new double[]{4.0}})));
            Console.WriteLine(Program._fmtTop(Program.gaussian_elimination(new double[][]{new double[]{1.0, 2.0}, new double[]{5.0, 2.0}}, new double[][]{new double[]{5.0}, new double[]{5.0}})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
