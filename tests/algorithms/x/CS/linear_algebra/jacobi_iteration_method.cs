// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] coefficient_19 = new double[][]{new double[]{4.0, 1.0, 1.0}, new double[]{1.0, 5.0, 2.0}, new double[]{1.0, 2.0, 4.0}};
    static double[] constant_20 = new double[]{2.0, -6.0, -4.0};
    static double[] init_val_21 = new double[]{0.5, -0.5, -0.5};
    static long iterations_22 = 3;
    static double[] result_23 = Program.jacobi_iteration_method(coefficient_19, constant_20, init_val_21, iterations_22);
    public static double absf(double x_0) {
        return ((x_0 < 0.0) ? -x_0 : x_0);
    }

    public static bool strictly_diagonally_dominant(double[][] matrix_1) {
        long n_2 = matrix_1.Length;
        long i_3 = 0;
        while ((i_3 < n_2)) {
            double sum_4 = 0.0;
            long j_5 = 0;
            while ((j_5 < n_2)) {
                if ((i_3 != j_5)) {
                    sum_4 = (sum_4 + Program.absf(matrix_1[(int)(i_3)][(int)(j_5)]));
                }
                j_5 = (j_5 + 1);
            }
            if ((Program.absf(matrix_1[(int)(i_3)][(int)(i_3)]) <= sum_4)) {
                throw new Exception("Coefficient matrix is not strictly diagonally dominant");
            }
            i_3 = (i_3 + 1);
        };
        return true;
    }

    public static double[] jacobi_iteration_method(double[][] coefficient_6, double[] constant_7, double[] init_val_8, long iterations_9) {
        long n_10 = coefficient_6.Length;
        if ((n_10 == 0)) {
            throw new Exception("Coefficient matrix cannot be empty");
        };
        if ((constant_7.Length != n_10)) {
            throw new Exception("Constant vector length must equal number of rows in coefficient matrix");
        };
        if ((init_val_8.Length != n_10)) {
            throw new Exception("Initial values count must match matrix size");
        };
        long r_11 = 0;
        while ((r_11 < n_10)) {
            if ((coefficient_6[(int)(r_11)].Length != n_10)) {
                throw new Exception("Coefficient matrix must be square");
            }
            r_11 = (r_11 + 1);
        };
        if ((iterations_9 <= 0)) {
            throw new Exception("Iterations must be at least 1");
        };
        Program.strictly_diagonally_dominant(coefficient_6);
        double[] x_12 = init_val_8;
        long k_13 = 0;
        while ((k_13 < iterations_9)) {
            double[] new_x_14 = new double[]{};
            long i_15 = 0;
            while ((i_15 < n_10)) {
                double sum_16 = 0.0;
                long j_17 = 0;
                while ((j_17 < n_10)) {
                    if ((i_15 != j_17)) {
                        sum_16 = (sum_16 + (coefficient_6[(int)(i_15)][(int)(j_17)] * x_12[(int)(j_17)]));
                    }
                    j_17 = (j_17 + 1);
                }
                double value_18 = ((constant_7[(int)(i_15)] - sum_16) / coefficient_6[(int)(i_15)][(int)(i_15)]);
                new_x_14 = (Enumerable.ToArray(Enumerable.Append<double>(new_x_14, value_18)));
                i_15 = (i_15 + 1);
            }
            x_12 = new_x_14;
            k_13 = (k_13 + 1);
        };
        return x_12;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(result_23));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
