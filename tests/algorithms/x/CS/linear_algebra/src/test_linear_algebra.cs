// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] vx_135 = new long[]{1, 2, 3};
    public static string int_to_string(long n_0) {
        if ((n_0 == 0)) {
            return "0";
        };
        long num_1 = n_0;
        bool neg_2 = false;
        if ((num_1 < 0)) {
            neg_2 = true;
            num_1 = -num_1;
        };
        string res_3 = "";
        while ((num_1 > 0)) {
            long digit_4 = _mod(num_1, 10);
            string ch_5 = _substr("0123456789", digit_4, (digit_4 + 1));
            res_3 = (ch_5 + res_3);
            num_1 = (num_1 / 10);
        };
        if (neg_2) {
            res_3 = ("-" + res_3);
        };
        return res_3;
    }

    public static string float_to_string(double x_6, long dec_7) {
        bool neg_8 = false;
        double num_9 = x_6;
        if ((num_9 < 0.0)) {
            neg_8 = true;
            num_9 = -num_9;
        };
        long int_part_10 = (long)(num_9);
        string res_11 = Program.int_to_string(int_part_10);
        if ((dec_7 > 0)) {
            res_11 = (res_11 + ".");
            double frac_12 = (num_9 - Convert.ToDouble(int_part_10));
            long i_13 = 0;
            while ((i_13 < dec_7)) {
                frac_12 = (frac_12 * 10.0);
                long digit_14 = (long)(frac_12);
                res_11 = (res_11 + _substr("0123456789", digit_14, (digit_14 + 1)));
                frac_12 = (frac_12 - Convert.ToDouble(digit_14));
                i_13 = (i_13 + 1);
            }
        };
        if (neg_8) {
            res_11 = ("-" + res_11);
        };
        return res_11;
    }

    public static long vector_component(long[] v_15, long i_16) {
        return v_15[(int)(i_16)];
    }

    public static string vector_str_int(long[] v_17) {
        string s_18 = "(";
        long i_19 = 0;
        while ((i_19 < v_17.Length)) {
            s_18 = (s_18 + Program.int_to_string(v_17[(int)(i_19)]));
            if (((i_19 + 1) < v_17.Length)) {
                s_18 = (s_18 + ",");
            }
            i_19 = (i_19 + 1);
        };
        s_18 = (s_18 + ")");
        return s_18;
    }

    public static string vector_str_float(double[] v_20, long dec_21) {
        string s_22 = "(";
        long i_23 = 0;
        while ((i_23 < v_20.Length)) {
            s_22 = (s_22 + Program.float_to_string(v_20[(int)(i_23)], dec_21));
            if (((i_23 + 1) < v_20.Length)) {
                s_22 = (s_22 + ",");
            }
            i_23 = (i_23 + 1);
        };
        s_22 = (s_22 + ")");
        return s_22;
    }

    public static long[] vector_add(long[] a_24, long[] b_25) {
        long[] res_26 = new long[]{};
        long i_27 = 0;
        while ((i_27 < a_24.Length)) {
            res_26 = (Enumerable.ToArray(Enumerable.Append<long>(res_26, (a_24[(int)(i_27)] + b_25[(int)(i_27)]))));
            i_27 = (i_27 + 1);
        };
        return res_26;
    }

    public static long[] vector_sub(long[] a_28, long[] b_29) {
        long[] res_30 = new long[]{};
        long i_31 = 0;
        while ((i_31 < a_28.Length)) {
            res_30 = (Enumerable.ToArray(Enumerable.Append<long>(res_30, (a_28[(int)(i_31)] - b_29[(int)(i_31)]))));
            i_31 = (i_31 + 1);
        };
        return res_30;
    }

    public static double[] vector_scalar_mul(long[] v_32, double s_33) {
        double[] res_34 = new double[]{};
        long i_35 = 0;
        while ((i_35 < v_32.Length)) {
            res_34 = (Enumerable.ToArray(Enumerable.Append<double>(res_34, (Convert.ToDouble(v_32[(int)(i_35)]) * s_33))));
            i_35 = (i_35 + 1);
        };
        return res_34;
    }

    public static long vector_dot(long[] a_36, long[] b_37) {
        long sum_38 = 0;
        long i_39 = 0;
        while ((i_39 < a_36.Length)) {
            sum_38 = (sum_38 + (a_36[(int)(i_39)] * b_37[(int)(i_39)]));
            i_39 = (i_39 + 1);
        };
        return sum_38;
    }

    public static double sqrt_newton(double x_40) {
        if ((x_40 == 0.0)) {
            return 0.0;
        };
        double low_41 = 0.0;
        double high_42 = x_40;
        if ((x_40 < 1.0)) {
            high_42 = 1.0;
        };
        double mid_43 = 0.0;
        long i_44 = 0;
        while ((i_44 < 40)) {
            mid_43 = ((low_41 + high_42) / 2.0);
            if (((mid_43 * mid_43) > x_40)) {
                high_42 = mid_43;
            } else {
                low_41 = mid_43;
            }
            i_44 = (i_44 + 1);
        };
        return mid_43;
    }

    public static double euclidean_length(long[] v_45) {
        double sum_46 = 0.0;
        long i_47 = 0;
        while ((i_47 < v_45.Length)) {
            double val_48 = Convert.ToDouble(v_45[(int)(i_47)]);
            sum_46 = (sum_46 + (val_48 * val_48));
            i_47 = (i_47 + 1);
        };
        return Program.sqrt_newton(sum_46);
    }

    public static long[] zero_vector(long n_49) {
        long[] v_50 = new long[]{};
        long i_51 = 0;
        while ((i_51 < n_49)) {
            v_50 = (Enumerable.ToArray(Enumerable.Append<long>(v_50, 0)));
            i_51 = (i_51 + 1);
        };
        return v_50;
    }

    public static long[] unit_basis_vector(long n_52, long idx_53) {
        long[] v_54 = Program.zero_vector(n_52);
        v_54[idx_53] = 1;
        return v_54;
    }

    public static long[] axpy(long a_55, long[] x_56, long[] y_57) {
        long[] res_58 = new long[]{};
        long i_59 = 0;
        while ((i_59 < x_56.Length)) {
            res_58 = (Enumerable.ToArray(Enumerable.Append<long>(res_58, ((a_55 * x_56[(int)(i_59)]) + y_57[(int)(i_59)]))));
            i_59 = (i_59 + 1);
        };
        return res_58;
    }

    public static long[] copy_vector(long[] x_60) {
        long[] res_61 = new long[]{};
        long i_62 = 0;
        while ((i_62 < x_60.Length)) {
            res_61 = (Enumerable.ToArray(Enumerable.Append<long>(res_61, x_60[(int)(i_62)])));
            i_62 = (i_62 + 1);
        };
        return res_61;
    }

    public static void change_component(long[] v_63, long idx_64, long val_65) {
        v_63[idx_64] = val_65;
    }

    public static string matrix_str(long[][] m_66) {
        string s_67 = "";
        long i_68 = 0;
        while ((i_68 < m_66.Length)) {
            s_67 = (s_67 + "|");
            long j_69 = 0;
            while ((j_69 < m_66[(int)(0)].Length)) {
                s_67 = (s_67 + Program.int_to_string(m_66[(int)(i_68)][(int)(j_69)]));
                if (((j_69 + 1) < m_66[(int)(0)].Length)) {
                    s_67 = (s_67 + ",");
                }
                j_69 = (j_69 + 1);
            }
            s_67 = (s_67 + "|\n");
            i_68 = (i_68 + 1);
        };
        return s_67;
    }

    public static long[][] submatrix(long[][] m_70, long row_71, long col_72) {
        long[][] res_73 = new long[][]{};
        long i_74 = 0;
        while ((i_74 < m_70.Length)) {
            if ((i_74 != row_71)) {
                long[] r_75 = new long[]{};
                long j_76 = 0;
                while ((j_76 < m_70[(int)(0)].Length)) {
                    if ((j_76 != col_72)) {
                        r_75 = (Enumerable.ToArray(Enumerable.Append<long>(r_75, m_70[(int)(i_74)][(int)(j_76)])));
                    }
                    j_76 = (j_76 + 1);
                }
                res_73 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_73, r_75)));
            }
            i_74 = (i_74 + 1);
        };
        return res_73;
    }

    public static long determinant(long[][] m_77) {
        long n_78 = m_77.Length;
        if ((n_78 == 1)) {
            return m_77[(int)(0)][(int)(0)];
        };
        if ((n_78 == 2)) {
            return ((m_77[(int)(0)][(int)(0)] * m_77[(int)(1)][(int)(1)]) - (m_77[(int)(0)][(int)(1)] * m_77[(int)(1)][(int)(0)]));
        };
        long det_79 = 0;
        long c_80 = 0;
        while ((c_80 < n_78)) {
            long[][] sub_81 = Program.submatrix(m_77, 0, c_80);
            long sign_82 = 1;
            if ((_mod(c_80, 2) == 1)) {
                sign_82 = -1;
            }
            det_79 = (det_79 + ((sign_82 * m_77[(int)(0)][(int)(c_80)]) * Program.determinant(sub_81)));
            c_80 = (c_80 + 1);
        };
        return det_79;
    }

    public static long matrix_minor(long[][] m_83, long row_84, long col_85) {
        return Program.determinant(Program.submatrix(m_83, row_84, col_85));
    }

    public static long matrix_cofactor(long[][] m_86, long row_87, long col_88) {
        long sign_89 = 1;
        if ((_mod((row_87 + col_88), 2) == 1)) {
            sign_89 = -1;
        };
        return (sign_89 * Program.matrix_minor(m_86, row_87, col_88));
    }

    public static long[] matrix_mul_vector(long[][] m_90, long[] v_91) {
        long[] res_92 = new long[]{};
        long i_93 = 0;
        while ((i_93 < m_90.Length)) {
            long sum_94 = 0;
            long j_95 = 0;
            while ((j_95 < m_90[(int)(0)].Length)) {
                sum_94 = (sum_94 + (m_90[(int)(i_93)][(int)(j_95)] * v_91[(int)(j_95)]));
                j_95 = (j_95 + 1);
            }
            res_92 = (Enumerable.ToArray(Enumerable.Append<long>(res_92, sum_94)));
            i_93 = (i_93 + 1);
        };
        return res_92;
    }

    public static long[][] matrix_mul_scalar(long[][] m_96, long s_97) {
        long[][] res_98 = new long[][]{};
        long i_99 = 0;
        while ((i_99 < m_96.Length)) {
            long[] row_100 = new long[]{};
            long j_101 = 0;
            while ((j_101 < m_96[(int)(0)].Length)) {
                row_100 = (Enumerable.ToArray(Enumerable.Append<long>(row_100, (m_96[(int)(i_99)][(int)(j_101)] * s_97))));
                j_101 = (j_101 + 1);
            }
            res_98 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_98, row_100)));
            i_99 = (i_99 + 1);
        };
        return res_98;
    }

    public static void matrix_change_component(long[][] m_102, long i_103, long j_104, long val_105) {
        m_102[(int)(i_103)][j_104] = val_105;
    }

    public static long matrix_component(long[][] m_106, long i_107, long j_108) {
        return m_106[(int)(i_107)][(int)(j_108)];
    }

    public static long[][] matrix_add(long[][] a_109, long[][] b_110) {
        long[][] res_111 = new long[][]{};
        long i_112 = 0;
        while ((i_112 < a_109.Length)) {
            long[] row_113 = new long[]{};
            long j_114 = 0;
            while ((j_114 < a_109[(int)(0)].Length)) {
                row_113 = (Enumerable.ToArray(Enumerable.Append<long>(row_113, (a_109[(int)(i_112)][(int)(j_114)] + b_110[(int)(i_112)][(int)(j_114)]))));
                j_114 = (j_114 + 1);
            }
            res_111 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_111, row_113)));
            i_112 = (i_112 + 1);
        };
        return res_111;
    }

    public static long[][] matrix_sub(long[][] a_115, long[][] b_116) {
        long[][] res_117 = new long[][]{};
        long i_118 = 0;
        while ((i_118 < a_115.Length)) {
            long[] row_119 = new long[]{};
            long j_120 = 0;
            while ((j_120 < a_115[(int)(0)].Length)) {
                row_119 = (Enumerable.ToArray(Enumerable.Append<long>(row_119, (a_115[(int)(i_118)][(int)(j_120)] - b_116[(int)(i_118)][(int)(j_120)]))));
                j_120 = (j_120 + 1);
            }
            res_117 = (Enumerable.ToArray(Enumerable.Append<long[]>(res_117, row_119)));
            i_118 = (i_118 + 1);
        };
        return res_117;
    }

    public static long[][] square_zero_matrix(long n_121) {
        long[][] m_122 = new long[][]{};
        long i_123 = 0;
        while ((i_123 < n_121)) {
            m_122 = (Enumerable.ToArray(Enumerable.Append<long[]>(m_122, Program.zero_vector(n_121))));
            i_123 = (i_123 + 1);
        };
        return m_122;
    }

    public static void assert_int(string name_124, long actual_125, long expected_126) {
        if ((actual_125 == expected_126)) {
            Console.WriteLine(Program._fmtTop((name_124 + " ok")));
        } else {
            Console.WriteLine(Program._fmtTop(((((name_124 + " fail ") + Program.int_to_string(actual_125)) + " != ") + Program.int_to_string(expected_126))));
        };
    }

    public static void assert_str(string name_127, string actual_128, string expected_129) {
        if ((actual_128 == expected_129)) {
            Console.WriteLine(Program._fmtTop((name_127 + " ok")));
        } else {
            Console.WriteLine(Program._fmtTop((name_127 + " fail")));
            Console.WriteLine(Program._fmtTop(actual_128));
            Console.WriteLine(Program._fmtTop(expected_129));
        };
    }

    public static void assert_float(string name_130, double actual_131, double expected_132, double eps_133) {
        double diff_134 = (actual_131 - expected_132);
        if ((diff_134 < 0.0)) {
            diff_134 = -diff_134;
        };
        if ((diff_134 <= eps_133)) {
            Console.WriteLine(Program._fmtTop((name_130 + " ok")));
        } else {
            Console.WriteLine(Program._fmtTop((name_130 + " fail")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.assert_int("component0", Program.vector_component(vx_135, 0), 1);
            Program.assert_int("component2", Program.vector_component(vx_135, 2), 3);
            long[] vs_136 = new long[]{0, 0, 0, 0, 0, 1};
            Program.assert_str("str_vector", Program.vector_str_int(vs_136), "(0,0,0,0,0,1)");
            long[] vsize_137 = new long[]{1, 2, 3, 4};
            Program.assert_int("size", vsize_137.Length, 4);
            long[] va_138 = new long[]{1, 2, 3};
            long[] vb_139 = new long[]{1, 1, 1};
            long[] vsum_140 = Program.vector_add(va_138, vb_139);
            Program.assert_int("add0", Program.vector_component(vsum_140, 0), 2);
            Program.assert_int("add1", Program.vector_component(vsum_140, 1), 3);
            Program.assert_int("add2", Program.vector_component(vsum_140, 2), 4);
            long[] vsub_141 = Program.vector_sub(va_138, vb_139);
            Program.assert_int("sub0", Program.vector_component(vsub_141, 0), 0);
            Program.assert_int("sub1", Program.vector_component(vsub_141, 1), 1);
            Program.assert_int("sub2", Program.vector_component(vsub_141, 2), 2);
            double[] vmul_142 = Program.vector_scalar_mul(va_138, 3.0);
            Program.assert_str("scalar_mul", Program.vector_str_float(vmul_142, 1), "(3.0,6.0,9.0)");
            Program.assert_int("dot_product", Program.vector_dot(new long[]{2, -1, 4}, new long[]{1, -2, -1}), 0);
            long[] zvec_143 = Program.zero_vector(10);
            string zstr_144 = Program.vector_str_int(zvec_143);
            long zcount_145 = 0;
            long zi_146 = 0;
            while ((zi_146 < zstr_144.Length)) {
                if ((_substr(zstr_144, zi_146, (zi_146 + 1)) == "0")) {
                    zcount_145 = (zcount_145 + 1);
                }
                zi_146 = (zi_146 + 1);
            }
            Program.assert_int("zero_vector", zcount_145, 10);
            Program.assert_str("unit_basis", Program.vector_str_int(Program.unit_basis_vector(3, 1)), "(0,1,0)");
            Program.assert_str("axpy", Program.vector_str_int(Program.axpy(2, new long[]{1, 2, 3}, new long[]{1, 0, 1})), "(3,4,7)");
            long[] vcopy_147 = Program.copy_vector(new long[]{1, 0, 0, 0, 0, 0});
            Program.assert_str("copy", Program.vector_str_int(vcopy_147), "(1,0,0,0,0,0)");
            long[] vchange_148 = new long[]{1, 0, 0};
            Program.change_component(vchange_148, 0, 0);
            Program.change_component(vchange_148, 1, 1);
            Program.assert_str("change_component", Program.vector_str_int(vchange_148), "(0,1,0)");
            long[][] ma_149 = new long[][]{new long[]{1, 2, 3}, new long[]{2, 4, 5}, new long[]{6, 7, 8}};
            Program.assert_str("matrix_str", Program.matrix_str(ma_149), "|1,2,3|\n|2,4,5|\n|6,7,8|\n");
            Program.assert_int("determinant", Program.determinant(ma_149), -5);
            long[][] mb_150 = new long[][]{new long[]{1, 2, 3}, new long[]{4, 5, 6}, new long[]{7, 8, 9}};
            long[] mv_151 = Program.matrix_mul_vector(mb_150, new long[]{1, 2, 3});
            Program.assert_str("matrix_vec_mul", Program.vector_str_int(mv_151), "(14,32,50)");
            long[][] msc_152 = Program.matrix_mul_scalar(mb_150, 2);
            Program.assert_str("matrix_scalar_mul", Program.matrix_str(msc_152), "|2,4,6|\n|8,10,12|\n|14,16,18|\n");
            long[][] mc_153 = new long[][]{new long[]{1, 2, 3}, new long[]{2, 4, 5}, new long[]{6, 7, 8}};
            Program.matrix_change_component(mc_153, 0, 2, 5);
            Program.assert_str("change_component_matrix", Program.matrix_str(mc_153), "|1,2,5|\n|2,4,5|\n|6,7,8|\n");
            Program.assert_int("matrix_component", Program.matrix_component(mc_153, 2, 1), 7);
            long[][] madd_154 = Program.matrix_add(new long[][]{new long[]{1, 2, 3}, new long[]{2, 4, 5}, new long[]{6, 7, 8}}, new long[][]{new long[]{1, 2, 7}, new long[]{2, 4, 5}, new long[]{6, 7, 10}});
            Program.assert_str("matrix_add", Program.matrix_str(madd_154), "|2,4,10|\n|4,8,10|\n|12,14,18|\n");
            long[][] msub_155 = Program.matrix_sub(new long[][]{new long[]{1, 2, 3}, new long[]{2, 4, 5}, new long[]{6, 7, 8}}, new long[][]{new long[]{1, 2, 7}, new long[]{2, 4, 5}, new long[]{6, 7, 10}});
            Program.assert_str("matrix_sub", Program.matrix_str(msub_155), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n");
            long[][] mzero_156 = Program.square_zero_matrix(5);
            Program.assert_str("square_zero_matrix", Program.matrix_str(mzero_156), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n");
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
