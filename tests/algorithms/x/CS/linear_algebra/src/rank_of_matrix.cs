// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static long rank_of_matrix(double[][] matrix_0) {
        long rows_1 = matrix_0.Length;
        if ((rows_1 == 0)) {
            return 0;
        };
        long columns_2 = ((matrix_0[(int)(0)].Length > 0) ? matrix_0[(int)(0)].Length : 0);
        long rank_3 = ((rows_1 < columns_2) ? rows_1 : columns_2);
        long row_4 = 0;
        while ((row_4 < rank_3)) {
            if ((matrix_0[(int)(row_4)][(int)(row_4)] != 0.0)) {
                long col_5 = (row_4 + 1);
                while ((col_5 < rows_1)) {
                    double mult_6 = (matrix_0[(int)(col_5)][(int)(row_4)] / matrix_0[(int)(row_4)][(int)(row_4)]);
                    long i_7 = row_4;
                    while ((i_7 < columns_2)) {
                        matrix_0[(int)(col_5)][i_7] = (matrix_0[(int)(col_5)][(int)(i_7)] - (mult_6 * matrix_0[(int)(row_4)][(int)(i_7)]));
                        i_7 = (i_7 + 1);
                    }
                    col_5 = (col_5 + 1);
                }
            } else {
                bool reduce_8 = true;
                long i_9 = (row_4 + 1);
                while ((i_9 < rows_1)) {
                    if ((matrix_0[(int)(i_9)][(int)(row_4)] != 0.0)) {
                        double[] temp_10 = matrix_0[(int)(row_4)];
                        matrix_0[row_4] = matrix_0[(int)(i_9)];
                        matrix_0[i_9] = temp_10;
                        reduce_8 = false;
                        break;
                    }
                    i_9 = (i_9 + 1);
                }
                if (reduce_8) {
                    rank_3 = (rank_3 - 1);
                    long j_11 = 0;
                    while ((j_11 < rows_1)) {
                        matrix_0[(int)(j_11)][row_4] = matrix_0[(int)(j_11)][(int)(rank_3)];
                        j_11 = (j_11 + 1);
                    }
                }
                row_4 = (row_4 - 1);
            }
            row_4 = (row_4 + 1);
        };
        return rank_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
