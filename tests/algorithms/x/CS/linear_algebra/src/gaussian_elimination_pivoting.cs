// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] example_matrix_21 = new double[][]{new double[]{5.0, -5.0, -3.0, 4.0, -11.0}, new double[]{1.0, -4.0, 6.0, -4.0, -10.0}, new double[]{-2.0, -5.0, 4.0, -5.0, -12.0}, new double[]{-3.0, -3.0, 5.0, -5.0, 8.0}};
    public static void panic(string msg_0) {
        Console.WriteLine(Program._fmtTop(msg_0));
    }

    public static double abs_float(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double[][] copy_matrix(double[][] src_2) {
        double[][] res_3 = new double[][]{};
        long i_4 = 0;
        while ((i_4 < src_2.Length)) {
            double[] row_src_5 = src_2[(int)(i_4)];
            double[] row_6 = new double[]{};
            long j_7 = 0;
            while ((j_7 < row_src_5.Length)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<double>(row_6, row_src_5[(int)(j_7)])));
                j_7 = (j_7 + 1);
            }
            res_3 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_3, row_6)));
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static double[] solve_linear_system(double[][] matrix_8) {
        double[][] ab_9 = Program.copy_matrix(matrix_8);
        long num_rows_10 = ab_9.Length;
        long num_cols_11 = (ab_9[(int)(0)].Length - 1);
        if ((num_rows_10 != num_cols_11)) {
            Program.panic("Matrix is not square");
            return new double[]{};
        };
        long column_num_12 = 0;
        while ((column_num_12 < num_rows_10)) {
            long i_13 = column_num_12;
            while ((i_13 < num_cols_11)) {
                if ((Program.abs_float(ab_9[(int)(i_13)][(int)(column_num_12)]) > Program.abs_float(ab_9[(int)(column_num_12)][(int)(column_num_12)]))) {
                    double[] temp_14 = ab_9[(int)(column_num_12)];
                    ab_9[column_num_12] = ab_9[(int)(i_13)];
                    ab_9[i_13] = temp_14;
                }
                i_13 = (i_13 + 1);
            }
            if ((Program.abs_float(ab_9[(int)(column_num_12)][(int)(column_num_12)]) < 1e-08)) {
                Program.panic("Matrix is singular");
                return new double[]{};
            }
            if ((column_num_12 != 0)) {
                i_13 = column_num_12;
                while ((i_13 < num_rows_10)) {
                    double factor_15 = (ab_9[(int)(i_13)][(int)((column_num_12 - 1))] / ab_9[(int)((column_num_12 - 1))][(int)((column_num_12 - 1))]);
                    long j_16 = 0;
                    while ((j_16 < ab_9[(int)(i_13)].Length)) {
                        ab_9[(int)(i_13)][j_16] = (ab_9[(int)(i_13)][(int)(j_16)] - (factor_15 * ab_9[(int)((column_num_12 - 1))][(int)(j_16)]));
                        j_16 = (j_16 + 1);
                    }
                    i_13 = (i_13 + 1);
                }
            }
            column_num_12 = (column_num_12 + 1);
        };
        double[] x_lst_17 = new double[]{};
        long t_18 = 0;
        while ((t_18 < num_rows_10)) {
            x_lst_17 = (Enumerable.ToArray(Enumerable.Append<double>(x_lst_17, 0.0)));
            t_18 = (t_18 + 1);
        };
        column_num_12 = (num_rows_10 - 1);
        while ((column_num_12 >= 0)) {
            double x_19 = (ab_9[(int)(column_num_12)][(int)(num_cols_11)] / ab_9[(int)(column_num_12)][(int)(column_num_12)]);
            x_lst_17[column_num_12] = x_19;
            long i_20 = (column_num_12 - 1);
            while ((i_20 >= 0)) {
                ab_9[(int)(i_20)][num_cols_11] = (ab_9[(int)(i_20)][(int)(num_cols_11)] - (ab_9[(int)(i_20)][(int)(column_num_12)] * x_19));
                i_20 = (i_20 - 1);
            }
            column_num_12 = (column_num_12 - 1);
        };
        return x_lst_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Matrix:"));
            Console.WriteLine(Program._fmtTop(_fmtStr(example_matrix_21)));
            double[] solution_22 = Program.solve_linear_system(example_matrix_21);
            Console.WriteLine(Program._fmtTop(_fmtStr(solution_22)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
