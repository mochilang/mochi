// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class OptionMatrix {
    public double[][] value;
    public bool ok;
    public override string ToString() => $"OptionMatrix {{value = {value}, ok = {ok}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[][] identity(long n_0) {
        double[][] mat_1 = new double[][]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            double[] row_3 = new double[]{};
            long j_4 = 0;
            while ((j_4 < n_0)) {
                if ((i_2 == j_4)) {
                    row_3 = (Enumerable.ToArray(Enumerable.Append<double>(row_3, 1.0)));
                } else {
                    row_3 = (Enumerable.ToArray(Enumerable.Append<double>(row_3, 0.0)));
                }
                j_4 = (j_4 + 1);
            }
            mat_1 = (Enumerable.ToArray(Enumerable.Append<double[]>(mat_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return mat_1;
    }

    public static double[][] transpose(double[][] mat_5) {
        long rows_6 = mat_5.Length;
        long cols_7 = mat_5[(int)(0)].Length;
        double[][] res_8 = new double[][]{};
        long j_9 = 0;
        while ((j_9 < cols_7)) {
            double[] row_10 = new double[]{};
            long i_11 = 0;
            while ((i_11 < rows_6)) {
                row_10 = (Enumerable.ToArray(Enumerable.Append<double>(row_10, mat_5[(int)(i_11)][(int)(j_9)])));
                i_11 = (i_11 + 1);
            }
            res_8 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_8, row_10)));
            j_9 = (j_9 + 1);
        };
        return res_8;
    }

    public static double[][] matmul(double[][] a_12, double[][] b_13) {
        long rows_14 = a_12.Length;
        long cols_15 = b_13[(int)(0)].Length;
        long inner_16 = a_12[(int)(0)].Length;
        double[][] res_17 = new double[][]{};
        long i_18 = 0;
        while ((i_18 < rows_14)) {
            double[] row_19 = new double[]{};
            long j_20 = 0;
            while ((j_20 < cols_15)) {
                double sum_21 = 0.0;
                long k_22 = 0;
                while ((k_22 < inner_16)) {
                    sum_21 = (sum_21 + (a_12[(int)(i_18)][(int)(k_22)] * b_13[(int)(k_22)][(int)(j_20)]));
                    k_22 = (k_22 + 1);
                }
                row_19 = (Enumerable.ToArray(Enumerable.Append<double>(row_19, sum_21)));
                j_20 = (j_20 + 1);
            }
            res_17 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_17, row_19)));
            i_18 = (i_18 + 1);
        };
        return res_17;
    }

    public static double[][] mat_sub(double[][] a_23, double[][] b_24) {
        long rows_25 = a_23.Length;
        long cols_26 = a_23[(int)(0)].Length;
        double[][] res_27 = new double[][]{};
        long i_28 = 0;
        while ((i_28 < rows_25)) {
            double[] row_29 = new double[]{};
            long j_30 = 0;
            while ((j_30 < cols_26)) {
                row_29 = (Enumerable.ToArray(Enumerable.Append<double>(row_29, (a_23[(int)(i_28)][(int)(j_30)] - b_24[(int)(i_28)][(int)(j_30)]))));
                j_30 = (j_30 + 1);
            }
            res_27 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_27, row_29)));
            i_28 = (i_28 + 1);
        };
        return res_27;
    }

    public static double[][] inverse(double[][] mat_31) {
        long n_32 = mat_31.Length;
        double[][] id_33 = Program.identity(n_32);
        double[][] aug_34 = new double[][]{};
        long i_35 = 0;
        while ((i_35 < n_32)) {
            var row_36 = (Enumerable.ToArray(Enumerable.Concat(mat_31[(int)(i_35)], id_33[(int)(i_35)])));
            aug_34 = (Enumerable.ToArray(Enumerable.Append<double[]>(aug_34, row_36)));
            i_35 = (i_35 + 1);
        };
        long col_37 = 0;
        while ((col_37 < n_32)) {
            double[] pivot_row_38 = aug_34[(int)(col_37)];
            double pivot_39 = pivot_row_38[(int)(col_37)];
            if ((pivot_39 == 0.0)) {
                throw new Exception("matrix is singular");
            }
            long j_40 = 0;
            while ((j_40 < (2 * n_32))) {
                pivot_row_38[j_40] = (pivot_row_38[(int)(j_40)] / pivot_39);
                j_40 = (j_40 + 1);
            }
            aug_34[col_37] = pivot_row_38;
            long r_41 = 0;
            while ((r_41 < n_32)) {
                if ((r_41 != col_37)) {
                    double[] row_r_42 = aug_34[(int)(r_41)];
                    double factor_43 = row_r_42[(int)(col_37)];
                    j_40 = 0;
                    while ((j_40 < (2 * n_32))) {
                        row_r_42[j_40] = (row_r_42[(int)(j_40)] - (factor_43 * pivot_row_38[(int)(j_40)]));
                        j_40 = (j_40 + 1);
                    }
                    aug_34[r_41] = row_r_42;
                }
                r_41 = (r_41 + 1);
            }
            col_37 = (col_37 + 1);
        };
        double[][] inv_44 = new double[][]{};
        long r_45 = 0;
        while ((r_45 < n_32)) {
            double[] row_46 = new double[]{};
            long c_47 = n_32;
            while ((c_47 < (2 * n_32))) {
                row_46 = (Enumerable.ToArray(Enumerable.Append<double>(row_46, aug_34[(int)(r_45)][(int)(c_47)])));
                c_47 = (c_47 + 1);
            }
            inv_44 = (Enumerable.ToArray(Enumerable.Append<double[]>(inv_44, row_46)));
            r_45 = (r_45 + 1);
        };
        return inv_44;
    }

    public static double[][] schur_complement(double[][] mat_a_48, double[][] mat_b_49, double[][] mat_c_50, OptionMatrix pseudo_inv_51) {
        long a_rows_52 = mat_a_48.Length;
        long a_cols_53 = mat_a_48[(int)(0)].Length;
        if ((a_rows_52 != a_cols_53)) {
            throw new Exception("Matrix A must be square");
        };
        if ((a_rows_52 != mat_b_49.Length)) {
            throw new Exception("Expected the same number of rows for A and B");
        };
        if ((mat_b_49[(int)(0)].Length != mat_c_50[(int)(0)].Length)) {
            throw new Exception("Expected the same number of columns for B and C");
        };
        double[][] a_inv_54 = new double[][]{};
        if (pseudo_inv_51.ok) {
            a_inv_54 = pseudo_inv_51.value;
        } else {
            a_inv_54 = Program.inverse(mat_a_48);
        };
        double[][] bt_55 = Program.transpose(mat_b_49);
        double[][] a_inv_b_56 = Program.matmul(a_inv_54, mat_b_49);
        double[][] bt_a_inv_b_57 = Program.matmul(bt_55, a_inv_b_56);
        return Program.mat_sub(mat_c_50, bt_a_inv_b_57);
    }

    public static void print_matrix(double[][] mat_58) {
        long i_59 = 0;
        while ((i_59 < mat_58.Length)) {
            string line_60 = "";
            long j_61 = 0;
            double[] row_62 = mat_58[(int)(i_59)];
            while ((j_61 < row_62.Length)) {
                line_60 = (line_60 + _fmtStr(row_62[(int)(j_61)]));
                if (((j_61 + 1) < row_62.Length)) {
                    line_60 = (line_60 + " ");
                }
                j_61 = (j_61 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_60));
            i_59 = (i_59 + 1);
        };
    }

    public static void main() {
        double[][] a_63 = new double[][]{new double[]{1.0, 2.0}, new double[]{2.0, 1.0}};
        double[][] b_64 = new double[][]{new double[]{0.0, 3.0}, new double[]{3.0, 0.0}};
        double[][] c_65 = new double[][]{new double[]{2.0, 1.0}, new double[]{6.0, 3.0}};
        OptionMatrix none_66 = new OptionMatrix{value = new double[][]{}, ok = false};
        double[][] s_67 = Program.schur_complement(a_63, b_64, c_65, none_66);
        Program.print_matrix(s_67);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
