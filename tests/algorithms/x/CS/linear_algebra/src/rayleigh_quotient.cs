// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Complex {
    public double re;
    public double im;
    public override string ToString() => $"Complex {{re = {re.ToString("0.0")}, im = {im.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Complex[][] a_31 = new Complex[][]{new Complex[]{new Complex{re = 2.0, im = 0.0}, new Complex{re = 2.0, im = 1.0}, new Complex{re = 4.0, im = 0.0}}, new Complex[]{new Complex{re = 2.0, im = -1.0}, new Complex{re = 3.0, im = 0.0}, new Complex{re = 0.0, im = 1.0}}, new Complex[]{new Complex{re = 4.0, im = 0.0}, new Complex{re = 0.0, im = -1.0}, new Complex{re = 1.0, im = 0.0}}};
    static Complex[] v_32 = new Complex[]{new Complex{re = 1.0, im = 0.0}, new Complex{re = 2.0, im = 0.0}, new Complex{re = 3.0, im = 0.0}};
    public static Complex complex_conj(Complex z_0) {
        return new Complex{re = z_0.re, im = -z_0.im};
    }

    public static bool complex_eq(Complex a_1, Complex b_2) {
        return ((a_1.re == b_2.re) && (a_1.im == b_2.im));
    }

    public static Complex complex_add(Complex a_3, Complex b_4) {
        return new Complex{re = (a_3.re + b_4.re), im = (a_3.im + b_4.im)};
    }

    public static Complex complex_mul(Complex a_5, Complex b_6) {
        double real_7 = ((a_5.re * b_6.re) - (a_5.im * b_6.im));
        double imag_8 = ((a_5.re * b_6.im) + (a_5.im * b_6.re));
        return new Complex{re = real_7, im = imag_8};
    }

    public static Complex[] conj_vector(Complex[] v_9) {
        Complex[] res_10 = new Complex[]{};
        long i_11 = 0;
        while ((i_11 < v_9.Length)) {
            res_10 = (Enumerable.ToArray(Enumerable.Append<Complex>(res_10, Program.complex_conj(v_9[(int)(i_11)]))));
            i_11 = (i_11 + 1);
        };
        return res_10;
    }

    public static Complex[] vec_mat_mul(Complex[] v_12, Complex[][] m_13) {
        Complex[] result_14 = new Complex[]{};
        long col_15 = 0;
        while ((col_15 < m_13[(int)(0)].Length)) {
            Complex sum_16 = new Complex{re = 0.0, im = 0.0};
            long row_17 = 0;
            while ((row_17 < v_12.Length)) {
                sum_16 = Program.complex_add(sum_16, Program.complex_mul(v_12[(int)(row_17)], m_13[(int)(row_17)][(int)(col_15)]));
                row_17 = (row_17 + 1);
            }
            result_14 = (Enumerable.ToArray(Enumerable.Append<Complex>(result_14, sum_16)));
            col_15 = (col_15 + 1);
        };
        return result_14;
    }

    public static Complex dot(Complex[] a_18, Complex[] b_19) {
        Complex sum_20 = new Complex{re = 0.0, im = 0.0};
        long i_21 = 0;
        while ((i_21 < a_18.Length)) {
            sum_20 = Program.complex_add(sum_20, Program.complex_mul(a_18[(int)(i_21)], b_19[(int)(i_21)]));
            i_21 = (i_21 + 1);
        };
        return sum_20;
    }

    public static bool is_hermitian(Complex[][] m_22) {
        long i_23 = 0;
        while ((i_23 < m_22.Length)) {
            long j_24 = 0;
            while ((j_24 < m_22.Length)) {
                if ((!Program.complex_eq(m_22[(int)(i_23)][(int)(j_24)], Program.complex_conj(m_22[(int)(j_24)][(int)(i_23)])))) {
                    return false;
                }
                j_24 = (j_24 + 1);
            }
            i_23 = (i_23 + 1);
        };
        return true;
    }

    public static double rayleigh_quotient(Complex[][] a_25, Complex[] v_26) {
        Complex[] v_star_27 = Program.conj_vector(v_26);
        Complex[] v_star_dot_28 = Program.vec_mat_mul(v_star_27, a_25);
        Complex num_29 = Program.dot(v_star_dot_28, v_26);
        Complex den_30 = Program.dot(v_star_27, v_26);
        return (num_29.re / den_30.re);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if (Program.is_hermitian(a_31)) {
                double r1_33 = Program.rayleigh_quotient(a_31, v_32);
                Console.WriteLine(Program._fmtTop(r1_33));
                Console.WriteLine(Program._fmtTop("\n"));
            }
            Complex[][] b_34 = new Complex[][]{new Complex[]{new Complex{re = 1.0, im = 0.0}, new Complex{re = 2.0, im = 0.0}, new Complex{re = 4.0, im = 0.0}}, new Complex[]{new Complex{re = 2.0, im = 0.0}, new Complex{re = 3.0, im = 0.0}, new Complex{re = -1.0, im = 0.0}}, new Complex[]{new Complex{re = 4.0, im = 0.0}, new Complex{re = -1.0, im = 0.0}, new Complex{re = 1.0, im = 0.0}}};
            if (Program.is_hermitian(b_34)) {
                double r2_35 = Program.rayleigh_quotient(b_34, v_32);
                Console.WriteLine(Program._fmtTop(r2_35));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
