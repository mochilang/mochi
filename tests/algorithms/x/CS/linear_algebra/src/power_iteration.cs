// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class PowerResult {
    public double eigenvalue;
    public double[] eigenvector;
    public override string ToString() => $"PowerResult {{eigenvalue = {eigenvalue.ToString("0.0")}, eigenvector = {eigenvector}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] input_matrix_32 = new double[][]{new double[]{41.0, 4.0, 20.0}, new double[]{4.0, 26.0, 30.0}, new double[]{20.0, 30.0, 50.0}};
    static double[] vector_33 = new double[]{41.0, 4.0, 20.0};
    static PowerResult result_34 = Program.power_iteration(input_matrix_32, vector_33, 1e-12, 100);
    public static double abs(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double sqrtApprox(double x_1) {
        if ((x_1 == 0.0)) {
            return 0.0;
        };
        double guess_2 = (x_1 / 2.0);
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double dot(double[] a_4, double[] b_5) {
        double sum_6 = 0.0;
        long i_7 = 0;
        while ((i_7 < a_4.Length)) {
            sum_6 = (sum_6 + (a_4[(int)(i_7)] * b_5[(int)(i_7)]));
            i_7 = (i_7 + 1);
        };
        return sum_6;
    }

    public static double[] mat_vec_mult(double[][] mat_8, double[] vec_9) {
        double[] res_10 = new double[]{};
        long i_11 = 0;
        while ((i_11 < mat_8.Length)) {
            res_10 = (Enumerable.ToArray(Enumerable.Append<double>(res_10, Program.dot(mat_8[(int)(i_11)], vec_9))));
            i_11 = (i_11 + 1);
        };
        return res_10;
    }

    public static double norm(double[] vec_12) {
        double sum_13 = 0.0;
        long i_14 = 0;
        while ((i_14 < vec_12.Length)) {
            sum_13 = (sum_13 + (vec_12[(int)(i_14)] * vec_12[(int)(i_14)]));
            i_14 = (i_14 + 1);
        };
        double root_15 = Program.sqrtApprox(sum_13);
        return root_15;
    }

    public static double[] normalize(double[] vec_16) {
        double n_17 = Program.norm(vec_16);
        double[] res_18 = new double[]{};
        long i_19 = 0;
        while ((i_19 < vec_16.Length)) {
            res_18 = (Enumerable.ToArray(Enumerable.Append<double>(res_18, (vec_16[(int)(i_19)] / n_17))));
            i_19 = (i_19 + 1);
        };
        return res_18;
    }

    public static PowerResult power_iteration(double[][] matrix_20, double[] vector_21, double error_tol_22, long max_iterations_23) {
        double[] v_24 = Program.normalize(vector_21);
        double lambda_prev_25 = 0.0;
        double lambda_26 = 0.0;
        double err_27 = 1e12;
        long iterations_28 = 0;
        while (((err_27 > error_tol_22) && (iterations_28 < max_iterations_23))) {
            double[] w_29 = Program.mat_vec_mult(matrix_20, v_24);
            v_24 = Program.normalize(w_29);
            double[] mv_30 = Program.mat_vec_mult(matrix_20, v_24);
            lambda_26 = Program.dot(v_24, mv_30);
            double denom_31 = ((lambda_26 != 0.0) ? Program.abs(lambda_26) : 1.0);
            err_27 = (Program.abs((lambda_26 - lambda_prev_25)) / denom_31);
            lambda_prev_25 = lambda_26;
            iterations_28 = (iterations_28 + 1);
        };
        return new PowerResult{eigenvalue = lambda_26, eigenvector = v_24};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(result_34.eigenvalue)));
            Console.WriteLine(Program._fmtTop(_fmtStr(result_34.eigenvector)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
