// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] A_43 = new double[][]{new double[]{8.73256573, -5.02034289, -2.68709226}, new double[]{-5.02034289, 3.78188322, 0.91980451}, new double[]{-2.68709226, 0.91980451, 1.94746467}};
    static double[] b_44 = new double[]{-5.80872761, 3.23807431, 1.95381422};
    static double[] x_45 = Program.conjugate_gradient(A_43, b_44, 1000, 1e-08);
    public static double[] zeros(long n_0) {
        double[] res_1 = new double[]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<double>(res_1, 0.0)));
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static double dot(double[] a_3, double[] b_4) {
        double sum_5 = 0.0;
        long i_6 = 0;
        while ((i_6 < a_3.Length)) {
            sum_5 = (sum_5 + (a_3[(int)(i_6)] * b_4[(int)(i_6)]));
            i_6 = (i_6 + 1);
        };
        return sum_5;
    }

    public static double[] mat_vec_mul(double[][] m_7, double[] v_8) {
        double[] res_9 = new double[]{};
        long i_10 = 0;
        while ((i_10 < m_7.Length)) {
            double s_11 = 0.0;
            long j_12 = 0;
            while ((j_12 < m_7[(int)(i_10)].Length)) {
                s_11 = (s_11 + (m_7[(int)(i_10)][(int)(j_12)] * v_8[(int)(j_12)]));
                j_12 = (j_12 + 1);
            }
            res_9 = (Enumerable.ToArray(Enumerable.Append<double>(res_9, s_11)));
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static double[] vec_add(double[] a_13, double[] b_14) {
        double[] res_15 = new double[]{};
        long i_16 = 0;
        while ((i_16 < a_13.Length)) {
            res_15 = (Enumerable.ToArray(Enumerable.Append<double>(res_15, (a_13[(int)(i_16)] + b_14[(int)(i_16)]))));
            i_16 = (i_16 + 1);
        };
        return res_15;
    }

    public static double[] vec_sub(double[] a_17, double[] b_18) {
        double[] res_19 = new double[]{};
        long i_20 = 0;
        while ((i_20 < a_17.Length)) {
            res_19 = (Enumerable.ToArray(Enumerable.Append<double>(res_19, (a_17[(int)(i_20)] - b_18[(int)(i_20)]))));
            i_20 = (i_20 + 1);
        };
        return res_19;
    }

    public static double[] scalar_mul(double s_21, double[] v_22) {
        double[] res_23 = new double[]{};
        long i_24 = 0;
        while ((i_24 < v_22.Length)) {
            res_23 = (Enumerable.ToArray(Enumerable.Append<double>(res_23, (s_21 * v_22[(int)(i_24)]))));
            i_24 = (i_24 + 1);
        };
        return res_23;
    }

    public static double sqrtApprox(double x_25) {
        if ((x_25 <= 0.0)) {
            return 0.0;
        };
        double guess_26 = x_25;
        long i_27 = 0;
        while ((i_27 < 20)) {
            guess_26 = ((guess_26 + (x_25 / guess_26)) / 2.0);
            i_27 = (i_27 + 1);
        };
        return guess_26;
    }

    public static double norm(double[] v_28) {
        return Program.sqrtApprox(Program.dot(v_28, v_28));
    }

    public static double[] conjugate_gradient(double[][] A_29, double[] b_30, long max_iterations_31, double tol_32) {
        long n_33 = b_30.Length;
        double[] x_34 = Program.zeros(n_33);
        double[] r_35 = Program.vec_sub(b_30, Program.mat_vec_mul(A_29, x_34));
        double[] p_36 = r_35;
        double rs_old_37 = Program.dot(r_35, r_35);
        long i_38 = 0;
        while ((i_38 < max_iterations_31)) {
            double[] Ap_39 = Program.mat_vec_mul(A_29, p_36);
            double alpha_40 = (rs_old_37 / Program.dot(p_36, Ap_39));
            x_34 = Program.vec_add(x_34, Program.scalar_mul(alpha_40, p_36));
            r_35 = Program.vec_sub(r_35, Program.scalar_mul(alpha_40, Ap_39));
            double rs_new_41 = Program.dot(r_35, r_35);
            if ((Program.sqrtApprox(rs_new_41) < tol_32)) {
                break;
            }
            double beta_42 = (rs_new_41 / rs_old_37);
            p_36 = Program.vec_add(r_35, Program.scalar_mul(beta_42, p_36));
            rs_old_37 = rs_new_41;
            i_38 = (i_38 + 1);
        };
        return x_34;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(x_45[(int)(0)])));
            Console.WriteLine(Program._fmtTop(_fmtStr(x_45[(int)(1)])));
            Console.WriteLine(Program._fmtTop(_fmtStr(x_45[(int)(2)])));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
