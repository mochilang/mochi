// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool contains_int(long[] xs_0, long x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static string[] split(string s_3, string sep_4) {
        string[] res_5 = new string[]{};
        string current_6 = "";
        long i_7 = 0;
        while ((i_7 < s_3.Length)) {
            string ch_8 = _substr(s_3, i_7, (i_7 + 1));
            if ((ch_8 == sep_4)) {
                res_5 = (Enumerable.ToArray(Enumerable.Append<string>(res_5, current_6)));
                current_6 = "";
            } else {
                current_6 = (current_6 + ch_8);
            }
            i_7 = (i_7 + 1);
        };
        res_5 = (Enumerable.ToArray(Enumerable.Append<string>(res_5, current_6)));
        return res_5;
    }

    public static double pow_int_float(long base_9, long exp_10) {
        double result_11 = 1.0;
        long i_12 = 0;
        while ((i_12 < exp_10)) {
            result_11 = (result_11 * Convert.ToDouble(base_9));
            i_12 = (i_12 + 1);
        };
        return result_11;
    }

    public static string points_to_polynomial(long[][] coordinates_13) {
        if ((coordinates_13.Length == 0)) {
            throw new Exception("The program cannot work out a fitting polynomial.");
        };
        long i_14 = 0;
        while ((i_14 < coordinates_13.Length)) {
            if ((coordinates_13[(int)(i_14)].Length != 2)) {
                throw new Exception("The program cannot work out a fitting polynomial.");
            }
            i_14 = (i_14 + 1);
        };
        long j_15 = 0;
        while ((j_15 < coordinates_13.Length)) {
            long k_16 = (j_15 + 1);
            while ((k_16 < coordinates_13.Length)) {
                if (((coordinates_13[(int)(j_15)][(int)(0)] == coordinates_13[(int)(k_16)][(int)(0)]) && (coordinates_13[(int)(j_15)][(int)(1)] == coordinates_13[(int)(k_16)][(int)(1)]))) {
                    throw new Exception("The program cannot work out a fitting polynomial.");
                }
                k_16 = (k_16 + 1);
            }
            j_15 = (j_15 + 1);
        };
        long[] set_x_17 = new long[]{};
        i_14 = 0;
        while ((i_14 < coordinates_13.Length)) {
            long x_val_18 = coordinates_13[(int)(i_14)][(int)(0)];
            if ((!Program.contains_int(set_x_17, x_val_18))) {
                set_x_17 = (Enumerable.ToArray(Enumerable.Append<long>(set_x_17, x_val_18)));
            }
            i_14 = (i_14 + 1);
        };
        if ((set_x_17.Length == 1)) {
            return ("x=" + _fmtStr(coordinates_13[(int)(0)][(int)(0)]));
        };
        if ((set_x_17.Length != coordinates_13.Length)) {
            throw new Exception("The program cannot work out a fitting polynomial.");
        };
        long n_19 = coordinates_13.Length;
        double[][] matrix_20 = new double[][]{};
        long row_21 = 0;
        while ((row_21 < n_19)) {
            double[] line_22 = new double[]{};
            long col_23 = 0;
            while ((col_23 < n_19)) {
                double power_24 = Program.pow_int_float(coordinates_13[(int)(row_21)][(int)(0)], (n_19 - (col_23 + 1)));
                line_22 = (Enumerable.ToArray(Enumerable.Append<double>(line_22, power_24)));
                col_23 = (col_23 + 1);
            }
            matrix_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(matrix_20, line_22)));
            row_21 = (row_21 + 1);
        };
        double[] vector_25 = new double[]{};
        row_21 = 0;
        while ((row_21 < n_19)) {
            vector_25 = (Enumerable.ToArray(Enumerable.Append<double>(vector_25, Convert.ToDouble(coordinates_13[(int)(row_21)][(int)(1)]))));
            row_21 = (row_21 + 1);
        };
        long count_26 = 0;
        while ((count_26 < n_19)) {
            long number_27 = 0;
            while ((number_27 < n_19)) {
                if ((count_26 != number_27)) {
                    double fraction_28 = (matrix_20[(int)(number_27)][(int)(count_26)] / matrix_20[(int)(count_26)][(int)(count_26)]);
                    long cc_29 = 0;
                    while ((cc_29 < n_19)) {
                        matrix_20[(int)(number_27)][cc_29] = (matrix_20[(int)(number_27)][(int)(cc_29)] - (matrix_20[(int)(count_26)][(int)(cc_29)] * fraction_28));
                        cc_29 = (cc_29 + 1);
                    }
                    vector_25[number_27] = (vector_25[(int)(number_27)] - (vector_25[(int)(count_26)] * fraction_28));
                }
                number_27 = (number_27 + 1);
            }
            count_26 = (count_26 + 1);
        };
        string[] solution_30 = new string[]{};
        count_26 = 0;
        while ((count_26 < n_19)) {
            double value_31 = (vector_25[(int)(count_26)] / matrix_20[(int)(count_26)][(int)(count_26)]);
            solution_30 = (Enumerable.ToArray(Enumerable.Append<string>(solution_30, _fmtStr(value_31))));
            count_26 = (count_26 + 1);
        };
        string solved_32 = "f(x)=";
        count_26 = 0;
        while ((count_26 < n_19)) {
            string[] parts_33 = Program.split(solution_30[(int)(count_26)], "e");
            string coeff_34 = solution_30[(int)(count_26)];
            if ((parts_33.Length > 1)) {
                coeff_34 = ((parts_33[(int)(0)] + "*10^") + parts_33[(int)(1)]);
            }
            solved_32 = ((((solved_32 + "x^") + _fmtStr((n_19 - (count_26 + 1)))) + "*") + coeff_34);
            if (((count_26 + 1) != n_19)) {
                solved_32 = (solved_32 + "+");
            }
            count_26 = (count_26 + 1);
        };
        return solved_32;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, 0}, new long[]{2, 0}, new long[]{3, 0}})));
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, 1}, new long[]{2, 1}, new long[]{3, 1}})));
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, 1}, new long[]{2, 4}, new long[]{3, 9}})));
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, 3}, new long[]{2, 6}, new long[]{3, 11}})));
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, -3}, new long[]{2, -6}, new long[]{3, -11}})));
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, 1}, new long[]{1, 2}, new long[]{1, 3}})));
        Console.WriteLine(Program._fmtTop(Program.points_to_polynomial(new long[][]{new long[]{1, 5}, new long[]{2, 2}, new long[]{3, 9}})));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
