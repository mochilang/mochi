// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    public static double floor(double x_1) {
        long i_2 = (long)(x_1);
        if ((Convert.ToDouble(i_2) > x_1)) {
            i_2 = (i_2 - 1);
        };
        return Convert.ToDouble(i_2);
    }

    public static double modf(double x_3, double m_4) {
        return (x_3 - (Program.floor((x_3 / m_4)) * m_4));
    }

    public static double sin_taylor(double angle_5) {
        double x_6 = Program.modf(angle_5, (2.0 * PI_0));
        if ((x_6 > PI_0)) {
            x_6 = (x_6 - (2.0 * PI_0));
        };
        double term_7 = x_6;
        double sum_8 = x_6;
        long i_9 = 1;
        while ((i_9 < 10)) {
            double k1_10 = (2.0 * Convert.ToDouble(i_9));
            double k2_11 = (k1_10 + 1.0);
            term_7 = (((-term_7 * x_6) * x_6) / (k1_10 * k2_11));
            sum_8 = (sum_8 + term_7);
            i_9 = (i_9 + 1);
        };
        return sum_8;
    }

    public static double cos_taylor(double angle_12) {
        double x_13 = Program.modf(angle_12, (2.0 * PI_0));
        if ((x_13 > PI_0)) {
            x_13 = (x_13 - (2.0 * PI_0));
        };
        double term_14 = 1.0;
        double sum_15 = 1.0;
        long i_16 = 1;
        while ((i_16 < 10)) {
            double k1_17 = ((2.0 * Convert.ToDouble(i_16)) - 1.0);
            double k2_18 = (2.0 * Convert.ToDouble(i_16));
            term_14 = (((-term_14 * x_13) * x_13) / (k1_17 * k2_18));
            sum_15 = (sum_15 + term_14);
            i_16 = (i_16 + 1);
        };
        return sum_15;
    }

    public static string matrix_to_string(double[][] m_19) {
        string s_20 = "[";
        long i_21 = 0;
        while ((i_21 < m_19.Length)) {
            double[] row_22 = m_19[(int)(i_21)];
            s_20 = (s_20 + "[");
            long j_23 = 0;
            while ((j_23 < row_22.Length)) {
                s_20 = (s_20 + _fmtStr(row_22[(int)(j_23)]));
                if ((j_23 < (row_22.Length - 1))) {
                    s_20 = (s_20 + ", ");
                }
                j_23 = (j_23 + 1);
            }
            s_20 = (s_20 + "]");
            if ((i_21 < (m_19.Length - 1))) {
                s_20 = (s_20 + ", ");
            }
            i_21 = (i_21 + 1);
        };
        s_20 = (s_20 + "]");
        return s_20;
    }

    public static double[][] scaling(double f_24) {
        return new double[][]{new double[]{f_24, 0.0}, new double[]{0.0, f_24}};
    }

    public static double[][] rotation(double angle_25) {
        double c_26 = Program.cos_taylor(angle_25);
        double s_27 = Program.sin_taylor(angle_25);
        return new double[][]{new double[]{c_26, -s_27}, new double[]{s_27, c_26}};
    }

    public static double[][] projection(double angle_28) {
        double c_29 = Program.cos_taylor(angle_28);
        double s_30 = Program.sin_taylor(angle_28);
        double cs_31 = (c_29 * s_30);
        return new double[][]{new double[]{(c_29 * c_29), cs_31}, new double[]{cs_31, (s_30 * s_30)}};
    }

    public static double[][] reflection(double angle_32) {
        double c_33 = Program.cos_taylor(angle_32);
        double s_34 = Program.sin_taylor(angle_32);
        double cs_35 = (c_33 * s_34);
        return new double[][]{new double[]{((2.0 * c_33) - 1.0), (2.0 * cs_35)}, new double[]{(2.0 * cs_35), ((2.0 * s_34) - 1.0)}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("    scaling(5) = " + Program.matrix_to_string(Program.scaling(5.0)))));
            Console.WriteLine(Program._fmtTop(("  rotation(45) = " + Program.matrix_to_string(Program.rotation(45.0)))));
            Console.WriteLine(Program._fmtTop(("projection(45) = " + Program.matrix_to_string(Program.projection(45.0)))));
            Console.WriteLine(Program._fmtTop(("reflection(45) = " + Program.matrix_to_string(Program.reflection(45.0)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
