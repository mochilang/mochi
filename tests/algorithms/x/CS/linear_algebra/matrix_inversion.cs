// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] mat_20 = new double[][]{new double[]{4.0, 7.0}, new double[]{2.0, 6.0}};
    public static double[][] invert_matrix(double[][] matrix_0) {
        long n_1 = matrix_0.Length;
        double[][] aug_2 = new double[][]{};
        long i_3 = 0;
        while ((i_3 < n_1)) {
            double[] row_4 = new double[]{};
            long j_5 = 0;
            while ((j_5 < n_1)) {
                row_4 = (Enumerable.ToArray(Enumerable.Append<double>(row_4, matrix_0[(int)(i_3)][(int)(j_5)])));
                j_5 = (j_5 + 1);
            }
            long k_6 = 0;
            while ((k_6 < n_1)) {
                if ((i_3 == k_6)) {
                    row_4 = (Enumerable.ToArray(Enumerable.Append<double>(row_4, 1.0)));
                } else {
                    row_4 = (Enumerable.ToArray(Enumerable.Append<double>(row_4, 0.0)));
                }
                k_6 = (k_6 + 1);
            }
            aug_2 = (Enumerable.ToArray(Enumerable.Append<double[]>(aug_2, row_4)));
            i_3 = (i_3 + 1);
        };
        long col_7 = 0;
        while ((col_7 < n_1)) {
            long pivot_row_8 = col_7;
            long r_9 = col_7;
            while ((r_9 < n_1)) {
                if ((aug_2[(int)(r_9)][(int)(col_7)] != 0.0)) {
                    pivot_row_8 = r_9;
                    break;
                }
                r_9 = (r_9 + 1);
            }
            if ((aug_2[(int)(pivot_row_8)][(int)(col_7)] == 0.0)) {
                throw new Exception("Matrix is not invertible");
            }
            if ((pivot_row_8 != col_7)) {
                double[] temp_10 = aug_2[(int)(col_7)];
                aug_2[col_7] = aug_2[(int)(pivot_row_8)];
                aug_2[pivot_row_8] = temp_10;
            }
            double pivot_11 = aug_2[(int)(col_7)][(int)(col_7)];
            long c_12 = 0;
            while ((c_12 < (2 * n_1))) {
                aug_2[(int)(col_7)][c_12] = (aug_2[(int)(col_7)][(int)(c_12)] / pivot_11);
                c_12 = (c_12 + 1);
            }
            long r2_13 = 0;
            while ((r2_13 < n_1)) {
                if ((r2_13 != col_7)) {
                    double factor_14 = aug_2[(int)(r2_13)][(int)(col_7)];
                    long c2_15 = 0;
                    while ((c2_15 < (2 * n_1))) {
                        aug_2[(int)(r2_13)][c2_15] = (aug_2[(int)(r2_13)][(int)(c2_15)] - (factor_14 * aug_2[(int)(col_7)][(int)(c2_15)]));
                        c2_15 = (c2_15 + 1);
                    }
                }
                r2_13 = (r2_13 + 1);
            }
            col_7 = (col_7 + 1);
        };
        double[][] inv_16 = new double[][]{};
        long r3_17 = 0;
        while ((r3_17 < n_1)) {
            double[] row_18 = new double[]{};
            long c3_19 = 0;
            while ((c3_19 < n_1)) {
                row_18 = (Enumerable.ToArray(Enumerable.Append<double>(row_18, aug_2[(int)(r3_17)][(int)((c3_19 + n_1))])));
                c3_19 = (c3_19 + 1);
            }
            inv_16 = (Enumerable.ToArray(Enumerable.Append<double[]>(inv_16, row_18)));
            r3_17 = (r3_17 + 1);
        };
        return inv_16;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Original Matrix:"));
            Console.WriteLine(Program._fmtTop(mat_20));
            Console.WriteLine(Program._fmtTop("Inverted Matrix:"));
            Console.WriteLine(Program._fmtTop(Program.invert_matrix(mat_20)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
