// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class LU {
    public double[][] lower;
    public double[][] upper;
    public override string ToString() => $"LU {{lower = {lower}, upper = {upper}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] matrix_19 = new double[][]{new double[]{2.0, -2.0, 1.0}, new double[]{0.0, 1.0, 2.0}, new double[]{5.0, 3.0, 1.0}};
    static LU result_20 = Program.lu_decomposition(matrix_19);
    public static LU lu_decomposition(double[][] mat_0) {
        long n_1 = mat_0.Length;
        if ((n_1 == 0)) {
            return new LU{lower = new double[][]{}, upper = new double[][]{}};
        };
        long m_2 = mat_0[(int)(0)].Length;
        if ((n_1 != m_2)) {
            throw new Exception("Matrix must be square");
        };
        double[][] lower_3 = new double[][]{};
        double[][] upper_4 = new double[][]{};
        long i_5 = 0;
        while ((i_5 < n_1)) {
            double[] lrow_6 = new double[]{};
            double[] urow_7 = new double[]{};
            long j_8 = 0;
            while ((j_8 < n_1)) {
                lrow_6 = (Enumerable.ToArray(Enumerable.Append<double>(lrow_6, 0.0)));
                urow_7 = (Enumerable.ToArray(Enumerable.Append<double>(urow_7, 0.0)));
                j_8 = (j_8 + 1);
            }
            lower_3 = (Enumerable.ToArray(Enumerable.Append<double[]>(lower_3, lrow_6)));
            upper_4 = (Enumerable.ToArray(Enumerable.Append<double[]>(upper_4, urow_7)));
            i_5 = (i_5 + 1);
        };
        i_5 = 0;
        while ((i_5 < n_1)) {
            long j1_9 = 0;
            while ((j1_9 < i_5)) {
                double total_10 = 0.0;
                long k_11 = 0;
                while ((k_11 < i_5)) {
                    total_10 = (total_10 + (lower_3[(int)(i_5)][(int)(k_11)] * upper_4[(int)(k_11)][(int)(j1_9)]));
                    k_11 = (k_11 + 1);
                }
                if ((upper_4[(int)(j1_9)][(int)(j1_9)] == 0.0)) {
                    throw new Exception("No LU decomposition exists");
                }
                lower_3[(int)(i_5)][j1_9] = ((mat_0[(int)(i_5)][(int)(j1_9)] - total_10) / upper_4[(int)(j1_9)][(int)(j1_9)]);
                j1_9 = (j1_9 + 1);
            }
            lower_3[(int)(i_5)][i_5] = 1.0;
            long j2_12 = i_5;
            while ((j2_12 < n_1)) {
                double total2_13 = 0.0;
                long k2_14 = 0;
                while ((k2_14 < i_5)) {
                    total2_13 = (total2_13 + (lower_3[(int)(i_5)][(int)(k2_14)] * upper_4[(int)(k2_14)][(int)(j2_12)]));
                    k2_14 = (k2_14 + 1);
                }
                upper_4[(int)(i_5)][j2_12] = (mat_0[(int)(i_5)][(int)(j2_12)] - total2_13);
                j2_12 = (j2_12 + 1);
            }
            i_5 = (i_5 + 1);
        };
        return new LU{lower = lower_3, upper = upper_4};
    }

    public static void print_matrix(double[][] mat_15) {
        long i_16 = 0;
        while ((i_16 < mat_15.Length)) {
            string line_17 = "";
            long j_18 = 0;
            while ((j_18 < mat_15[(int)(i_16)].Length)) {
                line_17 = (line_17 + _fmtStr(mat_15[(int)(i_16)][(int)(j_18)]));
                if (((j_18 + 1) < mat_15[(int)(i_16)].Length)) {
                    line_17 = (line_17 + " ");
                }
                j_18 = (j_18 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_17));
            i_16 = (i_16 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_matrix(result_20.lower);
            Program.print_matrix(result_20.upper);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
