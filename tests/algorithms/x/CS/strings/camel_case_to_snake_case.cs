// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string LOWER_0 = "abcdefghijklmnopqrstuvwxyz";
    static string UPPER_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string DIGITS_2 = "0123456789";
    public static bool is_lower(string ch_3) {
        long i_4 = 0;
        while ((i_4 < LOWER_0.Length)) {
            if ((LOWER_0.Substring((int)(i_4), 1) == ch_3)) {
                return true;
            }
            i_4 = (i_4 + 1);
        };
        return false;
    }

    public static bool is_upper(string ch_5) {
        long i_6 = 0;
        while ((i_6 < UPPER_1.Length)) {
            if ((UPPER_1.Substring((int)(i_6), 1) == ch_5)) {
                return true;
            }
            i_6 = (i_6 + 1);
        };
        return false;
    }

    public static bool is_digit(string ch_7) {
        long i_8 = 0;
        while ((i_8 < DIGITS_2.Length)) {
            if ((DIGITS_2.Substring((int)(i_8), 1) == ch_7)) {
                return true;
            }
            i_8 = (i_8 + 1);
        };
        return false;
    }

    public static bool is_alpha(string ch_9) {
        if (Program.is_lower(ch_9)) {
            return true;
        };
        if (Program.is_upper(ch_9)) {
            return true;
        };
        return false;
    }

    public static bool is_alnum(string ch_10) {
        if (Program.is_alpha(ch_10)) {
            return true;
        };
        if (Program.is_digit(ch_10)) {
            return true;
        };
        return false;
    }

    public static string to_lower(string ch_11) {
        long i_12 = 0;
        while ((i_12 < UPPER_1.Length)) {
            if ((UPPER_1.Substring((int)(i_12), 1) == ch_11)) {
                return LOWER_0.Substring((int)(i_12), 1);
            }
            i_12 = (i_12 + 1);
        };
        return ch_11;
    }

    public static string camel_to_snake_case(string input_str_13) {
        string snake_str_14 = "";
        long i_15 = 0;
        bool prev_is_digit_16 = false;
        bool prev_is_alpha_17 = false;
        while ((i_15 < input_str_13.Length)) {
            string ch_18 = input_str_13.Substring((int)(i_15), 1);
            if (Program.is_upper(ch_18)) {
                snake_str_14 = ((snake_str_14 + "_") + Program.to_lower(ch_18));
            } else if ((prev_is_digit_16 && Program.is_lower(ch_18))) {
                snake_str_14 = ((snake_str_14 + "_") + ch_18);
            } else if ((prev_is_alpha_17 && Program.is_digit(ch_18))) {
                snake_str_14 = ((snake_str_14 + "_") + ch_18);
            } else if ((!Program.is_alnum(ch_18))) {
                snake_str_14 = (snake_str_14 + "_");
            } else {
                snake_str_14 = (snake_str_14 + ch_18);
            }
            prev_is_digit_16 = Program.is_digit(ch_18);
            prev_is_alpha_17 = Program.is_alpha(ch_18);
            i_15 = (i_15 + 1);
        };
        if (((snake_str_14.Length > 0) && (snake_str_14.Substring((int)(0), 1) == "_"))) {
            snake_str_14 = _substr(snake_str_14, 1, snake_str_14.Length);
        };
        return snake_str_14;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.camel_to_snake_case("someRandomString")));
        Console.WriteLine(Program._fmtTop(Program.camel_to_snake_case("SomeRandomStr#ng")));
        Console.WriteLine(Program._fmtTop(Program.camel_to_snake_case("123SomeRandom123String123")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
