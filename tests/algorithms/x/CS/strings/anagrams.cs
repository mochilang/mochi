// Generated by Mochi 0.10.63 on 2025-08-12 07:47 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Dictionary<string, string[]> word_by_signature_19 = new Dictionary<string, string[]>{};
    public static string[] split(string s_0, string sep_1) {
        string[] res_2 = new string[]{};
        string current_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            string ch_5 = _substr(s_0, i_4, (i_4 + 1));
            if ((ch_5 == sep_1)) {
                res_2 = (Enumerable.ToArray(Enumerable.Append<string>(res_2, current_3)));
                current_3 = "";
            } else {
                current_3 = (current_3 + ch_5);
            }
            i_4 = (i_4 + 1);
        };
        res_2 = (Enumerable.ToArray(Enumerable.Append<string>(res_2, current_3)));
        return res_2;
    }

    public static string[] insertion_sort(string[] arr_6) {
        string[] a_7 = arr_6;
        long i_8 = 1;
        while ((i_8 < a_7.Length)) {
            string key_9 = _idx(a_7, i_8);
            long j_10 = (i_8 - 1);
            while (((j_10 >= 0) && (string.Compare(_idx(a_7, j_10), key_9) > 0))) {
                a_7[(int)((j_10 + 1))] = _idx(a_7, j_10);
                j_10 = (j_10 - 1);
            }
            a_7[(int)((j_10 + 1))] = key_9;
            i_8 = (i_8 + 1);
        };
        return a_7;
    }

    public static string sort_chars(string word_11) {
        string[] chars_12 = new string[]{};
        long i_13 = 0;
        while ((i_13 < word_11.Length)) {
            chars_12 = (Enumerable.ToArray(Enumerable.Append<string>(chars_12, _substr(word_11, i_13, (i_13 + 1)))));
            i_13 = (i_13 + 1);
        };
        chars_12 = Program.insertion_sort(chars_12);
        string res_14 = "";
        i_13 = 0;
        while ((i_13 < chars_12.Length)) {
            res_14 = (res_14 + _idx(chars_12, i_13));
            i_13 = (i_13 + 1);
        };
        return res_14;
    }

    public static string[] unique_sorted(string[] words_15) {
        Dictionary<string, bool> seen_16 = new Dictionary<string, bool>{};
        string[] res_17 = new string[]{};
        foreach (string w_18 in words_15) {
            if (((w_18 != "") && (!(seen_16.ContainsKey(w_18))))) {
                res_17 = (Enumerable.ToArray(Enumerable.Append<string>(res_17, w_18)));
                seen_16[w_18] = true;
            }
        };
        res_17 = Program.insertion_sort(res_17);
        return res_17;
    }

    public static void build_map(string[] words_20) {
        foreach (string w_21 in words_20) {
            string sig_22 = Program.sort_chars(w_21);
            string[] arr_23 = new string[]{};
            if ((word_by_signature_19.ContainsKey(sig_22))) {
                arr_23 = (word_by_signature_19.ContainsKey(sig_22) ? word_by_signature_19[sig_22] : null);
            }
            arr_23 = (Enumerable.ToArray(Enumerable.Append<string>(arr_23, w_21)));
            word_by_signature_19[sig_22] = arr_23;
        };
    }

    public static string[] anagram(string my_word_24) {
        string sig_25 = Program.sort_chars(my_word_24);
        if ((word_by_signature_19.ContainsKey(sig_25))) {
            return (word_by_signature_19.ContainsKey(sig_25) ? word_by_signature_19[sig_25] : null);
        };
        return new string[]{};
    }

    public static void main() {
        var text_26 = File.ReadAllText("words.txt");
        string[] lines_27 = Program.split(text_26, "\n");
        string[] words_28 = Program.unique_sorted(lines_27);
        Program.build_map(words_28);
        foreach (string w_29 in words_28) {
            string[] anas_30 = Program.anagram(w_29);
            if ((anas_30.Length > 1)) {
                string line_31 = (w_29 + ":");
                long i_32 = 0;
                while ((i_32 < anas_30.Length)) {
                    if ((i_32 > 0)) {
                        line_31 = (line_31 + ",");
                    }
                    line_31 = (line_31 + _idx(anas_30, i_32));
                    i_32 = (i_32 + 1);
                }
                Console.WriteLine(Program._fmtTop(line_31));
            }
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
