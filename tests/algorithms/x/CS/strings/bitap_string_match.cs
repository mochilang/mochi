// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long pow2(long n_0) {
        long res_1 = 1;
        long i_2 = 0;
        while ((i_2 < n_0)) {
            res_1 = (res_1 * 2);
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static long bit_and(long a_3, long b_4) {
        long x_5 = a_3;
        long y_6 = b_4;
        long res_7 = 0;
        long bit_8 = 1;
        while (((x_5 > 0) || (y_6 > 0))) {
            if (((_mod(x_5, 2) == 1) && (_mod(y_6, 2) == 1))) {
                res_7 = (res_7 + bit_8);
            }
            x_5 = (long)((x_5 / 2));
            y_6 = (long)((y_6 / 2));
            bit_8 = (bit_8 * 2);
        };
        return res_7;
    }

    public static long bit_or(long a_9, long b_10) {
        long x_11 = a_9;
        long y_12 = b_10;
        long res_13 = 0;
        long bit_14 = 1;
        while (((x_11 > 0) || (y_12 > 0))) {
            if (((_mod(x_11, 2) == 1) || (_mod(y_12, 2) == 1))) {
                res_13 = (res_13 + bit_14);
            }
            x_11 = (long)((x_11 / 2));
            y_12 = (long)((y_12 / 2));
            bit_14 = (bit_14 * 2);
        };
        return res_13;
    }

    public static long char_to_index(string ch_15) {
        string letters_16 = "abcdefghijklmnopqrstuvwxyz";
        long i_17 = 0;
        while ((i_17 < letters_16.Length)) {
            if ((_substr(letters_16, i_17, (i_17 + 1)) == ch_15)) {
                return i_17;
            }
            i_17 = (i_17 + 1);
        };
        return 26;
    }

    public static long bitap_string_match(string text_18, string pattern_19) {
        if ((pattern_19 == "")) {
            return 0;
        };
        long m_20 = pattern_19.Length;
        if ((m_20 > text_18.Length)) {
            return -1;
        };
        long limit_21 = Program.pow2((m_20 + 1));
        long all_ones_22 = (limit_21 - 1);
        long[] pattern_mask_23 = new long[]{};
        long i_24 = 0;
        while ((i_24 < 27)) {
            pattern_mask_23 = (Enumerable.ToArray(Enumerable.Append<long>(pattern_mask_23, all_ones_22)));
            i_24 = (i_24 + 1);
        };
        i_24 = 0;
        while ((i_24 < m_20)) {
            string ch_25 = _substr(pattern_19, i_24, (i_24 + 1));
            long idx_26 = Program.char_to_index(ch_25);
            pattern_mask_23[(int)(idx_26)] = Program.bit_and(_idx(pattern_mask_23, idx_26), (all_ones_22 - Program.pow2(i_24)));
            i_24 = (i_24 + 1);
        };
        long state_27 = (all_ones_22 - 1);
        i_24 = 0;
        while ((i_24 < text_18.Length)) {
            string ch_28 = _substr(text_18, i_24, (i_24 + 1));
            long idx_29 = Program.char_to_index(ch_28);
            state_27 = Program.bit_or(state_27, _idx(pattern_mask_23, idx_29));
            state_27 = _mod((state_27 * 2), limit_21);
            if ((Program.bit_and(state_27, Program.pow2(m_20)) == 0)) {
                return ((i_24 - m_20) + 1);
            }
            i_24 = (i_24 + 1);
        };
        return -1;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitap_string_match("abdabababc", "ababc"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitap_string_match("abdabababc", ""))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitap_string_match("abdabababc", "c"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bitap_string_match("abdabababc", "fofosdfo"))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
