// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long parse_int(string s_0) {
        long value_1 = 0;
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            string c_3 = s_0.Substring((int)(i_2), 1);
            value_1 = ((value_1 * 10) + long.Parse(c_3));
            i_2 = (i_2 + 1);
        };
        return value_1;
    }

    public static bool is_polish_national_id(string id_4) {
        if ((id_4.Length == 0)) {
            return false;
        };
        if ((_substr(id_4, 0, 1) == "-")) {
            return false;
        };
        long input_int_5 = Program.parse_int(id_4);
        if (((input_int_5 < 10100000) || (input_int_5 > 99923199999L))) {
            return false;
        };
        long month_6 = Program.parse_int(_substr(id_4, 2, 4));
        if ((!((((((month_6 >= 1) && (month_6 <= 12)) || ((month_6 >= 21) && (month_6 <= 32))) || ((month_6 >= 41) && (month_6 <= 52))) || ((month_6 >= 61) && (month_6 <= 72))) || ((month_6 >= 81) && (month_6 <= 92))))) {
            return false;
        };
        long day_7 = Program.parse_int(_substr(id_4, 4, 6));
        if (((day_7 < 1) || (day_7 > 31))) {
            return false;
        };
        long[] multipliers_8 = new long[]{1, 3, 7, 9, 1, 3, 7, 9, 1, 3};
        long subtotal_9 = 0;
        long i_10 = 0;
        while ((i_10 < multipliers_8.Length)) {
            long digit_11 = Program.parse_int(_substr(id_4, i_10, (i_10 + 1)));
            subtotal_9 = (subtotal_9 + _mod((digit_11 * multipliers_8[(int)(i_10)]), 10));
            i_10 = (i_10 + 1);
        };
        long checksum_12 = (10 - _mod(subtotal_9, 10));
        return (checksum_12 == _mod(input_int_5, 10));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_polish_national_id("02070803628"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_polish_national_id("02150803629"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_polish_national_id("02075503622"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_polish_national_id("-99012212349"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_polish_national_id("990122123499999"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_polish_national_id("02070803621"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
