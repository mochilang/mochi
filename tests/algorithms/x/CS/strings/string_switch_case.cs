// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[] split_words(string s_0) {
        string[] words_1 = new string[]{};
        string current_2 = "";
        for (var _i31 = 0; _i31 < s_0.Length; _i31++) {
            var ch_3 = s_0.Substring((int)(_i31), 1);
            if ((ch_3 == " ")) {
                if ((current_2 != "")) {
                    words_1 = (Enumerable.ToArray(Enumerable.Append<string>(words_1, current_2)));
                    current_2 = "";
                }
            } else {
                current_2 = (((dynamic)(current_2)) + ((dynamic)(ch_3)));
            }
        };
        if ((current_2 != "")) {
            words_1 = (Enumerable.ToArray(Enumerable.Append<string>(words_1, current_2)));
        };
        return words_1;
    }

    public static bool is_alnum(string c_4) {
        return (((("0123456789".Contains(c_4)) || ("abcdefghijklmnopqrstuvwxyz".Contains(c_4))) || ("ABCDEFGHIJKLMNOPQRSTUVWXYZ".Contains(c_4))) || (c_4 == " "));
    }

    public static string[][] split_input(string text_5) {
        string[][] result_6 = new string[][]{};
        string current_7 = "";
        for (var _i32 = 0; _i32 < text_5.Length; _i32++) {
            var ch_8 = text_5.Substring((int)(_i32), 1);
            if (Program.is_alnum(ch_8)) {
                current_7 = (((dynamic)(current_7)) + ((dynamic)(ch_8)));
            } else if ((current_7 != "")) {
                result_6 = (Enumerable.ToArray(Enumerable.Append<string[]>(result_6, Program.split_words(current_7))));
                current_7 = "";
            }
        };
        if ((current_7 != "")) {
            result_6 = (Enumerable.ToArray(Enumerable.Append<string[]>(result_6, Program.split_words(current_7))));
        };
        return result_6;
    }

    public static string capitalize(string word_9) {
        if ((word_9.Length == 0)) {
            return "";
        };
        if ((word_9.Length == 1)) {
            return word_9.ToUpper();
        };
        return (_substr(word_9, 0, 1).ToUpper() + _substr(word_9, 1, word_9.Length).ToLower());
    }

    public static string to_simple_case(string text_10) {
        string[][] parts_11 = Program.split_input(text_10);
        string res_12 = "";
        foreach (string[] sub_13 in parts_11) {
            foreach (string w_14 in sub_13) {
                res_12 = (res_12 + Program.capitalize(w_14));
            }
        };
        return res_12;
    }

    public static string to_complex_case(string text_15, bool upper_flag_16, string sep_17) {
        string[][] parts_18 = Program.split_input(text_15);
        string res_19 = "";
        foreach (string[] sub_20 in parts_18) {
            bool first_21 = true;
            foreach (string w_22 in sub_20) {
                string word_23 = (upper_flag_16 ? w_22.ToUpper() : w_22.ToLower());
                if (first_21) {
                    res_19 = (res_19 + word_23);
                    first_21 = false;
                } else {
                    res_19 = ((res_19 + sep_17) + word_23);
                }
            }
        };
        return res_19;
    }

    public static string to_pascal_case(string text_24) {
        return Program.to_simple_case(text_24);
    }

    public static string to_camel_case(string text_25) {
        string s_26 = Program.to_simple_case(text_25);
        if ((s_26.Length == 0)) {
            return "";
        };
        return (_substr(s_26, 0, 1).ToLower() + _substr(s_26, 1, s_26.Length));
    }

    public static string to_snake_case(string text_27, bool upper_flag_28) {
        return Program.to_complex_case(text_27, upper_flag_28, "_");
    }

    public static string to_kebab_case(string text_29, bool upper_flag_30) {
        return Program.to_complex_case(text_29, upper_flag_30, "-");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.to_pascal_case("one two 31235three4four")));
            Console.WriteLine(Program._fmtTop(Program.to_camel_case("one two 31235three4four")));
            Console.WriteLine(Program._fmtTop(Program.to_snake_case("one two 31235three4four", true)));
            Console.WriteLine(Program._fmtTop(Program.to_snake_case("one two 31235three4four", false)));
            Console.WriteLine(Program._fmtTop(Program.to_kebab_case("one two 31235three4four", true)));
            Console.WriteLine(Program._fmtTop(Program.to_kebab_case("one two 31235three4four", false)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
