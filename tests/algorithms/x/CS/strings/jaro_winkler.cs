// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long min_int(long a_0, long b_1) {
        if ((a_0 < b_1)) {
            return a_0;
        } else {
            return b_1;
        };
        return default(long);
    }

    public static long max_int(long a_2, long b_3) {
        if ((a_2 > b_3)) {
            return a_2;
        } else {
            return b_3;
        };
        return default(long);
    }

    public static bool[] repeat_bool(long n_4, bool value_5) {
        bool[] res_6 = new bool[]{};
        long i_7 = 0;
        while ((i_7 < n_4)) {
            res_6 = (Enumerable.ToArray(Enumerable.Append<bool>(res_6, value_5)));
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static bool[] set_bool(bool[] xs_8, long idx_9, bool value_10) {
        bool[] res_11 = new bool[]{};
        long i_12 = 0;
        while ((i_12 < xs_8.Length)) {
            if ((i_12 == idx_9)) {
                res_11 = (Enumerable.ToArray(Enumerable.Append<bool>(res_11, value_10)));
            } else {
                res_11 = (Enumerable.ToArray(Enumerable.Append<bool>(res_11, xs_8[(int)(i_12)])));
            }
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static double jaro_winkler(string s1_13, string s2_14) {
        long len1_15 = s1_13.Length;
        long len2_16 = s2_14.Length;
        long limit_17 = (Program.min_int(len1_15, len2_16) / 2);
        bool[] match1_18 = Program.repeat_bool(len1_15, false);
        bool[] match2_19 = Program.repeat_bool(len2_16, false);
        long matches_20 = 0;
        long i_21 = 0;
        while ((i_21 < len1_15)) {
            long start_22 = Program.max_int(0, (i_21 - limit_17));
            long end_23 = Program.min_int(((i_21 + limit_17) + 1), len2_16);
            long j_24 = start_22;
            while ((j_24 < end_23)) {
                if (((!match2_19[(int)(j_24)]) && (_substr(s1_13, i_21, (i_21 + 1)) == _substr(s2_14, j_24, (j_24 + 1))))) {
                    match1_18 = Program.set_bool(match1_18, i_21, true);
                    match2_19 = Program.set_bool(match2_19, j_24, true);
                    matches_20 = (matches_20 + 1);
                    break;
                }
                j_24 = (j_24 + 1);
            }
            i_21 = (i_21 + 1);
        };
        if ((matches_20 == 0)) {
            return 0.0;
        };
        long transpositions_25 = 0;
        long k_26 = 0;
        i_21 = 0;
        while ((i_21 < len1_15)) {
            if (match1_18[(int)(i_21)]) {
                while ((!match2_19[(int)(k_26)])) {
                    k_26 = (k_26 + 1);
                }
                if ((_substr(s1_13, i_21, (i_21 + 1)) != _substr(s2_14, k_26, (k_26 + 1)))) {
                    transpositions_25 = (transpositions_25 + 1);
                }
                k_26 = (k_26 + 1);
            }
            i_21 = (i_21 + 1);
        };
        double m_27 = Convert.ToDouble(matches_20);
        double jaro_28 = ((((m_27 / Convert.ToDouble(len1_15)) + (m_27 / Convert.ToDouble(len2_16))) + ((m_27 - (Convert.ToDouble(transpositions_25) / 2.0)) / m_27)) / 3.0);
        long prefix_len_29 = 0;
        i_21 = 0;
        while ((((i_21 < 4) && (i_21 < len1_15)) && (i_21 < len2_16))) {
            if ((_substr(s1_13, i_21, (i_21 + 1)) == _substr(s2_14, i_21, (i_21 + 1)))) {
                prefix_len_29 = (prefix_len_29 + 1);
            } else {
                break;
            }
            i_21 = (i_21 + 1);
        };
        return (jaro_28 + ((0.1 * Convert.ToDouble(prefix_len_29)) * (1.0 - jaro_28)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.jaro_winkler("hello", "world"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
