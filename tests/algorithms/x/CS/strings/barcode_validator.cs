// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool has_alpha(string s_0) {
        long i_1 = 0;
        while ((i_1 < s_0.Length)) {
            string c_2 = s_0.Substring((int)(i_1), 1);
            if ((((string.Compare(c_2, "a") >= 0) && (string.Compare(c_2, "z") <= 0)) || ((string.Compare(c_2, "A") >= 0) && (string.Compare(c_2, "Z") <= 0)))) {
                return true;
            }
            i_1 = (i_1 + 1);
        };
        return false;
    }

    public static long parse_decimal(string s_3) {
        long value_4 = 0;
        long i_5 = 0;
        while ((i_5 < s_3.Length)) {
            string c_6 = s_3.Substring((int)(i_5), 1);
            if (((string.Compare(c_6, "0") < 0) || (string.Compare(c_6, "9") > 0))) {
                throw new Exception("Non-digit character encountered");
            }
            value_4 = ((value_4 * 10) + long.Parse(c_6));
            i_5 = (i_5 + 1);
        };
        return value_4;
    }

    public static long get_barcode(string barcode_7) {
        if (Program.has_alpha(barcode_7)) {
            throw new Exception((("Barcode '" + barcode_7) + "' has alphabetic characters."));
        };
        if (((barcode_7.Length > 0) && (barcode_7.Substring((int)(0), 1) == "-"))) {
            throw new Exception("The entered barcode has a negative value. Try again.");
        };
        return Program.parse_decimal(barcode_7);
    }

    public static long get_check_digit(long barcode_8) {
        long num_9 = (barcode_8 / 10);
        long s_10 = 0;
        long position_11 = 0;
        while ((num_9 != 0)) {
            long mult_12 = ((_mod(position_11, 2) == 0) ? 3 : 1);
            s_10 = (s_10 + (mult_12 * _mod(num_9, 10)));
            num_9 = (num_9 / 10);
            position_11 = (position_11 + 1);
        };
        return _mod((10 - _mod(s_10, 10)), 10);
    }

    public static bool is_valid(long barcode_13) {
        return ((_fmtStr(barcode_13).Length == 13) && (Program.get_check_digit(barcode_13) == _mod(barcode_13, 10)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_check_digit(8718452538119L))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_check_digit(87184523))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_check_digit(87193425381086L))));
            long[] res_14 = new long[]{};
            long x_15 = 0;
            while ((x_15 < 100)) {
                res_14 = (Enumerable.ToArray(Enumerable.Append<long>(res_14, Program.get_check_digit(x_15))));
                x_15 = (x_15 + 10);
            }
            Console.WriteLine(Program._fmtTop(res_14));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_valid(8718452538119L))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_valid(87184525))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_valid(87193425381089L))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_valid(0))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.get_barcode("8718452538119"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
