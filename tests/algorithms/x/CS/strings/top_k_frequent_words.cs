// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class WordCount {
    public string word;
    public long count;
    public override string ToString() => $"WordCount {{word = \"{word}\", count = {count}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, long> freq_map_0 = new Dictionary<string, long>{};
    public static void heapify(WordCount[] arr_1, long index_2, long heap_size_3) {
        long largest_4 = index_2;
        long left_5 = ((2 * index_2) + 1);
        long right_6 = ((2 * index_2) + 2);
        if ((left_5 < heap_size_3)) {
            WordCount left_item_7 = arr_1[(int)(left_5)];
            WordCount largest_item_8 = arr_1[(int)(largest_4)];
            if ((left_item_7.count > largest_item_8.count)) {
                largest_4 = left_5;
            }
        };
        if ((right_6 < heap_size_3)) {
            WordCount right_item_9 = arr_1[(int)(right_6)];
            WordCount largest_item2_10 = arr_1[(int)(largest_4)];
            if ((right_item_9.count > largest_item2_10.count)) {
                largest_4 = right_6;
            }
        };
        if ((largest_4 != index_2)) {
            WordCount temp_11 = arr_1[(int)(largest_4)];
            arr_1[(int)(largest_4)] = arr_1[(int)(index_2)];
            arr_1[(int)(index_2)] = temp_11;
            Program.heapify(arr_1, largest_4, heap_size_3);
        };
    }

    public static void build_max_heap(WordCount[] arr_12) {
        long i_13 = ((arr_12.Length / 2) - 1);
        while ((i_13 >= 0)) {
            Program.heapify(arr_12, i_13, arr_12.Length);
            i_13 = (i_13 - 1);
        };
    }

    public static string[] top_k_frequent_words(string[] words_14, long k_value_15) {
        freq_map_0 = new Dictionary<string, long>{};
        long i_16 = 0;
        while ((i_16 < words_14.Length)) {
            string w_17 = words_14[(int)(i_16)];
            if ((freq_map_0.ContainsKey(w_17))) {
                freq_map_0[w_17] = ((freq_map_0.ContainsKey(w_17) ? freq_map_0[w_17] : 0) + 1);
            } else {
                freq_map_0[w_17] = 1;
            }
            i_16 = (i_16 + 1);
        };
        WordCount[] heap_18 = new WordCount[]{};
        foreach (string w_19 in freq_map_0.Keys) {
            heap_18 = (Enumerable.ToArray(Enumerable.Append<WordCount>(heap_18, new WordCount{word = w_19, count = (freq_map_0.ContainsKey(w_19) ? freq_map_0[w_19] : 0)})));
        };
        Program.build_max_heap(heap_18);
        string[] result_20 = new string[]{};
        long heap_size_21 = heap_18.Length;
        long limit_22 = k_value_15;
        if ((limit_22 > heap_size_21)) {
            limit_22 = heap_size_21;
        };
        long j_23 = 0;
        while ((j_23 < limit_22)) {
            WordCount item_24 = heap_18[(int)(0)];
            result_20 = (Enumerable.ToArray(Enumerable.Append<string>(result_20, item_24.word)));
            heap_18[(int)(0)] = heap_18[(int)((heap_size_21 - 1))];
            heap_18[(int)((heap_size_21 - 1))] = item_24;
            heap_size_21 = (heap_size_21 - 1);
            Program.heapify(heap_18, 0, heap_size_21);
            j_23 = (j_23 + 1);
        };
        return result_20;
    }

    public static void main() {
        string[] sample_25 = new string[]{"a", "b", "c", "a", "c", "c"};
        Console.WriteLine(Program._fmtTop(Program.top_k_frequent_words(sample_25, 3)));
        Console.WriteLine(Program._fmtTop(Program.top_k_frequent_words(sample_25, 2)));
        Console.WriteLine(Program._fmtTop(Program.top_k_frequent_words(sample_25, 1)));
        Console.WriteLine(Program._fmtTop(Program.top_k_frequent_words(sample_25, 0)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
