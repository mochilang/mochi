// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long damerau_levenshtein_distance(string first_string_0, string second_string_1) {
        long len1_2 = first_string_0.Length;
        long len2_3 = second_string_1.Length;
        long[][] dp_matrix_4 = new long[][]{};
        for (var __5 = 0; __5 < (len1_2 + 1); __5++) {
            long[] row_6 = new long[]{};
            for (var _2_7 = 0; _2_7 < (len2_3 + 1); _2_7++) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<long>(row_6, 0)));
            }
            dp_matrix_4 = (Enumerable.ToArray(Enumerable.Append<long[]>(dp_matrix_4, row_6)));
        };
        for (var i_8 = 0; i_8 < (len1_2 + 1); i_8++) {
            long[] row_9 = dp_matrix_4[(int)(i_8)];
            row_9[(int)(0)] = i_8;
            dp_matrix_4[(int)(i_8)] = row_9;
        };
        long[] first_row_10 = dp_matrix_4[(int)(0)];
        for (var j_11 = 0; j_11 < (len2_3 + 1); j_11++) {
            first_row_10[(int)(j_11)] = j_11;
        };
        dp_matrix_4[(int)(0)] = first_row_10;
        for (var i_12 = 1; i_12 < (len1_2 + 1); i_12++) {
            long[] row_13 = dp_matrix_4[(int)(i_12)];
            string first_char_14 = _substr(first_string_0, (i_12 - 1), i_12);
            for (var j_15 = 1; j_15 < (len2_3 + 1); j_15++) {
                string second_char_16 = _substr(second_string_1, (j_15 - 1), j_15);
                long cost_17 = ((first_char_14 == second_char_16) ? 0 : 1);
                long value_18 = (dp_matrix_4[(int)((i_12 - 1))][(int)(j_15)] + 1);
                long insertion_19 = (row_13[(int)((j_15 - 1))] + 1);
                if ((insertion_19 < value_18)) {
                    value_18 = insertion_19;
                }
                long substitution_20 = (dp_matrix_4[(int)((i_12 - 1))][(int)((j_15 - 1))] + cost_17);
                if ((substitution_20 < value_18)) {
                    value_18 = substitution_20;
                }
                row_13[(int)(j_15)] = value_18;
                if (((((i_12 > 1) && (j_15 > 1)) && (_substr(first_string_0, (i_12 - 1), i_12) == _substr(second_string_1, (j_15 - 2), (j_15 - 1)))) && (_substr(first_string_0, (i_12 - 2), (i_12 - 1)) == _substr(second_string_1, (j_15 - 1), j_15)))) {
                    long transposition_21 = (dp_matrix_4[(int)((i_12 - 2))][(int)((j_15 - 2))] + cost_17);
                    if ((transposition_21 < row_13[(int)(j_15)])) {
                        row_13[(int)(j_15)] = transposition_21;
                    }
                }
            }
            dp_matrix_4[(int)(i_12)] = row_13;
        };
        return dp_matrix_4[(int)(len1_2)][(int)(len2_3)];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.damerau_levenshtein_distance("cat", "cut"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.damerau_levenshtein_distance("kitten", "sitting"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.damerau_levenshtein_distance("hello", "world"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.damerau_levenshtein_distance("book", "back"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.damerau_levenshtein_distance("container", "containment"))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
