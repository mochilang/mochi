// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] z_function(string s_0) {
        long[] z_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            z_1 = (Enumerable.ToArray(Enumerable.Append<long>(z_1, 0)));
            i_2 = (i_2 + 1);
        };
        long l_3 = 0;
        long r_4 = 0;
        i_2 = 1;
        while ((i_2 < s_0.Length)) {
            if ((i_2 <= r_4)) {
                long min_edge_5 = ((r_4 - i_2) + 1);
                long zi_6 = z_1[(int)((i_2 - l_3) < 0 ? z_1.Length + ((i_2 - l_3)) : (i_2 - l_3))];
                if ((zi_6 < min_edge_5)) {
                    min_edge_5 = zi_6;
                }
                z_1[(int)(i_2)] = min_edge_5;
            }
            while (Program.go_next(i_2, z_1, s_0)) {
                z_1[(int)(i_2)] = (z_1[(int)(i_2 < 0 ? z_1.Length + (i_2) : i_2)] + 1);
            }
            if ((((i_2 + z_1[(int)(i_2 < 0 ? z_1.Length + (i_2) : i_2)]) - 1) > r_4)) {
                l_3 = i_2;
                r_4 = ((i_2 + z_1[(int)(i_2 < 0 ? z_1.Length + (i_2) : i_2)]) - 1);
            }
            i_2 = (i_2 + 1);
        };
        return z_1;
    }

    public static bool go_next(long i_7, long[] z_8, string s_9) {
        return (((i_7 + z_8[(int)(i_7 < 0 ? z_8.Length + (i_7) : i_7)]) < s_9.Length) && (s_9.Substring((int)(z_8[(int)(i_7 < 0 ? z_8.Length + (i_7) : i_7)]), 1) == s_9.Substring((int)((i_7 + z_8[(int)(i_7 < 0 ? z_8.Length + (i_7) : i_7)])), 1)));
    }

    public static long find_pattern(string pattern_10, string input_str_11) {
        long answer_12 = 0;
        long[] z_res_13 = Program.z_function((pattern_10 + input_str_11));
        long i_14 = 0;
        while ((i_14 < z_res_13.Length)) {
            if ((z_res_13[(int)(i_14 < 0 ? z_res_13.Length + (i_14) : i_14)] >= pattern_10.Length)) {
                answer_12 = (answer_12 + 1);
            }
            i_14 = (i_14 + 1);
        };
        return answer_12;
    }

    public static bool list_eq_int(long[] a_15, long[] b_16) {
        if ((a_15.Length != b_16.Length)) {
            return false;
        };
        long i_17 = 0;
        while ((i_17 < a_15.Length)) {
            if ((a_15[(int)(i_17 < 0 ? a_15.Length + (i_17) : i_17)] != b_16[(int)(i_17 < 0 ? b_16.Length + (i_17) : i_17)])) {
                return false;
            }
            i_17 = (i_17 + 1);
        };
        return true;
    }

    public static void test_z_function() {
        string s1_18 = "abracadabra";
        long[] expected1_19 = new long[]{0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1};
        long[] r1_20 = Program.z_function(s1_18);
        if ((!Program.list_eq_int(r1_20, expected1_19))) {
            throw new Exception("z_function abracadabra failed");
        };
        string s2_21 = "aaaa";
        long[] expected2_22 = new long[]{0, 3, 2, 1};
        long[] r2_23 = Program.z_function(s2_21);
        if ((!Program.list_eq_int(r2_23, expected2_22))) {
            throw new Exception("z_function aaaa failed");
        };
        string s3_24 = "zxxzxxz";
        long[] expected3_25 = new long[]{0, 0, 0, 4, 0, 0, 1};
        long[] r3_26 = Program.z_function(s3_24);
        if ((!Program.list_eq_int(r3_26, expected3_25))) {
            throw new Exception("z_function zxxzxxz failed");
        };
    }

    public static void test_find_pattern() {
        if ((Program.find_pattern("abr", "abracadabra") != 2)) {
            throw new Exception("find_pattern abr failed");
        };
        if ((Program.find_pattern("a", "aaaa") != 4)) {
            throw new Exception("find_pattern aaaa failed");
        };
        if ((Program.find_pattern("xz", "zxxzxxz") != 2)) {
            throw new Exception("find_pattern xz failed");
        };
    }

    public static void main() {
        Program.test_z_function();
        Program.test_find_pattern();
        long[] r1_27 = Program.z_function("abracadabra");
        long[] r2_28 = Program.z_function("aaaa");
        long[] r3_29 = Program.z_function("zxxzxxz");
        Console.WriteLine(Program._fmtTop(_fmtStr(r1_27)));
        Console.WriteLine(Program._fmtTop(_fmtStr(r2_28)));
        Console.WriteLine(Program._fmtTop(_fmtStr(r3_29)));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_pattern("abr", "abracadabra"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_pattern("a", "aaaa"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_pattern("xz", "zxxzxxz"))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
