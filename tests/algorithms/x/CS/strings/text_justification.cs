// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string repeat_str(string s_0, long count_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < count_1)) {
            res_2 = (res_2 + s_0);
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string[] split_words(string s_4) {
        string[] res_5 = new string[]{};
        string current_6 = "";
        long i_7 = 0;
        while ((i_7 < s_4.Length)) {
            string ch_8 = _substr(s_4, i_7, (i_7 + 1));
            if ((ch_8 == " ")) {
                if ((current_6 != "")) {
                    res_5 = (Enumerable.ToArray(Enumerable.Append<string>(res_5, current_6)));
                    current_6 = "";
                }
            } else {
                current_6 = (current_6 + ch_8);
            }
            i_7 = (i_7 + 1);
        };
        if ((current_6 != "")) {
            res_5 = (Enumerable.ToArray(Enumerable.Append<string>(res_5, current_6)));
        };
        return res_5;
    }

    public static string justify_line(string[] line_9, long width_10, long max_width_11) {
        long overall_spaces_count_12 = (max_width_11 - width_10);
        long words_count_13 = line_9.Length;
        if ((words_count_13 == 1)) {
            return (line_9[(int)(0)] + Program.repeat_str(" ", overall_spaces_count_12));
        };
        long spaces_to_insert_between_words_14 = (words_count_13 - 1);
        long[] num_spaces_between_words_list_15 = new long[]{};
        long base_16 = (overall_spaces_count_12 / spaces_to_insert_between_words_14);
        long extra_17 = _mod(overall_spaces_count_12, spaces_to_insert_between_words_14);
        long i_18 = 0;
        while ((i_18 < spaces_to_insert_between_words_14)) {
            long spaces_19 = base_16;
            if ((i_18 < extra_17)) {
                spaces_19 = (spaces_19 + 1);
            }
            num_spaces_between_words_list_15 = (Enumerable.ToArray(Enumerable.Append<long>(num_spaces_between_words_list_15, spaces_19)));
            i_18 = (i_18 + 1);
        };
        string aligned_20 = "";
        i_18 = 0;
        while ((i_18 < spaces_to_insert_between_words_14)) {
            aligned_20 = ((aligned_20 + line_9[(int)(i_18)]) + Program.repeat_str(" ", num_spaces_between_words_list_15[(int)(i_18)]));
            i_18 = (i_18 + 1);
        };
        aligned_20 = (aligned_20 + line_9[(int)(spaces_to_insert_between_words_14)]);
        return aligned_20;
    }

    public static string[] text_justification(string word_21, long max_width_22) {
        string[] words_23 = Program.split_words(word_21);
        string[] answer_24 = new string[]{};
        string[] line_25 = new string[]{};
        long width_26 = 0;
        long idx_27 = 0;
        while ((idx_27 < words_23.Length)) {
            string w_28 = words_23[(int)(idx_27)];
            if ((((width_26 + w_28.Length) + line_25.Length) <= max_width_22)) {
                line_25 = (Enumerable.ToArray(Enumerable.Append<string>(line_25, w_28)));
                width_26 = (width_26 + w_28.Length);
            } else {
                answer_24 = (Enumerable.ToArray(Enumerable.Append<string>(answer_24, Program.justify_line(line_25, width_26, max_width_22))));
                line_25 = new string[]{w_28};
                width_26 = w_28.Length;
            }
            idx_27 = (idx_27 + 1);
        };
        long remaining_spaces_29 = ((max_width_22 - width_26) - line_25.Length);
        string last_line_30 = "";
        long j_31 = 0;
        while ((j_31 < line_25.Length)) {
            if ((j_31 > 0)) {
                last_line_30 = (last_line_30 + " ");
            }
            last_line_30 = (last_line_30 + line_25[(int)(j_31)]);
            j_31 = (j_31 + 1);
        };
        last_line_30 = (last_line_30 + Program.repeat_str(" ", (remaining_spaces_29 + 1)));
        answer_24 = (Enumerable.ToArray(Enumerable.Append<string>(answer_24, last_line_30)));
        return answer_24;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.text_justification("This is an example of text justification.", 16))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.text_justification("Two roads diverged in a yellow wood", 16))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
