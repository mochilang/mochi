// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string strip_and_remove_spaces(string s_0) {
        long start_1 = 0;
        long end_2 = (s_0.Length - 1);
        while (((start_1 < s_0.Length) && (s_0.Substring((int)(start_1), 1) == " "))) {
            start_1 = (start_1 + 1);
        };
        while (((end_2 >= start_1) && (s_0.Substring((int)(end_2), 1) == " "))) {
            end_2 = (end_2 - 1);
        };
        string res_3 = "";
        long i_4 = start_1;
        while ((i_4 <= end_2)) {
            string ch_5 = s_0.Substring((int)(i_4), 1);
            if ((ch_5 != " ")) {
                res_3 = (res_3 + ch_5);
            }
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static bool check_anagrams(string a_6, string b_7) {
        string s1_8 = a_6.ToLower();
        string s2_9 = b_7.ToLower();
        s1_8 = Program.strip_and_remove_spaces(s1_8);
        s2_9 = Program.strip_and_remove_spaces(s2_9);
        if ((s1_8.Length != s2_9.Length)) {
            return false;
        };
        Dictionary<string, long> count_10 = new Dictionary<string, long>{};
        long i_11 = 0;
        while ((i_11 < s1_8.Length)) {
            string c1_12 = s1_8.Substring((int)(i_11), 1);
            string c2_13 = s2_9.Substring((int)(i_11), 1);
            if ((count_10.ContainsKey(c1_12))) {
                count_10[c1_12] = ((count_10.ContainsKey(c1_12) ? count_10[c1_12] : 0) + 1);
            } else {
                count_10[c1_12] = 1;
            }
            if ((count_10.ContainsKey(c2_13))) {
                count_10[c2_13] = ((count_10.ContainsKey(c2_13) ? count_10[c2_13] : 0) - 1);
            } else {
                count_10[c2_13] = -1;
            }
            i_11 = (i_11 + 1);
        };
        foreach (string ch_14 in count_10.Keys) {
            if (((count_10.ContainsKey(ch_14) ? count_10[ch_14] : 0) != 0)) {
                return false;
            }
        };
        return true;
    }

    public static void print_bool(bool b_15) {
        if (b_15) {
            Console.WriteLine(Program._fmtTop(true));
        } else {
            Console.WriteLine(Program._fmtTop(false));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_bool(Program.check_anagrams("Silent", "Listen"));
            Program.print_bool(Program.check_anagrams("This is a string", "Is this a string"));
            Program.print_bool(Program.check_anagrams("This is    a      string", "Is     this a string"));
            Program.print_bool(Program.check_anagrams("There", "Their"));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
