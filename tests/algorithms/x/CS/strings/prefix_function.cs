// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] prefix_function(string s_0) {
        long[] pi_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            pi_1 = (Enumerable.ToArray(Enumerable.Append<long>(pi_1, 0)));
            i_2 = (i_2 + 1);
        };
        i_2 = 1;
        while ((i_2 < s_0.Length)) {
            long j_3 = pi_1[(int)((i_2 - 1))];
            while (((j_3 > 0) && (s_0.Substring((int)(i_2), 1) != s_0.Substring((int)(j_3), 1)))) {
                j_3 = pi_1[(int)((j_3 - 1))];
            }
            if ((s_0.Substring((int)(i_2), 1) == s_0.Substring((int)(j_3), 1))) {
                j_3 = (j_3 + 1);
            }
            pi_1[(int)(i_2)] = j_3;
            i_2 = (i_2 + 1);
        };
        return pi_1;
    }

    public static long longest_prefix(string s_4) {
        long[] pi_5 = Program.prefix_function(s_4);
        long max_val_6 = 0;
        long i_7 = 0;
        while ((i_7 < pi_5.Length)) {
            if ((pi_5[(int)(i_7)] > max_val_6)) {
                max_val_6 = pi_5[(int)(i_7)];
            }
            i_7 = (i_7 + 1);
        };
        return max_val_6;
    }

    public static bool list_eq_int(long[] a_8, long[] b_9) {
        if ((a_8.Length != b_9.Length)) {
            return false;
        };
        long i_10 = 0;
        while ((i_10 < a_8.Length)) {
            if ((a_8[(int)(i_10)] != b_9[(int)(i_10)])) {
                return false;
            }
            i_10 = (i_10 + 1);
        };
        return true;
    }

    public static void test_prefix_function() {
        string s1_11 = "aabcdaabc";
        long[] expected1_12 = new long[]{0, 1, 0, 0, 0, 1, 2, 3, 4};
        long[] r1_13 = Program.prefix_function(s1_11);
        if ((!Program.list_eq_int(r1_13, expected1_12))) {
            throw new Exception("prefix_function aabcdaabc failed");
        };
        string s2_14 = "asdasdad";
        long[] expected2_15 = new long[]{0, 0, 0, 1, 2, 3, 4, 0};
        long[] r2_16 = Program.prefix_function(s2_14);
        if ((!Program.list_eq_int(r2_16, expected2_15))) {
            throw new Exception("prefix_function asdasdad failed");
        };
    }

    public static void test_longest_prefix() {
        if ((Program.longest_prefix("aabcdaabc") != 4)) {
            throw new Exception("longest_prefix example1 failed");
        };
        if ((Program.longest_prefix("asdasdad") != 4)) {
            throw new Exception("longest_prefix example2 failed");
        };
        if ((Program.longest_prefix("abcab") != 2)) {
            throw new Exception("longest_prefix example3 failed");
        };
    }

    public static void main() {
        Program.test_prefix_function();
        Program.test_longest_prefix();
        long[] r1_17 = Program.prefix_function("aabcdaabc");
        long[] r2_18 = Program.prefix_function("asdasdad");
        Console.WriteLine(Program._fmtTop(_fmtStr(r1_17)));
        Console.WriteLine(Program._fmtTop(_fmtStr(r2_18)));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_prefix("aabcdaabc"))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.longest_prefix("abcab"))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
