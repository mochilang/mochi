// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool contains(string chars_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < chars_0.Length)) {
            if ((chars_0.Substring((int)(i_2), 1) == ch_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static string substring(string s_3, long start_4, long end_5) {
        string res_6 = "";
        long i_7 = start_4;
        while ((i_7 < end_5)) {
            res_6 = (res_6 + s_3.Substring((int)(i_7), 1));
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static string strip_chars(string user_string_8, string characters_9) {
        long start_10 = 0;
        long end_11 = user_string_8.Length;
        while (((start_10 < end_11) && Program.contains(characters_9, user_string_8.Substring((int)(start_10), 1)))) {
            start_10 = (start_10 + 1);
        };
        while (((end_11 > start_10) && Program.contains(characters_9, user_string_8.Substring((int)((end_11 - 1)), 1)))) {
            end_11 = (end_11 - 1);
        };
        return Program.substring(user_string_8, start_10, end_11);
    }

    public static string strip(string user_string_12) {
        return Program.strip_chars(user_string_12, " \t\n\r");
    }

    public static void test_strip() {
        if ((Program.strip("   hello   ") != "hello")) {
            throw new Exception("test1 failed");
        };
        if ((Program.strip_chars("...world...", ".") != "world")) {
            throw new Exception("test2 failed");
        };
        if ((Program.strip_chars("123hello123", "123") != "hello")) {
            throw new Exception("test3 failed");
        };
        if ((Program.strip("") != "")) {
            throw new Exception("test4 failed");
        };
    }

    public static void main() {
        Program.test_strip();
        Console.WriteLine(Program._fmtTop(Program.strip("   hello   ")));
        Console.WriteLine(Program._fmtTop(Program.strip_chars("...world...", ".")));
        Console.WriteLine(Program._fmtTop(Program.strip_chars("123hello123", "123")));
        Console.WriteLine(Program._fmtTop(Program.strip("")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
