// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long MAX_LOCAL_PART_OCTETS_0 = 64;
    static long MAX_DOMAIN_OCTETS_1 = 255;
    static string ASCII_LETTERS_2 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string DIGITS_3 = "0123456789";
    static string LOCAL_EXTRA_4 = ".(!#$%&'*+-/=?^_`{|}~)";
    static string DOMAIN_EXTRA_5 = ".-";
    static string[] email_tests_27 = new string[]{"simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", ""};
    static long idx_28 = 0;
    public static long count_char(string s_6, string target_7) {
        long cnt_8 = 0;
        long i_9 = 0;
        while ((i_9 < s_6.Length)) {
            if ((_substr(s_6, i_9, (i_9 + 1)) == target_7)) {
                cnt_8 = (cnt_8 + 1);
            }
            i_9 = (i_9 + 1);
        };
        return cnt_8;
    }

    public static bool char_in(string c_10, string allowed_11) {
        long i_12 = 0;
        while ((i_12 < allowed_11.Length)) {
            if ((_substr(allowed_11, i_12, (i_12 + 1)) == c_10)) {
                return true;
            }
            i_12 = (i_12 + 1);
        };
        return false;
    }

    public static bool starts_with_char(string s_13, string c_14) {
        return ((s_13.Length > 0) && (_substr(s_13, 0, 1) == c_14));
    }

    public static bool ends_with_char(string s_15, string c_16) {
        return ((s_15.Length > 0) && (_substr(s_15, (s_15.Length - 1), s_15.Length) == c_16));
    }

    public static bool contains_double_dot(string s_17) {
        if ((s_17.Length < 2)) {
            return false;
        };
        long i_18 = 0;
        while ((i_18 < (s_17.Length - 1))) {
            if ((_substr(s_17, i_18, (i_18 + 2)) == "..")) {
                return true;
            }
            i_18 = (i_18 + 1);
        };
        return false;
    }

    public static bool is_valid_email_address(string email_19) {
        if ((Program.count_char(email_19, "@") != 1)) {
            return false;
        };
        long at_idx_20 = 0;
        long i_21 = 0;
        while ((i_21 < email_19.Length)) {
            if ((_substr(email_19, i_21, (i_21 + 1)) == "@")) {
                at_idx_20 = i_21;
                break;
            }
            i_21 = (i_21 + 1);
        };
        string local_part_22 = _substr(email_19, 0, at_idx_20);
        string domain_23 = _substr(email_19, (at_idx_20 + 1), email_19.Length);
        if (((local_part_22.Length > MAX_LOCAL_PART_OCTETS_0) || (domain_23.Length > MAX_DOMAIN_OCTETS_1))) {
            return false;
        };
        long i_24 = 0;
        while ((i_24 < local_part_22.Length)) {
            string ch_25 = _substr(local_part_22, i_24, (i_24 + 1));
            if ((!Program.char_in(ch_25, ((ASCII_LETTERS_2 + DIGITS_3) + LOCAL_EXTRA_4)))) {
                return false;
            }
            i_24 = (i_24 + 1);
        };
        if (((Program.starts_with_char(local_part_22, ".") || Program.ends_with_char(local_part_22, ".")) || Program.contains_double_dot(local_part_22))) {
            return false;
        };
        i_24 = 0;
        while ((i_24 < domain_23.Length)) {
            string ch_26 = _substr(domain_23, i_24, (i_24 + 1));
            if ((!Program.char_in(ch_26, ((ASCII_LETTERS_2 + DIGITS_3) + DOMAIN_EXTRA_5)))) {
                return false;
            }
            i_24 = (i_24 + 1);
        };
        if ((Program.starts_with_char(domain_23, "-") || Program.ends_with_char(domain_23, "."))) {
            return false;
        };
        if (((Program.starts_with_char(domain_23, ".") || Program.ends_with_char(domain_23, ".")) || Program.contains_double_dot(domain_23))) {
            return false;
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_28 < email_tests_27.Length)) {
                string email_29 = email_tests_27[(int)(idx_28)];
                Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_valid_email_address(email_29))));
                idx_28 = (idx_28 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
