// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long alphabet_size_0 = 256;
    static long modulus_1 = 1000003;
    public static long index_of_char(string s_2, string ch_3) {
        long i_4 = 0;
        while ((i_4 < s_2.Length)) {
            if ((s_2.Substring((int)(i_4), 1) == ch_3)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    public static long ord(string ch_5) {
        string upper_6 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_7 = "abcdefghijklmnopqrstuvwxyz";
        string digits_8 = "0123456789";
        long idx_9 = Program.index_of_char(upper_6, ch_5);
        if ((idx_9 >= 0)) {
            return (65 + idx_9);
        };
        idx_9 = Program.index_of_char(lower_7, ch_5);
        if ((idx_9 >= 0)) {
            return (97 + idx_9);
        };
        idx_9 = Program.index_of_char(digits_8, ch_5);
        if ((idx_9 >= 0)) {
            return (48 + idx_9);
        };
        if ((ch_5 == "ü")) {
            return 252;
        };
        if ((ch_5 == "Ü")) {
            return 220;
        };
        if ((ch_5 == " ")) {
            return 32;
        };
        return 0;
    }

    public static bool rabin_karp(string pattern_10, string text_11) {
        long p_len_12 = pattern_10.Length;
        long t_len_13 = text_11.Length;
        if ((p_len_12 > t_len_13)) {
            return false;
        };
        long p_hash_14 = 0;
        long t_hash_15 = 0;
        long modulus_power_16 = 1;
        long i_17 = 0;
        while ((i_17 < p_len_12)) {
            p_hash_14 = _mod((Program.ord(pattern_10.Substring((int)(i_17), 1)) + (p_hash_14 * alphabet_size_0)), modulus_1);
            t_hash_15 = _mod((Program.ord(text_11.Substring((int)(i_17), 1)) + (t_hash_15 * alphabet_size_0)), modulus_1);
            if ((i_17 != (p_len_12 - 1))) {
                modulus_power_16 = _mod((modulus_power_16 * alphabet_size_0), modulus_1);
            }
            i_17 = (i_17 + 1);
        };
        long j_18 = 0;
        while ((j_18 <= (t_len_13 - p_len_12))) {
            if (((t_hash_15 == p_hash_14) && (_substr(text_11, j_18, (j_18 + p_len_12)) == pattern_10))) {
                return true;
            }
            if ((j_18 == (t_len_13 - p_len_12))) {
                j_18 = (j_18 + 1);
                continue;
            }
            t_hash_15 = _mod((((t_hash_15 - (Program.ord(text_11.Substring((int)(j_18), 1)) * modulus_power_16)) * alphabet_size_0) + Program.ord(text_11.Substring((int)((j_18 + p_len_12)), 1))), modulus_1);
            if ((t_hash_15 < 0)) {
                t_hash_15 = (t_hash_15 + modulus_1);
            }
            j_18 = (j_18 + 1);
        };
        return false;
    }

    public static void test_rabin_karp() {
        string pattern1_19 = "abc1abc12";
        string text1_20 = "alskfjaldsabc1abc1abc12k23adsfabcabc";
        string text2_21 = "alskfjaldsk23adsfabcabc";
        if (((!Program.rabin_karp(pattern1_19, text1_20)) || Program.rabin_karp(pattern1_19, text2_21))) {
            Console.WriteLine(Program._fmtTop("Failure"));
            return;
        };
        string pattern2_22 = "ABABX";
        string text3_23 = "ABABZABABYABABX";
        if ((!Program.rabin_karp(pattern2_22, text3_23))) {
            Console.WriteLine(Program._fmtTop("Failure"));
            return;
        };
        string pattern3_24 = "AAAB";
        string text4_25 = "ABAAAAAB";
        if ((!Program.rabin_karp(pattern3_24, text4_25))) {
            Console.WriteLine(Program._fmtTop("Failure"));
            return;
        };
        string pattern4_26 = "abcdabcy";
        string text5_27 = "abcxabcdabxabcdabcdabcy";
        if ((!Program.rabin_karp(pattern4_26, text5_27))) {
            Console.WriteLine(Program._fmtTop("Failure"));
            return;
        };
        string pattern5_28 = "Lü";
        string text6_29 = "Lüsai";
        if ((!Program.rabin_karp(pattern5_28, text6_29))) {
            Console.WriteLine(Program._fmtTop("Failure"));
            return;
        };
        string pattern6_30 = "Lue";
        if (Program.rabin_karp(pattern6_30, text6_29)) {
            Console.WriteLine(Program._fmtTop("Failure"));
            return;
        };
        Console.WriteLine(Program._fmtTop("Success."));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.test_rabin_karp();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
