// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string LETTERS_AND_SPACE_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n";
    static string LOWER_1 = "abcdefghijklmnopqrstuvwxyz";
    static string UPPER_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static Dictionary<string, bool> ENGLISH_WORDS_24 = Program.load_dictionary();
    public static string to_upper(string s_3) {
        string res_4 = "";
        long i_5 = 0;
        while ((i_5 < s_3.Length)) {
            string c_6 = _substr(s_3, i_5, (i_5 + 1));
            long j_7 = 0;
            string up_8 = c_6;
            while ((j_7 < LOWER_1.Length)) {
                if ((c_6 == _substr(LOWER_1, j_7, (j_7 + 1)))) {
                    up_8 = _substr(UPPER_2, j_7, (j_7 + 1));
                    break;
                }
                j_7 = (j_7 + 1);
            }
            res_4 = (res_4 + up_8);
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static bool char_in(string chars_9, string c_10) {
        long i_11 = 0;
        while ((i_11 < chars_9.Length)) {
            if ((_substr(chars_9, i_11, (i_11 + 1)) == c_10)) {
                return true;
            }
            i_11 = (i_11 + 1);
        };
        return false;
    }

    public static string remove_non_letters(string message_12) {
        string res_13 = "";
        long i_14 = 0;
        while ((i_14 < message_12.Length)) {
            string ch_15 = _substr(message_12, i_14, (i_14 + 1));
            if (Program.char_in(LETTERS_AND_SPACE_0, ch_15)) {
                res_13 = (res_13 + ch_15);
            }
            i_14 = (i_14 + 1);
        };
        return res_13;
    }

    public static string[] split_spaces(string text_16) {
        string[] res_17 = new string[]{};
        string current_18 = "";
        long i_19 = 0;
        while ((i_19 < text_16.Length)) {
            string ch_20 = _substr(text_16, i_19, (i_19 + 1));
            if ((ch_20 == " ")) {
                res_17 = (Enumerable.ToArray(Enumerable.Append<string>(res_17, current_18)));
                current_18 = "";
            } else {
                current_18 = (current_18 + ch_20);
            }
            i_19 = (i_19 + 1);
        };
        res_17 = (Enumerable.ToArray(Enumerable.Append<string>(res_17, current_18)));
        return res_17;
    }

    public static Dictionary<string, bool> load_dictionary() {
        string[] words_21 = new string[]{"HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG"};
        Dictionary<string, bool> dict_22 = new Dictionary<string, bool>{};
        foreach (string w_23 in words_21) {
            dict_22[w_23] = true;
        };
        return dict_22;
    }

    public static double get_english_count(string message_25) {
        string upper_26 = Program.to_upper(message_25);
        string cleaned_27 = Program.remove_non_letters(upper_26);
        string[] possible_28 = Program.split_spaces(cleaned_27);
        long matches_29 = 0;
        long total_30 = 0;
        foreach (string w_31 in possible_28) {
            if ((w_31 != "")) {
                total_30 = (total_30 + 1);
                if ((ENGLISH_WORDS_24.ContainsKey(w_31))) {
                    matches_29 = (matches_29 + 1);
                }
            }
        };
        if ((total_30 == 0)) {
            return 0.0;
        };
        return (Convert.ToDouble(matches_29) / Convert.ToDouble(total_30));
    }

    public static bool is_english(string message_32, long word_percentage_33, long letter_percentage_34) {
        bool words_match_35 = ((Program.get_english_count(message_32) * 100.0) >= Convert.ToDouble(word_percentage_33));
        long num_letters_36 = Program.remove_non_letters(message_32).Length;
        double letters_pct_37 = ((message_32.Length == 0) ? 0.0 : ((Convert.ToDouble(num_letters_36) / Convert.ToDouble(message_32.Length)) * 100.0));
        bool letters_match_38 = (letters_pct_37 >= Convert.ToDouble(letter_percentage_34));
        return (words_match_35 && letters_match_38);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_english("Hello World", 20, 85))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_english("llold HorWd", 20, 85))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
