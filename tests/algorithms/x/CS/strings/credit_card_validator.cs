// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool validate_initial_digits(string cc_0) {
        return ((((((_substr(cc_0, 0, 2) == "34") || (_substr(cc_0, 0, 2) == "35")) || (_substr(cc_0, 0, 2) == "37")) || (_substr(cc_0, 0, 1) == "4")) || (_substr(cc_0, 0, 1) == "5")) || (_substr(cc_0, 0, 1) == "6"));
    }

    public static bool luhn_validation(string cc_1) {
        long sum_2 = 0;
        bool double_digit_3 = false;
        long i_4 = (cc_1.Length - 1);
        while ((i_4 >= 0)) {
            long n_5 = long.Parse(_substr(cc_1, i_4, (i_4 + 1)));
            if (double_digit_3) {
                n_5 = (n_5 * 2);
                if ((n_5 > 9)) {
                    n_5 = (n_5 - 9);
                }
            }
            sum_2 = (sum_2 + n_5);
            double_digit_3 = (!double_digit_3);
            i_4 = (i_4 - 1);
        };
        return (_mod(sum_2, 10) == 0);
    }

    public static bool is_digit_string(string s_6) {
        long i_7 = 0;
        while ((i_7 < s_6.Length)) {
            string c_8 = _substr(s_6, i_7, (i_7 + 1));
            if (((string.Compare(c_8, "0") < 0) || (string.Compare(c_8, "9") > 0))) {
                return false;
            }
            i_7 = (i_7 + 1);
        };
        return true;
    }

    public static bool validate_credit_card_number(string cc_9) {
        string error_message_10 = (cc_9 + " is an invalid credit card number because");
        if ((!Program.is_digit_string(cc_9))) {
            Console.WriteLine(Program._fmtTop((error_message_10 + " it has nonnumerical characters.")));
            return false;
        };
        if ((!((cc_9.Length >= 13) && (cc_9.Length <= 16)))) {
            Console.WriteLine(Program._fmtTop((error_message_10 + " of its length.")));
            return false;
        };
        if ((!Program.validate_initial_digits(cc_9))) {
            Console.WriteLine(Program._fmtTop((error_message_10 + " of its first two digits.")));
            return false;
        };
        if ((!Program.luhn_validation(cc_9))) {
            Console.WriteLine(Program._fmtTop((error_message_10 + " it fails the Luhn check.")));
            return false;
        };
        Console.WriteLine(Program._fmtTop((cc_9 + " is a valid credit card number.")));
        return true;
    }

    public static void main() {
        Program.validate_credit_card_number("4111111111111111");
        Program.validate_credit_card_number("32323");
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
