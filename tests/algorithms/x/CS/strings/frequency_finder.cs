// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ETAOIN_0 = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
    static string LETTERS_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static long etaoin_index(string letter_2) {
        long i_3 = 0;
        while ((i_3 < ETAOIN_0.Length)) {
            if ((_substr(ETAOIN_0, i_3, (i_3 + 1)) == letter_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return ETAOIN_0.Length;
    }

    public static Dictionary<string, long> get_letter_count(string message_4) {
        Dictionary<string, long> letter_count_5 = new Dictionary<string, long>{};
        long i_6 = 0;
        while ((i_6 < LETTERS_1.Length)) {
            string c_7 = _substr(LETTERS_1, i_6, (i_6 + 1));
            letter_count_5[c_7] = 0;
            i_6 = (i_6 + 1);
        };
        string msg_8 = message_4.ToUpper();
        long j_9 = 0;
        while ((j_9 < msg_8.Length)) {
            string ch_10 = _substr(msg_8, j_9, (j_9 + 1));
            if ((LETTERS_1.Contains(ch_10))) {
                letter_count_5[ch_10] = ((letter_count_5.ContainsKey(ch_10) ? letter_count_5[ch_10] : 0) + 1);
            }
            j_9 = (j_9 + 1);
        };
        return letter_count_5;
    }

    public static string get_frequency_order(string message_11) {
        Dictionary<string, long> letter_to_freq_12 = Program.get_letter_count(message_11);
        long max_freq_13 = 0;
        long i_14 = 0;
        while ((i_14 < LETTERS_1.Length)) {
            string letter_15 = _substr(LETTERS_1, i_14, (i_14 + 1));
            long f_16 = (letter_to_freq_12.ContainsKey(letter_15) ? letter_to_freq_12[letter_15] : 0);
            if ((f_16 > max_freq_13)) {
                max_freq_13 = f_16;
            }
            i_14 = (i_14 + 1);
        };
        string result_17 = "";
        long freq_18 = max_freq_13;
        while ((freq_18 >= 0)) {
            string[] group_19 = new string[]{};
            long j_20 = 0;
            while ((j_20 < LETTERS_1.Length)) {
                string letter_21 = _substr(LETTERS_1, j_20, (j_20 + 1));
                if (((letter_to_freq_12.ContainsKey(letter_21) ? letter_to_freq_12[letter_21] : 0) == freq_18)) {
                    group_19 = (Enumerable.ToArray(Enumerable.Append<string>(group_19, letter_21)));
                }
                j_20 = (j_20 + 1);
            }
            long g_len_22 = group_19.Length;
            long a_23 = 0;
            while ((a_23 < g_len_22)) {
                long b_24 = 0;
                while ((b_24 < ((g_len_22 - a_23) - 1))) {
                    string g1_25 = group_19[(int)(b_24)];
                    string g2_26 = group_19[(int)((b_24 + 1))];
                    long idx1_27 = Program.etaoin_index(g1_25);
                    long idx2_28 = Program.etaoin_index(g2_26);
                    if ((idx1_27 < idx2_28)) {
                        string tmp_29 = group_19[(int)(b_24)];
                        group_19[(int)(b_24)] = group_19[(int)((b_24 + 1))];
                        group_19[(int)((b_24 + 1))] = tmp_29;
                    }
                    b_24 = (b_24 + 1);
                }
                a_23 = (a_23 + 1);
            }
            long g_30 = 0;
            while ((g_30 < group_19.Length)) {
                result_17 = (result_17 + group_19[(int)(g_30)]);
                g_30 = (g_30 + 1);
            }
            freq_18 = (freq_18 - 1);
        };
        return result_17;
    }

    public static long english_freq_match_score(string message_31) {
        string freq_order_32 = Program.get_frequency_order(message_31);
        string top_33 = _substr(freq_order_32, 0, 6);
        string bottom_34 = _substr(freq_order_32, (freq_order_32.Length - 6), freq_order_32.Length);
        long score_35 = 0;
        long i_36 = 0;
        while ((i_36 < 6)) {
            string c_37 = _substr(ETAOIN_0, i_36, (i_36 + 1));
            if ((top_33.Contains(c_37))) {
                score_35 = (score_35 + 1);
            }
            i_36 = (i_36 + 1);
        };
        long j_38 = (ETAOIN_0.Length - 6);
        while ((j_38 < ETAOIN_0.Length)) {
            string c_39 = _substr(ETAOIN_0, j_38, (j_38 + 1));
            if ((bottom_34.Contains(c_39))) {
                score_35 = (score_35 + 1);
            }
            j_38 = (j_38 + 1);
        };
        return score_35;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.get_frequency_order("Hello World")));
        Console.WriteLine(Program._fmtTop(Program.english_freq_match_score("Hello World")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
