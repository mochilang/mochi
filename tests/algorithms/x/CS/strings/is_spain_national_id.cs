// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string DIGITS_0 = "0123456789";
    static string UPPER_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string LOWER_2 = "abcdefghijklmnopqrstuvwxyz";
    static string LOOKUP_LETTERS_3 = "TRWAGMYFPDXBNJZSQVHLCKE";
    static string ERROR_MSG_4 = "Input must be a string of 8 numbers plus letter";
    public static string to_upper(string s_5) {
        string res_6 = "";
        long i_7 = 0;
        while ((i_7 < s_5.Length)) {
            string ch_8 = s_5.Substring((int)(i_7), 1);
            long j_9 = 0;
            string converted_10 = ch_8;
            while ((j_9 < LOWER_2.Length)) {
                if ((LOWER_2.Substring((int)(j_9), 1) == ch_8)) {
                    converted_10 = UPPER_1.Substring((int)(j_9), 1);
                    break;
                }
                j_9 = (j_9 + 1);
            }
            res_6 = (res_6 + converted_10);
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static bool is_digit(string ch_11) {
        long i_12 = 0;
        while ((i_12 < DIGITS_0.Length)) {
            if ((DIGITS_0.Substring((int)(i_12), 1) == ch_11)) {
                return true;
            }
            i_12 = (i_12 + 1);
        };
        return false;
    }

    public static string clean_id(string spanish_id_13) {
        string upper_id_14 = Program.to_upper(spanish_id_13);
        string cleaned_15 = "";
        long i_16 = 0;
        while ((i_16 < upper_id_14.Length)) {
            string ch_17 = upper_id_14.Substring((int)(i_16), 1);
            if ((ch_17 != "-")) {
                cleaned_15 = (cleaned_15 + ch_17);
            }
            i_16 = (i_16 + 1);
        };
        return cleaned_15;
    }

    public static bool is_spain_national_id(string spanish_id_18) {
        string sid_19 = Program.clean_id(spanish_id_18);
        if ((sid_19.Length != 9)) {
            throw new Exception(ERROR_MSG_4);
        };
        long i_20 = 0;
        while ((i_20 < 8)) {
            if ((!Program.is_digit(sid_19.Substring((int)(i_20), 1)))) {
                throw new Exception(ERROR_MSG_4);
            }
            i_20 = (i_20 + 1);
        };
        long number_21 = _atoi(_substr(sid_19, 0, 8));
        string letter_22 = sid_19.Substring((int)(8), 1);
        if (Program.is_digit(letter_22)) {
            throw new Exception(ERROR_MSG_4);
        };
        string expected_23 = LOOKUP_LETTERS_3.Substring((int)(_mod(number_21, 23)), 1);
        return (letter_22 == expected_23);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.is_spain_national_id("12345678Z")));
        Console.WriteLine(Program._fmtTop(Program.is_spain_national_id("12345678z")));
        Console.WriteLine(Program._fmtTop(Program.is_spain_national_id("12345678x")));
        Console.WriteLine(Program._fmtTop(Program.is_spain_national_id("12345678I")));
        Console.WriteLine(Program._fmtTop(Program.is_spain_national_id("12345678-Z")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
