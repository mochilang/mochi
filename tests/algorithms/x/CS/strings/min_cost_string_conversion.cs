// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class TransformTables {
    public long[][] costs;
    public string[][] ops;
    public override string ToString() => $"TransformTables {{costs = {costs}, ops = {ops}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[] string_to_chars(string s_0) {
        string[] chars_1 = new string[]{};
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            chars_1 = (Enumerable.ToArray(Enumerable.Append<string>(chars_1, _substr(s_0, i_2, (i_2 + 1)))));
            i_2 = (i_2 + 1);
        };
        return chars_1;
    }

    public static string join_chars(string[] chars_3) {
        string res_4 = "";
        long i_5 = 0;
        while ((i_5 < chars_3.Length)) {
            res_4 = (res_4 + chars_3[(int)(i_5)]);
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static string[] insert_at(string[] chars_6, long index_7, string ch_8) {
        string[] res_9 = new string[]{};
        long i_10 = 0;
        while ((i_10 < index_7)) {
            res_9 = (Enumerable.ToArray(Enumerable.Append<string>(res_9, chars_6[(int)(i_10)])));
            i_10 = (i_10 + 1);
        };
        res_9 = (Enumerable.ToArray(Enumerable.Append<string>(res_9, ch_8)));
        while ((i_10 < chars_6.Length)) {
            res_9 = (Enumerable.ToArray(Enumerable.Append<string>(res_9, chars_6[(int)(i_10)])));
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static string[] remove_at(string[] chars_11, long index_12) {
        string[] res_13 = new string[]{};
        long i_14 = 0;
        while ((i_14 < chars_11.Length)) {
            if ((i_14 != index_12)) {
                res_13 = (Enumerable.ToArray(Enumerable.Append<string>(res_13, chars_11[(int)(i_14)])));
            }
            i_14 = (i_14 + 1);
        };
        return res_13;
    }

    public static long[][] make_matrix_int(long rows_15, long cols_16, long init_17) {
        long[][] matrix_18 = new long[][]{};
        for (var __19 = 0; __19 < rows_15; __19++) {
            long[] row_20 = new long[]{};
            for (var _2_21 = 0; _2_21 < cols_16; _2_21++) {
                row_20 = (Enumerable.ToArray(Enumerable.Append<long>(row_20, init_17)));
            }
            matrix_18 = (Enumerable.ToArray(Enumerable.Append<long[]>(matrix_18, row_20)));
        };
        return matrix_18;
    }

    public static string[][] make_matrix_string(long rows_22, long cols_23, string init_24) {
        string[][] matrix_25 = new string[][]{};
        for (var __26 = 0; __26 < rows_22; __26++) {
            string[] row_27 = new string[]{};
            for (var _2_28 = 0; _2_28 < cols_23; _2_28++) {
                row_27 = (Enumerable.ToArray(Enumerable.Append<string>(row_27, init_24)));
            }
            matrix_25 = (Enumerable.ToArray(Enumerable.Append<string[]>(matrix_25, row_27)));
        };
        return matrix_25;
    }

    public static TransformTables compute_transform_tables(string source_string_29, string destination_string_30, long copy_cost_31, long replace_cost_32, long delete_cost_33, long insert_cost_34) {
        string[] source_seq_35 = Program.string_to_chars(source_string_29);
        string[] dest_seq_36 = Program.string_to_chars(destination_string_30);
        long m_37 = source_seq_35.Length;
        long n_38 = dest_seq_36.Length;
        long[][] costs_39 = Program.make_matrix_int((m_37 + 1), (n_38 + 1), 0);
        string[][] ops_40 = Program.make_matrix_string((m_37 + 1), (n_38 + 1), "0");
        long i_41 = 1;
        while ((i_41 <= m_37)) {
            costs_39[(int)(i_41)][(int)(0)] = (i_41 * delete_cost_33);
            ops_40[(int)(i_41)][(int)(0)] = ("D" + source_seq_35[(int)((i_41 - 1))]);
            i_41 = (i_41 + 1);
        };
        long j_42 = 1;
        while ((j_42 <= n_38)) {
            costs_39[(int)(0)][(int)(j_42)] = (j_42 * insert_cost_34);
            ops_40[(int)(0)][(int)(j_42)] = ("I" + dest_seq_36[(int)((j_42 - 1))]);
            j_42 = (j_42 + 1);
        };
        i_41 = 1;
        while ((i_41 <= m_37)) {
            j_42 = 1;
            while ((j_42 <= n_38)) {
                if ((source_seq_35[(int)((i_41 - 1))] == dest_seq_36[(int)((j_42 - 1))])) {
                    costs_39[(int)(i_41)][(int)(j_42)] = (costs_39[(int)((i_41 - 1))][(int)((j_42 - 1))] + copy_cost_31);
                    ops_40[(int)(i_41)][(int)(j_42)] = ("C" + source_seq_35[(int)((i_41 - 1))]);
                } else {
                    costs_39[(int)(i_41)][(int)(j_42)] = (costs_39[(int)((i_41 - 1))][(int)((j_42 - 1))] + replace_cost_32);
                    ops_40[(int)(i_41)][(int)(j_42)] = (("R" + source_seq_35[(int)((i_41 - 1))]) + dest_seq_36[(int)((j_42 - 1))]);
                }
                if (((costs_39[(int)((i_41 - 1))][(int)(j_42)] + delete_cost_33) < costs_39[(int)(i_41)][(int)(j_42)])) {
                    costs_39[(int)(i_41)][(int)(j_42)] = (costs_39[(int)((i_41 - 1))][(int)(j_42)] + delete_cost_33);
                    ops_40[(int)(i_41)][(int)(j_42)] = ("D" + source_seq_35[(int)((i_41 - 1))]);
                }
                if (((costs_39[(int)(i_41)][(int)((j_42 - 1))] + insert_cost_34) < costs_39[(int)(i_41)][(int)(j_42)])) {
                    costs_39[(int)(i_41)][(int)(j_42)] = (costs_39[(int)(i_41)][(int)((j_42 - 1))] + insert_cost_34);
                    ops_40[(int)(i_41)][(int)(j_42)] = ("I" + dest_seq_36[(int)((j_42 - 1))]);
                }
                j_42 = (j_42 + 1);
            }
            i_41 = (i_41 + 1);
        };
        return new TransformTables{costs = costs_39, ops = ops_40};
    }

    public static string[] assemble_transformation(string[][] ops_43, long i_44, long j_45) {
        if (((i_44 == 0) && (j_45 == 0))) {
            return new string[]{};
        };
        string op_46 = ops_43[(int)(i_44)][(int)(j_45)];
        string kind_47 = _substr(op_46, 0, 1);
        if (((kind_47 == "C") || (kind_47 == "R"))) {
            string[] seq_48 = Program.assemble_transformation(ops_43, (i_44 - 1), (j_45 - 1));
            seq_48 = (Enumerable.ToArray(Enumerable.Append<string>(seq_48, op_46)));
            return seq_48;
        } else if ((kind_47 == "D")) {
            string[] seq_49 = Program.assemble_transformation(ops_43, (i_44 - 1), j_45);
            seq_49 = (Enumerable.ToArray(Enumerable.Append<string>(seq_49, op_46)));
            return seq_49;
        } else {
            string[] seq_50 = Program.assemble_transformation(ops_43, i_44, (j_45 - 1));
            seq_50 = (Enumerable.ToArray(Enumerable.Append<string>(seq_50, op_46)));
            return seq_50;
        };
        return default(string[]);
    }

    public static void main() {
        long copy_cost_51 = -1;
        long replace_cost_52 = 1;
        long delete_cost_53 = 2;
        long insert_cost_54 = 2;
        string src_55 = "Python";
        string dst_56 = "Algorithms";
        TransformTables tables_57 = Program.compute_transform_tables(src_55, dst_56, copy_cost_51, replace_cost_52, delete_cost_53, insert_cost_54);
        string[][] operations_58 = tables_57.ops;
        long m_59 = operations_58.Length;
        long n_60 = operations_58[(int)(0)].Length;
        string[] sequence_61 = Program.assemble_transformation(operations_58, (m_59 - 1), (n_60 - 1));
        string[] string_list_62 = Program.string_to_chars(src_55);
        long idx_63 = 0;
        long cost_64 = 0;
        long k_65 = 0;
        while ((k_65 < sequence_61.Length)) {
            Console.WriteLine(Program._fmtTop(Program.join_chars(string_list_62)));
            string op_66 = sequence_61[(int)(k_65)];
            string kind_67 = _substr(op_66, 0, 1);
            if ((kind_67 == "C")) {
                cost_64 = (cost_64 + copy_cost_51);
            } else if ((kind_67 == "R")) {
                string_list_62[(int)(idx_63)] = _substr(op_66, 2, 3);
                cost_64 = (cost_64 + replace_cost_52);
            } else if ((kind_67 == "D")) {
                string_list_62 = Program.remove_at(string_list_62, idx_63);
                cost_64 = (cost_64 + delete_cost_53);
            } else {
                string_list_62 = Program.insert_at(string_list_62, idx_63, _substr(op_66, 1, 2));
                cost_64 = (cost_64 + insert_cost_54);
            }
            idx_63 = (idx_63 + 1);
            k_65 = (k_65 + 1);
        };
        Console.WriteLine(Program._fmtTop(Program.join_chars(string_list_62)));
        Console.WriteLine(Program._fmtTop(("Cost: " + _fmtStr(cost_64))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
