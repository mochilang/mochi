// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[] split(string s_0, string sep_1) {
        string[] res_2 = new string[]{};
        string current_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            string ch_5 = s_0.Substring((int)(i_4), 1);
            if ((ch_5 == sep_1)) {
                res_2 = (Enumerable.ToArray(Enumerable.Append<string>(res_2, current_3)));
                current_3 = "";
            } else {
                current_3 = (current_3 + ch_5);
            }
            i_4 = (i_4 + 1);
        };
        res_2 = (Enumerable.ToArray(Enumerable.Append<string>(res_2, current_3)));
        return res_2;
    }

    public static string join_with_space(string[] xs_6) {
        string s_7 = "";
        long i_8 = 0;
        while ((i_8 < xs_6.Length)) {
            s_7 = (s_7 + xs_6[(int)(i_8)]);
            if (((i_8 + 1) < xs_6.Length)) {
                s_7 = (s_7 + " ");
            }
            i_8 = (i_8 + 1);
        };
        return s_7;
    }

    public static string reverse_str(string s_9) {
        string res_10 = "";
        long i_11 = (s_9.Length - 1);
        while ((i_11 >= 0)) {
            res_10 = (res_10 + s_9.Substring((int)(i_11), 1));
            i_11 = (i_11 - 1);
        };
        return res_10;
    }

    public static string reverse_letters(string sentence_12, long length_13) {
        string[] words_14 = Program.split(sentence_12, " ");
        string[] result_15 = new string[]{};
        long i_16 = 0;
        while ((i_16 < words_14.Length)) {
            string word_17 = words_14[(int)(i_16)];
            if ((word_17.Length > length_13)) {
                result_15 = (Enumerable.ToArray(Enumerable.Append<string>(result_15, Program.reverse_str(word_17))));
            } else {
                result_15 = (Enumerable.ToArray(Enumerable.Append<string>(result_15, word_17)));
            }
            i_16 = (i_16 + 1);
        };
        return Program.join_with_space(result_15);
    }

    public static void test_reverse_letters() {
        if ((Program.reverse_letters("Hey wollef sroirraw", 3) != "Hey fellow warriors")) {
            throw new Exception("test1 failed");
        };
        if ((Program.reverse_letters("nohtyP is nohtyP", 2) != "Python is Python")) {
            throw new Exception("test2 failed");
        };
        if ((Program.reverse_letters("1 12 123 1234 54321 654321", 0) != "1 21 321 4321 12345 123456")) {
            throw new Exception("test3 failed");
        };
        if ((Program.reverse_letters("racecar", 0) != "racecar")) {
            throw new Exception("test4 failed");
        };
    }

    public static void main() {
        Program.test_reverse_letters();
        Console.WriteLine(Program._fmtTop(Program.reverse_letters("Hey wollef sroirraw", 3)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
