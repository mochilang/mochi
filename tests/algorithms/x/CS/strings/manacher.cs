// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string palindromic_string(string input_string_0) {
        long max_length_1 = 0;
        string new_input_string_2 = "";
        string output_string_3 = "";
        long n_4 = input_string_0.Length;
        long i_5 = 0;
        while ((i_5 < (n_4 - 1))) {
            new_input_string_2 = ((new_input_string_2 + _substr(input_string_0, i_5, (i_5 + 1))) + "|");
            i_5 = (i_5 + 1);
        };
        new_input_string_2 = (new_input_string_2 + _substr(input_string_0, (n_4 - 1), n_4));
        long left_6 = 0;
        long right_7 = 0;
        long[] length_8 = new long[]{};
        i_5 = 0;
        long m_9 = new_input_string_2.Length;
        while ((i_5 < m_9)) {
            length_8 = (Enumerable.ToArray(Enumerable.Append<long>(length_8, 1)));
            i_5 = (i_5 + 1);
        };
        long start_10 = 0;
        long j_11 = 0;
        while ((j_11 < m_9)) {
            long k_12 = 1;
            if ((j_11 <= right_7)) {
                long mirror_13 = ((left_6 + right_7) - j_11);
                k_12 = (length_8[(int)(mirror_13)] / 2);
                long diff_14 = ((right_7 - j_11) + 1);
                if ((diff_14 < k_12)) {
                    k_12 = diff_14;
                }
                if ((k_12 < 1)) {
                    k_12 = 1;
                }
            }
            while (((((j_11 - k_12) >= 0) && ((j_11 + k_12) < m_9)) && (_substr(new_input_string_2, (j_11 + k_12), ((j_11 + k_12) + 1)) == _substr(new_input_string_2, (j_11 - k_12), ((j_11 - k_12) + 1))))) {
                k_12 = (k_12 + 1);
            }
            length_8[(int)(j_11)] = ((2 * k_12) - 1);
            if ((((j_11 + k_12) - 1) > right_7)) {
                left_6 = ((j_11 - k_12) + 1);
                right_7 = ((j_11 + k_12) - 1);
            }
            if ((length_8[(int)(j_11)] > max_length_1)) {
                max_length_1 = length_8[(int)(j_11)];
                start_10 = j_11;
            }
            j_11 = (j_11 + 1);
        };
        string s_15 = _substr(new_input_string_2, (start_10 - (max_length_1 / 2)), ((start_10 + (max_length_1 / 2)) + 1));
        long idx_16 = 0;
        while ((idx_16 < s_15.Length)) {
            string ch_17 = _substr(s_15, idx_16, (idx_16 + 1));
            if ((ch_17 != "|")) {
                output_string_3 = (output_string_3 + ch_17);
            }
            idx_16 = (idx_16 + 1);
        };
        return output_string_3;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.palindromic_string("abbbaba")));
        Console.WriteLine(Program._fmtTop(Program.palindromic_string("ababa")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
