// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[] split_ws(string s_0) {
        string[] res_1 = new string[]{};
        string word_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            string ch_4 = _substr(s_0, i_3, (i_3 + 1));
            if ((ch_4 == " ")) {
                if ((word_2 != "")) {
                    res_1 = (Enumerable.ToArray(Enumerable.Append<string>(res_1, word_2)));
                    word_2 = "";
                }
            } else {
                word_2 = (word_2 + ch_4);
            }
            i_3 = (i_3 + 1);
        };
        if ((word_2 != "")) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<string>(res_1, word_2)));
        };
        return res_1;
    }

    public static bool contains(string[] xs_5, string x_6) {
        long i_7 = 0;
        while ((i_7 < xs_5.Length)) {
            if ((xs_5[(int)(i_7)] == x_6)) {
                return true;
            }
            i_7 = (i_7 + 1);
        };
        return false;
    }

    public static string[] unique(string[] xs_8) {
        string[] res_9 = new string[]{};
        long i_10 = 0;
        while ((i_10 < xs_8.Length)) {
            string w_11 = xs_8[(int)(i_10)];
            if ((!Program.contains(res_9, w_11))) {
                res_9 = (Enumerable.ToArray(Enumerable.Append<string>(res_9, w_11)));
            }
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static string[] insertion_sort(string[] arr_12) {
        string[] a_13 = arr_12;
        long i_14 = 1;
        while ((i_14 < a_13.Length)) {
            string key_15 = a_13[(int)(i_14)];
            long j_16 = (i_14 - 1);
            while (((j_16 >= 0) && (string.Compare(a_13[(int)(j_16)], key_15) > 0))) {
                a_13[(int)((j_16 + 1))] = a_13[(int)(j_16)];
                j_16 = (j_16 - 1);
            }
            a_13[(int)((j_16 + 1))] = key_15;
            i_14 = (i_14 + 1);
        };
        return a_13;
    }

    public static string join_with_space(string[] xs_17) {
        string s_18 = "";
        long i_19 = 0;
        while ((i_19 < xs_17.Length)) {
            if ((i_19 > 0)) {
                s_18 = (s_18 + " ");
            }
            s_18 = (s_18 + xs_17[(int)(i_19)]);
            i_19 = (i_19 + 1);
        };
        return s_18;
    }

    public static string remove_duplicates(string sentence_20) {
        string[] words_21 = Program.split_ws(sentence_20);
        string[] uniq_22 = Program.unique(words_21);
        string[] sorted_words_23 = Program.insertion_sort(uniq_22);
        return Program.join_with_space(sorted_words_23);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.remove_duplicates("Python is great and Java is also great")));
            Console.WriteLine(Program._fmtTop(Program.remove_duplicates("Python   is      great and Java is also great")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
