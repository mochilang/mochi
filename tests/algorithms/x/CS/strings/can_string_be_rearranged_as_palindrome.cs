// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string LETTERS_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string LOWERCASE_1 = "abcdefghijklmnopqrstuvwxyz";
    public static string char_to_lower(string c_2) {
        long i_3 = 0;
        while ((i_3 < LETTERS_0.Length)) {
            if ((c_2 == _substr(LETTERS_0, i_3, (i_3 + 1)))) {
                return _substr(LOWERCASE_1, i_3, (i_3 + 1));
            }
            i_3 = (i_3 + 1);
        };
        return c_2;
    }

    public static string normalize(string input_str_4) {
        string res_5 = "";
        long i_6 = 0;
        while ((i_6 < input_str_4.Length)) {
            string ch_7 = _substr(input_str_4, i_6, (i_6 + 1));
            string lc_8 = Program.char_to_lower(ch_7);
            if (((string.Compare(lc_8, "a") >= 0) && (string.Compare(lc_8, "z") <= 0))) {
                res_5 = (res_5 + lc_8);
            }
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static bool can_string_be_rearranged_as_palindrome_counter(string input_str_9) {
        string s_10 = Program.normalize(input_str_9);
        Dictionary<string, long> freq_11 = new Dictionary<string, long>{};
        long i_12 = 0;
        while ((i_12 < s_10.Length)) {
            string ch_13 = _substr(s_10, i_12, (i_12 + 1));
            if ((freq_11.ContainsKey(ch_13))) {
                freq_11[ch_13] = ((freq_11.ContainsKey(ch_13) ? freq_11[ch_13] : 0) + 1);
            } else {
                freq_11[ch_13] = 1;
            }
            i_12 = (i_12 + 1);
        };
        long odd_14 = 0;
        foreach (string key_15 in freq_11.Keys) {
            if ((_mod((freq_11.ContainsKey(key_15) ? freq_11[key_15] : 0), 2) != 0)) {
                odd_14 = (odd_14 + 1);
            }
        };
        return (odd_14 < 2);
    }

    public static bool can_string_be_rearranged_as_palindrome(string input_str_16) {
        string s_17 = Program.normalize(input_str_16);
        if ((s_17.Length == 0)) {
            return true;
        };
        Dictionary<string, long> character_freq_dict_18 = new Dictionary<string, long>{};
        long i_19 = 0;
        while ((i_19 < s_17.Length)) {
            string character_20 = _substr(s_17, i_19, (i_19 + 1));
            if ((character_freq_dict_18.ContainsKey(character_20))) {
                character_freq_dict_18[character_20] = ((character_freq_dict_18.ContainsKey(character_20) ? character_freq_dict_18[character_20] : 0) + 1);
            } else {
                character_freq_dict_18[character_20] = 1;
            }
            i_19 = (i_19 + 1);
        };
        long odd_char_21 = 0;
        foreach (string character_key_22 in character_freq_dict_18.Keys) {
            long character_count_23 = (character_freq_dict_18.ContainsKey(character_key_22) ? character_freq_dict_18[character_key_22] : 0);
            if ((_mod(character_count_23, 2) != 0)) {
                odd_char_21 = (odd_char_21 + 1);
            }
        };
        return (!(odd_char_21 > 1));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.can_string_be_rearranged_as_palindrome_counter("Momo")));
            Console.WriteLine(Program._fmtTop(Program.can_string_be_rearranged_as_palindrome_counter("Mother")));
            Console.WriteLine(Program._fmtTop(Program.can_string_be_rearranged_as_palindrome("Momo")));
            Console.WriteLine(Program._fmtTop(Program.can_string_be_rearranged_as_palindrome("Mother")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
