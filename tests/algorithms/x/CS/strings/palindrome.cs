// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Case {
    public string text;
    public bool expected;
    public override string ToString() => $"Case {{text = \"{text}\", expected = {expected}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Case[] test_data_12 = new Case[]{new Case{text = "MALAYALAM", expected = true}, new Case{text = "String", expected = false}, new Case{text = "rotor", expected = true}, new Case{text = "level", expected = true}, new Case{text = "A", expected = true}, new Case{text = "BB", expected = true}, new Case{text = "ABC", expected = false}, new Case{text = "amanaplanacanalpanama", expected = true}};
    public static string reverse(string s_0) {
        string res_1 = "";
        long i_2 = (s_0.Length - 1);
        while ((i_2 >= 0)) {
            res_1 = (res_1 + s_0.Substring((int)(i_2), 1));
            i_2 = (i_2 - 1);
        };
        return res_1;
    }

    public static bool is_palindrome(string s_3) {
        long start_i_4 = 0;
        long end_i_5 = (s_3.Length - 1);
        while ((start_i_4 < end_i_5)) {
            if ((s_3.Substring((int)(start_i_4), 1) == s_3.Substring((int)(end_i_5), 1))) {
                start_i_4 = (start_i_4 + 1);
                end_i_5 = (end_i_5 - 1);
            } else {
                return false;
            }
        };
        return true;
    }

    public static bool is_palindrome_traversal(string s_6) {
        long end_7 = (s_6.Length / 2);
        long n_8 = s_6.Length;
        long i_9 = 0;
        while ((i_9 < end_7)) {
            if ((s_6.Substring((int)(i_9), 1) != s_6.Substring((int)(((n_8 - i_9) - 1)), 1))) {
                return false;
            }
            i_9 = (i_9 + 1);
        };
        return true;
    }

    public static bool is_palindrome_recursive(string s_10) {
        if ((s_10.Length <= 1)) {
            return true;
        };
        if ((s_10.Substring((int)(0), 1) == s_10.Substring((int)((s_10.Length - 1)), 1))) {
            return Program.is_palindrome_recursive(_substr(s_10, 1, (s_10.Length - 1)));
        };
        return false;
    }

    public static bool is_palindrome_slice(string s_11) {
        return (s_11 == Program.reverse(s_11));
    }

    public static void main() {
        foreach (Case t_13 in test_data_12) {
            string s_14 = t_13.text;
            bool expected_15 = t_13.expected;
            bool r1_16 = Program.is_palindrome(s_14);
            bool r2_17 = Program.is_palindrome_traversal(s_14);
            bool r3_18 = Program.is_palindrome_recursive(s_14);
            bool r4_19 = Program.is_palindrome_slice(s_14);
            if (((((r1_16 != expected_15) || (r2_17 != expected_15)) || (r3_18 != expected_15)) || (r4_19 != expected_15))) {
                throw new Exception("algorithm mismatch");
            }
            Console.WriteLine(Program._fmtTop(((s_14 + " ") + _fmtStr(expected_15))));
        };
        Console.WriteLine(Program._fmtTop("a man a plan a canal panama"));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
