// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string phone_12 = "0094702343221";
    public static bool starts_with(string s_0, string prefix_1) {
        if ((s_0.Length < prefix_1.Length)) {
            return false;
        };
        return (_substr(s_0, 0, prefix_1.Length) == prefix_1);
    }

    public static bool all_digits(string s_2) {
        long i_3 = 0;
        while ((i_3 < s_2.Length)) {
            string c_4 = s_2.Substring((int)(i_3), 1);
            if (((string.Compare(c_4, "0") < 0) || (string.Compare(c_4, "9") > 0))) {
                return false;
            }
            i_3 = (i_3 + 1);
        };
        return true;
    }

    public static bool is_sri_lankan_phone_number(string phone_5) {
        string p_6 = phone_5;
        if (Program.starts_with(p_6, "+94")) {
            p_6 = _substr(p_6, 3, p_6.Length);
        } else if (Program.starts_with(p_6, "0094")) {
            p_6 = _substr(p_6, 4, p_6.Length);
        } else if (Program.starts_with(p_6, "94")) {
            p_6 = _substr(p_6, 2, p_6.Length);
        } else if (Program.starts_with(p_6, "0")) {
            p_6 = _substr(p_6, 1, p_6.Length);
        } else {
            return false;
        };
        if (((p_6.Length != 9) && (p_6.Length != 10))) {
            return false;
        };
        if ((p_6.Substring((int)(0), 1) != "7")) {
            return false;
        };
        string second_7 = p_6.Substring((int)(1), 1);
        string[] allowed_8 = new string[]{"0", "1", "2", "4", "5", "6", "7", "8"};
        if ((!(Array.IndexOf(allowed_8, second_7) >= 0))) {
            return false;
        };
        long idx_9 = 2;
        if ((p_6.Length == 10)) {
            string sep_10 = p_6.Substring((int)(2), 1);
            if (((sep_10 != "-") && (sep_10 != " "))) {
                return false;
            }
            idx_9 = 3;
        };
        if (((p_6.Length - idx_9) != 7)) {
            return false;
        };
        string rest_11 = _substr(p_6, idx_9, p_6.Length);
        return Program.all_digits(rest_11);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.is_sri_lankan_phone_number(phone_12))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
