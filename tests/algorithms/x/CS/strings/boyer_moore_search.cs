// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    public static long match_in_pattern(string pat_0, string ch_1) {
        long i_2 = (pat_0.Length - 1);
        while ((i_2 >= 0)) {
            if ((_substr(pat_0, i_2, (i_2 + 1)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 - 1);
        };
        return -1;
    }

    public static long mismatch_in_text(string text_3, string pat_4, long current_pos_5) {
        long i_6 = (pat_4.Length - 1);
        while ((i_6 >= 0)) {
            if ((_substr(pat_4, i_6, (i_6 + 1)) != _substr(text_3, (current_pos_5 + i_6), ((current_pos_5 + i_6) + 1)))) {
                return (current_pos_5 + i_6);
            }
            i_6 = (i_6 - 1);
        };
        return -1;
    }

    public static long[] bad_character_heuristic(string text_7, string pat_8) {
        long textLen_9 = text_7.Length;
        long patLen_10 = pat_8.Length;
        long[] positions_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 <= (textLen_9 - patLen_10))) {
            long mismatch_index_13 = Program.mismatch_in_text(text_7, pat_8, i_12);
            if ((mismatch_index_13 < 0)) {
                positions_11 = (Enumerable.ToArray(Enumerable.Append<long>(positions_11, i_12)));
                i_12 = (i_12 + 1);
            } else {
                string ch_14 = _substr(text_7, mismatch_index_13, (mismatch_index_13 + 1));
                long match_index_15 = Program.match_in_pattern(pat_8, ch_14);
                if ((match_index_15 < 0)) {
                    i_12 = (mismatch_index_13 + 1);
                } else {
                    i_12 = (mismatch_index_13 - match_index_15);
                }
            }
        };
        return positions_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
