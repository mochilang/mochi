// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string lower_0 = "abcdefghijklmnopqrstuvwxyz";
    static string upper_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static long index_of(string s_2, string ch_3) {
        long i_4 = 0;
        while ((i_4 < s_2.Length)) {
            if ((s_2.Substring((int)(i_4), 1) == ch_3)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    public static string to_title_case(string word_5) {
        if ((word_5.Length == 0)) {
            return "";
        };
        string first_6 = _substr(word_5, 0, 1);
        long idx_7 = Program.index_of(lower_0, first_6);
        string result_8 = ((idx_7 >= 0) ? _substr(upper_1, idx_7, (idx_7 + 1)) : first_6);
        long i_9 = 1;
        while ((i_9 < word_5.Length)) {
            string ch_10 = _substr(word_5, i_9, (i_9 + 1));
            long uidx_11 = Program.index_of(upper_1, ch_10);
            if ((uidx_11 >= 0)) {
                result_8 = (result_8 + _substr(lower_0, uidx_11, (uidx_11 + 1)));
            } else {
                result_8 = (result_8 + ch_10);
            }
            i_9 = (i_9 + 1);
        };
        return result_8;
    }

    public static string[] split_words(string s_12) {
        string[] words_13 = new string[]{};
        string current_14 = "";
        long i_15 = 0;
        while ((i_15 < s_12.Length)) {
            string ch_16 = s_12.Substring((int)(i_15), 1);
            if ((ch_16 == " ")) {
                if ((current_14.Length > 0)) {
                    words_13 = (Enumerable.ToArray(Enumerable.Append<string>(words_13, current_14)));
                    current_14 = "";
                }
            } else {
                current_14 = (current_14 + ch_16);
            }
            i_15 = (i_15 + 1);
        };
        if ((current_14.Length > 0)) {
            words_13 = (Enumerable.ToArray(Enumerable.Append<string>(words_13, current_14)));
        };
        return words_13;
    }

    public static string sentence_to_title_case(string sentence_17) {
        string[] words_18 = Program.split_words(sentence_17);
        string res_19 = "";
        long i_20 = 0;
        while ((i_20 < words_18.Length)) {
            res_19 = (res_19 + Program.to_title_case(words_18[(int)(i_20)]));
            if (((i_20 + 1) < words_18.Length)) {
                res_19 = (res_19 + " ");
            }
            i_20 = (i_20 + 1);
        };
        return res_19;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.to_title_case("Aakash")));
            Console.WriteLine(Program._fmtTop(Program.to_title_case("aakash")));
            Console.WriteLine(Program._fmtTop(Program.to_title_case("AAKASH")));
            Console.WriteLine(Program._fmtTop(Program.to_title_case("aAkAsH")));
            Console.WriteLine(Program._fmtTop(Program.sentence_to_title_case("Aakash Giri")));
            Console.WriteLine(Program._fmtTop(Program.sentence_to_title_case("aakash giri")));
            Console.WriteLine(Program._fmtTop(Program.sentence_to_title_case("AAKASH GIRI")));
            Console.WriteLine(Program._fmtTop(Program.sentence_to_title_case("aAkAsH gIrI")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
