// Generated by Mochi 0.10.61 on 2025-08-08 18:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] range_list(long n_0) {
        long[] lst_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            lst_1 = (Enumerable.ToArray(Enumerable.Append<long>(lst_1, i_2)));
            i_2 = (i_2 + 1);
        };
        return lst_1;
    }

    public static long min3(long a_3, long b_4, long c_5) {
        long m_6 = a_3;
        if ((b_4 < m_6)) {
            m_6 = b_4;
        };
        if ((c_5 < m_6)) {
            m_6 = c_5;
        };
        return m_6;
    }

    public static long levenshtein_distance(string first_word_7, string second_word_8) {
        if ((first_word_7.Length < second_word_8.Length)) {
            return Program.levenshtein_distance(second_word_8, first_word_7);
        };
        if ((second_word_8.Length == 0)) {
            return first_word_7.Length;
        };
        long[] previous_row_9 = Program.range_list((second_word_8.Length + 1));
        long i_10 = 0;
        while ((i_10 < first_word_7.Length)) {
            string c1_11 = first_word_7.Substring((int)(i_10), 1);
            long[] current_row_12 = new long[]{};
            current_row_12 = (Enumerable.ToArray(Enumerable.Append<long>(current_row_12, (i_10 + 1))));
            long j_13 = 0;
            while ((j_13 < second_word_8.Length)) {
                string c2_14 = second_word_8.Substring((int)(j_13), 1);
                long insertions_15 = (previous_row_9[(int)((j_13 + 1))] + 1);
                long deletions_16 = (current_row_12[(int)(j_13)] + 1);
                long substitutions_17 = (previous_row_9[(int)(j_13)] + ((c1_11 == c2_14) ? 0 : 1));
                long min_val_18 = Program.min3(insertions_15, deletions_16, substitutions_17);
                current_row_12 = (Enumerable.ToArray(Enumerable.Append<long>(current_row_12, min_val_18)));
                j_13 = (j_13 + 1);
            }
            previous_row_9 = current_row_12;
            i_10 = (i_10 + 1);
        };
        return previous_row_9[(int)((previous_row_9.Length - 1))];
    }

    public static long levenshtein_distance_optimized(string first_word_19, string second_word_20) {
        if ((first_word_19.Length < second_word_20.Length)) {
            return Program.levenshtein_distance_optimized(second_word_20, first_word_19);
        };
        if ((second_word_20.Length == 0)) {
            return first_word_19.Length;
        };
        long[] previous_row_21 = Program.range_list((second_word_20.Length + 1));
        long i_22 = 0;
        while ((i_22 < first_word_19.Length)) {
            string c1_23 = first_word_19.Substring((int)(i_22), 1);
            long[] current_row_24 = new long[]{};
            current_row_24 = (Enumerable.ToArray(Enumerable.Append<long>(current_row_24, (i_22 + 1))));
            long k_25 = 0;
            while ((k_25 < second_word_20.Length)) {
                current_row_24 = (Enumerable.ToArray(Enumerable.Append<long>(current_row_24, 0)));
                k_25 = (k_25 + 1);
            }
            long j_26 = 0;
            while ((j_26 < second_word_20.Length)) {
                string c2_27 = second_word_20.Substring((int)(j_26), 1);
                long insertions_28 = (previous_row_21[(int)((j_26 + 1))] + 1);
                long deletions_29 = (current_row_24[(int)(j_26)] + 1);
                long substitutions_30 = (previous_row_21[(int)(j_26)] + ((c1_23 == c2_27) ? 0 : 1));
                long min_val_31 = Program.min3(insertions_28, deletions_29, substitutions_30);
                current_row_24[(int)((j_26 + 1))] = min_val_31;
                j_26 = (j_26 + 1);
            }
            previous_row_21 = current_row_24;
            i_22 = (i_22 + 1);
        };
        return previous_row_21[(int)((previous_row_21.Length - 1))];
    }

    public static void main() {
        string a_32 = "kitten";
        string b_33 = "sitting";
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.levenshtein_distance(a_32, b_33))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.levenshtein_distance_optimized(a_32, b_33))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
