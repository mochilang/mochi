// Generated by Mochi 0.10.66 (commit ce2d80d303) on 2025-08-15 15:17 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class HeapItem {
    public long value;
    public long list_idx;
    public long elem_idx;
    public override string ToString() => $"HeapItem {{value = {value}, list_idx = {list_idx}, elem_idx = {elem_idx}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long INF_0 = 1000000000;
    public static long[] smallest_range(long[][] nums_1) {
        HeapItem[] heap_2 = new HeapItem[]{};
        long current_max_3 = -INF_0;
        long i_4 = 0;
        while ((i_4 < nums_1.Length)) {
            long first_val_5 = _idx(_idx(nums_1, i_4), 0);
            heap_2 = ((Func<HeapItem[]>)(() => { var _tmp = heap_2.ToList(); _tmp.Add(new HeapItem{value = first_val_5, list_idx = i_4, elem_idx = 0}); return _tmp.ToArray(); }))();
            if ((first_val_5 > current_max_3)) {
                current_max_3 = first_val_5;
            }
            i_4 = (i_4 + 1);
        };
        long[] best_6 = new long[]{-INF_0, INF_0};
        while ((heap_2.Length > 0)) {
            long min_idx_7 = 0;
            long j_8 = 1;
            while ((j_8 < heap_2.Length)) {
                HeapItem hj_9 = _idx(heap_2, j_8);
                HeapItem hmin_10 = _idx(heap_2, min_idx_7);
                if ((hj_9.value < hmin_10.value)) {
                    min_idx_7 = j_8;
                }
                j_8 = (j_8 + 1);
            }
            HeapItem item_11 = _idx(heap_2, min_idx_7);
            HeapItem[] new_heap_12 = new HeapItem[]{};
            long k_13 = 0;
            while ((k_13 < heap_2.Length)) {
                if ((k_13 != min_idx_7)) {
                    new_heap_12 = ((Func<HeapItem[]>)(() => { var _tmp = new_heap_12.ToList(); _tmp.Add(_idx(heap_2, k_13)); return _tmp.ToArray(); }))();
                }
                k_13 = (k_13 + 1);
            }
            heap_2 = new_heap_12;
            long current_min_14 = item_11.value;
            if (((current_max_3 - current_min_14) < (_idx(best_6, 1) - _idx(best_6, 0)))) {
                best_6 = new long[]{current_min_14, current_max_3};
            }
            if ((item_11.elem_idx == (_idx(nums_1, item_11.list_idx).Length - 1))) {
                break;
            }
            long next_val_15 = _idx(_idx(nums_1, item_11.list_idx), (item_11.elem_idx + 1));
            heap_2 = ((Func<HeapItem[]>)(() => { var _tmp = heap_2.ToList(); _tmp.Add(new HeapItem{value = next_val_15, list_idx = item_11.list_idx, elem_idx = (item_11.elem_idx + 1)}); return _tmp.ToArray(); }))();
            if ((next_val_15 > current_max_3)) {
                current_max_3 = next_val_15;
            }
        };
        return best_6;
    }

    public static string list_to_string(long[] arr_16) {
        string s_17 = "[";
        long i_18 = 0;
        while ((i_18 < arr_16.Length)) {
            s_17 = (s_17 + _fmtStr(_idx(arr_16, i_18)));
            if ((i_18 < (arr_16.Length - 1))) {
                s_17 = (s_17 + ", ");
            }
            i_18 = (i_18 + 1);
        };
        return (s_17 + "]");
    }

    public static void main() {
        long[] result1_19 = Program.smallest_range(new long[][]{new long[]{4, 10, 15, 24, 26}, new long[]{0, 9, 12, 20}, new long[]{5, 18, 22, 30}});
        Console.WriteLine(Program._fmtTop(Program.list_to_string(result1_19)));
        long[] result2_20 = Program.smallest_range(new long[][]{new long[]{1, 2, 3}, new long[]{1, 2, 3}, new long[]{1, 2, 3}});
        Console.WriteLine(Program._fmtTop(Program.list_to_string(result2_20)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
