// Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long index_of_min(long[] xs_0) {
        long min_idx_1 = 0;
        long i_2 = 1;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] < xs_0[(int)(min_idx_1)])) {
                min_idx_1 = i_2;
            }
            i_2 = (i_2 + 1);
        };
        return min_idx_1;
    }

    public static long[] remove_at(long[] xs_3, long idx_4) {
        long[] res_5 = new long[]{};
        long i_6 = 0;
        while ((i_6 < xs_3.Length)) {
            if ((i_6 != idx_4)) {
                res_5 = (Enumerable.ToArray(Enumerable.Append<long>(res_5, xs_3[(int)(i_6)])));
            }
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static long optimal_merge_pattern(long[] files_7) {
        long[] arr_8 = files_7;
        long optimal_merge_cost_9 = 0;
        while ((arr_8.Length > 1)) {
            long temp_10 = 0;
            long k_11 = 0;
            while ((k_11 < 2)) {
                long min_idx_12 = Program.index_of_min(arr_8);
                temp_10 = (temp_10 + arr_8[(int)(min_idx_12)]);
                arr_8 = Program.remove_at(arr_8, min_idx_12);
                k_11 = (k_11 + 1);
            }
            arr_8 = (Enumerable.ToArray(Enumerable.Append<long>(arr_8, temp_10)));
            optimal_merge_cost_9 = (optimal_merge_cost_9 + temp_10);
        };
        return optimal_merge_cost_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.optimal_merge_pattern(new long[]{2, 3, 4})));
            Console.WriteLine(Program._fmtTop(Program.optimal_merge_pattern(new long[]{5, 10, 20, 30, 30})));
            Console.WriteLine(Program._fmtTop(Program.optimal_merge_pattern(new long[]{8, 8, 8, 8, 8})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
