// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class GasStation {
    public long gas_quantity;
    public long cost;
    public override string ToString() => $"GasStation {{gas_quantity = {gas_quantity}, cost = {cost}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static GasStation[] example1_11 = Program.get_gas_stations(new long[]{1, 2, 3, 4, 5}, new long[]{3, 4, 5, 1, 2});
    public static GasStation[] get_gas_stations(long[] gas_quantities_0, long[] costs_1) {
        GasStation[] stations_2 = new GasStation[]{};
        long i_3 = 0;
        while ((i_3 < gas_quantities_0.Length)) {
            stations_2 = ((Func<GasStation[]>)(() => { var _tmp = stations_2.ToList(); _tmp.Add(new GasStation{gas_quantity = _idx(gas_quantities_0, i_3), cost = _idx(costs_1, i_3)}); return _tmp.ToArray(); }))();
            i_3 = (i_3 + 1);
        };
        return stations_2;
    }

    public static long can_complete_journey(GasStation[] gas_stations_4) {
        long total_gas_5 = 0;
        long total_cost_6 = 0;
        long i_7 = 0;
        while ((i_7 < gas_stations_4.Length)) {
            total_gas_5 = (total_gas_5 + _idx(gas_stations_4, i_7).gas_quantity);
            total_cost_6 = (total_cost_6 + _idx(gas_stations_4, i_7).cost);
            i_7 = (i_7 + 1);
        };
        if ((total_gas_5 < total_cost_6)) {
            return -1;
        };
        long start_8 = 0;
        long net_9 = 0;
        i_7 = 0;
        while ((i_7 < gas_stations_4.Length)) {
            GasStation station_10 = _idx(gas_stations_4, i_7);
            net_9 = ((net_9 + station_10.gas_quantity) - station_10.cost);
            if ((net_9 < 0)) {
                start_8 = (i_7 + 1);
                net_9 = 0;
            }
            i_7 = (i_7 + 1);
        };
        return start_8;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.can_complete_journey(example1_11))));
            GasStation[] example2_12 = Program.get_gas_stations(new long[]{2, 3, 4}, new long[]{3, 4, 3});
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.can_complete_journey(example2_12))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
