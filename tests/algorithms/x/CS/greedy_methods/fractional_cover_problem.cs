// Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Item {
    public long weight;
    public long value;
    public override string ToString() => $"Item {{weight = {weight}, value = {value}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Item[] items1_9 = new Item[]{new Item{weight = 10, value = 60}, new Item{weight = 20, value = 100}, new Item{weight = 30, value = 120}};
    public static double ratio(Item item_0) {
        return (Convert.ToDouble(item_0.value) / Convert.ToDouble(item_0.weight));
    }

    public static double fractional_cover(Item[] items_1, long capacity_2) {
        if ((capacity_2 < 0)) {
            throw new Exception("Capacity cannot be negative");
        };
        double total_3 = 0.0;
        long remaining_4 = capacity_2;
        Item[] sorted_5 = (from it in items_1 orderby Program.ratio(it) descending select it).ToArray();
        long idx_6 = 0;
        while (((idx_6 < sorted_5.Length) && (remaining_4 > 0))) {
            Item item_7 = sorted_5[(int)(idx_6)];
            long take_8 = ((item_7.weight < remaining_4) ? item_7.weight : remaining_4);
            total_3 = (total_3 + (Convert.ToDouble(take_8) * Program.ratio(item_7)));
            remaining_4 = (remaining_4 - take_8);
            idx_6 = (idx_6 + 1);
        };
        return total_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fractional_cover(items1_9, 50))));
            Item[] items2_10 = new Item[]{new Item{weight = 20, value = 100}, new Item{weight = 30, value = 120}, new Item{weight = 10, value = 60}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fractional_cover(items2_10, 25))));
            Item[] items3_11 = new Item[]{};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fractional_cover(items3_11, 50))));
            Item[] items4_12 = new Item[]{new Item{weight = 10, value = 60}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fractional_cover(items4_12, 5))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fractional_cover(items4_12, 1))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.fractional_cover(items4_12, 0))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
