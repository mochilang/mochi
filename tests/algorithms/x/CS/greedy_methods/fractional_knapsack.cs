// Generated by Mochi 0.10.66 (commit ae195abefc) on 2025-08-14 22:13 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Item {
    public double value;
    public double weight;
    public override string ToString() => $"Item {{value = {value.ToString("0.0")}, weight = {weight.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[] vl_21 = new double[]{60.0, 100.0, 120.0};
    static double[] wt_22 = new double[]{10.0, 20.0, 30.0};
    static double result_23 = Program.frac_knapsack(vl_21, wt_22, 50.0, 3);
    public static Item[] sort_by_ratio_desc(Item[] arr_0) {
        long i_1 = 1;
        while ((i_1 < arr_0.Length)) {
            Item key_2 = _idx(arr_0, i_1);
            long j_3 = (i_1 - 1);
            while ((j_3 >= 0)) {
                Item current_4 = _idx(arr_0, j_3);
                if (((current_4.value / current_4.weight) < (key_2.value / key_2.weight))) {
                    arr_0[(int)((j_3 + 1))] = current_4;
                    j_3 = (j_3 - 1);
                } else {
                    break;
                }
            }
            arr_0[(int)((j_3 + 1))] = key_2;
            i_1 = (i_1 + 1);
        };
        return arr_0;
    }

    public static double sum_first(double[] arr_5, long k_6) {
        double s_7 = 0.0;
        long i_8 = 0;
        while (((i_8 < k_6) && (i_8 < arr_5.Length))) {
            s_7 = (s_7 + _idx(arr_5, i_8));
            i_8 = (i_8 + 1);
        };
        return s_7;
    }

    public static double frac_knapsack(double[] vl_9, double[] wt_10, double w_11, long n_12) {
        Item[] items_13 = new Item[]{};
        long i_14 = 0;
        while (((i_14 < vl_9.Length) && (i_14 < wt_10.Length))) {
            items_13 = ((Func<Item[]>)(() => { var _tmp = items_13.ToList(); _tmp.Add(new Item{value = _idx(vl_9, i_14), weight = _idx(wt_10, i_14)}); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        items_13 = Program.sort_by_ratio_desc(items_13);
        double[] values_15 = new double[]{};
        double[] weights_16 = new double[]{};
        i_14 = 0;
        while ((i_14 < items_13.Length)) {
            Item itm_17 = _idx(items_13, i_14);
            values_15 = ((Func<double[]>)(() => { var _tmp = values_15.ToList(); _tmp.Add(itm_17.value); return _tmp.ToArray(); }))();
            weights_16 = ((Func<double[]>)(() => { var _tmp = weights_16.ToList(); _tmp.Add(itm_17.weight); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        double[] acc_18 = new double[]{};
        double total_19 = 0.0;
        i_14 = 0;
        while ((i_14 < weights_16.Length)) {
            total_19 = (total_19 + _idx(weights_16, i_14));
            acc_18 = ((Func<double[]>)(() => { var _tmp = acc_18.ToList(); _tmp.Add(total_19); return _tmp.ToArray(); }))();
            i_14 = (i_14 + 1);
        };
        long k_20 = 0;
        while (((k_20 < acc_18.Length) && (w_11 >= _idx(acc_18, k_20)))) {
            k_20 = (k_20 + 1);
        };
        if ((k_20 == 0)) {
            return 0.0;
        };
        if ((k_20 >= values_15.Length)) {
            return Program.sum_first(values_15, values_15.Length);
        };
        if ((k_20 != n_12)) {
            return (Program.sum_first(values_15, k_20) + (((w_11 - _idx(acc_18, (k_20 - 1))) * _idx(values_15, k_20)) / _idx(weights_16, k_20)));
        };
        return Program.sum_first(values_15, k_20);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(result_23)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
