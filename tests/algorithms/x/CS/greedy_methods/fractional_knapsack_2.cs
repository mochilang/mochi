// Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class KnapsackResult {
    public double max_value;
    public double[] fractions;
    public override string ToString() => $"KnapsackResult {{max_value = {max_value.ToString("0.0")}, fractions = {fractions}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[] v_17 = new double[]{1.0, 3.0, 5.0, 7.0, 9.0};
    static double[] w_18 = new double[]{0.9, 0.7, 0.5, 0.3, 0.1};
    public static long[] sort_by_ratio(long[] index_0, double[] ratio_1) {
        long i_2 = 1;
        while ((i_2 < index_0.Length)) {
            long key_3 = index_0[(int)(i_2)];
            double key_ratio_4 = ratio_1[(int)(key_3)];
            long j_5 = (i_2 - 1);
            while (((j_5 >= 0) && (ratio_1[(int)(index_0[(int)(j_5)])] < key_ratio_4))) {
                index_0[(j_5 + 1)] = index_0[(int)(j_5)];
                j_5 = (j_5 - 1);
            }
            index_0[(j_5 + 1)] = key_3;
            i_2 = (i_2 + 1);
        };
        return index_0;
    }

    public static KnapsackResult fractional_knapsack(double[] value_6, double[] weight_7, double capacity_8) {
        long n_9 = value_6.Length;
        long[] index_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < n_9)) {
            index_10 = (Enumerable.ToArray(Enumerable.Append<long>(index_10, i_11)));
            i_11 = (i_11 + 1);
        };
        double[] ratio_12 = new double[]{};
        i_11 = 0;
        while ((i_11 < n_9)) {
            ratio_12 = (Enumerable.ToArray(Enumerable.Append<double>(ratio_12, (value_6[(int)(i_11)] / weight_7[(int)(i_11)]))));
            i_11 = (i_11 + 1);
        };
        index_10 = Program.sort_by_ratio(index_10, ratio_12);
        double[] fractions_13 = new double[]{};
        i_11 = 0;
        while ((i_11 < n_9)) {
            fractions_13 = (Enumerable.ToArray(Enumerable.Append<double>(fractions_13, 0.0)));
            i_11 = (i_11 + 1);
        };
        double max_value_14 = 0.0;
        long idx_15 = 0;
        while ((idx_15 < index_10.Length)) {
            long item_16 = index_10[(int)(idx_15)];
            if ((weight_7[(int)(item_16)] <= capacity_8)) {
                fractions_13[item_16] = 1.0;
                max_value_14 = (max_value_14 + value_6[(int)(item_16)]);
                capacity_8 = (capacity_8 - weight_7[(int)(item_16)]);
            } else {
                fractions_13[item_16] = (capacity_8 / weight_7[(int)(item_16)]);
                max_value_14 = (max_value_14 + ((value_6[(int)(item_16)] * capacity_8) / weight_7[(int)(item_16)]));
                break;
            }
            idx_15 = (idx_15 + 1);
        };
        return new KnapsackResult{max_value = max_value_14, fractions = fractions_13};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.fractional_knapsack(v_17, w_18, 5.0)));
            Console.WriteLine(Program._fmtTop(Program.fractional_knapsack(new double[]{1.0, 3.0, 5.0, 7.0}, new double[]{0.9, 0.7, 0.5, 0.3}, 30.0)));
            Console.WriteLine(Program._fmtTop(Program.fractional_knapsack(new double[]{}, new double[]{}, 30.0)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
