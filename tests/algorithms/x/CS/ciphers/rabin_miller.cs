// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long p_27 = Program.generate_large_prime(16);
    public static long int_pow(long base_0, long exp_1) {
        long result_2 = 1;
        long i_3 = 0;
        while ((i_3 < exp_1)) {
            result_2 = (result_2 * base_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static long pow_mod(long base_4, long exp_5, long mod_6) {
        long result_7 = 1;
        long b_8 = (base_4 % mod_6);
        long e_9 = exp_5;
        while ((e_9 > 0)) {
            if (((e_9 % 2) == 1)) {
                result_7 = ((result_7 * b_8) % mod_6);
            }
            e_9 = (e_9 / 2);
            b_8 = ((b_8 * b_8) % mod_6);
        };
        return result_7;
    }

    public static long rand_range(long low_10, long high_11) {
        return ((_now() % (high_11 - low_10)) + low_10);
    }

    public static bool rabin_miller(long num_12) {
        long s_13 = (num_12 - 1);
        long t_14 = 0;
        while (((s_13 % 2) == 0)) {
            s_13 = (s_13 / 2);
            t_14 = (t_14 + 1);
        };
        long k_15 = 0;
        while ((k_15 < 5)) {
            long a_16 = Program.rand_range(2, (num_12 - 1));
            long v_17 = Program.pow_mod(a_16, s_13, num_12);
            if ((v_17 != 1)) {
                long i_18 = 0;
                while ((v_17 != (num_12 - 1))) {
                    if ((i_18 == (t_14 - 1))) {
                        return false;
                    }
                    i_18 = (i_18 + 1);
                    v_17 = ((v_17 * v_17) % num_12);
                }
            }
            k_15 = (k_15 + 1);
        };
        return true;
    }

    public static bool is_prime_low_num(long num_19) {
        if ((num_19 < 2)) {
            return false;
        };
        long[] low_primes_20 = new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};
        if ((Array.IndexOf(low_primes_20, num_19) >= 0)) {
            return true;
        };
        long i_21 = 0;
        while ((i_21 < low_primes_20.Length)) {
            long p_22 = low_primes_20[(int)(i_21)];
            if (((num_19 % p_22) == 0)) {
                return false;
            }
            i_21 = (i_21 + 1);
        };
        return Program.rabin_miller(num_19);
    }

    public static long generate_large_prime(long keysize_23) {
        long start_24 = Program.int_pow(2, (keysize_23 - 1));
        long end_25 = Program.int_pow(2, keysize_23);
        while (true) {
            long num_26 = Program.rand_range(start_24, end_25);
            if (Program.is_prime_low_num(num_26)) {
                return num_26;
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Prime number: " + _fmtStr(p_27))));
            Console.WriteLine(Program._fmtTop(("is_prime_low_num: " + _fmtStr(Program.is_prime_low_num(p_27)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
