// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string abc_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string low_abc_1 = "abcdefghijklmnopqrstuvwxyz";
    static string rotor1_2 = "EGZWVONAHDCLFQMSIPJBYUKXTR";
    static string rotor2_3 = "FOBHMDKEXQNRAULPGSJVTYICZW";
    static string rotor3_4 = "ZJXESIUQLHAVRMDOYGTNFWPBKC";
    static string rotor4_5 = "RMDJXFUWGISLHVTCQNKYPBEZOA";
    static string rotor5_6 = "SGLCPQWZHKXAREONTFBVIYJUDM";
    static string rotor6_7 = "HVSICLTYKQUBXDWAJZOMFGPREN";
    static string rotor7_8 = "RZWQHFMVDBKICJLNTUXAGYPSOE";
    static string rotor8_9 = "LFKIJODBEGAMQPXVUHYSTCZRWN";
    static string rotor9_10 = "KOAEGVDHXPQZMLFTYWJNBRCIUS";
    static string[] reflector_pairs_11 = new string[]{"AN", "BO", "CP", "DQ", "ER", "FS", "GT", "HU", "IV", "JW", "KX", "LY", "MZ"};
    public static bool list_contains(string[] xs_12, string x_13) {
        long i_14 = 0;
        while ((i_14 < xs_12.Length)) {
            if ((xs_12[(int)(i_14)] == x_13)) {
                return true;
            }
            i_14 = (i_14 + 1);
        };
        return false;
    }

    public static long index_in_string(string s_15, string ch_16) {
        long i_17 = 0;
        while ((i_17 < s_15.Length)) {
            if ((_substr(s_15, i_17, (i_17 + 1)) == ch_16)) {
                return i_17;
            }
            i_17 = (i_17 + 1);
        };
        return -1;
    }

    public static bool contains_char(string s_18, string ch_19) {
        return (Program.index_in_string(s_18, ch_19) >= 0);
    }

    public static string to_uppercase(string s_20) {
        string res_21 = "";
        long i_22 = 0;
        while ((i_22 < s_20.Length)) {
            string ch_23 = _substr(s_20, i_22, (i_22 + 1));
            long idx_24 = Program.index_in_string(low_abc_1, ch_23);
            if ((idx_24 >= 0)) {
                res_21 = (res_21 + _substr(abc_0, idx_24, (idx_24 + 1)));
            } else {
                res_21 = (res_21 + ch_23);
            }
            i_22 = (i_22 + 1);
        };
        return res_21;
    }

    public static string plugboard_map(string[] pb_25, string ch_26) {
        long i_27 = 0;
        while ((i_27 < pb_25.Length)) {
            string pair_28 = pb_25[(int)(i_27)];
            string a_29 = _substr(pair_28, 0, 1);
            string b_30 = _substr(pair_28, 1, 2);
            if ((ch_26 == a_29)) {
                return b_30;
            }
            if ((ch_26 == b_30)) {
                return a_29;
            }
            i_27 = (i_27 + 1);
        };
        return ch_26;
    }

    public static string reflector_map(string ch_31) {
        long i_32 = 0;
        while ((i_32 < reflector_pairs_11.Length)) {
            string pair_33 = reflector_pairs_11[(int)(i_32)];
            string a_34 = _substr(pair_33, 0, 1);
            string b_35 = _substr(pair_33, 1, 2);
            if ((ch_31 == a_34)) {
                return b_35;
            }
            if ((ch_31 == b_35)) {
                return a_34;
            }
            i_32 = (i_32 + 1);
        };
        return ch_31;
    }

    public static long count_unique(string[] xs_36) {
        string[] unique_37 = new string[]{};
        long i_38 = 0;
        while ((i_38 < xs_36.Length)) {
            if ((!Program.list_contains(unique_37, xs_36[(int)(i_38)]))) {
                unique_37 = (Enumerable.ToArray(Enumerable.Append(unique_37, xs_36[(int)(i_38)])));
            }
            i_38 = (i_38 + 1);
        };
        return unique_37.Length;
    }

    public static string[] build_plugboard(string pbstring_39) {
        if ((pbstring_39.Length == 0)) {
            return new string[]{};
        };
        if (((pbstring_39.Length % 2) != 0)) {
            throw new Exception((("Odd number of symbols(" + _fmtStr(pbstring_39.Length)) + ")"));
        };
        string pbstring_nospace_40 = "";
        long i_41 = 0;
        while ((i_41 < pbstring_39.Length)) {
            string ch_42 = _substr(pbstring_39, i_41, (i_41 + 1));
            if ((ch_42 != " ")) {
                pbstring_nospace_40 = (pbstring_nospace_40 + ch_42);
            }
            i_41 = (i_41 + 1);
        };
        string[] seen_43 = new string[]{};
        i_41 = 0;
        while ((i_41 < pbstring_nospace_40.Length)) {
            string ch_44 = _substr(pbstring_nospace_40, i_41, (i_41 + 1));
            if ((!Program.contains_char(abc_0, ch_44))) {
                throw new Exception((("'" + ch_44) + "' not in list of symbols"));
            }
            if (Program.list_contains(seen_43, ch_44)) {
                throw new Exception((("Duplicate symbol(" + ch_44) + ")"));
            }
            seen_43 = (Enumerable.ToArray(Enumerable.Append(seen_43, ch_44)));
            i_41 = (i_41 + 1);
        };
        string[] pb_45 = new string[]{};
        i_41 = 0;
        while ((i_41 < (pbstring_nospace_40.Length - 1))) {
            string a_46 = _substr(pbstring_nospace_40, i_41, (i_41 + 1));
            string b_47 = _substr(pbstring_nospace_40, (i_41 + 1), (i_41 + 2));
            pb_45 = (Enumerable.ToArray(Enumerable.Append(pb_45, (a_46 + b_47))));
            i_41 = (i_41 + 2);
        };
        return pb_45;
    }

    public static void validator(long[] rotpos_48, string[] rotsel_49, string pb_50) {
        if ((Program.count_unique(rotsel_49) < 3)) {
            throw new Exception((("Please use 3 unique rotors (not " + _fmtStr(Program.count_unique(rotsel_49))) + ")"));
        };
        if ((rotpos_48.Length != 3)) {
            throw new Exception("Rotor position must have 3 values");
        };
        long r1_51 = rotpos_48[(int)(0)];
        long r2_52 = rotpos_48[(int)(1)];
        long r3_53 = rotpos_48[(int)(2)];
        if ((!((0 < r1_51) && (r1_51 <= abc_0.Length)))) {
            throw new Exception((("First rotor position is not within range of 1..26 (" + _fmtStr(r1_51)) + ")"));
        };
        if ((!((0 < r2_52) && (r2_52 <= abc_0.Length)))) {
            throw new Exception((("Second rotor position is not within range of 1..26 (" + _fmtStr(r2_52)) + ")"));
        };
        if ((!((0 < r3_53) && (r3_53 <= abc_0.Length)))) {
            throw new Exception((("Third rotor position is not within range of 1..26 (" + _fmtStr(r3_53)) + ")"));
        };
    }

    public static string enigma(string text_54, long[] rotor_position_55, string[] rotor_selection_56, string plugb_57) {
        string up_text_58 = Program.to_uppercase(text_54);
        string up_pb_59 = Program.to_uppercase(plugb_57);
        Program.validator(rotor_position_55, rotor_selection_56, up_pb_59);
        string[] plugboard_60 = Program.build_plugboard(up_pb_59);
        long rotorpos1_61 = (rotor_position_55[(int)(0)] - 1);
        long rotorpos2_62 = (rotor_position_55[(int)(1)] - 1);
        long rotorpos3_63 = (rotor_position_55[(int)(2)] - 1);
        string rotor_a_64 = rotor_selection_56[(int)(0)];
        string rotor_b_65 = rotor_selection_56[(int)(1)];
        string rotor_c_66 = rotor_selection_56[(int)(2)];
        string result_67 = "";
        long i_68 = 0;
        while ((i_68 < up_text_58.Length)) {
            string symbol_69 = _substr(up_text_58, i_68, (i_68 + 1));
            if (Program.contains_char(abc_0, symbol_69)) {
                symbol_69 = Program.plugboard_map(plugboard_60, symbol_69);
                long index_70 = (Program.index_in_string(abc_0, symbol_69) + rotorpos1_61);
                symbol_69 = _substr(rotor_a_64, (index_70 % abc_0.Length), ((index_70 % abc_0.Length) + 1));
                index_70 = (Program.index_in_string(abc_0, symbol_69) + rotorpos2_62);
                symbol_69 = _substr(rotor_b_65, (index_70 % abc_0.Length), ((index_70 % abc_0.Length) + 1));
                index_70 = (Program.index_in_string(abc_0, symbol_69) + rotorpos3_63);
                symbol_69 = _substr(rotor_c_66, (index_70 % abc_0.Length), ((index_70 % abc_0.Length) + 1));
                symbol_69 = Program.reflector_map(symbol_69);
                index_70 = (Program.index_in_string(rotor_c_66, symbol_69) - rotorpos3_63);
                if ((index_70 < 0)) {
                    index_70 = (index_70 + abc_0.Length);
                }
                symbol_69 = _substr(abc_0, index_70, (index_70 + 1));
                index_70 = (Program.index_in_string(rotor_b_65, symbol_69) - rotorpos2_62);
                if ((index_70 < 0)) {
                    index_70 = (index_70 + abc_0.Length);
                }
                symbol_69 = _substr(abc_0, index_70, (index_70 + 1));
                index_70 = (Program.index_in_string(rotor_a_64, symbol_69) - rotorpos1_61);
                if ((index_70 < 0)) {
                    index_70 = (index_70 + abc_0.Length);
                }
                symbol_69 = _substr(abc_0, index_70, (index_70 + 1));
                symbol_69 = Program.plugboard_map(plugboard_60, symbol_69);
                rotorpos1_61 = (rotorpos1_61 + 1);
                if ((rotorpos1_61 >= abc_0.Length)) {
                    rotorpos1_61 = 0;
                    rotorpos2_62 = (rotorpos2_62 + 1);
                }
                if ((rotorpos2_62 >= abc_0.Length)) {
                    rotorpos2_62 = 0;
                    rotorpos3_63 = (rotorpos3_63 + 1);
                }
                if ((rotorpos3_63 >= abc_0.Length)) {
                    rotorpos3_63 = 0;
                }
            }
            result_67 = (result_67 + symbol_69);
            i_68 = (i_68 + 1);
        };
        return result_67;
    }

    public static void main() {
        string message_71 = "This is my Python script that emulates the Enigma machine from WWII.";
        long[] rotor_pos_72 = new long[]{1, 1, 1};
        string pb_73 = "pictures";
        string[] rotor_sel_74 = new string[]{rotor2_3, rotor4_5, rotor8_9};
        string en_75 = Program.enigma(message_71, rotor_pos_72, rotor_sel_74, pb_73);
        Console.WriteLine(Program._fmtTop(("Encrypted message: " + en_75)));
        Console.WriteLine(Program._fmtTop(("Decrypted message: " + Program.enigma(en_75, rotor_pos_72, rotor_sel_74, pb_73))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
