// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] cipher_map_46 = Program.create_cipher_map("Goodbye!!");
    static string encoded_47 = Program.encipher("Hello World!!", cipher_map_46);
    public static long index_in_string(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), 1) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static bool contains_char(string s_3, string ch_4) {
        return (Program.index_in_string(s_3, ch_4) >= 0);
    }

    public static bool is_alpha(string ch_5) {
        string lower_6 = "abcdefghijklmnopqrstuvwxyz";
        string upper_7 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        return (Program.contains_char(lower_6, ch_5) || Program.contains_char(upper_7, ch_5));
    }

    public static string to_upper(string s_8) {
        string lower_9 = "abcdefghijklmnopqrstuvwxyz";
        string upper_10 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string res_11 = "";
        long i_12 = 0;
        while ((i_12 < s_8.Length)) {
            string ch_13 = s_8.Substring((int)(i_12), 1);
            long idx_14 = Program.index_in_string(lower_9, ch_13);
            if ((idx_14 >= 0)) {
                res_11 = (res_11 + upper_10.Substring((int)(idx_14), 1));
            } else {
                res_11 = (res_11 + ch_13);
            }
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static string remove_duplicates(string key_15) {
        string res_16 = "";
        long i_17 = 0;
        while ((i_17 < key_15.Length)) {
            string ch_18 = key_15.Substring((int)(i_17), 1);
            if (((ch_18 == " ") || (Program.is_alpha(ch_18) && (Program.contains_char(res_16, ch_18) == false)))) {
                res_16 = (res_16 + ch_18);
            }
            i_17 = (i_17 + 1);
        };
        return res_16;
    }

    public static string[] create_cipher_map(string key_19) {
        string alphabet_20 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string cleaned_21 = Program.remove_duplicates(Program.to_upper(key_19));
        string[] cipher_22 = new string[]{};
        long i_23 = 0;
        while ((i_23 < cleaned_21.Length)) {
            cipher_22 = (Enumerable.ToArray(Enumerable.Append(cipher_22, cleaned_21.Substring((int)(i_23), 1))));
            i_23 = (i_23 + 1);
        };
        long offset_24 = cleaned_21.Length;
        long j_25 = cipher_22.Length;
        while ((j_25 < 26)) {
            string char_26 = alphabet_20.Substring((int)((j_25 - offset_24)), 1);
            while (Program.contains_char(cleaned_21, char_26)) {
                offset_24 = (offset_24 - 1);
                char_26 = alphabet_20.Substring((int)((j_25 - offset_24)), 1);
            }
            cipher_22 = (Enumerable.ToArray(Enumerable.Append(cipher_22, char_26)));
            j_25 = (j_25 + 1);
        };
        return cipher_22;
    }

    public static long index_in_list(string[] lst_27, string ch_28) {
        long i_29 = 0;
        while ((i_29 < lst_27.Length)) {
            if ((lst_27[(int)(i_29)] == ch_28)) {
                return i_29;
            }
            i_29 = (i_29 + 1);
        };
        return -1;
    }

    public static string encipher(string message_30, string[] cipher_31) {
        string alphabet_32 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string msg_33 = Program.to_upper(message_30);
        string res_34 = "";
        long i_35 = 0;
        while ((i_35 < msg_33.Length)) {
            string ch_36 = msg_33.Substring((int)(i_35), 1);
            long idx_37 = Program.index_in_string(alphabet_32, ch_36);
            if ((idx_37 >= 0)) {
                res_34 = (res_34 + cipher_31[(int)(idx_37)]);
            } else {
                res_34 = (res_34 + ch_36);
            }
            i_35 = (i_35 + 1);
        };
        return res_34;
    }

    public static string decipher(string message_38, string[] cipher_39) {
        string alphabet_40 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string msg_41 = Program.to_upper(message_38);
        string res_42 = "";
        long i_43 = 0;
        while ((i_43 < msg_41.Length)) {
            string ch_44 = msg_41.Substring((int)(i_43), 1);
            long idx_45 = Program.index_in_list(cipher_39, ch_44);
            if ((idx_45 >= 0)) {
                res_42 = (res_42 + alphabet_40.Substring((int)(idx_45), 1));
            } else {
                res_42 = (res_42 + ch_44);
            }
            i_43 = (i_43 + 1);
        };
        return res_42;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(encoded_47));
            Console.WriteLine(Program._fmtTop(Program.decipher(encoded_47, cipher_map_46)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
