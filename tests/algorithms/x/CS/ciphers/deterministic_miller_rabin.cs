// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long mod_pow(long base_0, long exp_1, long mod_2) {
        long result_3 = 1;
        long b_4 = (base_0 % mod_2);
        long e_5 = exp_1;
        while ((e_5 > 0)) {
            if (((e_5 % 2) == 1)) {
                result_3 = ((result_3 * b_4) % mod_2);
            }
            b_4 = ((b_4 * b_4) % mod_2);
            e_5 = (e_5 / 2);
        };
        return result_3;
    }

    public static bool miller_rabin(long n_6, bool allow_probable_7) {
        if ((n_6 == 2)) {
            return true;
        };
        if (((n_6 < 2) || ((n_6 % 2) == 0))) {
            return false;
        };
        if ((n_6 > 5)) {
            long last_8 = (n_6 % 10);
            if ((!((((last_8 == 1) || (last_8 == 3)) || (last_8 == 7)) || (last_8 == 9)))) {
                return false;
            }
        };
        long limit_9 = 3825123056546413051L;
        if (((n_6 > limit_9) && (!allow_probable_7))) {
            throw new Exception("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.");
        };
        long[] bounds_10 = new long[]{2047, 1373653, 25326001, 3215031751L, 2152302898747L, 3474749660383L, 341550071728321L, limit_9};
        long[] primes_11 = new long[]{2, 3, 5, 7, 11, 13, 17, 19};
        long i_12 = 0;
        long plist_len_13 = primes_11.Length;
        while ((i_12 < bounds_10.Length)) {
            if ((n_6 < bounds_10[(int)(i_12)])) {
                plist_len_13 = (i_12 + 1);
                i_12 = bounds_10.Length;
            } else {
                i_12 = (i_12 + 1);
            }
        };
        long d_14 = (n_6 - 1);
        long s_15 = 0;
        while (((d_14 % 2) == 0)) {
            d_14 = (d_14 / 2);
            s_15 = (s_15 + 1);
        };
        long j_16 = 0;
        while ((j_16 < plist_len_13)) {
            long prime_17 = primes_11[(int)(j_16)];
            long x_18 = Program.mod_pow(prime_17, d_14, n_6);
            bool pr_19 = false;
            if (((x_18 == 1) || (x_18 == (n_6 - 1)))) {
                pr_19 = true;
            } else {
                long r_20 = 1;
                while (((r_20 < s_15) && (!pr_19))) {
                    x_18 = ((x_18 * x_18) % n_6);
                    if ((x_18 == (n_6 - 1))) {
                        pr_19 = true;
                    }
                    r_20 = (r_20 + 1);
                }
            }
            if ((!pr_19)) {
                return false;
            }
            j_16 = (j_16 + 1);
        };
        return true;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(561, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(563, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(838201, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(838207, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(17316001, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(17316017, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(3078386641L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(3078386653L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(1713045574801L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(1713045574819L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(2779799728307L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(2779799728327L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(113850023909441L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(113850023909527L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(1275041018848804351L, false))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.miller_rabin(1275041018848804391L, false))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
