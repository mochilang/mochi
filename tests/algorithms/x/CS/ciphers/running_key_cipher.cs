// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string key_36 = "How does the duck know that? said Victor";
    static string plaintext_37 = "DEFEND THIS";
    static string ciphertext_38 = Program.running_key_encrypt(key_36, plaintext_37);
    public static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), 1) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
        return default(long);
    }

    public static long ord(string ch_3) {
        string upper_4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_5 = "abcdefghijklmnopqrstuvwxyz";
        long idx_6 = Program.indexOf(upper_4, ch_3);
        if ((idx_6 >= 0)) {
            return (65 + idx_6);
        };
        idx_6 = Program.indexOf(lower_5, ch_3);
        if ((idx_6 >= 0)) {
            return (97 + idx_6);
        };
        return 0;
        return default(long);
    }

    public static string chr(long n_7) {
        string upper_8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_9 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_7 >= 65) && (n_7 < 91))) {
            return _substr(upper_8, (n_7 - 65), (n_7 - 64));
        };
        if (((n_7 >= 97) && (n_7 < 123))) {
            return _substr(lower_9, (n_7 - 97), (n_7 - 96));
        };
        return "?";
        return default(string);
    }

    public static string clean_text(string s_10) {
        string out_11 = "";
        long i_12 = 0;
        while ((i_12 < s_10.Length)) {
            string ch_13 = s_10.Substring((int)(i_12), 1);
            if (((string.Compare(ch_13, "A") >= 0) && (string.Compare(ch_13, "Z") <= 0))) {
                out_11 = (out_11 + ch_13);
            } else if (((string.Compare(ch_13, "a") >= 0) && (string.Compare(ch_13, "z") <= 0))) {
                out_11 = (out_11 + Program.chr((Program.ord(ch_13) - 32)));
            }
            i_12 = (i_12 + 1);
        };
        return out_11;
        return default(string);
    }

    public static string running_key_encrypt(string key_14, string plaintext_15) {
        string pt_16 = Program.clean_text(plaintext_15);
        string k_17 = Program.clean_text(key_14);
        long key_len_18 = k_17.Length;
        string res_19 = "";
        long ord_a_20 = Program.ord("A");
        long i_21 = 0;
        while ((i_21 < pt_16.Length)) {
            long p_22 = (Program.ord(pt_16.Substring((int)(i_21), 1)) - ord_a_20);
            long kv_23 = (Program.ord(k_17.Substring((int)(_mod(i_21, key_len_18)), 1)) - ord_a_20);
            long c_24 = _mod((p_22 + kv_23), 26);
            res_19 = (res_19 + Program.chr((c_24 + ord_a_20)));
            i_21 = (i_21 + 1);
        };
        return res_19;
        return default(string);
    }

    public static string running_key_decrypt(string key_25, string ciphertext_26) {
        string ct_27 = Program.clean_text(ciphertext_26);
        string k_28 = Program.clean_text(key_25);
        long key_len_29 = k_28.Length;
        string res_30 = "";
        long ord_a_31 = Program.ord("A");
        long i_32 = 0;
        while ((i_32 < ct_27.Length)) {
            long c_33 = (Program.ord(ct_27.Substring((int)(i_32), 1)) - ord_a_31);
            long kv_34 = (Program.ord(k_28.Substring((int)(_mod(i_32, key_len_29)), 1)) - ord_a_31);
            long p_35 = _mod(((c_33 - kv_34) + 26), 26);
            res_30 = (res_30 + Program.chr((p_35 + ord_a_31)));
            i_32 = (i_32 + 1);
        };
        return res_30;
        return default(string);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(ciphertext_38));
            Console.WriteLine(Program._fmtTop(Program.running_key_decrypt(key_36, ciphertext_38)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
