// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string LETTERS_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string LOWERCASE_1 = "abcdefghijklmnopqrstuvwxyz";
    static long seed_2 = 1;
    static string key_42 = "LFWOAYUISVKMNXPBDCRJTQEGHZ";
    public static long rand(long n_3) {
        seed_2 = (((seed_2 * 1664525) + 1013904223) % 2147483647);
        return (seed_2 % n_3);
    }

    public static string get_random_key() {
        string[] chars_4 = new string[]{};
        long i_5 = 0;
        while ((i_5 < LETTERS_0.Length)) {
            chars_4 = (Enumerable.ToArray(Enumerable.Append(chars_4, LETTERS_0.Substring((int)(i_5), 1))));
            i_5 = (i_5 + 1);
        };
        long j_6 = (chars_4.Length - 1);
        while ((j_6 > 0)) {
            long k_7 = Program.rand((j_6 + 1));
            string tmp_8 = chars_4[(int)(j_6)];
            chars_4[j_6] = chars_4[(int)(k_7)];
            chars_4[k_7] = tmp_8;
            j_6 = (j_6 - 1);
        };
        string res_9 = "";
        i_5 = 0;
        while ((i_5 < chars_4.Length)) {
            res_9 = (res_9 + chars_4[(int)(i_5)]);
            i_5 = (i_5 + 1);
        };
        return res_9;
    }

    public static bool check_valid_key(string key_10) {
        if ((key_10.Length != LETTERS_0.Length)) {
            return false;
        };
        Dictionary<string, bool> used_11 = new Dictionary<string, bool>{};
        long i_12 = 0;
        while ((i_12 < key_10.Length)) {
            string ch_13 = key_10.Substring((int)(i_12), 1);
            if ((used_11.ContainsKey(ch_13) ? used_11[ch_13] : false)) {
                return false;
            }
            used_11[ch_13] = true;
            i_12 = (i_12 + 1);
        };
        i_12 = 0;
        while ((i_12 < LETTERS_0.Length)) {
            string ch_14 = LETTERS_0.Substring((int)(i_12), 1);
            if ((!(used_11.ContainsKey(ch_14) ? used_11[ch_14] : false))) {
                return false;
            }
            i_12 = (i_12 + 1);
        };
        return true;
    }

    public static long index_in(string s_15, string ch_16) {
        long i_17 = 0;
        while ((i_17 < s_15.Length)) {
            if ((s_15.Substring((int)(i_17), 1) == ch_16)) {
                return i_17;
            }
            i_17 = (i_17 + 1);
        };
        return -1;
    }

    public static string char_to_upper(string c_18) {
        long i_19 = 0;
        while ((i_19 < LOWERCASE_1.Length)) {
            if ((c_18 == LOWERCASE_1.Substring((int)(i_19), 1))) {
                return LETTERS_0.Substring((int)(i_19), 1);
            }
            i_19 = (i_19 + 1);
        };
        return c_18;
    }

    public static string char_to_lower(string c_20) {
        long i_21 = 0;
        while ((i_21 < LETTERS_0.Length)) {
            if ((c_20 == LETTERS_0.Substring((int)(i_21), 1))) {
                return LOWERCASE_1.Substring((int)(i_21), 1);
            }
            i_21 = (i_21 + 1);
        };
        return c_20;
    }

    public static bool is_upper(string c_22) {
        long i_23 = 0;
        while ((i_23 < LETTERS_0.Length)) {
            if ((c_22 == LETTERS_0.Substring((int)(i_23), 1))) {
                return true;
            }
            i_23 = (i_23 + 1);
        };
        return false;
    }

    public static string translate_message(string key_24, string message_25, string mode_26) {
        string chars_a_27 = LETTERS_0;
        string chars_b_28 = key_24;
        if ((mode_26 == "decrypt")) {
            string tmp_29 = chars_a_27;
            chars_a_27 = chars_b_28;
            chars_b_28 = tmp_29;
        };
        string translated_30 = "";
        long i_31 = 0;
        while ((i_31 < message_25.Length)) {
            string symbol_32 = message_25.Substring((int)(i_31), 1);
            string upper_symbol_33 = Program.char_to_upper(symbol_32);
            long idx_34 = Program.index_in(chars_a_27, upper_symbol_33);
            if ((idx_34 >= 0)) {
                string mapped_35 = chars_b_28.Substring((int)(idx_34), 1);
                if (Program.is_upper(symbol_32)) {
                    translated_30 = (translated_30 + mapped_35);
                } else {
                    translated_30 = (translated_30 + Program.char_to_lower(mapped_35));
                }
            } else {
                translated_30 = (translated_30 + symbol_32);
            }
            i_31 = (i_31 + 1);
        };
        return translated_30;
    }

    public static string encrypt_message(string key_36, string message_37) {
        string res_38 = Program.translate_message(key_36, message_37, "encrypt");
        return res_38;
    }

    public static string decrypt_message(string key_39, string message_40) {
        string res_41 = Program.translate_message(key_39, message_40, "decrypt");
        return res_41;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.encrypt_message(key_42, "Harshil Darji")));
            Console.WriteLine(Program._fmtTop(Program.decrypt_message(key_42, "Ilcrism Olcvs")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
