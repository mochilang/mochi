// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string default_alphabet_0 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static long index_of(string s_1, string ch_2) {
        long i_3 = 0;
        while ((i_3 < s_1.Length)) {
            if ((_substr(s_1, i_3, (i_3 + 1)) == ch_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static string encrypt(string input_string_4, long key_5, string alphabet_6) {
        string result_7 = "";
        long i_8 = 0;
        int n_9 = alphabet_6.Length;
        while ((i_8 < input_string_4.Length)) {
            string ch_10 = _substr(input_string_4, i_8, (i_8 + 1));
            long idx_11 = Program.index_of(alphabet_6, ch_10);
            if ((idx_11 < 0)) {
                result_7 = (result_7 + ch_10);
            } else {
                long new_key_12 = ((idx_11 + key_5) % n_9);
                if ((new_key_12 < 0)) {
                    new_key_12 = (new_key_12 + n_9);
                }
                result_7 = (result_7 + _substr(alphabet_6, new_key_12, (new_key_12 + 1)));
            }
            i_8 = (i_8 + 1);
        };
        return result_7;
    }

    public static string decrypt(string input_string_13, long key_14, string alphabet_15) {
        string result_16 = "";
        long i_17 = 0;
        int n_18 = alphabet_15.Length;
        while ((i_17 < input_string_13.Length)) {
            string ch_19 = _substr(input_string_13, i_17, (i_17 + 1));
            long idx_20 = Program.index_of(alphabet_15, ch_19);
            if ((idx_20 < 0)) {
                result_16 = (result_16 + ch_19);
            } else {
                long new_key_21 = ((idx_20 - key_14) % n_18);
                if ((new_key_21 < 0)) {
                    new_key_21 = (new_key_21 + n_18);
                }
                result_16 = (result_16 + _substr(alphabet_15, new_key_21, (new_key_21 + 1)));
            }
            i_17 = (i_17 + 1);
        };
        return result_16;
    }

    public static string[] brute_force(string input_string_22, string alphabet_23) {
        string[] results_24 = new string[]{};
        long key_25 = 1;
        int n_26 = alphabet_23.Length;
        while ((key_25 <= n_26)) {
            string message_27 = Program.decrypt(input_string_22, key_25, alphabet_23);
            results_24 = (Enumerable.ToArray(Enumerable.Append(results_24, message_27)));
            key_25 = (key_25 + 1);
        };
        return results_24;
    }

    public static void main() {
        string alpha_28 = default_alphabet_0;
        string enc_29 = Program.encrypt("The quick brown fox jumps over the lazy dog", 8, alpha_28);
        Console.WriteLine(Program._fmtTop(enc_29));
        string dec_30 = Program.decrypt(enc_29, 8, alpha_28);
        Console.WriteLine(Program._fmtTop(dec_30));
        string[] brute_31 = Program.brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha_28);
        Console.WriteLine(Program._fmtTop(brute_31[(int)(19)]));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
