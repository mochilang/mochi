// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] example1_17 = new long[]{72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33};
    static long[] example2_18 = new long[]{72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33};
    public static string base16_encode(long[] data_0) {
        string digits_1 = "0123456789ABCDEF";
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < data_0.Length)) {
            long b_4 = data_0[(int)(i_3)];
            if (((b_4 < 0) || (b_4 > 255))) {
                throw new Exception("byte out of range");
            }
            long hi_5 = (b_4 / 16);
            long lo_6 = (b_4 % 16);
            res_2 = ((res_2 + _substr(digits_1, hi_5, (hi_5 + 1))) + _substr(digits_1, lo_6, (lo_6 + 1)));
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long[] base16_decode(string data_7) {
        string digits_8 = "0123456789ABCDEF";
        if (((data_7.Length % 2) != 0)) {
            throw new Exception("Base16 encoded data is invalid: Data does not have an even number of hex digits.");
        };
        Func<string, long> hex_value = null;
        hex_value = (string ch_9) => {long j_10 = 0; while ((j_10 < 16)) {
            if ((_substr(digits_8, j_10, (j_10 + 1)) == ch_9)) {
                return j_10;
            }
            j_10 = (j_10 + 1);
        }; return -1;};
        long[] out_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < data_7.Length)) {
            string hi_char_13 = _substr(data_7, i_12, (i_12 + 1));
            string lo_char_14 = _substr(data_7, (i_12 + 1), (i_12 + 2));
            long hi_15 = hex_value(hi_char_13);
            long lo_16 = hex_value(lo_char_14);
            if (((hi_15 < 0) || (lo_16 < 0))) {
                throw new Exception("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.");
            }
            out_11 = (Enumerable.ToArray(Enumerable.Append(out_11, ((hi_15 * 16) + lo_16))));
            i_12 = (i_12 + 2);
        };
        return out_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.base16_encode(example1_17)));
            Console.WriteLine(Program._fmtTop(Program.base16_encode(example2_18)));
            Console.WriteLine(Program._fmtTop(Program.base16_encode(new long[]{})));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.base16_decode("48656C6C6F20576F726C6421"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.base16_decode("48454C4C4F20574F524C4421"))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.base16_decode(""))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
