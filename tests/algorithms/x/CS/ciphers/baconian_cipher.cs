// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, string> encode_map_0 = new Dictionary<string, string>{{"a", "AAAAA"}, {"b", "AAAAB"}, {"c", "AAABA"}, {"d", "AAABB"}, {"e", "AABAA"}, {"f", "AABAB"}, {"g", "AABBA"}, {"h", "AABBB"}, {"i", "ABAAA"}, {"j", "BBBAA"}, {"k", "ABAAB"}, {"l", "ABABA"}, {"m", "ABABB"}, {"n", "ABBAA"}, {"o", "ABBAB"}, {"p", "ABBBA"}, {"q", "ABBBB"}, {"r", "BAAAA"}, {"s", "BAAAB"}, {"t", "BAABA"}, {"u", "BAABB"}, {"v", "BBBAB"}, {"w", "BABAA"}, {"x", "BABAB"}, {"y", "BABBA"}, {"z", "BABBB"}, {" ", " "}};
    static Dictionary<string, string> decode_map_3 = Program.make_decode_map();
    public static Dictionary<string, string> make_decode_map() {
        Dictionary<string, string> m_1 = new Dictionary<string, string>{};
        foreach (var k_2 in encode_map_0.Keys) {
            m_1[(encode_map_0.ContainsKey(k_2) ? encode_map_0[k_2] : "")] = k_2;
        };
        return m_1;
    }

    public static string[] split_spaces(string s_4) {
        string[] parts_5 = new string[]{};
        string current_6 = "";
        long i_7 = 0;
        while ((i_7 < s_4.Length)) {
            string ch_8 = _substr(s_4, i_7, (i_7 + 1));
            if ((ch_8 == " ")) {
                parts_5 = (Enumerable.ToArray(Enumerable.Append(parts_5, current_6)));
                current_6 = "";
            } else {
                current_6 = (current_6 + ch_8);
            }
            i_7 = (i_7 + 1);
        };
        parts_5 = (Enumerable.ToArray(Enumerable.Append(parts_5, current_6)));
        return parts_5;
    }

    public static string encode(string word_9) {
        string w_10 = word_9.ToLower();
        string encoded_11 = "";
        long i_12 = 0;
        while ((i_12 < w_10.Length)) {
            string ch_13 = _substr(w_10, i_12, (i_12 + 1));
            if ((encode_map_0.ContainsKey(ch_13))) {
                encoded_11 = (encoded_11 + (encode_map_0.ContainsKey(ch_13) ? encode_map_0[ch_13] : ""));
            } else {
                throw new Exception("encode() accepts only letters of the alphabet and spaces");
            }
            i_12 = (i_12 + 1);
        };
        return encoded_11;
    }

    public static string decode(string coded_14) {
        long i_15 = 0;
        while ((i_15 < coded_14.Length)) {
            string ch_16 = _substr(coded_14, i_15, (i_15 + 1));
            if ((((ch_16 != "A") && (ch_16 != "B")) && (ch_16 != " "))) {
                throw new Exception("decode() accepts only 'A', 'B' and spaces");
            }
            i_15 = (i_15 + 1);
        };
        string[] words_17 = Program.split_spaces(coded_14);
        string decoded_18 = "";
        long w_19 = 0;
        while ((w_19 < words_17.Length)) {
            string word_20 = words_17[(int)(w_19)];
            long j_21 = 0;
            while ((j_21 < word_20.Length)) {
                string segment_22 = _substr(word_20, j_21, (j_21 + 5));
                decoded_18 = (decoded_18 + (decode_map_3.ContainsKey(segment_22) ? decode_map_3[segment_22] : ""));
                j_21 = (j_21 + 5);
            }
            if ((w_19 < (words_17.Length - 1))) {
                decoded_18 = (decoded_18 + " ");
            }
            w_19 = (w_19 + 1);
        };
        return decoded_18;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.encode("hello")));
            Console.WriteLine(Program._fmtTop(Program.encode("hello world")));
            Console.WriteLine(Program._fmtTop(Program.decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB")));
            Console.WriteLine(Program._fmtTop(Program.decode("AABBBAABAAABABAABABAABBAB")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
