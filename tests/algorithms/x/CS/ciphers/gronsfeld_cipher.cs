// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ASCII_UPPERCASE_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string ASCII_LOWERCASE_1 = "abcdefghijklmnopqrstuvwxyz";
    static long NEG_ONE_2 = (0 - 1);
    public static long index_of(string s_3, string ch_4) {
        long i_5 = 0;
        while ((i_5 < s_3.Length)) {
            if ((_substr(s_3, i_5, (i_5 + 1)) == ch_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return NEG_ONE_2;
    }

    public static string to_uppercase(string s_6) {
        string result_7 = "";
        long i_8 = 0;
        while ((i_8 < s_6.Length)) {
            string ch_9 = _substr(s_6, i_8, (i_8 + 1));
            long idx_10 = Program.index_of(ASCII_LOWERCASE_1, ch_9);
            if ((idx_10 == NEG_ONE_2)) {
                result_7 = (result_7 + ch_9);
            } else {
                result_7 = (result_7 + _substr(ASCII_UPPERCASE_0, idx_10, (idx_10 + 1)));
            }
            i_8 = (i_8 + 1);
        };
        return result_7;
    }

    public static string gronsfeld(string text_11, string key_12) {
        long ascii_len_13 = ASCII_UPPERCASE_0.Length;
        long key_len_14 = key_12.Length;
        if ((key_len_14 == 0)) {
            throw new Exception("integer modulo by zero");
        };
        string upper_text_15 = Program.to_uppercase(text_11);
        string encrypted_16 = "";
        long i_17 = 0;
        while ((i_17 < upper_text_15.Length)) {
            string ch_18 = _substr(upper_text_15, i_17, (i_17 + 1));
            long idx_19 = Program.index_of(ASCII_UPPERCASE_0, ch_18);
            if ((idx_19 == NEG_ONE_2)) {
                encrypted_16 = (encrypted_16 + ch_18);
            } else {
                long key_idx_20 = (i_17 % key_len_14);
                long shift_21 = Convert.ToInt64(_substr(key_12, key_idx_20, (key_idx_20 + 1)));
                long new_position_22 = ((idx_19 + shift_21) % ascii_len_13);
                encrypted_16 = (encrypted_16 + _substr(ASCII_UPPERCASE_0, new_position_22, (new_position_22 + 1)));
            }
            i_17 = (i_17 + 1);
        };
        return encrypted_16;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.gronsfeld("hello", "412")));
            Console.WriteLine(Program._fmtTop(Program.gronsfeld("hello", "123")));
            Console.WriteLine(Program._fmtTop(Program.gronsfeld("", "123")));
            Console.WriteLine(Program._fmtTop(Program.gronsfeld("yes, ¥€$ - _!@#%?", "0")));
            Console.WriteLine(Program._fmtTop(Program.gronsfeld("yes, ¥€$ - _!@#%?", "01")));
            Console.WriteLine(Program._fmtTop(Program.gronsfeld("yes, ¥€$ - _!@#%?", "012")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
