// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long gcd(long a_0, long b_1) {
        long x_2 = ((a_0 < 0) ? -a_0 : a_0);
        long y_3 = ((b_1 < 0) ? -b_1 : b_1);
        while ((y_3 != 0)) {
            long t_4 = (x_2 % y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        return x_2;
    }

    public static long find_mod_inverse(long a_5, long m_6) {
        if ((Program.gcd(a_5, m_6) != 1)) {
            throw new Exception((((("mod inverse of " + _fmtStr(a_5)) + " and ") + _fmtStr(m_6)) + " does not exist"));
        };
        long u1_7 = 1;
        long u2_8 = 0;
        long u3_9 = a_5;
        long v1_10 = 0;
        long v2_11 = 1;
        long v3_12 = m_6;
        while ((v3_12 != 0)) {
            long q_13 = (u3_9 / v3_12);
            long t1_14 = (u1_7 - (q_13 * v1_10));
            long t2_15 = (u2_8 - (q_13 * v2_11));
            long t3_16 = (u3_9 - (q_13 * v3_12));
            u1_7 = v1_10;
            u2_8 = v2_11;
            u3_9 = v3_12;
            v1_10 = t1_14;
            v2_11 = t2_15;
            v3_12 = t3_16;
        };
        long res_17 = (u1_7 % m_6);
        if ((res_17 < 0)) {
            res_17 = (res_17 + m_6);
        };
        return res_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_mod_inverse(3, 11))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_mod_inverse(7, 26))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_mod_inverse(11, 26))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_mod_inverse(17, 43))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
