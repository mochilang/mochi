// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Keys {
    public long[] public_key;
    public long[] private_key;
    public override string ToString() => $"Keys {{public_key = {public_key}, private_key = {private_key}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_3 = 1;
    static Keys keys_34 = Program.generate_key(8);
    static long[] pub_35 = keys_34.public_key;
    static long[] priv_36 = keys_34.private_key;
    public static long pow2(long exp_0) {
        long res_1 = 1;
        long i_2 = 0;
        while ((i_2 < exp_0)) {
            res_1 = (res_1 * 2);
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static long next_seed(long x_4) {
        return (((x_4 * 1103515245) + 12345) % 2147483648L);
    }

    public static long rand_range(long min_5, long max_6) {
        seed_3 = Program.next_seed(seed_3);
        return (min_5 + (seed_3 % (max_6 - min_5)));
    }

    public static long gcd(long a_7, long b_8) {
        long x_9 = a_7;
        long y_10 = b_8;
        while ((y_10 != 0)) {
            long temp_11 = (x_9 % y_10);
            x_9 = y_10;
            y_10 = temp_11;
        };
        return x_9;
    }

    public static long mod_inverse(long e_12, long phi_13) {
        long t_14 = 0;
        long newt_15 = 1;
        long r_16 = phi_13;
        long newr_17 = e_12;
        while ((newr_17 != 0)) {
            long quotient_18 = (r_16 / newr_17);
            long tmp_19 = newt_15;
            newt_15 = (t_14 - (quotient_18 * newt_15));
            t_14 = tmp_19;
            long tmp_r_20 = newr_17;
            newr_17 = (r_16 - (quotient_18 * newr_17));
            r_16 = tmp_r_20;
        };
        if ((r_16 > 1)) {
            return 0;
        };
        if ((t_14 < 0)) {
            t_14 = (t_14 + phi_13);
        };
        return t_14;
    }

    public static bool is_prime(long n_21) {
        if ((n_21 < 2)) {
            return false;
        };
        long i_22 = 2;
        while (((i_22 * i_22) <= n_21)) {
            if (((n_21 % i_22) == 0)) {
                return false;
            }
            i_22 = (i_22 + 1);
        };
        return true;
    }

    public static long generate_prime(long bits_23) {
        long min_24 = Program.pow2((bits_23 - 1));
        long max_25 = Program.pow2(bits_23);
        long p_26 = Program.rand_range(min_24, max_25);
        if (((p_26 % 2) == 0)) {
            p_26 = (p_26 + 1);
        };
        while ((!Program.is_prime(p_26))) {
            p_26 = (p_26 + 2);
            if ((p_26 >= max_25)) {
                p_26 = (min_24 + 1);
            }
        };
        return p_26;
    }

    public static Keys generate_key(long bits_27) {
        long p_28 = Program.generate_prime(bits_27);
        long q_29 = Program.generate_prime(bits_27);
        long n_30 = (p_28 * q_29);
        long phi_31 = ((p_28 - 1) * (q_29 - 1));
        long e_32 = Program.rand_range(2, phi_31);
        while ((Program.gcd(e_32, phi_31) != 1)) {
            e_32 = (e_32 + 1);
            if ((e_32 >= phi_31)) {
                e_32 = 2;
            }
        };
        long d_33 = Program.mod_inverse(e_32, phi_31);
        return new Keys{public_key = new long[]{n_30, e_32}, private_key = new long[]{n_30, d_33}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop((((("Public key: (" + _fmtStr(pub_35[(int)(0)])) + ", ") + _fmtStr(pub_35[(int)(1)])) + ")")));
            Console.WriteLine(Program._fmtTop((((("Private key: (" + _fmtStr(priv_36[(int)(0)])) + ", ") + _fmtStr(priv_36[(int)(1)])) + ")")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
