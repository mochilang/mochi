// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[][] SQUARE_0 = new string[][]{new string[]{"a", "b", "c", "d", "e"}, new string[]{"f", "g", "h", "i", "k"}, new string[]{"l", "m", "n", "o", "p"}, new string[]{"q", "r", "s", "t", "u"}, new string[]{"v", "w", "x", "y", "z"}};
    public static long index_of(string s_1, string ch_2) {
        long i_3 = 0;
        while ((i_3 < s_1.Length)) {
            if ((s_1.Substring((int)(i_3), 1) == ch_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static string to_lower_without_spaces(string message_4, bool replace_j_5) {
        string upper_6 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_7 = "abcdefghijklmnopqrstuvwxyz";
        string res_8 = "";
        long i_9 = 0;
        while ((i_9 < message_4.Length)) {
            string ch_10 = message_4.Substring((int)(i_9), 1);
            long pos_11 = Program.index_of(upper_6, ch_10);
            if ((pos_11 >= 0)) {
                ch_10 = lower_7.Substring((int)(pos_11), 1);
            }
            if ((ch_10 != " ")) {
                if ((replace_j_5 && (ch_10 == "j"))) {
                    ch_10 = "i";
                }
                res_8 = (res_8 + ch_10);
            }
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static long[] letter_to_numbers(string letter_12) {
        long r_13 = 0;
        while ((r_13 < SQUARE_0.Length)) {
            long c_14 = 0;
            while ((c_14 < SQUARE_0[(int)(r_13)].Length)) {
                if ((SQUARE_0[(int)(r_13)][(int)(c_14)] == letter_12)) {
                    return (new long[]{(r_13 + 1), (c_14 + 1)} as long[]) ?? new long[]{};
                }
                c_14 = (c_14 + 1);
            }
            r_13 = (r_13 + 1);
        };
        return (new long[]{0, 0} as long[]) ?? new long[]{};
    }

    public static string numbers_to_letter(long row_15, long col_16) {
        return SQUARE_0[(int)((row_15 - 1))][(int)((col_16 - 1))];
    }

    public static string encode(string message_17) {
        string clean_18 = Program.to_lower_without_spaces(message_17, true);
        int l_19 = clean_18.Length;
        long[] rows_20 = new long[]{};
        long[] cols_21 = new long[]{};
        long i_22 = 0;
        while ((i_22 < l_19)) {
            long[] nums_23 = Program.letter_to_numbers(clean_18.Substring((int)(i_22), 1));
            rows_20 = (Enumerable.ToArray(Enumerable.Append(rows_20, nums_23[(int)(0)])));
            cols_21 = (Enumerable.ToArray(Enumerable.Append(cols_21, nums_23[(int)(1)])));
            i_22 = (i_22 + 1);
        };
        long[] seq_24 = new long[]{};
        i_22 = 0;
        while ((i_22 < l_19)) {
            seq_24 = (Enumerable.ToArray(Enumerable.Append(seq_24, rows_20[(int)(i_22)])));
            i_22 = (i_22 + 1);
        };
        i_22 = 0;
        while ((i_22 < l_19)) {
            seq_24 = (Enumerable.ToArray(Enumerable.Append(seq_24, cols_21[(int)(i_22)])));
            i_22 = (i_22 + 1);
        };
        string encoded_25 = "";
        i_22 = 0;
        while ((i_22 < l_19)) {
            long r_26 = seq_24[(int)((2 * i_22))];
            long c_27 = seq_24[(int)(((2 * i_22) + 1))];
            encoded_25 = (encoded_25 + Program.numbers_to_letter(r_26, c_27));
            i_22 = (i_22 + 1);
        };
        return encoded_25;
    }

    public static string decode(string message_28) {
        string clean_29 = Program.to_lower_without_spaces(message_28, false);
        int l_30 = clean_29.Length;
        long[] first_31 = new long[]{};
        long i_32 = 0;
        while ((i_32 < l_30)) {
            long[] nums_33 = Program.letter_to_numbers(clean_29.Substring((int)(i_32), 1));
            first_31 = (Enumerable.ToArray(Enumerable.Append(first_31, nums_33[(int)(0)])));
            first_31 = (Enumerable.ToArray(Enumerable.Append(first_31, nums_33[(int)(1)])));
            i_32 = (i_32 + 1);
        };
        long[] top_34 = new long[]{};
        long[] bottom_35 = new long[]{};
        i_32 = 0;
        while ((i_32 < l_30)) {
            top_34 = (Enumerable.ToArray(Enumerable.Append(top_34, first_31[(int)(i_32)])));
            bottom_35 = (Enumerable.ToArray(Enumerable.Append(bottom_35, first_31[(int)((i_32 + l_30))])));
            i_32 = (i_32 + 1);
        };
        string decoded_36 = "";
        i_32 = 0;
        while ((i_32 < l_30)) {
            long r_37 = top_34[(int)(i_32)];
            long c_38 = bottom_35[(int)(i_32)];
            decoded_36 = (decoded_36 + Program.numbers_to_letter(r_37, c_38));
            i_32 = (i_32 + 1);
        };
        return decoded_36;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.encode("testmessage")));
            Console.WriteLine(Program._fmtTop(Program.encode("Test Message")));
            Console.WriteLine(Program._fmtTop(Program.encode("test j")));
            Console.WriteLine(Program._fmtTop(Program.encode("test i")));
            Console.WriteLine(Program._fmtTop(Program.decode("qtltbdxrxlk")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
