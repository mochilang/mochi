// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ascii85_chars_0 = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu";
    public static long indexOf(string s_1, string ch_2) {
        long i_3 = 0;
        while ((i_3 < s_1.Length)) {
            if ((s_1.Substring((int)(i_3), 1) == ch_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static long ord(string ch_4) {
        long idx_5 = Program.indexOf(ascii85_chars_0, ch_4);
        if ((idx_5 >= 0)) {
            return (33 + idx_5);
        };
        return 0;
    }

    public static string chr(long n_6) {
        if (((n_6 >= 33) && (n_6 <= 117))) {
            return _substr(ascii85_chars_0, (n_6 - 33), (n_6 - 32));
        };
        return "?";
    }

    public static string to_binary(long n_7, long bits_8) {
        string b_9 = "";
        long val_10 = n_7;
        while ((val_10 > 0)) {
            b_9 = (_fmtStr((val_10 % 2)) + b_9);
            val_10 = (val_10 / 2);
        };
        while ((b_9.Length < bits_8)) {
            b_9 = ("0" + b_9);
        };
        if ((b_9.Length == 0)) {
            b_9 = "0";
        };
        return b_9;
    }

    public static long bin_to_int(string bits_11) {
        long n_12 = 0;
        long i_13 = 0;
        while ((i_13 < bits_11.Length)) {
            if ((bits_11.Substring((int)(i_13), 1) == "1")) {
                n_12 = ((n_12 * 2) + 1);
            } else {
                n_12 = (n_12 * 2);
            }
            i_13 = (i_13 + 1);
        };
        return n_12;
    }

    public static string reverse(string s_14) {
        string res_15 = "";
        long i_16 = (s_14.Length - 1);
        while ((i_16 >= 0)) {
            res_15 = (res_15 + s_14.Substring((int)(i_16), 1));
            i_16 = (i_16 - 1);
        };
        return res_15;
    }

    public static string base10_to_85(long d_17) {
        if ((d_17 > 0)) {
            return (Program.chr(((d_17 % 85) + 33)) + Program.base10_to_85((d_17 / 85)));
        };
        return "";
    }

    public static long base85_to_10(string digits_18) {
        long value_19 = 0;
        long i_20 = 0;
        while ((i_20 < digits_18.Length)) {
            value_19 = ((value_19 * 85) + (Program.ord(digits_18.Substring((int)(i_20), 1)) - 33));
            i_20 = (i_20 + 1);
        };
        return value_19;
    }

    public static string ascii85_encode(string data_21) {
        string binary_data_22 = "";
        for (var _i43 = 0; _i43 < data_21.Length; _i43++) {
            var ch_23 = data_21.Substring((int)(_i43), 1);
            binary_data_22 = (binary_data_22 + Program.to_binary(Program.ord(ch_23), 8));
        };
        long null_values_24 = (((32 * ((binary_data_22.Length / 32) + 1)) - binary_data_22.Length) / 8);
        long total_bits_25 = (32 * ((binary_data_22.Length / 32) + 1));
        while ((binary_data_22.Length < total_bits_25)) {
            binary_data_22 = (binary_data_22 + "0");
        };
        string result_26 = "";
        long i_27 = 0;
        while ((i_27 < binary_data_22.Length)) {
            string chunk_bits_28 = _substr(binary_data_22, i_27, (i_27 + 32));
            long chunk_val_29 = Program.bin_to_int(chunk_bits_28);
            string encoded_30 = Program.reverse(Program.base10_to_85(chunk_val_29));
            result_26 = (result_26 + encoded_30);
            i_27 = (i_27 + 32);
        };
        if (((null_values_24 % 4) != 0)) {
            result_26 = _substr(result_26, 0, (result_26.Length - null_values_24));
        };
        return result_26;
    }

    public static string ascii85_decode(string data_31) {
        long null_values_32 = ((5 * ((data_31.Length / 5) + 1)) - data_31.Length);
        string binary_data_33 = data_31;
        long i_34 = 0;
        while ((i_34 < null_values_32)) {
            binary_data_33 = (binary_data_33 + "u");
            i_34 = (i_34 + 1);
        };
        string result_35 = "";
        i_34 = 0;
        while ((i_34 < binary_data_33.Length)) {
            string chunk_36 = _substr(binary_data_33, i_34, (i_34 + 5));
            long value_37 = Program.base85_to_10(chunk_36);
            string bits_38 = Program.to_binary(value_37, 32);
            long j_39 = 0;
            while ((j_39 < 32)) {
                string byte_bits_40 = _substr(bits_38, j_39, (j_39 + 8));
                string c_41 = Program.chr(Program.bin_to_int(byte_bits_40));
                result_35 = (result_35 + c_41);
                j_39 = (j_39 + 8);
            }
            i_34 = (i_34 + 5);
        };
        long trim_42 = null_values_32;
        if (((null_values_32 % 5) == 0)) {
            trim_42 = (null_values_32 - 1);
        };
        return _substr(result_35, 0, (result_35.Length - trim_42));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.ascii85_encode("")));
            Console.WriteLine(Program._fmtTop(Program.ascii85_encode("12345")));
            Console.WriteLine(Program._fmtTop(Program.ascii85_encode("base 85")));
            Console.WriteLine(Program._fmtTop(Program.ascii85_decode("")));
            Console.WriteLine(Program._fmtTop(Program.ascii85_decode("0etOA2#")));
            Console.WriteLine(Program._fmtTop(Program.ascii85_decode("@UX=h+?24")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
