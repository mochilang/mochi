// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Cipher {
    public string[] passcode;
    public string[] key_list;
    public long shift_key;
    public override string ToString() => $"Cipher {{passcode = {passcode}, key_list = {key_list}, shift_key = {shift_key}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Cipher ssc_59 = Program.new_cipher("4PYIXyqeQZr44");
    static string encoded_60 = Program.encrypt(ssc_59, "Hello, this is a modified Caesar cipher");
    public static long ord(string ch_0) {
        string digits_1 = "0123456789";
        long i_2 = 0;
        while ((i_2 < digits_1.Length)) {
            if ((_substr(digits_1, i_2, (i_2 + 1)) == ch_0)) {
                return (48 + i_2);
            }
            i_2 = (i_2 + 1);
        };
        string upper_3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        i_2 = 0;
        while ((i_2 < upper_3.Length)) {
            if ((_substr(upper_3, i_2, (i_2 + 1)) == ch_0)) {
                return (65 + i_2);
            }
            i_2 = (i_2 + 1);
        };
        string lower_4 = "abcdefghijklmnopqrstuvwxyz";
        i_2 = 0;
        while ((i_2 < lower_4.Length)) {
            if ((_substr(lower_4, i_2, (i_2 + 1)) == ch_0)) {
                return (97 + i_2);
            }
            i_2 = (i_2 + 1);
        };
        return 0;
    }

    public static long[] neg_pos(long[] iterlist_5) {
        long i_6 = 1;
        while ((i_6 < iterlist_5.Length)) {
            iterlist_5[i_6] = -iterlist_5[(int)(i_6)];
            i_6 = (i_6 + 2);
        };
        return iterlist_5;
    }

    public static string[] passcode_creator() {
        string choices_7 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        long seed_8 = _now();
        long length_9 = (10 + (seed_8 % 11));
        string[] password_10 = new string[]{};
        long i_11 = 0;
        while ((i_11 < length_9)) {
            seed_8 = (((seed_8 * 1103515245) + 12345) % 2147483647);
            long idx_12 = (seed_8 % choices_7.Length);
            password_10 = (Enumerable.ToArray(Enumerable.Append(password_10, _substr(choices_7, idx_12, (idx_12 + 1)))));
            i_11 = (i_11 + 1);
        };
        return password_10;
    }

    public static string[] unique_sorted(string[] chars_13) {
        string[] uniq_14 = new string[]{};
        long i_15 = 0;
        while ((i_15 < chars_13.Length)) {
            string ch_16 = chars_13[(int)(i_15)];
            if ((!(Array.IndexOf(uniq_14, ch_16) >= 0))) {
                uniq_14 = (Enumerable.ToArray(Enumerable.Append(uniq_14, ch_16)));
            }
            i_15 = (i_15 + 1);
        };
        long j_17 = 0;
        while ((j_17 < uniq_14.Length)) {
            long k_18 = (j_17 + 1);
            long min_idx_19 = j_17;
            while ((k_18 < uniq_14.Length)) {
                if ((string.Compare(uniq_14[(int)(k_18)], uniq_14[(int)(min_idx_19)]) < 0)) {
                    min_idx_19 = k_18;
                }
                k_18 = (k_18 + 1);
            }
            if ((min_idx_19 != j_17)) {
                string tmp_20 = uniq_14[(int)(j_17)];
                uniq_14[j_17] = uniq_14[(int)(min_idx_19)];
                uniq_14[min_idx_19] = tmp_20;
            }
            j_17 = (j_17 + 1);
        };
        return uniq_14;
    }

    public static string[] make_key_list(string[] passcode_21) {
        string key_list_options_22 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n";
        string[] breakpoints_23 = Program.unique_sorted(passcode_21);
        string[] keys_l_24 = new string[]{};
        string[] temp_list_25 = new string[]{};
        long i_26 = 0;
        while ((i_26 < key_list_options_22.Length)) {
            string ch_27 = _substr(key_list_options_22, i_26, (i_26 + 1));
            temp_list_25 = (Enumerable.ToArray(Enumerable.Append(temp_list_25, ch_27)));
            if (((Array.IndexOf(breakpoints_23, ch_27) >= 0) || (i_26 == (key_list_options_22.Length - 1)))) {
                long k_28 = (temp_list_25.Length - 1);
                while ((k_28 >= 0)) {
                    keys_l_24 = (Enumerable.ToArray(Enumerable.Append(keys_l_24, temp_list_25[(int)(k_28)])));
                    k_28 = (k_28 - 1);
                }
                temp_list_25 = new string[]{};
            }
            i_26 = (i_26 + 1);
        };
        return keys_l_24;
    }

    public static long make_shift_key(string[] passcode_29) {
        long[] codes_30 = new long[]{};
        long i_31 = 0;
        while ((i_31 < passcode_29.Length)) {
            codes_30 = (Enumerable.ToArray(Enumerable.Append(codes_30, Program.ord(passcode_29[(int)(i_31)]))));
            i_31 = (i_31 + 1);
        };
        codes_30 = Program.neg_pos(codes_30);
        long total_32 = 0;
        i_31 = 0;
        while ((i_31 < codes_30.Length)) {
            total_32 = (total_32 + codes_30[(int)(i_31)]);
            i_31 = (i_31 + 1);
        };
        if ((total_32 > 0)) {
            return total_32;
        };
        return passcode_29.Length;
    }

    public static Cipher new_cipher(string passcode_str_33) {
        string[] passcode_34 = new string[]{};
        if ((passcode_str_33.Length == 0)) {
            passcode_34 = Program.passcode_creator();
        } else {
            long i_35 = 0;
            while ((i_35 < passcode_str_33.Length)) {
                passcode_34 = (Enumerable.ToArray(Enumerable.Append(passcode_34, _substr(passcode_str_33, i_35, (i_35 + 1)))));
                i_35 = (i_35 + 1);
            }
        };
        string[] key_list_36 = Program.make_key_list(passcode_34);
        long shift_key_37 = Program.make_shift_key(passcode_34);
        return new Cipher{passcode = passcode_34, key_list = key_list_36, shift_key = shift_key_37};
    }

    public static long index_of(string[] lst_38, string ch_39) {
        long i_40 = 0;
        while ((i_40 < lst_38.Length)) {
            if ((lst_38[(int)(i_40)] == ch_39)) {
                return i_40;
            }
            i_40 = (i_40 + 1);
        };
        return -1;
    }

    public static string encrypt(Cipher c_41, string plaintext_42) {
        string encoded_43 = "";
        long i_44 = 0;
        long n_45 = c_41.key_list.Length;
        while ((i_44 < plaintext_42.Length)) {
            string ch_46 = _substr(plaintext_42, i_44, (i_44 + 1));
            long position_47 = Program.index_of(c_41.key_list, ch_46);
            long new_pos_48 = ((position_47 + c_41.shift_key) % n_45);
            encoded_43 = (encoded_43 + c_41.key_list[(int)(new_pos_48)]);
            i_44 = (i_44 + 1);
        };
        return encoded_43;
    }

    public static string decrypt(Cipher c_49, string encoded_message_50) {
        string decoded_51 = "";
        long i_52 = 0;
        long n_53 = c_49.key_list.Length;
        while ((i_52 < encoded_message_50.Length)) {
            string ch_54 = _substr(encoded_message_50, i_52, (i_52 + 1));
            long position_55 = Program.index_of(c_49.key_list, ch_54);
            long new_pos_56 = ((position_55 - c_49.shift_key) % n_53);
            if ((new_pos_56 < 0)) {
                new_pos_56 = (new_pos_56 + n_53);
            }
            decoded_51 = (decoded_51 + c_49.key_list[(int)(new_pos_56)]);
            i_52 = (i_52 + 1);
        };
        return decoded_51;
    }

    public static string test_end_to_end() {
        string msg_57 = "Hello, this is a modified Caesar cipher";
        Cipher cip_58 = Program.new_cipher("");
        return Program.decrypt(cip_58, Program.encrypt(cip_58, msg_57));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(encoded_60));
            Console.WriteLine(Program._fmtTop(Program.decrypt(ssc_59, encoded_60)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
