// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long gcd(long a_0, long b_1) {
        long x_2 = a_0;
        long y_3 = b_1;
        while ((y_3 != 0)) {
            long t_4 = (x_2 % y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        if ((x_2 < 0)) {
            return -x_2;
        };
        return x_2;
    }

    public static long pow_mod(long base_5, long exp_6, long mod_7) {
        long result_8 = 1;
        long b_9 = (base_5 % mod_7);
        long e_10 = exp_6;
        while ((e_10 > 0)) {
            if (((e_10 % 2) == 1)) {
                result_8 = ((result_8 * b_9) % mod_7);
            }
            e_10 = (e_10 / 2);
            b_9 = ((b_9 * b_9) % mod_7);
        };
        return result_8;
    }

    public static long[] rsa_factor(long d_11, long e_12, long n_13) {
        long k_14 = ((d_11 * e_12) - 1);
        long p_15 = 0;
        long q_16 = 0;
        long g_17 = 2;
        while (((p_15 == 0) && (g_17 < n_13))) {
            long t_18 = k_14;
            while (((t_18 % 2) == 0)) {
                t_18 = (t_18 / 2);
                long x_19 = Program.pow_mod(g_17, t_18, n_13);
                long y_20 = Program.gcd((x_19 - 1), n_13);
                if (((x_19 > 1) && (y_20 > 1))) {
                    p_15 = y_20;
                    q_16 = (n_13 / y_20);
                    break;
                }
            }
            g_17 = (g_17 + 1);
        };
        if ((p_15 > q_16)) {
            return new long[]{q_16, p_15};
        };
        return new long[]{p_15, q_16};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.rsa_factor(3, 16971, 25777)));
            Console.WriteLine(Program._fmtTop(Program.rsa_factor(7331, 11, 27233)));
            Console.WriteLine(Program._fmtTop(Program.rsa_factor(4021, 13, 17711)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
