// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string plaintext_22 = "HELLO";
    static string key_23 = "KEY";
    static string encrypted_24 = Program.vernam_encrypt(plaintext_22, key_23);
    static string decrypted_25 = Program.vernam_decrypt(encrypted_24, key_23);
    public static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((_substr(s_0, i_2, (i_2 + 1)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static long ord(string ch_3) {
        string upper_4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        long idx_5 = Program.indexOf(upper_4, ch_3);
        if ((idx_5 >= 0)) {
            return (65 + idx_5);
        };
        return 0;
    }

    public static string chr(long n_6) {
        string upper_7 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        if (((n_6 >= 65) && (n_6 < 91))) {
            return _substr(upper_7, (n_6 - 65), (n_6 - 64));
        };
        return "?";
    }

    public static string vernam_encrypt(string plaintext_8, string key_9) {
        string ciphertext_10 = "";
        long i_11 = 0;
        while ((i_11 < plaintext_8.Length)) {
            long p_12 = (Program.ord(_substr(plaintext_8, i_11, (i_11 + 1))) - 65);
            long k_13 = (Program.ord(_substr(key_9, (i_11 % key_9.Length), ((i_11 % key_9.Length) + 1))) - 65);
            long ct_14 = (p_12 + k_13);
            while ((ct_14 > 25)) {
                ct_14 = (ct_14 - 26);
            }
            ciphertext_10 = (ciphertext_10 + Program.chr((ct_14 + 65)));
            i_11 = (i_11 + 1);
        };
        return ciphertext_10;
    }

    public static string vernam_decrypt(string ciphertext_15, string key_16) {
        string decrypted_17 = "";
        long i_18 = 0;
        while ((i_18 < ciphertext_15.Length)) {
            long c_19 = Program.ord(_substr(ciphertext_15, i_18, (i_18 + 1)));
            long k_20 = Program.ord(_substr(key_16, (i_18 % key_16.Length), ((i_18 % key_16.Length) + 1)));
            long val_21 = (c_19 - k_20);
            while ((val_21 < 0)) {
                val_21 = (val_21 + 26);
            }
            decrypted_17 = (decrypted_17 + Program.chr((val_21 + 65)));
            i_18 = (i_18 + 1);
        };
        return decrypted_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Plaintext: " + plaintext_22)));
            Console.WriteLine(Program._fmtTop(("Encrypted: " + encrypted_24)));
            Console.WriteLine(Program._fmtTop(("Decrypted: " + decrypted_25)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
