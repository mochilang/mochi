// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ascii_8 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    static string sample_26 = "hallo welt";
    static string enc_27 = Program.encrypt_string(sample_26, 1);
    static string dec_28 = Program.encrypt_string(enc_27, 1);
    public static long xor(long a_0, long b_1) {
        long res_2 = 0;
        long bit_3 = 1;
        long x_4 = a_0;
        long y_5 = b_1;
        while (((x_4 > 0) || (y_5 > 0))) {
            long abit_6 = _mod(x_4, 2);
            long bbit_7 = _mod(y_5, 2);
            if ((abit_6 != bbit_7)) {
                res_2 = (res_2 + bit_3);
            }
            x_4 = (x_4 / 2);
            y_5 = (y_5 / 2);
            bit_3 = (bit_3 * 2);
        };
        return res_2;
    }

    public static long ord(string ch_9) {
        long i_10 = 0;
        while ((i_10 < ascii_8.Length)) {
            if ((_substr(ascii_8, i_10, (i_10 + 1)) == ch_9)) {
                return (32 + i_10);
            }
            i_10 = (i_10 + 1);
        };
        return 0;
    }

    public static string chr(long n_11) {
        if (((n_11 >= 32) && (n_11 < 127))) {
            return _substr(ascii_8, (n_11 - 32), (n_11 - 31));
        };
        return "";
    }

    public static long normalize_key(long key_12) {
        long k_13 = key_12;
        if ((k_13 == 0)) {
            k_13 = 1;
        };
        k_13 = _mod(k_13, 256);
        if ((k_13 < 0)) {
            k_13 = (k_13 + 256);
        };
        return k_13;
    }

    public static string[] encrypt(string content_14, long key_15) {
        long k_16 = Program.normalize_key(key_15);
        string[] result_17 = new string[]{};
        long i_18 = 0;
        while ((i_18 < content_14.Length)) {
            long c_19 = Program.ord(_substr(content_14, i_18, (i_18 + 1)));
            long e_20 = Program.xor(c_19, k_16);
            result_17 = (Enumerable.ToArray(Enumerable.Append(result_17, Program.chr(e_20))));
            i_18 = (i_18 + 1);
        };
        return result_17;
    }

    public static string encrypt_string(string content_21, long key_22) {
        string[] chars_23 = Program.encrypt(content_21, key_22);
        string out_24 = "";
        foreach (string ch_25 in chars_23) {
            out_24 = (out_24 + ch_25);
        };
        return out_24;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.encrypt(sample_26, 1))));
            Console.WriteLine(Program._fmtTop(enc_27));
            Console.WriteLine(Program._fmtTop(dec_28));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
