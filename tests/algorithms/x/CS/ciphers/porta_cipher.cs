// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string UPPER_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string LOWER_1 = "abcdefghijklmnopqrstuvwxyz";
    static string BASE_TOP_2 = "ABCDEFGHIJKLM";
    static string BASE_BOTTOM_3 = "NOPQRSTUVWXYZ";
    public static string to_upper(string s_4) {
        string res_5 = "";
        long i_6 = 0;
        while ((i_6 < s_4.Length)) {
            string ch_7 = _substr(s_4, i_6, (i_6 + 1));
            long j_8 = 0;
            bool replaced_9 = false;
            while ((j_8 < LOWER_1.Length)) {
                if ((_substr(LOWER_1, j_8, (j_8 + 1)) == ch_7)) {
                    res_5 = (res_5 + _substr(UPPER_0, j_8, (j_8 + 1)));
                    replaced_9 = true;
                    break;
                }
                j_8 = (j_8 + 1);
            }
            if ((!replaced_9)) {
                res_5 = (res_5 + ch_7);
            }
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    public static long char_index(string c_10) {
        long i_11 = 0;
        while ((i_11 < UPPER_0.Length)) {
            if ((_substr(UPPER_0, i_11, (i_11 + 1)) == c_10)) {
                return i_11;
            }
            i_11 = (i_11 + 1);
        };
        return -1;
    }

    public static string rotate_right(string s_12, long k_13) {
        long n_14 = s_12.Length;
        long shift_15 = (k_13 % n_14);
        return (_substr(s_12, (n_14 - shift_15), n_14) + _substr(s_12, 0, (n_14 - shift_15)));
    }

    public static string[] table_for(string c_16) {
        long idx_17 = Program.char_index(c_16);
        long shift_18 = (idx_17 / 2);
        string row1_19 = Program.rotate_right(BASE_BOTTOM_3, shift_18);
        string[] pair_20 = new string[]{BASE_TOP_2, row1_19};
        return pair_20;
    }

    public static string[][] generate_table(string key_21) {
        string up_22 = Program.to_upper(key_21);
        long i_23 = 0;
        string[][] result_24 = new string[][]{};
        while ((i_23 < up_22.Length)) {
            string ch_25 = _substr(up_22, i_23, (i_23 + 1));
            string[] pair_26 = Program.table_for(ch_25);
            result_24 = (Enumerable.ToArray(Enumerable.Append(result_24, pair_26)));
            i_23 = (i_23 + 1);
        };
        return result_24;
    }

    public static long str_index(string s_27, string ch_28) {
        long i_29 = 0;
        while ((i_29 < s_27.Length)) {
            if ((_substr(s_27, i_29, (i_29 + 1)) == ch_28)) {
                return i_29;
            }
            i_29 = (i_29 + 1);
        };
        return (0 - 1);
    }

    public static long[] get_position(string[] table_30, string ch_31) {
        long row_32 = 0;
        if ((Program.str_index(table_30[(int)(0)], ch_31) == (0 - 1))) {
            row_32 = 1;
        };
        long col_33 = Program.str_index(table_30[(int)(row_32)], ch_31);
        return new long[]{row_32, col_33};
    }

    public static string get_opponent(string[] table_34, string ch_35) {
        long[] pos_36 = Program.get_position(table_34, ch_35);
        long row_37 = pos_36[(int)(0)];
        long col_38 = pos_36[(int)(1)];
        if ((col_38 == (0 - 1))) {
            return ch_35;
        };
        if ((row_37 == 1)) {
            return _substr(table_34[(int)(0)], col_38, (col_38 + 1));
        };
        return _substr(table_34[(int)(1)], col_38, (col_38 + 1));
    }

    public static string encrypt(string key_39, string words_40) {
        string[][] table_41 = Program.generate_table(key_39);
        string up_words_42 = Program.to_upper(words_40);
        string cipher_43 = "";
        long count_44 = 0;
        long i_45 = 0;
        while ((i_45 < up_words_42.Length)) {
            string ch_46 = _substr(up_words_42, i_45, (i_45 + 1));
            cipher_43 = (cipher_43 + Program.get_opponent(table_41[(int)(count_44)], ch_46));
            count_44 = ((count_44 + 1) % table_41.Length);
            i_45 = (i_45 + 1);
        };
        return cipher_43;
    }

    public static string decrypt(string key_47, string words_48) {
        string res_49 = Program.encrypt(key_47, words_48);
        return res_49;
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(Program.encrypt("marvin", "jessica")));
        Console.WriteLine(Program._fmtTop(Program.decrypt("marvin", "QRACRWU")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
