// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class GCD {
    public long g;
    public long x;
    public long y;
    public override string ToString() => $"GCD {{g = {g}, x = {x}, y = {y}}}";
}
class PublicKey {
    public long key_size;
    public long g;
    public long e2;
    public long p;
    public override string ToString() => $"PublicKey {{key_size = {key_size}, g = {g}, e2 = {e2}, p = {p}}}";
}
class PrivateKey {
    public long key_size;
    public long d;
    public override string ToString() => $"PrivateKey {{key_size = {key_size}, d = {d}}}";
}
class KeyPair {
    public PublicKey public_key;
    public PrivateKey private_key;
    public override string ToString() => $"KeyPair {{public_key = {public_key}, private_key = {private_key}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 123456789;
    public static long rand() {
        seed_0 = (((seed_0 * 1103515245) + 12345) % 2147483647);
        return seed_0;
    }

    public static long rand_range(long min_1, long max_2) {
        return (min_1 + (Program.rand() % ((max_2 - min_1) + 1)));
    }

    public static long mod_pow(long base_3, long exponent_4, long modulus_5) {
        long result_6 = 1;
        long b_7 = (base_3 % modulus_5);
        long e_8 = exponent_4;
        while ((e_8 > 0)) {
            if (((e_8 % 2) == 1)) {
                result_6 = ((result_6 * b_7) % modulus_5);
            }
            e_8 = (e_8 / 2);
            b_7 = ((b_7 * b_7) % modulus_5);
        };
        return result_6;
    }

    public static GCD extended_gcd(long a_9, long b_10) {
        if ((b_10 == 0)) {
            return new GCD{g = a_9, x = 1, y = 0};
        };
        GCD res_11 = Program.extended_gcd(b_10, (a_9 % b_10));
        return new GCD{g = res_11.g, x = res_11.y, y = (res_11.x - ((a_9 / b_10) * res_11.y))};
    }

    public static long mod_inverse(long a_12, long m_13) {
        GCD res_14 = Program.extended_gcd(a_12, m_13);
        if ((res_14.g != 1)) {
            throw new Exception("inverse does not exist");
        };
        long r_15 = (res_14.x % m_13);
        if ((r_15 < 0)) {
            return (r_15 + m_13);
        };
        return r_15;
    }

    public static long pow2(long n_16) {
        long r_17 = 1;
        long i_18 = 0;
        while ((i_18 < n_16)) {
            r_17 = (r_17 * 2);
            i_18 = (i_18 + 1);
        };
        return r_17;
    }

    public static bool is_probable_prime(long n_19, long k_20) {
        if ((n_19 <= 1)) {
            return false;
        };
        if ((n_19 <= 3)) {
            return true;
        };
        if (((n_19 % 2) == 0)) {
            return false;
        };
        long r_21 = 0;
        long d_22 = (n_19 - 1);
        while (((d_22 % 2) == 0)) {
            d_22 = (d_22 / 2);
            r_21 = (r_21 + 1);
        };
        long i_23 = 0;
        while ((i_23 < k_20)) {
            long a_24 = Program.rand_range(2, (n_19 - 2));
            long x_25 = Program.mod_pow(a_24, d_22, n_19);
            if (((x_25 == 1) || (x_25 == (n_19 - 1)))) {
                i_23 = (i_23 + 1);
                continue;
            }
            long j_26 = 1;
            bool found_27 = false;
            while ((j_26 < r_21)) {
                x_25 = Program.mod_pow(x_25, 2, n_19);
                if ((x_25 == (n_19 - 1))) {
                    found_27 = true;
                    break;
                }
                j_26 = (j_26 + 1);
            }
            if ((!found_27)) {
                return false;
            }
            i_23 = (i_23 + 1);
        };
        return true;
    }

    public static long generate_large_prime(long bits_28) {
        long min_29 = Program.pow2((bits_28 - 1));
        long max_30 = (Program.pow2(bits_28) - 1);
        long p_31 = Program.rand_range(min_29, max_30);
        if (((p_31 % 2) == 0)) {
            p_31 = (p_31 + 1);
        };
        while ((!Program.is_probable_prime(p_31, 5))) {
            p_31 = (p_31 + 2);
            if ((p_31 > max_30)) {
                p_31 = (min_29 + 1);
            }
        };
        return p_31;
    }

    public static long primitive_root(long p_32) {
        while (true) {
            long g_33 = Program.rand_range(3, (p_32 - 1));
            if ((Program.mod_pow(g_33, 2, p_32) == 1)) {
                continue;
            }
            if ((Program.mod_pow(g_33, p_32, p_32) == 1)) {
                continue;
            }
            return g_33;
        };
    }

    public static KeyPair generate_key(long key_size_34) {
        long p_35 = Program.generate_large_prime(key_size_34);
        long e1_36 = Program.primitive_root(p_35);
        long d_37 = Program.rand_range(3, (p_35 - 1));
        long e2_38 = Program.mod_inverse(Program.mod_pow(e1_36, d_37, p_35), p_35);
        PublicKey public_key_39 = new PublicKey{key_size = key_size_34, g = e1_36, e2 = e2_38, p = p_35};
        PrivateKey private_key_40 = new PrivateKey{key_size = key_size_34, d = d_37};
        return new KeyPair{public_key = public_key_39, private_key = private_key_40};
    }

    public static void main() {
        long key_size_41 = 16;
        KeyPair kp_42 = Program.generate_key(key_size_41);
        PublicKey pub_43 = kp_42.public_key;
        PrivateKey priv_44 = kp_42.private_key;
        Console.WriteLine(Program._fmtTop((((((((("public key: (" + _fmtStr(pub_43.key_size)) + ", ") + _fmtStr(pub_43.g)) + ", ") + _fmtStr(pub_43.e2)) + ", ") + _fmtStr(pub_43.p)) + ")")));
        Console.WriteLine(Program._fmtTop((((("private key: (" + _fmtStr(priv_44.key_size)) + ", ") + _fmtStr(priv_44.d)) + ")")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
