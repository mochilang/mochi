// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long mod_pow(long base_0, long exp_1, long mod_2) {
        long result_3 = 1;
        long b_4 = (base_0 % mod_2);
        long e_5 = exp_1;
        while ((e_5 > 0)) {
            if (((e_5 % 2) == 1)) {
                result_3 = ((result_3 * b_4) % mod_2);
            }
            e_5 = (e_5 / 2);
            b_4 = ((b_4 * b_4) % mod_2);
        };
        return result_3;
    }

    public static bool contains(long[] xs_6, long val_7) {
        long i_8 = 0;
        while ((i_8 < xs_6.Length)) {
            if ((xs_6[(int)(i_8)] == val_7)) {
                return true;
            }
            i_8 = (i_8 + 1);
        };
        return false;
    }

    public static long find_primitive(long modulus_9) {
        long r_10 = 1;
        while ((r_10 < modulus_9)) {
            long[] li_11 = new long[]{};
            long x_12 = 0;
            bool valid_13 = true;
            while (((x_12 < (modulus_9 - 1)) && valid_13)) {
                long value_14 = Program.mod_pow(r_10, x_12, modulus_9);
                if (Program.contains(li_11, value_14)) {
                    valid_13 = false;
                } else {
                    li_11 = (Enumerable.ToArray(Enumerable.Append(li_11, value_14)));
                    x_12 = (x_12 + 1);
                }
            }
            if (valid_13) {
                return r_10;
            }
            r_10 = (r_10 + 1);
        };
        return -1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.find_primitive(7)));
            Console.WriteLine(Program._fmtTop(Program.find_primitive(11)));
            Console.WriteLine(Program._fmtTop(Program.find_primitive(8)));
            long prime_15 = 23;
            long primitive_root_16 = Program.find_primitive(prime_15);
            if ((primitive_root_16 == (0 - 1))) {
                Console.WriteLine(Program._fmtTop("Cannot find the primitive for the value: -1"));
            } else {
                long a_private_17 = 6;
                long b_private_18 = 15;
                long a_public_19 = Program.mod_pow(primitive_root_16, a_private_17, prime_15);
                long b_public_20 = Program.mod_pow(primitive_root_16, b_private_18, prime_15);
                long a_secret_21 = Program.mod_pow(b_public_20, a_private_17, prime_15);
                long b_secret_22 = Program.mod_pow(a_public_19, b_private_18, prime_15);
                Console.WriteLine(Program._fmtTop(("The key value generated by A is: " + _fmtStr(a_secret_21))));
                Console.WriteLine(Program._fmtTop(("The key value generated by B is: " + _fmtStr(b_secret_22))));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
