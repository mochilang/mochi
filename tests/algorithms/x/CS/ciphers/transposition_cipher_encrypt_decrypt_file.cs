// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long key_18 = 6;
    static string message_19 = "Harshil Darji";
    static string encrypted_20 = Program.encrypt_message(key_18, message_19);
    public static string encrypt_message(long key_0, string message_1) {
        string result_2 = "";
        long col_3 = 0;
        while ((col_3 < key_0)) {
            long pointer_4 = col_3;
            while ((pointer_4 < message_1.Length)) {
                result_2 = (result_2 + message_1.Substring((int)(pointer_4), 1));
                pointer_4 = (pointer_4 + key_0);
            }
            col_3 = (col_3 + 1);
        };
        return result_2;
    }

    public static string decrypt_message(long key_5, string message_6) {
        long msg_len_7 = message_6.Length;
        long num_cols_8 = (msg_len_7 / key_5);
        if (((msg_len_7 % key_5) != 0)) {
            num_cols_8 = (num_cols_8 + 1);
        };
        long num_rows_9 = key_5;
        long num_shaded_boxes_10 = ((num_cols_8 * num_rows_9) - msg_len_7);
        string[] plain_11 = new string[]{};
        long i_12 = 0;
        while ((i_12 < num_cols_8)) {
            plain_11 = (Enumerable.ToArray(Enumerable.Append(plain_11, "")));
            i_12 = (i_12 + 1);
        };
        long col_13 = 0;
        long row_14 = 0;
        long idx_15 = 0;
        while ((idx_15 < msg_len_7)) {
            string ch_16 = message_6.Substring((int)(idx_15), 1);
            plain_11[col_13] = (plain_11[(int)(col_13)] + ch_16);
            col_13 = (col_13 + 1);
            if (((col_13 == num_cols_8) || ((col_13 == (num_cols_8 - 1)) && (row_14 >= (num_rows_9 - num_shaded_boxes_10))))) {
                col_13 = 0;
                row_14 = (row_14 + 1);
            }
            idx_15 = (idx_15 + 1);
        };
        string result_17 = "";
        i_12 = 0;
        while ((i_12 < num_cols_8)) {
            result_17 = (result_17 + plain_11[(int)(i_12)]);
            i_12 = (i_12 + 1);
        };
        return result_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(encrypted_20));
            string decrypted_21 = Program.decrypt_message(key_18, encrypted_20);
            Console.WriteLine(Program._fmtTop(decrypted_21));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
