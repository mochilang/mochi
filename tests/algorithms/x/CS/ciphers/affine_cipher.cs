// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string SYMBOLS_0 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    public static long gcd(long a_1, long b_2) {
        long x_3 = a_1;
        long y_4 = b_2;
        while ((y_4 != 0)) {
            long temp_5 = (x_3 % y_4);
            x_3 = y_4;
            y_4 = temp_5;
        };
        return x_3;
    }

    public static long mod_inverse(long a_6, long m_7) {
        if ((Program.gcd(a_6, m_7) != 1)) {
            throw new Exception((((("mod inverse of " + _fmtStr(a_6)) + " and ") + _fmtStr(m_7)) + " does not exist"));
        };
        long u1_8 = 1;
        long u2_9 = 0;
        long u3_10 = a_6;
        long v1_11 = 0;
        long v2_12 = 1;
        long v3_13 = m_7;
        while ((v3_13 != 0)) {
            long q_14 = (u3_10 / v3_13);
            long t1_15 = (u1_8 - (q_14 * v1_11));
            long t2_16 = (u2_9 - (q_14 * v2_12));
            long t3_17 = (u3_10 - (q_14 * v3_13));
            u1_8 = v1_11;
            u2_9 = v2_12;
            u3_10 = v3_13;
            v1_11 = t1_15;
            v2_12 = t2_16;
            v3_13 = t3_17;
        };
        long res_18 = (u1_8 % m_7);
        if ((res_18 < 0)) {
            return (res_18 + m_7);
        };
        return res_18;
    }

    public static long find_symbol(string ch_19) {
        long i_20 = 0;
        while ((i_20 < SYMBOLS_0.Length)) {
            if ((SYMBOLS_0.Substring((int)(i_20), 1) == ch_19)) {
                return i_20;
            }
            i_20 = (i_20 + 1);
        };
        return -1;
    }

    public static void check_keys(long key_a_21, long key_b_22, string mode_23) {
        int m_24 = SYMBOLS_0.Length;
        if ((mode_23 == "encrypt")) {
            if ((key_a_21 == 1)) {
                throw new Exception("The affine cipher becomes weak when key A is set to 1. Choose different key");
            }
            if ((key_b_22 == 0)) {
                throw new Exception("The affine cipher becomes weak when key B is set to 0. Choose different key");
            }
        };
        if ((((key_a_21 < 0) || (key_b_22 < 0)) || (key_b_22 > (m_24 - 1)))) {
            throw new Exception(("Key A must be greater than 0 and key B must be between 0 and " + _fmtStr((m_24 - 1))));
        };
        if ((Program.gcd(key_a_21, m_24) != 1)) {
            throw new Exception((((("Key A " + _fmtStr(key_a_21)) + " and the symbol set size ") + _fmtStr(m_24)) + " are not relatively prime. Choose a different key."));
        };
    }

    public static string encrypt_message(long key_25, string message_26) {
        int m_27 = SYMBOLS_0.Length;
        long key_a_28 = (key_25 / m_27);
        long key_b_29 = (key_25 % m_27);
        Program.check_keys(key_a_28, key_b_29, "encrypt");
        string cipher_text_30 = "";
        long i_31 = 0;
        while ((i_31 < message_26.Length)) {
            string ch_32 = message_26.Substring((int)(i_31), 1);
            long index_33 = Program.find_symbol(ch_32);
            if ((index_33 >= 0)) {
                cipher_text_30 = (cipher_text_30 + SYMBOLS_0.Substring((int)((((index_33 * key_a_28) + key_b_29) % m_27)), 1));
            } else {
                cipher_text_30 = (cipher_text_30 + ch_32);
            }
            i_31 = (i_31 + 1);
        };
        return cipher_text_30;
    }

    public static string decrypt_message(long key_34, string message_35) {
        int m_36 = SYMBOLS_0.Length;
        long key_a_37 = (key_34 / m_36);
        long key_b_38 = (key_34 % m_36);
        Program.check_keys(key_a_37, key_b_38, "decrypt");
        long inv_39 = Program.mod_inverse(key_a_37, m_36);
        string plain_text_40 = "";
        long i_41 = 0;
        while ((i_41 < message_35.Length)) {
            string ch_42 = message_35.Substring((int)(i_41), 1);
            long index_43 = Program.find_symbol(ch_42);
            if ((index_43 >= 0)) {
                long n_44 = ((index_43 - key_b_38) * inv_39);
                long pos_45 = (n_44 % m_36);
                long final_46 = ((pos_45 < 0) ? (pos_45 + m_36) : pos_45);
                plain_text_40 = (plain_text_40 + SYMBOLS_0.Substring((int)(final_46), 1));
            } else {
                plain_text_40 = (plain_text_40 + ch_42);
            }
            i_41 = (i_41 + 1);
        };
        return plain_text_40;
    }

    public static void main() {
        long key_47 = 4545;
        string msg_48 = "The affine cipher is a type of monoalphabetic substitution cipher.";
        string enc_49 = Program.encrypt_message(key_47, msg_48);
        Console.WriteLine(Program._fmtTop(enc_49));
        Console.WriteLine(Program._fmtTop(Program.decrypt_message(key_47, enc_49)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
