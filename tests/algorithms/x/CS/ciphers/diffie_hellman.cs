// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_5 = 123456789;
    static long PRIME_6 = 23;
    static long generator_13 = 5;
    static long alice_private_14 = Program.generate_private_key();
    static long alice_public_15 = Program.mod_pow(generator_13, alice_private_14);
    static long bob_private_16 = Program.generate_private_key();
    static long bob_public_17 = Program.mod_pow(generator_13, bob_private_16);
    public static string int_to_hex(long n_0) {
        if ((n_0 == 0)) {
            return "0";
        };
        string digits_1 = "0123456789abcdef";
        long num_2 = n_0;
        string res_3 = "";
        while ((num_2 > 0)) {
            long d_4 = (num_2 % 16);
            res_3 = (digits_1.Substring((int)(d_4), 1) + res_3);
            num_2 = (num_2 / 16);
        };
        return res_3;
    }

    public static long rand_int() {
        seed_5 = (((1103515245 * seed_5) + 12345) % 2147483648L);
        return seed_5;
    }

    public static long mod_pow(long base_7, long exp_8) {
        long result_9 = 1;
        long b_10 = (base_7 % PRIME_6);
        long e_11 = exp_8;
        while ((e_11 > 0)) {
            if (((e_11 % 2) == 1)) {
                result_9 = ((result_9 * b_10) % PRIME_6);
            }
            b_10 = ((b_10 * b_10) % PRIME_6);
            e_11 = (e_11 / 2);
        };
        return result_9;
    }

    public static bool is_valid_public_key(long key_12) {
        if (((key_12 < 2) || (key_12 > (PRIME_6 - 2)))) {
            return false;
        };
        return (Program.mod_pow(key_12, ((PRIME_6 - 1) / 2)) == 1);
    }

    public static long generate_private_key() {
        return ((Program.rand_int() % (PRIME_6 - 2)) + 2);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            if ((!Program.is_valid_public_key(alice_public_15))) {
                throw new Exception("Invalid public key");
            }
            if ((!Program.is_valid_public_key(bob_public_17))) {
                throw new Exception("Invalid public key");
            }
            long alice_shared_18 = Program.mod_pow(bob_public_17, alice_private_14);
            long bob_shared_19 = Program.mod_pow(alice_public_15, bob_private_16);
            Console.WriteLine(Program._fmtTop(Program.int_to_hex(alice_shared_18)));
            Console.WriteLine(Program._fmtTop(Program.int_to_hex(bob_shared_19)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
