// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] triagrams_0 = new string[]{"111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"};
    public static string remove_spaces(string s_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < s_1.Length)) {
            string c_4 = _substr(s_1, i_3, (i_3 + 1));
            if ((c_4 != " ")) {
                res_2 = (res_2 + c_4);
            }
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static string char_to_trigram(string ch_5, string alphabet_6) {
        long i_7 = 0;
        while ((i_7 < alphabet_6.Length)) {
            if ((_substr(alphabet_6, i_7, (i_7 + 1)) == ch_5)) {
                return triagrams_0[(int)(i_7)];
            }
            i_7 = (i_7 + 1);
        };
        return "";
    }

    public static string trigram_to_char(string tri_8, string alphabet_9) {
        long i_10 = 0;
        while ((i_10 < triagrams_0.Length)) {
            if ((triagrams_0[(int)(i_10)] == tri_8)) {
                return _substr(alphabet_9, i_10, (i_10 + 1));
            }
            i_10 = (i_10 + 1);
        };
        return "";
    }

    public static string encrypt_part(string part_11, string alphabet_12) {
        string one_13 = "";
        string two_14 = "";
        string three_15 = "";
        long i_16 = 0;
        while ((i_16 < part_11.Length)) {
            string tri_17 = Program.char_to_trigram(_substr(part_11, i_16, (i_16 + 1)), alphabet_12);
            one_13 = (one_13 + _substr(tri_17, 0, 1));
            two_14 = (two_14 + _substr(tri_17, 1, 2));
            three_15 = (three_15 + _substr(tri_17, 2, 3));
            i_16 = (i_16 + 1);
        };
        return ((one_13 + two_14) + three_15);
    }

    public static string encrypt_message(string message_18, string alphabet_19, long period_20) {
        string msg_21 = Program.remove_spaces(message_18);
        string alpha_22 = Program.remove_spaces(alphabet_19);
        if ((alpha_22.Length != 27)) {
            return "";
        };
        string encrypted_numeric_23 = "";
        long i_24 = 0;
        while ((i_24 < msg_21.Length)) {
            long end_25 = (i_24 + period_20);
            if ((end_25 > msg_21.Length)) {
                end_25 = msg_21.Length;
            }
            string part_26 = _substr(msg_21, i_24, end_25);
            encrypted_numeric_23 = (encrypted_numeric_23 + Program.encrypt_part(part_26, alpha_22));
            i_24 = (i_24 + period_20);
        };
        string encrypted_27 = "";
        long j_28 = 0;
        while ((j_28 < encrypted_numeric_23.Length)) {
            string tri_29 = _substr(encrypted_numeric_23, j_28, (j_28 + 3));
            encrypted_27 = (encrypted_27 + Program.trigram_to_char(tri_29, alpha_22));
            j_28 = (j_28 + 3);
        };
        return encrypted_27;
    }

    public static string[] decrypt_part(string part_30, string alphabet_31) {
        string converted_32 = "";
        long i_33 = 0;
        while ((i_33 < part_30.Length)) {
            string tri_34 = Program.char_to_trigram(_substr(part_30, i_33, (i_33 + 1)), alphabet_31);
            converted_32 = (converted_32 + tri_34);
            i_33 = (i_33 + 1);
        };
        string[] result_35 = new string[]{};
        string tmp_36 = "";
        long j_37 = 0;
        while ((j_37 < converted_32.Length)) {
            tmp_36 = (tmp_36 + _substr(converted_32, j_37, (j_37 + 1)));
            if ((tmp_36.Length == part_30.Length)) {
                result_35 = (Enumerable.ToArray(Enumerable.Append(result_35, tmp_36)));
                tmp_36 = "";
            }
            j_37 = (j_37 + 1);
        };
        return result_35;
    }

    public static string decrypt_message(string message_38, string alphabet_39, long period_40) {
        string msg_41 = Program.remove_spaces(message_38);
        string alpha_42 = Program.remove_spaces(alphabet_39);
        if ((alpha_42.Length != 27)) {
            return "";
        };
        string[] decrypted_numeric_43 = new string[]{};
        long i_44 = 0;
        while ((i_44 < msg_41.Length)) {
            long end_45 = (i_44 + period_40);
            if ((end_45 > msg_41.Length)) {
                end_45 = msg_41.Length;
            }
            string part_46 = _substr(msg_41, i_44, end_45);
            string[] groups_47 = Program.decrypt_part(part_46, alpha_42);
            long k_48 = 0;
            while ((k_48 < groups_47[(int)(0)].Length)) {
                string tri_49 = ((_substr(groups_47[(int)(0)], k_48, (k_48 + 1)) + _substr(groups_47[(int)(1)], k_48, (k_48 + 1))) + _substr(groups_47[(int)(2)], k_48, (k_48 + 1)));
                decrypted_numeric_43 = (Enumerable.ToArray(Enumerable.Append(decrypted_numeric_43, tri_49)));
                k_48 = (k_48 + 1);
            }
            i_44 = (i_44 + period_40);
        };
        string decrypted_50 = "";
        long j_51 = 0;
        while ((j_51 < decrypted_numeric_43.Length)) {
            decrypted_50 = (decrypted_50 + Program.trigram_to_char(decrypted_numeric_43[(int)(j_51)], alpha_42));
            j_51 = (j_51 + 1);
        };
        return decrypted_50;
    }

    public static void main() {
        string msg_52 = "DEFEND THE EAST WALL OF THE CASTLE.";
        string alphabet_53 = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ";
        string encrypted_54 = Program.encrypt_message(msg_52, alphabet_53, 5);
        string decrypted_55 = Program.decrypt_message(encrypted_54, alphabet_53, 5);
        Console.WriteLine(Program._fmtTop(("Encrypted: " + encrypted_54)));
        Console.WriteLine(Program._fmtTop(("Decrypted: " + decrypted_55)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
