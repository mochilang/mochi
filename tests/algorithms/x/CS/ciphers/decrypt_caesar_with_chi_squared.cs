// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Result {
    public long shift;
    public double chi;
    public string decoded;
    public override string ToString() => $"Result {{shift = {shift}, chi = {chi.ToString("0.0")}, decoded = \"{decoded}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Result r1_32 = Program.decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", new string[]{}, new Dictionary<string, double>{}, false);
    public static string[] default_alphabet() {
        return new string[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
    }

    public static Dictionary<string, double> default_frequencies() {
        return new Dictionary<string, double>{{"a", 0.08497}, {"b", 0.01492}, {"c", 0.02202}, {"d", 0.04253}, {"e", 0.11162}, {"f", 0.02228}, {"g", 0.02015}, {"h", 0.06094}, {"i", 0.07546}, {"j", 0.00153}, {"k", 0.01292}, {"l", 0.04025}, {"m", 0.02406}, {"n", 0.06749}, {"o", 0.07507}, {"p", 0.01929}, {"q", 0.00095}, {"r", 0.07587}, {"s", 0.06327}, {"t", 0.09356}, {"u", 0.02758}, {"v", 0.00978}, {"w", 0.0256}, {"x", 0.0015}, {"y", 0.01994}, {"z", 0.00077}};
    }

    public static long index_of(string[] xs_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    public static long count_char(string s_3, string ch_4) {
        long count_5 = 0;
        long i_6 = 0;
        while ((i_6 < s_3.Length)) {
            if ((_substr(s_3, i_6, (i_6 + 1)) == ch_4)) {
                count_5 = (count_5 + 1);
            }
            i_6 = (i_6 + 1);
        };
        return count_5;
    }

    public static Result decrypt_caesar_with_chi_squared(string ciphertext_7, string[] cipher_alphabet_8, Dictionary<string, double> frequencies_dict_9, bool case_sensitive_10) {
        string[] alphabet_letters_11 = cipher_alphabet_8;
        if ((alphabet_letters_11.Length == 0)) {
            alphabet_letters_11 = Program.default_alphabet();
        };
        Dictionary<string, double> frequencies_12 = frequencies_dict_9;
        if ((frequencies_12.Count == 0)) {
            frequencies_12 = Program.default_frequencies();
        };
        if ((!case_sensitive_10)) {
            ciphertext_7 = ciphertext_7.ToLower();
        };
        long best_shift_13 = 0;
        double best_chi_14 = 0.0;
        string best_text_15 = "";
        long shift_16 = 0;
        while ((shift_16 < alphabet_letters_11.Length)) {
            string decrypted_17 = "";
            long i_18 = 0;
            while ((i_18 < ciphertext_7.Length)) {
                string ch_19 = _substr(ciphertext_7, i_18, (i_18 + 1));
                long idx_20 = Program.index_of(alphabet_letters_11, ch_19.ToLower());
                if ((idx_20 >= 0)) {
                    int m_21 = alphabet_letters_11.Length;
                    long new_idx_22 = ((idx_20 - shift_16) % m_21);
                    if ((new_idx_22 < 0)) {
                        new_idx_22 = (new_idx_22 + m_21);
                    }
                    string new_char_23 = alphabet_letters_11[(int)(new_idx_22)];
                    if ((case_sensitive_10 && (ch_19 != ch_19.ToLower()))) {
                        decrypted_17 = (decrypted_17 + new_char_23.ToUpper());
                    } else {
                        decrypted_17 = (decrypted_17 + new_char_23);
                    }
                } else {
                    decrypted_17 = (decrypted_17 + ch_19);
                }
                i_18 = (i_18 + 1);
            }
            double chi_24 = 0.0;
            string lowered_25 = (case_sensitive_10 ? decrypted_17.ToLower() : decrypted_17);
            long j_26 = 0;
            while ((j_26 < alphabet_letters_11.Length)) {
                string letter_27 = alphabet_letters_11[(int)(j_26)];
                long occ_28 = Program.count_char(lowered_25, letter_27);
                if ((occ_28 > 0)) {
                    double occf_29 = Convert.ToDouble(occ_28);
                    double expected_30 = ((frequencies_12.ContainsKey(letter_27) ? frequencies_12[letter_27] : 0.0) * occf_29);
                    double diff_31 = (occf_29 - expected_30);
                    chi_24 = (chi_24 + (((diff_31 * diff_31) / expected_30) * occf_29));
                }
                j_26 = (j_26 + 1);
            }
            if (((shift_16 == 0) || (chi_24 < best_chi_14))) {
                best_shift_13 = shift_16;
                best_chi_14 = chi_24;
                best_text_15 = decrypted_17;
            }
            shift_16 = (shift_16 + 1);
        };
        return new Result{shift = best_shift_13, chi = best_chi_14, decoded = best_text_15};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(((((_fmtStr(r1_32.shift) + ", ") + _fmtStr(r1_32.chi)) + ", ") + r1_32.decoded)));
            Result r2_33 = Program.decrypt_caesar_with_chi_squared("crybd cdbsxq", new string[]{}, new Dictionary<string, double>{}, false);
            Console.WriteLine(Program._fmtTop(((((_fmtStr(r2_33.shift) + ", ") + _fmtStr(r2_33.chi)) + ", ") + r2_33.decoded)));
            Result r3_34 = Program.decrypt_caesar_with_chi_squared("Crybd Cdbsxq", new string[]{}, new Dictionary<string, double>{}, true);
            Console.WriteLine(Program._fmtTop(((((_fmtStr(r3_34.shift) + ", ") + _fmtStr(r3_34.chi)) + ", ") + r3_34.decoded)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
