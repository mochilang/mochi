// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool contains(string[] xs_0, string x_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == x_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static long index_of(string[] xs_3, string x_4) {
        long i_5 = 0;
        while ((i_5 < xs_3.Length)) {
            if ((xs_3[(int)(i_5)] == x_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    public static string prepare_input(string dirty_6) {
        string letters_7 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string upper_dirty_8 = dirty_6.ToUpper();
        string filtered_9 = "";
        long i_10 = 0;
        while ((i_10 < upper_dirty_8.Length)) {
            string c_11 = _substr(upper_dirty_8, i_10, (i_10 + 1));
            if ((letters_7.Contains(c_11))) {
                filtered_9 = (filtered_9 + c_11);
            }
            i_10 = (i_10 + 1);
        };
        if ((filtered_9.Length < 2)) {
            return filtered_9;
        };
        string clean_12 = "";
        i_10 = 0;
        while ((i_10 < (filtered_9.Length - 1))) {
            string c1_13 = _substr(filtered_9, i_10, (i_10 + 1));
            string c2_14 = _substr(filtered_9, (i_10 + 1), (i_10 + 2));
            clean_12 = (clean_12 + c1_13);
            if ((c1_13 == c2_14)) {
                clean_12 = (clean_12 + "X");
            }
            i_10 = (i_10 + 1);
        };
        clean_12 = (clean_12 + _substr(filtered_9, (filtered_9.Length - 1), filtered_9.Length));
        if (((clean_12.Length % 2) == 1)) {
            clean_12 = (clean_12 + "X");
        };
        return clean_12;
    }

    public static string[] generate_table(string key_15) {
        string alphabet_16 = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
        string[] table_17 = new string[]{};
        string upper_key_18 = key_15.ToUpper();
        long i_19 = 0;
        while ((i_19 < upper_key_18.Length)) {
            string c_20 = _substr(upper_key_18, i_19, (i_19 + 1));
            if ((alphabet_16.Contains(c_20))) {
                if ((!Program.contains(table_17, c_20))) {
                    table_17 = (Enumerable.ToArray(Enumerable.Append(table_17, c_20)));
                }
            }
            i_19 = (i_19 + 1);
        };
        i_19 = 0;
        while ((i_19 < alphabet_16.Length)) {
            string c_21 = _substr(alphabet_16, i_19, (i_19 + 1));
            if ((!Program.contains(table_17, c_21))) {
                table_17 = (Enumerable.ToArray(Enumerable.Append(table_17, c_21)));
            }
            i_19 = (i_19 + 1);
        };
        return table_17;
    }

    public static string encode(string plaintext_22, string key_23) {
        string[] table_24 = Program.generate_table(key_23);
        string text_25 = Program.prepare_input(plaintext_22);
        string cipher_26 = "";
        long i_27 = 0;
        while ((i_27 < text_25.Length)) {
            string c1_28 = _substr(text_25, i_27, (i_27 + 1));
            string c2_29 = _substr(text_25, (i_27 + 1), (i_27 + 2));
            long idx1_30 = Program.index_of(table_24, c1_28);
            long idx2_31 = Program.index_of(table_24, c2_29);
            long row1_32 = (idx1_30 / 5);
            long col1_33 = (idx1_30 % 5);
            long row2_34 = (idx2_31 / 5);
            long col2_35 = (idx2_31 % 5);
            if ((row1_32 == row2_34)) {
                cipher_26 = (cipher_26 + table_24[(int)(((row1_32 * 5) + ((col1_33 + 1) % 5)))]);
                cipher_26 = (cipher_26 + table_24[(int)(((row2_34 * 5) + ((col2_35 + 1) % 5)))]);
            } else if ((col1_33 == col2_35)) {
                cipher_26 = (cipher_26 + table_24[(int)(((((row1_32 + 1) % 5) * 5) + col1_33))]);
                cipher_26 = (cipher_26 + table_24[(int)(((((row2_34 + 1) % 5) * 5) + col2_35))]);
            } else {
                cipher_26 = (cipher_26 + table_24[(int)(((row1_32 * 5) + col2_35))]);
                cipher_26 = (cipher_26 + table_24[(int)(((row2_34 * 5) + col1_33))]);
            }
            i_27 = (i_27 + 2);
        };
        return cipher_26;
    }

    public static string decode(string cipher_36, string key_37) {
        string[] table_38 = Program.generate_table(key_37);
        string plain_39 = "";
        long i_40 = 0;
        while ((i_40 < cipher_36.Length)) {
            string c1_41 = _substr(cipher_36, i_40, (i_40 + 1));
            string c2_42 = _substr(cipher_36, (i_40 + 1), (i_40 + 2));
            long idx1_43 = Program.index_of(table_38, c1_41);
            long idx2_44 = Program.index_of(table_38, c2_42);
            long row1_45 = (idx1_43 / 5);
            long col1_46 = (idx1_43 % 5);
            long row2_47 = (idx2_44 / 5);
            long col2_48 = (idx2_44 % 5);
            if ((row1_45 == row2_47)) {
                plain_39 = (plain_39 + table_38[(int)(((row1_45 * 5) + ((col1_46 + 4) % 5)))]);
                plain_39 = (plain_39 + table_38[(int)(((row2_47 * 5) + ((col2_48 + 4) % 5)))]);
            } else if ((col1_46 == col2_48)) {
                plain_39 = (plain_39 + table_38[(int)(((((row1_45 + 4) % 5) * 5) + col1_46))]);
                plain_39 = (plain_39 + table_38[(int)(((((row2_47 + 4) % 5) * 5) + col2_48))]);
            } else {
                plain_39 = (plain_39 + table_38[(int)(((row1_45 * 5) + col2_48))]);
                plain_39 = (plain_39 + table_38[(int)(((row2_47 * 5) + col1_46))]);
            }
            i_40 = (i_40 + 2);
        };
        return plain_39;
    }

    public static void main() {
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Encoded:"), Program._fmtTop(Program.encode("BYE AND THANKS", "GREETING"))}));
        Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Decoded:"), Program._fmtTop(Program.decode("CXRBANRLBALQ", "GREETING"))}));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
