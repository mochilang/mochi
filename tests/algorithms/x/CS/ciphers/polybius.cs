// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[][] square_0 = new string[][]{new string[]{"a", "b", "c", "d", "e"}, new string[]{"f", "g", "h", "i", "k"}, new string[]{"l", "m", "n", "o", "p"}, new string[]{"q", "r", "s", "t", "u"}, new string[]{"v", "w", "x", "y", "z"}};
    public static long[] letter_to_numbers(string letter_1) {
        long i_2 = 0;
        while ((i_2 < square_0.Length)) {
            long j_3 = 0;
            while ((j_3 < square_0[(int)(i_2)].Length)) {
                if ((square_0[(int)(i_2)][(int)(j_3)] == letter_1)) {
                    return new long[]{(i_2 + 1), (j_3 + 1)};
                }
                j_3 = (j_3 + 1);
            }
            i_2 = (i_2 + 1);
        };
        return new long[]{0, 0};
    }

    public static string numbers_to_letter(long index1_4, long index2_5) {
        return square_0[(int)((index1_4 - 1))][(int)((index2_5 - 1))];
    }

    public static long char_to_int(string ch_6) {
        if ((ch_6 == "1")) {
            return 1;
        };
        if ((ch_6 == "2")) {
            return 2;
        };
        if ((ch_6 == "3")) {
            return 3;
        };
        if ((ch_6 == "4")) {
            return 4;
        };
        if ((ch_6 == "5")) {
            return 5;
        };
        return 0;
    }

    public static string encode(string message_7) {
        message_7 = message_7.ToLower();
        string encoded_8 = "";
        long i_9 = 0;
        while ((i_9 < message_7.Length)) {
            string ch_10 = message_7.Substring((int)(i_9), 1);
            if ((ch_10 == "j")) {
                ch_10 = "i";
            }
            if ((ch_10 != " ")) {
                long[] nums_11 = Program.letter_to_numbers(ch_10);
                encoded_8 = ((encoded_8 + _fmtStr(nums_11[(int)(0)])) + _fmtStr(nums_11[(int)(1)]));
            } else {
                encoded_8 = (encoded_8 + " ");
            }
            i_9 = (i_9 + 1);
        };
        return encoded_8;
    }

    public static string decode(string message_12) {
        string decoded_13 = "";
        long i_14 = 0;
        while ((i_14 < message_12.Length)) {
            if ((message_12.Substring((int)(i_14), 1) == " ")) {
                decoded_13 = (decoded_13 + " ");
                i_14 = (i_14 + 1);
            } else {
                long index1_15 = Program.char_to_int(message_12.Substring((int)(i_14), 1));
                long index2_16 = Program.char_to_int(message_12.Substring((int)((i_14 + 1)), 1));
                string letter_17 = Program.numbers_to_letter(index1_15, index2_16);
                decoded_13 = (decoded_13 + letter_17);
                i_14 = (i_14 + 2);
            }
        };
        return decoded_13;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.encode("test message")));
            Console.WriteLine(Program._fmtTop(Program.encode("Test Message")));
            Console.WriteLine(Program._fmtTop(Program.decode("44154344 32154343112215")));
            Console.WriteLine(Program._fmtTop(Program.decode("4415434432154343112215")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
