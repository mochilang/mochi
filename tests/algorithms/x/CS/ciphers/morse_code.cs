// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] CHARS_0 = new string[]{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "};
    static string[] CODES_1 = new string[]{".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"};
    static string msg_25 = "Morse code here!";
    public static string to_upper_char(string c_2) {
        if ((c_2 == "a")) {
            return "A";
        };
        if ((c_2 == "b")) {
            return "B";
        };
        if ((c_2 == "c")) {
            return "C";
        };
        if ((c_2 == "d")) {
            return "D";
        };
        if ((c_2 == "e")) {
            return "E";
        };
        if ((c_2 == "f")) {
            return "F";
        };
        if ((c_2 == "g")) {
            return "G";
        };
        if ((c_2 == "h")) {
            return "H";
        };
        if ((c_2 == "i")) {
            return "I";
        };
        if ((c_2 == "j")) {
            return "J";
        };
        if ((c_2 == "k")) {
            return "K";
        };
        if ((c_2 == "l")) {
            return "L";
        };
        if ((c_2 == "m")) {
            return "M";
        };
        if ((c_2 == "n")) {
            return "N";
        };
        if ((c_2 == "o")) {
            return "O";
        };
        if ((c_2 == "p")) {
            return "P";
        };
        if ((c_2 == "q")) {
            return "Q";
        };
        if ((c_2 == "r")) {
            return "R";
        };
        if ((c_2 == "s")) {
            return "S";
        };
        if ((c_2 == "t")) {
            return "T";
        };
        if ((c_2 == "u")) {
            return "U";
        };
        if ((c_2 == "v")) {
            return "V";
        };
        if ((c_2 == "w")) {
            return "W";
        };
        if ((c_2 == "x")) {
            return "X";
        };
        if ((c_2 == "y")) {
            return "Y";
        };
        if ((c_2 == "z")) {
            return "Z";
        };
        return c_2;
    }

    public static string to_upper(string s_3) {
        string res_4 = "";
        long i_5 = 0;
        while ((i_5 < s_3.Length)) {
            res_4 = (res_4 + Program.to_upper_char(s_3.Substring((int)(i_5), 1)));
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static long index_of(string[] xs_6, string target_7) {
        long i_8 = 0;
        while ((i_8 < xs_6.Length)) {
            if ((xs_6[(int)(i_8)] == target_7)) {
                return i_8;
            }
            i_8 = (i_8 + 1);
        };
        return -1;
    }

    public static string encrypt(string message_9) {
        string msg_10 = Program.to_upper(message_9);
        string res_11 = "";
        long i_12 = 0;
        while ((i_12 < msg_10.Length)) {
            string c_13 = msg_10.Substring((int)(i_12), 1);
            long idx_14 = Program.index_of(CHARS_0, c_13);
            if ((idx_14 >= 0)) {
                if ((res_11 != "")) {
                    res_11 = (res_11 + " ");
                }
                res_11 = (res_11 + CODES_1[(int)(idx_14)]);
            }
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    public static string[] split_spaces(string s_15) {
        string[] res_16 = new string[]{};
        string current_17 = "";
        long i_18 = 0;
        while ((i_18 < s_15.Length)) {
            string ch_19 = s_15.Substring((int)(i_18), 1);
            if ((ch_19 == " ")) {
                if ((current_17 != "")) {
                    res_16 = (Enumerable.ToArray(Enumerable.Append(res_16, current_17)));
                    current_17 = "";
                }
            } else {
                current_17 = (current_17 + ch_19);
            }
            i_18 = (i_18 + 1);
        };
        if ((current_17 != "")) {
            res_16 = (Enumerable.ToArray(Enumerable.Append(res_16, current_17)));
        };
        return res_16;
    }

    public static string decrypt(string message_20) {
        string[] parts_21 = Program.split_spaces(message_20);
        string res_22 = "";
        foreach (string code_23 in parts_21) {
            long idx_24 = Program.index_of(CODES_1, code_23);
            if ((idx_24 >= 0)) {
                res_22 = (res_22 + CHARS_0[(int)(idx_24)]);
            }
        };
        return res_22;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(msg_25));
            string enc_26 = Program.encrypt(msg_25);
            Console.WriteLine(Program._fmtTop(enc_26));
            string dec_27 = Program.decrypt(enc_26);
            Console.WriteLine(Program._fmtTop(dec_27));
            Console.WriteLine(Program._fmtTop(Program.encrypt("Sos!")));
            Console.WriteLine(Program._fmtTop(Program.decrypt("... --- ... -.-.--")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
