// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 1;
    static string message_30 = "HELLO WORLD";
    static long block_size_31 = Program.generate_valid_block_size(message_30.Length);
    static long[] key_32 = Program.generate_permutation_key(block_size_31);
    static string encrypted_33 = Program.encrypt(message_30, key_32, block_size_31);
    static string decrypted_34 = Program.decrypt(encrypted_33, key_32);
    public static long rand(long max_1) {
        seed_0 = (((seed_0 * 1103515245) + 12345) % 2147483647);
        return (seed_0 % max_1);
    }

    public static long generate_valid_block_size(long message_length_2) {
        long[] factors_3 = new long[]{};
        long i_4 = 2;
        while ((i_4 <= message_length_2)) {
            if (((message_length_2 % i_4) == 0)) {
                factors_3 = (Enumerable.ToArray(Enumerable.Append(factors_3, i_4)));
            }
            i_4 = (i_4 + 1);
        };
        long idx_5 = Program.rand(factors_3.Length);
        return factors_3[(int)(idx_5)];
    }

    public static long[] generate_permutation_key(long block_size_6) {
        long[] digits_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 < block_size_6)) {
            digits_7 = (Enumerable.ToArray(Enumerable.Append(digits_7, i_8)));
            i_8 = (i_8 + 1);
        };
        long j_9 = (block_size_6 - 1);
        while ((j_9 > 0)) {
            long k_10 = Program.rand((j_9 + 1));
            long temp_11 = digits_7[(int)(j_9)];
            digits_7[j_9] = digits_7[(int)(k_10)];
            digits_7[k_10] = temp_11;
            j_9 = (j_9 - 1);
        };
        return digits_7;
    }

    public static string encrypt(string message_12, long[] key_13, long block_size_14) {
        string encrypted_15 = "";
        long i_16 = 0;
        while ((i_16 < message_12.Length)) {
            string block_17 = _substr(message_12, i_16, (i_16 + block_size_14));
            long j_18 = 0;
            while ((j_18 < block_size_14)) {
                encrypted_15 = (encrypted_15 + _substr(block_17, key_13[(int)(j_18)], (key_13[(int)(j_18)] + 1)));
                j_18 = (j_18 + 1);
            }
            i_16 = (i_16 + block_size_14);
        };
        return encrypted_15;
    }

    public static string[] repeat_string(long times_19) {
        string[] res_20 = new string[]{};
        long i_21 = 0;
        while ((i_21 < times_19)) {
            res_20 = (Enumerable.ToArray(Enumerable.Append(res_20, "")));
            i_21 = (i_21 + 1);
        };
        return res_20;
    }

    public static string decrypt(string encrypted_22, long[] key_23) {
        long klen_24 = key_23.Length;
        string decrypted_25 = "";
        long i_26 = 0;
        while ((i_26 < encrypted_22.Length)) {
            string block_27 = _substr(encrypted_22, i_26, (i_26 + klen_24));
            string[] original_28 = Program.repeat_string(klen_24);
            long j_29 = 0;
            while ((j_29 < klen_24)) {
                original_28[key_23[(int)(j_29)]] = _substr(block_27, j_29, (j_29 + 1));
                j_29 = (j_29 + 1);
            }
            j_29 = 0;
            while ((j_29 < klen_24)) {
                decrypted_25 = (decrypted_25 + original_28[(int)(j_29)]);
                j_29 = (j_29 + 1);
            }
            i_26 = (i_26 + klen_24);
        };
        return decrypted_25;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Block size: " + _fmtStr(block_size_31))));
            Console.WriteLine(Program._fmtTop(("Key: " + _fmtStr(key_32))));
            Console.WriteLine(Program._fmtTop(("Encrypted: " + encrypted_33)));
            Console.WriteLine(Program._fmtTop(("Decrypted: " + decrypted_34)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
