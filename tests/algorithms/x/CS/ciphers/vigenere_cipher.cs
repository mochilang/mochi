// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string LETTERS_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string LETTERS_LOWER_1 = "abcdefghijklmnopqrstuvwxyz";
    static string key_13 = "HDarji";
    static string message_14 = "This is Harshil Darji from Dharmaj.";
    static string key_up_15 = Program.to_upper_string(key_13);
    static string encrypted_16 = "";
    static long key_index_17 = 0;
    static long i_18 = 0;
    public static long find_index(string s_2, string ch_3) {
        long i_4 = 0;
        while ((i_4 < s_2.Length)) {
            if ((s_2.Substring((int)(i_4), 1) == ch_3)) {
                return i_4;
            }
            i_4 = (i_4 + 1);
        };
        return -1;
    }

    public static string to_upper_char(string ch_5) {
        long idx_6 = Program.find_index(LETTERS_LOWER_1, ch_5);
        if ((idx_6 >= 0)) {
            return LETTERS_0.Substring((int)(idx_6), 1);
        };
        return ch_5;
    }

    public static string to_lower_char(string ch_7) {
        long idx_8 = Program.find_index(LETTERS_0, ch_7);
        if ((idx_8 >= 0)) {
            return LETTERS_LOWER_1.Substring((int)(idx_8), 1);
        };
        return ch_7;
    }

    public static bool is_upper(string ch_9) {
        return (Program.find_index(LETTERS_0, ch_9) >= 0);
    }

    public static string to_upper_string(string s_10) {
        string res_11 = "";
        long i_12 = 0;
        while ((i_12 < s_10.Length)) {
            res_11 = (res_11 + Program.to_upper_char(s_10.Substring((int)(i_12), 1)));
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_18 < message_14.Length)) {
                string symbol_19 = message_14.Substring((int)(i_18), 1);
                string upper_symbol_20 = Program.to_upper_char(symbol_19);
                long num_21 = Program.find_index(LETTERS_0, upper_symbol_20);
                if ((num_21 >= 0)) {
                    num_21 = (num_21 + Program.find_index(LETTERS_0, key_up_15.Substring((int)(key_index_17), 1)));
                    num_21 = _mod(num_21, LETTERS_0.Length);
                    if (Program.is_upper(symbol_19)) {
                        encrypted_16 = (encrypted_16 + LETTERS_0.Substring((int)(num_21), 1));
                    } else {
                        encrypted_16 = (encrypted_16 + Program.to_lower_char(LETTERS_0.Substring((int)(num_21), 1)));
                    }
                    key_index_17 = (key_index_17 + 1);
                    if ((key_index_17 == key_up_15.Length)) {
                        key_index_17 = 0;
                    }
                } else {
                    encrypted_16 = (encrypted_16 + symbol_19);
                }
                i_18 = (i_18 + 1);
            }
            Console.WriteLine(Program._fmtTop(encrypted_16));
            string decrypted_22 = "";
            key_index_17 = 0;
            i_18 = 0;
            while ((i_18 < encrypted_16.Length)) {
                string symbol_23 = encrypted_16.Substring((int)(i_18), 1);
                string upper_symbol_24 = Program.to_upper_char(symbol_23);
                long num_25 = Program.find_index(LETTERS_0, upper_symbol_24);
                if ((num_25 >= 0)) {
                    num_25 = (num_25 - Program.find_index(LETTERS_0, key_up_15.Substring((int)(key_index_17), 1)));
                    num_25 = _mod(num_25, LETTERS_0.Length);
                    if (Program.is_upper(symbol_23)) {
                        decrypted_22 = (decrypted_22 + LETTERS_0.Substring((int)(num_25), 1));
                    } else {
                        decrypted_22 = (decrypted_22 + Program.to_lower_char(LETTERS_0.Substring((int)(num_25), 1)));
                    }
                    key_index_17 = (key_index_17 + 1);
                    if ((key_index_17 == key_up_15.Length)) {
                        key_index_17 = 0;
                    }
                } else {
                    decrypted_22 = (decrypted_22 + symbol_23);
                }
                i_18 = (i_18 + 1);
            }
            Console.WriteLine(Program._fmtTop(decrypted_22));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
